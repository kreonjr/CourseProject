project_url	file_text	clean_text
https://github.com/97agupta/CourseProject	"team 'buddie' project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. a. aman gupta, amang5 (captain) b. venkata sandeep chillara, vsc5 c. katie shin, ks56 2. which paper have you chosen? causal topic modeling hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? a. yes there are two datasets mentioned in the paper, a new york times article dataset and a stock time series dataset. the nyt dataset is available here: http://www.ldc.upenn.edu/catalog/ catalogentry.jsp?catalogid=ldc2008t19. a stock time series dataset can be requested and pulled from here: https://finance.yahoo.com/quote/aapl/history/ 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? n/a 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? n/a team buddie final documentation each team must submit the software code produced for the project along with a written documentation. the documentation should consist of the following elements: 1) an overview of the function of the code (i.e., what it does and what it can be used for). main.py  compiles code above to automate the process of running plsa without priors first and then with priors until we get the convergence we want (0.95+). this is to determine the correlation between us stock data and new york times articles per date. if the file structures match up, we can replace either the stock data or articles with other data sources to get the correlation between those two data sets also. this project is an attempt to reproduce the following paper: https://dl-acm-org.proxy2.library.illinois.edu/doi/10.1145/2505515.2505612 2) documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. - plsa_without_prior.py : initial run of plsa without any priors - plsa_with_prior.py : subsequent plsa runs with priors determined from granger and pearson tests - word_retriever.py : retrieves various info required such as word frequency per day - analysis.py : contains code for running the granger and pearson coefficient tests - analysis.ipynb : a jupyter notebook containing the same code in analysis.py allowing for more exploration and changes as needed. we utilized this notebook to explore our csvs, view dataframes, and run our analysis. - main.py : 1. retrieve and normalize stock data 2. initially run plsa without prior, and run the analysis (granger and pearson coefficient tests) to retrieve priors 3. using the priors retrieved above, iterate with the plsa with prior until the desired convergence is achieved. 3) documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. how to run the project: - pull from github repo https://github.com/97agupta/courseproject - install the necessary libraries, with the most notable one being - pip install plsa - place nyt corpus in the correct folder format - can be retrieved from https://catalog.ldc.upenn.edu/ldc2008t19 - to run the iterative code, run 'python3 main.py' - to run sections of the iterative code, run 'python3 <filename>.py' sidenote: - after running the granger test, the f values for different topics need to be manually inspected and relevant topics need to be parsed out. these are then used to pull top words which are used for a pearson test. - running the plsa as written can take multiple hours, so we have provided the end results for our 1st iteration in the /data folder for your viewing 4) brief description of contribution of each team member in case of a multi-person team - katie - ran initial plsa algorithm without any priors - with the relevant topics retrieved from granger test, retrieved the top 20 relevant words per topic and their frequencies per date. - aman: - parsed iowa stock exchange data - used external time series & plsa topics to write functions for a granger test to find relevant topics - used external time series & top words per topic to write functions for a pearson test to create sub-topics from our topics with positively and negatively correlated words for use as a prior - sandeep - the plsa library we were using did not have a provision to take priors and use that as part of the algorithm. so extended the library to accept priors and use them as part of the m-step of plsa using numpy einsum. - read the priors as input from csv of the previous steps, filter only the words that exist in the particular day's corpus and feed them into the plsa step and do multiple iterations. team buddie topic: reproducing a paper (casual topic mining) katie shin, sandeep venkata, aman gupta general idea * can we combine probabilistic topic models and causal analysis with external time series to find topics in a corpus of documents that are both coherent semantically and correlated with the time series? * reproduced this paper by utilizing two data sets from the paper: * corpus: nyt articles * time series: iowa presidential stock markets * looking for topics that specifically caused support for bush or gore to change. based on: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm '13). association for computing machinery, new york, ny, usa, 885-890. doi:https://doi.org/10.1145/2505515.2505612 how to use software - pull from github repo https://github.com/97agupta/courseproject - install the necessary libraries, with the most notable one being - pip install plsa - place nyt corpus in the correct folder format - can be retrieved from https://catalog.ldc.upenn.edu/ldc2008t19 - folder: courseproject/data/<month>/<day>/<filename>.xml - to run the iterative code, run 'python3 main.py' - to run sections of the iterative code, run 'python3 <filename>.py' (note: this takes hours to run, and therefore we have provided a sample run w/ end-results here) implementation part 1 part 2 part 3 part 4 part 5 implementation part 1 * for each group of xml files that belong to a single day (05/01/2000 - 10/31/2000), we ran and picked the best model out of 5 plsa models. * from the top model, we extract the top 5 highest probability words for each date that will be considered the topic. * library used: plsa implementation (part 2) part 2 * based on topics identified during plsa, we identify related topics by running a granger test between the change in probability of topics and the normalized price of one candidate. * we use a lag of 5 days & create stationary time series for both of our granger test variables. * not every topic has enough data points for testing, so we skip over topics where the granger test fails * based on the highest f-value for the each granger test, we determine if a topic is or isn't correlated with the external time series. implementation (parts 3 & 4) part 3 part 4 * from the best plsa model (refer to part1), we retrieved the top 20 relevant words (i.e. highest probability) per topic that were deemed related from the granger test. * for each word series, we run a pearson coefficient test comparing the external time series and the frequency of top words of each topic. * we then segment these words into negative and positive correlations, returning words that when combined, meet our probability threshold (0.75) * these words and then used as a prior for the plsa algorithm. implementation (part 5) part 5 * we used the pypi package for plsa but it didn't offer support for including priors to guide the plsa as per user inputs. * so we enlisted the source code and extended the plsa algorithm to overwrite the m step. * the library essentially uses numpy 'einsum' to efficiently perform multi-dimensional matrix operations. * we modified the m-step of the algorithm to include the parameters (m) and the pseudo counts. * the key part was to look for only the words that occured in the day. results (1st iteration) plsa without prior * after running our first plsa on the corpus of nyt documents, we found 343 topics. of these topics, only 4 topics showed causality with our external time series: bush, gore, campaign, and clinton. * for each of these topics, we extracted the top words and segmented each topic into two topics made up of positively and negatively influenced words. these new topics were used a prior for our second iteration. here is an example of the gore topic, being split into two: results (2nd iteration) * with a new iteration using plsa with prior, we find the following relevant topics using our granger test: * teacher, oil, drug, debate * this is a clear improvement over our original plsa, as it delves deeper into the issues that moved the campaign likelihoods for each candidate * bush, gore, campaign, clinton -- this clearly shows that our model is finding topics that are more related to the campaign issues & with further iterations we expect this to further improve. next steps * we would want to run further iterations on these topics. * additionally, instead of using the full nyt corpus we could identify paragraphs that mention bush, gore, or presidential to create a smaller corpus from which to topic mine. * we would want to find a more robust method of comparing and understanding the different f-scores from each lag of our granger test. thanks! (this is buddie) team buddie progress report topic: reproducing a causal topic mining paper team members: - aman gupta (@amang5) - katie shin (@ks56) - venkata sandeep chillara (@vsc5) please upload your progress report to the github repo shared on cmt. the progress report should give us an idea of how you're implementing your proposal. it should answer 3 main questions: 1) which tasks have been completed? - implemented the initial plsa algorithms using https://github.com/yedivanseven/plsa. modified the source code to include the prior. (our initial implementation for psla can be found in main.py) - ingested and parsed stock data for the 2000 presidential election using daily markets in a jupyter notebook. calculated normalized price for each candidate on a daily basis and stored this data in a data frame. this can be seen in (stock data parsing & normalization.ipynb with stock data in the stock_data folder) - explored using https://www.statsmodels.org/stable/generated/statsmodels.tsa.stattools.grangercausality tests.html for running granger tests to find casual topics based on a time series 2) which tasks are pending? - organize the plsa results in a date-topic-probability format so that it can be used in the granger test run granger tests for topics using results from first task with time series plsa output - understand and run pearson coefficients tests to find casual words from relevant documents - use output from pearson coefficient tests as prior for plsa. - add readme.md with steps to organize nyt corpus data in and run the code 3) are you facing any challenges? - plsa process time for the nyt corpus times out when run on a local machine. one option is to look into https://colab.research.google.com/ - since we need the date-topic-probability, we don't have to run plsa on the entire dataset - the version of plsa with priors isn't readily available, we had to implement that on our own. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. nyt corpus folder structure in order to run the plsa algorithm, the nyt corpus structure has to be '../courseproject/data//' stock data folder structure we save the stock prices from may 2000 to oct 2000 as htm files in the format of '_2000.htm' in a folder called 'stock_data'. the htm files can be saved from https://iemweb.biz.uiowa.edu/pricehistory/pricehistory_selectcontract.cfm?market_id=29 code content plsa_without_prior.py: initial run of plsa without any priors plsa_with_prior.py: subsequent plsa runs with priors determined from granger and pearson tests word_retriever.py: retrieves various info required such as word frequency per day analysis.py: contains code for running the granger and pearson coefficient tests main.py: retrieve and normalize stock data initially run plsa without prior, and run the analysis (granger and pearson coefficient tests) to retrieve priors using the priors retrieved above, iterate with the plsa with prior until the desired convergence is achieved. how to run code once the data files are saved in the structure defined above, you should be able to run python3 main.py which will converge after a desired convergence has been retrieved."	['team', 'buddie', 'project', 'proposal', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'aman', 'gupta', 'amang', 'b', 'venkata', 'sandeep', 'chillara', 'vsc', 'c', 'katie', 'shin', 'ks', 'paper', 'chosen', 'causal', 'topic', 'modeling', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'mining', 'topics', 'text', 'data', 'iterative', 'time', 'series', 'feedback', 'proceedings', 'nd', 'acm', 'international', 'conference', 'information', 'knowledge', 'management', 'cikm', 'new', 'york', 'ny', 'usa', 'doi', 'programming', 'language', 'plan', 'use', 'python', 'obtain', 'datasets', 'used', 'evaluation', 'yes', 'two', 'mentioned', 'times', 'article', 'dataset', 'stock', 'nyt', 'available', 'httpwwwldcupenneducatalog', 'catalogentryjspcatalogidldct', 'requested', 'pulled', 'httpsfinanceyahoocomquoteaaplhistory', 'answer', 'question', 'similar', 'eg', 'recent', 'version', 'another', 'nature', 'na', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'final', 'documentation', 'must', 'submit', 'software', 'code', 'produced', 'along', 'written', 'consist', 'following', 'elements', 'overview', 'function', 'ie', 'mainpy', 'compiles', 'automate', 'process', 'running', 'plsa', 'without', 'priors', 'first', 'get', 'convergence', 'want', 'determine', 'correlation', 'us', 'articles', 'per', 'date', 'file', 'structures', 'match', 'replace', 'either', 'sources', 'sets', 'also', 'attempt', 'reproduce', 'httpsdlacmorgproxylibraryillinoisedudoi', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'future', 'extension', 'improvement', 'plsa_without_priorpy', 'initial', 'run', 'plsa_with_priorpy', 'subsequent', 'runs', 'determined', 'granger', 'pearson', 'tests', 'word_retrieverpy', 'retrieves', 'various', 'info', 'required', 'word', 'frequency', 'day', 'analysispy', 'contains', 'coefficient', 'analysisipynb', 'jupyter', 'notebook', 'containing', 'allowing', 'exploration', 'changes', 'needed', 'utilized', 'explore', 'csvs', 'view', 'dataframes', 'analysis', 'retrieve', 'normalize', 'initially', 'prior', 'using', 'retrieved', 'iterate', 'desired', 'achieved', 'usage', 'including', 'usages', 'apis', 'detailed', 'instructions', 'install', 'whichever', 'applicable', 'pull', 'github', 'repo', 'httpsgithubcomaguptacourseproject', 'necessary', 'libraries', 'notable', 'one', 'pip', 'place', 'corpus', 'correct', 'folder', 'format', 'httpscatalogldcupenneduldct', 'sections', 'filenamepy', 'sidenote', 'test', 'f', 'values', 'different', 'need', 'manually', 'inspected', 'relevant', 'parsed', 'top', 'words', 'take', 'multiple', 'hours', 'provided', 'end', 'results', 'st', 'iteration', 'viewing', 'brief', 'description', 'contribution', 'member', 'case', 'multiperson', 'ran', 'algorithm', 'frequencies', 'iowa', 'exchange', 'external', 'write', 'functions', 'find', 'create', 'subtopics', 'positively', 'negatively', 'correlated', 'library', 'provision', 'part', 'extended', 'accept', 'mstep', 'numpy', 'einsum', 'read', 'input', 'csv', 'previous', 'steps', 'filter', 'exist', 'particular', 'days', 'feed', 'step', 'iterations', 'reproducing', 'casual', 'general', 'idea', 'combine', 'probabilistic', 'models', 'documents', 'coherent', 'semantically', 'utilizing', 'presidential', 'markets', 'looking', 'specifically', 'caused', 'support', 'bush', 'gore', 'change', 'based', 'association', 'computing', 'machinery', 'doihttpsdoiorg', 'courseprojectdatamonthdayfilenamexml', 'note', 'takes', 'therefore', 'sample', 'w', 'endresults', 'implementation', 'group', 'xml', 'files', 'belong', 'single', 'picked', 'best', 'model', 'extract', 'highest', 'probability', 'considered', 'identified', 'identify', 'related', 'normalized', 'price', 'candidate', 'lag', 'stationary', 'variables', 'every', 'enough', 'points', 'testing', 'skip', 'fails', 'fvalue', 'isnt', 'parts', 'refer', 'deemed', 'comparing', 'segment', 'negative', 'positive', 'correlations', 'returning', 'combined', 'meet', 'threshold', 'pypi', 'package', 'didnt', 'offer', 'guide', 'user', 'inputs', 'enlisted', 'source', 'overwrite', 'essentially', 'uses', 'efficiently', 'perform', 'multidimensional', 'matrix', 'operations', 'modified', 'include', 'parameters', 'pseudo', 'counts', 'key', 'look', 'occured', 'found', 'showed', 'causality', 'campaign', 'clinton', 'extracted', 'segmented', 'made', 'influenced', 'second', 'example', 'split', 'teacher', 'oil', 'drug', 'debate', 'clear', 'original', 'delves', 'deeper', 'issues', 'moved', 'likelihoods', 'clearly', 'shows', 'finding', 'expect', 'improve', 'next', 'would', 'additionally', 'instead', 'full', 'could', 'paragraphs', 'mention', 'smaller', 'mine', 'robust', 'fscores', 'thanks', 'progress', 'report', 'please', 'upload', 'shared', 'cmt', 'give', 'youre', 'implementing', 'main', 'tasks', 'completed', 'algorithms', 'httpsgithubcomyedivansevenplsa', 'psla', 'ingested', 'election', 'daily', 'calculated', 'basis', 'stored', 'frame', 'seen', 'parsing', 'normalizationipynb', 'stock_data', 'explored', 'httpswwwstatsmodelsorgstablegeneratedstatsmodelstsastattoolsgrangercausality', 'testshtml', 'pending', 'organize', 'datetopicprobability', 'task', 'output', 'understand', 'coefficients', 'add', 'readmemd', 'facing', 'challenges', 'local', 'machine', 'option', 'httpscolabresearchgooglecom', 'since', 'dont', 'entire', 'readily', 'implement', 'courseproject', 'fork', 'repository', 'paste', 'link', 'microsoft', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'structure', 'order', 'courseprojectdata', 'save', 'prices', 'may', 'oct', 'htm', '_htm', 'called', 'saved', 'httpsiemwebbizuiowaedupricehistorypricehistory_selectcontractcfmmarket_id', 'content', 'defined', 'able', 'converge']
https://github.com/AnantSharma18/CourseProject	page 1 of 2 project progress report anant ashutosh sharma anantas2@illinois.edu individual project | free topic text and tweet classification using machine learning 1) which tasks have been completed ? the following tasks have been successfully completed and corresponding code has been pushed on the github repo: 1. created a custom dataset from public sources for political and non political tweets. total corpus of 6060 tweets, with 4088 labelled as political and 1972 labelled as not political. 2. cleaned the following datasets for classification a. spam sms dataset b. offensive language dataset c. political tweets dataset 3. performed the following pre-processing on the text data a. removed stop words b. removed non alphabetic characters c. performed stemming 4. performed the following types of feature extractions: a. count vectors b. word level tf-idf c. n-gram level tf-idf d. character level tf-idf 5. trained the following models: a. naive bayes b. linear classifier c. svm d. random forest 6. produced classification reports for each of the following trained models note : the tasks 3 to 6 were performed on all the three datasets. each model has a separate notebook on github under the helper notebooks directory. in each notebook, the currentdf (i.e. the current data frame can be changed to choose one among the three datasets. page 2 of 2 2) which tasks are pending ? except cnn, all the models have been trained and tested on the datasets. they are showing good accuracy levels. the following tasks are still pending 1. train a cnn model to perform text classification 2. analyse the accuracies of different model on different datasets with different features by creating a comparison table. 3. train and save the most accurate model for classifying political tweets (indian context). 4. fetch tweets from twitter using the twitter api and classify them as political or not political using the saved model. 5. create a comprehensive jupyter notebook to cover all the task performed (for the purposed of presentation). create readme file on github (documentation with instructions) and video presentation for submission. 3) are you facing any challenges ? having no experience with sklean python library, it was initially a bit challenging to get things done. but as i progressed, things became much more clear. implementing a cnn to classify texts also seemed a bit challenging at the beginning. however, i am confident that i will be able to accomplish the task. also, looking forward to use the tweepy python library to extract tweets automatically. page 1 of 5 individual project - free topic anant ashutosh sharma anantas2@illinois.edu topic text and tweet classification using machine learning what is the task ? the task involves classifying texts into their relevant categories using different machine learning techniques. text classification is one of the standard applications in text mining. . the objective of our text classification task is to find appropriate labels for previously unlabelled data from a predictive model which has been trained on a pre-labelled dataset. a series of necessary subtasks are performed to identify and extract relevant features from a given text, which can be further applied to train a predictive model the text to be classified can either be a sentence or a group of sentences i.e. a paragraph. depending on the labels of the dataset, the text can be classified in binary labels or multiple labels. for instance, on training the models on sms spam dataset, it will be able to accurately classify texts as spam (spam) or not spam (ham), whereas on training the models on the hate-speech and offensive language data, it will achieve the task of classifying text into hate speech, offensive language or neither as of now, i plan to train models to 1. classify emails in to spam or not spam 2. classify text into different hate-speech, offensive language categories 3. classify political tweets using a newly created dataset why is it important or interesting ? the internet is a hub of textual information. users are mostly overwhelmed with the amount of information that they have to go through every day. classifying the text which users encounters into different buckets can give a boost to their efficiency as well as understanding. for instance, classification of news into different topic allows the users to only focus on the topics relevant to their interest. the core importance of textual classification lies in finding an appropriate representation of text data where interesting metrics (as measurements) can be used in order to compare different text data in accordance to their similarity to extract insights. page 2 of 5 further, classification of different texts from public social media platform can be tremendously useful in identifying the nature of a post / tweet. for instance, classifying tweets into different hate-speech categories can be used to automatically remove the tweet from the user's handle. the opportunities of text classification are endless. the interesting thing not only lies in just classifying texts into different buckets, but the analysis which can be on the basis of classification obtained. for instance, using the classifier to classify political tweets can be used to identify politically vocal users and the models can further be improvised to provide analytical parameters for their political inclinations. what is your planned approach ? i plan to implement multiple models in order to classify textual data from publicly available datasets initially. a comparison study between the different models will allow to identify the most accurate model for a particular dataset. as of now, i plan to follow the following pipeline to categorize textual data 1. pre-process the input textual data a. cleaning of text b. stop words removal c. stemming d. removal of non-alphabetic characters 2. extract features from the pre-processed data i plan to implement and compare the following vector representations a. count vectors b. tf-idf vectors i. bag of words (word level) ii. bag of n-grams (n-gram level) iii. character level 3. training model - learning a. naive bayes b. linear classification c. svm d. random forest e. convolutional neural network 4. classification of text using the trained model 5. evaluation and comparison of different models page 3 of 5 i plan to use the above approach for different datasets, namely, sms spam and hate- speech. further, i will using the above approach on my newly generate dataset to classify political tweet in the indian context. what tools, systems or datasets are involved? i will primarily be using python. within python, i plan to use the following libraries sklearn, seasborn, pandas, numpy, spacy, nltk for getting stopwords corpus, tweepy etc. datasets involved * sms spam collection http://www.dt.fee.unicamp.br/~tiago/smsspamcollection/ the sms spam collection v.1 is a public set of sms labeled messages that have been collected for mobile phone spam research. it has one collection composed by 5,574 english, real and non-enconded messages, tagged according being legitimate (ham) or spam. labels : spam / ham * hate-speech and offensive language dataset https://github.com/t-davidson/hate-speech-and-offensive- language/tree/master/data the data are stored as a csv and as a pickled pandas dataframe (python 2.7). each data file contains 5 columns: count = number of crowdflower users who coded each tweet (min is 3, sometimes more users coded a tweet when judgments were determined to be unreliable by cf). hate_speech = number of cf users who judged the tweet to be hate speech. offensive_language = number of cf users who judged the tweet to be offensive. neither = number of cf users who judged the tweet to be neither offensive nor non-class = class label for majority of cf users. 0 - hate speech 1 - offensive language 2 - neither labels : hate speech / offensive language / neither * political tweets dataset - custom (india) i plan to obtain the relevant political tweet (indian context) from the publicly available dataset on kaggle https://www.kaggle.com/codesagar/indian-political-tweets-2019-feb-to-may- sample page 4 of 5 i will label them as political. further, i will collect non-political tweets from publicly available twitter datasets and label them as non-political. what is the expected outcome? i expect to accurately classify the textual data in their respective categories using the trained models. further, i intend to write a script which can automatically collect tweets based on some parameters and accurately classify them into political and non- political tweets. inputs : textual data from the respective datasets expected outcomes as per the models trained on different datasets sms spam data : spam / ham (not spam) hate speech and offensive data : hate speech / offensive language / neither political tweets dataset : political / non political how are you going to evaluate your work? i intend to evaluate the models by comparing their predictions using parameters like precision, recall, f1 scores etc. this evaluation will help identify the most suitable model for textual classification, depending on the datasets. at the time of training, the dataset will be divided into testing, training and validation sets. which programming language do you plan to use? i plan to implement this project in python. further, i am also planning to use jupiter notebook for making the code more presentable and easy to demonstrate during the project presentation. justification of work load s. no. task estimated hours 1. import and pre-process the input textual data a. cleaning of text b. stop words removal c. stemming d. removal of non-alphabetic characters 2 hrs 2. extract features from the pre-processed data a. count vectors (0.5 hrs) b. tf-idf vectors (1.5 hrs) i. bag of words (word level) 1.5 hrs page 5 of 5 ii. bag of n-grams (n-gram level) iii. character level 3. training model - learning a. naive bayes (0.5 hrs) b. linear classification (0.5) c. svm (1 hr) d. random forest (1 hr) e. convolutional neural network (4 hrs) 7 hrs 4. classification of text using the trained model 2 hrs 5. evaluation and comparison of different models 4 hrs 6. create new data set for classifying political tweets in india 3 hrs 7. fetch tweets using different parameters and classify as political / non political 3 hrs this above table only gives a rough time estimate of the tasks which will be involved in completing the project. it fulfils the 20+ hours workload as mentioned in the requirements. courseproject | text and tweet classification using machine learning this project is focussed at classifying texts into their relevant categories using different machine learning techniques. text classification is one of the standard applications in text mining. . the objective of our text classification task is to find appropriate labels for previously unlabelled data from a predictive model which has been trained on a pre-labelled dataset. a series of necessary subtasks are performed to identify and extract relevant features from a given text, which can be further applied to train a predictive model. the following classifications have been accomplished in this project: 1. classify sms into spam or not spam 2. classify text into different hate-speech and offensive language category 3. classify political tweets (indian context) using a custom dataset note : the purpose of this project is to present the different machine learning implementations to classify textual data. while the accuracies of the different models are mentioned in the result section, the project focussed more on the different ways machine learning can be used to perform text classification. contribution project by anant ashutosh sharma free topic : text and tweet classification using machine learning course : cs 410 netid : anantas2 the following documentation and demo is submitted to the github repo 1. project proposal 2. project progress report 3. self-evaluation report 4. demo (video) demo video : https://uillinoisedu-my.sharepoint.com/:v:/g/personal/anantas2_illinois_edu/etctrozhflvfjqrjjmrkptkbk-imh54qljvbzl-kbdywaa?e=7r6qdu datasets the details for the datasets is as follows: - sms spam collection source: http://www.dt.fee.unicamp.br/~tiago/smsspamcollection/ the sms spam collection v.1 is a public set of sms labeled messages that have been collected for mobile phone spam research. it has one collection composed by 5,574 english, real and non-enconded messages, tagged according being legitimate (ham) or spam. labels : spam / ham hate-speech and offensive language source: dataset https://github.com/t-davidson/hate-speech-and-offensive-language/tree/master/data the data are stored as a csv and as a pickled pandas dataframe (python 2.7). each data file contains 5 columns: count = number of crowdflower users who coded each tweet (min is 3, sometimes more users coded a tweet when judgments were determined to be unreliable by cf). hate_speech = number of cf users who judged the tweet to be hate speech. offensive_language = number of cf users who judged the tweet to be offensive. neither = number of cf users who judged the tweet to be neither offensive nor non-class = class label for majority of cf users. 0 - hate speech 1 - offensive language 2 - neither labels : hate speech / offensive language / neither political tweets dataset - custom | indian context the political tweets have been taken from a github repo for sentiment analysis on indian political fetched tweets. source: https://github.com/rohitgupta42/polity_senti further, a set of general tweets was taken from the the twitter political corpus source: https://www.usna.edu/users/cs/nchamber/data/twitter/ both of these datasets were combined and cleaned to obtain the required datasets. labels : pol / notpol methodology in this project, i have implemented multiple models in order to classify textual data from publicly available datasets initially. each model has been implemented in a seperate jupyter notebook for clear understanding. a comparison study is also presented between the various models in the result section of this documentation. pre-processing cleaning of text stop words removal stemming removal of non-alphabetic characters feature extraction count vectors b. tf-idf vectors bag of words (word level) bag of n-grams (n-gram level) character level implemented models naive bayes linear classification svm random forest convolutional neural network at the end of each model notebook, an accuracy report is present. the classification accuracy of different models is summarised in the results section below. results the following table contain the f1 scores for each of the predicted categories: naive bayes | model / feature | sms spam | offensive language | political tweet | |-----------------|:--------:|:------------------:|:-----------------:| | count | 0.88 | 0.96 | 0.97 | | word tf-idf | 0.83 | 0.93 | 0.92 | | n-gram tf-idf | 0.60 | 0.91 | 0.80 | | char tf-idf | 0.71 | 0.94 | 0.91 | linear classification | feature / cagtegory | sms spam | offensive language | political tweet | |-----------------|:--------:|:------------------:|:-----------------:| | count | 0.91 | 0.97 | 0.96 | | word tf-idf | 0.81 | 0.97 | 0.97 | | n-gram tf-idf | 0.18 | 0.91 | 0.82 | | char tf-idf | 0.84 | 0.96 | 0.95 | svm | model / feature | sms spam | offensive language | political tweet | |-----------------|:--------:|:------------------:|:-----------------:| | count | 0.89 | 0.97 | 0.95 | | word tf-idf | 0.92 | 0.97 | 0.96 | | n-gram tf-idf | 0.79 | 0.92 | 0.81 | | char tf-idf | 0.88 | 0.97 | 0.94 | random forest | model / feature | sms spam | offensive language | political tweet | |-----------------|:--------:|:------------------:|:---------------:| | count | 0.86 | 0.97 | 0.95 | | word tf-idf | 0.85 | 0.97 | 0.96 | | n-gram tf-idf | 0.74 | 0.92 | 0.81 | | char tf-idf | 0.83 | 0.96 | 0.94 | convolutional neural network (cnn) | cnn / category | spam sms | offensive lang | political tweet | |---------------------|:--------:|:--------------:|:---------------:| | f1 score | 0.91 | 0.97 | 0.95 | | accuracy | 0.98 | 0.95 | 0.94 | summarized results the best performing features have the following f1 scores in each of the models: | model / category | spam sms | offensive lang | political tweet | |-----------------------|:--------:|:--------------:|:---------------:| | naive bayes | 0.88 | 0.96 | 0.95 | | linear classification | 0.90 | 0.97 | 0.96 | | svm | 0.92 | 0.97 | 0.96 | | random forest | 0.86 | 0.97 | 0.96 | | cnn | 0.91 | 0.96 | 0.95 | political tweets prediction the political tweet prediction notebook can be used to fetch and predict tweets into political and non political categories. the tweets are fetched using the tweepy package which uses the twitter api to stream tweets pertaining to a certain tracking list. the most accurate model for political tweet prediction i.e. linear classification with word level tf-idf features has been saved as a pickle model is used to categorise the tweets in pol / notpol categories. installation guide the project makes use of jupyter notebook to implement the different models. the following steps to install and run the code on your local machine. running the helper notebooks clone this repo onto your local machine. you will need the following pre-requisites installed in your local environment: python3, jupyter notebook, numpy, pandas, keras, tensorflow, sklearn, spacy, ntlk, string, pickle, twitter once you have made sure that the above mentioned packages are installed in you environment, you can go ahead and launch jupyter notebook each helper notebook can be executed seperately to get results for different models. in each of the helper notebook, the variable currentdf can be changed to either offensivelangdf | spamsmsdf | politicaldf to run the model on different datasets note : you might have to download the spacy 'en' model seperately in order to run the notebooks predicting political tweets the pre-trained model to predict political tweets is already saved in the folder 'saved model' under the name lr_pol.plk in order to run the political tweet prediction notebook, you will have to first obtain credentials from twitter api. the consumer_key, consumer_secret, access_token and access_token_secret variables need to be replaced with your unique twitter api credentials. guide to obtain twitter api credentials can be found under references. once you have replaced the xxxx with your twitter api credentials, you can execute the notebook to obtain 4 different tweets using the tracking list and classfiy them into pol / notpol using the pre-trained model the trackinglist1 and trackinglist2 lists can be edited to stream different tweets. the n_tweets variable can be changed to the number of tweets you wish to obtain. limitations the datasets being used to train the model can be further improved. they currently have very niche examples of the catergories. for instance, the political tweets dataset only contains political tweets pertaining to the indian context. further, the number of training records are less. a higher number of traininf records may allow the models to perform better. the convulutional neural network (cnn) implemented in this project is a simple and generic one. a much more complex and accurate cnn can be designed and fine tuned as per the requirements of each of the datasets. these limitations are present in this project since the purpose of this project is not to present any accurate model to classify text objects, but to present the different methods and ways in which machine learning models can be used to classify textual data. references https://rapidapi.com/blog/how-to-use-the-twitter-api/ http://www.dt.fee.unicamp.br/~tiago/smsspamcollection/ https://github.com/t-davidson/hate-speech-and-offensive-language/tree/master/data https://github.com/rohitgupta42/polity_senti https://www.usna.edu/users/cs/nchamber/data/twitter/ scionoftech github repo for helping in eaxtracting different features for models page 1 of 2 self evaluation report anant ashutosh sharma anantas2@illinois.edu individual project | free topic text and tweet classification using machine learning 1) have you completed what you have planned ? yes, i have successfully completed what i planned and presented in the project proposal as well as the progress report. the following table mentions the tasks which have been successfully completed in this project along with the checklist. (these were the same tasks as mentioned in the project proposal) s. no. task completion 1. import and pre-process the input textual data a. cleaning of text b. stop words removal c. stemming d. removal of non-alphabetic characters completed 2. extract features from the pre-processed data a. count vectors b. tf-idf vectors i. bag of words (word level) ii. bag of n-grams (n-gram level) iii. character level completed 3. training model - learning a. naive bayes b. linear classification c. svm d. random forest e. convolutional neural network completed 1. classification of text using the trained model completed 2. evaluation and comparison of different models completed 3. create new data set for classifying political tweets in india completed 4. fetch tweets using different parameters and classify as political / non political completed page 2 of 2 2) have you got the expected outcome ? yes, i have got the expected outcome from my proposed project. all the machine learning models successfully classify the textual data from three different datasets into the respective categories with good accuracies and f1 scores. the purpose of this project was to present the different machine learning models which can be used to perform text classification instead of comparing and competing them against one another. further, as expected, the tweets are automatically streamed using the twitter api and are classified into political and not political as expected. all the results and outcomes have been successfully presented in the github repo (readme.md) as well as in the various jupiter notebooks.	['page', 'project', 'progress', 'report', 'anant', 'ashutosh', 'sharma', 'anantasillinoisedu', 'individual', 'free', 'topic', 'text', 'tweet', 'classification', 'using', 'machine', 'learning', 'tasks', 'completed', 'following', 'successfully', 'corresponding', 'code', 'pushed', 'github', 'repo', 'created', 'custom', 'dataset', 'public', 'sources', 'political', 'non', 'tweets', 'total', 'corpus', 'labelled', 'cleaned', 'datasets', 'spam', 'sms', 'b', 'offensive', 'language', 'c', 'performed', 'preprocessing', 'data', 'removed', 'stop', 'words', 'alphabetic', 'characters', 'stemming', 'types', 'feature', 'extractions', 'count', 'vectors', 'word', 'level', 'tfidf', 'ngram', 'character', 'trained', 'models', 'naive', 'bayes', 'linear', 'classifier', 'svm', 'random', 'forest', 'produced', 'reports', 'note', 'three', 'model', 'separate', 'notebook', 'helper', 'notebooks', 'directory', 'currentdf', 'ie', 'current', 'frame', 'changed', 'choose', 'one', 'among', 'pending', 'except', 'cnn', 'tested', 'showing', 'good', 'accuracy', 'levels', 'still', 'train', 'perform', 'analyse', 'accuracies', 'different', 'features', 'creating', 'comparison', 'table', 'save', 'accurate', 'classifying', 'indian', 'context', 'fetch', 'twitter', 'api', 'classify', 'saved', 'create', 'comprehensive', 'jupyter', 'cover', 'task', 'purposed', 'presentation', 'readme', 'file', 'documentation', 'instructions', 'video', 'submission', 'facing', 'challenges', 'experience', 'sklean', 'python', 'library', 'initially', 'bit', 'challenging', 'get', 'things', 'done', 'progressed', 'became', 'much', 'clear', 'implementing', 'texts', 'also', 'seemed', 'beginning', 'however', 'confident', 'able', 'accomplish', 'looking', 'forward', 'use', 'tweepy', 'extract', 'automatically', 'involves', 'relevant', 'categories', 'techniques', 'standard', 'applications', 'mining', 'objective', 'find', 'appropriate', 'labels', 'previously', 'unlabelled', 'predictive', 'prelabelled', 'series', 'necessary', 'subtasks', 'identify', 'given', 'applied', 'classified', 'either', 'sentence', 'group', 'sentences', 'paragraph', 'depending', 'binary', 'multiple', 'instance', 'training', 'accurately', 'ham', 'whereas', 'hatespeech', 'achieve', 'hate', 'speech', 'neither', 'plan', 'emails', 'newly', 'important', 'interesting', 'internet', 'hub', 'textual', 'information', 'users', 'mostly', 'overwhelmed', 'amount', 'go', 'every', 'day', 'encounters', 'buckets', 'give', 'boost', 'efficiency', 'well', 'understanding', 'news', 'allows', 'focus', 'topics', 'interest', 'core', 'importance', 'lies', 'finding', 'representation', 'metrics', 'measurements', 'used', 'order', 'compare', 'accordance', 'similarity', 'insights', 'social', 'media', 'platform', 'tremendously', 'useful', 'identifying', 'nature', 'post', 'remove', 'handle', 'opportunities', 'endless', 'thing', 'analysis', 'basis', 'obtained', 'politically', 'vocal', 'improvised', 'provide', 'analytical', 'parameters', 'inclinations', 'planned', 'approach', 'implement', 'publicly', 'available', 'study', 'allow', 'particular', 'follow', 'pipeline', 'categorize', 'preprocess', 'input', 'cleaning', 'removal', 'nonalphabetic', 'preprocessed', 'vector', 'representations', 'bag', 'ii', 'ngrams', 'iii', 'e', 'convolutional', 'neural', 'network', 'evaluation', 'namely', 'generate', 'tools', 'systems', 'involved', 'primarily', 'within', 'libraries', 'sklearn', 'seasborn', 'pandas', 'numpy', 'spacy', 'nltk', 'getting', 'stopwords', 'etc', 'collection', 'httpwwwdtfeeunicampbrtiagosmsspamcollection', 'v', 'set', 'labeled', 'messages', 'collected', 'mobile', 'phone', 'research', 'composed', 'english', 'real', 'nonenconded', 'tagged', 'according', 'legitimate', 'httpsgithubcomtdavidsonhatespeechandoffensive', 'languagetreemasterdata', 'stored', 'csv', 'pickled', 'dataframe', 'contains', 'columns', 'number', 'crowdflower', 'coded', 'min', 'sometimes', 'judgments', 'determined', 'unreliable', 'cf', 'hate_speech', 'judged', 'offensive_language', 'nonclass', 'class', 'label', 'majority', 'india', 'obtain', 'kaggle', 'httpswwwkagglecomcodesagarindianpoliticaltweetsfebtomay', 'sample', 'collect', 'nonpolitical', 'expected', 'outcome', 'expect', 'respective', 'intend', 'write', 'script', 'based', 'inputs', 'outcomes', 'per', 'going', 'evaluate', 'work', 'comparing', 'predictions', 'like', 'precision', 'recall', 'f', 'scores', 'help', 'suitable', 'time', 'divided', 'testing', 'validation', 'sets', 'programming', 'planning', 'jupiter', 'making', 'presentable', 'easy', 'demonstrate', 'justification', 'load', 'estimated', 'hours', 'import', 'hrs', 'hr', 'new', 'gives', 'rough', 'estimate', 'completing', 'fulfils', 'workload', 'mentioned', 'requirements', 'courseproject', 'focussed', 'classifications', 'accomplished', 'category', 'purpose', 'present', 'implementations', 'result', 'section', 'ways', 'contribution', 'course', 'cs', 'netid', 'anantas', 'demo', 'submitted', 'proposal', 'selfevaluation', 'httpsuillinoisedumysharepointcomvgpersonalanantas_illinois_eduetctrozhflvfjqrjjmrkptkbkimhqljvbzlkbdywaaerqdu', 'details', 'follows', 'source', 'httpsgithubcomtdavidsonhatespeechandoffensivelanguagetreemasterdata', 'taken', 'sentiment', 'fetched', 'httpsgithubcomrohitguptapolity_senti', 'general', 'httpswwwusnaeduuserscsnchamberdatatwitter', 'combined', 'required', 'pol', 'notpol', 'methodology', 'implemented', 'seperate', 'presented', 'various', 'extraction', 'end', 'summarised', 'results', 'contain', 'predicted', 'char', 'cagtegory', 'lang', 'score', 'summarized', 'best', 'performing', 'prediction', 'predict', 'package', 'uses', 'stream', 'pertaining', 'certain', 'tracking', 'list', 'pickle', 'categorise', 'installation', 'guide', 'makes', 'steps', 'install', 'run', 'local', 'running', 'clone', 'onto', 'need', 'prerequisites', 'installed', 'environment', 'keras', 'tensorflow', 'ntlk', 'string', 'made', 'sure', 'packages', 'ahead', 'launch', 'executed', 'seperately', 'variable', 'offensivelangdf', 'spamsmsdf', 'politicaldf', 'might', 'download', 'en', 'predicting', 'pretrained', 'already', 'folder', 'name', 'lr_polplk', 'first', 'credentials', 'consumer_key', 'consumer_secret', 'access_token', 'access_token_secret', 'variables', 'replaced', 'unique', 'found', 'references', 'xxxx', 'execute', 'classfiy', 'trackinglist', 'lists', 'edited', 'n_tweets', 'wish', 'limitations', 'improved', 'currently', 'niche', 'examples', 'catergories', 'records', 'less', 'higher', 'traininf', 'may', 'better', 'convulutional', 'simple', 'generic', 'complex', 'designed', 'fine', 'tuned', 'since', 'objects', 'methods', 'httpsrapidapicombloghowtousethetwitterapi', 'scionoftech', 'helping', 'eaxtracting', 'self', 'yes', 'mentions', 'along', 'checklist', 'completion', 'got', 'proposed', 'instead', 'competing', 'another', 'streamed', 'readmemd']
https://github.com/AnirudhaPatil/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/Arnavj3/CourseProject	"cs 410 project proposal song retrieval using sentiment analysis the group the group consists of arnav jain (arnavj3) and nikhil sahni (sahni4). the captain of the group will be arnav jain. our free topic we plan on scraping the web for song lyrics and building an informational retrieval system. we will conduct a sentiment analysis of these lyrics and classify the songs. the user will then be able to query our tool with a combination of parameters like song sentiment, artist, genre, etc. we think this is incredibly interesting as it introduces a novel and useful way of searching for music. an example query for our tool would be ""i want a happy country song by ____ artist"" our planned approach is to first gather the data and clean it into a processable format. we will then work on building a program to conduct sentiment analysis on the gathered lyrics. once we have a feature set for each song's lyrics, we can start building our search engine that will allow the user to use our tool. we plan on using nltk for sentiment analysis and text processing tasks. we will scrape and gather data using python. we are still unsure of the data storage tools we will use and plan on making that decision once we start the process of collecting data. this way we will be able to make a more informed decision based on the nature of the data we will work with. the expected outcome is a working multi-feature search engine for songs. to evaluate our search performance, two useful metrics will be precision and recall. we think a combination of analytical and human oversight will help us evaluate our tool. programming language we will primarily be using python for this project. we will be using multiple packages such as nltk, metapy and selenium to perform the sentiment analysis, create the search engine and scrape the web workload we expect this project to take us anywhere from 50-60 hours to complete. the division of time is expected to be as follows: phase 1: the first phase of this project is to scrape the web to create a dataset of as many songs and lyrics as we can. this would take us 10-15 hours in total. phase 2: the second phase consists of creating the search engine to be able to give accurate recommendations of songs only based on the lyrics searched. this would take us 15 - 20 hours phase 3: the third phase consists of adding sentiment analysis to the search engine so that users could search for genres and moods and accordingly get song recommendations. this would take us 15-20 hours. project progress report progress so far, we have managed to set-up our data retrieval pipeline. we first mine billboard's website to scrape song names from their top 100 charts for a range of years. we use these song names and query genius.com's api to obtain the lyrics for the song. we then cleaned these lyrics for processing by removing stop words and non-useful information. this way the data is in a consistent universal format throughout. we've combined all the meta-data we have on these songs with the lyrics and consolidated it into a dataframe. we are currently working on our sentiment analysis model to assign each song a sentiment value. remaining tasks we have part of the sentiment analysis on the lyrics remaining. we will then add this sentiment value as an additional feature in our data frame for each song. once we are done with this, we need to create the search/recommendation engine to recommend songs based on the user's query. challenges faced one of the biggest challenges we faced while collecting the lyrics was that we weren't able to find any ready datasets online for lyrics. most were bag-of-word representations or very limited. we decided to scrape the top 100 billboard website to get all top 100 songs and then we used those song names to query the ""genius"" api to retrieve lyrics for each of the songs. this way we achieved more flexibility and customization in our retrieval. smartlyrics song search system please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. to run the code follow the following steps: - unzip the provided csv file and upload it to your google drive - open the notebook in google drive and run the cell which reads the csv (this will require you to mount your drive and should not take more than a few seconds) - run the cell that reads the unnormalized dataset and run all the cells that follow - the last cell will have the following search fields: artist, album, year, sentiment, profanity and lyric. you can use these search fields to find a song you're looking for. the following video explains all the different steps taken to create this project - https://www.youtube.com/watch?v=bril4zidyhe"	['cs', 'project', 'proposal', 'song', 'retrieval', 'using', 'sentiment', 'analysis', 'group', 'consists', 'arnav', 'jain', 'arnavj', 'nikhil', 'sahni', 'captain', 'free', 'topic', 'plan', 'scraping', 'web', 'lyrics', 'building', 'informational', 'system', 'conduct', 'classify', 'songs', 'user', 'able', 'query', 'tool', 'combination', 'parameters', 'like', 'artist', 'genre', 'etc', 'think', 'incredibly', 'interesting', 'introduces', 'novel', 'useful', 'way', 'searching', 'music', 'example', 'would', 'want', 'happy', 'country', '____', 'planned', 'approach', 'first', 'gather', 'data', 'clean', 'processable', 'format', 'work', 'program', 'gathered', 'feature', 'set', 'start', 'search', 'engine', 'allow', 'use', 'nltk', 'text', 'processing', 'tasks', 'scrape', 'python', 'still', 'unsure', 'storage', 'tools', 'making', 'decision', 'process', 'collecting', 'make', 'informed', 'based', 'nature', 'expected', 'outcome', 'working', 'multifeature', 'evaluate', 'performance', 'two', 'metrics', 'precision', 'recall', 'analytical', 'human', 'oversight', 'help', 'us', 'programming', 'language', 'primarily', 'multiple', 'packages', 'metapy', 'selenium', 'perform', 'create', 'workload', 'expect', 'take', 'anywhere', 'hours', 'complete', 'division', 'time', 'follows', 'phase', 'dataset', 'many', 'total', 'second', 'creating', 'give', 'accurate', 'recommendations', 'searched', 'third', 'adding', 'users', 'could', 'genres', 'moods', 'accordingly', 'get', 'progress', 'report', 'far', 'managed', 'setup', 'pipeline', 'mine', 'billboards', 'website', 'names', 'top', 'charts', 'range', 'years', 'geniuscoms', 'api', 'obtain', 'cleaned', 'removing', 'stop', 'words', 'nonuseful', 'information', 'consistent', 'universal', 'throughout', 'weve', 'combined', 'metadata', 'consolidated', 'dataframe', 'currently', 'model', 'assign', 'value', 'remaining', 'part', 'add', 'additional', 'frame', 'done', 'need', 'searchrecommendation', 'recommend', 'challenges', 'faced', 'one', 'biggest', 'werent', 'find', 'ready', 'datasets', 'online', 'bagofword', 'representations', 'limited', 'decided', 'billboard', 'used', 'genius', 'retrieve', 'achieved', 'flexibility', 'customization', 'smartlyrics', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'run', 'code', 'follow', 'following', 'steps', 'unzip', 'provided', 'csv', 'file', 'upload', 'google', 'drive', 'open', 'notebook', 'cell', 'reads', 'require', 'mount', 'seconds', 'unnormalized', 'cells', 'last', 'fields', 'album', 'year', 'profanity', 'lyric', 'youre', 'looking', 'video', 'explains', 'different', 'taken', 'httpswwwyoutubecomwatchvbrilzidyhe']
https://github.com/Asciotti/CourseProject	"progress report andrew sciotti, sciotti2 which tasks have been completed: the following tasks have been completed: - setup environment (for python 2.7) - debugged code so that it was working in original state - identified the location where to hook into the eductionalweb system to apply auto-text summarization to the returned results - implemented two text summarization prototypes, extractive using shallow nlp & abstractive using deep nlp which tasks are pending: - implement summarizers into rest of the code base (currently sitting separate using an example text paragraph - fully hook in the summarizer to display on the eductionalweb browser (see ""challenges"") - explore improvements to the shallow nlp extractive text summarization (stemming, stop word removal, word embedding, etc) are you facing any challenges: 1) errors during running i cannot get the full workflow to work. the scoring function inside the ""get_explanation"" function of model.py freezes during computation. see https://github.com/asciotti/courseproject/blob/master/model.py#l311 however, this only occurs when i run it via the app.py, if i were to manually run the scorer, though ipython/command line, it has no issues. because of this, i cannot fully close the loop. 2) the data (para_idx_data) is not representative of what exists on the publicly hosted website the sourced ""explanations"" from the http://timan102.cs.illinois.edu/explanation/ website seem to be derived from the full text of the textbook, but the data provided in the git repo appears to only be snippets/headers of the text. team aps members: andrew sciotti (sciotti2), sciotti2@illinois.edu 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. member/captain: andrew sciotti, sciotti2 2. what system have you chosen? which subtopic(s) under the system? i have chosen to improve the educationalweb system, specifically by providing more context and improved reading comprehension to the explanations in the form of summarization. for instance, the explanation of ""plsa"" is (roughly) 63 sentences long! 3. briefly describe the datasets, algorithms or techniques you plan to use the goal is to implement extractive summarization on the retrieved relevant explanations provided by educationalweb system. the dataset will be provided via the textbook, ""text data management and analysis: a practical introduction to information retrieval and text mining"". the fundamentals of the extractive summarization are based on pagerank, but for text, coined (not so creatively), textrank (reference: https://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf). this is an unsupervised algorithm. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? the most straightforward method of evaluation is to manually obtain a few examples of explanations that are lengthy and evaluate the effective conciseness provided by the function. quantitative measures are unlikely to be evaluated, so the results will be qualitatively evaluated. ideally, if there were sufficient users, something like a/b testing would be implemented, but that is entirely out of scope. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly the plan is to identify where the explanation is retrieved and forwarded to the webpage, and intercept that function call to be routed through the extractive summarizer. 6. which programming language do you plan to use? python 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. project plan: - setup environment, 2 hours - familiarization with educationalweb system, 5 hours - progress report, 1 hour - deep dive into the retrieval/explanation system, 3 hours - implement extractive summarization, 3 hours - debug & evaluated extractive summarization, 3 hours - document code & prepare tutorial, 3 hours educationalweb tutorial found here: https://mediaspace.illinois.edu/media/1_5ohs6cp4 if you are not familiar with the educationalweb, it is a resource provided that contains a multitude of features related to the lectures slides including: search term throughout slides/audio downloading slides providing reference to slides that are related ""explain"" highlighted words on the slides setup the following instructions have been tested with python3.7.9 on windows. you should have elasticsearch installed and running ubuntu - https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html windows - https://www.elastic.co/guide/en/elasticsearch/reference/current/windows.html macos - https://www.elastic.co/guide/en/elasticsearch/reference/current/brew.html download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under educationalweb/pdf.js/static/slides/ download lemur-stopwords.txt from here -- https://raw.githubusercontent.com/meta-toolkit/meta/master/data/lemur-stopwords.txt lemur-stopwords.txt needs to be placed under educationalweb/ from educationalweb/pdf.js/build/generic/web , run the following command: gulp server in another terminal, setup your python environment (requires python 3.7.9 - i recommend making a clean venv/conda environment) by running pip install -r requirements.txt. if using conda, the following is a useful command to make the correct environment conda create --name uiuc3.7 python=3.7.9 create the index in elasticsearch by running python create_es_index.py from educationalweb/ run python app.py from educationalweb/ the site should be available at http://localhost:8096/ run through the examples (at the end of the video tutorial) to see the usage and benefits of the summarization. motivation: the ""explanation"" feature available in the educationalweb system can be used to provide an explanation of the highlighted words on a given slide. the issue is the returned explanations can be too lengthy and not all that specific to the query word. one could improve these explanations by providing a more targeted, concise summary of the raw explanation return. this can be done in a few manners, i chose to look at extractive methods (using shallow nlp) and abstractive methods (using deep pre-trained nn based language models). extractive summarization can be thought of as restating the most useful or ""main"" points in a document. abstract summarization can be thought of as paraphrasing the document itself in a (typically) more concise way [1]. concepts of explanation ""finding"" the general process to discover explanations is as follows - this is essentially a document retrieval problem given a query. 1. preprocess corpus for future ranking on query words 2. extract the query word from the webpage 3. with query, corpus (processed), and ranking algo (bm25 in our case), determine most likely documents (in our case documents were provided in the repo already, they appear to be headers of chapters) 4. take top-k (1 in our case) most likely documents 5. given the best matched document, then run summarization on the content 6. return the summarized ""explanation"" to the user extractive summary process (ref [2]) provided into the extractive summary process is a preprocessed document that contains a list of lists for each sentene then each word in said sentence. in the extractive summary process we utilize a vector space method ""encoding"" of each sentence. each element of the vector is the count of a single unique ""token"". we use the nltk python language package for tokenization. the similarity measure between each sentence with every other sentence is computed via cosine similarity. this gives us an mxm matrix (m=# sentences), the similarity matrix. the pagerank algorithm [5] can be used to return probabilities of ""landing"" on each page (sentence in our case). the sentences with the highest probabilities are most likely to occur, and are thus the most ""useful"". we add some additional weighting to sentences which contain the query word itself - to try to improve the likelihood of seeing the word in the explanations given. you can run an example of abstractive summarization by running the following: python extractive_summarizer.py it will run a summary of the below input data (selected document) which resulted from the query annotations. in this section, we're going to continue our discussion of web search, particularly focusing on how to utilize links between pages to improve search. in the previous section, we talked about how to create a large index on using mapreduce on gfs. now that we have our index, we want to see how we can improve ranking of pages on the web. of course, standard ir models can be applied here; in fact, they are important building blocks for supporting web search, but they aren't sufficient for the following reasons. first, on the web we tend to have very different information needs. for example, people might search for a web page or entry page-this is different from the traditional library search where people are primarily interested in collecting literature information. these types of queries are often called navigational queries, where the purpose is to navigate into a particular targeted page. for such queries, we might benefit from using link information. for example, navigational queries could be facebook or yahoo finance. the user is simply trying to get to those pages without explicitly typing in the url in the address bar of the browser. secondly, web documents have much more information than pure text; there is hierarchical organization and annotations such as the page layout, title, or hyperlinks to other pages. these features provide an opportunity to use extra context information of the document to improve scoring. finally, information quality greatly varies. all this means we have to consider many factors to improve the standard ranking algorithm, giving us a more robust way to rank the pages and making it more difficult for spammers to manipulate one signal to improve a single page's ranking. you should see: secondly, web documents have much more information than pure text; there is hierarchical organization and annotations such as the page layout, title, or hyperlinks to other pages. first, on the web we tend to have very different information needs. in this section, we're going to continue our discussion of web search, particularly focusing on how to utilize links between pages to improve search. one might notice that without any postprocessing, the resultant summary can be devoid of any context or fluidity. abstractive summary process (ref [3]) abstractive summary utilizes a pre-trained deep nn from huggingface [4]. we utilize the t5 language network to perform summarization. the t5 network has an accompanying tokenizer that ingests the raw document (sentences). we have picked the t5-small model (and tokenizer) rather than the medium/large models due to computation time (we are running locally on cpus). the larger models 1) are more accurate and 2) have the ability to process longer documents. the small is limited to 512 tokens, which roughly translates to 500 words or ~20-30 sentences. without going into the details ([3] can provide more information) of the generational configuration, we choose to utilize beam search to improve the summary in addition to constraining the length of the summary returned to [50,150] tokens. you can run the following to see an example of an abstract summary (note the output might be slightly different from yours). input text same as for extractive summarization example. python abstract_summarizer.py we're going to continue our discussion of web search. in the previous section, we talked about how to create a large index on using mapreduce on gfs. we want to see how we can improve ranking of pages on the web. the standard ir models can be applied here, but they aren't sufficient for the following reasons. given the network we used, it was not possible to add any weighting/favoring towards generating sentences with the query word. overview of selected pieces of code below will highlight a fews places in the code that are specific to the augmentation of the explanation functionality. this code base is large but most of it is related to the web based portion whereas a select few python files are used to actually perform much of the backend functionality. app.py : contains the flask server code, handles various api calls (unmodified) model.py : handles the model that performs document-query retreival. get_explanation is the function that returns the explanation results. inside this function is where the main ""injection"" occurrs. after we retrieve the normal explanation (aka the highest scoring document), we feed that result directly into the summarizer functions. ranker.py : retrieves the highest ranking documents given the query word and corpus. replaced metapy ranker w/ rank_bm25 3rd party package due to bugs. extractive_summarizer.py : contains extractive summary code, if run alone via command line, will summarize an example text. abstract_summarizer.py : contains abstract summary code, if run alone via command line, will summarize an example text. demo the demo is provided via the video tutorial found here: https://mediaspace.illinois.edu/media/1_5ohs6cp4 the slide used to demo can be found here (given the app is running and you can connnect to it: http://localhost:8096/next_slide/cs-410/86/cs-410----13_week-12----02_week-12-lessons----05_12-5-contextual-text-mining-contextual-probabilistic-latent-semantic-analysis_tm-42-cplsa.txt----slide2.pdf the word example we will go through is for coverage in the above slides. if you don't want to go through the video. go through the installation above such that you can see the slides. go to those specific set of slides (click on link). highlight ""coverage"" in the bottom right corner and hit the box with the graduation cap on it in the top right. if you hover over the boxes it shoulds say ""explain selected text"" you should see the unmodified ""explanation"" now go to your text editor and open app.py. modify summarizer="""" to summarizer=""extract"" located at the top of the file. hit save file. wait a few seconds then reload the page. highlight ""coverage"" again and hit the explain button. see the extractive summarized ""explanation"". now go to your text editor and open app.py. modify summarizer=""extract"" to summarizer=""abstract"" located at the top of the file. hit save file. wait a few seconds then reload the page. highlight ""coverage"" again and hit the explain button. see the abstract summarized ""explanation"". references [1] https://www.quora.com/natural-language-processing-what-is-the-difference-between-extractive-and-abstractive-summarization [2] https://towardsdatascience.com/understand-text-summarization-and-create-your-own-summarizer-in-python-b26a9f09fc70 [3] https://huggingface.co/blog/how-to-generate [4] https://huggingface.co/ [5] https://web.eecs.umich.edu/~mihalcea/papers/mihalcea.emnlp04.pdf"	['progress', 'report', 'andrew', 'sciotti', 'tasks', 'completed', 'following', 'setup', 'environment', 'python', 'debugged', 'code', 'working', 'original', 'state', 'identified', 'location', 'hook', 'eductionalweb', 'system', 'apply', 'autotext', 'summarization', 'returned', 'results', 'implemented', 'two', 'text', 'prototypes', 'extractive', 'using', 'shallow', 'nlp', 'abstractive', 'deep', 'pending', 'implement', 'summarizers', 'rest', 'base', 'currently', 'sitting', 'separate', 'example', 'paragraph', 'fully', 'summarizer', 'display', 'browser', 'see', 'challenges', 'explore', 'improvements', 'stemming', 'stop', 'word', 'removal', 'embedding', 'etc', 'facing', 'errors', 'running', 'cannot', 'get', 'full', 'workflow', 'work', 'scoring', 'function', 'inside', 'get_explanation', 'modelpy', 'freezes', 'computation', 'httpsgithubcomasciotticourseprojectblobmastermodelpyl', 'however', 'occurs', 'run', 'via', 'apppy', 'manually', 'scorer', 'though', 'ipythoncommand', 'line', 'issues', 'close', 'loop', 'data', 'para_idx_data', 'representative', 'exists', 'publicly', 'hosted', 'website', 'sourced', 'explanations', 'httptimancsillinoiseduexplanation', 'seem', 'derived', 'textbook', 'provided', 'git', 'repo', 'appears', 'snippetsheaders', 'team', 'aps', 'members', 'sciottiillinoisedu', 'names', 'netids', 'captain', 'administrative', 'duties', 'membercaptain', 'chosen', 'subtopics', 'improve', 'educationalweb', 'specifically', 'providing', 'context', 'improved', 'reading', 'comprehension', 'form', 'instance', 'explanation', 'plsa', 'roughly', 'sentences', 'long', 'briefly', 'describe', 'datasets', 'algorithms', 'techniques', 'plan', 'use', 'goal', 'retrieved', 'relevant', 'dataset', 'management', 'analysis', 'practical', 'introduction', 'information', 'retrieval', 'mining', 'fundamentals', 'based', 'pagerank', 'coined', 'creatively', 'textrank', 'reference', 'httpswebeecsumichedumihalceapapersmihalceaemnlppdf', 'unsupervised', 'algorithm', 'adding', 'demonstrate', 'works', 'expected', 'improving', 'show', 'implementation', 'actually', 'better', 'straightforward', 'method', 'evaluation', 'obtain', 'examples', 'lengthy', 'evaluate', 'effective', 'conciseness', 'quantitative', 'measures', 'unlikely', 'evaluated', 'qualitatively', 'ideally', 'sufficient', 'users', 'something', 'like', 'ab', 'testing', 'would', 'entirely', 'scope', 'communicate', 'utilize', 'also', 'fine', 'build', 'systems', 'please', 'clearly', 'identify', 'forwarded', 'webpage', 'intercept', 'call', 'routed', 'programming', 'language', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'estimated', 'time', 'cost', 'task', 'project', 'familiarization', 'hour', 'dive', 'retrievalexplanation', 'debug', 'document', 'prepare', 'tutorial', 'found', 'httpsmediaspaceillinoisedumedia_ohscp', 'familiar', 'resource', 'contains', 'multitude', 'features', 'related', 'lectures', 'slides', 'including', 'search', 'term', 'throughout', 'slidesaudio', 'downloading', 'explain', 'highlighted', 'words', 'instructions', 'tested', 'windows', 'elasticsearch', 'installed', 'ubuntu', 'httpswwwelasticcoguideenelasticsearchreferencecurrenttargzhtml', 'httpswwwelasticcoguideenelasticsearchreferencecurrentwindowshtml', 'macos', 'httpswwwelasticcoguideenelasticsearchreferencecurrentbrewhtml', 'download', 'tfidf_outputszip', 'httpsdrivegooglecomfilediacqahnwkkxasbnfsclqrigdtfiwviewuspsharing', 'unzip', 'file', 'place', 'folder', 'educationalwebstatic', 'cszip', 'httpsdrivegooglecomfiledxiwosavooejsy_siiixpfaqsuyuuhviewuspsharing', 'educationalwebpdfjsstaticslides', 'lemurstopwordstxt', 'httpsrawgithubusercontentcommetatoolkitmetamasterdatalemurstopwordstxt', 'needs', 'placed', 'educationalwebpdfjsbuildgenericweb', 'command', 'gulp', 'server', 'another', 'terminal', 'requires', 'recommend', 'making', 'clean', 'venvconda', 'pip', 'install', 'r', 'requirementstxt', 'conda', 'useful', 'make', 'correct', 'create', 'name', 'uiuc', 'index', 'create_es_indexpy', 'site', 'available', 'httplocalhost', 'end', 'video', 'usage', 'benefits', 'motivation', 'feature', 'used', 'provide', 'given', 'slide', 'issue', 'specific', 'query', 'one', 'could', 'targeted', 'concise', 'summary', 'raw', 'return', 'done', 'manners', 'chose', 'look', 'methods', 'pretrained', 'nn', 'models', 'thought', 'restating', 'points', 'abstract', 'paraphrasing', 'typically', 'way', 'concepts', 'finding', 'general', 'process', 'discover', 'follows', 'essentially', 'problem', 'preprocess', 'corpus', 'future', 'ranking', 'extract', 'processed', 'algo', 'bm', 'case', 'determine', 'likely', 'documents', 'already', 'appear', 'headers', 'chapters', 'take', 'topk', 'best', 'matched', 'content', 'summarized', 'user', 'ref', 'preprocessed', 'lists', 'sentene', 'said', 'sentence', 'vector', 'space', 'encoding', 'element', 'count', 'single', 'unique', 'token', 'nltk', 'package', 'tokenization', 'similarity', 'measure', 'every', 'computed', 'cosine', 'gives', 'us', 'mxm', 'matrix', 'probabilities', 'landing', 'page', 'highest', 'occur', 'thus', 'add', 'additional', 'weighting', 'contain', 'try', 'likelihood', 'seeing', 'extractive_summarizerpy', 'input', 'selected', 'resulted', 'annotations', 'section', 'going', 'continue', 'discussion', 'web', 'particularly', 'focusing', 'links', 'pages', 'previous', 'talked', 'large', 'mapreduce', 'gfs', 'want', 'course', 'standard', 'ir', 'applied', 'fact', 'important', 'building', 'blocks', 'supporting', 'arent', 'reasons', 'first', 'tend', 'different', 'people', 'might', 'entry', 'pagethis', 'traditional', 'library', 'primarily', 'interested', 'collecting', 'literature', 'types', 'queries', 'often', 'called', 'navigational', 'purpose', 'navigate', 'particular', 'benefit', 'link', 'facebook', 'yahoo', 'finance', 'simply', 'trying', 'without', 'explicitly', 'typing', 'url', 'address', 'bar', 'secondly', 'much', 'pure', 'hierarchical', 'organization', 'layout', 'title', 'hyperlinks', 'opportunity', 'extra', 'finally', 'quality', 'greatly', 'varies', 'means', 'consider', 'many', 'factors', 'giving', 'robust', 'rank', 'difficult', 'spammers', 'manipulate', 'signal', 'notice', 'postprocessing', 'resultant', 'devoid', 'fluidity', 'utilizes', 'huggingface', 'network', 'perform', 'accompanying', 'tokenizer', 'ingests', 'picked', 'tsmall', 'model', 'rather', 'mediumlarge', 'due', 'locally', 'cpus', 'larger', 'accurate', 'ability', 'longer', 'small', 'limited', 'tokens', 'translates', 'details', 'generational', 'configuration', 'choose', 'beam', 'addition', 'constraining', 'length', 'note', 'output', 'slightly', 'abstract_summarizerpy', 'possible', 'weightingfavoring', 'towards', 'generating', 'overview', 'pieces', 'highlight', 'fews', 'places', 'augmentation', 'functionality', 'portion', 'whereas', 'select', 'files', 'backend', 'flask', 'handles', 'various', 'api', 'calls', 'unmodified', 'performs', 'documentquery', 'retreival', 'returns', 'injection', 'occurrs', 'retrieve', 'normal', 'aka', 'feed', 'result', 'directly', 'functions', 'rankerpy', 'retrieves', 'replaced', 'metapy', 'ranker', 'w', 'rank_bm', 'rd', 'party', 'bugs', 'alone', 'summarize', 'demo', 'app', 'connnect', 'httplocalhostnext_slidecscs_week_weeklessons_contextualtextminingcontextualprobabilisticlatentsemanticanalysis_tmcplsatxtslidepdf', 'go', 'coverage', 'dont', 'installation', 'set', 'click', 'bottom', 'right', 'corner', 'hit', 'box', 'graduation', 'cap', 'top', 'hover', 'boxes', 'shoulds', 'say', 'editor', 'open', 'modify', 'summarizerextract', 'located', 'save', 'wait', 'seconds', 'reload', 'button', 'summarizerabstract', 'references', 'httpswwwquoracomnaturallanguageprocessingwhatisthedifferencebetweenextractiveandabstractivesummarization', 'httpstowardsdatasciencecomunderstandtextsummarizationandcreateyourownsummarizerinpythonbaffc', 'httpshuggingfacecobloghowtogenerate', 'httpshuggingfaceco']
https://github.com/BhuvaneswariPeriasamy/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/CapnDanger/CourseProject	"bryan holcomb cs 410: text information systems final project progress report currently, i have the majority of the sentiment analysis code written and i am in the process of testing on small, manually-copied articles. my next step is to complete testing, which i plan to do this week. the next steps after testing is complete are to build a webscraper to build up a corpus of news articles from various sources. i foresee one challenge being to find an easily-accessible api that allows scraping of web pages without ads or irrelevant content. bryan holcomb cs 410: text information systems project proposal team member: bryan holcomb (bryanph2) as individual topic: sentiment analysis of news articles around the 2020 us presidential election for my course project, i plan to do a sentiment analysis of news articles around the 2020 us presidential election. there are a number of applications for which we can use this sentiment analysis, including an evaluation/comparison of biases between different news sources, as well as measure the general opinion of the candidates in different audiences and demographics. additionally, we can evaluate how sentiment towards each candidate has changed over time. for this analysis, i plan to build a web crawler to obtain a large sample of articles from various websites, including large national news outlets (cnn, nbc, abc, fox news), at least one international source (i.e. bbc), and various newspapers from major cities around the country. for each article, i will track the date and source, and then parse each article and perform a sentiment analysis. i plan to use a number of packages to do the work, including meta, nltk, beautiful soup, and ibm watson. the vast majority, if not 100% of the project, will be done in python. hours breakdown: web crawler design and setup: ~5 hours - this could take longer depending on how much customization is needed for each source i use, and depending on my ability to re-use the same procedures and my ability to run my scrapers behind paywalls. parsing and database setup: ~5 hours - once i have the articles saved as documents, i believe parsing should be very straightforward, as done in lecture and the mps. design of sentiment analysis code: ~7 hours - this will take the bulk of my effort. i believe the most challenging part will be to divide articles that discuss both candidates and group each sentiment with the correct candidate. statistical analysis of results: ~3 hours documentation python files cnn_scraper.py: used to scrape cnn articles. accesses the publicly available cnn api. fox_scraper.py: used to scrape fox news articles. accesses the back-end api to scrape article information, then uses those links to access articles. reuters_scraper.py: used to scrape reuters articles. scrapes list of articles and then uses those links to access articles. ibm_sentiment.py: uses the ibm watson natural language understanding api to analyze the sentiment of each corpus of articles. targets are set to analyze sentiment for keywords ""trump"" and ""biden"". see inline comments for detailed descriptions of code functions. note that the scrapers take a long time to run (sometimes upwards of 1-2 hours), while the sentiment analysis takes ~20-30 minutes to run. output files xxx_urls.csv: contains data on each corpus. all files contain the publish date, headline, url, and trump/biden sentiment scores. depending on the source, may also include authors or category. xxx_scores.csv: output of ibm_sentiment for each file. this can be manually copy/pasted to the respective xxx_urls file to populate those columns. xxx_body.txt: output of xxx_scraper scripts. each file contains one article per line, in the same order as the respective xxx_urls file. other file chromedriver: necessary for selenium package to operate the scraper api documentation the ibm watson natural language understanding api documentation can be found at https://cloud.ibm.com/apidocs/natural-language-understanding?code=python#sentiment other attributions select portions of the scraper codes have been adapted from mp2.1. video demonstration https://mediaspace.illinois.edu/media/t/1_ksj5ytyq"	['bryan', 'holcomb', 'cs', 'text', 'information', 'systems', 'final', 'project', 'progress', 'report', 'currently', 'majority', 'sentiment', 'analysis', 'code', 'written', 'process', 'testing', 'small', 'manuallycopied', 'articles', 'next', 'step', 'complete', 'plan', 'week', 'steps', 'build', 'webscraper', 'corpus', 'news', 'various', 'sources', 'foresee', 'one', 'challenge', 'find', 'easilyaccessible', 'api', 'allows', 'scraping', 'web', 'pages', 'without', 'ads', 'irrelevant', 'content', 'proposal', 'team', 'member', 'bryanph', 'individual', 'topic', 'around', 'us', 'presidential', 'election', 'course', 'number', 'applications', 'use', 'including', 'evaluationcomparison', 'biases', 'different', 'well', 'measure', 'general', 'opinion', 'candidates', 'audiences', 'demographics', 'additionally', 'evaluate', 'towards', 'candidate', 'changed', 'time', 'crawler', 'obtain', 'large', 'sample', 'websites', 'national', 'outlets', 'cnn', 'nbc', 'abc', 'fox', 'least', 'international', 'source', 'ie', 'bbc', 'newspapers', 'major', 'cities', 'country', 'article', 'track', 'date', 'parse', 'perform', 'packages', 'work', 'meta', 'nltk', 'beautiful', 'soup', 'ibm', 'watson', 'vast', 'done', 'python', 'hours', 'breakdown', 'design', 'setup', 'could', 'take', 'longer', 'depending', 'much', 'customization', 'needed', 'ability', 'reuse', 'procedures', 'run', 'scrapers', 'behind', 'paywalls', 'parsing', 'database', 'saved', 'documents', 'believe', 'straightforward', 'lecture', 'mps', 'bulk', 'effort', 'challenging', 'part', 'divide', 'discuss', 'group', 'correct', 'statistical', 'results', 'documentation', 'files', 'cnn_scraperpy', 'used', 'scrape', 'accesses', 'publicly', 'available', 'fox_scraperpy', 'backend', 'uses', 'links', 'access', 'reuters_scraperpy', 'reuters', 'scrapes', 'list', 'ibm_sentimentpy', 'natural', 'language', 'understanding', 'analyze', 'targets', 'set', 'keywords', 'trump', 'biden', 'see', 'inline', 'comments', 'detailed', 'descriptions', 'functions', 'note', 'long', 'sometimes', 'upwards', 'takes', 'minutes', 'output', 'xxx_urlscsv', 'contains', 'data', 'contain', 'publish', 'headline', 'url', 'trumpbiden', 'scores', 'may', 'also', 'include', 'authors', 'category', 'xxx_scorescsv', 'ibm_sentiment', 'file', 'manually', 'copypasted', 'respective', 'xxx_urls', 'populate', 'columns', 'xxx_bodytxt', 'xxx_scraper', 'scripts', 'per', 'line', 'order', 'chromedriver', 'necessary', 'selenium', 'package', 'operate', 'scraper', 'found', 'httpscloudibmcomapidocsnaturallanguageunderstandingcodepythonsentiment', 'attributions', 'select', 'portions', 'codes', 'adapted', 'mp', 'video', 'demonstration', 'httpsmediaspaceillinoisedumediat_ksjytyq']
https://github.com/Clara9/LARA_Reproduce_410	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. the proposal names: weijiang li, ziyuan wei netid: wl13, ziyuan3 captain: weijiang li paper: hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 progaming language: python dataset: yes both datasets used in the paper can be obtained from http://sifaka.cs.uiuc.edu/~wang296/data/index.html the proposal names: weijiang li, ziyuan wei netid: wl13, ziyuan3 captain: weijiang li paper: hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 progaming language: python dataset: yes both datasets used in the paper can be obtained from http://sifaka.cs.uiuc.edu/~wang296/data/index.html	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities', 'proposal', 'names', 'weijiang', 'li', 'ziyuan', 'wei', 'netid', 'wl', 'captain', 'paper', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'progaming', 'language', 'python', 'dataset', 'yes', 'datasets', 'used', 'obtained', 'httpsifakacsuiuceduwangdataindexhtml']
https://github.com/CoreyShih/CourseProject	"progress report: text classification competition corey shih (coreys2@illinois.edu) progress: so far, the data preprocessing pipeline and model definition have been completed. i decided to try using the recently developed bert transformer encoder architecture rather than an lstm as i originally planned for this project. most of my time thus far has been dedicated to preprocessing the data and learning how to use bert in tensorflow. at present, i decided to use only the most recent context element in conjunction with the response text in the model for simplicity and to cut down on computation. should the results of such a model not prove sufficient i will look into adding the rest of the context back into the model input. remaining tasks: model training/testing and hyperparameter tuning still has yet to be done. following that, the source code submission/documentation and the video demo will have to be completed. challenges/issues: at present, i am simply concatenating the response tweet with the context to feed into the bert model as a single input. ideally, i would like to have multiple inputs to the model, i.e. one input for the response text and one input for the context text, but i have been running into issues getting that to work in tensorflow. i am still working on this aspect of the model. project proposal: text classification competition corey shih (coreys2@illinois.edu) 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. this will be an individual project; as such, i will be the team captain. my name and netid are at the top of this proposal. 2. which competition do you plan to join? i plan on joining the text classification competition. 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. i am prepared to learn deep learning techniques for state-of-the-art text classification. i am familiar with keras and tensorflow, having used the former for time series forecasting with recurrent neural networks and the latter for various deep learning tasks. i have previously utilized tensorflow for projects involving audio classification and computer vision. i will likely implement an rnn or lstm using one of these frameworks for this project. 4. which programming language do you plan to use? i plan on using python for this project, as both keras and tensorflow are python libraries. text classification competition: twitter sarcasm detection this course project is an entry into the cs 410 fall 2020 text classification competition. more details about the competition and the relevant datasets can be found at https://github.com/cs410fall2020/classificationcompetition. implementation details this project utilizes a bert (bidirectional encoder representations from transformers) model to classify the data. bert is a recent nlp language model developed by google in 2018. the specific bert model fine-tuned in this project can be found here. the classifier model constructed in this project consists of a bert preprocessing layer, followed by the bert model, a dropout layer, and a dense layer. it uses the response tweet and last context tweet as inputs. this was done for simplicity and also because, intuitively, the tweet that the response tweet is a direct response to is the most relevant context for determining sarcasm. no preprocessing was performed on the text data itself prior to input to the bert preprocessing model (e.g. stop word removal, stemming, etc.). the model was trained using a sparse categorical cross-entropy loss function and an adamw optimizer. this model proved sufficient to beat the baseline provided by the competition, so no other models or methods were tried. minimal hyperparameter tuning was performed, with only the number of training epochs being adjusted for best results and to avoid overfitting. the code for this project predominantly follows the tensorflow tutorial found here for using bert on tpu in google colab, with modifications made to accomodate for the structure of the twitter dataset. utility testing methods several utility methods are included in the code to assist with running the model on the test dataset and viewing the results. ```python def preprocess_dataset(dataset_path, split): """"""processes twitter sarcasm data into tf.data.dataset. args: dataset_path: str path of jsonl dataset. split: str designating train or test dataset, either 'train' or 'test'. returns: a tf.data.dataset of the twitter sarcasm data, retaining only the response tweet, the last context tweet, and the label if present. """""" ``` ```python def prepare(record): """"""prepares records from processed dataset for prediction. args: record: dict of str tensors. returns: a list of lists of str tensors. """""" ``` ```python def get_result(test_row, model): """"""predicts whether a twitter sarcasm test example is sarcasm or not sarcasm. args: test_row: list of str tensors. model: tensorflow savedmodel for the sarcasm classifier. returns: a str, either 'sarcasm' or 'not_sarcasm', corresponding to the predicted result. """""" ``` ```python def print_result(test_row, model): """"""prints out the context, response, and predicted label for a twitter sarcasm test example. args: test_row: list of str tensors. model: tensorflow savedmodel for the sarcasm classifier. returns: none. """""" ``` usage examples the following code snippets provide a few examples for running the trained classifier on the twitter sarcasm test set. loading the trained model python load_options = tf.saved_model.loadoptions(experimental_io_device='/job:localhost') reloaded_model = tf.saved_model.load(saved_model_path, options=load_options) downloading and preprocessing the test dataset ```python test_url = 'https://raw.githubusercontent.com/cs410fall2020/classificationcompetition/main/data/test.jsonl' test_path = tf.keras.utils.get_file('test.jsonl', test_url) test_dataset = preprocess_dataset(test_path, 'test') ``` printing some classifier results on the test set python for test_row in test_dataset.shuffle(1800).map(prepare).take(5): print_result(test_row, reloaded_model) ``` context: [b'@user @user @user it \xe2\x80\x99 s obvious i \xe2\x80\x99 m dealing with a double digit iq . have a good life .'] response: [b'@user @user @user hahahahahah what a chump . no testicular fortitude at all . it \xe2\x80\x99 s unsurprising that liberals lose with people like this . '] prediction: sarcasm context: [b'@user @user asked me to respond to @user . see attached . thanks for the opportunity . #kxl '] response: [b'@user @user @user imagine that . a politician making baseless accusations . because has * never * done that before .'] prediction: sarcasm context: [b'@user @user by all means you should initiate another failed impeachment , causing further embarrassment ( if that were even possible ) to your party , then go tear up some official documents like a toddler .'] response: [b'@user @user @user yet you have no shame in supporting the biggest criminal in white house history .'] prediction: sarcasm context: [b'@user @user aaaayyyyyeeee i \xe2\x80\x99 m the hypemobile humie . i gatchu ! ! ! \xf0\x9f\x98\x9c \xf0\x9f\x91\x8c \xf0\x9f\x8f\xbc'] response: [b'@user @user oh ... ohhhh ! that \xe2\x80\x99 s how it \xe2\x80\x99 s gonna be ? my two bestfriends just gon \xe2\x80\x99 team up on me ? \xf0\x9f\x98\xa1'] prediction: not_sarcasm context: [b""@user @user @user thank you so much , diablo , my dearest friend ! i am grateful every day , as i am happy every day . i make those choices every day for me ! it doesn't matter what is going on , my choices stick . i give the gift of positivity to myself , to everyone i touch ! love u xoxo ""] response: [b'@user @user @user all good things are possible when the #heart illuminates the mind #thinkbigsundaywithmarsha #inspirethemretweettuesday '] prediction: not_sarcasm ```"	['progress', 'report', 'text', 'classification', 'competition', 'corey', 'shih', 'coreysillinoisedu', 'far', 'data', 'preprocessing', 'pipeline', 'model', 'definition', 'completed', 'decided', 'try', 'using', 'recently', 'developed', 'bert', 'transformer', 'encoder', 'architecture', 'rather', 'lstm', 'originally', 'planned', 'project', 'time', 'thus', 'dedicated', 'learning', 'use', 'tensorflow', 'present', 'recent', 'context', 'element', 'conjunction', 'response', 'simplicity', 'cut', 'computation', 'results', 'prove', 'sufficient', 'look', 'adding', 'rest', 'back', 'input', 'remaining', 'tasks', 'trainingtesting', 'hyperparameter', 'tuning', 'still', 'yet', 'done', 'following', 'source', 'code', 'submissiondocumentation', 'video', 'demo', 'challengesissues', 'simply', 'concatenating', 'tweet', 'feed', 'single', 'ideally', 'would', 'like', 'multiple', 'inputs', 'ie', 'one', 'running', 'issues', 'getting', 'work', 'working', 'aspect', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'individual', 'name', 'netid', 'top', 'plan', 'join', 'joining', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'etc', 'concrete', 'tools', 'may', 'heard', 'neural', 'network', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'techniques', 'familiar', 'keras', 'used', 'former', 'series', 'forecasting', 'recurrent', 'networks', 'latter', 'various', 'previously', 'utilized', 'projects', 'involving', 'audio', 'computer', 'vision', 'likely', 'implement', 'rnn', 'programming', 'language', 'python', 'libraries', 'twitter', 'sarcasm', 'detection', 'course', 'entry', 'cs', 'fall', 'details', 'datasets', 'found', 'httpsgithubcomcsfallclassificationcompetition', 'implementation', 'utilizes', 'bidirectional', 'representations', 'transformers', 'classify', 'nlp', 'google', 'specific', 'finetuned', 'classifier', 'constructed', 'consists', 'layer', 'followed', 'dropout', 'dense', 'uses', 'last', 'also', 'intuitively', 'direct', 'determining', 'performed', 'eg', 'stop', 'word', 'removal', 'stemming', 'trained', 'sparse', 'categorical', 'crossentropy', 'loss', 'function', 'adamw', 'optimizer', 'proved', 'beat', 'baseline', 'provided', 'models', 'tried', 'minimal', 'number', 'training', 'epochs', 'adjusted', 'best', 'avoid', 'overfitting', 'predominantly', 'follows', 'tutorial', 'tpu', 'colab', 'modifications', 'made', 'accomodate', 'structure', 'dataset', 'utility', 'testing', 'several', 'included', 'assist', 'test', 'viewing', 'def', 'preprocess_datasetdataset_path', 'split', 'processes', 'tfdatadataset', 'args', 'dataset_path', 'str', 'path', 'jsonl', 'designating', 'train', 'either', 'returns', 'retaining', 'label', 'preparerecord', 'prepares', 'records', 'processed', 'prediction', 'record', 'dict', 'tensors', 'list', 'lists', 'get_resulttest_row', 'predicts', 'whether', 'example', 'test_row', 'savedmodel', 'not_sarcasm', 'corresponding', 'predicted', 'result', 'print_resulttest_row', 'prints', 'none', 'usage', 'examples', 'snippets', 'provide', 'set', 'loading', 'load_options', 'tfsaved_modelloadoptionsexperimental_io_devicejoblocalhost', 'reloaded_model', 'tfsaved_modelloadsaved_model_path', 'optionsload_options', 'downloading', 'test_url', 'httpsrawgithubusercontentcomcsfallclassificationcompetitionmaindatatestjsonl', 'test_path', 'tfkerasutilsget_filetestjsonl', 'test_dataset', 'preprocess_datasettest_path', 'printing', 'test_datasetshufflemappreparetake', 'buser', 'user', 'xexx', 'obvious', 'dealing', 'double', 'digit', 'iq', 'good', 'life', 'hahahahahah', 'chump', 'testicular', 'fortitude', 'unsurprising', 'liberals', 'lose', 'people', 'asked', 'respond', 'see', 'attached', 'thanks', 'opportunity', 'kxl', 'imagine', 'politician', 'making', 'baseless', 'accusations', 'never', 'means', 'initiate', 'another', 'failed', 'impeachment', 'causing', 'embarrassment', 'even', 'possible', 'party', 'go', 'tear', 'official', 'documents', 'toddler', 'shame', 'supporting', 'biggest', 'criminal', 'white', 'house', 'history', 'aaaayyyyyeeee', 'hypemobile', 'humie', 'gatchu', 'xfxfxxc', 'xfxfxfxbc', 'oh', 'ohhhh', 'gonna', 'two', 'bestfriends', 'gon', 'xfxfxxa', 'thank', 'much', 'diablo', 'dearest', 'friend', 'grateful', 'every', 'day', 'happy', 'make', 'choices', 'doesnt', 'matter', 'going', 'stick', 'give', 'gift', 'positivity', 'everyone', 'touch', 'love', 'u', 'xoxo', 'things', 'heart', 'illuminates', 'mind', 'thinkbigsundaywithmarsha', 'inspirethemretweettuesday']
https://github.com/Diegoma89/CS410_CourseProject_DM	"a cross-collection mixture model for comparative text mining chengxiang zhai department of computer science university of illinois at urbana champaign atulya velivelli department of electrical and computer engineering university of illinois at urbana champaign bei yu graduate school of library and information science university of illinois at urbana champaign abstract in this paper, we define and study a novel text mining problem, which we refer to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent com- mon themes across all collections as well as summarize the similarity and differences of these collections along each com- mon theme. this general problem subsumes many interest- ing applications, including business intelligence and opinion summarization. we propose a generative probabilistic mix- ture model for comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the model can be estimated efficiently using the expectation-maximization (em) algo- rithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. categories and subject descriptors: h.3.3 [informa- tion search and retrieval]: text mining general terms: algorithms keywords: comparative text mining, mixture models, clus- tering 1. introduction text mining is concerned with extracting knowledge and patterns from text [5, 6]. while there has been much re- search in text mining, most existing research is focused on one single collection of text. the goals are often to extract basic semantic units such as named entities, to extract rela- tions between information units, or to extract topic themes. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. kdd'04, august 22-25, 2004, seattle, washington, usa. copyright 2004 acm 1-58113-888-1/04/0008 ...$5.00. in this paper, we study a novel problem of text mining re- ferred to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent common themes across all collections as well as summarize the similarity and differ- ences of these collections along each common theme. specif- ically, the task involves: (1) discovering the different com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. the need for comparative text mining exists in many different applica- tions, including business intelligence, summarizing reviews of similar products, and comparing different opinions about a common topic in general. in this paper, we study the ctm problem and propose a generative probabilistic mixture model for ctm. the model simultaneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the mixture model is based on component multinomial distribution models, each characterizing a different theme. the common themes and collection-specific themes are explicitly modeled. the pro- posed model can be estimated efficiently using the expectation- maximization (em) algorithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. the rest of the paper is organized as follows. in section 2, we briefly introduce the problem of ctm. we then present a baseline simple mixture model and a new cross-collection mixture model in section 3 and section 4. we discuss the experiment results in section 5. 2. comparative text mining 2.1 a motivating example with the popularity of e-commerce, online customer eval- uations are becoming widely provided by online stores and third-party websites. pioneers like amazon.com and epin- ions.com have accumulated large amounts of customer input including reviews, comments, recommendations and advice, etc. for example, the number of reviews in epinions.com 743 research track poster is more than one million[4]. given a product, there could be up to hundreds of reviews, which is impossible for the readers to go through. it is thus desirable to summarize a collection of reviews for a certain type of products in order to provide the readers the most salient feedbacks from the peers. for review summarization, the most important task is to identify different semantic aspects of a product that the reviewers mentioned and to group the opinions accord- ing to these aspects to show similarities and differences in the opinions. for example, suppose we have reviews of three different brands of laptops (dell, ibm, and apple), and we want to summarize the reviews. a useful summary would be a tab- ular representation of the opinions as shown in table 1, in which each row represents one aspect (subtopic) and differ- ent columns correspond to different opinions. table 1: a tabular summary subtopics dell ibm apple battery life long enough short short memory good bad good speed slow fast fast it is, of course, very difficult, if not impossible to pro- duce such a table completely automatically. however, we can achieve a less ambitious goal - identifying the semantic aspects and identifying the common and specific character- istics of each product in an unsupervised way. this is a concrete example of comparative text mining. 2.2 the general problem the example above is only one of the many possible appli- cations of comparative text mining. in general, the task of comparative text mining involves: (1) discovering the com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. it is very hard to precisely define what a theme is, but it corresponds roughly to a topic or subtopic. the granularity of themes is application-specific. ctm is a fundamental task in ex- ploratory text analysis. in addition to opinion comparison and summarization, it has many other applications, such as business intelligence (comparing different companies), cus- tomer relationship management (comparing different groups of customers), and semantic integration of text (comparing component text collections). ctm is challenging in several ways: (1) it is a completely unsupervised learning task; no training data is available. (it is for the same reason that ctm can be very useful for many different purposes - it makes minimum assumptions about the collections and in principle we can compare any arbitrary partition of text.) (2) we need to identify themes across different collections, which is more challenging than identifying topic themes in one single collection. (3) the task involves a discrimination component - for each discov- ered theme, we also want to identify the unique information specific to each collection. such a discrimination task is dif- ficult given that we do not have training data. in a way, ctm goes beyond the regular one-collection text mining by requiring an ""alignment"" of multiple collections based on common themes. since no training data is available, in general, we must rely on unsupervised learning methods, such as clustering, to perform ctm. in this paper, we study how to use prob- abilistic mixture models to perform ctm. below we first describe a simple mixture model for clustering, which repre- sents a straightforward application of an existing text min- ing method, and then present a more sophisticated mixture model specifically designed for ctm. 3. clustering with a simple mixture model   th  th  th "" $ % th ' th figure 1: the simple mixture model a naive solution to ctm is to treat the multiple collec- tions as one single collection and perform clustering. our hope is that some clusters would represent the common themes across the collections, while some others would rep- resent themes specific to one collection (see figure 1). we now present a simple multinomial mixture model for clus- tering an arbitrary collection of documents, in which we assume there are k latent common themes in all collections, and each is characterized by a multinomial word distribu- tion (also called a unigram language model). a document is regarded as a sample of a mixture model with these theme models as components. we fit such a mixture model to the union of all the text collections we have, and the obtained component multinomial models can be used to analyze the common themes and differences among the collections. formally, let c = {c1, c2, ..., cm} be m comparable col- lections of documents. let th1, ..., thk be k theme unigram language models and thb be the background model for all the collections. a document d is regarded as a sample of the following mixture model (based on word generation). pd(w) = lbp(w|thb) + (1 - lb) k j=1 [pd,jp(w|thj)] where w is a word, pd,j is a document-specific mixing weight for the j-th aspect theme, and k j=1 pd,j = 1. lb is the mix- ing weight of the background model thb. the log-likelihood of all the collections c is log p(c|l) = m i=1 dci wv [c(w, d) x log(lbp(w|thb) + (1 - lb) k j=1 (pd,jp(w|thj)))] where v is the set of all the words (i.e., vocabulary), c(w, d) is the count of word w in document d, and l = ({thj, pd,j}k j=1 744 research track poster is the set of all the theme model parameters. the purpose of using a background model is to ""force"" clustering to be done based on more discriminative words, leading to more informative and more discriminative component models. we control this effect through thb. the model can be estimated using any estimator. for example, the expectation-maximization (em) algorithm [3] can be used to compute a maximum likelihood estimate with the following updating formulas: p(zd,w = j) = p(n) d,j p(n)(w|thj) k j'=1 p(n) d,j'p(n)(w|thj') p(zd,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j p(n)(w|thj) p(n+1) d,j = wv c(w, d)p(zd,w = j) j' wv c(w, d)p(zd,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,w = b))p(zd,w = j) w'v m i=1 dci c(w', d)(1 - p(zd,w' = b))p(zd,w' = j) this mixture model is closely related to the probabilis- tic latent semantic indexing model (plsi) proposed in [7] and treats ctm as a single-collection text mining problem. however, such a simple model is inadequate for ctm for two reasons: (1) we have completely ignored the structure of collections. as a result, we may have clusters that repre- sent only some, not all of the collections. (2) there is no easy way to identify which theme cluster represents the common information across collections and which represents specific information to a particular collection. below we present a more sophisticated coordinated mixture model, which is specifically designed for ctm and addresses these two defi- ciencies. 4. clustering with a cross- collection mixture model  th th    th     th    th    th    th    th    th figure 2: the cross-collection mixture model 4.1 the model our main idea for improving the simple mixture model for comparative text mining is to explicitly distinguish com- mon theme clusters that characterize common information across all collections from special theme clusters that char- acterize collection-specific information. thus we now con- sider k latent common themes as well as a potentially dif- ferent set of k collection-specific themes for each collection (illustrated in figure 2). these component models directly correspond to all the information we are interested in discov- ering. the sampling distribution of a word in document d (from collection ci) is now collection-specific. specifically, it involves the background model (thb), k common theme models (th1, ..., thk), and k collection-specific theme models (th1,i, ..., thk,i), which are to capture the unique information about the k themes in collection ci. that is, pd(w|ci) = (1 - lb) k j=1 [pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))] +lbp(w|thb) where lb is the weight on the background model thb and lc is the weight on the common theme model thj (as opposed to the collection-specific theme model thj,i). intuitively, when we ""generate"" a word, we first decide whether to use the background model thb according to lb; the larger lb is, the more likely we will use thb. if we decide not to use thb, then we need to decide which theme to use; this is controlled by pd,j, the probability of using theme j when generating words in d. finally, once we decide which theme to use, we still need to decide whether we should use the common theme model or the collection-specific theme model, and this is con- trolled by lc, the probability of using the common model. the weighting parameters lb and lc are intentionally to be set by the user, and their interpretation is as follows. lb reflects our knowledge about how noisy the collections are. if we believe the text is verbose, then lb should be set to a larger value. in our experiments, a value of 0.9 - 0.95 often works well. lc indicates our emphasis on the commonality, as opposed to the speciality in comparative text mining. a larger lc would allow us to learn a richer common theme model, whereas a smaller one would learn a weaker com- mon theme model, but stronger special models. the optimal value depends on the specific applications. according to this generative model, the log-likelihood of the whole set of collections is log p(c) = m i=1 dci wv [c(w, d) log[lbp(w|thb) +(1 - lb) k j=1 pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))]] 4.2 parameter estimation we estimate the background model thb using all the avail- able text in the m text collections. that is, ^p(w|thb) = m i=1 dci c(w, d) m i=1 dci w'v c(w', d) since lb and lc are set manually, this leaves us with the following parameters to estimate: (1) the common theme models, th = {th1, ..., thk}; (2) the special theme models for each collection ci, thci = {th1,i, ..., thk,i}; and (3) the theme mixing weights for each document d: pd = {pd,1, ..., pd,k}. 745 research track poster p(zd,ci,w = j) = p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) k j'=1 p(n) d,j'(lcp(n)(w|thj') + (1 - lc)p(n)(w|thj',i)) p(zd,ci,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) p(zd,ci,j,w = c) = lcp(n)(w|thj) lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i) p(n+1) d,j = wv c(w, d)p(zd,ci,w = j) j' wv c(w, d)p(zd,ci,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)p(zd,ci,j,w = c) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)p(zd,ci,j,w' = c) p(n+1)(w|thj,i) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)(1 - p(zd,ci,j,w = c)) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)(1 - p(zd,ci,j,w' = c)) figure 3: em updating formulas for the cross-collection mixture model as in the simple mixture model, we can also use the em algorithm to compute a maximum likelihood estimate. the updating formulas are shown in figure 3. each em iteration involves scanning all the text once, so the algorithm is quite scalable. 4.3 using the model once the model is estimated, we will have k collection- specific models for each of the m collections and k common theme models across all collections. each of these mod- els is a word distribution or unigram language model. the high probability words can characterize the theme/cluster extracted. such words can often be used directly as a sum- mary or indirectly (e.g., through a hidden markov model) to extract relevant sentences to form a summary of the cor- responding theme. the extracted word distributions can also be used in many other ways, e.g., to classify other text documents or to link the related passages in the text collec- tions so that a user can navigate the information space for comparative analysis. we can input our bias for ctm through setting lb and lc manually. specifically, lb allows us to input our knowledge about the noise (stop words) in the data - if we know the text data is verbose, then we should set lb to a high value, whereas if the data is concise and mostly content-bearing keywords, then we need to set lb to a smaller value. sim- ilarly, lc allows us to input a trade-off between extracting common theme models (setting lc to a higher value) vs. ex- tracting collection-specific models (setting lc to a smaller value). such biases cannot be learned by the maximum like- lihood estimator. indeed, maximizing the data likelihood is only a means to achieve our ultimate goal, which is why we want to regularize our model in a meaningful way so that we can impose certain preferences while maximizing the data likelihood. the flexibility and control provided by lb and lc make it possible for a user to control the focus of the results of comparative text mining. 5. experiments and result analysis we evaluated the simple mixture model (simpmix) and the cross-collection mixture model (ccmix) on two do- mains - war news and laptop reviews. 5.1 war news the war news data consists of news excerpts on two com- parable events: (1) iraq war and (2) afghanistan war, both of which occurred in the last two years. the iraq war news excerpts were a combination of 30 articles from the cnn and bbc web sites over the last one year span. the afghanistan war data consists of 26 news articles downloaded from the cnn and bbc web sites for one year starting from nov. 2001. our goal is to compare these two wars and find out their common and specific characteristics. the results of using either the simple mixture model or the cross-collection mixture model are shown in table 2, where the top words of each theme model are listed along with their probabilities. we set lb = 0.95 for simpmix and set lb = 0.9, lc = 0.25 for ccmix; in both cases, the number of clusters is fixed to 5. variations of these parameters are discussed later. we see that although there are some interesting themes in the results of simpmix (e.g., cluster3 and cluster4 appear to be about american and british inquiry into the pres- ence of weapons in iraq, respectively, while cluster2 suggests the presence of british soldier in basra, a town in southern iraq), they are all about iraq war. we do not see any obvi- ous theme common to both iraq war and afghanistan war. this is expected given that simpmix pools all documents together without exploiting the collection structure. in contrast, the results of ccmix explicitly suggest the common themes and the corresponding collection-specific themes. for example, cluster3 clearly suggests that in both wars, there has been loss of lives. furthermore, the top words in the corresponding iraq theme include names of some key defense people that are involved in the iraq war (e.g., ""hoon"" is the last name of the british defense secre- tary and ""sanchez"" is the last name of the u.s general in iraq). in comparison, the top words in the corresponding afghanistan theme includes the name of the u.s defense secretary who had an important role in the afghan war. cluster4 and cluster5 are also meaningful themes. the common theme captured in cluster4 is the monday briefings by an official spokesman of a political administration during both wars; the corresponding special themes indicate the dif- ference in the topics discussed in the briefings (e.g., weapon inquiry for iraq war and bin laden for afghanistan war). the common theme of cluster5 is about the diplomatic role 746 research track poster table 2: war news results using simpmix model (top) vs. ccmix model (bottom) cluster1 cluster2 cluster3 cluster4 cluster5 common will 0.019 british 0.017 weapons 0.022 inquiry 0.052 countries 0.026 theme let 0.012 soldiers 0.015 kay 0.021 intelligence 0.036 contracts 0.023 words united 0.012 baghdad 0.015 rumsfeld 0.017 dossier 0.024 allawi 0.012 god 0.011 air 0.011 commission 0.014 hutton 0.021 hoon 0.012 inspectors 0.011 basra 0.011 group 0.014 claim 0.019 russian 0.010 your 0.010 mosque 0.010 senate 0.011 wmd 0.019 international 0.010 nation 0.010 southern 0.01 survey 0.010 mps 0.018 russia 0.009 n 0.010 fired 0.010 paper 0.010 committee 0.017 reconstruction 0.009 cluster1 cluster2 cluster3 cluster4 cluster5 common us 0.042 mr 0.029 killed 0.036 monday 0.036 united 0.042 theme nation 0.030 marines 0.025 month 0.032 official 0.032 nations 0.04 words will 0.024 dead 0.023 deaths 0.023 i 0.029 with 0.03 action 0.022 general 0.022 one 0.023 would 0.028 is 0.025 re 0.022 defense 0.019 died 0.022 where 0.025 it 0.024 border 0.019 key 0.018 been 0.022 do 0.025 they 0.023 its 0.017 since 0.018 drive 0.018 spokesman 0.022 diplomatic 0.023 ve 0.016 first 0.016 according 0.015 political 0.021 blair 0.022 iraq god 0.022 iraq 0.022 troops 0.016 intelligence 0.049 n 0.03 theme saddam 0.016 us 0.021 hoon 0.015 weapons 0.034 weapons 0.024 words baghdad 0.013 baghdad 0.017 sanchez 0.012 inquiry 0.028 inspectors 0.023 your 0.012 nato 0.015 billion 0.01 commission 0.017 council 0.016 live 0.01 iraqi 0.013 spokeswoman 0.008 independent 0.016 declaration 0.015 afghan paper 0.021 story 0.028 taleban 0.026 bin 0.031 northern 0.040 theme afghan 0.019 full 0.026 rumsfeld 0.020 laden 0.031 alliance 0.040 words meeting 0.014 saturday 0.016 hotel 0.012 steinberg 0.027 kabul 0.030 euro 0.012 e 0.015 front 0.011 taliban 0.023 taleban 0.025 highway 0.012 rabbani 0.012 dropped 0.010 chat 0.019 aid 0.020 played by the united nations (un). the corresponding spe- cial themes again suggest the difference between the two wars. the iraq theme indicates the role of un in sending weapon inspectors to iraq; the afghanistan theme refers to northern alliance that received aid from the un and came to power in afghanistan after the defeat of taliban. 5.2 laptop customer reviews this data set was constructed to test our models for com- paring opinions of customers on different laptops. we man- ually downloaded the following 3 review sets from epin- ions.com [4], filtering out the misplaced ones: apple ibook (m8598ll/a) mac notebook (34 reviews), dell inspiron 8200 (8tworh) pc notebook (22 reviews), ibm thinkpad t20 2647 (264744u) pc notebook (42 reviews). the results on this data set are generally similar to those on war news. due to the limit of space, we only show the ccmix results in table 3, which are obtained by setting lc=.7 and lb=.96 and fixing the number of clusters to 8. here we again see many very interesting common themes; in- deed, the top two words in the common themes can provide a very good summary of the themes (e.g., ""sound and speak- ers"" for cluster1, ""battery hours"" for cluster5, and ""mi- crosoft office"" for cluster8). however, the special themes, although suggesting some differences among the three lap- tops, are much harder to interpret. this may be because there is a great deal of variation in product-specific opin- ions in the data, which makes the data extremely sparse for learning a coherent collection-specific theme for each of the eight themes. 5.3 parameter tuning when we vary lb and lc in ccmix, the results are gen- erally different. specifically, when lb is set to a small value, non-informative stop words tend to show up in common themes. a reasonable value for lb is generally higher than 0.9 - in that case, the model automatically eliminates the non-informative words from the theme clusters, allowing for more discriminative clustering. indeed, in all our experi- ments, we have intentionally retained all the stop words, and the model is clearly able to filter out non-informative words, though in some cases, they still show up as top words in the common themes of the news data. they can be ""eliminated"" by using an even higher lb, but then we may end up having insufficient information to learn a common theme reliably. lc affects the vocabulary allocation between the common and collection-specific themes. in the news data experiments, when we change lc to a value above 0.4, the collection-specific terms would dominate the common theme models. in the laptop data experiments, when lc is less than 0.7, we lose many content keywords of the com- mon themes to the corresponding collection-specific themes. both lb and lc are intentionally left for a user to tune so that we can incorporate application-specific bias into the model. 6. related work the most related work to our work is the coupled clus- tering method presented in [8], which appears to be one of the very few studies considering the clustering problem in multiple collections. they extend the information bottle- neck approach to discover common clusters across different collections. comparative text mining goes beyond this by analyzing both the similarities and collection-specific differ- ences. we also use a completely different approach based on probabilistic mixture models. another related work is [10], where cross-training is used for learning classifiers from mul- tiple document sets. our work differs from it in that we per- form unsupervised learning. the aspect models studied in [7, 2] are also related to our work but they are closer to our baseline model and are not designed for comparing multiple collections. there are many studies in document clustering [1]. again, the difference lies in that they consider only one collection and thus are similar to the baseline model. our work is also related to document summarization, es- pecially multiple document summarization (e.g.,[9, 12]). in- deed, we can the results of ctm as a special form of sum- mary of multiple text collections. however, an important difference is that while a summary intends to retain the ex- plicit information in text (to maintain fidelity), ctm aims at extracting non-obvious implicit patterns. 7. conclusions and future work in this paper, we define and study a novel text mining problem referred to as comparative text mining. it is con- 747 research track poster table 3: laptop review results using ccmix model cluster1 cluster2 cluster3 cluster4 cluster5 cluster6 cluster7 cluster8 c sound 0.035 port 0.023 ram 0.105 m 0.027 battery 0.129 t 0.039 cd 0.095 office 0.037 o speakers 0.035 jack 0.021 mb 0.037 trackpad 0.018 hours 0.080 modem 0.017 drive 0.076 microsoft 0.021 m playback 0.034 ports 0.018 memory 0.034 chip 0.013 life 0.060 internet 0.017 rw 0.055 little 0.018 m feel 0.019 will 0.018 256mb 0.027 improved 0.012 5 0.038 later 0.014 dvd 0.049 basic 0.015 o pros 0.017 your 0.017 128mb 0.021 volume 0.012 end 0.016 configuration 0.014 combo 0.025 6 0.014 n cons 0.017 warm 0.013 tech 0.020 did 0.011 3 0.016 free 0.013 drives 0.023 under 0.013 market 0.017 keep 0.012 128 0.020 latch 0.011 high 0.015 vga 0.012 rom 0.020 mhz 0.012 size 0.014 down 0.012 support 0.018 make 0.010 processor 0.014 were 0.012 floppy 0.017 word 0.011 d rests 0.026 banias 0.019 options 0.039 inspiron 0.061 dells 0.032 fans 0.019 apoint 0.017 0 0.046 e palm 0.022 svga 0.014 sodimm 0.025 pentium 0.052 ran 0.017 shipping 0.017 blah 0.015 angle 0.018 l 9000 0.020 record 0.014 eraser 0.021 8200 0.03 prong 0.015 2nd 0.016 hook 0.011 portion 0.0154 l smart 0.018 supposedly 0.013 crucial 0.018 toshiba 0.027 requiring 0.014 tracking 0.015 tug 0.011 usb 0.0153 reader 0.018 rebate 0.013 sdram 0.018 440 0.026 second 0.011 spoke 0.015 2499 0.011 specials 0.014 a magazine 0.011 osx 0.040 macos 0.019 macos0.016 g4 0.016 iphoto 0.031 airport 0.075 appleworks 0.060 p ipod 0.010 quartz 0.015 personal 0.018 netscape 0.013 interlaced 0.016 itunes 0.027 burn 0.035 word 0.021 p strong 0.01 instance 0.014 shield 0.016 apache 0.009 mac 0.016 import 0.021 4x 0.018 result 0.016 l icon 0.009 underneath 0.012 airport 0.016 ie5 0.008 imac 0.014 book 0.018 reads 0.014 spreadsheet 0.013 e choppy 0.008 cooling 0.012 installation 0.015 ll 0.008 powermac 0.012 quicktime 0.016 schools 0.013 excel 0.012 i technology 0.023 rj 0.033 exchange 0.023 company 0.021 thinkpad 0.077 thinkpads 0.020 t20 0.04 list 0.015 b outdated 0.020 chik 0.018 hassle 0.016 570 0.017 ibm 0.047 connector 0.018 ultrabay 0.030 factor 0.013 m surprisingly 0.018 dsl 0.017 disc 0.015 turn 0.017 covers 0.029 connectors 0.018 tells 0.021 months 0.013 trackpoint 0.014 45 0.015 t23 0.012 buttons 0.015 lightest 0.028 bluetoot 0.018 device 0.021 cap 0.013 recommend 0.013 pacbell 0.012 cdrw 0.015 numlock 0.012 3000 0.027 sturdy 0.011 number 0.020 helpdesk 0.0128 cerned with discovering any latent common themes across a set of comparable collections of text as well as summariz- ing the similarities and differences of these collections along each theme. we propose a generative cross-collection mixture model for performing comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. we define the model and present the em algorithm that can estimate the model ef- ficiently. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method based on a simple mixture model. experiment results show that the cross-collection mixture model is quite effective in dis- covering the latent common themes across collections and performs significantly better than the baseline simple mix- ture model. the proposed model has many obvious applica- tions in opinion summarization and business intelligence. it also has many other less obvious applications in the general area of text mining and semantic integration of text. for example, our model can be used to compare the course web pages from the major computer science department web sites to discover core computer science topics. it can also be used to compare literature collections in different communities to support concept switching [11]. the work reported in this paper is just an initial step toward a promising new direction. there are many interest- ing future research directions. first, it may be interesting to explore how we can further improve the ccmix model and its estimation. one interesting direction is to explore the maximum a posterior (map) estimator, which would allow us to incorporate more prior knowledge in a princi- pled way. for example, a user may already have certain thematic aspects in mind. with map estimation, we can easily add that bias to the component models. second, we can generalize our model to model semi-structured data to perform more general comparative data mining. one way to achieve this goal is to introduce additional random variables in each component model so that we can model any struc- tured data. finally, it would be very interesting to explore how we could exploit the learned theme models to provide additional help to a user who wants to perform comparative analysis. for example, the learned common theme models can be used to construct a hidden markov model (hmm) to identify the parts in the text collections about the common themes, and to connect them through automatically gener- ated hyperlinks. this would allow a user to easily navigate through the common themes. 8. references [1] d. baker and a. mccallum. distributional clustering of words for text classification. in proceedings of acm sigir 1998, 1998. [2] d. blei, a. ng, and m. jordan. latent dirichlet allocation. journal of machine learning research, 3:993-1022, 2003. [3] a. p. dempster, n. m. laird, and d. b. rubin. maximum likelihood from incomplete data via the em algorithm. journal of royal statist. soc. b, 39:1-38, 1977. [4] epinions.com, 2003. http://www.epinions.com/. [5] r. feldman and i. dagan. knowledge discovery in textual databases. in proceedings of the international conference on knowledge discovery and data mining, 1995. [6] m. a. hearst. untangling text data mining. in proceedings of acl'99, 1999. [7] t. hofmann. probabilistic latent semantic indexing. in proceedings of acm sigir'99, pages 50-57, 1999. [8] z. marx, i. dagan, j. buhmann, and e. shamir. coupled clustering: a method for detecting structural correspondence. journal of machine learning research, 3:747-780, 2002. [9] k. mckeown, j. l. klavans, v. hatzivassiloglou, r. barzilay, and e. e. towards multidocument summarization by reformulation: progress and prospects. in proceedings of aaai-99. [10] s. sarawagi, s. chakrabarti, and s. godbole. cross-training: learning probabilistic mappings between topics. in proceedings of acm sigkdd 2003. [11] b. r. schatz. the interspace: concept navigation across distributed communities. computer, 35(1):54-62, 2002. [12] h. zha. generic summarization and keyphrase extraction using mutual reinforcement principle and sentence clustering. in proceedings of acm sigir 2002. 748 research track poster diego millan - netid: diegom3 cs410: text information systems - uiuc project documentation reproducing a paper: a cross-collection mixture model for comparative text mining introduction my project selection is the reproduction of the paper titled ""a cross-collection mixture model for comparative text mining"" cited at the end of this document. the idea is to propose an improvement over simple mixture model for comparative text mining by explicitly distinguish the collections being compared. this allows to generate topic language models that are specific to each collection along with a common topic language model that describes all collections for each cluster (see figure 2). the model in a simple mixture model, the probability of a word is given by the sum of the portion of probability of being generated by a background model plus the probability of being generated by a topic model. notice lb below is acting as a parameter that tunes the weight being applied to the background model. the parameter p is present on both models and simply describes the mix of topics of each document. in the proposed cross-collection mixture model, the number of topic language models grows from k in the simple mixture mode to k + mk, being k the number of topics, v the vocabulary size and m the number of collections. we also add another tunable parameter lc that acts as the weight we give to the common topic models. so, in simple term, the probability of a word in a given collection is the diego millan - netid: diegom3 cs410: text information systems - uiuc sum of it being generated by the background model plus the probability of being generated by either the common topic model or the collection specific topic model. implementation for the implementation i used as base the plsa programming assignment. in the assignment we did not have a background model so a function ""build_background_model"" was implemented using the whole corpus as follows: the functions ""build_corpus"", ""build_vocabulary"", ""build_term_doc_matrix"" and ""initialize_randomly"" were mostly kept the same as they are also necessary for this model. they were only modified to explicitly separate the different m collections. for example, instead of relying in the ""self.documents"" matrix that contained all the documents, ""self.documents_collections"" was created which is a list of arrays that contain the documents of length m. a similar approach was used on the other mentioned functions. the em algorithm was heavily modified as the number of parameters grew considerably compared to the plsa assignment. the following formulas were used to update the e and m step: diego millan - netid: diegom3 cs410: text information systems - uiuc however, i identified a mistake in the last formula that suggests a sum across collections to calculate the specific topic model probabilities which would end up removing the distinctions between collections and also removing one dimension of parameters. this was confirmed by the tas as a mistake. finally, to monitor the performance of the algorithm, a log-likelihood function essentially the same as the one on plsa assignment but with the additional parameters was implemented following the given formula on the paper: i also made a simple mixture model implementation to compare the results, the em updating formulas and log-likelihood estimation con be found on the referenced paper. experiments the model was tested with 2 data sets, one with a collection of 59 news articles of the iraq and afghanistan war (26 from afghanistan and 33 from iraq war) from 2 different sources (bbc and cnn). the second data set are laptop reviews of 3 different models (a macbook, a dell xps and a lenovo yoga) with a total of 250 reviews obtained from amazon.com. lc and lb have to be tuned by the user. we can think of lb as how verbose the text is, the more it is, the more non-significant words we will find which in turn means we want to select a higher value. generally, something higher than 0.9 is recommended. for lc, as we go higher, we enrich the common topic models but hurt the specific, and vice versa, so it should be set very carefully based on the data and where we want the most emphasis. the data sets used in the paper are not explicitly referenced so it was impossible to obtain the same exact data, which means i'm unable to reproduce the exact same response as in the paper and also have to tune my own l parameters. here are my results: table 1. simple mixture model war news word kit wolfowitz clothing nbc desert buy equipmentlogistics prob 0.03732396 0.03374832 0.02093988 0.01928082 0.01928082 0.01456099 0.0134511 0.0128544 word ghraib abu symbol prison guards photo demolishedusa prob 0.06427516 0.04786124 0.02022767 0.01926176 0.01506055 0.01155932 0.0115593 0.0092431 word sarin shell nerve neill bowden filled agent o prob 0.0378052 0.03047289 0.02514473 0.02077332 0.01689814 0.0160316 0.014525 0.013795 word taliban al laden bin alliance northern he hussein prob 0.01549612 0.00955844 0.00785728 0.00769362 0.00731475 0.00660803 0.0056029 0.0055208 word eta propaganda black trains legality undermine planting options prob 0.03331262 0.02464671 0.01716214 0.0166588 0.01129754 0.01129754 0.0112975 0.0112975 theme 1 theme 2 theme 3 theme 4 theme 5 diego millan - netid: diegom3 cs410: text information systems - uiuc while clustered words talk about certain topics common between both wars, it is not possible to make a distinction of which words belong to which collection. table 2. cross-collection mixture model war news in the cross-collection model we can for example see cluster 2, where the common theme talks about prisoners, prison, detainees, detention, guards, while in the corresponding collection specific cluster we can see the location were these prisoners were being held. the guantanamo bay detention camp is referenced in the afghanistan cluster, which is relevant, while the iraq war references abu ghraib, which is also a prison relevant to iraq war. the output of the model is a text file named either ""simpmix_output.txt"" for the simple model and ""ccmix_output.txt"" for the cross-collection model. also, due the nature of randomly initializing parameters, runs can vary so i included a few other runs in the ""test"" folder. in the same folder, output for the laptop reviews can be found that were omitted in this documentation . challenges and opportunities for improvement during the implementation i encountered 2 issues that persisted and was not able to figure out. the first one is related to my log-likelihood estimation which as stated in the lectures, the em algorithm monotonically increases the likelihood. i ran into the problem that at some point relatively early in the word bin laden saudi jihad video arabia plot family father authorities prob 0.18939329 0.0981552 0.03564389 0.03239276 0.03145353 0.02699685 0.0189802 0.0143503 0.01357955 0.01339957 word laden saudi recorded sudan yemen prob 0.1028003 0.02914018 0.02332654 0.02035473 0.02033913 word data ritter bowden mi dubious prob 0.03806887 0.03382954 0.03000792 0.02535748 0.02112141 word prisoners prison detainees detention ghraib guards executed rights amnesty geneva prob 0.12874343 0.08034044 0.03878431 0.02395434 0.02115945 0.02067663 0.01651596 0.01642986 0.01595376 0.01563221 word treated guantanamo cuba base bay prob 0.03936906 0.03658937 0.03625978 0.02769193 0.02742886 word ghraib abu symbol usa photo prob 0.07908194 0.07583343 0.02150438 0.01337695 0.01223926 word blasts spanish aznar seven eta king policies condolences madrid bombs prob 0.03022417 0.02932321 0.02662327 0.02131074 0.01481973 0.01430479 0.01400754 0.0121993 0.01211067 0.01150711 word cache bank demonstrators imf southeastern prob 0.03169261 0.02730445 0.02130979 0.01598093 0.01584349 word eta trains spain express karbala prob 0.03305906 0.0198423 0.01936481 0.01058035 0.01055226 word pentagon cheney wolfowitz libya europe abroad japan controversial vice rumsfeld prob 0.04913761 0.03856055 0.02993884 0.02717369 0.02278614 0.02217882 0.01865351 0.01719155 0.01598577 0.01430421 word french karachi propaganda black bus prob 0.06793751 0.05502965 0.03675501 0.03230034 0.02751049 word wolfowitz libya japanese gadhafi dispatch prob 0.06058456 0.05405023 0.02317438 0.02227723 0.01039494 word the of to that and in is was a we prob 0.07975547 0.03963266 0.03214286 0.02182307 0.0187433 0.01801543 0.01676557 0.01557104 0.01537607 0.01396474 word taliban afghanistan alliance northern kandahar prob 0.08405706 0.03487229 0.03465308 0.03116097 0.02699336 word iraq saddam iraqi hussein i prob 0.04380953 0.0299254 0.02065532 0.01254649 0.00693652 cluster 5 - collection afghanistan war cluster 1 - collection iraq war cluster 2 - collection iraq war cluster 3 - collection iraq war cluster 4 - collection iraq war cluster 5 - collection iraq war common theme cluster 1 common theme cluster 2 common theme cluster 3 common theme cluster 4 common theme cluster 5 cluster 1 - collection afghanistan war cluster 2 - collection afghanistan war cluster 3 - collection afghanistan war cluster 4 - collection afghanistan war diego millan - netid: diegom3 cs410: text information systems - uiuc iterations, the likelihood decreases for a few iterations and then goes back to improve without interruption until convergence. i was unable to find any issues with my em algorithm or the calculation of log-likelihood. i'm inclined to believe this could be an underflow issue during the e-step. i tried implementing the normalization to avoid underflow technique in lecture 10.4 but it did not make a difference, so the cause remains unknown. the second problem was undefined divisions (division by 0) which caused the algorithm to crash. i was able to patch this issue by implementing pseudo counts in the m-step by adding a uniformly distributed prior with a parameter u = 1 as seen in lecture 9.9. this essentially guarantees each word ""appears"" at least once and avoids divisions by 0. i don't believe this diverges too much from reality so i thought it was a reasonable fix. would be interested if the authors ran into a similar issue or if this is an implementation problem on my side. conclusion the cross-collection mixture model can be a powerful tool when tuned optimally to create more meaningfully comparisons than the simple mixture model. in the experiments, for example the laptop reviews output, can be clearly used by manufactures to identify the weaknesses and strengths of their product while also learning valuable information of their competitors as analyzing reviews individually or pooled can easily misdirect us from what is really important. but clearly we can extract insights from any comparable collections, maybe m different medical treatments response based on testimony from patients, political ideologies on social media and where they intersect or differ, etc. diego millan - netid: diegom3 cs410: text information systems - uiuc reference chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 diego millan - netid: diegom3 cs410: text information systems - uiuc project progress report reproducing a paper: a cross-collection mixture model for comparative text mining 1) which tasks have been completed? * similar test data has been compiled for both experiments described in the paper. i'm using about ~30 news articles per event (afghanistan and iraq war) from bbc and cnn news and a combined total of 250 reviews of 3 recent model of laptops (lenovo, dell and apple) from amazon.com. * data has been roughly curated. major spelling errors were removed. * i'm using the mp3 skeleton code as base since it is very similar to the paper structure-wise and can help me and reviewers follow along the code. * the following functions have been added or implemented: o init variables - added needed variables o build corpus - builds whole corpus and individual collections. cleans data of punctuation and digits o build vocabulary - same as mp3 o build term matrix - added term matrix per individual collection o build background model - this is a new function o random initialization of parameters with normalization o expectation step - first implementation o maximization step - first implementation * currently writing the clustered words to 2 different text files, one for the top ten words per topic on ""common.txt"" and top 10 words per collection per topic on ""specific.txt"" 2) which tasks are pending? * implement log likelihood function * check for errors in algorithm (see question 3, challenges faced) * interpret and report results in a friendly manner * tune lambda b and c parameters (background and collections ""weights"") * clean code 3) are you facing any challenges? in the em updating formulas presented on the paper, i have not figured out one operation circled in the image below. the formula states to sum the terms across all d's in ci across all cm (collections). if my understanding is correct, this is wrong as that would pool all the documents in the corpus together and lose the focus to a specific collection ending up with only ""k"" themes. my current implementation only sums across all d's in ci and normalizes based on this sum across words. this results in ""k"" times ""number of collections"" specific theme models where all probabilities sum to 1 within each of them. will reach out to ta if i get stuck debugging. diego millan - netid: diegom3 cs410: text information systems - uiuc diego millan - netid: diegom3 cs410: text information systems - uiuc project proposal reproducing a paper: contextual text mining 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. will work individually on the project. captain: diego millan netid: diegom3 2. which paper have you chosen? the paper selected is one of the contextual text mining subtopic options, specifically the following: chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150. 3. which programming language do you plan to use? i plan on using python. 4. can you obtain the datasets used in the paper for evaluation? the paper references 2 datasets, the first one is about war news that compares the iraq and afghanistan war. the second dataset compares 3 laptop model reviews. i am not able to obtain the exact same datasets used on the paper. diego millan - netid: diegom3 cs410: text information systems - uiuc 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? the paper references the bbc and cnn websites as the source of the news articles, also mentioning how many articles from each were selected and the time span (30 articles starting 1 year before the paper publication for the iraq war and 26 articles on a 1 year span starting november 2001 for the afghanistan war). unfortunately, there is no way to know the exact articles used but a similar sample can be obtained from the same sources (will be using google news to obtain random articles on the specified time span). regarding the laptop dataset, the review source website (epinions.com) no longer exists which makes it impossible to get the same dataset. since laptop reviews are readily available in numerous other sites (amazon.com could be a good replacement), my plan is to use more recent data to replace this dataset. i will be comparing a newer model of each of the 3 laptop brands referenced on the paper (apple, dell, and ibm). 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? even though the exact same datasets cannot be obtained, the alternatives should be close enough to get comparable results to the ones concluded on the paper. courseproject link to demo video https://youtu.be/o_r6izcwmgm this is the course project for cs410 fall 2020 at uiuc. the project intent is to reproduce a paper on contextual text mining, specifically the refence below. chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 please see project documentation.pdf for full explanation"	['crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'chengxiang', 'zhai', 'department', 'computer', 'science', 'university', 'illinois', 'urbana', 'champaign', 'atulya', 'velivelli', 'electrical', 'engineering', 'bei', 'yu', 'graduate', 'school', 'library', 'information', 'abstract', 'paper', 'define', 'study', 'novel', 'problem', 'refer', 'ctm', 'given', 'set', 'comparable', 'collections', 'task', 'discover', 'latent', 'com', 'mon', 'themes', 'across', 'well', 'summarize', 'similarity', 'differences', 'along', 'theme', 'general', 'subsumes', 'many', 'interest', 'ing', 'applications', 'including', 'business', 'intelligence', 'opinion', 'summarization', 'propose', 'generative', 'probabilistic', 'mix', 'ture', 'simul', 'taneously', 'performs', 'clustering', 'within', 'collection', 'applied', 'arbitrary', 'estimated', 'efficiently', 'using', 'expectationmaximization', 'em', 'algo', 'rithm', 'evaluate', 'two', 'different', 'data', 'sets', 'ie', 'news', 'article', 'laptop', 'review', 'compare', 'baseline', 'method', 'also', 'based', 'experiment', 'results', 'show', 'quite', 'effective', 'discovering', 'common', 'significantly', 'better', 'categories', 'subject', 'descriptors', 'h', 'informa', 'tion', 'search', 'retrieval', 'terms', 'algorithms', 'keywords', 'models', 'clus', 'tering', 'introduction', 'concerned', 'extracting', 'knowledge', 'patterns', 'much', 'existing', 'research', 'focused', 'one', 'single', 'goals', 'often', 'extract', 'basic', 'semantic', 'units', 'named', 'entities', 'rela', 'tions', 'topic', 'permission', 'make', 'digital', 'hard', 'copies', 'part', 'work', 'personal', 'classroom', 'use', 'granted', 'without', 'fee', 'provided', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'full', 'citation', 'first', 'page', 'copy', 'otherwise', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'prior', 'specific', 'andor', 'kdd', 'august', 'seattle', 'washington', 'usa', 'copyright', 'acm', 'ferred', 'differ', 'ences', 'specif', 'ically', 'involves', 'discovered', 'characterize', 'among', 'col', 'lections', 'unique', 'need', 'exists', 'applica', 'summarizing', 'reviews', 'similar', 'products', 'comparing', 'opinions', 'simultaneously', 'component', 'multinomial', 'distribution', 'characterizing', 'collectionspecific', 'explicitly', 'modeled', 'pro', 'posed', 'expectation', 'maximization', 'algorithm', 'rest', 'organized', 'follows', 'section', 'briefly', 'introduce', 'present', 'simple', 'new', 'discuss', 'motivating', 'example', 'popularity', 'ecommerce', 'online', 'customer', 'eval', 'uations', 'becoming', 'widely', 'stores', 'thirdparty', 'websites', 'pioneers', 'like', 'amazoncom', 'epin', 'ionscom', 'accumulated', 'large', 'amounts', 'input', 'comments', 'recommendations', 'advice', 'etc', 'number', 'epinionscom', 'track', 'poster', 'million', 'product', 'could', 'hundreds', 'impossible', 'readers', 'go', 'thus', 'desirable', 'certain', 'type', 'order', 'provide', 'salient', 'feedbacks', 'peers', 'important', 'identify', 'aspects', 'reviewers', 'mentioned', 'group', 'accord', 'similarities', 'suppose', 'three', 'brands', 'laptops', 'dell', 'ibm', 'apple', 'want', 'useful', 'summary', 'would', 'tab', 'ular', 'representation', 'shown', 'table', 'row', 'represents', 'aspect', 'subtopic', 'ent', 'columns', 'correspond', 'tabular', 'subtopics', 'battery', 'life', 'long', 'enough', 'short', 'memory', 'good', 'bad', 'speed', 'slow', 'fast', 'course', 'difficult', 'duce', 'completely', 'automatically', 'however', 'achieve', 'less', 'ambitious', 'goal', 'identifying', 'character', 'istics', 'unsupervised', 'way', 'concrete', 'possible', 'appli', 'cations', 'precisely', 'corresponds', 'roughly', 'granularity', 'applicationspecific', 'fundamental', 'ex', 'ploratory', 'analysis', 'addition', 'comparison', 'companies', 'cus', 'tomer', 'relationship', 'management', 'groups', 'customers', 'integration', 'challenging', 'several', 'ways', 'learning', 'training', 'available', 'reason', 'purposes', 'makes', 'minimum', 'assumptions', 'principle', 'partition', 'discrimination', 'discov', 'ered', 'dif', 'ficult', 'goes', 'beyond', 'regular', 'onecollection', 'requiring', 'alignment', 'multiple', 'since', 'must', 'rely', 'methods', 'perform', 'prob', 'abilistic', 'describe', 'repre', 'sents', 'straightforward', 'application', 'min', 'sophisticated', 'specifically', 'designed', 'th', 'figure', 'naive', 'solution', 'treat', 'collec', 'hope', 'clusters', 'represent', 'others', 'rep', 'resent', 'see', 'documents', 'assume', 'k', 'characterized', 'word', 'distribu', 'called', 'unigram', 'language', 'document', 'regarded', 'sample', 'components', 'fit', 'union', 'obtained', 'used', 'analyze', 'formally', 'let', 'c', 'cm', 'thk', 'thb', 'background', 'following', 'generation', 'pdw', 'lbpwthb', 'lb', 'j', 'pdjpwthj', 'w', 'pdj', 'documentspecific', 'mixing', 'weight', 'jth', 'loglikelihood', 'log', 'pcl', 'dci', 'wv', 'cw', 'x', 'loglbpwthb', 'v', 'words', 'vocabulary', 'count', 'l', 'thj', 'pdjk', 'parameters', 'purpose', 'force', 'done', 'discriminative', 'leading', 'informative', 'control', 'effect', 'estimator', 'compute', 'maximum', 'likelihood', 'estimate', 'updating', 'formulas', 'pzdw', 'pn', 'dj', 'pnwthj', 'djpnwthj', 'b', 'dpzdw', 'bpzdw', 'closely', 'related', 'probabilis', 'tic', 'indexing', 'plsi', 'proposed', 'treats', 'singlecollection', 'inadequate', 'reasons', 'ignored', 'structure', 'result', 'may', 'sent', 'easy', 'cluster', 'particular', 'coordinated', 'addresses', 'defi', 'ciencies', 'cross', 'main', 'idea', 'improving', 'distinguish', 'special', 'char', 'acterize', 'con', 'sider', 'potentially', 'ferent', 'illustrated', 'directly', 'interested', 'ering', 'sampling', 'ci', 'thi', 'thki', 'capture', 'pdwci', 'pdjlcpwthj', 'lcpwthji', 'lc', 'opposed', 'thji', 'intuitively', 'generate', 'decide', 'whether', 'according', 'larger', 'likely', 'controlled', 'probability', 'generating', 'finally', 'still', 'trolled', 'weighting', 'intentionally', 'user', 'interpretation', 'reflects', 'noisy', 'believe', 'verbose', 'value', 'experiments', 'works', 'indicates', 'emphasis', 'commonality', 'speciality', 'allow', 'us', 'learn', 'richer', 'whereas', 'smaller', 'weaker', 'stronger', 'optimal', 'depends', 'whole', 'pc', 'parameter', 'estimation', 'avail', 'able', 'pwthb', 'manually', 'leaves', 'thci', 'weights', 'pd', 'pdk', 'pzdciw', 'lcpnwthj', 'lcpnwthji', 'djlcpnwthj', 'pzdcijw', 'dpzdciw', 'bpzdciw', 'jpzdcijw', 'pnwthji', 'iteration', 'scanning', 'scalable', 'mod', 'els', 'high', 'themecluster', 'extracted', 'sum', 'mary', 'indirectly', 'eg', 'hidden', 'markov', 'relevant', 'sentences', 'form', 'cor', 'responding', 'distributions', 'classify', 'link', 'passages', 'navigate', 'space', 'bias', 'setting', 'allows', 'noise', 'stop', 'know', 'concise', 'mostly', 'contentbearing', 'sim', 'ilarly', 'tradeoff', 'higher', 'vs', 'tracting', 'biases', 'cannot', 'learned', 'lihood', 'indeed', 'maximizing', 'means', 'ultimate', 'regularize', 'meaningful', 'impose', 'preferences', 'flexibility', 'focus', 'evaluated', 'simpmix', 'ccmix', 'mains', 'war', 'consists', 'excerpts', 'parable', 'events', 'iraq', 'afghanistan', 'occurred', 'last', 'years', 'combination', 'articles', 'cnn', 'bbc', 'web', 'sites', 'year', 'span', 'downloaded', 'starting', 'nov', 'wars', 'find', 'characteristics', 'either', 'top', 'listed', 'probabilities', 'cases', 'fixed', 'variations', 'discussed', 'later', 'although', 'interesting', 'appear', 'american', 'british', 'inquiry', 'pres', 'ence', 'weapons', 'respectively', 'suggests', 'presence', 'soldier', 'basra', 'town', 'southern', 'obvi', 'ous', 'expected', 'pools', 'together', 'exploiting', 'contrast', 'suggest', 'corresponding', 'clearly', 'loss', 'lives', 'furthermore', 'include', 'names', 'key', 'defense', 'people', 'involved', 'hoon', 'name', 'secre', 'tary', 'sanchez', 'includes', 'secretary', 'role', 'afghan', 'captured', 'monday', 'briefings', 'official', 'spokesman', 'political', 'administration', 'indicate', 'ference', 'topics', 'weapon', 'bin', 'laden', 'diplomatic', 'bottom', 'countries', 'soldiers', 'kay', 'contracts', 'united', 'baghdad', 'rumsfeld', 'dossier', 'allawi', 'god', 'air', 'commission', 'hutton', 'inspectors', 'claim', 'russian', 'mosque', 'senate', 'wmd', 'international', 'nation', 'survey', 'mps', 'russia', 'n', 'fired', 'committee', 'reconstruction', 'mr', 'killed', 'marines', 'month', 'nations', 'dead', 'deaths', 'action', 'died', 'border', 'drive', 'blair', 'troops', 'saddam', 'nato', 'billion', 'council', 'live', 'iraqi', 'spokeswoman', 'independent', 'declaration', 'story', 'taleban', 'northern', 'alliance', 'meeting', 'saturday', 'hotel', 'steinberg', 'kabul', 'euro', 'e', 'front', 'taliban', 'highway', 'rabbani', 'dropped', 'chat', 'aid', 'played', 'un', 'spe', 'cial', 'difference', 'sending', 'refers', 'received', 'came', 'power', 'defeat', 'constructed', 'test', 'paring', 'man', 'ually', 'filtering', 'misplaced', 'ones', 'ibook', 'mlla', 'mac', 'notebook', 'inspiron', 'tworh', 'thinkpad', 'u', 'generally', 'due', 'limit', 'fixing', 'deed', 'sound', 'speak', 'ers', 'hours', 'mi', 'crosoft', 'office', 'suggesting', 'lap', 'tops', 'harder', 'interpret', 'great', 'deal', 'variation', 'productspecific', 'opin', 'ions', 'extremely', 'sparse', 'coherent', 'eight', 'tuning', 'vary', 'gen', 'erally', 'small', 'noninformative', 'tend', 'reasonable', 'case', 'eliminates', 'allowing', 'experi', 'ments', 'retained', 'filter', 'though', 'eliminated', 'even', 'end', 'insufficient', 'reliably', 'affects', 'allocation', 'change', 'dominate', 'lose', 'content', 'left', 'tune', 'incorporate', 'coupled', 'presented', 'appears', 'studies', 'considering', 'extend', 'bottle', 'neck', 'approach', 'analyzing', 'another', 'crosstraining', 'classifiers', 'mul', 'tiple', 'differs', 'per', 'studied', 'closer', 'lies', 'consider', 'es', 'pecially', 'intends', 'retain', 'plicit', 'maintain', 'fidelity', 'aims', 'nonobvious', 'implicit', 'conclusions', 'future', 'referred', 'port', 'ram', 'cd', 'speakers', 'jack', 'mb', 'trackpad', 'modem', 'microsoft', 'playback', 'ports', 'chip', 'internet', 'rw', 'little', 'feel', 'improved', 'dvd', 'pros', 'volume', 'configuration', 'combo', 'cons', 'warm', 'tech', 'free', 'drives', 'market', 'keep', 'latch', 'vga', 'rom', 'mhz', 'size', 'support', 'processor', 'floppy', 'rests', 'banias', 'options', 'dells', 'fans', 'apoint', 'palm', 'svga', 'sodimm', 'pentium', 'ran', 'shipping', 'blah', 'angle', 'record', 'eraser', 'prong', 'nd', 'hook', 'portion', 'smart', 'supposedly', 'crucial', 'toshiba', 'tracking', 'tug', 'usb', 'reader', 'rebate', 'sdram', 'second', 'spoke', 'specials', 'magazine', 'osx', 'macos', 'g', 'iphoto', 'airport', 'appleworks', 'p', 'ipod', 'quartz', 'netscape', 'interlaced', 'itunes', 'burn', 'strong', 'instance', 'shield', 'apache', 'import', 'icon', 'underneath', 'imac', 'book', 'reads', 'spreadsheet', 'choppy', 'cooling', 'installation', 'powermac', 'quicktime', 'schools', 'excel', 'technology', 'rj', 'exchange', 'company', 'thinkpads', 'list', 'outdated', 'chik', 'hassle', 'connector', 'ultrabay', 'factor', 'surprisingly', 'dsl', 'disc', 'turn', 'covers', 'connectors', 'tells', 'months', 'trackpoint', 'buttons', 'lightest', 'bluetoot', 'device', 'cap', 'recommend', 'pacbell', 'cdrw', 'numlock', 'sturdy', 'helpdesk', 'cerned', 'summariz', 'performing', 'ef', 'ficiently', 'dis', 'covering', 'obvious', 'area', 'pages', 'major', 'core', 'literature', 'communities', 'concept', 'switching', 'reported', 'initial', 'step', 'toward', 'promising', 'direction', 'directions', 'explore', 'improve', 'posterior', 'map', 'princi', 'pled', 'already', 'thematic', 'mind', 'easily', 'add', 'generalize', 'semistructured', 'additional', 'random', 'variables', 'struc', 'tured', 'exploit', 'help', 'wants', 'construct', 'hmm', 'parts', 'connect', 'gener', 'ated', 'hyperlinks', 'references', 'baker', 'mccallum', 'distributional', 'classification', 'proceedings', 'sigir', 'blei', 'ng', 'jordan', 'dirichlet', 'journal', 'machine', 'dempster', 'laird', 'rubin', 'incomplete', 'via', 'royal', 'statist', 'soc', 'httpwwwepinionscom', 'r', 'feldman', 'dagan', 'discovery', 'textual', 'databases', 'conference', 'hearst', 'untangling', 'acl', 'hofmann', 'z', 'marx', 'buhmann', 'shamir', 'detecting', 'structural', 'correspondence', 'mckeown', 'klavans', 'hatzivassiloglou', 'barzilay', 'towards', 'multidocument', 'reformulation', 'progress', 'prospects', 'aaai', 'sarawagi', 'chakrabarti', 'godbole', 'mappings', 'sigkdd', 'schatz', 'interspace', 'navigation', 'zha', 'generic', 'keyphrase', 'extraction', 'mutual', 'reinforcement', 'sentence', 'diego', 'millan', 'netid', 'diegom', 'cs', 'systems', 'uiuc', 'project', 'documentation', 'reproducing', 'selection', 'reproduction', 'titled', 'cited', 'improvement', 'compared', 'describes', 'generated', 'plus', 'acting', 'tunes', 'simply', 'grows', 'mode', 'mk', 'tunable', 'acts', 'give', 'term', 'implementation', 'base', 'plsa', 'programming', 'assignment', 'function', 'build_background_model', 'implemented', 'corpus', 'functions', 'build_corpus', 'build_vocabulary', 'build_term_doc_matrix', 'initialize_randomly', 'kept', 'necessary', 'modified', 'separate', 'instead', 'relying', 'selfdocuments', 'matrix', 'contained', 'selfdocuments_collections', 'created', 'arrays', 'contain', 'length', 'heavily', 'grew', 'considerably', 'update', 'identified', 'mistake', 'formula', 'calculate', 'removing', 'distinctions', 'dimension', 'confirmed', 'tas', 'monitor', 'performance', 'essentially', 'found', 'referenced', 'tested', 'sources', 'macbook', 'xps', 'lenovo', 'yoga', 'total', 'tuned', 'think', 'nonsignificant', 'select', 'something', 'recommended', 'enrich', 'hurt', 'vice', 'versa', 'carefully', 'obtain', 'exact', 'im', 'unable', 'reproduce', 'response', 'kit', 'wolfowitz', 'clothing', 'nbc', 'desert', 'buy', 'equipmentlogistics', 'ghraib', 'abu', 'symbol', 'prison', 'guards', 'photo', 'demolishedusa', 'sarin', 'shell', 'nerve', 'neill', 'bowden', 'filled', 'agent', 'al', 'hussein', 'eta', 'propaganda', 'black', 'trains', 'legality', 'undermine', 'planting', 'clustered', 'talk', 'distinction', 'belong', 'talks', 'prisoners', 'detainees', 'detention', 'location', 'held', 'guantanamo', 'bay', 'camp', 'output', 'file', 'simpmix_outputtxt', 'ccmix_outputtxt', 'nature', 'randomly', 'initializing', 'runs', 'included', 'folder', 'omitted', 'challenges', 'opportunities', 'encountered', 'issues', 'persisted', 'stated', 'lectures', 'monotonically', 'increases', 'point', 'relatively', 'early', 'saudi', 'jihad', 'video', 'arabia', 'plot', 'family', 'father', 'authorities', 'recorded', 'sudan', 'yemen', 'ritter', 'dubious', 'executed', 'rights', 'amnesty', 'geneva', 'treated', 'cuba', 'blasts', 'spanish', 'aznar', 'seven', 'king', 'policies', 'condolences', 'madrid', 'bombs', 'cache', 'bank', 'demonstrators', 'imf', 'southeastern', 'spain', 'express', 'karbala', 'pentagon', 'cheney', 'libya', 'europe', 'abroad', 'japan', 'controversial', 'french', 'karachi', 'bus', 'japanese', 'gadhafi', 'dispatch', 'kandahar', 'iterations', 'decreases', 'back', 'interruption', 'convergence', 'calculation', 'inclined', 'underflow', 'issue', 'estep', 'tried', 'implementing', 'normalization', 'avoid', 'technique', 'lecture', 'cause', 'remains', 'unknown', 'undefined', 'divisions', 'division', 'caused', 'crash', 'patch', 'pseudo', 'counts', 'mstep', 'adding', 'uniformly', 'seen', 'guarantees', 'least', 'avoids', 'dont', 'diverges', 'reality', 'thought', 'fix', 'authors', 'side', 'conclusion', 'powerful', 'tool', 'optimally', 'create', 'meaningfully', 'comparisons', 'manufactures', 'weaknesses', 'strengths', 'valuable', 'competitors', 'individually', 'pooled', 'misdirect', 'really', 'insights', 'maybe', 'medical', 'treatments', 'testimony', 'patients', 'ideologies', 'social', 'media', 'intersect', 'reference', 'york', 'ny', 'doi', 'report', 'tasks', 'completed', 'compiled', 'described', 'event', 'combined', 'recent', 'curated', 'spelling', 'errors', 'removed', 'mp', 'skeleton', 'code', 'structurewise', 'follow', 'added', 'init', 'needed', 'build', 'builds', 'individual', 'cleans', 'punctuation', 'digits', 'initialization', 'currently', 'writing', 'files', 'ten', 'commontxt', 'specifictxt', 'pending', 'implement', 'check', 'question', 'faced', 'friendly', 'manner', 'lambda', 'clean', 'facing', 'figured', 'operation', 'circled', 'image', 'states', 'ds', 'understanding', 'correct', 'wrong', 'pool', 'ending', 'current', 'sums', 'normalizes', 'times', 'reach', 'ta', 'get', 'stuck', 'debugging', 'proposal', 'contextual', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'chosen', 'selected', 'plan', 'python', 'datasets', 'evaluation', 'compares', 'dataset', 'answer', 'version', 'source', 'mentioning', 'time', 'publication', 'november', 'unfortunately', 'google', 'specified', 'regarding', 'website', 'longer', 'readily', 'numerous', 'replacement', 'replace', 'newer', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'introduced', 'alternatives', 'close', 'concluded', 'courseproject', 'demo', 'httpsyoutubeo_rizcwmgm', 'fall', 'intent', 'refence', 'please', 'documentationpdf', 'explanation']
https://github.com/DiptamGit/CourseProject	offensive language detection - project progress report for our project we have decided to divide our entire project work into four basic modules, - view - extractor - analyzer - repository view for view module we have decided on using react / dash combination, we may switch to static html webpage based on our needs, view will be used for two main reason, one from ui we will input what hashtags we want to search, that will be fed into our extractor system. also, our ui will have separate dashboard, where will have visual elements of different datasets, like tweet counts, their overall sentiment, etc. extractor this module will be used to get the tweets for a list of hashtags, we have decided to use java for this module, we have signed up for twitter developer account, we are using twitter official hbc api for getting our tweets, twitter/hbc: a java http client for consuming twitter's realtime streaming api (github.com) we have been able to complete the coding of this module, and we were able to get tweets from api successfully for particular hashtags, please find code snippets below, page 1 and we are getting outputs like this, now we are working on cleaning the tweets, so that we can use them directly to our analyzer module without any deformed text analyzer we have decided on using python for this module, there will be python script running in background, where we will feed our cleaned tweets, and we will scan for offensive words in that text and mark that tweet accordingly, also we are planning for doing sentiment analysis of the tweets, we are still deciding on that topic. repository we plan on storing all our analyzed tweets on mongodb on cloud, so that we use data from our ui component. sentiment analyis and offensive language detection by: riya gupta, chitra uppalapati, and diptam sarkar what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. - riyag3 (captain), chitrau2, diptams2 what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? our free topic is conducting sentiment analysis as well as polite and impolite language detection on a set of aroundtop tweets from the daily trending hashtags, dynamically. we are trying to categorize the most popular tweets as positive, negative, depending on the topic. this is an interesting project because it allows us to sense what the overall attitude and feeling is towards certain ideas when examining the most relevant tweets per hashtag. this can allow us to find certain patterns and sentiments in the trending hashtags, which can help us identify how people feel about popular discussions and products as well as how polarized specific topics on twitter are. this project will be most helpful for identifying sentiment towards political discussions as well as new products. we plan to use twitter hbc, the java http client for accessing the twitter api, to fetch our 1,000 tweets. then, we will build a system that classifies the tweets. when analyzing our data, we will experiment with different classifiers and evaluate our system using the standard classification evaluations metrics (precision, recall, and f-score). the expected outcome is to display our results on a web app that we will create using react. which programming language do you plan to use? - python, java, javascript please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. main tasks: - dynamically get tweets from daily trending hashtags (20 hours) - input hashtags from our web app - clean our data - store in local - perform sentiment analysis/language detection (positive, negative,) (20 hours) - feed tweets into modules for language analysis - update tweets with language analysis information - output results on a web app (20 hours) - create a good ui - add information on how to use the tool/its purpose about the project there is a growing trend amongst enterprises now a days to do market study using sentiment analysis and profanity checking, when any company releases a new product for announce a merger, they normally introduce a hashtags or campaign slogan, and leveraging that they try to collect user data from social media to get an overview. our goal pf this project was to provide a unified solution, which anyone can use for researching a keyword or hashtags and do sentiment analysis on that dataset with a view. we tried to make our entire app dynamic and, so that it will readily deployable and open to any further enhancement. installation instructions to run the code in your local system you will need four things, assuming you already have git installed java 8 maven 3+ node js 12 python 3 installation instructions which i found helpful: - for java you can use this link, we used grallvm for dev use, but any jdk would work as long as its 8, please refrain from using 11, it may not run spring modules. - node js use this link - python 3, we used anaconda distribution but technically any 3 distribution should work - maven 3.6 is being used in this project but you can use any 3 above version as well once you install and everything is setup, go your command prompt and check if they are in your path and setup was correct. sh $ java -version $ node -v $ python -version $ maven -v if all of them responded correctly, please proceed to the next section how to run the application clone the application and you should see three main folder - data analyzer - python web and sentiment analysis module - file-read-api - node api for monitoring - twitter-api - spring web module for two twitter api and web views open three command prompt, and cd into three separte folder run below from twitter api sh mvn -v spring-boot:run run below from data analyzer sh pip install flask pip install nltk pip install preprocessor pip install profanity-check python api.py run below from file-read-api sh node app.js if eveything is running and you can see no error in terminal, open any web browser(except older ie) and type (http://localhost:8080/search.html) ### tools/languages - intellij idea - vs code - java - spring - html/js/css - jquery - bootstrap - nodejs - python team diptam sarkar riya gupta chitra uppalapati ### project demo presentation credits we referred ideas and codes for inspiration from spring official documentation, nltk sentiment analyis examples, bootstrap 5 docs, freecodecamp sentiment analysis youtube videos	['offensive', 'language', 'detection', 'project', 'progress', 'report', 'decided', 'divide', 'entire', 'work', 'four', 'basic', 'modules', 'view', 'extractor', 'analyzer', 'repository', 'module', 'using', 'react', 'dash', 'combination', 'may', 'switch', 'static', 'html', 'webpage', 'based', 'needs', 'used', 'two', 'main', 'reason', 'one', 'ui', 'input', 'hashtags', 'want', 'search', 'fed', 'system', 'also', 'separate', 'dashboard', 'visual', 'elements', 'different', 'datasets', 'like', 'tweet', 'counts', 'overall', 'sentiment', 'etc', 'get', 'tweets', 'list', 'use', 'java', 'signed', 'twitter', 'developer', 'account', 'official', 'hbc', 'api', 'getting', 'twitterhbc', 'http', 'client', 'consuming', 'twitters', 'realtime', 'streaming', 'githubcom', 'able', 'complete', 'coding', 'successfully', 'particular', 'please', 'find', 'code', 'snippets', 'page', 'outputs', 'working', 'cleaning', 'directly', 'without', 'deformed', 'text', 'python', 'script', 'running', 'background', 'feed', 'cleaned', 'scan', 'words', 'mark', 'accordingly', 'planning', 'analysis', 'still', 'deciding', 'topic', 'plan', 'storing', 'analyzed', 'mongodb', 'cloud', 'data', 'component', 'analyis', 'riya', 'gupta', 'chitra', 'uppalapati', 'diptam', 'sarkar', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'riyag', 'chitrau', 'diptams', 'free', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'conducting', 'well', 'polite', 'impolite', 'set', 'aroundtop', 'daily', 'trending', 'dynamically', 'trying', 'categorize', 'popular', 'positive', 'negative', 'depending', 'allows', 'us', 'sense', 'attitude', 'feeling', 'towards', 'certain', 'ideas', 'examining', 'relevant', 'per', 'hashtag', 'allow', 'patterns', 'sentiments', 'help', 'identify', 'people', 'feel', 'discussions', 'products', 'polarized', 'specific', 'topics', 'helpful', 'identifying', 'political', 'new', 'accessing', 'fetch', 'build', 'classifies', 'analyzing', 'experiment', 'classifiers', 'standard', 'classification', 'evaluations', 'metrics', 'precision', 'recall', 'fscore', 'display', 'results', 'web', 'app', 'create', 'programming', 'javascript', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'tasks', 'completed', 'estimated', 'time', 'cost', 'clean', 'store', 'local', 'perform', 'analysislanguage', 'update', 'information', 'output', 'good', 'add', 'toolits', 'purpose', 'growing', 'trend', 'amongst', 'enterprises', 'days', 'market', 'study', 'profanity', 'checking', 'company', 'releases', 'product', 'announce', 'merger', 'normally', 'introduce', 'campaign', 'slogan', 'leveraging', 'try', 'collect', 'user', 'social', 'media', 'overview', 'goal', 'pf', 'provide', 'unified', 'solution', 'anyone', 'researching', 'keyword', 'dataset', 'tried', 'make', 'dynamic', 'readily', 'deployable', 'open', 'enhancement', 'installation', 'instructions', 'run', 'need', 'things', 'assuming', 'already', 'git', 'installed', 'maven', 'node', 'js', 'found', 'link', 'grallvm', 'dev', 'jdk', 'would', 'long', 'refrain', 'spring', 'anaconda', 'distribution', 'technically', 'version', 'install', 'everything', 'setup', 'go', 'command', 'prompt', 'check', 'path', 'correct', 'sh', 'v', 'responded', 'correctly', 'proceed', 'next', 'section', 'application', 'clone', 'see', 'three', 'folder', 'filereadapi', 'monitoring', 'twitterapi', 'views', 'cd', 'separte', 'mvn', 'springbootrun', 'pip', 'flask', 'nltk', 'preprocessor', 'profanitycheck', 'apipy', 'appjs', 'eveything', 'error', 'terminal', 'browserexcept', 'older', 'ie', 'type', 'httplocalhostsearchhtml', 'toolslanguages', 'intellij', 'idea', 'vs', 'htmljscss', 'jquery', 'bootstrap', 'nodejs', 'demo', 'presentation', 'credits', 'referred', 'codes', 'inspiration', 'documentation', 'examples', 'docs', 'freecodecamp', 'youtube', 'videos']
https://github.com/DrLucky2/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/Ehaly/CourseProject	"project documentation lin yutong yutong21@illinois.edu 1. overview this software is designed to complete the text mining task by a contextual generative model, which is an extension of the plsa generative model. several texts from different collections, several parameters (lambda c, lambda b, number of clusters etc.) will be passed in, and the software will produce the matrix of clusters and top k words in each language model (common model, collection-specific models) in the form similar to the original paper shown in figure 1. the idea is that a word could be generated from a common theme model with lambda c probability, but also has (1 - lambda c) probability to be generated from a collection specific theme model. the probability of a word given the collection is shown in figure 2, and the mixture model is illustrated in figure 3. figure 1: example output figure 2: pd(w|ci) figure 3: the cross-collection mixture model 2. implementation details the class corpus consists of the following functions: __init__(document_path): initialize a corpus object. build_corpus(): read the document in document path, store the collection number and the document in self.collection and self.documents. build_vocabulary(): read the documents and build the vocabulary for the whole dataset. build_background_model(): build the background model from the whole dataset. build_term_doc_matrix(): construct the term-document matrix where each row represents a document, each column represents a vocabulary term.self.term_doc_matrix[i][j] is the count of term j in document i. initialize(self, number_of_collections, number_of_clusters, random=true): initialize the matrices document_topic_prob , topic_word_prob and collection_topic_word_prob. expectation_step(number_of_collections,number_of_clusters,lambda_b, lambda_c): the e-step updates the p(zd ci w = j), i.e. the topic_prob matrix, p(zd,ci,w = b) i.e. the bg_prob matrix, and p(zd,ci ,j,w = c ), i.e. the common_topic_prob matrix. maximization_step(number_of_collections, number_of_clusters ): the m-step updates the , and . calculate_likelihood(number_of_collections,lambda_b, lambda_c): calculate the current log-likelihood of the model using the model's updated probability matrices. ccmm(number_of_collections, number_of_clusters, max_iter, lambda_b, lambda_c, epsilon): execute the text mining on the document passed in in max_iter times of iteration. in each iteration, execute the e-step and the m-step, calculate the likelihood. stop when the likelihood converges and print the topic models. the function ccmm(*) is the core function of the project. the update of each matrix and the calculation of likelihood are based on the following equations. figure 4: log-likelihood calculation figure 5: e-step and m-step updates 3. usage documentation the project uses two examples to test the text mining performance, both are similar from the example in the original paper. the data in the first example was scraped from bbc and cnn websites. the news urls were selected by the author, so the contents are different from the news used in the original paper. the data in the second example was scraped from bestbuy.com, which are customer reviews on three kinds of laptop (macbook-air-13-3- laptop, dell-g5-15-6-fhd-gaming-laptop, lenovo-yoga-c940-2-in-1-14-touch-screen-laptop). the scraper code and the scraped texts could be found in the project folder. to run the scraper code, run ""jupyter notebook"". the code could be run by command ""python model.py -h"". to run the first example, ""python model.py --document wars_news.txt --clusternumber 5 - -collectionnumber 2 --c 0.25 --b 0.91"" to run the second example, ""python model.py --document laptop_reviews.txt -- clusternumber 4 --collectionnumber 3 --c 0.7 --b 0.96"". notice here we set a smaller cluster number than the original paper, due to the content difference and the worse performance with 8 clusters in experiment. the result will be saved in results.txt. an example output of the first example text mining. the collection 0 is the iraq-theme model, and the collection 1 is the afghanistan-theme model. 4. work distribution this is an individual project. all work was done by the author. project proposal yutong21 what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. it's an individual project. yutong21. which paper have you chosen? a cross-collection mixture model for comparative text mining. which programming language do you plan to use? python can you obtain the datasets used in the paper for evaluation? no. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? yes. the data is from cnn news and from epinions.com. though we don't know which slice exactly, i could download similar data from those sources. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? n.a project progress report yutong lin netid: yutong21 project introduction the project is to reproduce the paper ""a cross-collection mixture model for comparative text mining"". the project is in its final phase so far. the program is improved based on the plsa model, which includes an expectation algorithm step, a maximization algorithm step and a likelihood calculation step. the new mixture model has more matrix to update. in the plsa model, there is a document topic coverage matrix and a topic-specific language model matrix. in the new ccmm (cross- collection mixture model) has a collection-specific topic language model. it is designed as a 3d array. i finished the code and tried running data to test its performance. the original paper used two datasets for experiments. the first is a news dataset including about 30 articles on iraq war and 30 articles on afghanistan war from bbc and cnn between 2003 to 2004. i wrote a scraper to scrape from bbc and cnn websites (scraper code in news_scraper.ipynb, scraped data in wars_news.txt ). the second dataset is customer reviews on three types of laptop from apple, dell and ibm from epinion.com. however, the epinion.com website has been shut down, so i scrape 84 customer reviews from bestbuy.com on the m1 chip macbook air, dell g5 fhd gaming laptop and lenovo yoga c940 (scraper code in reviews_scraper.ipynb, scraped data in laptop_reviews.txt). the model performs well and could print the common theme model and the collection- specific theme model matrix in terminal by command ""python model.py"". the format is the same as the original paper. the column stands for different clusters, and the probability of the word decreases by row. remaining challenge the remaining challenge is to find a better set of parameters to pass in, that could make each cluster more distinct make the top 5 words more representative. at present, the clusters seem to be too much for the laptop review dataset, so each cluster is not very distinctive. also, there remains a question in the maximization step, i shall contact the professor to check my implementation. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. please read project_documentation for more details. the video could be found at : https://mediaspace.illinois.edu/media/t/1_n26fno8k to run the scraper code, run ""jupyter notebook"". the code could be run by command ""python model.py -h"". to run the first example, ""python model.py --document wars_news.txt --clusternumber 5 --collectionnumber 2 --c 0.25 --b 0.91"" to run the second example, ""python model.py --document laptop_reviews.txt --clusternumber 4 --collectionnumber 3 --c 0.7 --b 0.96"" the class corpus consists of the following functions: init(document_path): initialize a corpus object. build_corpus(): read the document in document path, store the collection number and the document in self.collection and self.documents. build_vocabulary(): read the documents and build the vocabulary for the whole dataset. build_background_model(): build the background model from the whole dataset. build_term_doc_matrix(): construct the term-document matrix where each row represents a document, each column represents a vocabulary term.self.term_doc_matrix[i][j] is the count of term j in document i. initialize(self, number_of_collections, number_of_clusters, random=true): initialize the matrices document_topic_prob , topic_word_prob and collection_topic_word_prob. expectation_step(number_of_collections,number_of_clusters,lambda_b, lambda_c): the e-step updates the p(zd ci w = j), i.e. the topic_prob matrix, p(zd,ci,w = b) i.e. the bg_prob matrix, and p(zd,ci ,j,w = c ), i.e. the common_topic_prob matrix. maximization_step(number_of_collections, number_of_clusters ): the m-step updates the matrices document_topic_prob , topic_word_prob and collection_topic_word_prob calculate_likelihood(number_of_collections,lambda_b, lambda_c): calculate the current log-likelihood of the model using the model's updated probability matrices. ccmm(number_of_collections, number_of_clusters, max_iter, lambda_b, lambda_c, epsilon): execute the text mining on the document passed in in max_iter times of iteration."	['project', 'documentation', 'lin', 'yutong', 'yutongillinoisedu', 'overview', 'software', 'designed', 'complete', 'text', 'mining', 'task', 'contextual', 'generative', 'model', 'extension', 'plsa', 'several', 'texts', 'different', 'collections', 'parameters', 'lambda', 'c', 'b', 'number', 'clusters', 'etc', 'passed', 'produce', 'matrix', 'top', 'k', 'words', 'language', 'common', 'collectionspecific', 'models', 'form', 'similar', 'original', 'paper', 'shown', 'figure', 'idea', 'word', 'could', 'generated', 'theme', 'probability', 'also', 'collection', 'specific', 'given', 'mixture', 'illustrated', 'example', 'output', 'pdwci', 'crosscollection', 'implementation', 'details', 'class', 'corpus', 'consists', 'following', 'functions', '__init__document_path', 'initialize', 'object', 'build_corpus', 'read', 'document', 'path', 'store', 'selfcollection', 'selfdocuments', 'build_vocabulary', 'documents', 'build', 'vocabulary', 'whole', 'dataset', 'build_background_model', 'background', 'build_term_doc_matrix', 'construct', 'termdocument', 'row', 'represents', 'column', 'termselfterm_doc_matrixij', 'count', 'term', 'j', 'initializeself', 'number_of_collections', 'number_of_clusters', 'randomtrue', 'matrices', 'document_topic_prob', 'topic_word_prob', 'collection_topic_word_prob', 'expectation_stepnumber_of_collectionsnumber_of_clusterslambda_b', 'lambda_c', 'estep', 'updates', 'pzd', 'ci', 'w', 'ie', 'topic_prob', 'pzdciw', 'bg_prob', 'pzdci', 'jw', 'common_topic_prob', 'maximization_stepnumber_of_collections', 'mstep', 'calculate_likelihoodnumber_of_collectionslambda_b', 'calculate', 'current', 'loglikelihood', 'using', 'updated', 'ccmmnumber_of_collections', 'max_iter', 'lambda_b', 'epsilon', 'execute', 'times', 'iteration', 'likelihood', 'stop', 'converges', 'print', 'topic', 'function', 'ccmm', 'core', 'update', 'calculation', 'based', 'equations', 'usage', 'uses', 'two', 'examples', 'test', 'performance', 'data', 'first', 'scraped', 'bbc', 'cnn', 'websites', 'news', 'urls', 'selected', 'author', 'contents', 'used', 'second', 'bestbuycom', 'customer', 'reviews', 'three', 'kinds', 'laptop', 'macbookair', 'dellgfhdgaminglaptop', 'lenovoyogacintouchscreenlaptop', 'scraper', 'code', 'found', 'folder', 'run', 'jupyter', 'notebook', 'command', 'python', 'modelpy', 'h', 'wars_newstxt', 'clusternumber', 'collectionnumber', 'laptop_reviewstxt', 'notice', 'set', 'smaller', 'cluster', 'due', 'content', 'difference', 'worse', 'experiment', 'result', 'saved', 'resultstxt', 'iraqtheme', 'afghanistantheme', 'work', 'distribution', 'individual', 'done', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'chosen', 'comparative', 'programming', 'plan', 'use', 'obtain', 'datasets', 'evaluation', 'answer', 'question', 'eg', 'recent', 'version', 'another', 'nature', 'yes', 'epinionscom', 'though', 'dont', 'know', 'slice', 'exactly', 'download', 'sources', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'na', 'progress', 'report', 'netid', 'introduction', 'reproduce', 'final', 'phase', 'far', 'program', 'improved', 'includes', 'expectation', 'algorithm', 'step', 'maximization', 'new', 'coverage', 'topicspecific', 'cross', 'array', 'finished', 'tried', 'running', 'experiments', 'including', 'articles', 'iraq', 'war', 'afghanistan', 'wrote', 'scrape', 'news_scraperipynb', 'types', 'apple', 'dell', 'ibm', 'epinioncom', 'however', 'website', 'shut', 'chip', 'macbook', 'air', 'g', 'fhd', 'gaming', 'lenovo', 'yoga', 'reviews_scraperipynb', 'performs', 'well', 'terminal', 'format', 'stands', 'decreases', 'remaining', 'challenge', 'find', 'better', 'pass', 'make', 'distinct', 'representative', 'present', 'seem', 'much', 'review', 'distinctive', 'remains', 'shall', 'contact', 'professor', 'check', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'project_documentation', 'video', 'httpsmediaspaceillinoisedumediat_nfnok', 'initdocument_path']
https://github.com/ElizWang/CourseProject	"1) an overview of the function of the code (i.e., what it does and what it can be used for). our code scrapes authors and paper titles from the dblp dataset. we extract patterns using a python wrapper for the spmf library. from these extracted patterns, our code then removes redundant patterns -- we implemented both hierarchical microclustering and one-pass microclustering. finally, we extract strongest context indicators, representative transactions, and semantically similar patterns. we can use this code to reproduce the dblp experiment as described in section 5.1 of the paper. that is, we can take in an author or title pattern and find its strongest context indicators, most representative titles and authors / co-authors, and the most semantically similar title / author patterns. 2) documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. prerequisites: the libraries mentioned below (see answer #3), python3, java, shell web scraping (utils/build_data_from_web.py) * build a csv file called data/data.csv where each line is a list of comma-separated authors and a single title (aka all the information needed from a single paper). * these papers are pulled from the following text mining/database-related conferences: (aciids, icdm, sdm, dba, balt, dbsec, dbcrowd, pkdd, kdd, trec, cikm, sigir). * for each conference, we pull all papers from the most recent 10 events (workshops, talks, submissions, etc) * for each paper, we stem the titles using the nltk.stem.porter stemmer, remove commas and periods (because we are writing the data as a .csv file), and make all author names lowercase in order to avoid interpreting the same author names with different capitalizations as different authors. we also remove all spaces within a single author name and replace them with underscores (firstname_lastname) * usage: python3 utils/build_data_from_web.py. note that you must run this from courseproject/, the data/ directory must already exist, and you must be using python3. utility file: python wrapper for spmf.jar (utils/frequent_pattern_mining/spmf_python_wrapper.py) * motivation: spmf is a java library. to make everything run smoothly and to minimize the amount of work the user has to do to run the pattern mining algorithms and set everything up, we wrote a python wrapper for spmf that runs java as a subprocess. * java -jar libs/spmf.jar run [alg_name] [input_file] [output_file] frequent pattern mining: (utils/frequent_pattern_mining/build_frequent_patterns.py) * builds frequent pattern files for authors and title terms and caches them to a file. * maps all unique author names to non-negative integers and all unique title terms to non-negative integer ids as well -- this is because of 2 reasons: first of all, it's more efficient to work with numbers rather than strings of a theoretically arbitrary length; also, spmf is a java library that works with numbers rather than strings. note that the two mappings are completely disjoint; in other words, an author name with an id of 0 has nothing to do with a title term with an id of 0. * runs our python wrapper for spmf.jar for fp-close (to mine frequent patterns from author terms) and clo-span (to mine sequential patterns from title terms) to generate intermediate patterns we would then parse. * files generated * data/frequent_author_patterns.txt: frequent author patterns (via fp-close), where each line is a pattern. format: 11391 11393 11392 14928 #sup: 9 * data/frequent_title_term_patterns.txt: frequent title term patterns (via clo-span), where each line is a pattern. format: 4 -1 226 -1 240 -1 #sup: 32 * data/author_id_mappings.txt: mapping from author id to author name. format: 0 helun_bu * data/title_term_id_mappings.txt: mapping from title term id to title term. format: 0 toward redundant pattern removal: (utils/remove_redundant_patterns.py) * two utility methods for removing redundant patterns: * eliminate redundancy using one-pass microclustering * eliminate redundancy using hierarchical microclustering * the main method is currently written to support one-pass microclustering -- a threshold can be passed in or the default threshold can be used. the cleaned title term patterns are then written to a file. * usage: * title_patterns = parse_author_file_into_patterns(frequentpatternbuilder.title_terms_outp ut_file_path) * minimal_patterns = find_one_pass_microclustering_patterns(title_patterns, 0.6) # to use one-pass microclustering * minimal_patterns = find_hierarchical_microclustering_patterns(title_patterns, 0.6) # to use hierarchical microclustering * write_patterns_to_file(minimal_title_terms_filename, minimal_patterns) utility file: cosine similarity (utils/cosine_similarity.py) * compute cosine similarity given two context vectors of the same length. used as a utility method * usage: consine_sim = compute_cosine_similarity(context_vec_1, context_vec_2) utility file: mutual information computation/caching manager (utils/mutual_information_manager.py) * computes mutual information for two given ordered collections of patterns (which can be author-author patterns, author-title patterns, or title-title patterns) and caches the mutual information values to a file for each (pattern 1 id, pattern 2 id) pair, where each pattern id just corresponds to its index in the ordered collection. * each file begins with a value [0, 3], which corresponds to a mapping: 0 = author-author, 1 = author-title, 2 = title-author, 3 = title-title * example file format: # 2 # 0 0 0.000016 # 0 1 0.000016 # 0 2 0.000016 # 0 3 0.000016 # 0 4 0.000016 # 0 5 0.000016 # 0 6 0.000016 # 0 7 0.000016 # 0 8 0.000016 # 0 9 0.000016 * files generated # data/author_author_mutual_info_patterns.txt = mutual information values for each author-author pattern pair, where index_1 <= index_2 # data/author_title_mutual_info_patterns.txt = mutual information values for each author-title/title-author pattern pair # data/title_title_mutual_info_patterns.txt = mutual information values for each title-title pattern pair, where index_1 <= index_2 * usage: # transactions = transactionsmanager(""data/data.csv"", ""data/author_id_mappings.txt"", ""data/title_term_id_mappings.txt"") # mutual_info = mutualinformationmanager(transactions, true) # mutual_info.compute_mutual_information(author_patterns) * reads in the mutual information from one of the files described above, depending on what the type of manager (author-author, author-title, or title-title manager), and caches all the mutual information values in a large matrix -- which is triangular for the author-author/title-title cases and rectangular for the author-title case * usage: * mutual_info = mutualinformationmanager(mutualinformationmanager.patterntype.x) * mutual_info.read_mutual_information_from_file() * mutual_info.get_mutual_information(1, 2) # to get mutual info for patterns 1 and 2 * used to compute mutual information one time (which is expensive) and to abstract how mutual information is stored and managed into a class utility file: transaction/paper data parser/manager (utils/transactions_manager.py) * parses and stores author-id mappings, title-term-id mappings, and a list of all papers, which are basically (author set, title-term sequence patterns) * utility methods for * compute context models for each paper's title terms given a list of frequent title patterns * compute context models for each paper's authors given a list of frequent author patterns * find all transaction ids, which are represented as paper indices from the list of all papers parsed, that have a title pattern as a sequential subset * find all transaction ids, which are represented as paper indices from the list of all papers parsed, that have an author pattern as a non-sequential subset * get author name from author id, title term from author id, get a paper's author from the paper id, get a paper's title terms from the paper id, and get the number of transactions (number of papers) * usage: transactions = transactionsmanager(""data/data.csv"", ""data/author_id_mappings.txt"", ""data/title_term_id_mappings.txt"") pattern annotator: representative transaction extraction (pattern_annotators/representative_transaction_extractor.py) * extracts representative transactions given a pattern id, a threshold for the number of representative transactions to extract, and a boolean value describing whether the pattern id refers to an author pattern or a title-term pattern * usage: python pattern_annotators/representative_transaction_extractor.py [target_id] [k] [is author experiment] * example: python pattern_annotators/representative_transaction_extractor.py 0 3 true * for an author experiment, the top k most representative titles from the transaction manager are displayed * for a title experiment, the top k most representative titles and the top k most representative authors from the transaction manager are displayed pattern annotator: semantically similar pattern extraction (pattern_annotators/semantically_similar_pattern_extractor.py) * extracts semantically similar patterns given a pattern id, a threshold for the number of representative transactions to extract, and a boolean value describing whether the pattern id refers to an author pattern or a title-term pattern * usage: python pattern_annotators/semantically_similar_pattern_extractor.py [target_id] [k] [is author experiment] * example: python pattern_annotators/representative_transaction_extractor.py 1 10 false * for an author experiment, the top k most representative author patterns are displayed * for a title experiment, the top k most representative title term patterns are displayed pattern annotator: strongest context indicator extraction (pattern_annotators/strongest_context_indicator_extractor.py) * extracts strongest context indicators given a pattern id, a threshold for the number of representative transactions to extract, and a boolean value describing whether the pattern id refers to an author pattern or a title-term pattern * usage: python pattern_annotators/strongest_context_indicator_extractor.py [target_id] [k] [is author experiment] * example: python pattern_annotators/strongest_context_indicator_extractor.py 2 15 true * for an author experiment, the given pattern is annotated with the top k strongest context indicators -- the top k author patterns and the top k title patterns * for a title experiment, the given pattern is annotated with the top k strongest context indicators -- the top k title patterns and the top k author patterns 3) documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. libraries used * urlllib (web scraping from dblp) * bs4 (parsing scraped data from dblp) * nltk (stemming) * spmf (java library to mine frequent patterns -- will be installed as a part of the setup step, see the next section) * installation: pip install urllib/bs4/nltk setup and installation note: our data files are quite large; thus, we put the data/ directory in our .gitignore and we're subsequently not committing any of our data files or our library files to our repository, which is a standard in good software design. * git clone https://github.com/elizwang/courseproject.git # clones repository * cd courseproject # navigate to repository * sh setup.sh # sets up the data/ and libs/ directories and runs all scripts from the preprocessing step. detailed description below: * creates a data/ directory if one does not already exist * builds a csv file called data/data.csv by scraping dblp paper submissions from the web * creates a libs/ directory if one does not already exist and pulls spmf as libs/spmf.jar * mines frequent author patterns using fp-close * mines sequential title term patterns using clo-span * removes redundancies from sequential title term patterns using microclustering * computes and caches all mutual-information values between (author pattern, author pattern), (title term pattern, author pattern), and (title term pattern, title term pattern) 4) brief description of contribution of each team member in case of a multi-person team. we worked together in understanding the paper and formulating pseudocode that we used as our overarching plan. we split the paper into two steps -- preprocessing (which includes data scraping, pattern mining, and similar pattern pruning) and pattern annotation. we worked as a team by calling each other on zoom and pair programming. elizabeth typed, while steven frequently took remote control in implementing preprocessing, extracting representative transactions, and the extraction of strongest context indicators and semantically similar patterns. 5) software demo link: https://www.youtube.com/watch?v=3v8m0sw3xhc we have completed the implementation part of our project (i.e. the coding portion of the project is completed). in particular, we've mined author and title patterns using fp-close and clospan respectively and implemented redundancy removal using one-pass microclustering, extracting strongest context indicators / representative transactions / semantically similar patterns, and used these to reproduce the dblp experiment. we may need to touch up some documentation, and we need to record the tutorial presentation. aside from potential technical issues with recording the tutorial (which would most likely be minor), we do not anticipate any challenges at this time. 1. what are the names and netids of all your team members? who is the captain? elizabeth wang, eyw3, captain steven pan, stevenp6 2. which paper have you chosen? we have chosen the following paper: ""generating semantic annotations for frequent patterns with context analysis"" 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? no 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? yes, a more recent version of the dataset that derives from the dataset used in the paper can be found here: https://dblp.org/faq/1474681.html 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? n/a courseproject authors elizabeth wang steven pan proposal note: we've uploaded a pdf (proposal.pdf) with the same information as we hae below: what are the names and netids of all your team members? who is the captain? elizabeth wang, eyw3, captain steven pan, stevenp6 which paper have you chosen? we have chosen the following paper: ""generating semantic annotations for frequent patterns with context analysis"" which programming language do you plan to use? python can you obtain the datasets used in the paper for evaluation? no if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? yes, a more recent version of the dataset that derives from the dataset used in the paper can be found here: https://dblp.org/faq/1474681.html if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? n/a demo https://www.youtube.com/watch?v=3v8m0sw3xhc setup install bs4, urllib, and nltk (if they're not already installed) run setup.sh (sh setup.sh) from courseproject/ to build the csv file containing all (author list, title) entries. the code that builds this data file is here: utils/build_data_from_web.py. this script will create a directory called data/ and create a csv file called data.csv within that directory -- csv file format: author1, author2, author3, ... etc, title (where each line in the csv file corresponds to a single paper) create the libs/ directory and download spmf.jar, which is a jar file for the spmf library (download link is also here: http://www.philippe-fournier-viger.com/spmf/index.php?link=download.php) builds frequent patterns for authors and title terms -- data/frequent_author_patterns.txt and data/frequent_title_term_patterns.txt, where all words are mapped to unique ids and the id mapping is cached in these 2 files respectively: data/author_id_mappings.txt and data/title_term_id_mappings.txt. the code that builds these files is here: utils/frequent_pattern_mining/build_frequent_patterns.py removes redundancies from sequential frequent title patterns (data/title_term_id_mappings.txt) and creates a new file called data/minimal_title_term_patterns.txt containing these minimal patterns builds files to cache all mutual information values between pairs of author patterns, between pairs of author-title patterns, and between pairs of title patterns relevant output files for next stage: * data/frequent_author_patterns.txt (id mappings: data/author_id_mappings.txt) * data/minimal_title_term_patterns.txt (id mappings: data/title_term_id_mappings.txt) * data/author_author_mutual_info_patterns.txt * data/author_title_mutual_info_patterns.txt * data/title_title_mutual_info_patterns.txt note: utils/parse_patterns.py contains utility methods to parse patterns into data structures and write them to files, you may find these methods useful"	['overview', 'function', 'code', 'ie', 'used', 'scrapes', 'authors', 'paper', 'titles', 'dblp', 'dataset', 'extract', 'patterns', 'using', 'python', 'wrapper', 'spmf', 'library', 'extracted', 'removes', 'redundant', 'implemented', 'hierarchical', 'microclustering', 'onepass', 'finally', 'strongest', 'context', 'indicators', 'representative', 'transactions', 'semantically', 'similar', 'use', 'reproduce', 'experiment', 'described', 'section', 'take', 'author', 'title', 'pattern', 'find', 'coauthors', 'documentation', 'software', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'future', 'extension', 'improvement', 'prerequisites', 'libraries', 'mentioned', 'see', 'answer', 'java', 'shell', 'web', 'scraping', 'utilsbuild_data_from_webpy', 'build', 'csv', 'file', 'called', 'datadatacsv', 'line', 'list', 'commaseparated', 'single', 'aka', 'information', 'needed', 'papers', 'pulled', 'following', 'text', 'miningdatabaserelated', 'conferences', 'aciids', 'icdm', 'sdm', 'dba', 'balt', 'dbsec', 'dbcrowd', 'pkdd', 'kdd', 'trec', 'cikm', 'sigir', 'conference', 'pull', 'recent', 'events', 'workshops', 'talks', 'submissions', 'etc', 'stem', 'nltkstemporter', 'stemmer', 'remove', 'commas', 'periods', 'writing', 'data', 'make', 'names', 'lowercase', 'order', 'avoid', 'interpreting', 'different', 'capitalizations', 'also', 'spaces', 'within', 'name', 'replace', 'underscores', 'firstname_lastname', 'usage', 'note', 'must', 'run', 'courseproject', 'directory', 'already', 'exist', 'utility', 'spmfjar', 'utilsfrequent_pattern_miningspmf_python_wrapperpy', 'motivation', 'everything', 'smoothly', 'minimize', 'amount', 'work', 'user', 'mining', 'algorithms', 'set', 'wrote', 'runs', 'subprocess', 'jar', 'libsspmfjar', 'alg_name', 'input_file', 'output_file', 'frequent', 'utilsfrequent_pattern_miningbuild_frequent_patternspy', 'builds', 'files', 'terms', 'caches', 'maps', 'unique', 'nonnegative', 'integers', 'integer', 'ids', 'well', 'reasons', 'first', 'efficient', 'numbers', 'rather', 'strings', 'theoretically', 'arbitrary', 'length', 'works', 'two', 'mappings', 'completely', 'disjoint', 'words', 'id', 'nothing', 'term', 'fpclose', 'mine', 'clospan', 'sequential', 'generate', 'intermediate', 'would', 'parse', 'generated', 'datafrequent_author_patternstxt', 'via', 'format', 'sup', 'datafrequent_title_term_patternstxt', 'dataauthor_id_mappingstxt', 'mapping', 'helun_bu', 'datatitle_term_id_mappingstxt', 'toward', 'removal', 'utilsremove_redundant_patternspy', 'methods', 'removing', 'eliminate', 'redundancy', 'main', 'method', 'currently', 'written', 'support', 'threshold', 'passed', 'default', 'cleaned', 'title_patterns', 'parse_author_file_into_patternsfrequentpatternbuildertitle_terms_outp', 'ut_file_path', 'minimal_patterns', 'find_one_pass_microclustering_patternstitle_patterns', 'find_hierarchical_microclustering_patternstitle_patterns', 'write_patterns_to_fileminimal_title_terms_filename', 'cosine', 'similarity', 'utilscosine_similaritypy', 'compute', 'given', 'vectors', 'consine_sim', 'compute_cosine_similaritycontext_vec_', 'context_vec_', 'mutual', 'computationcaching', 'manager', 'utilsmutual_information_managerpy', 'computes', 'ordered', 'collections', 'authorauthor', 'authortitle', 'titletitle', 'values', 'pair', 'corresponds', 'index', 'collection', 'begins', 'value', 'titleauthor', 'example', 'dataauthor_author_mutual_info_patternstxt', 'index_', 'dataauthor_title_mutual_info_patternstxt', 'authortitletitleauthor', 'datatitle_title_mutual_info_patternstxt', 'transactionsmanagerdatadatacsv', 'mutual_info', 'mutualinformationmanagertransactions', 'true', 'mutual_infocompute_mutual_informationauthor_patterns', 'reads', 'one', 'depending', 'type', 'large', 'matrix', 'triangular', 'authorauthortitletitle', 'cases', 'rectangular', 'case', 'mutualinformationmanagermutualinformationmanagerpatterntypex', 'mutual_inforead_mutual_information_from_file', 'mutual_infoget_mutual_information', 'get', 'info', 'time', 'expensive', 'abstract', 'stored', 'managed', 'class', 'transactionpaper', 'parsermanager', 'utilstransactions_managerpy', 'parses', 'stores', 'authorid', 'titletermid', 'basically', 'titleterm', 'sequence', 'models', 'transaction', 'represented', 'indices', 'parsed', 'subset', 'nonsequential', 'number', 'annotator', 'extraction', 'pattern_annotatorsrepresentative_transaction_extractorpy', 'extracts', 'boolean', 'describing', 'whether', 'refers', 'target_id', 'k', 'top', 'displayed', 'pattern_annotatorssemantically_similar_pattern_extractorpy', 'false', 'indicator', 'pattern_annotatorsstrongest_context_indicator_extractorpy', 'annotated', 'including', 'either', 'usages', 'apis', 'detailed', 'instructions', 'install', 'whichever', 'applicable', 'urlllib', 'bs', 'parsing', 'scraped', 'nltk', 'stemming', 'installed', 'part', 'setup', 'step', 'next', 'installation', 'pip', 'urllibbsnltk', 'quite', 'thus', 'put', 'gitignore', 'subsequently', 'committing', 'repository', 'standard', 'good', 'design', 'git', 'clone', 'httpsgithubcomelizwangcourseprojectgit', 'clones', 'cd', 'navigate', 'sh', 'setupsh', 'sets', 'libs', 'directories', 'scripts', 'preprocessing', 'description', 'creates', 'pulls', 'mines', 'redundancies', 'mutualinformation', 'brief', 'contribution', 'team', 'member', 'multiperson', 'worked', 'together', 'formulating', 'pseudocode', 'overarching', 'plan', 'split', 'steps', 'includes', 'pruning', 'annotation', 'calling', 'zoom', 'programming', 'elizabeth', 'typed', 'steven', 'frequently', 'took', 'remote', 'control', 'implementing', 'extracting', 'demo', 'link', 'httpswwwyoutubecomwatchvvmswxhc', 'completed', 'implementation', 'project', 'coding', 'portion', 'particular', 'weve', 'mined', 'respectively', 'may', 'need', 'touch', 'record', 'tutorial', 'presentation', 'aside', 'potential', 'technical', 'issues', 'recording', 'likely', 'minor', 'anticipate', 'challenges', 'netids', 'members', 'captain', 'wang', 'eyw', 'pan', 'stevenp', 'chosen', 'generating', 'semantic', 'annotations', 'analysis', 'language', 'obtain', 'datasets', 'evaluation', 'question', 'eg', 'version', 'another', 'nature', 'yes', 'derives', 'found', 'httpsdblporgfaqhtml', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'introduced', 'na', 'proposal', 'uploaded', 'pdf', 'proposalpdf', 'hae', 'urllib', 'theyre', 'containing', 'entries', 'script', 'create', 'datacsv', 'download', 'httpwwwphilippefourniervigercomspmfindexphplinkdownloadphp', 'mapped', 'cached', 'new', 'dataminimal_title_term_patternstxt', 'minimal', 'cache', 'pairs', 'relevant', 'output', 'stage', 'utilsparse_patternspy', 'contains', 'structures', 'write', 'useful']
https://github.com/EsportsNoEyes/CourseProject	"cs 410 project proposal group: livedatalab admins team members * yanbo chen, ychen380 * linfei jing, ljing2 * huaminghui ding, hding14 * captain: yanbo chen project topic text classification competition we choose the classification competition and are fully prepared to learn state-of-the-art neural network classifiers. we have learnt about some classical machine learning algorithms such as naive bayes, decision tree. we also have basic knowledge about pattern mining from text files using apriori algorithm and fp-growth. our team member used to write those algorithms from scratch without using predefined libraries to classify animals in a zoo's data-set. those will be helpful for text classification algorithm design in the project. programming language python. problem to solve given a training set containing tweets from twitter, each with a label ""sarcasm"" or ""not_sarcasm"", train a classifier to predict the label for each tweet in the test set. methods to use 1) naive bayes classifier. before we dive into neural network classifiers, we decide to apply naive bayes classifier first and see if it performs well on the problem. 2) neural network classifiers if naive bayes classifier does not work well on predicting the label, we are prepared to learn some neural network classifiers such as lstm and bert. 3)deep learning frameworks we plan to use some popular frameworks such as keras library in tensorflow. cs 410 project progress report group: livedatalab admins team members * yanbo chen, ychen380 * linfei jing, ljing2 * huaminghui ding, hding14 * captain: yanbo chen progress made based on the plan in our project proposal, we designed and implemented a naive bayes classifier to classify the given data into two categories ""sarcasm"" and ""not_sarcasm"". the performance of the current classifier has already beat the baseline. remaining tasks some further tuning to make the naive bayes algorithm even more accurate. challenges/issues being faced what method to use for tuning the algorithm and we are considering if some weighted method could be used over naive bayes to make it more precise specifically for this task. cs410 classification competition usage first clone the source code to local, and use this command to install all the dependencies pip3 install -r requirements.txt, assuming python3 is used. use command python3 prediction.py to generate the prediction results which is stored in answer.txt if there is any errors with nltk package when running the code, please try to install suggested additional dependencies to solve the issue. we also welcome our reviewers to schedule a live demo. description of algorithm as we planned in the project proposal, the first method we tried is classifier that based on naive bayes. the equation to compute the probability is we used laplace smoothing when we calculate the probability of every single key in the ""sarcasm"" and ""not_sarcasm"" dictionary. the equation for calculating the probability is and . unk stands for the words that we have not seen in the training data. d stands for the dictionary we used when we calculate the probability of its words. it can be either ""sarcasm"" dictionary or ""not_sarcasm"" dictionary. alpha stnads for the laplace smoothing parameter we set before training, default to be 1.0. count(w) stands for the number of times a specific word w appeared in the training data. v stands for the size of the corresponding dictionary. overview of functions & implementation details reader.py, provide helpers to load the datasets into proper data structures to be used by the algorithm loadfile(name,stemming,sarcasm,training): the helper function to load training data and test data. the parameter ""name"" indicates the directory path to the file of data. the parameter ""sarcasm"", a boolean variable, indicates whether the training data is labelled as ""sarcasm"" or ""not_sarcasm"". the parameter ""training"", a boolean variable, indicates whether the input data file is training or test. ""stemming"" is provided as an optional parameter to enable stemming. it returns a list containing the tweets. load_dataset(train_dir,dev_dir,stemming): it loads data and form structures that can be used by naive bayes algorithm using loadfile(). it returns lists indicating the label of each data entry. prediction.py, the wrapper file that is called by the user to run the our naive bayes classifier main(args): it is a wrapper function that extracts data, run naive bayes algorithm and output prediction results using the functions provided by reader.py and naive_bayes.py naive_bayes.py, implementation of our naive bayes classifier naivebayes(train_set, train_labels, dev_set, smoothing_parameter): the wrapper function of our implemented naive bayes algorithm. do_unigram(train_set, trai_labels, dev_set, smoothing_parameter): it applies unigram model and predict the labels of tweets. get_probability(tweet,p_dict): it calculates the sum of the probability of a word in a dictionary. get_probability_dict(some_dict,word_count,smoothing_parameter): it calculates the probability of every single key in the ""sarcasm"" and ""not_sarcasm"" dictionary, including the words that we have not seen in the training data. we used the equations mentioned in the above section to calculate the probability. get_dicts(train_set, train_labels): it creates ""sarcasm"" dictionary and ""not_sarcasm"" dictionary respectively and store the count of the occurrences of all the ""sarcarsm"" words and all the ""not_sarcasm"" words based on the training data given, we first tried to predict the labels using the response tweets without context tweets as our dictionary. the accuracy was around 0.69. then we included the context tweets into our dictionary. this time the accuracy beat the baseline. we tried to tune the laplace smoothing parameter and it turned out that the default one gave the highest. we also tried with stemming using the porterstemmer of nltk package but it does not improve the accuracy considerably. contribution of team members we went through design of algorithms, coding, and documentation together."	['cs', 'project', 'proposal', 'group', 'livedatalab', 'admins', 'team', 'members', 'yanbo', 'chen', 'ychen', 'linfei', 'jing', 'ljing', 'huaminghui', 'ding', 'hding', 'captain', 'topic', 'text', 'classification', 'competition', 'choose', 'fully', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'learnt', 'classical', 'machine', 'learning', 'algorithms', 'naive', 'bayes', 'decision', 'tree', 'also', 'basic', 'knowledge', 'pattern', 'mining', 'files', 'using', 'apriori', 'algorithm', 'fpgrowth', 'member', 'used', 'write', 'scratch', 'without', 'predefined', 'libraries', 'classify', 'animals', 'zoos', 'dataset', 'helpful', 'design', 'programming', 'language', 'python', 'problem', 'solve', 'given', 'training', 'set', 'containing', 'tweets', 'twitter', 'label', 'sarcasm', 'not_sarcasm', 'train', 'classifier', 'predict', 'tweet', 'test', 'methods', 'use', 'dive', 'decide', 'apply', 'first', 'see', 'performs', 'well', 'work', 'predicting', 'lstm', 'bert', 'deep', 'frameworks', 'plan', 'popular', 'keras', 'library', 'tensorflow', 'progress', 'report', 'made', 'based', 'designed', 'implemented', 'data', 'two', 'categories', 'performance', 'current', 'already', 'beat', 'baseline', 'remaining', 'tasks', 'tuning', 'make', 'even', 'accurate', 'challengesissues', 'faced', 'method', 'considering', 'weighted', 'could', 'precise', 'specifically', 'task', 'usage', 'clone', 'source', 'code', 'local', 'command', 'install', 'dependencies', 'pip', 'r', 'requirementstxt', 'assuming', 'predictionpy', 'generate', 'prediction', 'results', 'stored', 'answertxt', 'errors', 'nltk', 'package', 'running', 'please', 'try', 'suggested', 'additional', 'issue', 'welcome', 'reviewers', 'schedule', 'live', 'demo', 'description', 'planned', 'tried', 'equation', 'compute', 'probability', 'laplace', 'smoothing', 'calculate', 'every', 'single', 'key', 'dictionary', 'calculating', 'unk', 'stands', 'words', 'seen', 'either', 'alpha', 'stnads', 'parameter', 'default', 'countw', 'number', 'times', 'specific', 'word', 'w', 'appeared', 'v', 'size', 'corresponding', 'overview', 'functions', 'implementation', 'details', 'readerpy', 'provide', 'helpers', 'load', 'datasets', 'proper', 'structures', 'loadfilenamestemmingsarcasmtraining', 'helper', 'function', 'name', 'indicates', 'directory', 'path', 'file', 'boolean', 'variable', 'whether', 'labelled', 'input', 'stemming', 'provided', 'optional', 'enable', 'returns', 'list', 'load_datasettrain_dirdev_dirstemming', 'loads', 'form', 'loadfile', 'lists', 'indicating', 'entry', 'wrapper', 'called', 'user', 'run', 'mainargs', 'extracts', 'output', 'naive_bayespy', 'naivebayestrain_set', 'train_labels', 'dev_set', 'smoothing_parameter', 'do_unigramtrain_set', 'trai_labels', 'applies', 'unigram', 'model', 'labels', 'get_probabilitytweetp_dict', 'calculates', 'sum', 'get_probability_dictsome_dictword_countsmoothing_parameter', 'including', 'equations', 'mentioned', 'section', 'get_dictstrain_set', 'creates', 'respectively', 'store', 'count', 'occurrences', 'sarcarsm', 'response', 'context', 'accuracy', 'around', 'included', 'time', 'tune', 'turned', 'one', 'gave', 'highest', 'porterstemmer', 'improve', 'considerably', 'contribution', 'went', 'coding', 'documentation', 'together']
https://github.com/Finkoy/CourseProject	cs 410 progress report 1. which tasks have been completed? i have completed the task of preprocessing the data. i have also completed the task of implementing different models for the text classification competition. i have tried using svmcnn, cnn, and lstm. i have also experimented a bit with logistic regression, rbf kernel svm, and different combinations of those models. the baseline score has not been beat yet. 2. which tasks are pending? currently i am trying to fine-tune a bert model on my preprocessed data. we will see if this beats the baseline or not. 3. are you facing any challenges? only with beating the baseline. the best f1 score achieved so far came from feature selection from a cnn trained on context data and tfidf vectorization of the response data with lasso to determine useful words. these features were combined and fed into a linear svm. cs410 project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. this team only contains one person, brian vien. the netid is bvien2 and by default, he is the captain. 2. which competition do you plan to join? i plan on joining the text classification competition. 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods i am prepared to learn state-of-the-art neural network classifiers. i have multilayer perceptron, recurrent neural networks, and convolutional neural networks. i have heard of tensorflow, keras, and pytorch. i have a little bit of prior experience with multilayer perceptron from coursework and have seen demos of tensorflow. i hope to learn more through this competition. 4. which programming language do you plan to use? i am planning on using python3.8. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['cs', 'progress', 'report', 'tasks', 'completed', 'task', 'preprocessing', 'data', 'also', 'implementing', 'different', 'models', 'text', 'classification', 'competition', 'tried', 'using', 'svmcnn', 'cnn', 'lstm', 'experimented', 'bit', 'logistic', 'regression', 'rbf', 'kernel', 'svm', 'combinations', 'baseline', 'score', 'beat', 'yet', 'pending', 'currently', 'trying', 'finetune', 'bert', 'model', 'preprocessed', 'see', 'beats', 'facing', 'challenges', 'beating', 'best', 'f', 'achieved', 'far', 'came', 'feature', 'selection', 'trained', 'context', 'tfidf', 'vectorization', 'response', 'lasso', 'determine', 'useful', 'words', 'features', 'combined', 'fed', 'linear', 'project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'contains', 'one', 'person', 'brian', 'vien', 'netid', 'bvien', 'default', 'plan', 'join', 'joining', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'like', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'learning', 'etc', 'name', 'concrete', 'tools', 'may', 'heard', 'neural', 'network', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'multilayer', 'perceptron', 'recurrent', 'networks', 'convolutional', 'tensorflow', 'keras', 'pytorch', 'little', 'coursework', 'seen', 'demos', 'hope', 'programming', 'language', 'use', 'planning', 'python', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/Guanhuali2/CourseProject	documentation: functions of our code: * given a root website (university's web page url) and its name (e.g. uiuc, ucb ....), the program will automatically find its faculty directory page. * after getting the faculty directory page, the program will automatically find all of its faculty homepages. * then according to the user's instructions, the program will output a given number of faculty information including their phone, email, past college, personal bio, research area, and earned awards. * this program can be used for cs students to search desired colleges' professors, and get their information in a convenient way (the program will filter useful information for them). how code is implemented: * for the first part, we use selenium to find and interact with college's search bar in order to find candidates for the faculty directory page url (directory.py). since some college's search system is not perfect, we combine search results from google to make sure our candidate list includes the true faculty directory page url. then we build random forest classifier (rfclassifier1.py, one model - rfclassifier1) with manually collected training data to classify the correct directory page url.(getfeature.py) * second part, we keep using selenium and requests/bs4 to find candidates' url list of faculty homepage. since there is too much candidate url, we use some conditions to filter out as much as possible url. then building another random forest classifier (rfclassifier2.py, one model - rfclassifier2) to find corrected faculty homepages. (getfeature.py) * inside each faculty homepage, we first get the html file and filter out useless information (dataprocess.py), and make all useful information into a list. then we build a tfidf vectorizer as the feature to train our text classifier (random forest.py, two models - vectorizer and text_classifier). then we use the classifier to classify our desired information (bio,education,awards,research interests). how to run the code: * all the main code is inside directory.py. in order to run it, just need to run ./directory.py and make sure the computer has the correct version of browser to fit with selenium. and then input college url, college name, and desired number of output. * environment requirement: beautifulsoup4, selenium, numpy, pandas, seaborn, scikit-learn, matplotlib contribution of team member: * guanhua li: implementing the selenium/web crawler part and building models for classifiers. * ruoyu zhu: collect dataset and find features for models. * ziqi li: find features for models , scrape features from webpages and function1 coding. team name: lzl team member: guanhua li(guanhua2@illinois.edu),ruoyu zhu(ruoyuz3@illinois.edu),ziqi li(ziqili3@illinois.edu) team project: improving expertsearch system primary language: python team leader: ruoyu zhu * what is the function of the tool? given a university website as the root url, our tool is able to classify the correct faculty directory pages. then we are able to classify the correct faculty home webpage according to the directory pages. thus, our tool can further extract useful information from faculty webpages(bios, awards, teaching courses, email...) * who will benefit from such a tool? college students that want to get detailed information about certain professors. * does this kind of tools already exist? if similar tools exist, how is your tool different from them? would people care about the difference? our tool will try to achieve higher accuracy and efficiency. * what existing resources can you use? in order to build classifier, python packages such as scikit-learn and pytorch in order to extract useful features and information from given url website, python packages such as selenium and requests/bs4 * what techniques/algorithms will you use to develop the tool? (it's fine if you just mention some vague idea.) using web crawler technique to get some features (or url features) for building and training classifiers (decision trees - random forest classifier). classify the correct faculty directory pages and faculty home webpages. using text retrieval technique learned from cs410 courses to get relevant useful text from faculty home webpages. * how will you demonstrate the usefulness of your tool? it can efficiently get detailed and correct faculty information. * a very rough timeline to show when you expect to finish what. (the timeline doesn't have to be accurate.) by november, finish building the basic classifier for faculty directory pages and the training process for it, and starting to evaluate the classifier for further improvement. by 11/10, finish building the basic classifier for faculty home webpages, starting the evaluation process, at the same time, starting building proper text retrieval algorithm for extracting useful info from faculty homepages. by 11/15 finish all the classifiers, and make sure the high accuracy of each classifier. by december, finish the whole project 1) progress made thus far * given the correct specific department of university, we are able to recognize correct faculty directory pages using classifiers. * extract faculty web pages according to different directory pages. 2) remaining tasks * given correct faculty pages, we still need to get useful information using some textual information retrieved methods. * integrate all the code for different parts * preparing a short presentation for the overall project 3) any challenges/issues being faced * since faculty directory pages are different among different departments, do we need to identify all departments' faculty directory pages given a university website, or particular department website will be given. * since we are using classifiers to classify the correct website pages, we cannot ensure 100% accuracy on all the university. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. team name : lzl team member: guanhua li, ruoyu zhu, ziqi li team leader: guanhua li, ruoyu zhu directory.py is the main program that needs to run. documentation is inside the code dumentation.pdf file demo video is inside the project video link file in order to run the program, you need to allow browser remote automation, safari menu->developer->allow remote automation	['documentation', 'functions', 'code', 'given', 'root', 'website', 'universitys', 'web', 'page', 'url', 'name', 'eg', 'uiuc', 'ucb', 'program', 'automatically', 'find', 'faculty', 'directory', 'getting', 'homepages', 'according', 'users', 'instructions', 'output', 'number', 'information', 'including', 'phone', 'email', 'past', 'college', 'personal', 'bio', 'research', 'area', 'earned', 'awards', 'used', 'cs', 'students', 'search', 'desired', 'colleges', 'professors', 'get', 'convenient', 'way', 'filter', 'useful', 'implemented', 'first', 'part', 'use', 'selenium', 'interact', 'bar', 'order', 'candidates', 'directorypy', 'since', 'system', 'perfect', 'combine', 'results', 'google', 'make', 'sure', 'candidate', 'list', 'includes', 'true', 'build', 'random', 'forest', 'classifier', 'rfclassifierpy', 'one', 'model', 'rfclassifier', 'manually', 'collected', 'training', 'data', 'classify', 'correct', 'urlgetfeaturepy', 'second', 'keep', 'using', 'requestsbs', 'homepage', 'much', 'conditions', 'possible', 'building', 'another', 'corrected', 'getfeaturepy', 'inside', 'html', 'file', 'useless', 'dataprocesspy', 'tfidf', 'vectorizer', 'feature', 'train', 'text', 'forestpy', 'two', 'models', 'text_classifier', 'bioeducationawardsresearch', 'interests', 'run', 'main', 'need', 'computer', 'version', 'browser', 'fit', 'input', 'environment', 'requirement', 'beautifulsoup', 'numpy', 'pandas', 'seaborn', 'scikitlearn', 'matplotlib', 'contribution', 'team', 'member', 'guanhua', 'li', 'implementing', 'seleniumweb', 'crawler', 'classifiers', 'ruoyu', 'zhu', 'collect', 'dataset', 'features', 'ziqi', 'scrape', 'webpages', 'function', 'coding', 'lzl', 'liguanhuaillinoiseduruoyu', 'zhuruoyuzillinoiseduziqi', 'liziqiliillinoisedu', 'project', 'improving', 'expertsearch', 'primary', 'language', 'python', 'leader', 'tool', 'university', 'able', 'pages', 'home', 'webpage', 'thus', 'extract', 'webpagesbios', 'teaching', 'courses', 'benefit', 'want', 'detailed', 'certain', 'kind', 'tools', 'already', 'exist', 'similar', 'different', 'would', 'people', 'care', 'difference', 'try', 'achieve', 'higher', 'accuracy', 'efficiency', 'existing', 'resources', 'packages', 'pytorch', 'techniquesalgorithms', 'develop', 'fine', 'mention', 'vague', 'idea', 'technique', 'decision', 'trees', 'retrieval', 'learned', 'relevant', 'demonstrate', 'usefulness', 'efficiently', 'rough', 'timeline', 'show', 'expect', 'finish', 'doesnt', 'accurate', 'november', 'basic', 'process', 'starting', 'evaluate', 'improvement', 'evaluation', 'time', 'proper', 'algorithm', 'extracting', 'info', 'high', 'december', 'whole', 'progress', 'made', 'far', 'specific', 'department', 'recognize', 'remaining', 'tasks', 'still', 'textual', 'retrieved', 'methods', 'integrate', 'parts', 'preparing', 'short', 'presentation', 'overall', 'challengesissues', 'faced', 'among', 'departments', 'identify', 'particular', 'cannot', 'ensure', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'needs', 'dumentationpdf', 'demo', 'video', 'allow', 'remote', 'automation', 'safari', 'menudeveloperallow']
https://github.com/IanG89998/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/JackDeDobb/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/Jagaskak/CourseProject	"causal topic modeling with time series feedback akshaya jagannadharao (akshaya2) heidi toussaint (heidist2) hari venkitaraman (hv4) pre-setup -- data this project requires access to new york times data. there are two methods to collect articles published by new york times from may 2000-oct 2000. gain access to the ldc corpus. you should parse the documents and only collect relevant articles (i.e. keep paragraphs that contain ""bush"" or ""gore). you can also collect the data by scraping the new york times website. details on how to do so can be found in the readme file in the data folder of the project repo. ensure the data is stored locally pre-setup -- jupyter notebook for both methods below, you will need to have a version of the data stored locally. we strongly suggest using google colab as it reduces the overhead of installing packages. to run on google colab: click on link at top of jupyter notebook that says ""open in colab"" make sure that the notebook is not in your shared drive edit the paths to the new york times and iem datasets in the 3rd cell to run locally: clone github open up jupyter notebook locally and open file ("""") how to install the software in google colab: run cell block two (everything is pretty much already installed) locally: install the following libraries using pip (if you have not done so already) gensim spacy pyldavis scipy statsmodels numpy pandas nltk for stopwords, run python -m nltk.downloader stopwords 2. how to use the software run each cell block in the notebook. if you'd like to try out different parameters (i.e. change number of topics, decay param, etc.) you can edit the block and rerun it. 3. example use case improve topic modeling by using a causal reference (e.g. analyzing topics with external time series variables such as stock prices) video link: cs410_teameasttowest_finalproject - illinois media space team easttowest akshaya jagannadharao (akshaya2) | heidi touissant (heidist2) | hari venkitaraman (hv4) 1) an overview of the function of the code (i.e., what it does and what it can be used for). we are reproducing a paper in this project: mining causal topics in text data: iterative topic modeling with time series feedback. we are only reproducing the first experiment where the authors examine the 2000 u.s. presidential election. the code we implement here can be used to find causal relationships between two different datasets. to be more specific, we are trying to find a causal relationship between new articles and stock market prices. 2) documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. data: new york times: there are two methods to collect articles published by new york times from may-oct 2000. one is to gain access to the ldc corpus. you should parse the documents and only collect relevant articles (i.e. keep paragraphs that contain ""bush"" or ""gore). if the corpus is unavailable to you, it is still possible to collect the data by scraping the new york times website. details on how to do so can be found in the readme file in the data folder. iowa electronic market (iem) time series: the procedure to collect the iem data is detailed in the readme file in the data folder. code: we are running everything inside a jupyter notebook (with python version 3.7.5) so that we can easily create and display visualizations. the code can be broken down into 3 sections (we have taken the initiative to section it off into three cells). the first cell contains all the import statements. we have detailed the usage of software in section 3 of this document for further perusal. the second cell loads the new york times dataset and the iowa electronic market time series data into data tables and creates bow (bag of words) representations by article and date. you should only have to run this cell once unless you want to change the bow representation. the third cell contains the code to run the topic modeling with time series feedback. there is an example use case documented in the readme file as well as an example all in the jupyter notebooks. challenges + improvements + differences between our results and theirs: * delay in obtaining dataset from nyt corpus * we were unsure if we were able to obtain the dataset because of copyright permissions. due to this, we were unable to start our project until 1 month before the deadline (and one week was technically break). * no efficient way to write code as a group remotely * we struggled to find a collaborative jupyter notebook environment. jupyter notebook is an important tool for our use to easily visualize the different outputs and data structures we were generating throughout the code (i.e. visualization for lda model, visualization of results). * missing dates in time series * there are multiple ways to handle missing dates in time-series data. namely, take the last price, take the logistic regression, take an average, drop the missing date. # we took the easiest route and simply used the previous day's prices for the missing dates as there were only two (6/7 & 6/8) * calculating mu remained unclear after referring to the referenced paper, attending multiple office hours, and consulting with other classmates. * we decided to go with a similar parameter already integrated with gensim's lda model, decay. * some material was outside the scope of the course. we needed to understand how granger causality worked and the constraints of a time series feedback (namely the data should be stationary). * a typographical error in the paper was discovered while attempting to reproduce table 1 (p. 3, table 1) * this caused confusion amongst the group and we spent some time trying to understand it. after attending office hours, the professor, a co-author of the paper, ultimately decided this was a typographical error * our results do not replicate the results achieved in the paper. there is a clear difference in the progression of confidence and purity levels through multiple iterations. 3) documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. additional instructions can be found in the readme files in the github repository. you can find a short demo on mediaspace on how to set up the code: cs410_teameasttowest_finalproject - illinois media space. to view a run of our code with the graphs generated at the end, visit cs410_teameasttowest_finalproject. if you would like to see the code in action, please reach out to the contributors (akshaya, heidi, or hari) for a demo/tutorial. due to copyright restrictions on the data, it is not possible to run this code yourself. we use the following package and import statements: pip install pyldavis import re import numpy as np import numpy.linalg as la import pandas as pd from pprint import pprint import datetime # nltk import nltk nltk.download('stopwords') from nltk.corpus import stopwords from nltk import ngrams # gensim import gensim from gensim import models import gensim.corpora as corpora from gensim.utils import simple_preprocess from gensim.models import coherencemodel from gensim.models import phrases # todo: to create bigrams with # spacy for lemmatization import spacy # plotting tools import pyldavis import pyldavis.gensim # don't skip this import matplotlib.pyplot as plt import statsmodels from statsmodels.tsa.stattools import grangercausalitytests import warnings warnings.filterwarnings('ignore') references: mei, q, ling, x, wondra, m, su h., and zhai, c. topic sentiment mixture: modeling facets and opinions in weblogs. in proceedings of the 16th international conference on world wide web, pages 171-180, new york, ny, usa, 2007. acm. mupfururirwa, w. (2019, september 19). retrieved from https://stackoverflow.com/questions/58005681/is-it-possible-to-run-a-vector-autoregression-analysis- on-a-large-gdp-data-with prabhakaran, s. time series analysis in python, retrieved from https://www.machinelearningplus.com/time-series/time-series-analysis-python sarit, m. (2019, october 7) time series forecasting using granger's causality and vector auto-regressive model, retrieved from https://towardsdatascience.com/granger-causality-and-vector-auto-regressive-model-for-time-series- forecasting-3226a64889a6 4) brief description of the contribution of each team member in case of a multi-person team. we initially tried to code in real-time as a group across various notebook environments but could not find an efficient solution that would have allowed us to access the data at the same time (we could have potentially hosted the data on the cloud but that would have required additional charges). we ultimately decided that akshaya would share her screen via zoom video call while she coded and hari and heidi worked through understanding the steps of the paper together as well as communicated with tas and prof during office hours. essentially pair programming with one person as driver and two people as navigators. during the week, heidi and hari would go through the paper and figure out the next steps. akshaya would code during the week. during the meeting, we would review what akshaya did and find any gaps in logic or deviations from the paper/catch for mistakes. after reviewing the code, hari and heidi would go through the next steps that akshaya would code up later in the week. we split up the work like this because the lda model would take a significant time to run during the meeting. if there was time remaining in our meeting, we would take some time to code as a team. if there was a report due, we would complete it as a team during the meeting. to make the best use of our time since the algorithm takes a significant amount of time to run, we decided on this strategy. when issues came up that we could not agree on a solution as a team, hari and heidi would take the time during the week to talk with the tas during office hours. a good example of this situation in our group would be that hari found a typo in the paper that caused a lot of confusion. heidi and hari went to office hours to clarify with the ta. and when there was no resolution, heidi and akshaya spoke with the professor during office hours and finally received an answer. team east to west reproduce results from paper: mining causal topics in text data: iterative topic modeling with time series feedback 1. which tasks have been completed? implemented one iteration of the paper. 2. which tasks are pending? * need to understand how the mu weight works * implement feedback loop * calculate purity * use purity as stopping criteria 3. are you facing any challenges? a. calculating/implementing mu? b. granger causality covariance warning i. calculating the word stream leads does not make a full rank matrix. we think this makes sense that this happens, but the paper doesn't mention what they do 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. * akshaya jagannadharao, akshaya2 [captain] * heidi toussaint, heidist2 * hariharan venkitaraman, hv4 2. which paper have you chosen? causal topic modeling hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? sort of. new york times dataset (preferred dataset if we get access): * https://catalog.ldc.upenn.edu/ldc2008t19 iowa electronic markets (iem) 2000 presidential winner-takesall market: * https://iemweb.biz.uiowa.edu/pricehistory/pricehistory_selectcontract.cfm?marke t_id=29 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? new york times articles * https://spiderbites.nytimes.com/2000/ * it has all the articles written in 2000. we just need to scrape the page ourselves and aggregate the useful text (which we would have to do using the ldc corpus anyway). 6. if you answer ""no"" to questions 4 & 5, how are you gohttps://spiderbites.nytimes.com/2000/ing to demonstrate that you have successfully reproduced the method introduced in the paper? our results shouldn't differ from the method in the paper because we are using the same exact data. the paper didn't use any of the other meta information from the ldc corpus, only the date (which we can find in the article) and the text (which is available). since we have both pieces of information, we should be able to reproduce the method introduced in the paper. overview this project attempts to reproduce the paper mining causal topics in text data: iterative topic modeling with time series feedback. we are only reproducing the first experiment where the authors examine the 2000 u.s. presidential election. the code we implement here can be used to find causal relationships between a textual dataset and non-textual dataset. we prove that by using the idea of causality, we can acheive better topic mining results than the baseline model (i.e. without time series feedback). each folder in this repo contains a readme file that will explain more about the contents of the directory. repository structure parent directory the top level directory contains the jupyter notebooks with our code. there is further documentation in the jupyter notebook as well. to view a demo on how to setup the notebook, visit example run for causal topic modeling with time series feedback. to view a run of our code with the graphs generated at the end, visit cs410_teameasttowest_finalproject. data folder the data folder provides an overview/methodology of how to access the data and structure it to run our code. results folder the results folder contains images of our results as well as interactive visualizations in the form of html files. we also provide a readme file in this directory that analyzes the differences between our results and the papers and why this may be so. run the code we strongly suggest using google colab as it reduced the overhead of installing packages. the other option is to download the jupyter notebook and set it up on your local machine. make sure the data is stored locally. to run on googlecolab (will save a copy in your google drive) open the jupyter notebook titled ""itmtf_googlecolab.ibynb"" at the top of the notebook there is a link that says ""open in colab"" click the link and follow the instructions to give permissions to googlecolab the notebook should be located in my drive. edit the paths in the first cell to point to your data on your google drive run the cells to run locally clone this reproduce open the juptyer notebook titled ""itmtf.ipynb"" run the cells code examples there is documentation for the main function (itmtf()) which implements the topic modeling. an example of how to call it is below as well as in the notebook. itmtf function parameters: paramctrl -- str (either 'k' or 'decay'), tells function to test various k or decay values params -- list of integers, each val in list is either a k or decay values to test. for k values, the last k value will be used to test a variable number of topics starting at k topics. in every iteration of itmtf, k will increase by the number of causal topics found + some constant decay -- (0.5, 1] decay parameter to use when running lda (effective only when paramctrl='k') k -- interger representing number of topics to use when running lda (effective only when paramctrl='decay') iterations -- integer number of iterations to run itmtf const_k_increase -- integer number of topics to increase (in addition to number of causal topics found) each iteration when running varying number of topics (effective only when paramctrl='k') default is 0 verbose -- true/false print out purity and confidence every iteration returns: k_lda_model -- the final lda_model k_avg_purities -- average purity of all causal topics in each iteration k_avg_conf -- average confidence of all causal topics in each iteration example calls: k_lda_model, k_avg_purities, k_avg_conf = itmtf(""k"", params=[10, 20, 30, 40, 10]) mu_lda_model, mu_avg_purities, mu_avg_conf = itmtf(""decay"", params=[0.51, 0.6, 0.7, 0.8, 0.9, 1]) standard graph visualizations these visualizations are built using matplotlib.plotly. the function show_plot() is a wrapper for the plotly function plot(). ``` k_labels = [""10"", ""20"", ""30"", ""40"", ""varying number of topics""] show_plot(range(1, 6), k_avg_purities, ""iteration"", ""average purity"", k_labels, xticks=range(1, 6), yaxisrange=[0, 120], title=""average purity for different number of topics"", legend_title=""number of topics"", saveas=""purity_k.png"") show_plot(range(1, 6), k_avg_conf, ""iteration"", ""average confidence"", k_labels, xticks=range(1, 6), yaxisrange=[95.5, 100], title=""average confidence for different number of topics"", legend_title=""number of topics"", saveas=""confidence_k.png"") mu_labels = [""0.51"", ""0.6"", ""0.7"", ""0.8"", ""0.9"", ""1""] show_plot(range(1, 6), mu_avg_purities, ""iteration"", ""average purity"", mu_labels, xticks=range(1, 6), yaxisrange=[0, 120], title=""average purity for different decay values"", legend_title=""decay values"", saveas=""purity_mu.png"") show_plot(range(1, 6), mu_avg_conf, ""iteration"", ""average confidence"", mu_labels, xticks=range(1, 6), yaxisrange=[95.5, 100], title=""average confidence for different decay values"", legend_title=""decay values"", saveas=""confidence_mu.png"") ``` interactive visualizations these visualizations are built using pyldavis. the below example also includes a line showing how to save the visualization. ``` pyldavis.enable_notebook() vis = pyldavis.gensim.prepare(k_lda_model, corpus, id2word) pyldavis.save_html(vis, 'ldavis_k.html') pyldavis.enable_notebook() vis = pyldavis.gensim.prepare(mu_lda_model, corpus, id2word) pyldavis.save_html(vis, 'ldavis_mu.html') ```"	['causal', 'topic', 'modeling', 'time', 'series', 'feedback', 'akshaya', 'jagannadharao', 'heidi', 'toussaint', 'heidist', 'hari', 'venkitaraman', 'hv', 'presetup', 'data', 'project', 'requires', 'access', 'new', 'york', 'times', 'two', 'methods', 'collect', 'articles', 'published', 'may', 'oct', 'gain', 'ldc', 'corpus', 'parse', 'documents', 'relevant', 'ie', 'keep', 'paragraphs', 'contain', 'bush', 'gore', 'also', 'scraping', 'website', 'details', 'found', 'readme', 'file', 'folder', 'repo', 'ensure', 'stored', 'locally', 'jupyter', 'notebook', 'need', 'version', 'strongly', 'suggest', 'using', 'google', 'colab', 'reduces', 'overhead', 'installing', 'packages', 'run', 'click', 'link', 'top', 'says', 'open', 'make', 'sure', 'shared', 'drive', 'edit', 'paths', 'iem', 'datasets', 'rd', 'cell', 'clone', 'github', 'install', 'software', 'block', 'everything', 'pretty', 'much', 'already', 'installed', 'following', 'libraries', 'pip', 'done', 'gensim', 'spacy', 'pyldavis', 'scipy', 'statsmodels', 'numpy', 'pandas', 'nltk', 'stopwords', 'python', 'nltkdownloader', 'use', 'youd', 'like', 'try', 'different', 'parameters', 'change', 'number', 'topics', 'decay', 'param', 'etc', 'rerun', 'example', 'case', 'improve', 'reference', 'eg', 'analyzing', 'external', 'variables', 'stock', 'prices', 'video', 'cs_teameasttowest_finalproject', 'illinois', 'media', 'space', 'team', 'easttowest', 'touissant', 'overview', 'function', 'code', 'used', 'reproducing', 'paper', 'mining', 'text', 'iterative', 'first', 'experiment', 'authors', 'examine', 'us', 'presidential', 'election', 'implement', 'find', 'relationships', 'specific', 'trying', 'relationship', 'market', 'documentation', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'future', 'extension', 'improvement', 'mayoct', 'one', 'unavailable', 'still', 'possible', 'iowa', 'electronic', 'procedure', 'detailed', 'running', 'inside', 'easily', 'create', 'display', 'visualizations', 'broken', 'sections', 'taken', 'initiative', 'section', 'three', 'cells', 'contains', 'import', 'statements', 'usage', 'document', 'perusal', 'second', 'loads', 'dataset', 'tables', 'creates', 'bow', 'bag', 'words', 'representations', 'article', 'date', 'unless', 'want', 'representation', 'third', 'documented', 'well', 'notebooks', 'challenges', 'improvements', 'differences', 'results', 'delay', 'obtaining', 'nyt', 'unsure', 'able', 'obtain', 'copyright', 'permissions', 'due', 'unable', 'start', 'month', 'deadline', 'week', 'technically', 'break', 'efficient', 'way', 'write', 'group', 'remotely', 'struggled', 'collaborative', 'environment', 'important', 'tool', 'visualize', 'outputs', 'structures', 'generating', 'throughout', 'visualization', 'lda', 'model', 'missing', 'dates', 'multiple', 'ways', 'handle', 'timeseries', 'namely', 'take', 'last', 'price', 'logistic', 'regression', 'average', 'drop', 'took', 'easiest', 'route', 'simply', 'previous', 'days', 'calculating', 'mu', 'remained', 'unclear', 'referring', 'referenced', 'attending', 'office', 'hours', 'consulting', 'classmates', 'decided', 'go', 'similar', 'parameter', 'integrated', 'gensims', 'material', 'outside', 'scope', 'course', 'needed', 'understand', 'granger', 'causality', 'worked', 'constraints', 'stationary', 'typographical', 'error', 'discovered', 'attempting', 'reproduce', 'table', 'p', 'caused', 'confusion', 'amongst', 'spent', 'professor', 'coauthor', 'ultimately', 'replicate', 'achieved', 'clear', 'difference', 'progression', 'confidence', 'purity', 'levels', 'iterations', 'including', 'either', 'usages', 'apis', 'instructions', 'whichever', 'applicable', 'additional', 'files', 'repository', 'short', 'demo', 'mediaspace', 'set', 'view', 'graphs', 'generated', 'end', 'visit', 'would', 'see', 'action', 'please', 'reach', 'contributors', 'demotutorial', 'restrictions', 'package', 'np', 'numpylinalg', 'la', 'pd', 'pprint', 'datetime', 'nltkdownloadstopwords', 'nltkcorpus', 'ngrams', 'models', 'gensimcorpora', 'corpora', 'gensimutils', 'simple_preprocess', 'gensimmodels', 'coherencemodel', 'phrases', 'todo', 'bigrams', 'lemmatization', 'plotting', 'tools', 'pyldavisgensim', 'dont', 'skip', 'matplotlibpyplot', 'plt', 'statsmodelstsastattools', 'grangercausalitytests', 'warnings', 'warningsfilterwarningsignore', 'references', 'mei', 'q', 'ling', 'x', 'wondra', 'su', 'h', 'zhai', 'c', 'sentiment', 'mixture', 'facets', 'opinions', 'weblogs', 'proceedings', 'th', 'international', 'conference', 'world', 'wide', 'web', 'pages', 'ny', 'usa', 'acm', 'mupfururirwa', 'w', 'september', 'retrieved', 'httpsstackoverflowcomquestionsisitpossibletorunavectorautoregressionanalysis', 'onalargegdpdatawith', 'prabhakaran', 'analysis', 'httpswwwmachinelearningpluscomtimeseriestimeseriesanalysispython', 'sarit', 'october', 'forecasting', 'grangers', 'vector', 'autoregressive', 'httpstowardsdatasciencecomgrangercausalityandvectorautoregressivemodelfortimeseries', 'forecastingaa', 'brief', 'description', 'contribution', 'member', 'multiperson', 'initially', 'tried', 'realtime', 'across', 'various', 'environments', 'could', 'solution', 'allowed', 'potentially', 'hosted', 'cloud', 'required', 'charges', 'share', 'screen', 'via', 'zoom', 'call', 'coded', 'steps', 'together', 'communicated', 'tas', 'prof', 'essentially', 'pair', 'programming', 'person', 'driver', 'people', 'navigators', 'figure', 'next', 'meeting', 'review', 'gaps', 'logic', 'deviations', 'papercatch', 'mistakes', 'reviewing', 'later', 'split', 'work', 'significant', 'remaining', 'report', 'complete', 'best', 'since', 'algorithm', 'takes', 'amount', 'strategy', 'issues', 'came', 'agree', 'talk', 'good', 'situation', 'typo', 'lot', 'went', 'clarify', 'ta', 'resolution', 'spoke', 'finally', 'received', 'answer', 'east', 'west', 'tasks', 'completed', 'iteration', 'pending', 'weight', 'works', 'loop', 'calculate', 'stopping', 'criteria', 'facing', 'calculatingimplementing', 'b', 'covariance', 'warning', 'word', 'stream', 'leads', 'full', 'rank', 'matrix', 'think', 'makes', 'sense', 'happens', 'doesnt', 'mention', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'hariharan', 'chosen', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'thomas', 'rietz', 'daniel', 'diermeier', 'nd', 'information', 'knowledge', 'management', 'cikm', 'doi', 'language', 'plan', 'evaluation', 'sort', 'preferred', 'get', 'httpscatalogldcupenneduldct', 'markets', 'winnertakesall', 'httpsiemwebbizuiowaedupricehistorypricehistory_selectcontractcfmmarke', 't_id', 'question', 'recent', 'another', 'nature', 'httpsspiderbitesnytimescom', 'written', 'scrape', 'page', 'aggregate', 'useful', 'anyway', 'questions', 'gohttpsspiderbitesnytimescoming', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'shouldnt', 'differ', 'exact', 'didnt', 'meta', 'available', 'pieces', 'attempts', 'textual', 'nontextual', 'prove', 'idea', 'acheive', 'better', 'baseline', 'without', 'explain', 'contents', 'directory', 'structure', 'parent', 'level', 'setup', 'provides', 'overviewmethodology', 'images', 'interactive', 'form', 'html', 'provide', 'analyzes', 'papers', 'reduced', 'option', 'download', 'local', 'machine', 'googlecolab', 'save', 'copy', 'titled', 'itmtf_googlecolabibynb', 'follow', 'give', 'located', 'point', 'juptyer', 'itmtfipynb', 'examples', 'main', 'itmtf', 'implements', 'paramctrl', 'str', 'k', 'tells', 'test', 'values', 'params', 'list', 'integers', 'val', 'value', 'variable', 'starting', 'every', 'increase', 'constant', 'effective', 'paramctrlk', 'interger', 'representing', 'paramctrldecay', 'integer', 'const_k_increase', 'addition', 'varying', 'default', 'verbose', 'truefalse', 'print', 'returns', 'k_lda_model', 'final', 'lda_model', 'k_avg_purities', 'k_avg_conf', 'calls', 'itmtfk', 'mu_lda_model', 'mu_avg_purities', 'mu_avg_conf', 'itmtfdecay', 'standard', 'graph', 'built', 'matplotlibplotly', 'show_plot', 'wrapper', 'plotly', 'plot', 'k_labels', 'show_plotrange', 'xticksrange', 'yaxisrange', 'titleaverage', 'legend_titlenumber', 'saveaspurity_kpng', 'saveasconfidence_kpng', 'mu_labels', 'legend_titledecay', 'saveaspurity_mupng', 'saveasconfidence_mupng', 'includes', 'line', 'showing', 'pyldavisenable_notebook', 'vis', 'pyldavisgensimpreparek_lda_model', 'idword', 'pyldavissave_htmlvis', 'ldavis_khtml', 'pyldavisgensimpreparemu_lda_model', 'ldavis_muhtml']
https://github.com/JamesFCoffey/CourseProject	"progress report cs 410 text information systems - fall 2020 team: the electric moccasins james coffey, netid: jamesfc2 - captain and praveen bhushan, netid: bhushan6 goal the function of the tool being implemented is to ""combine probabilistic topic modeling with time series causal analysis to uncover topics that are both coherent semantically and correlated with time series data."" (kim et al., doi=10.1145/2505515.2505612) this tool is being implemented in python instead of the r implementation done in the paper to make it easier for software deployment. the techniques/algorithms being used are plsa topic model and granger testing. progress made thus far * implementation in python jupyter notebook o acquired needed datasets: new york times annotated corpus (nytac), iem 2000 u.s. presidential election ticker, and stock tickers for aapl and aamrq o wrote script for determining significant granger causality at different lag values o wrote function for calculating impact value using granger causality o wrote function for calculating topic purity o wrote script to trim and organize nytac to data subset needed o imported plsa class from mp 3 and modified the build corpus to use nltk and multiprocessing. o wrote function for topic level causality. remaining tasks * compare results of python implementation with reference paper. * write command line interface for tool. * write documentation and record tutorial presentation. challenges/issues being faced * even with multiprocessing, building corpus takes a while on 4 core intel i7 cpu * em algorithm takes a while. could this be sped up by using cupy instead of numpy so that it uses the gpu? * not sure if it is one iteration of em for each update of the topic prior or if it is multiple em iterations for one topic prior update. * not sure how to incorporate the topic prior into the plsa algorithm. project proposal cs 410 text information systems - fall 2020 team: the electric moccasins james coffey, netid: jamesfc2 - captain and praveen bhushan, netid: bhushan6 we have chosen to reproduce a listed paper: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 the function of the tool that we will implement from this paper is to ""combine probabilistic topic modeling with time series causal analysis to uncover topics that are both coherent semantically and correlated with time series data."" (kim et al.) this tool can be used to find positive and negative correlation of topics in textual data with time series data. this could be useful for example in predicting stock prices by a real user such as an investment bank. our tool will be different in that we plan to use python for implementation instead of the r implementation done in the paper. this will be impactful as python is a general-purpose programming language and would make it easier to deploy in more programs. lastly, the techniques/algorithms we will use are those in the paper: plsa topic model, pearson correlation coefficients, and granger testing. we can obtain the datasets used in the paper. we can get the new york times annotated corpus from https://catalog.ldc.upenn.edu/ldc2008t19, iem 2000 u.s. presidential election: winner-takes-all market from https://iemweb.biz.uiowa.edu/closed/pres00_wta.html, and historical stock prices for aapl and aamrq from https://finance.yahoo.com/ and https://thestockmarketwatch.com/. using this data, we can demonstrate the usefulness of our tool be replicating the results published in the original paper on the same datasets. our rough timeline for the proposed project is as follows: * nov. 1st - implement paper in python. * nov. 8th - verify performance of against paper and compare results. * nov. 15th - write interface for using tool on new data to generate results * nov. 22nd - troubleshoot and bug fix. * nov. 29th - submit progress report. * dec. 6th - finish documentation and record presentation. * dec. 9th - submit code with documentation and tutorial presentation. cs 410: text information systems course project documentation tutorial presentation video microsoft hosting https://web.microsoftstream.com/video/625f5bff-8451-45b6-881b-207b9590da96 youtube hosting https://youtu.be/dqfxfznvuac overview of the function of the code this code implements the following paper: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 the code takes times series data and a corpus of text documents both with time stamps from the same period as input and outputs a set of causal topics with the lag that correlates them to the time series data. it does this through the iterative algorithm given below: 1. apply probabilistic latent semantic analysis (plsa) to the document corpus to generate a preselected number (input parameter) of topics topics. 2. use the granger causality test correlate topics with the time series data and output correlations with a significance (one minus p-value) above a cutoff value (0.95 default) to a list of (topic, lag) tuples. 3. for each topic in the list of (topic, lag) tuples, use the granger causality test to find causal words with above signifcance above the cutoff among top words. by default the top words are the those with the highest probability words whose summed probability does not surpass 50%. 4. separate positive and negative impact words of each topic into individual topics and ignore the lesser topic if it is below a ratio of the major topic (by default, less than 0.1). 5. with the newly separated topics from step 4, define prior word probabilities according the significances found in step 3. 6. apply plsa to the document corpus using the prior word probabilities incorporated into the m-step of the em algoritm. 7. repeat 2-6 until a spectified number of iterations is performed. this code can be used to text mining as to find causal topics correlated with external time series data. for example, it can be used to find topics correlated with the movement of stock prices. it can also be used to find topics correlated with the outcome of an election. implementation the code is implemented in an python class called itmtf in a module called causal_topic_mining.py. a portion of the code was adapted from cs 410 mp3. the class is composed of the following: class variables self.documents: the text document corpus. self.doc_timestamps: the timestamps of the documents in the corpus. self.vocabulary: the vocabulary. self.likelihoods: the log likelihoods. self.documents_path: the path to the text document corpus. self.term_doc_matrix: the term document matrix. self.document_topic_prob: p(z | d) self.topic_word_prob: p(w | z) self.topic_prob: p(z | d, w) self.number_of_documents: the number of documents. self.vocabulary_size: the size of the vocabulary. self.lag (default, 5): the maximum lag to which evaluate granger causality. self.sig_cutoff (default, 0.95): the significance cutoff. self.probm (default, 0.5): the maximum sum of the probabilities of the top words for a topic. self.min_impact_ratio (default, 0.1): the ratio below which to discard minority impact words in a topic. self.topic_prior: the prior word probabilities. self.mu: the strength of the prior in each iteration. self.ct: the list of (topic, lag) tuples for causal topics discovered by the algorithm. self.average_entropy: the average entropy of the topics for each iteration of the algorithm. self.average_topic_purity: the average topic purity of the topics for each iteration of the algorithm. self.average_causality_confidence: the average causality confidence of the topics for each iteration of the algorithm. self.time_series: the time series data saved on intialization of the class. class functions normalize(input_matrix): normalizes rows two-dimensional matrix to sum to one. token_pipeline(line): tokenizes line of input text. build_corpus(): reads documents from the corpus, tokenizes them, and stores them. it also stores the timestamps of the documents and records the number of documents. build_vocabulary(): constructs the vocabulary and records the size of the vocabulary. build_term_doc_matrix():constructs the term document matrix. initialize_randomly(number_of_topics): randomly initializes the probability distributions for p(z | d) and p(w | z). it also intializes the topic prior. initialize_uniformly(number_of_topics): uniformly initializes the probability distributions for p(z | d) and p(w | z). it also intializes the topic prior. initialize(number_of_topics, random=false): calls an intialization function. expectation_step(): the e-step of the em algorithm for plsa where it updates p(z | w, d). maximization_step(number_of_topics): the of the em algorithm for plsa where it m-step updates p(w | z) and p(z | d). process(number_of_topics, max_plsa_iter, epsilon, mu, itmtf_iter): the master control loop for the iterative topic modeling with time series feedback algorithm. impact_value(data, lag): calculates the impact value. build_ts(): builds a topic stream. topic_level_causality(): finds the causal topics from the topic streams and time series data. top_words(topic): finds the top words in a topic. build_ws(tw): builds a word stream. word_level_causality(): finds the significant words and their impact value for each topic using the word streams and time series data. generate_topic_prior(wc): generates the topic prior. create_eval_df(): creates a dataframe from which to evaluate metrics. metrics(): evaluates the average entropy, average topic purity, and average causality confidence of the topics. usage of the software installation download the module causal_topic_mining.py to your project folder. the module uses python 3.7 and requires the following libraries: - numpy - pandas - statsmodels - nltk - normalise - tqdm demonstration_notebook.ipynb requires the additional library: - matplotlib demonstration a demonstration of the use of the class itmtf is given in the jupyter notebook demonstration_notebook.ipynb. import the module. from causal_topic_mining import itmtf create an object from itmtf class itmtf = itmtf(documents_path, time_series) the path is to the text corpus of text files named yyyy-mm-dd.txt (yyyy = 4 digit year, mm = 2 digit month, dd = 2 digit day) and each line in the text file is a separate document. the time series is a pandas series where the indicies are the dates in pd.dateime format and the time series is a stationary series. tokenize the text corpus and record document timestamps itmtf.build_corpus() build vocabulary itmtf.build_vocabulary() run itmtf algorithm itmtf.process(number_of_topics = 30, max_plsa_iter = 1, epsilon = 0.001, mu = 1000, itmtf_iter = 5) access the results by calling the class object parameters desired itmtf.average_topic_purity for example. team contributions james coffey (captain) wrote proposal.pdf wrote progress report.pdf wrote causal_topic_mining.py wrote demonstration_notebook.ipynb wrote readme.md documentation gave tutorial presentation praveen bhushan gave tutorial presentation"	['progress', 'report', 'cs', 'text', 'information', 'systems', 'fall', 'team', 'electric', 'moccasins', 'james', 'coffey', 'netid', 'jamesfc', 'captain', 'praveen', 'bhushan', 'goal', 'function', 'tool', 'implemented', 'combine', 'probabilistic', 'topic', 'modeling', 'time', 'series', 'causal', 'analysis', 'uncover', 'topics', 'coherent', 'semantically', 'correlated', 'data', 'kim', 'et', 'al', 'doi', 'python', 'instead', 'r', 'implementation', 'done', 'paper', 'make', 'easier', 'software', 'deployment', 'techniquesalgorithms', 'used', 'plsa', 'model', 'granger', 'testing', 'made', 'thus', 'far', 'jupyter', 'notebook', 'acquired', 'needed', 'datasets', 'new', 'york', 'times', 'annotated', 'corpus', 'nytac', 'iem', 'us', 'presidential', 'election', 'ticker', 'stock', 'tickers', 'aapl', 'aamrq', 'wrote', 'script', 'determining', 'significant', 'causality', 'different', 'lag', 'values', 'calculating', 'impact', 'value', 'using', 'purity', 'trim', 'organize', 'subset', 'imported', 'class', 'mp', 'modified', 'build', 'use', 'nltk', 'multiprocessing', 'level', 'remaining', 'tasks', 'compare', 'results', 'reference', 'write', 'command', 'line', 'interface', 'documentation', 'record', 'tutorial', 'presentation', 'challengesissues', 'faced', 'even', 'building', 'takes', 'core', 'intel', 'cpu', 'em', 'algorithm', 'could', 'sped', 'cupy', 'numpy', 'uses', 'gpu', 'sure', 'one', 'iteration', 'update', 'prior', 'multiple', 'iterations', 'incorporate', 'project', 'proposal', 'chosen', 'reproduce', 'listed', 'hyun', 'duk', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'mining', 'iterative', 'feedback', 'proceedings', 'nd', 'acm', 'international', 'conference', 'knowledge', 'management', 'cikm', 'ny', 'usa', 'implement', 'find', 'positive', 'negative', 'correlation', 'textual', 'useful', 'example', 'predicting', 'prices', 'real', 'user', 'investment', 'bank', 'plan', 'impactful', 'generalpurpose', 'programming', 'language', 'would', 'deploy', 'programs', 'lastly', 'pearson', 'coefficients', 'obtain', 'get', 'httpscatalogldcupenneduldct', 'winnertakesall', 'market', 'httpsiemwebbizuiowaeduclosedpres_wtahtml', 'historical', 'httpsfinanceyahoocom', 'httpsthestockmarketwatchcom', 'demonstrate', 'usefulness', 'replicating', 'published', 'original', 'rough', 'timeline', 'proposed', 'follows', 'nov', 'st', 'th', 'verify', 'performance', 'generate', 'troubleshoot', 'bug', 'fix', 'submit', 'dec', 'finish', 'code', 'course', 'video', 'microsoft', 'hosting', 'httpswebmicrosoftstreamcomvideofbffbbbda', 'youtube', 'httpsyoutubedqfxfznvuac', 'overview', 'implements', 'following', 'documents', 'stamps', 'period', 'input', 'outputs', 'set', 'correlates', 'given', 'apply', 'latent', 'semantic', 'document', 'preselected', 'number', 'parameter', 'test', 'correlate', 'output', 'correlations', 'significance', 'minus', 'pvalue', 'cutoff', 'default', 'list', 'tuples', 'words', 'signifcance', 'among', 'top', 'highest', 'probability', 'whose', 'summed', 'surpass', 'separate', 'individual', 'ignore', 'lesser', 'ratio', 'major', 'less', 'newly', 'separated', 'step', 'define', 'word', 'probabilities', 'according', 'significances', 'found', 'incorporated', 'mstep', 'algoritm', 'repeat', 'spectified', 'performed', 'external', 'movement', 'also', 'outcome', 'called', 'itmtf', 'module', 'causal_topic_miningpy', 'portion', 'adapted', 'composed', 'variables', 'selfdocuments', 'selfdoc_timestamps', 'timestamps', 'selfvocabulary', 'vocabulary', 'selflikelihoods', 'log', 'likelihoods', 'selfdocuments_path', 'path', 'selfterm_doc_matrix', 'term', 'matrix', 'selfdocument_topic_prob', 'pz', 'selftopic_word_prob', 'pw', 'z', 'selftopic_prob', 'w', 'selfnumber_of_documents', 'selfvocabulary_size', 'size', 'selflag', 'maximum', 'evaluate', 'selfsig_cutoff', 'selfprobm', 'sum', 'selfmin_impact_ratio', 'discard', 'minority', 'selftopic_prior', 'selfmu', 'strength', 'selfct', 'discovered', 'selfaverage_entropy', 'average', 'entropy', 'selfaverage_topic_purity', 'selfaverage_causality_confidence', 'confidence', 'selftime_series', 'saved', 'intialization', 'functions', 'normalizeinput_matrix', 'normalizes', 'rows', 'twodimensional', 'token_pipelineline', 'tokenizes', 'build_corpus', 'reads', 'stores', 'records', 'build_vocabulary', 'constructs', 'build_term_doc_matrixconstructs', 'initialize_randomlynumber_of_topics', 'randomly', 'initializes', 'distributions', 'intializes', 'initialize_uniformlynumber_of_topics', 'uniformly', 'initializenumber_of_topics', 'randomfalse', 'calls', 'expectation_step', 'estep', 'updates', 'maximization_stepnumber_of_topics', 'processnumber_of_topics', 'max_plsa_iter', 'epsilon', 'mu', 'itmtf_iter', 'master', 'control', 'loop', 'impact_valuedata', 'calculates', 'build_ts', 'builds', 'stream', 'topic_level_causality', 'finds', 'streams', 'top_wordstopic', 'build_wstw', 'word_level_causality', 'generate_topic_priorwc', 'generates', 'create_eval_df', 'creates', 'dataframe', 'metrics', 'evaluates', 'usage', 'installation', 'download', 'folder', 'requires', 'libraries', 'pandas', 'statsmodels', 'normalise', 'tqdm', 'demonstration_notebookipynb', 'additional', 'library', 'matplotlib', 'demonstration', 'import', 'causal_topic_mining', 'create', 'object', 'itmtfdocuments_path', 'time_series', 'files', 'named', 'yyyymmddtxt', 'yyyy', 'digit', 'year', 'mm', 'month', 'dd', 'day', 'file', 'indicies', 'dates', 'pddateime', 'format', 'stationary', 'tokenize', 'itmtfbuild_corpus', 'itmtfbuild_vocabulary', 'run', 'itmtfprocessnumber_of_topics', 'access', 'calling', 'parameters', 'desired', 'itmtfaverage_topic_purity', 'contributions', 'proposalpdf', 'reportpdf', 'readmemd', 'gave']
https://github.com/JiajunWuEdu/CourseProject	proposal of the text classification competition what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. my group has only one member. jiajun wu, jiajunw6. so i will be the captain myself. which competition do you plan to join? i would like to join a text classification competition. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods though i am not very familiar with most classifiers, i decide to learn some of these and i hope they will be useful in the competition. while my interest is classification and prediction of utterances in classroom contexts, i heard of some neural network classifiers and deep learning frameworks which were employed in this area. for instance, zhao (2016) developed a sequence predictor using three neural network classifiers (i.e. mlp, cnn, and lstm). donnelly et al. (2016) used the naive bayes classifier using the weka machine learning toolbox identified five key instructional segments (question & answer, procedures and directions, supervised seatwork, small group work, and lecture) in the classroom audio data with f1 scores ranging from 0.64 to 0.78. suresh et al. (2019) trained a bi-lstm network to classify the transcript of teacher-student dialogues sentence by sentence in to 6 talk moves (e.g. restating, revoicing, pressing for reasoning, getting students to relate to another's ideas, etc.) with an f1 measure of 65%. reference donnelly, p.j., blanchard, n., samei, b., olney, a.m., sun, x., ward, b., kelly, s., nystran, m. and d'mello, s.k., 2016, july. automatic teacher modeling from live classroom audio. in proceedings of the 2016 conference on user modeling adaptation and personalization (pp. 45-53). suresh, a., sumner, t., jacobs, j., foland, b. and ward, w., 2019, july. automating analysis and feedback to improve mathematics teachers' classroom discourse. in proceedings of the aaai conference on artificial intelligence (vol. 33, pp. 9721-9728). zhao, y., chu, s., zhou, y. and tu, k., 2017, january. sequence prediction using neural network classiers. in international conference on grammatical inference (pp. 164-169). which programming language do you plan to use? i plan to use python, and c++ if it is necessary. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['proposal', 'text', 'classification', 'competition', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'group', 'one', 'member', 'jiajun', 'wu', 'jiajunw', 'plan', 'join', 'would', 'like', 'choose', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'name', 'deep', 'learning', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'though', 'familiar', 'decide', 'hope', 'useful', 'interest', 'prediction', 'utterances', 'classroom', 'contexts', 'employed', 'area', 'instance', 'zhao', 'developed', 'sequence', 'predictor', 'using', 'three', 'ie', 'mlp', 'cnn', 'lstm', 'donnelly', 'et', 'al', 'used', 'naive', 'bayes', 'classifier', 'weka', 'machine', 'toolbox', 'identified', 'five', 'key', 'instructional', 'segments', 'question', 'answer', 'procedures', 'directions', 'supervised', 'seatwork', 'small', 'work', 'lecture', 'audio', 'data', 'f', 'scores', 'ranging', 'suresh', 'trained', 'bilstm', 'classify', 'transcript', 'teacherstudent', 'dialogues', 'sentence', 'talk', 'moves', 'eg', 'restating', 'revoicing', 'pressing', 'reasoning', 'getting', 'students', 'relate', 'anothers', 'ideas', 'etc', 'measure', 'reference', 'pj', 'blanchard', 'n', 'samei', 'b', 'olney', 'sun', 'x', 'ward', 'kelly', 'nystran', 'dmello', 'sk', 'july', 'automatic', 'teacher', 'modeling', 'live', 'proceedings', 'conference', 'user', 'adaptation', 'personalization', 'pp', 'sumner', 'jacobs', 'j', 'foland', 'w', 'automating', 'analysis', 'feedback', 'improve', 'mathematics', 'teachers', 'discourse', 'aaai', 'artificial', 'intelligence', 'vol', 'chu', 'zhou', 'tu', 'k', 'january', 'classiers', 'international', 'grammatical', 'inference', 'programming', 'language', 'use', 'python', 'c', 'necessary', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/Jon-LaFlamme/CourseProject	"cs410 project presentation: food recipe search engine team name: f20_tis_dev_team team members: jon laflamme (captain) jml11@illinois.edu pradeep sakhamoori ps44@illinois.edu rahul sharma rahul9@illinois.edu project overview: this application is a vertical search engine for food recipes. special features include auto-complete and auto-suggestion in the search bar achieved with character and word n-grams. search results are rendered on the same page as the search bar. our system is configured with and run on elasticsearch. included with the project but not integrated with the search application is a content-based recommender system. project review roadmap special consideration: our team originally consisted of four members through the formation, proposal, development and progress report phases of the project, but one of our team members dropped this course prior to providing assigned deliverables. per the ta, we were instructed to notify our reviewers to take this development into consideration in the evaluation of our final submission, as it has necessitated some adjustments to the scope of this project. application/software functionality: this application is a food recipe search engine with a dataset of over 65,000 food recipes. word and character-based autosuggest and autocomplete are supported dynamically in the search bar. search results are dynamically displayed on the same page as the search bar, with matched query terms recommended supplementary project overview video: https://youtu.be/8mrqofwiooo installation instructions: readme.md video install guides in readme.md recommender system video demo: https://youtu.be/peuqzodsceq recommender system writeup: recommender_system.pdf search engine and project architecture: https://youtu.be/8rgrqohtluq highlighted in the title field of each recipe that is rendered in the search results. additionally, a content-based recommender system was developed and validated on the author's local machine. it is not integrated with our search application and is thus considered an 'extra' in terms of our project submission. to review the recommender module, simply watch the demo video and read the pdf. application/software implementation: software architecture: batch -> data ingestion modules; recommender module dataset -> food recipe datasets in json format es-setup -> elasticsearch configuration files search-engine-webapp -> app -> application driver and api, browser files and templates search_engine_egg.info -> application setup files user-profile -> our beta-recommender with user-profile as json authors.txt -> source code attributions readme.md -> installation instructions dockerfile.amd -> docker build script pdfs (proposal, progress report, final documentation, recommender system) description of team member contributions: all members: weekly team meetings, topic exploration, identification of datasets, learning elasticsearch and kibana, shared contributions to proposal, progress report and final submission documents. jon: administrative tasks of coordinating, authoring or editing and submitting project deliverables. assisted with troubleshooting and documenting docker installation requirements on mac. spent several hours familiarizing myself elasticsearch assisted with automation of elasticsearch data ingestion with data_loader.py. assisted with user interface development (parsing json search results, and displaying search results as hyperlink recipe titles on same page as search bar). assisted with bug fixes recommender api. generated ~1500 test queries by collecting most popular 'recipe' queries using google trends (not implemented in final submission). developed algorithm for sorting recipes search results based on complexity/difficulty (not implemented in final submission). developed content-based recommender system (included in project but not integrated with our final application.) pradeep: started with spending time brainstorming project architecture, design discussions, planning, task allocation, internal milestones and deadlines (we used microsoft teams to collaborate, drive weekly tasks and discussions). initially started with contributions to look for available open source food recipe datasets, found couple of them which are publicly available (from kaggle) and analyzing its format and its usability. we used elasticsearch (es) engine, python and flask interface for programming - initial challenge is to get the environment ready to unblock others with a base line application (by pulling initially committed skelton changes from team). then spent time containerizing the complete application. spent time understanding on launching elastic server as backend process from docker with ubuntu 16.04 environment - figuring out missing components in terms of launching web app and tunneling es web server to localhost machine web-server - debugging, fixing bug and released initial docker containerized app which was quite challenging. developed/coded basic/ initial pipeline for recommender system (contextual based) by pre- populating userprofile (static) with specific food interest and which will be used for querying from es(which is current a standalone module - which user can trigger from docker bash). spent time supporting team with guidance on fixing docker issues on mac. rest of the time spent in testing application on ubuntu. rahul: assisted with identification of dataset, set up project collaboration space on trello. built project architecture template for search application with flask. designed and authored elasticsearch index configuration and ingestion scripts. authored setup instructions and scripts for application build without docker. designed and authored user interface for search application. designed and authored autosuggest and autocorrect features with elasticsearch and flask. methodology and analysis: please see included supplementary videos and documents for a more in-depth coverage of design choices, implementation details and results analysis. cs410 project progress report: food recipe search engine team name: f20_tis_dev_team team members: jonathan laflamme(captain) jml11@illinois.edu pradeep sakhamoori ps44@illinois.edu rahul sharma rahul9@illinois.edu rohan khatu khatu2@illinois.edu project summary: our original project proposal described a vertical search engine, specializing in indian cuisine that supports both queries and a recommender system. our project scope has since narrowed due to time constraints. our current project expectation is a working search engine that supports full text search with auto-suggestion as well some advanced filtering/query options. the application is run on elasticsearch and containerized on docker to run locally with minimal installation steps. progress made thus far: * identified our food recipe dataset * developed search engine application using elasticsearch and kibana (for index file generation) * dockerizing (container) to launch elasticsearch server in the background and tunneling food recipe application to host machine on 127.0.0.1:5000 port using flask * validating and debugging container on ubuntu and macos * additional configurations and installations required for mac users to get the tunneling of webserver onto localhost * python notebook to injest data * preprocessing and inverted index configuration tested on kibana * limited autosuggest and autocomplete features are deployed * github project repo with build and deploy instructions remaining tasks: * formatting search results page (html) * organizing recipe links with single click url * displaying results on the same page as the query * improving and enhancing the autocomplete and autosuggest features * python script automating the preprocessing and inverted index generation * optional inclusion of images with search engine, if possible challenges and issues: * bug fixing in terms of adding missing python packages for deployment of automation pipeline with container * running elasticsearch in background with flask * identifying search and autosuggest algorithm (eg. n-gram, character n-gram, stemming, lemmitization) * team members learning and deploying elasticsearch and kibana toolkits. * enabling docker on ubuntu linux, specifically identifying the correct docker run options for routing docker network traffic to localhost with '--network host' option. * enabling docker on mac os, specifically since docker runs as a virtual machine on mac, additional installs and procedures are required for docker container to have access to mac host as a localhost * integrating python flask app with elasticsearch and front-end * identifying correct method for building elasticsearch index cs410 project proposal: food recipe search engine team name: f20_tis_dev_team 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team member s team members: jonathan laflamme (captain) jml11@illinois.edu pradeep sakhamoori ps44@illinois.edu rahul sharma rahul9@illinois.edu rohan khatu khatu2@illinois.edu project overview (what is the function of the tool?) : 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? what is your free topic? please give a detailed description. what is the task? our project proposal is a vertical search engine that specializes in retrieving indian cuisine food recipes in a collection aggregated from multiple sources. our goal is to support both push and pull retrieval models. we think that the specialization of this search tool is what will allow us to return more relevant documents to our users compared with existing food recipe search platforms that are broader in scope. for instance, we can build a user profile (essentially a customized background language model) with a brief initialization phase (ask the user a series of questions when they set up their profile) that should improve accuracy with each subsequent query (since we will gain a better understanding of our user's palette in the form of language modeling with user feedback/relevance judgments). we may also include sentiment analysis of recipe reviews as part of our document ranking algorithm at a later stage, but we are not yet committed to that. it will depend on available time. this project proposal is being submitted under the ""free topics"" category. why is it important or interesting? this project holds tremendous academic value for our group in the context of this course as it requires both a high level understanding information retrieval as well as many opportunities to wrestle with challenging design questions specific to our context and application, such as language modeling, feedback mechanisms, ranking functions, classification, recommender systems and evaluation techniques. in a broader sense, we think that our application should outperform more generic food recipe search engines because we will be able to tune our search results based on a narrower context. but more specifically, we think that in the context of food recipes this will be especially advantageous due to the lower amount of noise present in our user's background language model. for instance, a user who routinely searches for american, indian and italian cuisine would add a lot of misdirection to their background language model compared with a user who only ever searched for indian cuisine. our system would begin to develop a more sophisticated picture of a user's indian cuisine preferences and consequently retrieve more relevant recipes. target user (who will benefit from such a tool?) : we think this application would appeal to at-home cooks and chefs who are interested in indian cuisine. originality of tool (does this kind of tool already exist? if similar tools exist, how is your tool different from them?  would people care about the difference?) : we could not find a major food recipe search engine that specifically focuses only on indian cuisine. however, many of the most popular food recipe websites do provide search filters for querying or browsing indian cuisine. yet, as mentioned in an earlier section, we think that our limited scope of topic coverage will allow us to tune our retrieval models to a greater degree of accuracy than would be possible on a platform that supports all types of cuisine. another advantage of our tool is that it aggregates recipes in this one category across multiple sources. this adds a level of convenience and efficiency for our users who can query or browse a much larger collection of recipes from a single source that would otherwise be a tedious process working across multiple websites with different types of interfaces and retrieval models. resource utilization (what existing resources can you use? what techniques/algorithms will you use to develop the tool?) : we think that we can use the meta toolkit for many of the preprocessing tasks involved, including web scraping, tokenizing, pos tagging, indexing and ranking. the bm25f ranking algorithm is an obvious candidate for our ranking algorithm because recipes naturally translate well into structured documents (eg. list of ingredients; title; description; cook time; etc.). as alluded to earlier, our document collection will be aggregated from multiple sources. one obvious early source will be a kaggle dataset of 250,000 food recipes, but we hope to find additional recipes through other sources or from scraping food recipe websites. we hope to dynamically update our background language model in some fashion based on user feedback, but the exact formula/algorithm we will employ is still a matter under consideration. for our push recommendation system, we hope to test and compare both content and collaborative models of filtering. we will implement the better performing model for our final submission or consider implementing a combination of the two models. validation (how will you demonstrate the usefulness of your tool?) for the validation phase, we will solicit 10 volunteers to generate and run their own set of 10 queries and make explicit relevance judgments about the top 10 ranked results for each query. five of the queries will be fed to competing search engines with top ten results returned and judged by our users. ideally, this will be done at random so as to obfuscate to the user which search engine they are using at any given time. we will be using statistical methods to evaluate our search engine and compare with competing engines (using precision and recall as the primary metrics). once the queries and judgments are complete, we will feed our participant's user data into our recommendation system and send an email to each of the participants with five recipe recommendations. this email will ask for relevance judgments from each of the five recipes. we will also send another set of emails based on a collaborative model once all participants have completed their queries and associated relevance judgments. 3. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. project timeline (a very rough timeline to show when you expect to finish what.): complete proposal (by oct 25) architecture document with api level information (python) and test scenarios (by nov 1, 12 hours expected) architecture block diagram showing end2end pipeline (interface to search results representation) high level input and output data for each function block sample testcase (""queries"") and testresults (""expected"") document collection formation: tokenizing, pos tagging, indexing, etc. (by nov 1) (20 total hours expected to aggregate our document collection for indian cuisine recipes and associated review/comments ) associated preprocessing tasks (2 hours expected to tokenize, pos tag, build out the document collection, and build an inverted index ) recipe classification (by nov 20) classify recipes by cuisine style, meal type, dish type, etc. (20 hours) this process will help provide filters for advanced search functionality, and could also be integrated into our background language models. develop test queries and test/select optimal scoring function (by nov 8) develop test queries (4 hours expected ) test/select/optimize scoring function (3 hours expected ) develop user profile and feedback model (by nov 15) research, build and test/select optimal user feedback model for recommendation system (15 hours expected ) working user interface (by nov 22) locally hosted web interface/python gui with search button and results window (20 hours expected ) trial phase (nov 22-nov 29) build automated system to pull query results from competing search engines (5 hours expected) solicit volunteers for our application (4 hours expected to solicit volunteers, explain the tool and the participation requirements ) evaluate and document/model query relevance judgments (1 hour expected) evaluate push recommendation relevance judgments and adjust recommendation model (2 hours expected) progress report completed (by nov 29) final software code with documentation and software presentation (by dec 9) debug/test source code (2 hours expected) construct readme (2 hours expected) create presentation (4 hours expected) total hours expected: 116 hours total hours required: 80 hours 4. which programming language do you plan to use ? primarily python additional details and expected outcome: we expect that our tool will outperform competing search engines within our specified topic/domain of indian food recipes. food recipe search engine using elasticsearch, python and flask please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. installation guide for ubuntu and mac users as given below (make sure you are not behind any proxy/firewall to test this project) $git clone https://github.com/jon-laflamme/courseproject.git video tutorial (ubuntu): build docker image, generate index file and running food recipe search engine web app https://www.youtube.com/watch?v=fooqhptv63i docker installation follow instructions from https://docs.docker.com/get-docker/ select download based on your host machine os check if docker daemon is running on host machine (ex: output from ubuntu 16.04 host machine): $docker # docker usage: docker [options] command a self-sufficient runtime for containers options: --config string location of client config files (default ""/home/psakamoori/.docker"") -c, --context string name of the context to use to connect to the daemon (overrides docker_host env var and default context set with ""docker context use"") -d, --debug enable debug mode -h, --host list daemon socket(s) to connect to -l, --log-level string set the logging level (""debug""|""info""|""warn""|""error""|""fatal"") (default ""info"") --tls use tls; implied by --tlsverify --tlscacert string trust certs signed only by this ca (default ""/home/psakamoori/.docker/ca.pem"") --tlscert string path to tls certificate file (default ""/home/psakamoori/.docker/cert.pem"") --tlskey string path to tls key file (default ""/home/psakamoori/.docker/key.pem"") --tlsverify use tls and verify the remote -v, --version print version information and quit (linux) instruction to build docker image with elasticsearch and application after successful installation of docker, next step is to build the docker container image with elasticsearch and application command to build the docker image (makesure you are in same path as dockerfile.amd64 file) $ docker build -f dockerfile.amd64 -t food_recipe_se . [you can choose your own name instead of ""food_recipe_se""] it will take some time to build the image. once done you can check your image on host machine with below command $ docker images should see something like below repository tag image id created size food_recipe_se latest 72ab77c2a9b3 35 minutes ago 2.13gb troubleshooting ""docker build"" failure: - change folder & file access permissions of project recipes-search-engine$ chmod -r 777 * - check if docker daemon is running https://docs.docker.com/config/daemon/ ### (linux) run the docker container to trigger search engine $docker run --net=host -p 5000:5000 food_recipe_se expected output: starting elastic server * serving flask app ""app"" (lazy loading) * environment: development * debug mode: on * running on http://0.0.0.0:5000/ (press ctrl+c to quit) * restarting with stat * debugger is active! * debugger pin: 271-999-248 **imp note**: before launching search engine web app and start searching for food recipes user needs to follow below steps to generate index file (linux) launch ingest script: open a new terminal window $docker ps -a (need sudo acccess) identify and copy <container id> for food_recipe_se, then run $ docker run -it --net=host -p 5000:5000 <container image name ex: food_recipe_se used to build the docker image> bash output docker shell will look like below warning: published ports are discarded when using host network mode uiuc@node01:/app$ in the container shell run: uiuc@node01:/app$ python batch/es_data_loader.py note: if you receive connection error, retry again in 30-60 seconds expected output (may take several minutes to complete ingestion): ****load begins**** **loading now: /app/dataset/recipes_raw_nosource_ar.json * 1000 documents successfully indexed in recipes_id index. ... ... * 65000 documents successfully indexed in recipes_idx index. (linux) on your host machine open: http://0.0.0.0:5000 paste url into browser to begin testing the application (mac) ideo tutorial build docker image, run docker image, generate index file https://youtu.be/peuqzodsceq (mac) docker desktop for mac download instructions and configurations install the latest edge release from docker (v2.5.1.0 or later): https://docs.docker.com/docker-for-mac/edge-release-notes/ install jq. options: $brew install jq $port install jq or: https://stedolan.github.io/jq/download/ setup jq to work with docker socks server: $cd ~/library/group\ containers/group.com.docker/ $mv settings.json settings.json.backup $cat settings.json.backup | jq '.[""socksproxyport""]=8888' > settings.json enable socks proxy: system preferences -> network -> advanced -> proxies select the box next to 'socks proxy' ensure socks proxy server reads 'local host:8888' ensure bypass settings reads '*.local, 169.254.0.0/16, *.io' if unselected, select the box next to 'use passive ftp mode' select ""ok"" then ""apply"" note: internet access may be disabled while you running your proxy server. to restore your settings after testing the application: * deselect the box next to 'socks proxy' in your network settings * select ""ok"" and ""apply"" start docker desktop for mac application: 'commmand' + 'space' and type 'docker.app' then launch the blue whale docker icon should appear in the apple menu bar * select the icon and ensure green status: 'docker desktop is running' verify expiramental features in docker desktop for mac: docker.app -> preferences -> expiramental features * ensure all features are enabled (mac) build the docker image navigate to project directory 'recipes-search-engine' in terminal. enter command to build the docker image: $ docker build -f dockerfile.amd64 -t food_recipe_se . expected output (may take a few minutes to complete): building ... ... ... naming to docker.io/library/food_recipe_se (mac) run the docker image run the docker image: $docker run -p 5000:5000 food_recipe_se expected output: starting elastic server * serving flask app ""app"" (lazy loading) * environment: development * debug mode: on * running on http://0.0.0.0:5000/ (press ctrl+c to quit) * restarting with stat * debugger is active! * debugger pin: 544-260-012 (mac) launch ingest script: docker.app -> dashboard -> containers/apps next to the running food_recipe_se image, select ""cli"" icon. this will open a terminal window fromn inside the docker image. recommend closing unused applications to speed up ingestion in the container shell: $python /app/batch/es_data_loader.py note: if you receive connection error, retry again in 30-60 seconds expected output (may take several minutes to complete ingestion): ****load begins**** **loading now: /app/dataset/recipes_raw_nosource_ar.json * 1000 documents successfully indexed in recipes_id index. ... * 65000 documents indexed. 65125 documents successfully indexed in recipes_idx index. (mac) on your host machine open: http://0.0.0.0:5000/ paste url into browser to begin testing the application (linux/mac) exit condition: kill the (app) docker container how to kill the container: - open new command terminal - $docker ps -a (need sudo acccess) - look for docker container with name ""food_recipe_se"" copy container id) - $docker stop <container id> - $docker rm <container id> recommender system food recipe search engine this is a brief overview of the recommender system we developed for our recipe search engine. it was not integrated into the app due to time constraints and some of the difficulties of working in the containerized environment. overview we implemented a content-based recommender system for our food recipes. essentially this is a cosine similarity scheme in which unseen recipes that are closest to the recipes in the user's profile would be recommended up to the user. preprocessing steps and design choices for each recipe, the title and ingredient fields were concatenated into a single string, then preprocessed to lowercase and remove non-alphabetical characters. the rationale here is that title and ingredients would provide the best sense of the similarity between recipes and culinary preferences more generally. since the ingredients field contains a lot of noise and would also have been much more expensive in terms of compute and space overhead, this was a relatively obvious design choice for us. following concatenation of the title and ingredients field, we tokenized each word, and performed stop-word removal. the stop-words were adapted from nltk's stop word list, which covers very frequent english words. we added 32 words that we found commonly in our dataset that were obviously non-informative for distinguishing food recipes. these include words like, ""tablespoon"", ""cups"",""advertisement"", etc. the next step was forming a corpus vocabulary from the preprocessed recipe documents, where every unique word in the vocabulary was stored in an index with the associated number of documents in which each word occurs. concurrent with this step, each recipe document was converted from a list of words to an index of unique words with an associated word count for each unique word in the document. the average document length of the corpus was also computed during the vocabulary build process. the final step was performing a sub-linear transformation on the document vectors, converting the unique word counts in each document into a score for each term that captured the tf-idf weighting for each term in each document. the bm25 formula was a natural fit for this transformation. to save on compute resources, this collection preprocessing step was done once with the results written to file in json format for easy retrieval during the recommendation step. recommendation step for the recommendation step, a collection of recipe ids are provided as the user profile input as well as the number of recommendations that the user would like returned. then, the corpus is split into ""seen"" and ""unseen"" documents, where the ""seen"" documents are the list of recipes in the user profile. for each seen document, the dot product of the weighted recipe term vectors is computed for that document with each document in the unseen documents collection. the documents that return the overall k-highest scores are stored and returned as the algorithms output. test profile 'california club turkey sandwich' ""slammin' salmon"" 'molasses cookies' 'asian chicken salad' 'holiday chicken salad' 'jamaican turkey sandwich' 'perfect pumpkin pie' 'best guacamole' 'american lasagna' 'cooky cookies' test recommendations 'easiest, amazing guacamole' 'party guacamole' 'simple pumpkin pie' 'california guacamole hummus' 'baked pumpkin custard ' analysis these results are somewhat to be expected, since guacamole and avocado and pumpkin are relatively uncommon ingredients and would score quite highly, particularly in if they were short recipes. we suspect that several performance improvements could be achieved with some bm25 parameter turning, expansion of the stop-words list and perhaps even introducing smoothing into the scoring algorithm. overall, though, we were pleased to complete a working recommender that returned reasonable results. further use and testing as we did not design this recommender system to be integrated with our application, this was included as an ""extra'. if you wish to explore this module on your own, you will need to make some minor changes to the code. they are as follows: 1) you need to make copies of the datasets with the ""."" removed from each recipe id field. this is because the raw dataset we used is fed into elasticsearch with the periods removed dynamically during ingest without updating our datasets. batch -> ""es_data_loader.py"" should give you a nice template for how to complete this step. 2) update filepaths: batch -> recommend_preprocessor.py ln 27 ln 125 batch -> term_vector_rec.py ln 87 ln 115 ln 116 3) run recommend_preprocessor.py 4) use test recipes for identical output 5) for a customized output, find the recipe ids associated with your search results in the output of your docker shell window. just copy and paste the recipe ids that you want to test into the term_vector_rec.py (lines 69-78) 6) run term_vector_rec.py 7) steps 1-3 are one-time activities, repeat steps 5 and 6 to run more tests with different ids installation guide go to search-engine-webapp directory onetime setup-- begin setup flaskr virtual environment & install it. python3 -m venv venv pip install -e . download elasticsearch/kibana servers https://www.elastic.co/guide/en/elasticsearch/reference/current/install-elasticsearch.html https://www.elastic.co/guide/en/kibana/current/install.html paste elasticsearch.yml from es-setup directory to <elasticsearch-home>/conf start elasticsearch and kibana servers. fix if there're any errors. next step is launch the kibana ui and create index. this index will be used to store all documents and provide search features kibana ui- localhost:5601 go to management-> dev tools next copy the create index command from /es-setup/es-notes.txt and run from the dev tools onetime setup-- end activate virtual environment . venv/bin/activate launch webapp export flask_app=app export flask_env=development flask run fix if there are any missing libraries python -m pip install json2html todo: set application port from config file move to docker so same command works for everyone. automate entire installation process"	['cs', 'project', 'presentation', 'food', 'recipe', 'search', 'engine', 'team', 'name', 'f_tis_dev_team', 'members', 'jon', 'laflamme', 'captain', 'jmlillinoisedu', 'pradeep', 'sakhamoori', 'psillinoisedu', 'rahul', 'sharma', 'rahulillinoisedu', 'overview', 'application', 'vertical', 'recipes', 'special', 'features', 'include', 'autocomplete', 'autosuggestion', 'bar', 'achieved', 'character', 'word', 'ngrams', 'results', 'rendered', 'page', 'system', 'configured', 'run', 'elasticsearch', 'included', 'integrated', 'contentbased', 'recommender', 'review', 'roadmap', 'consideration', 'originally', 'consisted', 'four', 'formation', 'proposal', 'development', 'progress', 'report', 'phases', 'one', 'dropped', 'course', 'prior', 'providing', 'assigned', 'deliverables', 'per', 'ta', 'instructed', 'notify', 'reviewers', 'take', 'evaluation', 'final', 'submission', 'necessitated', 'adjustments', 'scope', 'applicationsoftware', 'functionality', 'dataset', 'characterbased', 'autosuggest', 'supported', 'dynamically', 'displayed', 'matched', 'query', 'terms', 'recommended', 'supplementary', 'video', 'httpsyoutubemrqofwiooo', 'installation', 'instructions', 'readmemd', 'install', 'guides', 'demo', 'httpsyoutubepeuqzodsceq', 'writeup', 'recommender_systempdf', 'architecture', 'httpsyoutubergrqohtluq', 'highlighted', 'title', 'field', 'additionally', 'developed', 'validated', 'authors', 'local', 'machine', 'thus', 'considered', 'extra', 'module', 'simply', 'watch', 'read', 'pdf', 'implementation', 'software', 'batch', 'data', 'ingestion', 'modules', 'datasets', 'json', 'format', 'essetup', 'configuration', 'files', 'searchenginewebapp', 'app', 'driver', 'api', 'browser', 'templates', 'search_engine_egginfo', 'setup', 'userprofile', 'betarecommender', 'authorstxt', 'source', 'code', 'attributions', 'dockerfileamd', 'docker', 'build', 'script', 'pdfs', 'documentation', 'description', 'member', 'contributions', 'weekly', 'meetings', 'topic', 'exploration', 'identification', 'learning', 'kibana', 'shared', 'documents', 'administrative', 'tasks', 'coordinating', 'authoring', 'editing', 'submitting', 'assisted', 'troubleshooting', 'documenting', 'requirements', 'mac', 'spent', 'several', 'hours', 'familiarizing', 'automation', 'data_loaderpy', 'user', 'interface', 'parsing', 'displaying', 'hyperlink', 'titles', 'bug', 'fixes', 'generated', 'test', 'queries', 'collecting', 'popular', 'using', 'google', 'trends', 'implemented', 'algorithm', 'sorting', 'based', 'complexitydifficulty', 'started', 'spending', 'time', 'brainstorming', 'design', 'discussions', 'planning', 'task', 'allocation', 'internal', 'milestones', 'deadlines', 'used', 'microsoft', 'teams', 'collaborate', 'drive', 'initially', 'look', 'available', 'open', 'found', 'couple', 'publicly', 'kaggle', 'analyzing', 'usability', 'es', 'python', 'flask', 'programming', 'initial', 'challenge', 'get', 'environment', 'ready', 'unblock', 'others', 'base', 'line', 'pulling', 'committed', 'skelton', 'changes', 'containerizing', 'complete', 'understanding', 'launching', 'elastic', 'server', 'backend', 'process', 'ubuntu', 'figuring', 'missing', 'components', 'web', 'tunneling', 'localhost', 'webserver', 'debugging', 'fixing', 'released', 'containerized', 'quite', 'challenging', 'developedcoded', 'basic', 'pipeline', 'contextual', 'pre', 'populating', 'static', 'specific', 'interest', 'querying', 'eswhich', 'current', 'standalone', 'trigger', 'bash', 'supporting', 'guidance', 'issues', 'rest', 'testing', 'set', 'collaboration', 'space', 'trello', 'built', 'template', 'designed', 'authored', 'index', 'scripts', 'without', 'autocorrect', 'methodology', 'analysis', 'please', 'see', 'videos', 'indepth', 'coverage', 'choices', 'details', 'jonathan', 'laflammecaptain', 'rohan', 'khatu', 'khatuillinoisedu', 'summary', 'original', 'described', 'specializing', 'indian', 'cuisine', 'supports', 'since', 'narrowed', 'due', 'constraints', 'expectation', 'working', 'full', 'text', 'well', 'advanced', 'filteringquery', 'options', 'locally', 'minimal', 'steps', 'made', 'far', 'identified', 'file', 'generation', 'dockerizing', 'container', 'launch', 'background', 'host', 'port', 'validating', 'macos', 'additional', 'configurations', 'installations', 'required', 'users', 'onto', 'notebook', 'injest', 'preprocessing', 'inverted', 'tested', 'limited', 'deployed', 'github', 'repo', 'deploy', 'remaining', 'formatting', 'html', 'organizing', 'links', 'single', 'click', 'url', 'improving', 'enhancing', 'automating', 'optional', 'inclusion', 'images', 'possible', 'challenges', 'adding', 'packages', 'deployment', 'running', 'identifying', 'eg', 'ngram', 'stemming', 'lemmitization', 'deploying', 'toolkits', 'enabling', 'linux', 'specifically', 'correct', 'routing', 'network', 'traffic', 'option', 'os', 'runs', 'virtual', 'installs', 'procedures', 'access', 'integrating', 'frontend', 'method', 'building', 'names', 'netids', 'duties', 'function', 'tool', 'free', 'give', 'detailed', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'specializes', 'retrieving', 'collection', 'aggregated', 'multiple', 'sources', 'goal', 'support', 'push', 'pull', 'retrieval', 'models', 'think', 'specialization', 'allow', 'us', 'return', 'relevant', 'compared', 'existing', 'platforms', 'broader', 'instance', 'profile', 'essentially', 'customized', 'language', 'model', 'brief', 'initialization', 'phase', 'ask', 'series', 'questions', 'improve', 'accuracy', 'subsequent', 'gain', 'better', 'palette', 'form', 'modeling', 'feedbackrelevance', 'judgments', 'may', 'also', 'sentiment', 'reviews', 'part', 'document', 'ranking', 'later', 'stage', 'yet', 'depend', 'submitted', 'topics', 'category', 'holds', 'tremendous', 'academic', 'value', 'group', 'context', 'requires', 'high', 'level', 'information', 'many', 'opportunities', 'wrestle', 'feedback', 'mechanisms', 'functions', 'classification', 'techniques', 'sense', 'outperform', 'generic', 'engines', 'able', 'tune', 'narrower', 'especially', 'advantageous', 'lower', 'amount', 'noise', 'present', 'routinely', 'searches', 'american', 'italian', 'would', 'add', 'lot', 'misdirection', 'ever', 'searched', 'begin', 'develop', 'sophisticated', 'picture', 'preferences', 'consequently', 'retrieve', 'target', 'benefit', 'appeal', 'athome', 'cooks', 'chefs', 'interested', 'originality', 'kind', 'already', 'exist', 'similar', 'different', 'people', 'care', 'difference', 'could', 'find', 'major', 'focuses', 'however', 'websites', 'provide', 'filters', 'browsing', 'mentioned', 'earlier', 'section', 'greater', 'degree', 'platform', 'types', 'another', 'advantage', 'aggregates', 'across', 'adds', 'convenience', 'efficiency', 'browse', 'much', 'larger', 'otherwise', 'tedious', 'interfaces', 'resource', 'utilization', 'resources', 'use', 'techniquesalgorithms', 'meta', 'toolkit', 'including', 'scraping', 'tokenizing', 'pos', 'tagging', 'indexing', 'bmf', 'obvious', 'candidate', 'naturally', 'translate', 'structured', 'list', 'ingredients', 'cook', 'etc', 'alluded', 'early', 'hope', 'update', 'fashion', 'exact', 'formulaalgorithm', 'employ', 'still', 'matter', 'recommendation', 'compare', 'content', 'collaborative', 'filtering', 'implement', 'performing', 'consider', 'implementing', 'combination', 'two', 'validation', 'demonstrate', 'usefulness', 'solicit', 'volunteers', 'generate', 'make', 'explicit', 'relevance', 'top', 'ranked', 'five', 'fed', 'competing', 'ten', 'returned', 'judged', 'ideally', 'done', 'random', 'obfuscate', 'given', 'statistical', 'methods', 'precision', 'recall', 'primary', 'metrics', 'feed', 'participants', 'send', 'email', 'recommendations', 'emails', 'completed', 'associated', 'justify', 'workload', 'least', 'n', 'total', 'number', 'students', 'main', 'estimated', 'cost', 'timeline', 'rough', 'show', 'expect', 'finish', 'oct', 'scenarios', 'nov', 'block', 'diagram', 'showing', 'endend', 'representation', 'input', 'output', 'sample', 'testcase', 'testresults', 'aggregate', 'reviewcomments', 'tokenize', 'tag', 'classify', 'style', 'meal', 'type', 'dish', 'help', 'testselect', 'optimal', 'scoring', 'testselectoptimize', 'research', 'hosted', 'interfacepython', 'gui', 'button', 'window', 'trial', 'automated', 'explain', 'participation', 'documentmodel', 'hour', 'adjust', 'dec', 'debugtest', 'construct', 'readme', 'create', 'plan', 'primarily', 'within', 'specified', 'topicdomain', 'fork', 'repository', 'paste', 'link', 'cmt', 'coursera', 'week', 'overviewweek', 'activities', 'guide', 'sure', 'behind', 'proxyfirewall', 'git', 'clone', 'httpsgithubcomjonlaflammecourseprojectgit', 'tutorial', 'image', 'httpswwwyoutubecomwatchvfooqhptvi', 'follow', 'httpsdocsdockercomgetdocker', 'select', 'download', 'check', 'daemon', 'ex', 'usage', 'command', 'selfsufficient', 'runtime', 'containers', 'config', 'string', 'location', 'client', 'default', 'homepsakamooridocker', 'c', 'connect', 'overrides', 'docker_host', 'env', 'var', 'debug', 'enable', 'mode', 'h', 'sockets', 'l', 'loglevel', 'logging', 'debuginfowarnerrorfatal', 'info', 'tls', 'implied', 'tlsverify', 'tlscacert', 'trust', 'certs', 'signed', 'ca', 'homepsakamooridockercapem', 'tlscert', 'path', 'certificate', 'homepsakamooridockercertpem', 'tlskey', 'key', 'homepsakamooridockerkeypem', 'verify', 'remote', 'v', 'version', 'print', 'quit', 'instruction', 'successful', 'next', 'step', 'makesure', 'f', 'food_recipe_se', 'choose', 'instead', 'something', 'like', 'id', 'created', 'size', 'latest', 'abcab', 'minutes', 'ago', 'gb', 'failure', 'change', 'folder', 'permissions', 'recipessearchengine', 'chmod', 'r', 'httpsdocsdockercomconfigdaemon', 'nethost', 'p', 'starting', 'serving', 'lazy', 'loading', 'http', 'press', 'ctrlc', 'restarting', 'stat', 'debugger', 'active', 'pin', 'imp', 'note', 'start', 'searching', 'needs', 'ingest', 'new', 'terminal', 'ps', 'need', 'sudo', 'acccess', 'identify', 'copy', 'shell', 'warning', 'published', 'ports', 'discarded', 'uiucnodeapp', 'batches_data_loaderpy', 'receive', 'connection', 'error', 'retry', 'seconds', 'load', 'begins', 'appdatasetrecipes_raw_nosource_arjson', 'successfully', 'indexed', 'recipes_id', 'recipes_idx', 'ideo', 'desktop', 'edge', 'release', 'httpsdocsdockercomdockerformacedgereleasenotes', 'jq', 'brew', 'httpsstedolangithubiojqdownload', 'socks', 'cd', 'librarygroup', 'containersgroupcomdocker', 'mv', 'settingsjson', 'settingsjsonbackup', 'cat', 'socksproxyport', 'proxy', 'proxies', 'box', 'ensure', 'reads', 'bypass', 'settings', 'io', 'unselected', 'passive', 'ftp', 'ok', 'apply', 'internet', 'disabled', 'restore', 'deselect', 'commmand', 'dockerapp', 'blue', 'whale', 'icon', 'appear', 'apple', 'menu', 'green', 'status', 'expiramental', 'enabled', 'navigate', 'directory', 'enter', 'naming', 'dockeriolibraryfood_recipe_se', 'dashboard', 'containersapps', 'cli', 'fromn', 'inside', 'recommend', 'closing', 'unused', 'applications', 'speed', 'appbatches_data_loaderpy', 'linuxmac', 'exit', 'condition', 'kill', 'stop', 'rm', 'difficulties', 'cosine', 'similarity', 'scheme', 'unseen', 'closest', 'ingredient', 'fields', 'concatenated', 'preprocessed', 'lowercase', 'remove', 'nonalphabetical', 'characters', 'rationale', 'best', 'culinary', 'generally', 'contains', 'expensive', 'compute', 'overhead', 'relatively', 'choice', 'following', 'concatenation', 'tokenized', 'performed', 'stopword', 'removal', 'stopwords', 'adapted', 'nltks', 'covers', 'frequent', 'english', 'words', 'added', 'commonly', 'obviously', 'noninformative', 'distinguishing', 'tablespoon', 'cupsadvertisement', 'forming', 'corpus', 'vocabulary', 'every', 'unique', 'stored', 'occurs', 'concurrent', 'converted', 'count', 'average', 'length', 'computed', 'sublinear', 'transformation', 'vectors', 'converting', 'counts', 'score', 'term', 'captured', 'tfidf', 'weighting', 'bm', 'formula', 'natural', 'fit', 'save', 'written', 'easy', 'ids', 'provided', 'split', 'seen', 'dot', 'product', 'weighted', 'overall', 'khighest', 'scores', 'algorithms', 'california', 'club', 'turkey', 'sandwich', 'slammin', 'salmon', 'molasses', 'cookies', 'asian', 'chicken', 'salad', 'holiday', 'jamaican', 'perfect', 'pumpkin', 'pie', 'guacamole', 'lasagna', 'cooky', 'easiest', 'amazing', 'party', 'simple', 'hummus', 'baked', 'custard', 'somewhat', 'avocado', 'uncommon', 'highly', 'particularly', 'short', 'suspect', 'performance', 'improvements', 'parameter', 'turning', 'expansion', 'perhaps', 'even', 'introducing', 'smoothing', 'though', 'pleased', 'reasonable', 'wish', 'explore', 'minor', 'follows', 'copies', 'removed', 'raw', 'periods', 'updating', 'es_data_loaderpy', 'nice', 'filepaths', 'recommend_preprocessorpy', 'ln', 'term_vector_recpy', 'identical', 'want', 'lines', 'onetime', 'repeat', 'tests', 'go', 'flaskr', 'venv', 'pip', 'e', 'elasticsearchkibana', 'servers', 'httpswwwelasticcoguideenelasticsearchreferencecurrentinstallelasticsearchhtml', 'httpswwwelasticcoguideenkibanacurrentinstallhtml', 'elasticsearchyml', 'elasticsearchhomeconf', 'fix', 'therere', 'errors', 'ui', 'store', 'management', 'dev', 'essetupesnotestxt', 'end', 'activate', 'venvbinactivate', 'webapp', 'export', 'flask_appapp', 'flask_envdevelopment', 'libraries', 'jsonhtml', 'todo', 'move', 'works', 'everyone', 'automate', 'entire']
https://github.com/Junting98/CourseProject	1. done data preprocessing and have implemented cnn and bidirectional lstm. cannot beat the baseline but have come pretty close. the general pipeline of the classification model is completed. might need some fine-tuning. 2. beat the benchmark result, submit the code with documentation, and prepare for the presentation. 3. mainly have concerns with data processing. not sure what kind of words to filter and what preprocessing will have the best result. 1 captain: junting wang(junting3) member: tianwei zhang(tianwei4) 2 text classification competition 3 we are prepared to learn state-of-the-art neural network classifiers. i know pytorch and tensorflow. i have completed several research projects using pytorch and tensorflow. 4 i plan to use python documentation in the following, we will describe how the text classification model is build and its major components. project overview in this project, our team is doing the text classification competition. the specific task is sarcasm detection, given a specific twitter response, we are trying to tell if the response is sarcasm. each data point in the given dataset consist of the response tweet and also the context of the response. the goal of this project is to develop a robust model that can perform well in telling whether the given twitter response is sarcasm or not. demo link https://mediaspace.illinois.edu/media/1_pa3h5d8y classification model we have experimented with many different models. in the end, we reached the competition benchmark score by fine-tuning a pre-trained bert, distilled bert in specific. data preprocessing for data cleaning, we remove punctuations and any other special characters in the twitter response. also, we expand abbreviations such as can't and won't into can not and will not respectively. we also remove the heading of each response. after cleaning the data, we use a pre-trained distilberttokenizer to tokenize the cleaned response data. then, the tokenized responses are used as the input to our model. model architecture the general idea of our model is to fine-tune the pre-trained distilled bert for text classification. we achieved this by adding two extra fully connected linear layers to the bert output and fixing the parameters for the bert model. the general pipeline of the model is that given tokenized responses as input, we first put the inputs to the distilled bert base model to get high-dimensional representations of the responses. then the response representations are input to the two linear layers to get the final prediction of whether the response is sarcasm. between the linear layers, we used relu as activation. we also applied dropout to both the output of the base model and the output of the linear layers. model training given raw twitter response, we first preprocessing it following the data preprocessing steps to get tokenized responses. then, the tokenized responses are used as the input to the bert base model, which will give high-dimensional representations of the responses. then, those representations are put into several linear layers to generate the final prediction. the loss function we use is a nll loss. after getting the training prediction, together with the ground truth labels that indicate whether the response is sarcasm or not, we put them to the nllloss and performs back propagation on the computed loss. evaluation during training, we split the train dataset into two subset, one for actual training, one for validation. the percentage of the validation set is 20% of the data point in the original training dataset. in each epoch, we evaluate the f1 score of the model on the validation set save the model having the best f1 score. for the actual prediction task on the test set, we use the saved model during training for the actual prediction. previous attempts we have come a long way to the model we have right now. we first thought of models based on cnn and rnn. but after actually implemented them, those models did not give results good enough to beat the competition benchmark. apart from distilled bert, we have also experimented with the full bert, which gives decent result, but it tends to overfit and takes a lot more time to run. we have also tried to vary the number of linear layers and the dimension of those layers used to fine-tune the model, we have tried to add 3 or 4 linear layers and many other different combinations of dimension, but we finalized to 2 linear layers, which are of size(768, 256) and (256, 2). in terms of different activation function, we have tried tanh, prelu, and leakyrelu. though they all give very similar results, we choose relu in the end. we have also experimented the dropout ratio in the range [0, 0.5]. we observed that with 0.5 dropout, the model reaches best performance on the test set. we also tried to tune the learning rate in the range[0.00001, 0.01]. for data preprocessing, we found that removing stopwords and stemming the words has negatively affected the performance of our model. expanding abbreviations seems to have improve the performance of the model by reducing overfitting. removing punctuations and special characters generally gives cleaner data for the tokenizer. therefore, it helps both with the model training and model testing. dependencies python json pytorch skit-learn transformers to install dependencies, you can use the included environment.ysml in the code directory to create a virtual environment with anaconda. installation reference can be found here. a detailed tutorial is also included in the demo. contributions junting wang: team leader. implemented the model and written up the code documentation. tianwei zhang: helped with experiments, model testing and project demo.	['done', 'data', 'preprocessing', 'implemented', 'cnn', 'bidirectional', 'lstm', 'cannot', 'beat', 'baseline', 'come', 'pretty', 'close', 'general', 'pipeline', 'classification', 'model', 'completed', 'might', 'need', 'finetuning', 'benchmark', 'result', 'submit', 'code', 'documentation', 'prepare', 'presentation', 'mainly', 'concerns', 'processing', 'sure', 'kind', 'words', 'filter', 'best', 'captain', 'junting', 'wangjunting', 'member', 'tianwei', 'zhangtianwei', 'text', 'competition', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'know', 'pytorch', 'tensorflow', 'several', 'research', 'projects', 'using', 'plan', 'use', 'python', 'following', 'describe', 'build', 'major', 'components', 'project', 'overview', 'team', 'specific', 'task', 'sarcasm', 'detection', 'given', 'twitter', 'response', 'trying', 'tell', 'point', 'dataset', 'consist', 'tweet', 'also', 'context', 'goal', 'develop', 'robust', 'perform', 'well', 'telling', 'whether', 'demo', 'link', 'httpsmediaspaceillinoisedumedia_pahdy', 'experimented', 'many', 'different', 'models', 'end', 'reached', 'score', 'pretrained', 'bert', 'distilled', 'cleaning', 'remove', 'punctuations', 'special', 'characters', 'expand', 'abbreviations', 'cant', 'wont', 'respectively', 'heading', 'distilberttokenizer', 'tokenize', 'cleaned', 'tokenized', 'responses', 'used', 'input', 'architecture', 'idea', 'finetune', 'achieved', 'adding', 'two', 'extra', 'fully', 'connected', 'linear', 'layers', 'output', 'fixing', 'parameters', 'first', 'put', 'inputs', 'base', 'get', 'highdimensional', 'representations', 'final', 'prediction', 'relu', 'activation', 'applied', 'dropout', 'training', 'raw', 'steps', 'give', 'generate', 'loss', 'function', 'nll', 'getting', 'together', 'ground', 'truth', 'labels', 'indicate', 'nllloss', 'performs', 'back', 'propagation', 'computed', 'evaluation', 'split', 'train', 'subset', 'one', 'actual', 'validation', 'percentage', 'set', 'original', 'epoch', 'evaluate', 'f', 'save', 'test', 'saved', 'previous', 'attempts', 'long', 'way', 'right', 'thought', 'based', 'rnn', 'actually', 'results', 'good', 'enough', 'apart', 'full', 'gives', 'decent', 'tends', 'overfit', 'takes', 'lot', 'time', 'run', 'tried', 'vary', 'number', 'dimension', 'add', 'combinations', 'finalized', 'size', 'terms', 'tanh', 'prelu', 'leakyrelu', 'though', 'similar', 'choose', 'ratio', 'range', 'observed', 'reaches', 'performance', 'tune', 'learning', 'rate', 'found', 'removing', 'stopwords', 'stemming', 'negatively', 'affected', 'expanding', 'seems', 'improve', 'reducing', 'overfitting', 'generally', 'cleaner', 'tokenizer', 'therefore', 'helps', 'testing', 'dependencies', 'json', 'skitlearn', 'transformers', 'install', 'included', 'environmentysml', 'directory', 'create', 'virtual', 'environment', 'anaconda', 'installation', 'reference', 'detailed', 'tutorial', 'contributions', 'wang', 'leader', 'written', 'zhang', 'helped', 'experiments']
https://github.com/LeoGJC/Movie-Sentiment-Analysis-Engine	"project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. matthew walowski mlw6@illinois.edu captain zoheb satta satta2@illinois.edu jiacheng guo jg17@illinois.edu 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic (free topic): our application will have the user rank a set of movies/tv shows in their preferred order (favorite to least favorite). we will then use sentiment analysis on publicly available review data for the provided movies/tv shows to predict how the average person would rank these movies. from this, we can inform the user how unique their movie tastes are. i.e. we can tell the user if they ranked the movies similarly to the public. interest: making an analysis of the sentiment of these movie reviews could help people know the general category of these movies in advance. it will help people to judge if they would like to watch this movie and choose their own favorite movie. approach\tools: we will utilize the movie database api(https://developers.themoviedb.org/) to get review information about each of the movies. to perform sentiment analysis we will use an existing python library (ntlk https://www.nltk.org/howto/sentiment.html). we will experiment with different modes of feedback for the user (how do we express the similarity between their ranking and the general ranking). 3. which programming language do you plan to use? python backend to do all the data processing, javascript/html (react or angular) for frontend. 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. workload: scraping api data - 10 hours - learn specifics about api usage - get movie id from movie title - get reviews from movie id - download and parse movie reviews sentiment analysis - 15 hours - given a list of reviews, perform sentiment analysis on all - aggregate results - output ranking of movies similarity measure - 10 hours - take a list of user rankings and list of generated rankings - output a numerical representation of similarity - this requires a bit of experimenting so it will take extra time, we test multiple techniques to find a suitable solution: - ex: try map, gmap, simple difference, vsm,... web interface - 30 hours - build a web interface to interface with the user - problems to solve: - how to make it intuitive for users? - how to communicate between python backend and javascript frontend total hours: 65 hours overview we are creating a web app that allows users to rank their favorite movies. we will then do sentiment analysis on reviews of those movies to show the user how similar their ranking is to how the general public would rank those movies. there are 4 components to this project * frontend * backend rest endpoints * review scraping * sentiment analysis frontend the frontend is finished. it's also been integrated with a mock endpoint until we create the real endpoint. see image below for screenshot of frontend. backend rest endpoints the web frontend will do the sentiment analysis by sending the user data to the backend which will run our python scripts. right now, the frontend is communicating with a backend endpoint that returns fake data. we just need to drop in the real script once it's done. review scraping the scraping of data was done using beautifulsoup and python requests. we scrape the metacritic website for user reviews as well as critic reviews then combine them into one single array containing all the arrays as strings. sentiment analysis sentiment analysis (also known as opinion mining is a text analysis technique that detects polarity (e.g. a positive or negative opinion) within text, whether a whole document, paragraph, sentence, or clause. understanding people's emotions is essential for businesses since customers express their thoughts and feelings more openly than ever before. in sentiment analysis, we use some packages like nltk.classify, nltk.corpus, nltk.sentiment, nltk.sentiment.util. each document is represented by a tuple (sentence, label). the sentence is tokenized, so it is represented by a list of strings, like the following example (['smart', 'and', 'alert', ',', 'thirteen', 'conversations', 'about', 'one', 'thing', 'is', 'a', 'small', 'gem', '.'], 'subj'). we separately split subjective and objective instances to keep a balanced uniform class distribution in both train and test sets like the following train_subj_docs = subj_docs[:80]; test_subj_docs = subj_docs[80:100]. then, we use simple unigram word features, handling negation: sentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats) and apply features to obtain a feature-value representation of our datasets: training_set = sentim_analyzer.apply_features(training_docs); test_set = sentim_analyzer.apply_features(testing_docs). we can now train our classifier on the training set, and subsequently output the evaluation results, which is shown as the follows: accuracy: 0.8, f-measure [obj]: 0.8, f-measure [subj]: 0.8, precision [obj]: 0.8, precision [subj]: 0.8, recall [obj]: 0.8, recall [subj]: 0.8 challenges the biggest challenge is to familiar myself with the nltk library during our sentiment analysis. the other challenge is due to the lack of api, i have to create a function that will translate the input movie title, into a url-appropriate title. for example: ""the matrix"" -> ""the-matrix"" future steps * we need to decide how we want to display the result to users * there may be some small changes to the frontend for showing results overview we are creating a web app that allows users to rank their favorite movies. we will then do sentiment analysis on reviews of those movies to show the user how similar their ranking is to how the general public would rank those movies. there are 4 components to this project - frontend - backend rest endpoints - review scraping - sentiment analysis frontend the frontend is finished. it's also been integrated with a mock endpoint until we create the real endpoint. see image below for screenshot of frontend. backend rest endpoints the web frontend will do the sentiment analysis by sending the user data to the backend which will run our python scripts. right now, the frontend is communicating with a backend endpoint that returns fake data. we just need to drop in the real script once it's done. review scraping the scraping of data was done using beautifulsoup and python requests. we scrape the metacritic website for user reviews as well as critic reviews then combine them into one single array containing all the arrays as strings. sentiment analysis sentiment analysis (also known as opinion mining is a text analysis technique that detects polarity (e.g. a positive or negative opinion) within text, whether a whole document, paragraph, sentence, or clause. understanding people's emotions is essential for businesses since customers express their thoughts and feelings more openly than ever before. in sentiment analysis, we use some packages like nltk.classify, nltk.corpus, nltk.sentiment, nltk.sentiment.util. each document is represented by a tuple (sentence, label). the sentence is tokenized, so it is represented by a list of strings, like the following example (['smart', 'and', 'alert', ',', 'thirteen', 'conversations', 'about', 'one', 'thing', 'is', 'a', 'small', 'gem', '.'], 'subj'). we separately split subjective and objective instances to keep a balanced uniform class distribution in both train and test sets like the following train_subj_docs = subj_docs[:80]; test_subj_docs = subj_docs[80:100]. then, we use simple unigram word features, handling negation: sentim_analyzer.add_feat_extractor(extract_unigram_feats, unigrams=unigram_feats) and apply features to obtain a feature-value representation of our datasets: training_set = sentim_analyzer.apply_features(training_docs); test_set = sentim_analyzer.apply_features(testing_docs). we can now train our classifier on the training set, and subsequently output the evaluation results, which is shown as the follows: accuracy: 0.8, f-measure [obj]: 0.8, f-measure [subj]: 0.8, precision [obj]: 0.8, precision [subj]: 0.8, recall [obj]: 0.8, recall [subj]: 0.8 challenges the biggest challenge is to familiar myself with the nltk library during our sentiment analysis. the other challenge is due to the lack of api, i have to create a function that will translate the input movie title, into a url-appropriate title. for example: ""the matrix"" -> ""the-matrix"" future steps we need to decide how we want to display the result to users there may be some small changes to the frontend for showing results project overview technologies backend use python 3.7 for all of backend (scraping data, sentiment analysis, similarity measure). flask for the backend. frontend nodejs 14.15.0 with reactjs for the frontend yarn for package manager scraping api data - 10 hours (zoheb) learn specifics about api usage get movie id from movie title get reviews from movie id download and parse movie reviews data from https://developers.themoviedb.org/ sentiment analysis - 15 hours (leo) given a list of reviews, perform sentiment analysis on all aggregate results output ranking of movies analyzer from https://www.nltk.org/howto/sentiment.html similarity measure - 10 hours (zoheb) take a list of user rankings and list of generated rankings output a numerical representation of similarity this requires a bit of experimenting so it will take extra time, we test multiple techniques to find a suitable solution: ex: try map, gmap, simple difference, vsm,... web interface - 30 hours (matthew) build a web interface to interface with the user problems to solve: how to make it intuitive for users? how to communicate between python backend and javascript frontend timeline nov 29 - progress report dec 1 - goal finish date (for code) dec 13 - project due courseproject overview of the project this repository consists of two applications -- a web frontend and a python backend. given a list of movies from the user on the frontend, it will be sent to the backend for processing. the backend will scrape reviews of the movies, do sentiment analysis, and compose a ranking of the movies based on this analysis. then the user can compare their ranking of movies with the sentiment analyzer's rankings. presentation see the presentation here! if you have any issues or want a live demo, email mlw6@illinois.edu member contributions see the proposal.md file in the root of the repository for a breakdown of what each member contributed. implementation details about how the software work and its implementation can be found in proposal.md and progress_update.md running the project prereqs must have the following software installed: * python 3.7 * pip 3 * nodejs 14.15.0 * flask (see below) * yarn (see below) installing flask and yarn from anywhere in your command line, to install flask (and other dependencies), run pip install flask pip install flask_cors pip install requests pip install bs4 pip install html5lib pip install nltk and to install yarn, run npm install -g yarn running the backend navigate to the backend/ directory and run the following command: flask run this will start the backend on port 5000 running the frontend navigate to the frontend/ directory and run the following two commands in order: yarn yarn start this will start the frontend on port 3000."	['project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'matthew', 'walowski', 'mlwillinoisedu', 'zoheb', 'satta', 'sattaillinoisedu', 'jiacheng', 'guo', 'jgillinoisedu', 'free', 'topic', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'application', 'user', 'rank', 'set', 'moviestv', 'shows', 'preferred', 'order', 'favorite', 'least', 'use', 'sentiment', 'analysis', 'publicly', 'available', 'review', 'data', 'provided', 'predict', 'average', 'person', 'would', 'movies', 'inform', 'unique', 'movie', 'tastes', 'ie', 'tell', 'ranked', 'similarly', 'public', 'interest', 'making', 'reviews', 'could', 'help', 'people', 'know', 'general', 'category', 'advance', 'judge', 'like', 'watch', 'choose', 'approachtools', 'utilize', 'database', 'apihttpsdevelopersthemoviedborg', 'get', 'information', 'perform', 'existing', 'python', 'library', 'ntlk', 'httpswwwnltkorghowtosentimenthtml', 'experiment', 'different', 'modes', 'feedback', 'express', 'similarity', 'ranking', 'programming', 'language', 'plan', 'backend', 'processing', 'javascripthtml', 'react', 'angular', 'frontend', 'justify', 'workload', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'tasks', 'completed', 'estimated', 'time', 'cost', 'scraping', 'api', 'learn', 'specifics', 'usage', 'id', 'title', 'download', 'parse', 'given', 'aggregate', 'results', 'output', 'measure', 'take', 'rankings', 'generated', 'numerical', 'representation', 'requires', 'bit', 'experimenting', 'extra', 'test', 'multiple', 'techniques', 'find', 'suitable', 'solution', 'ex', 'try', 'map', 'gmap', 'simple', 'difference', 'vsm', 'web', 'interface', 'build', 'problems', 'solve', 'make', 'intuitive', 'users', 'communicate', 'javascript', 'overview', 'creating', 'app', 'allows', 'show', 'similar', 'components', 'rest', 'endpoints', 'finished', 'also', 'integrated', 'mock', 'endpoint', 'create', 'real', 'see', 'image', 'screenshot', 'sending', 'run', 'scripts', 'right', 'communicating', 'returns', 'fake', 'need', 'drop', 'script', 'done', 'using', 'beautifulsoup', 'requests', 'scrape', 'metacritic', 'website', 'well', 'critic', 'combine', 'one', 'single', 'array', 'containing', 'arrays', 'strings', 'known', 'opinion', 'mining', 'text', 'technique', 'detects', 'polarity', 'eg', 'positive', 'negative', 'within', 'whether', 'whole', 'document', 'paragraph', 'sentence', 'clause', 'understanding', 'peoples', 'emotions', 'essential', 'businesses', 'since', 'customers', 'thoughts', 'feelings', 'openly', 'ever', 'packages', 'nltkclassify', 'nltkcorpus', 'nltksentiment', 'nltksentimentutil', 'represented', 'tuple', 'label', 'tokenized', 'following', 'example', 'smart', 'alert', 'thirteen', 'conversations', 'thing', 'small', 'gem', 'subj', 'separately', 'split', 'subjective', 'objective', 'instances', 'keep', 'balanced', 'uniform', 'class', 'distribution', 'train', 'sets', 'train_subj_docs', 'subj_docs', 'test_subj_docs', 'unigram', 'word', 'features', 'handling', 'negation', 'sentim_analyzeradd_feat_extractorextract_unigram_feats', 'unigramsunigram_feats', 'apply', 'obtain', 'featurevalue', 'training_set', 'sentim_analyzerapply_featurestraining_docs', 'test_set', 'sentim_analyzerapply_featurestesting_docs', 'classifier', 'training', 'subsequently', 'evaluation', 'shown', 'follows', 'accuracy', 'fmeasure', 'obj', 'precision', 'recall', 'challenges', 'biggest', 'challenge', 'familiar', 'nltk', 'due', 'lack', 'function', 'translate', 'input', 'urlappropriate', 'matrix', 'thematrix', 'future', 'steps', 'decide', 'want', 'display', 'result', 'changes', 'showing', 'technologies', 'flask', 'nodejs', 'reactjs', 'yarn', 'package', 'manager', 'httpsdevelopersthemoviedborg', 'leo', 'analyzer', 'timeline', 'nov', 'progress', 'report', 'dec', 'goal', 'finish', 'date', 'code', 'courseproject', 'repository', 'consists', 'two', 'applications', 'sent', 'compose', 'based', 'compare', 'analyzers', 'presentation', 'issues', 'live', 'demo', 'email', 'member', 'contributions', 'proposalmd', 'file', 'root', 'breakdown', 'contributed', 'implementation', 'details', 'software', 'found', 'progress_updatemd', 'running', 'prereqs', 'must', 'installed', 'pip', 'installing', 'anywhere', 'command', 'line', 'install', 'dependencies', 'flask_cors', 'bs', 'htmllib', 'npm', 'g', 'navigate', 'directory', 'start', 'port', 'commands']
https://github.com/LifeBringer/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/Ludy11xc/CS-410-CourseProject	"cs 410 progress report 11/29/20 ludy2 topic: reproducing a paper- mining causal topics in text data: iterative topic modeling with time series feedback progress made: all progress thus far has been related to planning and researching. collection of data from ny times articles for evaluating the proposed algorithm has been completed. i have also done some research and thinking on how i will go about implementing the proposed algorithms (plsa implemented based on the lemur information retrieval toolkit) to run on the data. remaining tasks: implement the proposed algorithms in python, run code on dataset with and without guidance from the time series, as well as with tweaked parameters (number of topics and strength of the prior), evaluate and analyze results and compare with results from the published paper. to do the data analysis, i will evaluate performance using grainger tests. i will then be able to determine if i have successfully reproduced the results found in the paper, that ""itmtf finds topics that are both more pure and more highly correlated with the external time series than typical topic modeling, especially with a strong feedback loop."" adam ludy ludy2 cs 410 project proposal reproducing a paper: causal topic modeling 1. i am working as an individual. my name is adam ludy, my netid is ludy2. 2. i chose the paper about casual topic modeling. mining causal topics in text data. 3. i plan on using python. 4. i believe i will be able to obtain the dataset used in the paper. i can access the ny times articles from 2000 from these links: https://spiderbites.nytimes.com/2000/, https://spiderbites.nytimes.com/2001/ 5. n/a 6. n/a cs-410-courseproject presentation https://mediaspace.illinois.edu/media/1_8aiq79tk objective reproducing results from a paper: ""mining causal topics in text data: iterative topic modeling with time series feedback"" problems data: the first problem encountered was obtaining the data in order used to produce the results. unfortunately, i missed the piazza post to request access to the ny times dataset. so, i wrote a webscraper (data_scraper.py) to scrape articles from ny times, which i was able to save in the data folder. i only saved results which contained ""bush"" or ""gore"" so it was a manageable size to be uploaded. for the market data, i manually copied the data into a csv. scope: the second problem encountered was the scope of the problem. after reading through the paper and doing a couple of hours of research, i discovered this would be a very complex result to produce, especially working as an individual, and factoring in my own gaps of knowledge involving the algorithm to be implemented. i was unable to completely recreate the algorithm using time stamp series feedback. results i used an lda model to find the top 3 words from topics discovered from the relevant documents. these are the results. | top 3 words in significant topics | | ---------- | | party nader vote | | tax plan social | | oil price juniper | | street music sunday | | company court death | | debate right candidate | | city game old | | clinton cheney know | | school test student | | clinton lazio mr_clinton | looking at these words, we can definitely see some topics that were very relevant to the presidential election. many of these words were also mined from the algorithm used in the paper. setup/run code * if desired, set up virtual env. then, to set up the code: * ``` clone repo, could take a couple seconds-minutes depending on download speed because of data (20-30 mb) git clone https://github.com/ludy11xc/cs-410-courseproject.git navigate into repo cd cs-410-courseproject install dependencies. if environmenterror is encountered, rerun with --user pip install -r requirements.txt ``` if you would like to run the websraper, you can with python data_scrapper.py however, know that it will most likely take multiple hours to complete, and the data has already been scraped and is present in the data folder. then to run the code, ``` run this to get results from current model python lda.py or, run this to train a new model and get new results python lda.py train ```"	['cs', 'progress', 'report', 'ludy', 'topic', 'reproducing', 'paper', 'mining', 'causal', 'topics', 'text', 'data', 'iterative', 'modeling', 'time', 'series', 'feedback', 'made', 'thus', 'far', 'related', 'planning', 'researching', 'collection', 'ny', 'times', 'articles', 'evaluating', 'proposed', 'algorithm', 'completed', 'also', 'done', 'research', 'thinking', 'go', 'implementing', 'algorithms', 'plsa', 'implemented', 'based', 'lemur', 'information', 'retrieval', 'toolkit', 'run', 'remaining', 'tasks', 'implement', 'python', 'code', 'dataset', 'without', 'guidance', 'well', 'tweaked', 'parameters', 'number', 'strength', 'prior', 'evaluate', 'analyze', 'results', 'compare', 'published', 'analysis', 'performance', 'using', 'grainger', 'tests', 'able', 'determine', 'successfully', 'reproduced', 'found', 'itmtf', 'finds', 'pure', 'highly', 'correlated', 'external', 'typical', 'especially', 'strong', 'loop', 'adam', 'project', 'proposal', 'working', 'individual', 'name', 'netid', 'chose', 'casual', 'plan', 'believe', 'obtain', 'used', 'access', 'links', 'httpsspiderbitesnytimescom', 'na', 'cscourseproject', 'presentation', 'httpsmediaspaceillinoisedumedia_aiqtk', 'objective', 'problems', 'first', 'problem', 'encountered', 'obtaining', 'order', 'produce', 'unfortunately', 'missed', 'piazza', 'post', 'request', 'wrote', 'webscraper', 'data_scraperpy', 'scrape', 'save', 'folder', 'saved', 'contained', 'bush', 'gore', 'manageable', 'size', 'uploaded', 'market', 'manually', 'copied', 'csv', 'scope', 'second', 'reading', 'couple', 'hours', 'discovered', 'would', 'complex', 'result', 'factoring', 'gaps', 'knowledge', 'involving', 'unable', 'completely', 'recreate', 'stamp', 'lda', 'model', 'find', 'top', 'words', 'relevant', 'documents', 'significant', 'party', 'nader', 'vote', 'tax', 'social', 'oil', 'price', 'juniper', 'street', 'music', 'sunday', 'company', 'court', 'death', 'debate', 'right', 'candidate', 'city', 'game', 'old', 'clinton', 'cheney', 'know', 'school', 'test', 'student', 'lazio', 'mr_clinton', 'looking', 'definitely', 'see', 'presidential', 'election', 'many', 'mined', 'setuprun', 'desired', 'set', 'virtual', 'env', 'clone', 'repo', 'could', 'take', 'secondsminutes', 'depending', 'download', 'speed', 'mb', 'git', 'httpsgithubcomludyxccscourseprojectgit', 'navigate', 'cd', 'install', 'dependencies', 'environmenterror', 'rerun', 'user', 'pip', 'r', 'requirementstxt', 'like', 'websraper', 'data_scrapperpy', 'however', 'likely', 'multiple', 'complete', 'already', 'scraped', 'present', 'get', 'current', 'ldapy', 'train', 'new']
https://github.com/MLwithSandy/CourseProject	"project topic: stock recommender system [ ] [ ] [ ] [ ] [ ] [ team members background proposal market research high-level system design project ] [ ] timeline faqs team members name netid email id ezra schroeder ezras2 ezras2@illinois.edu rasbihari pal pal9 pal9@illinois.edu sandeep kumar kumar64 kumar64@illinois.edu team captain marked in bold. background in the year 2020, there has been huge surge in securities trading, driven by retail investors. the increase in the trading activity can be attributed primarily to the easy-to-use mobile based trading apps, offered by several fintech companies such as etoro, robinhood and interactivebrokers etc. the retail investor of today might lack time for in-depth research and/or even lack the necessary knowledge to analyze the financial standing of a company. in such a situation, many of the retail investors either rely on word of mouth or blindly following other investors on such trading platforms. this leads to investment decisions beyond the risk profile and/or risk appetite of the investors. proposal we would like to propose a solution ""stock recommender system"" to enable retail investors easy access to information, relevant for informed investment decisions. based on user's preference of a stock, the stock recommender proposes a cumulated rating for the stock and also proposes other stocks with similar ratings. the recommender system combines stock rating data from various market analyst, market sentiments and company profile for determination of the cumulated rating and curation of the recommendation list. market research for the viability of the stock recommender system, we researched features offered by existing tools (freely available tools) such as yahoo finance, etoro platform etc. each of these tools offers all the information, required for decision making, in isolation and relies on the users to combine them for their investment decisions. as an example, above screenshots shows a recommender from yahoo finance which cumulates ratings from various market analysts but does not include current market sentiments and does not recommend similar stocks. based on our analysis, we have not come across any product which provides sentiment weighted cumulated stock rating and recommendation for similar stocks which can be used by retail investors for faster and informed decision making. high-level system design there might be several possible approaches to solve the problem - to allow easy access to information for informed investment decision, we would like to propose following solution design, based on our learnings from the uiuc course ""cs 410 - text information system"". the solution design leverages following aspects of the cs410 course to build the stock recommender system. scraping of webpages for relevant information and collating the data sentiment analysis based on user texts recommender system based on content similarity project timeline the implementation of the project is planned in seven phases. first phase is focused on project planning and task distribution. subsequent four phases are aimed to development of major software components such as ratings system, sentiment analysis etc. the last two phase focuses on ui and documentation which will be executed in parallel to component development. faqs what is the function of the tool? the stock recommender system helps customers, who would like to invest in equity market, to identify best value stock for investment based on consolidated rating of various market analyst, who rates the stock after in-depth research, and based on current market sentiment, judged via twitter feeds. who will benefit from such a tool? retail investors, financial institution etc. does this kind of tools already exist? if similar tools exist, how is your tool different from them? would people care about the difference? based on our research, there are various tools in the market offering various features such as cumulated ratings. however, we have not come across any product which provides sentiment weighted average stock ratings and recommendation for similar stocks which can be used by retail investors for faster and informed decision making. what existing resources that we use? sourcing of market analysts ratings by web scraping (e.g. python beautiful soup, etc.): stock target advisor https://www.stocktargetadvisor.com/ market beat https://www.marketbeat.com/ market sentiments twitter feeds we intend to use the twitter dev api https://developer.twitter.com/en to ingest tweets for related companies to analyze user sentiments. this will help us create a sentiment index to obtain a positive / negative pulse on a given stock ticker symbol (e.g. aapl) based on public opinion of users interested in a given stock. what techniques/algorithms will you use to develop the tool? refer to proposal and high-level system design to understand the approach we are planning to use for development of the tool. how will you demonstrate the usefulness of your tool? as part of this exercise, we may take feedback from our class about the usefulness of the tool and any improvement recommendation. a very rough timeline to show when you expect to finish what. refer to project timeline for details project report stock recommender system cs 410: text information system university of illinois, urbana-champaign team members name netid email id ezra schroeder ezras2 ezras2@illinois.edu rasbihari pal pal9 pal9@illinois.edu sandeep kumar kumar64 kumar64@illinois.edu team captain marked in bold. [ team members ] [ project overview ] [ abstract ] [ motivation ] [ introduction ] [ high level design ] [ component view (deployment perspective) ] [ sre front-end (ui) ] [ sre back-end (rest api) ] [ implementation details ] [ rating system ] [ sentiment analysis ] [ recommender system ] [ libraries and datasets ] [ verification ] [ conclusion and future work ] [ references ] project overview abstract our project is a novel text-mining application which combines 3 different functionalities around rating stocks into one application. namely, it consists of a base analysis which is a two-tiered summary of sentiment of stock analyst ratings who are well known in the industry and rate stock ticker symbols, a twitter sentiment analysis aspect which scrapes tweets off of twitter and analyzes them for sentiment about a particular stock symbol, and a recommendation engine which recommends stock symbols similar to a user-provided query stock symbol. there are many conceivable use-cases for an app such as ours upon further embellishment and improvements, such as individual investors in the stock market who want automated and instantaneous advice and suggestions that incorporates both analyst ratings from well-known analysts across the internet, public sentiment as embodied by tweets, and that produces not only concise summaries of these analyst ratings and twitter sentiment but recommends similar stocks to their stock symbol (e.g. aapl) of interest. imaginably there may well also be corporate interest in incorporating an application such as ours into a larger pipeline which could be serving a huge myriad of purposes but that leverages actionable knowledge about the stock market into a larger purpose. although our application is alpha version, it is not inconceivable that it could springboard academic research into these areas. motivation in the year 2020, there has been huge surge in securities trading, driven by retail investors. the increase in the trading activity can be attributed primarily to the easy-to-use mobile based trading apps, offered by several fintech companies such as etoro, robinhood and interactivebrokers etc. the retail investors of today might lack time for in-depth research and/or even lack the necessary knowledge to analyze the financial standing of a company. in such a situation, many of the retail investors either rely on word of mouth or blindly following other investors on such trading platforms. this leads to investment decisions beyond the risk profile and/or risk appetite of the investors. introduction we propose ""stock recommender system"" as a solution to enable retail investors easy access to information, relevant for informed investment decisions. based on user's preference of a stock, the stock recommender proposes a cumulated rating for the stock and also proposes other stocks with similar ratings. the recommender system combines stock rating data from various market analyst, market sentiments and company profile for determination of the cumulated rating and curation of the recommendation list. high level design component view (deployment perspective) stock recommendation system consists of two components - sre front-end and sre back-end. the sre front-end is the ui component for user interaction, developed using angular. the front-end relies on sre back-end for all its data needs for providing various user centric functions. the sre back-end is the main component, which implements all the necessary algorithm and business rules and finally exposes the data related to ratings, recommendations and tweets via rest apis. sre front-end (ui) the sre front-end is developed in angular framework and is a single page application. it consists of the following components: a. app-container the main component to render the stock recommendation system web page b. app-navbar the component responsible for top navigation bar c. app-routing the component dealing with url based routing and takes care of routing to the home page or canonical ""page-not-found"" page. d. home.component this is the main component which takes user input, calls sre backend services to fetch relevant data. e. p404.component this is the component for handling ""page not found"" scenario in case user enters incorrect url not supported by sre front-end. sre back-end (rest api) the sre back-end is a flask based app, developed using python and tinydb which exposes various rest apis for the sre front-end. list of rest apis: rest api sample response get list of all stocks in the corpus (output abridged for succinctness) get /stock/all [ { ""symbol"":""aapl"", ""security name"": ""apple inc"", ""market"": ""nasdaq"", ""sector"": ""technology"" } ] get ratings for a given stock from a given market get /stock/ratings/<market>/<stock_symbol> [ { ""stocksymbol"": ""aapl"", ""marketplace"": ""nasdaq"", ""refreshdata"": ""2020-11-25"", ""overallrating"": ""hold"", ""analystsratings"": [ { ""level_0"": 0, ""index"": 1, ""ratingdate"": ""2020-11-19"", ""ratingagency"": ""the goldman sachs group"", ""ratingassigned"": ""sell"", ""newratings"": -1, ""scaledratings"": ""sell"" } ] } ] get a list of recommended stocks, similar to given stock get /stock/recommendation/<stock_symbol> [ { ""seq"": 1, ""stocksymbol"": ""hafc"", ""stockname"": ""hanmi financial corporation"", ""sector"": ""finance"", ""rating"": ""sell"" }, ] get twitter sentiment for given stock 1: positive, 0: neutral, -1: negative get /stock/sentiments/<market>/<stock_symbol> { ""stocksymbol"": ""aapl"", ""refreshdate"": ""2020-11-25"", ""sentiment"": 1 } get list of user request log get /requests/all [ { ""datetime"": ""2020-11-25t21:55:52.924706"", ""symbol"": ""tsla"", ""market"": ""nasdaq"" } ] list of the rest apis exposed out of the backend can be found on github project repository: https://github.com/mlwithsandy/courseproject/tree/main/projectcode/stockratingssystem the sre back-end is comprised of the following components and/or modules: a. flask app this is the main component which exposes various rest apis for external consumers - in our case sre front-end. it integrates all other components such as ratings_system, recommender_system etc. to provide the necessary services. in addition, it also logs all requests to requestlogdb. b. ratings_system the ratings_system is the component which calculates the overall rating for the user selected (searched) stock, by scraping the required ratings data from a variety of market analyst websites and aggregating them. it also provides the list of our selected latest ten ratings from an assortment of various market analysts as a reference. c. recommender_system the recommender_system takes a stock symbol as input and recommends 5 stocks matching the profile of the user selected (searched) stock and a pre-defined similarity function. d. twittersentimentanalysis twittersentimentanalysis component fetches latest tweets for the user selected (searched) stock from twitter which by making use of the twitter api, performs sentiment analysis and returns overall sentiment for the given stock. it also provides the latest five tweets as a reference. e. nasdaq the nasdaq component is primarily used for preparation of data. it combines the nasdaq listed stocks with the dataset we used for identifying various feature parameters of a stock. by cleaning and combining our data sources, we were able to create a final dataset of 1462 stocks for use across our systems in our app (analyst ratings, twitter sentiment, recommender system). f. batchratingprocess the batchratingprocess is used to update ratings of all 1462 stocks in background. this is to ensure that the user does not face any significant delay in fetching the data from third party websites while interacting with our sre app's ui. in addition, the ratings of a stock is not updated frequently and batch processing fits well from a requirements and solution design perspective. g. batchrecodatapreparation the batchrecodatapreparation is another batch process to prepare the data for the recommendation system as the recommendation engine relies on an assortment of analyst ratings of stocks as a feature in the similarity function. implementation details rating system a. approach to calculate the ratings, the following algorithm is used: first of all, rating for the selected(searched) stock is searched in the ratings database. case 1: ratings data is already available in the ratings database. in such a case, ratings data is fetched from the database. case 2: ratings data is not available in ratings database. in this case, following step is executed to get the ratings. read the website marketbeat.com which lists the ratings from various market analysts and scrape the page section containing ratings relevant date data is cleansed, validated and structured as per requirement in case of more than 10 ratings, only latest 10 ratings are selected. initially data from only current and previous months were considered but to increase the data quantity, this restriction is switched off in final product final list of ratings is stored in the database once the rating data is available, ratings from various market analysts are scaled to following ratings scale: {-1: sell, 0: hold, 1: buy} finally, overall rating is calculated based on the selected scaled ratings with possible outcome as sell, hold or buy. b. webpage scraper webpage scraper was developed using the learnings from mp 2.1 of the course cs 410: text information system. python library beautifulsoup and chrome driver were primarily used to fetch the web document. following url builder code were used to get url for various stocks: # marketbeat url builder def get_mb_url(market, stock_symbol): base_url = 'https://www.marketbeat.com/stocks/{market}/{stock_symbol}/price-target/' final_url = base_url.format(market=market, stock_symbol=stock_symbol) return final_url e.g. https://www.marketbeat.com/stocks/nasdaq/aapl/price-target/ as part of the exercise, following additional aspects were required to be taken care: 1. the time delay in reading the complete web document, and 2. the url redirects - in case a particular stock was not found on the website, website would redirect the url request to a default page. # create a webdriver object and set options for headless browsing def load_webdriver(): if str(filepath).find(""cs410"") == -1: options = webdriver.chromeoptions() options.add_argument('--no-sandbox') options.add_argument('--headless') options.add_argument(""--disable-dev-shm-usage"") driver = webdriver.chrome(chrome_options=options) else: options = options() options.headless = true driver = webdriver.chrome(filepath / 'chromedriver', options=options) return driver # read web document using beutifulsoup def get_js_soup(url_web, driver): driver.get(url_web) time.sleep(5) if url_web != redirected_url: print(""redirected url : "" + redirected_url) new_url = redirected_url + ""price-target/"" print(""new url for analysts rating : "" + new_url) if new_url.find('nasdaq/price-target/') == -1: driver.get(url_web) else: return using the html div class identifier, relevant data were extracted from the webpage data and subsequently processed in panda dataframe. table = soup_obj.find(""table"", attrs={""class"": ""scroll-table sort-table fixed-left-column fixed-header""}) if table is none: table = soup_obj.find(""table"", attrs={""class"": ""scroll-table sort-table fixed-header""}) if table is none: table = soup_obj.find(""table"", attrs={""class"": ""scroll-table sort-table""}) if table is none: print(stock_symbol + "": no table found for market analyst rating"") else: table_body = table.find('tbody') rows = table_body.find_all('tr') for row in rows: cols = row.find_all('td') cols = [ele.text.strip() for ele in cols] data.append([ele.split("""")[-1].strip() for ele in cols if ele]) c. uniform scaling of ratings uniform scaling of ratings was required to unify the ratings from various market analysts and ensure that the calculation of overall rating is without any bias and is not affected by some higher or lower ratings from some market analysts, only due to the fact that they use different scales for rating a stock. various ratings were mapped to {-1: sell, 0: hold, 1: buy} using following mapping dictionary is used. ratings_dict = { ""sell"": -1, ""strong sell"": -1, ""bearish"": -1, ""underperform"": -1, ""sector underperform"": -1, ""moderate sell"": -1, ""weak hold"": -1, ""underweight"": -1, ""reduce"": -1, ""hold"": 0, ""neutral"": 0, ""average"": 0, ""market perform"": 0, ""sector perform"": 0, ""sector weight"": 0, ""peer perform"": 0, ""equal weight"": 0, ""in-line"": 0, ""market outperform"": 1, ""outperform"": 1, ""moderate buy"": 1, ""accumulate"": 1, ""over-weight"": 1, ""overweight"": 1, ""strong-buy"": 1, ""add"": 1, ""bullish"": 1, ""buy"": 1, ""positive"": 1, ""strong buy"": 1, ""top pick"": 1, ""conviction-buy"": 1, ""outperformer"": 1 } there were other options also considered e.g., scaling of all ratings on a scale of 1-5 or 1-3, weighted scale to reflect strong ratings e.g., strong buy or strong sell. however, based on our need to combine the analyst rating with twitter sentiment, scaling to {-1: sell, 0: hold, 1: buy} were selected for this exercise. d. overall ratings calculation first of all, aggregated ratings of all ratings from various market analyst is calculated based on arithmetic mean of all selected scaled ratings. e.g., aggregated rating for following five scaled ratings {-1: sell, 1: buy, 0: hold, 1: buy, -1: sell} from various market analyst will be {0: hold}. once the aggregated rating is calculated, it is combined with twitter sentiment analysis result as per below table for overall ratings. aggregated rating twitter sentiment overall ratings -1: sell positive hold -1: sell neutral sell -1: sell negative sell 0: hold positive buy 0: hold neutral hold 0: hold negative sell 1: buy positive buy 1: buy neutral buy 1: buy negative hold sentiment analysis sentiment analysis, also known as opinion mining, refers to the use of natural language processing to computationally determine opinions and emotions of an opinion holder for an opinion target. a common use for this technology is to discover how people feel about certain topics, particularly through users' textual posts in social media space. to perform sentiment analysis to provide stock recommendation, twitter has been considered as the social media space where users post their opinion as their tweets. as most of the elements in the opinion representation such as the opinion holder (twitter users in this case) and opinion target (stock to be recommended in this case) and the content and the context of the opinion (financial context) are already known, the main task is to decide opinion sentiment. so, this is a case of just using sentiment classification for understanding opinion where the input is opinionated text object, the output is a sentiment label i.e., polarity analysis with predefined categories such as positive, negative, or neutral. for this project, the sentiment analysis has been done through the process outlined below. process description a. preparing the data set to build the model, training and testing data set is needed. ideally for optimal performance the financial tweets need to be downloaded from tweeter and should be human evaluated to create the labels which can be used for training the model and later for testing the model. however, one needs to spend considerable amount of manual effort to build such data. to optimize time and resource for this project, a readily available downloadable training set (polarity dataset from cornell university -) has been used. the data set contain 2000 processed down-cased text files used in pang/lee acl 2004 [1]; the names of the two subdirectories in that folder, ""pos"" and ""neg"", indicate the true classification (sentiment) of the component files according to the automatic rating classifier the tweets of the data set have been all labeled as positive or negative, depending on the content. the data set have been persisted into pickle file (a binary representation of python structure) to optimize performance of the subsequent run to build the classifier. import pickle from sklearn.datasets import load_files #nltk.download('stopwords') #import dataset -> generate two classes one each for each sub directorties dataset = load_files('txt_sentoken/') x,y = dataset.data, dataset.target #store as pickle file, these are byte type file with open('x.pickle', 'wb') as f: pickle.dump(x,f) with open('y.pickle', 'wb') as f: pickle.dump(y,f) the same data has been split into training and testing data set following a 80-20 rule where 80% of the downloaded pre-labeled data has been used as training data set and 20% of the same downloaded data has been used as testing data set. b. preprocessing the data set the downloaded data set has been preprocessed before feeding into the program to create the classifier to remove all the non-word characters, to convert into lower case, to remove single characters (e.g. i, a etc.). import re import pickle with open('x.pickle', 'rb') as f: x=pickle.load(f) with open('y.pickle', 'rb') as f: y=pickle.load(f) corpus = [] for i in range(0,len(x)): data = re.sub(r'\w', ' ', str(x[i])) data = data.lower() data = re.sub(r'\s+[a-z]\s+', ' ', data) data = re.sub(r'^[a-z]\s+', ' ', data) data = re.sub(r'\s+', ' ', data) corpus.append(data) c. building the bow, tf-idf and logistic regression classifier scikit-learn library (a free machine learning library for python) has been used to create the classifier. at first, the bag of words model has been created and later the bag of words model would be converted into tf-idf model. to covert the data into bag of words model, classes from scikit-learn has been used. first, a max feature has been set to 2000 which means 2000 most frequent words would be used as features. the min document frequency would ensure to exclude a word to be considered as 2000 features which appear 3 or less documents (to prevent a word to become a feature which is rare into the set but very popular within a certain document) and the max document frequency would ensure to exclude a word to be considered as 2000 features which appear 60% or more documents (to exclude the most common words like the, an etc.). then stop words has been removed that is defined in nltk corpus. now to form the bag of words model the corpus from above steps has been used. from nltk.corpus import stopwords from sklearn.feature_extraction.text import countvectorizer from nltk.corpus import stopwords nltk.download('stopwords') vectorizer = countvectorizer(stop_words=stopwords.words('english'), max_df = 0.6, min_df = 3, max_features = len(x)) x = vectorizer.fit_transform(corpus).toarray()#will generate 2d array [len(x),len(x)], total number of docs = number of features = len(x) finally, tfidftransformer from sklearn is used to create tf-idf model from bag of words model created earlier. from sklearn.feature_extraction.text import tfidftransformer # convert bow to tf-idf transformer = tfidftransformer() x = transformer.fit_transform(x).toarray() logistic regression (a discriminative classifier) is a classification algorithm (learning algorithm) which is used for binary classification problem. the task of sentiment analysis for this project can be thought as a binary classification problem where the goal is to predict positive or negative sentiment from a given tweets (a sentence in particular). hence for the purpose of this project, a logistics regression classifier has been built where negative and positive sentiments have been denoted as 0 and 1 respectively. so, the binary response variable y ie {0,1} needs to be calculated from the predictor x where x = { x1, x2 ..... x2000} (all the 2000 features) hence, for logistics regression can be represented as below: so essentially using training data t, , parameters (m=2000) needs to be estimated. hence the conditional likelihood estimate is: and the goal of logistic regression algorithm is to optimize the parameters using training data set. once the optimal values of the parameters are found by the algorithm, y can be calculated for any unknown sentiment of a new sentence. if y>=0.5, then that sentiment is positive sentiment and if y<0.5, then that sentiment is negative sentiment. for this project, logistricregression from sklearn has been used to build the classifier. first the input data set has been split as - 80% of available data has been considered as training data and 20% of the available data has been considered as test data from sklearn.model_selection import train_test_split text_train,text_test,sentiment_train,sentiment_test = train_test_split(x,y,test_size=0.2,random_state=0)#80% training and 20% testing data then classifier is built: from sklearn.linear_model import logisticregression # create the classifier using logistic regression classifier = logisticregression() classifier.fit(text_train,sentiment_train) just to showcase the model performance, confusion_matrix class from sklearn has been used. with the input data, close to 85% accuracy has been achieved. from sklearn.metrics import confusion_matrix #testing model performance sentiment_prediction = classifier.predict(text_test) cm = confusion_matrix(sentiment_test,sentiment_prediction)# [[predicted as 0 and actually 0, predicted as 0 and actually 1], #[predicted as 1 and actually 0, predicted as 1 and actually 1]] print(""accuracy : "", (cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100,""%"") ''' [model predicted 0and actual 0 model predicted 1 nand actual 0 model predicted 1 and actual 0 model predicted 1 and actual 1] ''' finally, the model and vectorizer have been stored as pickle file (binary representation of python objects) so that while calculating the real time tweets, the saved model can be used as it is. from sklearn.feature_extraction.text import tfidfvectorizer #store the classifier ....pickle file with open('classifier.pickle', 'wb') as f: pickle.dump(classifier,f) #store the tfidf vectorizer vectorizertfidf = tfidfvectorizer(stop_words=stopwords.words('english'), max_df = 0.6, min_df = 3, max_features = len(x)) x_tdidf = vectorizertfidf.fit_transform(corpus).toarray() with open('vectorizertfidf.pickle', 'wb') as f: pickle.dump(vectorizertfidf,f) d. fetching the real time tweets a developer app has been created in twitter for the purpose of this project. the oauth2 mechanism has been used to make api calls to twitter api for fetching the recent tweets. consumerkey and consumersecret from the created app are used to generate bearer token in the runtime api call using https://api.twitter.com/oauth2/token finally, the bearer token is used to call api to perform recent search (returns tweets from the last 7 days that match a search query) using ""recent search"" api. https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-recent for this project, max result of 100 has been set to perform recent search. this is to ensure throttling of number of results fetched (as for the basic access, twitter account has 500000 search results/month limitation) e. performing sentiment analysis of the fetched tweets to perform sentiment analysis in real time, firstly the logistic regression classifier model and tf-idf vectorizer is loaded from the saved pickle file. import pickle import re with open('classifier.pickle', 'rb') as f: clf=pickle.load(f) with open('vectorizertfidf.pickle', 'rb') as f: vectorizer=pickle.load(f) for a given stock the ""recent search"" api is used to search recent tweets. after fetching related tweets (max = 100), each tweet is preprocessed to create bag of words and to be represented as tf-idf vectorizer. then, prebuilt logistic regression classifier is used to predict the sentiment of each tweets. for t in tweets_fetched: t = re.sub(r'^https://t.co/[a-za-z0-9]*\s',' ',t) t = re.sub(r'\s+https://t.co/[a-za-z0-9]*\s',' ',t) t = re.sub(r'\s+https://t.co/[a-za-z0-9]*$',' ',t) t = t.lower() t = re.sub(r""that's"",'that is',t) t = re.sub(r""there's"",'there is',t) t = re.sub(r""what's"",'what is',t) t = re.sub(r""where's"",'where is',t) t = re.sub(r""it's"",'it is',t) t = re.sub(r""who's"",'who is',t) t = re.sub(r""i'm"",'i am',t) t = re.sub(r""she's"",'she is',t) t = re.sub(r""he's"",'he is',t) t = re.sub(r""they're"",'they are',t) t = re.sub(r""who're"",'who are',t) t = re.sub(r""shouldn't"",'should not',t) t = re.sub(r""wouldn't"",'would not',t) t = re.sub(r""couldn't"",'could not',t) t = re.sub(r""can't"",'can not',t) t = re.sub(r""won't"",'will not',t) t = re.sub(r'\w', ' ', t) t = re.sub(r'\d', ' ', t) t = re.sub(r'\s+[a-z]\s+', ' ', t) t = re.sub(r'\s+[a-z]$', ' ', t) t = re.sub(r'^[a-z]\s+', ' ', t) t = re.sub(r'\s+', ' ', t) sentiment = clf.predict(vectorizer.transform([t]).toarray()) finally, total positive and negative sentiments are calculated for total tweets fetched in runtime and the final sentiment of a particular stock has been calculated as positive = 1 (if the positive percentage > 65%), negative = -1 (if the positive percentage < 35%) or neutral = 0 (if the positive percentage is in between 35% and 65%). if (tot_positive+tot_negetive)>0 : positive_percentage = tot_positive/(tot_positive+tot_negetive) print(""positive_percentage :"",positive_percentage*100, ""%"") if positive_percentage>0.65 : print(""stock is buy"") return 1 elif positive_percentage<0.35 and positive_percentage>0: print(""stock is sell"") return -1 else: print(""stock is neutral"") return 0 following end point has been built to provide twitter sentiment analysis result to a stock. definition get twitter sentiment for given stock - 1: positive, 0: neutral, -1: negative get /stock/sentiments/<market>/<stock_symbol> e.g. http://localhost:5000/stock/sentiments/nasdaq/aapl response 200 ok on success json { ""stocksymbol"": ""aapl"", ""refreshdate"": ""2020-11-25"", ""sentiment"": 1 } sample run: recommender system approach the basic approach to the recommendation engine is to use a similarity function to compare pre-identified features of all stocks in our corpus against user-provided stock symbol features. while doing so, we are implementing one of the methods for building recommendation engine - content based recommendation or item similarity, which was part of week 6 lecture of course cs 410 text information system. recommender system recommends to the user the top 5 stock symbols which are most similar to the user provided stock symbol in terms of those underlying features and the similarity function. for the initial, cosine similarity is used as similarity function and the following financial/economic features were selected as underlying features for similarity calculation. company is in s&p 500 company profitability over last three years revenue growth for last three years current market analyst ratings sector gross profit per market cap analyst ratings are calculated by rating_system and same is reused also for recommendation system. other features for the stock are calculated or derived using the financial data of the companies from year 2018. source: kaggle dataset available at https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks-20142018. as part of the exercise, significant amount of effort was used to identify a single data source for financial or economic data and also to understand various financial terms to find the right feature. based on our current understanding of a company performance and its relation to stock price, we used above listed features. the features might be further optimized with right guidance from a financial analyst or person with insight of stock market and factors influencing the investor decisions. libraries and datasets python libraries flask flask_cors markdown beautifulsoup4 selenium pandas pymongo tinydb misaka nltk requests sklearn flask-jsonpify datasets https://www.marketbeat.com/ https://www.cs.cornell.edu/people/pabo/movie-review-data/ https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks-20142018?select=2018_financial_data.csv https://developer.twitter.com verification the result of the recommender system was verified based on manual verification process by selecting some stocks at random and checking the result for individual section e.g., ratings, sentiments and overall ratings. for example, overall rating for facebook (fb) stock is buy. looking at individual ratings component, the result seems reasonable. analyst ratings: buy verification: in the list of market analyst ratings, all 10 analysts have rated it as buy. therefore, the aggregated rating is buy. tweet sentiments: neutral verification: from the latest 100 tweets fetched (as shown in below screenshot), it seems reasonable to have a neutral sentiment overall rating: buy verification: combining analyst ratings ""buy"" with twitter sentiments ""neutral"", as per listed decision table, the result is buy. conclusion and future work overall, the stock recommending system as described in this project report has yielded satisfactory result in recommending rating (e.g., buy, hold, sell) for the user entered stock symbol and recommending five similar stocks. the result has been validated by some popular stocks. one of key challenges faced in building the system is the access on right financial data as well as good training and testing set to train and test the model for sentiment analysis. the choice we had to manually create the required data. however, to optimize the time and resource available, it has been decided to use readily available data in the web which might have not yielded the perfect recommendation. there are several interesting directions for the future version of recommender system. first, the overall functionality can be improved by considering user input of sectors and providing recommendation and trends specific to that sector. a second direction involves defining the test and train data and possibly human labeling twitter feed (for sentiment analysis) just for tweets related to stock market and use the same to train and test the model. given the current trend of machine learning algorithms, a third interesting research direction is to explore the timeseries data for stock adjacency. finally, overall score can be improved further to consider more analysts' reports and microblogging websites and come up with more recommender categories i.e., strong buy, buy, hold, sell, strong sell etc. at the end, it has been a great journey of ideation and learning in a collaborative manner to design and develop the stock recommender system. we thank different analysts' websites to make their ratings available publicly and twitter to grant access of real time tweets through their public api and last but not the least, we thank professor chengxiang zhai and all our tas and all the reviewers to give the direction needed and to provide the valuable feedback. references [1] bo pang and lillian lee. 2004. a sentimental education: sentiment analysis using subjectivity summarization based on minimum cuts. in proceedings of the 42nd annual meeting on association for computational linguistics (acl '04). association for computational linguistics, usa, 271-es. doi:https://doi.org/10.3115/1218955.1218990 [2] carbone, n. (2020, january 18). 200+ financial indicators of us stocks (2014-2018). retrieved december 11, 2020, from https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks-20142018 project report stock recommender system cs 410: text information system university of illinois, urbana-champaign team members name netid email id ezra schroeder ezras2 ezras2@illinois.edu rasbihari pal pal9 pal9@illinois.edu sandeep kumar kumar64 kumar64@illinois.edu team captain marked in bold. [ team members ] [ project overview ] [ abstract ] [ motivation ] [ introduction ] [ high level design ] [ component view (deployment perspective) ] [ sre front-end (ui) ] [ sre back-end (rest api) ] [ implementation details ] [ rating system ] [ sentiment analysis ] [ recommender system ] [ libraries and datasets ] [ verification ] [ conclusion and future work ] [ references ] project overview abstract our project is a novel text-mining application which combines 3 different functionalities around rating stocks into one application. namely, it consists of a base analysis which is a two-tiered summary of sentiment of stock analyst ratings who are well known in the industry and rate stock ticker symbols, a twitter sentiment analysis aspect which scrapes tweets off of twitter and analyzes them for sentiment about a particular stock symbol, and a recommendation engine which recommends stock symbols similar to a user-provided query stock symbol. there are many conceivable use-cases for an app such as ours upon further embellishment and improvements, such as individual investors in the stock market who want automated and instantaneous advice and suggestions that incorporates both analyst ratings from well-known analysts across the internet, public sentiment as embodied by tweets, and that produces not only concise summaries of these analyst ratings and twitter sentiment but recommends similar stocks to their stock symbol (e.g. aapl) of interest. imaginably there may well also be corporate interest in incorporating an application such as ours into a larger pipeline which could be serving a huge myriad of purposes but that leverages actionable knowledge about the stock market into a larger purpose. although our application is alpha version, it is not inconceivable that it could springboard academic research into these areas. motivation in the year 2020, there has been huge surge in securities trading, driven by retail investors. the increase in the trading activity can be attributed primarily to the easy-to-use mobile based trading apps, offered by several fintech companies such as etoro, robinhood and interactivebrokers etc. the retail investors of today might lack time for in-depth research and/or even lack the necessary knowledge to analyze the financial standing of a company. in such a situation, many of the retail investors either rely on word of mouth or blindly following other investors on such trading platforms. this leads to investment decisions beyond the risk profile and/or risk appetite of the investors. introduction we propose ""stock recommender system"" as a solution to enable retail investors easy access to information, relevant for informed investment decisions. based on user's preference of a stock, the stock recommender proposes a cumulated rating for the stock and also proposes other stocks with similar ratings. the recommender system combines * stock rating data from various market analyst, * market sentiments and * company profile for determination of the cumulated rating and curation of the recommendation list. high level design component view (deployment perspective) stock recommendation system consists of two components - sre front-end and sre back- end. * the sre front-end is the ui component for user interaction, developed using angular. the front-end relies on sre back-end for all its data needs for providing various user centric functions. * the sre back-end is the main component, which implements all the necessary algorithm and business rules and finally exposes the data related to ratings, recommendations and tweets via rest apis. sre front-end (ui) the sre front-end is developed in angular framework and is a single page application. it consists of the following components: a. app-container the main component to render the stock recommendation system web page b. app-navbar the component responsible for top navigation bar c. app-routing the component dealing with url based routing and takes care of routing to the home page or canonical ""page-not-found"" page. d. home.component this is the main component which takes user input, calls sre backend services to fetch relevant data. e. p404.component this is the component for handling ""page not found"" scenario in case user enters incorrect url not supported by sre front-end. sre back-end (rest api) the sre back-end is a flask based app, developed using python and tinydb which exposes various rest apis for the sre front-end. list of rest apis: rest api sample response get list of all stocks in the corpus (output abridged for succinctness) get /stock/all [ { ""symbol"":""aapl"", ""security name"": ""apple inc"", ""market"": ""nasdaq"", ""sector"": ""technology"" } ] get ratings for a given stock from a given market get /stock/ratings/<market>/<stock_symb ol> [ { ""stocksymbol"": ""aapl"", ""marketplace"": ""nasdaq"", ""refreshdata"": ""2020-11-25"", ""overallrating"": ""hold"", ""analystsratings"": [ { ""level_0"": 0, ""index"": 1, ""ratingdate"": ""2020-11-19"", ""ratingagency"": ""the goldman sachs group"", ""ratingassigned"": ""sell"", ""newratings"": -1, ""scaledratings"": ""sell"" } ] } ] get a list of recommended stocks, similar to given stock get /stock/recommendation/<stock_symbol > [ { ""seq"": 1, ""stocksymbol"": ""hafc"", ""stockname"": ""hanmi financial corporation"", ""sector"": ""finance"", ""rating"": ""sell"" }, ] get twitter sentiment for given stock 1: positive, 0: neutral, -1: negative get /stock/sentiments/<market>/<stock_s ymbol> { ""stocksymbol"": ""aapl"", ""refreshdate"": ""2020-11-25"", ""sentiment"": 1 } get list of user request log get /requests/all [ { ""datetime"": ""2020-11-25t21:55:52.924706"", ""symbol"": ""tsla"", ""market"": ""nasdaq"" } ] list of the rest apis exposed out of the backend can be found on github project repository: https://github.com/mlwithsandy/courseproject/tree/main/projectcode/stockratingssystem the sre back-end is comprised of the following components and/or modules: a. flask app this is the main component which exposes various rest apis for external consumers - in our case sre front-end. it integrates all other components such as ratings_system, recommender_system etc. to provide the necessary services. in addition, it also logs all requests to requestlogdb. b. ratings_system the ratings_system is the component which calculates the overall rating for the user selected (searched) stock, by scraping the required ratings data from a variety of market analyst websites and aggregating them. it also provides the list of our selected latest ten ratings from an assortment of various market analysts as a reference. c. recommender_system the recommender_system takes a stock symbol as input and recommends 5 stocks matching the profile of the user selected (searched) stock and a pre-defined similarity function. d. twittersentimentanalysis twittersentimentanalysis component fetches latest tweets for the user selected (searched) stock from twitter which by making use of the twitter api, performs sentiment analysis and returns overall sentiment for the given stock. it also provides the latest five tweets as a reference. e. nasdaq the nasdaq component is primarily used for preparation of data. it combines the nasdaq listed stocks with the dataset we used for identifying various feature parameters of a stock. by cleaning and combining our data sources, we were able to create a final dataset of 1462 stocks for use across our systems in our app (analyst ratings, twitter sentiment, recommender system). f. batchratingprocess the batchratingprocess is used to update ratings of all 1462 stocks in background. this is to ensure that the user does not face any significant delay in fetching the data from third party websites while interacting with our sre app's ui. in addition, the ratings of a stock is not updated frequently and batch processing fits well from a requirements and solution design perspective. g. batchrecodatapreparation the batchrecodatapreparation is another batch process to prepare the data for the recommendation system as the recommendation engine relies on an assortment of analyst ratings of stocks as a feature in the similarity function. implementation details rating system a. approach to calculate the ratings, the following algorithm is used: * first of all, rating for the selected(searched) stock is searched in the ratings database. o case 1: ratings data is already available in the ratings database. in such a case, ratings data is fetched from the database. o case 2: ratings data is not available in ratings database. in this case, following step is executed to get the ratings. # read the website marketbeat.com which lists the ratings from various market analysts and scrape the page section containing ratings relevant date # data is cleansed, validated and structured as per requirement # in case of more than 10 ratings, only latest 10 ratings are selected. # initially data from only current and previous months were considered but to increase the data quantity, this restriction is switched off in final product # final list of ratings is stored in the database * once the rating data is available, ratings from various market analysts are scaled to following ratings scale: {-1: sell, 0: hold, 1: buy} * finally, overall rating is calculated based on the selected scaled ratings with possible outcome as sell, hold or buy. b. webpage scraper webpage scraper was developed using the learnings from mp 2.1 of the course cs 410: text information system. python library beautifulsoup and chrome driver were primarily used to fetch the web document. following url builder code were used to get url for various stocks: # marketbeat url builder def get_mb_url(market, stock_symbol): base_url = 'https://www.marketbeat.com/stocks/{market}/{stock_symbol}/price-target/' final_url = base_url.format(market=market, stock_symbol=stock_symbol) return final_url e.g. https://www.marketbeat.com/stocks/nasdaq/aapl/price-target/ as part of the exercise, following additional aspects were required to be taken care: 1. the time delay in reading the complete web document, and 2. the url redirects - in case a particular stock was not found on the website, website would redirect the url request to a default page. # create a webdriver object and set options for headless browsing def load_webdriver(): if str(filepath).find(""cs410"") == -1: options = webdriver.chromeoptions() options.add_argument('--no-sandbox') options.add_argument('--headless') options.add_argument(""--disable-dev-shm-usage"") driver = webdriver.chrome(chrome_options=options) else: options = options() options.headless = true driver = webdriver.chrome(filepath / 'chromedriver', options=options) return driver # read web document using beutifulsoup def get_js_soup(url_web, driver): driver.get(url_web) time.sleep(5) if url_web != redirected_url: print(""redirected url : "" + redirected_url) new_url = redirected_url + ""price-target/"" print(""new url for analysts rating : "" + new_url) if new_url.find('nasdaq/price-target/') == -1: driver.get(url_web) else: return using the html div class identifier, relevant data were extracted from the webpage data and subsequently processed in panda dataframe. table = soup_obj.find(""table"", attrs={""class"": ""scroll-table sort-table fixed-left-column fixed-header""}) if table is none: table = soup_obj.find(""table"", attrs={""class"": ""scroll-table sort-table fixed-header""}) if table is none: table = soup_obj.find(""table"", attrs={""class"": ""scroll-table sort-table""}) if table is none: print(stock_symbol + "": no table found for market analyst rating"") else: table_body = table.find('tbody') rows = table_body.find_all('tr') for row in rows: cols = row.find_all('td') cols = [ele.text.strip() for ele in cols] data.append([ele.split("""")[-1].strip() for ele in cols if ele]) c. uniform scaling of ratings uniform scaling of ratings was required to unify the ratings from various market analysts and ensure that the calculation of overall rating is without any bias and is not affected by some higher or lower ratings from some market analysts, only due to the fact that they use different scales for rating a stock. various ratings were mapped to {-1: sell, 0: hold, 1: buy} using following mapping dictionary is used. ratings_dict = { ""sell"": -1, ""strong sell"": -1, ""bearish"": -1, ""underperform"": -1, ""sector underperform"": -1, ""moderate sell"": -1, ""weak hold"": -1, ""underweight"": -1, ""reduce"": -1, ""hold"": 0, ""neutral"": 0, ""average"": 0, ""market perform"": 0, ""sector perform"": 0, ""sector weight"": 0, ""peer perform"": 0, ""equal weight"": 0, ""in-line"": 0, ""market outperform"": 1, ""outperform"": 1, ""moderate buy"": 1, ""accumulate"": 1, ""over-weight"": 1, ""overweight"": 1, ""strong-buy"": 1, ""add"": 1, ""bullish"": 1, ""buy"": 1, ""positive"": 1, ""strong buy"": 1, ""top pick"": 1, ""conviction-buy"": 1, ""outperformer"": 1 } there were other options also considered e.g., scaling of all ratings on a scale of 1-5 or 1-3, weighted scale to reflect strong ratings e.g., strong buy or strong sell. however, based on our need to combine the analyst rating with twitter sentiment, scaling to {-1: sell, 0: hold, 1: buy} were selected for this exercise. d. overall ratings calculation first of all, aggregated ratings of all ratings from various market analyst is calculated based on arithmetic mean of all selected scaled ratings. e.g., aggregated rating for following five scaled ratings {-1: sell, 1: buy, 0: hold, 1: buy, -1: sell} from various market analyst will be {0: hold}. once the aggregated rating is calculated, it is combined with twitter sentiment analysis result as per below table for overall ratings. aggregated rating twitter sentiment overall ratings -1: sell positive hold -1: sell neutral sell -1: sell negative sell 0: hold positive buy 0: hold neutral hold 0: hold negative sell 1: buy positive buy 1: buy neutral buy 1: buy negative hold sentiment analysis sentiment analysis, also known as opinion mining, refers to the use of natural language processing to computationally determine opinions and emotions of an opinion holder for an opinion target. a common use for this technology is to discover how people feel about certain topics, particularly through users' textual posts in social media space. to perform sentiment analysis to provide stock recommendation, twitter has been considered as the social media space where users post their opinion as their tweets. as most of the elements in the opinion representation such as the opinion holder (twitter users in this case) and opinion target (stock to be recommended in this case) and the content and the context of the opinion (financial context) are already known, the main task is to decide opinion sentiment. so, this is a case of just using sentiment classification for understanding opinion where the input is opinionated text object, the output is a sentiment label i.e., polarity analysis with predefined categories such as positive, negative, or neutral. for this project, the sentiment analysis has been done through the process outlined below. process description a. preparing the data set to build the model, training and testing data set is needed. ideally for optimal performance the financial tweets need to be downloaded from tweeter and should be human evaluated to create the labels which can be used for training the model and later for testing the model. however, one needs to spend considerable amount of manual effort to build such data. to optimize time and resource for this project, a readily available downloadable training set (polarity dataset from cornell university -) has been used. the data set contain 2000 processed down-cased text files used in pang/lee acl 2004 [1]; the names of the two subdirectories in that folder, ""pos"" and ""neg"", indicate the true classification (sentiment) of the component files according to the automatic rating classifier the tweets of the data set have been all labeled as positive or negative, depending on the content. the data set have been persisted into pickle file (a binary representation of python structure) to optimize performance of the subsequent run to build the classifier. import pickle from sklearn.datasets import load_files #nltk.download('stopwords') #import dataset -> generate two classes one each for each sub directorties dataset = load_files('txt_sentoken/') x,y = dataset.data, dataset.target #store as pickle file, these are byte type file with open('x.pickle', 'wb') as f: pickle.dump(x,f) with open('y.pickle', 'wb') as f: pickle.dump(y,f) the same data has been split into training and testing data set following a 80-20 rule where 80% of the downloaded pre-labeled data has been used as training data set and 20% of the same downloaded data has been used as testing data set. b. preprocessing the data set the downloaded data set has been preprocessed before feeding into the program to create the classifier to remove all the non-word characters, to convert into lower case, to remove single characters (e.g. i, a etc.). import re import pickle with open('x.pickle', 'rb') as f: x=pickle.load(f) with open('y.pickle', 'rb') as f: y=pickle.load(f) corpus = [] for i in range(0,len(x)): data = re.sub(r'\w', ' ', str(x[i])) data = data.lower() data = re.sub(r'\s+[a-z]\s+', ' ', data) data = re.sub(r'^[a-z]\s+', ' ', data) data = re.sub(r'\s+', ' ', data) corpus.append(data) c. building the bow, tf-idf and logistic regression classifier scikit-learn library (a free machine learning library for python) has been used to create the classifier. at first, the bag of words model has been created and later the bag of words model would be converted into tf-idf model. to covert the data into bag of words model, classes from scikit-learn has been used. first, a max feature has been set to 2000 which means 2000 most frequent words would be used as features. the min document frequency would ensure to exclude a word to be considered as 2000 features which appear 3 or less documents (to prevent a word to become a feature which is rare into the set but very popular within a certain document) and the max document frequency would ensure to exclude a word to be considered as 2000 features which appear 60% or more documents (to exclude the most common words like the, an etc.). then stop words has been removed that is defined in nltk corpus. now to form the bag of words model the corpus from above steps has been used. from nltk.corpus import stopwords from sklearn.feature_extraction.text import countvectorizer from nltk.corpus import stopwords nltk.download('stopwords') vectorizer = countvectorizer(stop_words=stopwords.words('english'), max_df = 0.6, min_df = 3, max_features = len(x)) x = vectorizer.fit_transform(corpus).toarray()#will generate 2d array [len(x),len(x)], total number of docs = number of features = len(x) finally, tfidftransformer from sklearn is used to create tf-idf model from bag of words model created earlier. from sklearn.feature_extraction.text import tfidftransformer # convert bow to tf-idf transformer = tfidftransformer() x = transformer.fit_transform(x).toarray() logistic regression (a discriminative classifier) is a classification algorithm (learning algorithm) which is used for binary classification problem. the task of sentiment analysis for this project can be thought as a binary classification problem where the goal is to predict positive or negative sentiment from a given tweets (a sentence in particular). hence for the purpose of this project, a logistics regression classifier has been built where negative and positive sentiments have been denoted as 0 and 1 respectively. so, the binary response variable y ie {0,1} needs to be calculated from the predictor x where x = { x1, x2 ..... x2000} (all the 2000 features) hence, for logistics regression can be represented as below: so essentially using training data t, , parameters (m=2000) needs to be estimated. hence the conditional likelihood estimate is: and the goal of logistic regression algorithm is to optimize the parameters using training data set. once the optimal values of the parameters are found by the algorithm, y can be calculated for any unknown sentiment of a new sentence. if y>=0.5, then that sentiment is positive sentiment and if y<0.5, then that sentiment is negative sentiment. for this project, logistricregression from sklearn has been used to build the classifier. first the input data set has been split as - 80% of available data has been considered as training data and 20% of the available data has been considered as test data from sklearn.model_selection import train_test_split text_train,text_test,sentiment_train,sentiment_test = train_test_split(x,y,test_size=0.2,random_state=0)#80% training and 20% testing data then classifier is built: from sklearn.linear_model import logisticregression # create the classifier using logistic regression classifier = logisticregression() classifier.fit(text_train,sentiment_train) just to showcase the model performance, confusion_matrix class from sklearn has been used. with the input data, close to 85% accuracy has been achieved. from sklearn.metrics import confusion_matrix #testing model performance sentiment_prediction = classifier.predict(text_test) cm = confusion_matrix(sentiment_test,sentiment_prediction)# [[predicted as 0 and actually 0, predicted as 0 and actually 1], #[predicted as 1 and actually 0, predicted as 1 and actually 1]] print(""accuracy : "", (cm[0][0]+cm[1][1])/(cm[0][0]+cm[0][1]+cm[1][0]+cm[1][1])*100,""%"") ''' [model predicted 0and actual 0 model predicted 1 nand actual 0 model predicted 1 and actual 0 model predicted 1 and actual 1] ''' finally, the model and vectorizer have been stored as pickle file (binary representation of python objects) so that while calculating the real time tweets, the saved model can be used as it is. from sklearn.feature_extraction.text import tfidfvectorizer #store the classifier ....pickle file with open('classifier.pickle', 'wb') as f: pickle.dump(classifier,f) #store the tfidf vectorizer vectorizertfidf = tfidfvectorizer(stop_words=stopwords.words('english'), max_df = 0.6, min_df = 3, max_features = len(x)) x_tdidf = vectorizertfidf.fit_transform(corpus).toarray() with open('vectorizertfidf.pickle', 'wb') as f: pickle.dump(vectorizertfidf,f) d. fetching the real time tweets a developer app has been created in twitter for the purpose of this project. the oauth2 mechanism has been used to make api calls to twitter api for fetching the recent tweets. consumerkey and consumersecret from the created app are used to generate bearer token in the runtime api call using https://api.twitter.com/oauth2/token finally, the bearer token is used to call api to perform recent search (returns tweets from the last 7 days that match a search query) using ""recent search"" api. https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get- tweets-search-recent for this project, max result of 100 has been set to perform recent search. this is to ensure throttling of number of results fetched (as for the basic access, twitter account has 500000 search results/month limitation) e. performing sentiment analysis of the fetched tweets to perform sentiment analysis in real time, firstly the logistic regression classifier model and tf-idf vectorizer is loaded from the saved pickle file. import pickle import re with open('classifier.pickle', 'rb') as f: clf=pickle.load(f) with open('vectorizertfidf.pickle', 'rb') as f: vectorizer=pickle.load(f) for a given stock the ""recent search"" api is used to search recent tweets. after fetching related tweets (max = 100), each tweet is preprocessed to create bag of words and to be represented as tf-idf vectorizer. then, prebuilt logistic regression classifier is used to predict the sentiment of each tweets. for t in tweets_fetched: t = re.sub(r'^https://t.co/[a-za-z0-9]*\s',' ',t) t = re.sub(r'\s+https://t.co/[a-za-z0-9]*\s',' ',t) t = re.sub(r'\s+https://t.co/[a-za-z0-9]*$',' ',t) t = t.lower() t = re.sub(r""that's"",'that is',t) t = re.sub(r""there's"",'there is',t) t = re.sub(r""what's"",'what is',t) t = re.sub(r""where's"",'where is',t) t = re.sub(r""it's"",'it is',t) t = re.sub(r""who's"",'who is',t) t = re.sub(r""i'm"",'i am',t) t = re.sub(r""she's"",'she is',t) t = re.sub(r""he's"",'he is',t) t = re.sub(r""they're"",'they are',t) t = re.sub(r""who're"",'who are',t) t = re.sub(r""shouldn't"",'should not',t) t = re.sub(r""wouldn't"",'would not',t) t = re.sub(r""couldn't"",'could not',t) t = re.sub(r""can't"",'can not',t) t = re.sub(r""won't"",'will not',t) t = re.sub(r'\w', ' ', t) t = re.sub(r'\d', ' ', t) t = re.sub(r'\s+[a-z]\s+', ' ', t) t = re.sub(r'\s+[a-z]$', ' ', t) t = re.sub(r'^[a-z]\s+', ' ', t) t = re.sub(r'\s+', ' ', t) sentiment = clf.predict(vectorizer.transform([t]).toarray()) finally, total positive and negative sentiments are calculated for total tweets fetched in runtime and the final sentiment of a particular stock has been calculated as positive = 1 (if the positive percentage > 65%), negative = -1 (if the positive percentage < 35%) or neutral = 0 (if the positive percentage is in between 35% and 65%). if (tot_positive+tot_negetive)>0 : positive_percentage = tot_positive/(tot_positive+tot_negetive) print(""positive_percentage :"",positive_percentage*100, ""%"") if positive_percentage>0.65 : print(""stock is buy"") return 1 elif positive_percentage<0.35 and positive_percentage>0: print(""stock is sell"") return -1 else: print(""stock is neutral"") return 0 following end point has been built to provide twitter sentiment analysis result to a stock. definition * get twitter sentiment for given stock - 1: positive, 0: neutral, -1: negative get /stock/sentiments/<market>/<stock_symbol> e.g. http://localhost:5000/stock/sentiments/nasdaq/aapl response * 200 ok on success json { ""stocksymbol"": ""aapl"", ""refreshdate"": ""2020-11-25"", ""sentiment"": 1 } sample run: recommender system approach the basic approach to the recommendation engine is to use a similarity function to compare pre-identified features of all stocks in our corpus against user-provided stock symbol features. while doing so, we are implementing one of the methods for building recommendation engine - content based recommendation or item similarity, which was part of week 6 lecture of course cs 410 text information system. recommender system recommends to the user the top 5 stock symbols which are most similar to the user provided stock symbol in terms of those underlying features and the similarity function. for the initial, cosine similarity is used as similarity function and the following financial/economic features were selected as underlying features for similarity calculation. 1. company is in s&p 500 2. company profitability over last three years 3. revenue growth for last three years 4. current market analyst ratings 5. sector 6. gross profit per market cap analyst ratings are calculated by rating_system and same is reused also for recommendation system. other features for the stock are calculated or derived using the financial data of the companies from year 2018. source: kaggle dataset available at https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks-20142018. as part of the exercise, significant amount of effort was used to identify a single data source for financial or economic data and also to understand various financial terms to find the right feature. based on our current understanding of a company performance and its relation to stock price, we used above listed features. the features might be further optimized with right guidance from a financial analyst or person with insight of stock market and factors influencing the investor decisions. libraries and datasets python libraries flask flask_cors markdown beautifulsoup4 selenium pandas pymongo tinydb misaka nltk requests sklearn flask-jsonpify datasets * https://www.marketbeat.com/ * https://www.cs.cornell.edu/people/pabo/movie-review-data/ * https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks- 20142018?select=2018_financial_data.csv * https://developer.twitter.com verification the result of the recommender system was verified based on manual verification process by selecting some stocks at random and checking the result for individual section e.g., ratings, sentiments and overall ratings. for example, overall rating for facebook (fb) stock is buy. looking at individual ratings component, the result seems reasonable. analyst ratings: buy verification: in the list of market analyst ratings, all 10 analysts have rated it as buy. therefore, the aggregated rating is buy. tweet sentiments: neutral verification: from the latest 100 tweets fetched (as shown in below screenshot), it seems reasonable to have a neutral sentiment overall rating: buy verification: combining analyst ratings ""buy"" with twitter sentiments ""neutral"", as per listed decision table, the result is buy. conclusion and future work overall, the stock recommending system as described in this project report has yielded satisfactory result in recommending rating (e.g., buy, hold, sell) for the user entered stock symbol and recommending five similar stocks. the result has been validated by some popular stocks. one of key challenges faced in building the system is the access on right financial data as well as good training and testing set to train and test the model for sentiment analysis. the choice we had to manually create the required data. however, to optimize the time and resource available, it has been decided to use readily available data in the web which might have not yielded the perfect recommendation. there are several interesting directions for the future version of recommender system. first, the overall functionality can be improved by considering user input of sectors and providing recommendation and trends specific to that sector. a second direction involves defining the test and train data and possibly human labeling twitter feed (for sentiment analysis) just for tweets related to stock market and use the same to train and test the model. given the current trend of machine learning algorithms, a third interesting research direction is to explore the timeseries data for stock adjacency. finally, overall score can be improved further to consider more analysts' reports and microblogging websites and come up with more recommender categories i.e., strong buy, buy, hold, sell, strong sell etc. at the end, it has been a great journey of ideation and learning in a collaborative manner to design and develop the stock recommender system. we thank different analysts' websites to make their ratings available publicly and twitter to grant access of real time tweets through their public api and last but not the least, we thank professor chengxiang zhai and all our tas and all the reviewers to give the direction needed and to provide the valuable feedback. references [1] bo pang and lillian lee. 2004. a sentimental education: sentiment analysis using subjectivity summarization based on minimum cuts. in proceedings of the 42nd annual meeting on association for computational linguistics (acl '04). association for computational linguistics, usa, 271-es. doi:https://doi.org/10.3115/1218955.1218990 [2] carbone, n. (2020, january 18). 200+ financial indicators of us stocks (2014-2018). retrieved december 11, 2020, from https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks-20142018 project status report: stock recommender system [ ] [ ] [ ] [ ] [ ] [ team members project overview project status project challenges proposed resolution next ] steps team members name netid email id ezra schroeder ezras2 ezras2@illinois.edu rasbihari pal pal9 pal9@illinois.edu sandeep kumar kumar64 kumar64@illinois.edu team captain marked in bold. project overview we are building a product ""stock recommender system"", which will enable retail investors to make informed decision about their investment choices, based on market analysts ratings and market/investors sentiments at the moment. based on user's preference of a stock, the product recommends 5 stocks which closely matches the user's preferred stock and ratings for them. the recommender system combines rating data from various market analyst, market sentiments using microblogging data (using twitter) and company profile for determination of the overall rating and curation of the recommendation list. project status the team has been making steadfast progress in various topics in order to deliver the project on time by the final project submission deadline. progress on each individual topic can be seen in below actualized project planning chart. percentage completion of the tasks under individual topics is mentioned in brackets () next to each topic name in above planning chart. project challenges at the conception of the project, we had foreseen some challenges but during the execution, we faced several challenges, which we had either not foreseen or assumed as minor challenges. below, we list of the challenges which required significant time, effort and energy from all of us. working with twitter api and gathering training and test data for the model we prepared for sentiment analysis collecting good quality financial data of various companies scraping of market analysts websites technical limitation to process the data above challenges are in addition to a major hurdle related to working in a team with members sitting across atlantic ocean and having a time difference of 7 hours. thanks to team members flexibility, team agility and technology, this challenge did not pose a big threat to our continuous progress. proposed resolution we, as a team, invested significant amount of time working on above listed challenges. some of the challenges we could overcome with sustained effort but for some of the challenges we had to find a middle ground to meet the project objective of delivering a 'reasonably' working solution and hoping to improvise the solution over time with larger effort. working with twitter api and gather training and test data for the classifier it required significant effort and multiple round of communication with twitter team to get access to the twitter api - an important part of our proposed solution for performing the market sentiment analysis for a given stock. eventually we received the access but with restriction on the volume of tweets we can pull in a month. for training and test data, we used public data available in internet. we used the following polarity data set: https://www.cs.cornell.edu/people/pabo/movie-review-data/ this helped us to avoid the significant manual effort for downloading the twitter data and possibly human labeled them. collecting good quality financial data of various companies for building a good recommendation engine, access to financial data of various companies is required. we could not find a single source with latest financial data for the listed companies. to avoid the trap of spending significant time and energy to resolve the issue, we eventually settled with a kaggle data source having financial data from 2018. but the solution is being designed in a way that we can update the data any time to reflect current reality. scraping of market analysts websites our initial idea was to scrape websites and reports from various market analysts for their ratings to various stocks. after collating the information for couple of stocks, we realized the vastness of this topic. for each stock, we needed to scrape data from various market analysts and each report following free text structure. for our project, we needed access to the assigned rating from various market analysts and we settlement with an established website, which collects and publishes such ratings in structured format. technical limitation to process the data at the moment we have collected financial data for more that 1800 companies. to scrape the analyst ratings and get twitter feed for all these companies and then processing them for final result would require significant time and processing infrastructure. as a realistic approach, we have decided to limit the scope of the project to a limited list of stocks. this limit is only for practical purpose only. however, the solution is capable to manage more volume of data with parallel and batch processing. next steps at the moment, we do not see any major technical challenge in our way in coming days. we are planning to complete the remaining tasks from all topics and focus on final project delivery on time. courseproject: cs410 text information system, uiuc project topic: stock recommender system team members |--|---------------|----------|---------------------| | # | name | net id | email id | | --- | --------------- | ---------- | --------------------- | | 1. | ezra schroeder | ezras2 | ezras2@illinois.edu | | 2. | rasbihari pal | pal9 | pal9@illinois.edu | | 3. | sandeep kumar | kumar64 | kumar64@illinois.edu | | -- | --------------- | ---------- | --------------------- | project documentation project final report https://github.com/mlwithsandy/courseproject/blob/main/projectreport_stockrecommendersystem.pdf software usage tutorial presentation video https://mediaspace.illinois.edu/media/1_zbfjmw9g project presentation - powerpoint https://github.com/mlwithsandy/courseproject/blob/main/stockrecommendationengine_v1.3.pptx technical set-up guide https://github.com/mlwithsandy/courseproject/blob/main/technical_set-up_guide.pdf user guide https://github.com/mlwithsandy/courseproject/blob/main/userguide.pdf project status report https://github.com/mlwithsandy/courseproject/blob/main/projectstatusreport_stockrecommendersystem.pdf project proposal https://github.com/mlwithsandy/courseproject/blob/main/projectproposal_stockrecommendersystem.pdf stock recommendation engine - a consolidated recommender bringing market within the reach of commons 1 problem lack of consolidated recommender more retail investors due to availability and easiness of trading platform the retail investor of today lacks time for in-depth research investors lacks necessary knowledge to analyze the financial standing of a company. too many analysis/reports in the web stream of information in modern era of social computing 12.08.2020 2 12.08.2020 3 solution one stop window to provide stock recommendation enable retail investors easy access to information to make informed investment decision the recommender system combines stock rating data from various market analyst, market sentiments in social media (twitter) company profile and financial attributes 12.08.2020 4 system design product analyst reports ratings_system is the component which calculates the overall rating for the user selected(searched) stock, by scraping the required ratings data from market analyst website and aggregating them. market sentiments twittersentimentanalysis component fetches latest tweets for the user selected(searched) stock from twitter used twitter api, performs sentiment analysis and return overall sentiment for the given stock. financial attributes of the company recommender_system takes a stock symbol as input and recommends 5 stocks matching the profile of the user selected(searched) stock and a pre-defined similarity function. 12.08.2020 5 three aspects of parameters 12.08.2020 6 project documents user guide https://github.com/mlwithsandy/courseproject/blob/main/userguide.pdf technical set-up guide https://github.com/mlwithsandy/courseproject/blob/main/technical_set-up_guide.pdf project report https://github.com/mlwithsandy/courseproject/blob/main/projectreport_stockrecommendersystem.pdf 12.08.2020 7 installation & setup install docker on your local machine https://docs.docker.com/get-docker/ download the project from github https://github.com/mlwithsandy/courseproject go to the folder sre: courseproject > projectcode > sre to start the stock recommendation system, run the start scripts start.bat for windows start.sh for linux to stop, run the stop scripts stop.bat for windows stop.sh for linux 12.08.2020 8 how to use open browser, preferably chrome or firefox go to http://localhost:8080/home to access stock recommendation system ui enter any stock symbols e.g. aapl (nasdaq market) in the search box and click ""search"" stock recommendation engine will show analyst ratings twitter sentiment ratings overall ratings most recent five tweets similar stock recommendation use http://localhost:5000/ to see list of rest api end points the product 12.08.2020 9 live demo - use case data used - acknowledgements 10 https://www.marketbeat.com/ https://www.cs.cornell.edu/people/pabo/movie-review-data/ https://www.kaggle.com/cnic92/200-financial-indicators-of-us-stocks-20142018?select=2018_financial_data.csv https://developer.twitter.com our team sandeep kumar rasbihari pal pal9@illinois.edu ezra schroeder ezras2@illinois.edu 12.08.2020 11 kumar64@illinois.edu conclusion future work considering user input of sectors and providing recommendation and trends specific to that sector defining the test and train data and possibly human labeling twitter feed (for sentiment analysis) just for tweets related to stock market explore the timeseries data for stock adjacency. combine more analyst report and microblogging sites 12.08.2020 12 overall, the stock recommending system as described in this project report has yielded satisfactory result in recommending rating for the user entered stock symbol and recommending five similar stocks. thank you! 13 technical set-up guide stock recommender system is packaged as docker images to ensure that the all its component can run on any machine, independent of os e.g. windows or linux and without any need for special configuration and additional software dependencies. listed below are the only two pre-requisites in order to set-up and run stock recommender system on your local machine. 1. access to internet 2. docker cli or docker desktop installed on the local machine in case, you do not have docker cli or docker desktop installed on your local machine, you may install docker desktop from docker website: https://www.docker.com/products/docker-desktop once above listed pre-requisites are fulfilled, you can proceed with following five steps in same sequence. step 1: download relevant scripts from project github please download either the complete project or only the sre directory from the github repo: https://github.com/mlwithsandy/courseproject/tree/main/projectcode sre folder consists of following files / scripts, which are relevant to set-up and run the stock recommendation system: you may follow readme.md at github repo additional details. https://github.com/mlwithsandy/courseproject/tree/main/projectcode/sre/readme.md step 2: run start script depending on your operating system, please run start script in sre directory as mentioned below: windows: run start.bat in command prompt mac os, linux: run start.sh in terminal the start script downloads docker images for frontend and backend components of stock recommender system from docker hub. docker images are published by stock recommender system project team as a public repository. size of docker images: sre-backend: 700 mb (approx.) sre-frontend: 18 mb (approx.) depending on the speed of internet, it may take a while to download the two images. once the two images are downloaded, the start script will run the docker images as docker container on your local machine. step 3: access the stock recommender system ui to access the recommender system ui, please open following link in your internet browser, preferable chrome or firefox. http://localhost:8080/home for details of the ui, please refer to user guide. step 4: access the stock recommender system rest apis this is an optional step and required only when you are interested in using the rest services. please follow below link to access the list of rest apis exposed from sre backend. http://localhost:5000/ step 5: stop the stock recommender system components in order to stop the backend and frontend components of stock recommender system, please run stop script in sre directory, corresponding to your operating system. user guide welcome to the user guide of our stock recommender system. before you start, please ensure that following pre-requisites are fulfilled: 1. stock recommender backend component is running either on a server or your local machine 2. stock recommender frontend component is running either on a server or your local machine user screen when you go to the url of stock recommender system (e.g. http://localhost:4200/home), you will see a page such as below. stock recommender system shows you overall rating and recommendation for apple inc (stock symbol: aapl) by default. you may enter a stock of your choice in given search area and click on search. stock recommender system will provide you all necessary information about searched stock and also recommend stocks similar to the one you are interested in. various sections of the screen are described below: overall rating overall rating consists of three parts. * analyst rating analyst rating is calculated based on the ratings of various market analysts, who publishes such ratings e.g. buy, sell, hold etc. for various listed companies. the recommender system aggregates last 10 ratings from various analysts to calculated weighted analyst rating. * twitter sentiments current market sentiment is determined based on the twitter trends. recommender system fetches recent tweets from twitter and perform sentiment analysis to provide current market sentiment for the given stock. * overall rating recommender system combines analyst rating and twitter sentiment to provide you with an overall ratings of the stock you are interested in. based on the recent market trend, both the parameters have been given equal weightage for calculation of overall ratings. please refer to below table to understand the calculation of overall ratings. aggregate rating based on various market analysts market sentiment overall rating buy neutral buy buy negative hold buy positive buy hold neutral hold hold negative sell hold positive buy sell neutral sell sell negative sell sell positive hold analyst ratings & latest tweets analyst ratings & latest tweets consists of following three section. * rating chart rating chart shows the distribution of ratings (buy, sell, hold) among the market analysts based on recently published ratings * analysts rating analysts rating shows the details - ratings (buy, sell, hold), rating agency (market analyst) and date of publication of the rating * tweets list of latest 5 tweets (indicative only). market sentiment is calculated on many more tweets. similar stocks similar stocks show list of 5 stocks which are similar to the one you are interested in. similar stocks are identified using a similarity function based on following parameters. 1. company is in s&p 500 2. company profitability over last three years 3. revenue growth for last three years 4. current market analyst ratings 5. sector 6. gross profit per market cap"	['project', 'topic', 'stock', 'recommender', 'system', 'team', 'members', 'background', 'proposal', 'market', 'research', 'highlevel', 'design', 'timeline', 'faqs', 'name', 'netid', 'email', 'id', 'ezra', 'schroeder', 'ezras', 'ezrasillinoisedu', 'rasbihari', 'pal', 'palillinoisedu', 'sandeep', 'kumar', 'kumarillinoisedu', 'captain', 'marked', 'bold', 'year', 'huge', 'surge', 'securities', 'trading', 'driven', 'retail', 'investors', 'increase', 'activity', 'attributed', 'primarily', 'easytouse', 'mobile', 'based', 'apps', 'offered', 'several', 'fintech', 'companies', 'etoro', 'robinhood', 'interactivebrokers', 'etc', 'investor', 'today', 'might', 'lack', 'time', 'indepth', 'andor', 'even', 'necessary', 'knowledge', 'analyze', 'financial', 'standing', 'company', 'situation', 'many', 'either', 'rely', 'word', 'mouth', 'blindly', 'following', 'platforms', 'leads', 'investment', 'decisions', 'beyond', 'risk', 'profile', 'appetite', 'would', 'like', 'propose', 'solution', 'enable', 'easy', 'access', 'information', 'relevant', 'informed', 'users', 'preference', 'proposes', 'cumulated', 'rating', 'also', 'stocks', 'similar', 'ratings', 'combines', 'data', 'various', 'analyst', 'sentiments', 'determination', 'curation', 'recommendation', 'list', 'viability', 'researched', 'features', 'existing', 'tools', 'freely', 'available', 'yahoo', 'finance', 'platform', 'offers', 'required', 'decision', 'making', 'isolation', 'relies', 'combine', 'example', 'screenshots', 'shows', 'cumulates', 'analysts', 'include', 'current', 'recommend', 'analysis', 'come', 'across', 'product', 'provides', 'sentiment', 'weighted', 'used', 'faster', 'possible', 'approaches', 'solve', 'problem', 'allow', 'learnings', 'uiuc', 'course', 'cs', 'text', 'leverages', 'aspects', 'build', 'scraping', 'webpages', 'collating', 'user', 'texts', 'content', 'similarity', 'implementation', 'planned', 'seven', 'phases', 'first', 'phase', 'focused', 'planning', 'task', 'distribution', 'subsequent', 'four', 'aimed', 'development', 'major', 'software', 'components', 'last', 'two', 'focuses', 'ui', 'documentation', 'executed', 'parallel', 'component', 'function', 'tool', 'helps', 'customers', 'invest', 'equity', 'identify', 'best', 'value', 'consolidated', 'rates', 'judged', 'via', 'twitter', 'feeds', 'benefit', 'institution', 'kind', 'already', 'exist', 'different', 'people', 'care', 'difference', 'offering', 'however', 'average', 'resources', 'use', 'sourcing', 'web', 'eg', 'python', 'beautiful', 'soup', 'target', 'advisor', 'httpswwwstocktargetadvisorcom', 'beat', 'httpswwwmarketbeatcom', 'intend', 'dev', 'api', 'httpsdevelopertwittercomen', 'ingest', 'tweets', 'related', 'help', 'us', 'create', 'index', 'obtain', 'positive', 'negative', 'pulse', 'given', 'ticker', 'symbol', 'aapl', 'public', 'opinion', 'interested', 'techniquesalgorithms', 'develop', 'refer', 'understand', 'approach', 'demonstrate', 'usefulness', 'part', 'exercise', 'may', 'take', 'feedback', 'class', 'improvement', 'rough', 'show', 'expect', 'finish', 'details', 'report', 'university', 'illinois', 'urbanachampaign', 'overview', 'abstract', 'motivation', 'introduction', 'high', 'level', 'view', 'deployment', 'perspective', 'sre', 'frontend', 'backend', 'rest', 'libraries', 'datasets', 'verification', 'conclusion', 'future', 'work', 'references', 'novel', 'textmining', 'application', 'functionalities', 'around', 'one', 'namely', 'consists', 'base', 'twotiered', 'summary', 'well', 'known', 'industry', 'rate', 'symbols', 'aspect', 'scrapes', 'analyzes', 'particular', 'engine', 'recommends', 'userprovided', 'query', 'conceivable', 'usecases', 'app', 'upon', 'embellishment', 'improvements', 'individual', 'want', 'automated', 'instantaneous', 'advice', 'suggestions', 'incorporates', 'wellknown', 'internet', 'embodied', 'produces', 'concise', 'summaries', 'interest', 'imaginably', 'corporate', 'incorporating', 'larger', 'pipeline', 'could', 'serving', 'myriad', 'purposes', 'actionable', 'purpose', 'although', 'alpha', 'version', 'inconceivable', 'springboard', 'academic', 'areas', 'interaction', 'developed', 'using', 'angular', 'needs', 'providing', 'centric', 'functions', 'main', 'implements', 'algorithm', 'business', 'rules', 'finally', 'exposes', 'recommendations', 'apis', 'framework', 'single', 'page', 'appcontainer', 'render', 'b', 'appnavbar', 'responsible', 'top', 'navigation', 'bar', 'c', 'approuting', 'dealing', 'url', 'routing', 'takes', 'home', 'canonical', 'pagenotfound', 'homecomponent', 'input', 'calls', 'services', 'fetch', 'e', 'pcomponent', 'handling', 'found', 'scenario', 'case', 'enters', 'incorrect', 'supported', 'flask', 'tinydb', 'sample', 'response', 'get', 'corpus', 'output', 'abridged', 'succinctness', 'stockall', 'symbolaapl', 'security', 'apple', 'inc', 'nasdaq', 'sector', 'technology', 'stockratingsmarketstock_symbol', 'stocksymbol', 'marketplace', 'refreshdata', 'overallrating', 'hold', 'analystsratings', 'level_', 'ratingdate', 'ratingagency', 'goldman', 'sachs', 'group', 'ratingassigned', 'sell', 'newratings', 'scaledratings', 'recommended', 'stockrecommendationstock_symbol', 'seq', 'hafc', 'stockname', 'hanmi', 'corporation', 'neutral', 'stocksentimentsmarketstock_symbol', 'refreshdate', 'request', 'log', 'requestsall', 'datetime', 'tsla', 'exposed', 'github', 'repository', 'httpsgithubcommlwithsandycourseprojecttreemainprojectcodestockratingssystem', 'comprised', 'modules', 'external', 'consumers', 'integrates', 'ratings_system', 'recommender_system', 'provide', 'addition', 'logs', 'requests', 'requestlogdb', 'calculates', 'overall', 'selected', 'searched', 'variety', 'websites', 'aggregating', 'latest', 'ten', 'assortment', 'reference', 'matching', 'predefined', 'twittersentimentanalysis', 'fetches', 'performs', 'returns', 'five', 'preparation', 'listed', 'dataset', 'identifying', 'feature', 'parameters', 'cleaning', 'combining', 'sources', 'able', 'final', 'systems', 'f', 'batchratingprocess', 'update', 'ensure', 'face', 'significant', 'delay', 'fetching', 'third', 'party', 'interacting', 'updated', 'frequently', 'batch', 'processing', 'fits', 'requirements', 'g', 'batchrecodatapreparation', 'another', 'process', 'prepare', 'calculate', 'selectedsearched', 'database', 'fetched', 'step', 'read', 'website', 'marketbeatcom', 'lists', 'scrape', 'section', 'containing', 'date', 'cleansed', 'validated', 'structured', 'per', 'requirement', 'initially', 'previous', 'months', 'considered', 'quantity', 'restriction', 'switched', 'stored', 'scaled', 'scale', 'buy', 'calculated', 'outcome', 'webpage', 'scraper', 'mp', 'library', 'beautifulsoup', 'chrome', 'driver', 'document', 'builder', 'code', 'marketbeat', 'def', 'get_mb_urlmarket', 'stock_symbol', 'base_url', 'httpswwwmarketbeatcomstocksmarketstock_symbolpricetarget', 'final_url', 'base_urlformatmarketmarket', 'stock_symbolstock_symbol', 'return', 'httpswwwmarketbeatcomstocksnasdaqaaplpricetarget', 'additional', 'taken', 'reading', 'complete', 'redirects', 'redirect', 'default', 'webdriver', 'object', 'set', 'options', 'headless', 'browsing', 'load_webdriver', 'strfilepathfindcs', 'webdriverchromeoptions', 'optionsadd_argumentnosandbox', 'optionsadd_argumentheadless', 'optionsadd_argumentdisabledevshmusage', 'webdriverchromechrome_optionsoptions', 'else', 'optionsheadless', 'true', 'webdriverchromefilepath', 'chromedriver', 'optionsoptions', 'beutifulsoup', 'get_js_soupurl_web', 'drivergeturl_web', 'timesleep', 'url_web', 'redirected_url', 'printredirected', 'new_url', 'pricetarget', 'printnew', 'new_urlfindnasdaqpricetarget', 'html', 'div', 'identifier', 'extracted', 'subsequently', 'processed', 'panda', 'dataframe', 'table', 'soup_objfindtable', 'attrsclass', 'scrolltable', 'sorttable', 'fixedleftcolumn', 'fixedheader', 'none', 'printstock_symbol', 'table_body', 'tablefindtbody', 'rows', 'table_bodyfind_alltr', 'row', 'cols', 'rowfind_alltd', 'eletextstrip', 'ele', 'dataappendelesplitstrip', 'uniform', 'scaling', 'unify', 'calculation', 'without', 'bias', 'affected', 'higher', 'lower', 'due', 'fact', 'scales', 'mapped', 'mapping', 'dictionary', 'ratings_dict', 'strong', 'bearish', 'underperform', 'moderate', 'weak', 'underweight', 'reduce', 'perform', 'weight', 'peer', 'equal', 'inline', 'outperform', 'accumulate', 'overweight', 'strongbuy', 'add', 'bullish', 'pick', 'convictionbuy', 'outperformer', 'reflect', 'need', 'aggregated', 'arithmetic', 'mean', 'combined', 'result', 'mining', 'refers', 'natural', 'language', 'computationally', 'determine', 'opinions', 'emotions', 'holder', 'common', 'discover', 'feel', 'certain', 'topics', 'particularly', 'textual', 'posts', 'social', 'media', 'space', 'post', 'elements', 'representation', 'context', 'decide', 'classification', 'understanding', 'opinionated', 'label', 'ie', 'polarity', 'categories', 'done', 'outlined', 'description', 'preparing', 'model', 'training', 'testing', 'needed', 'ideally', 'optimal', 'performance', 'downloaded', 'tweeter', 'human', 'evaluated', 'labels', 'later', 'spend', 'considerable', 'amount', 'manual', 'effort', 'optimize', 'resource', 'readily', 'downloadable', 'cornell', 'contain', 'downcased', 'files', 'panglee', 'acl', 'names', 'subdirectories', 'folder', 'pos', 'neg', 'indicate', 'according', 'automatic', 'classifier', 'labeled', 'depending', 'persisted', 'pickle', 'file', 'binary', 'structure', 'run', 'import', 'sklearndatasets', 'load_files', 'nltkdownloadstopwords', 'generate', 'classes', 'sub', 'directorties', 'load_filestxt_sentoken', 'xy', 'datasetdata', 'datasettarget', 'store', 'byte', 'type', 'openxpickle', 'wb', 'pickledumpxf', 'openypickle', 'pickledumpyf', 'split', 'rule', 'prelabeled', 'preprocessing', 'preprocessed', 'feeding', 'program', 'remove', 'nonword', 'characters', 'convert', 'rb', 'xpickleloadf', 'ypickleloadf', 'rangelenx', 'resubrw', 'strxi', 'datalower', 'resubrsazs', 'resubrazs', 'resubrs', 'corpusappenddata', 'building', 'bow', 'tfidf', 'logistic', 'regression', 'scikitlearn', 'free', 'machine', 'learning', 'bag', 'words', 'created', 'converted', 'covert', 'max', 'means', 'frequent', 'min', 'frequency', 'exclude', 'appear', 'less', 'documents', 'prevent', 'become', 'rare', 'popular', 'within', 'stop', 'removed', 'defined', 'nltk', 'form', 'steps', 'nltkcorpus', 'stopwords', 'sklearnfeature_extractiontext', 'countvectorizer', 'vectorizer', 'countvectorizerstop_wordsstopwordswordsenglish', 'max_df', 'min_df', 'max_features', 'lenx', 'x', 'vectorizerfit_transformcorpustoarraywill', 'array', 'lenxlenx', 'total', 'number', 'docs', 'tfidftransformer', 'sklearn', 'earlier', 'transformer', 'transformerfit_transformxtoarray', 'discriminative', 'thought', 'goal', 'predict', 'sentence', 'hence', 'logistics', 'built', 'denoted', 'respectively', 'variable', 'predictor', 'represented', 'essentially', 'estimated', 'conditional', 'likelihood', 'estimate', 'values', 'unknown', 'new', 'logistricregression', 'test', 'sklearnmodel_selection', 'train_test_split', 'text_traintext_testsentiment_trainsentiment_test', 'train_test_splitxytest_sizerandom_state', 'sklearnlinear_model', 'logisticregression', 'classifierfittext_trainsentiment_train', 'showcase', 'confusion_matrix', 'close', 'accuracy', 'achieved', 'sklearnmetrics', 'sentiment_prediction', 'classifierpredicttext_test', 'cm', 'confusion_matrixsentiment_testsentiment_prediction', 'predicted', 'actually', 'printaccuracy', 'cmcmcmcmcmcm', 'actual', 'nand', 'objects', 'calculating', 'real', 'saved', 'tfidfvectorizer', 'openclassifierpickle', 'pickledumpclassifierf', 'vectorizertfidf', 'tfidfvectorizerstop_wordsstopwordswordsenglish', 'x_tdidf', 'vectorizertfidffit_transformcorpustoarray', 'openvectorizertfidfpickle', 'pickledumpvectorizertfidff', 'developer', 'oauth', 'mechanism', 'make', 'recent', 'consumerkey', 'consumersecret', 'bearer', 'token', 'runtime', 'call', 'httpsapitwittercomoauthtoken', 'search', 'days', 'match', 'httpsdevelopertwittercomendocstwitterapitweetssearchapireferencegettweetssearchrecent', 'throttling', 'results', 'basic', 'account', 'resultsmonth', 'limitation', 'performing', 'firstly', 'loaded', 'clfpickleloadf', 'vectorizerpickleloadf', 'tweet', 'prebuilt', 'tweets_fetched', 'resubrhttpstcoazazs', 'resubrshttpstcoazazs', 'resubrshttpstcoazaz', 'tlower', 'resubrthatsthat', 'ist', 'resubrtheresthere', 'resubrwhatswhat', 'resubrwhereswhere', 'resubritsit', 'resubrwhoswho', 'resubrimi', 'amt', 'resubrshesshe', 'resubrheshe', 'resubrtheyrethey', 'aret', 'resubrwhorewho', 'resubrshouldntshould', 'nott', 'resubrwouldntwould', 'resubrcouldntcould', 'resubrcantcan', 'resubrwontwill', 'resubrd', 'resubrsaz', 'clfpredictvectorizertransformttoarray', 'percentage', 'tot_positivetot_negetive', 'positive_percentage', 'tot_positivetot_positivetot_negetive', 'printpositive_percentage', 'printstock', 'elif', 'end', 'point', 'definition', 'httplocalhoststocksentimentsnasdaqaapl', 'ok', 'success', 'json', 'compare', 'preidentified', 'implementing', 'methods', 'item', 'week', 'lecture', 'provided', 'terms', 'underlying', 'initial', 'cosine', 'financialeconomic', 'sp', 'profitability', 'three', 'years', 'revenue', 'growth', 'gross', 'profit', 'cap', 'rating_system', 'reused', 'derived', 'source', 'kaggle', 'httpswwwkagglecomcnicfinancialindicatorsofusstocks', 'economic', 'find', 'right', 'relation', 'price', 'optimized', 'guidance', 'person', 'insight', 'factors', 'influencing', 'flask_cors', 'markdown', 'selenium', 'pandas', 'pymongo', 'misaka', 'flaskjsonpify', 'httpswwwcscornelledupeoplepabomoviereviewdata', 'httpswwwkagglecomcnicfinancialindicatorsofusstocksselect_financial_datacsv', 'httpsdevelopertwittercom', 'verified', 'selecting', 'random', 'checking', 'facebook', 'fb', 'looking', 'seems', 'reasonable', 'rated', 'therefore', 'shown', 'screenshot', 'recommending', 'described', 'yielded', 'satisfactory', 'entered', 'key', 'challenges', 'faced', 'good', 'train', 'choice', 'manually', 'decided', 'perfect', 'interesting', 'directions', 'functionality', 'improved', 'considering', 'sectors', 'trends', 'specific', 'second', 'direction', 'involves', 'defining', 'possibly', 'labeling', 'feed', 'trend', 'algorithms', 'explore', 'timeseries', 'adjacency', 'score', 'consider', 'reports', 'microblogging', 'great', 'journey', 'ideation', 'collaborative', 'manner', 'thank', 'publicly', 'grant', 'least', 'professor', 'chengxiang', 'zhai', 'tas', 'reviewers', 'give', 'valuable', 'bo', 'pang', 'lillian', 'lee', 'sentimental', 'education', 'subjectivity', 'summarization', 'minimum', 'cuts', 'proceedings', 'nd', 'annual', 'meeting', 'association', 'computational', 'linguistics', 'usa', 'es', 'doihttpsdoiorg', 'carbone', 'n', 'january', 'indicators', 'retrieved', 'december', 'back', 'stockratingsmarketstock_symb', 'ol', 'stocksentimentsmarketstock_s', 'ymbol', 'httpsdevelopertwittercomendocstwitterapitweetssearchapireferenceget', 'tweetssearchrecent', 'select_financial_datacsv', 'status', 'proposed', 'resolution', 'next', 'choices', 'marketinvestors', 'moment', 'closely', 'matches', 'preferred', 'steadfast', 'progress', 'order', 'deliver', 'submission', 'deadline', 'seen', 'actualized', 'chart', 'completion', 'tasks', 'mentioned', 'brackets', 'conception', 'foreseen', 'execution', 'assumed', 'minor', 'energy', 'working', 'gathering', 'prepared', 'collecting', 'quality', 'technical', 'hurdle', 'sitting', 'atlantic', 'ocean', 'hours', 'thanks', 'flexibility', 'agility', 'challenge', 'pose', 'big', 'threat', 'continuous', 'invested', 'overcome', 'sustained', 'middle', 'ground', 'meet', 'objective', 'delivering', 'reasonably', 'hoping', 'improvise', 'gather', 'multiple', 'round', 'communication', 'important', 'eventually', 'received', 'volume', 'pull', 'month', 'helped', 'avoid', 'downloading', 'trap', 'spending', 'resolve', 'issue', 'settled', 'designed', 'way', 'reality', 'idea', 'couple', 'realized', 'vastness', 'assigned', 'settlement', 'established', 'collects', 'publishes', 'format', 'collected', 'require', 'infrastructure', 'realistic', 'limit', 'scope', 'limited', 'practical', 'capable', 'manage', 'see', 'coming', 'remaining', 'focus', 'delivery', 'courseproject', 'net', 'httpsgithubcommlwithsandycourseprojectblobmainprojectreport_stockrecommendersystempdf', 'usage', 'tutorial', 'presentation', 'video', 'httpsmediaspaceillinoisedumedia_zbfjmwg', 'powerpoint', 'httpsgithubcommlwithsandycourseprojectblobmainstockrecommendationengine_vpptx', 'setup', 'guide', 'httpsgithubcommlwithsandycourseprojectblobmaintechnical_setup_guidepdf', 'httpsgithubcommlwithsandycourseprojectblobmainuserguidepdf', 'httpsgithubcommlwithsandycourseprojectblobmainprojectstatusreport_stockrecommendersystempdf', 'httpsgithubcommlwithsandycourseprojectblobmainprojectproposal_stockrecommendersystempdf', 'bringing', 'reach', 'commons', 'availability', 'easiness', 'lacks', 'analysisreports', 'stream', 'modern', 'era', 'computing', 'window', 'attributes', 'installation', 'install', 'docker', 'local', 'httpsdocsdockercomgetdocker', 'download', 'httpsgithubcommlwithsandycourseproject', 'go', 'projectcode', 'start', 'scripts', 'startbat', 'windows', 'startsh', 'linux', 'stopbat', 'stopsh', 'open', 'browser', 'preferably', 'firefox', 'httplocalhosthome', 'enter', 'box', 'click', 'httplocalhost', 'points', 'live', 'demo', 'acknowledgements', 'sites', 'packaged', 'images', 'independent', 'os', 'special', 'configuration', 'dependencies', 'prerequisites', 'cli', 'desktop', 'installed', 'httpswwwdockercomproductsdockerdesktop', 'fulfilled', 'proceed', 'sequence', 'please', 'directory', 'repo', 'httpsgithubcommlwithsandycourseprojecttreemainprojectcode', 'follow', 'readmemd', 'httpsgithubcommlwithsandycourseprojecttreemainprojectcodesrereadmemd', 'script', 'operating', 'command', 'prompt', 'mac', 'terminal', 'downloads', 'hub', 'published', 'size', 'srebackend', 'mb', 'approx', 'srefrontend', 'speed', 'container', 'link', 'preferable', 'optional', 'corresponding', 'welcome', 'running', 'server', 'screen', 'area', 'sections', 'parts', 'aggregates', 'determined', 'weightage', 'aggregate', 'among', 'recently', 'agency', 'publication', 'indicative', 'identified']
https://github.com/MM026184/CourseProject	"michael mcclanahan netid: mjm31 cs410: text information systems project proposal what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. captain: michael mcclanahan (netid: mjm31) this project will be completed individually. which paper have you chosen? hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 which programming language do you plan to use? python (3.6.1 via anaconda 4.4.0) can you obtain the datasets used in the paper for evaluation? no. the dataset from the ldc requires a license for access: https://catalog.ldc.upenn.edu/ldc2008t19 if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? i could build a scraping engine to capture all of the text from the same articles here: https://spiderbites.nytimes.com/2000/ ideally though, i would already have access to the data in xml file format from the ldc. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? n/a cs 410 course project reproducing paper: mining causal topics in text data: iterative topic modeling with time series feedback (kim et al 2013) michael mcclanahan online mcsds netid: mjm31 overview project objectives installation and use example results discussion project objectives implement the iterative topic modeling framework with time series feedback (itmtf) outlined by kim et al 2013: mining causal topics in text data: iterative topic modeling with time series feedback (kim et al 2013) specifically, this is a python3 implementation that attempts to use the lda topic modeling implementation from gensim perform the paper's 2000 presidential election experiment attempt to replicate results from table 2 and figure 2(b) the experiment for figure 2(a) was not attempted because gensim's lda model implementation does not have a u parameter installation and use if neccessary, install python3 then install the following project dependencies using pip pandas - https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html gensim - https://radimrehurek.com/gensim/ nltk - https://www.nltk.org/install.html scipy - https://www.scipy.org/install.html numpy - https://numpy.org/install/ clone the project repository, making a local copy of all files. this is also the working directory for the code, all of which is implemented in itmtfpresidential.py. all neccessary objects to reproduce my results are in this repository and automatically consumed by the script. navigate to your local directory to which the project was cloned and run the script with the following command: python itmtfpresidential.py installation and use analyze resulting csv files causal_topic_words.csv - contains the top five words for causal topics identified during each imtmf iteration for each of 5 different imtmf runs , each with a different initial number of topics identified for lda itmtf_stats.csv - contains neccessary average causality confidence and purity statistics for each iteration of the 5 different imtmf runs example results example results discussion in general poorer this implementation's results were poorer than what was noted in the paper improvements in causality confidence and purity were not observed with more iterations top words for causal topics seemed applicable, but not all that compelling or different from one another poorer results are likely due to differences in this implementation: lack of a background model - although the paper doesn't explicitly cite the use of a background model prior, results would imply they had one. my topics seem to have a lot more ""background words"" (ex: would). lack of a background could also be the a main reason for substantially lower purities with each iteration (0-5% vs 40-100%). lack of u parameter - this is likely the reason that neither purity nor causality confidence were improved with each iteration, regardless of the number of topics to begin with. using this parameter would have ensured that prior words (and topics) appeared with the next iterations results. cs 410 course project reproducing paper: mining causal topics in text data: iterative topic modeling with time series feedback (kim et al 2013) michael mcclanahan online mcsds netid: mjm31 overview project objectives installation and use example results discussion project objectives implement the iterative topic modeling framework with time series feedback (itmtf) outlined by kim et al 2013: mining causal topics in text data: iterative topic modeling with time series feedback (kim et al 2013) specifically, this is a python3 implementation that attempts to use the lda topic modeling implementation from gensim perform the paper's 2000 presidential election experiment attempt to replicate results from table 2 and figure 2(b) the experiment for figure 2(a) was not attempted because gensim's lda model implementation does not have a u parameter installation and use if neccessary, install python3 then install the following project dependencies using pip pandas - https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html gensim - https://radimrehurek.com/gensim/ nltk - https://www.nltk.org/install.html scipy - https://www.scipy.org/install.html numpy - https://numpy.org/install/ clone the project repository, making a local copy of all files. this is also the working directory for the code, all of which is implemented in itmtfpresidential.py. all neccessary objects to reproduce my results are in this repository and automatically consumed by the script. navigate to your local directory to which the project was cloned and run the script with the following command: python itmtfpresidential.py installation and use analyze resulting csv files causal_topic_words.csv - contains the top five words for causal topics identified during each imtmf iteration for each of 5 different imtmf runs , each with a different initial number of topics identified for lda itmtf_stats.csv - contains neccessary average causality confidence and purity statistics for each iteration of the 5 different imtmf runs example results example results discussion in general poorer this implementation's results were poorer than what was noted in the paper improvements in causality confidence and purity were not observed with more iterations top words for causal topics seemed applicable, but not all that compelling or different from one another poorer results are likely due to differences in this implementation: lack of a background model - although the paper doesn't explicitly cite the use of a background model prior, results would imply they had one. my topics seem to have a lot more ""background words"" (ex: would). lack of a background could also be the a main reason for substantially lower purities with each iteration (0-5% vs 40-100%). lack of u parameter - this is likely the reason that neither purity nor causality confidence were improved with each iteration, regardless of the number of topics to begin with. using this parameter would have ensured that prior words (and topics) appeared with the next iterations results. michael mcclanahan cs 410 - text mining university of illinois at urbana champaign (online) mcs-ds netid: mjm31 final project progress report reproducing a paper mining causal topics in text data: iterative topic modeling with time series feedback. (zhai et al 2013) progress made thus far read the paper (above) obtained access to the new york times annotated corpus from the linguistic data consortium downloaded the nyt annotated corpus read through the overview document for the nyt corpus remaining tasks loop through xml data files and create functions for text parser parse xml data for the framework inputs: a time series dataset (list of timestamps) and a corpus consisting of a list of (document,timestamp) tuples select a topic modeling method (m) and implement using a standard library implement the iterative topic modeling framework with time series feedback train against the nyt dataset implement the experiment in the paper and produce the same set of sample results challenges corpus size is significant (3.06 gb), but it should fit in memory on my laptop (which has 32 gb ram). this will be a significant undertaking to perform myself, but i'm taking the final early to give myself more time to get this done. cs 410 course project - michael mcclanahan (mjm31) all project deliverables (source code, documentation, and presentation) were completed by me as i was not the member of a team. reproduction of paper mining causal topics in text data: iterative topic modeling with time series feedback (kim et. al. 2013) link to paper overview of implementation this project attempts to reproduce the 2020 presidential election experiment outlined in the paper above. all programming was done in python 3.6 (specifically anaconda distribution 4.4.0). a requirements.txt file is provided outlining all non-standard libraries utilized and their associated versions. pandas==1.1.5 gensim==3.8.0 nltk==3.4.4 scipy==1.5.4 numpy==1.19.4 all source code is contained within itmtfpresidential.py as a series of functions. for convenience, the following objects have been serialized to files (specifically .pkl files) for easy re-use: president_norm_stock_ts : this is the non-text time series containing normalized presidential stock prices (may through october 2020 for the bush-gore 2000 presidential race. gore_bush_nyt_ts : this is the document time series containing ny times articles from may through october 2020 mentioning either bush or gore. cleaned_doc_list: this the document collection to be analyzed (ie: a list of documents represented each as a list of tokens or words). gensim_dictionary: this is the gensim dictionary object to be analyzed (built from gore_bush_doc_list). gensim_corpus: this is the gensim corpus to be analyzed (ie: a list of documents represented each as a list of wordids and their counts in the document) word_impact_dict: this is a dictionary of corpus {wordid:(impact score,p-value)}. it represents the result of section 4.2.2's word-level causality analysis. at runtime, if the script's reload_data variable is set to false, the script will reload president_norm_stock_ts and gore_bush_nyt_ts from disk in o(1) time. if set to true, functions build_datasets() and parse_nyt_corpus_for_gore_bush() will get called and rebuild these datasets from a .csv file and the nyt corpus for xml documents, respectively. since the nyt dataset was too large, it was not uploaded to this repository. therefore, setting this variable to true is not recommended. additionally, if the script's build_new_corpus variable is set to false, it will reload all of the other remaining objects from disk in o(1) time. if set to true, it will rebuild all of the other objects by rebuilding the collection, the gensim dictionary, and the gensim corpus (which is the object passed to the ldamodel() for its corpus parameter. it will then reperform the word-level causality analysis from 4.2.2, storing the result per gensim dictionary word id in a dictionary for quick lookup during itmtf iterations. the following 4 parameters are then set and itmtf iterations are started by calling the itmtf() recursive function. min_significance_value = 0.8 min_topic_prob = 0.001 iterations = 5 number_of_topics = 10 causal_topics = itmtf(gore_bush_gensim_corpus,gore_bush_gensim_dictionary,number_of_topics,number_of_topics,word_impact_dict,gore_bush_nyt_ts,president_norm_stock_ts,ts_tsid_map,min_significance_value,min_topic_prob,iterations) the itmtf function will call itself for the number of iterations specified, each time building an ldamodel() object, passing in a 2d matrix (num_topics,num_unique_terms) matrix of re calculated prior topic word probability distributions into its eta parameter. to re-calculate the prior, causal topics are first extracted during the topic-level causality analysis (see section 4.2.1 in the paper), which is performed using a pearson correlation against the reference topic stream and the presidential stock price time series. the topic-word probability prior is then calculated for top words in causal topics in the build_prior_matrix() function. this function makes use of the word_impact_dict object above for each causal topic. with each iteration, .csv files causal_topic_words.csv and itmtf_stats.csv in the working directory are appended with a list of signficant topics and their top 5 words as well as that iteration's average causality confidence and average purity, respectively. goal the project aims to reproduce the paper's results documented in table 2 and figure 2(b). you will note that the u parameter from the paper is not defined prior to calling the itmtf function above, primarily because it is not an parameter for the ldamodel() class provided by gensim. it is for this reason that figure 2(a) from the paper was not reproduced. how to use install the most recent versions of the above non-standard libraries using pip in a python3 environment. ex: pip install pandas clone the repository, which contains the working directory and all dependent objects. navigate to the working directory and run the script with python itmtfpresidential.py presentation files presentation slides voiced presentation - to listen, open the .pptx document in powerpoint, then navigate to the slide show tab and hit the from beginning button. the presentation should start from there. voiced presentation video - if unable to listen directly in powerpoint, you can view it as a video in the illinois media space. video demo'ing code results in general this implementation's results were poorer than what was noted in the paper. improvements in causality confidence and purity were not observed with more iterations. top words for causal topics seemed applicable, but not all that compelling or different from one another. poorer results are likely due to the following differences with this implementation: - lack of a background model - although the paper doesn't explicitly cite the use of a background model prior, results would imply they had one. my topics seem to have a lot more ""background words"" (ex: would). - lack of a background could also be the a main reason for substantially lower purities with each iteration (0-5% vs 40-100%). - lack of u parameter - this is likely the reason that neither purity nor causality confidence were improved with each iteration, regardless of the number of topics to begin with. using this parameter would have ensured that prior words (and topics) appeared with the next iterations results."	['michael', 'mcclanahan', 'netid', 'mjm', 'cs', 'text', 'information', 'systems', 'project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'completed', 'individually', 'paper', 'chosen', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'mining', 'causal', 'topics', 'data', 'iterative', 'topic', 'modeling', 'time', 'series', 'feedback', 'proceedings', 'nd', 'acm', 'international', 'conference', 'knowledge', 'management', 'cikm', 'new', 'york', 'ny', 'usa', 'doi', 'programming', 'language', 'plan', 'use', 'python', 'via', 'anaconda', 'obtain', 'datasets', 'used', 'evaluation', 'dataset', 'ldc', 'requires', 'license', 'access', 'httpscatalogldcupenneduldct', 'answer', 'question', 'similar', 'eg', 'recent', 'version', 'another', 'nature', 'could', 'build', 'scraping', 'engine', 'capture', 'articles', 'httpsspiderbitesnytimescom', 'ideally', 'though', 'would', 'already', 'xml', 'file', 'format', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'na', 'course', 'reproducing', 'et', 'al', 'online', 'mcsds', 'overview', 'objectives', 'installation', 'example', 'results', 'discussion', 'implement', 'framework', 'itmtf', 'outlined', 'specifically', 'implementation', 'attempts', 'lda', 'gensim', 'perform', 'papers', 'presidential', 'election', 'experiment', 'attempt', 'replicate', 'table', 'figure', 'b', 'attempted', 'gensims', 'model', 'u', 'parameter', 'neccessary', 'install', 'following', 'dependencies', 'using', 'pip', 'pandas', 'httpspandaspydataorgpandasdocsstablegetting_startedinstallhtml', 'httpsradimrehurekcomgensim', 'nltk', 'httpswwwnltkorginstallhtml', 'scipy', 'httpswwwscipyorginstallhtml', 'numpy', 'httpsnumpyorginstall', 'clone', 'repository', 'making', 'local', 'copy', 'files', 'also', 'working', 'directory', 'code', 'implemented', 'itmtfpresidentialpy', 'objects', 'reproduce', 'automatically', 'consumed', 'script', 'navigate', 'cloned', 'run', 'command', 'analyze', 'resulting', 'csv', 'causal_topic_wordscsv', 'contains', 'top', 'five', 'words', 'identified', 'imtmf', 'iteration', 'different', 'runs', 'initial', 'number', 'itmtf_statscsv', 'average', 'causality', 'confidence', 'purity', 'statistics', 'general', 'poorer', 'implementations', 'noted', 'improvements', 'observed', 'iterations', 'seemed', 'applicable', 'compelling', 'one', 'likely', 'due', 'differences', 'lack', 'background', 'although', 'doesnt', 'explicitly', 'cite', 'prior', 'imply', 'seem', 'lot', 'ex', 'main', 'reason', 'substantially', 'lower', 'purities', 'vs', 'neither', 'improved', 'regardless', 'begin', 'ensured', 'appeared', 'next', 'university', 'illinois', 'urbana', 'champaign', 'final', 'progress', 'report', 'made', 'thus', 'far', 'read', 'obtained', 'times', 'annotated', 'corpus', 'linguistic', 'consortium', 'downloaded', 'nyt', 'document', 'remaining', 'tasks', 'loop', 'create', 'functions', 'parser', 'parse', 'inputs', 'list', 'timestamps', 'consisting', 'documenttimestamp', 'tuples', 'select', 'standard', 'library', 'train', 'produce', 'set', 'sample', 'challenges', 'size', 'significant', 'gb', 'fit', 'memory', 'laptop', 'ram', 'undertaking', 'im', 'taking', 'early', 'give', 'get', 'done', 'deliverables', 'source', 'documentation', 'presentation', 'member', 'reproduction', 'link', 'distribution', 'requirementstxt', 'provided', 'outlining', 'nonstandard', 'libraries', 'utilized', 'associated', 'versions', 'contained', 'within', 'convenience', 'serialized', 'pkl', 'easy', 'reuse', 'president_norm_stock_ts', 'nontext', 'containing', 'normalized', 'stock', 'prices', 'may', 'october', 'bushgore', 'race', 'gore_bush_nyt_ts', 'mentioning', 'either', 'bush', 'gore', 'cleaned_doc_list', 'collection', 'analyzed', 'ie', 'documents', 'represented', 'tokens', 'gensim_dictionary', 'dictionary', 'object', 'built', 'gore_bush_doc_list', 'gensim_corpus', 'wordids', 'counts', 'word_impact_dict', 'wordidimpact', 'scorepvalue', 'represents', 'result', 'section', 'wordlevel', 'analysis', 'runtime', 'scripts', 'reload_data', 'variable', 'false', 'reload', 'disk', 'true', 'build_datasets', 'parse_nyt_corpus_for_gore_bush', 'called', 'rebuild', 'respectively', 'since', 'large', 'uploaded', 'therefore', 'setting', 'recommended', 'additionally', 'build_new_corpus', 'rebuilding', 'passed', 'ldamodel', 'reperform', 'storing', 'per', 'word', 'id', 'quick', 'lookup', 'parameters', 'started', 'calling', 'recursive', 'function', 'min_significance_value', 'min_topic_prob', 'number_of_topics', 'causal_topics', 'itmtfgore_bush_gensim_corpusgore_bush_gensim_dictionarynumber_of_topicsnumber_of_topicsword_impact_dictgore_bush_nyt_tspresident_norm_stock_tsts_tsid_mapmin_significance_valuemin_topic_probiterations', 'call', 'specified', 'building', 'passing', 'matrix', 'num_topicsnum_unique_terms', 'calculated', 'probability', 'distributions', 'eta', 'recalculate', 'first', 'extracted', 'topiclevel', 'see', 'performed', 'pearson', 'correlation', 'reference', 'stream', 'price', 'topicword', 'build_prior_matrix', 'makes', 'appended', 'signficant', 'well', 'goal', 'aims', 'documented', 'note', 'defined', 'primarily', 'class', 'environment', 'dependent', 'slides', 'voiced', 'listen', 'open', 'pptx', 'powerpoint', 'slide', 'show', 'tab', 'hit', 'beginning', 'button', 'start', 'video', 'unable', 'directly', 'view', 'media', 'space', 'demoing']
https://github.com/Madokami/CourseProject	cs410 project proposal in your project proposal, please answer the following questions: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. xuzhizs2@illinois.edu (individual project) 2. which competition do you plan to join? text classification competition 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. i'm planning to learn about using tensor flow to build neural network classifiers. i've had some experience before doing image classification with opencv. 4. which programming language do you plan to use? python text classification competition project demo youtube link in case the youtube video is unavailable, the video can also be found in the github repo, named project_demo.wmv environment setup requires python3.8 and tensorflow already setup. one easy way is to directly use the tensorflow docker container which already has python and tensorflow installed: tensorflow/tensorflow:latest running the code python3 train.py // this will generate the ml model used to make classifications python3 evaluate.py // evaluates the test dataset and output results how the training works the model trained is a rnn (recurrent neural network). for each line of input, the response and the entire context, are read and tokenized as a text vector. specifically, a vocabulary is created from all the words observed, so each word could be represented using an integer between 0 and the maximum vocabulary size. each tokenized line along with its corresponding tag are then fed into the model for training. please upload your progress report to the github repo shared on cmt. the progress report should give us an idea of how you're implementing your proposal. it should answer 3 main questions: 1) which tasks have been completed? 2) which tasks are pending? 3) are you facing any challenges? 1. i set up a docker container to train a tensorflow recurrent neural network for the text classification competition. so far the best tf1 i got is around 0.69, which is about 0.03 away from the baseline. 2. need to work on improving the model to beat the baseline and create a video and documentation on running the model. 3. improving the model is easy, and takes a lot of trial and error. courseproject the topic of this course project is text classification competition. project demo video link: https://youtu.be/44ziyauvs78	['cs', 'project', 'proposal', 'please', 'answer', 'following', 'questions', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'xuzhizsillinoisedu', 'individual', 'competition', 'plan', 'join', 'text', 'classification', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'like', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'learning', 'etc', 'name', 'concrete', 'tools', 'may', 'heard', 'neural', 'network', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'im', 'planning', 'using', 'tensor', 'flow', 'build', 'ive', 'image', 'opencv', 'programming', 'language', 'use', 'python', 'demo', 'youtube', 'link', 'case', 'video', 'unavailable', 'also', 'found', 'github', 'repo', 'named', 'project_demowmv', 'environment', 'setup', 'requires', 'tensorflow', 'already', 'one', 'easy', 'way', 'directly', 'docker', 'container', 'installed', 'tensorflowtensorflowlatest', 'running', 'code', 'trainpy', 'generate', 'ml', 'model', 'used', 'make', 'classifications', 'evaluatepy', 'evaluates', 'test', 'dataset', 'output', 'results', 'training', 'works', 'trained', 'rnn', 'recurrent', 'line', 'input', 'response', 'entire', 'context', 'read', 'tokenized', 'vector', 'specifically', 'vocabulary', 'created', 'words', 'observed', 'word', 'could', 'represented', 'integer', 'maximum', 'size', 'along', 'corresponding', 'tag', 'fed', 'upload', 'progress', 'report', 'shared', 'cmt', 'give', 'us', 'idea', 'youre', 'implementing', 'main', 'tasks', 'completed', 'pending', 'facing', 'challenges', 'set', 'train', 'far', 'best', 'tf', 'got', 'around', 'away', 'baseline', 'need', 'work', 'improving', 'beat', 'create', 'documentation', 'takes', 'lot', 'trial', 'error', 'courseproject', 'topic', 'course', 'httpsyoutubeziyauvs']
https://github.com/NK10/CourseProject	"1) an overview of the function of the code (i.e., what it does and what it can be used for). as part of this project, i am predicting if a given text (tweet) be sarcasm and not_sarcasm based on the response text. this can be extend to other text based application like sentiment analysis where we can find if a text is sarcasam or not and based on that mark the text as positive or negative sen timent or retrain the model for sentiment analysis. if we have to repurpose the code, we do have to train it on the text data so that the model learn the underlying details for better prediction. * 2) documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. the code is implemented in python and using various library like pandas, numpy, transformer, sklearn. below is the snapshot o f the versions of different packages * about project * about data: * importing libraries and loading data * encoding the data to prepend and append the sentence with cls and sep token which is needed by bert # padding data : to keep the fixed length for each row of the text data in train and test. # creating attention mask : creating a attention mask for train and test data which is needed for the model # converting data to torch tensor # creating dataloader # pre processing of text data :to remove the noise from the text data. * loading bertforsequenceclassification model : loading pretrain bert model. * creating scheduler : needed for bert * training and validation of the model : where i am training the train data and doing the testing on validation test * prediction on testing data : predicting the label for the test data. * generating output file * references * i have trained the model on the google colab using the gpu option. without the gpu the training was taking 15 hours - 20 hours. with gpu i was able to trained the model in 5 min -10 mins. i have added the comments on the code file for better readability and explaining the steps. below are the high level steps. * 3) documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. go to 'https://colab.research.google.com/notebooks/intro.ipynb' * click on file, upload notebook and sign in with google account ( if you don't have an account, if possible create one. if it's not possible, please run it on any machine (preferred with gpu if not then cpu) with has the packages mentioned above. * * browse the file 'text classification competition.ipynb' * in order to run the code, we need an environment with the above packages. i would recommend to run it on google colab with gp u by following the below steps. * once the 'text classification competition.ipynb' is imported, please upload the test and train files by click on the arrow highlighted red below. if the arrow is not visible click on the folder icon on the left and then select the arrow: * final report saturday, december 12, 2020 12:31 am cs 410 text analysis page 1 https://margaretmz.medium.com/running-jupyter-notebook-with-colab-f4a29a9c7156 # please follow below link on how to import the file and run it on google colab gpu. * once gpu is selected on google colab runtime. click on runtime on the menu and select ""run all"" option as shown below * * same has been explained in the video attached on the github. 4) things i tried i have tried various method as mentioned below: i. i have done the preprocessing of the data like, removing stopwords, any character which is not alphanumeric, remove punctation. however with bert only preprocessing i did was remove the following tokens ('@user','..','<url>'). ii. i have tried various model, navies bayes (various variation like, multinomialnb,complementnb,bernoullinb), logistic regression, svm, however with all of these i was not able to beat the baseline. i was revolving around .66 -.70. out of all these bernoullinb was able to provide better result. iii. i have tried neural networks as well but still not able to beat the baseline. i was still revolving around .66 -.70 iv. i have tried cnn with various filters and kernel but still not able to beat the baseline. i was still revolving around .66 -.70 v. i have tried lstm with various combinations like, bidirectional, different units (64,128,256) and also regularization but still it revolve around .68 -.71. vi. in the end i have tried pretrained uncase base bert model and was able to beat the baseline. vii. 1) smoothing parameter for navies bayes 2) tried tfidf with various ngram_range 3) regularization l1 and l2 on deep neural network as well as other machine learning model. 4) used the word embedding 'glove.twitter.27b.100d.txt' as well as 'glove.twitter.27b.200d.txt' in neural network model. 5) tried adding dropouts, multilayer network in lstm/bidirectional lstm. i have tried various hyperparameter tuning for these models as well like: cs 410 text analysis page 2 as part of the final project, i have opted for the classification problem. below is the status for my progress: i have done the preprocessing of the data like, removing stopwords, any character which is not alphanumeric, remove punctation. a. i have tried various model, navies bayes, logistic regression, svm, however with all of these i was not able to beat the baseline. i am still revolving around .66 -.70 b. i have tried neural networks as well but still not able to beat the baseline. i am still revolving around .66 -.70 c. i have tried cnn with various filters and kernel but still not able to beat the baseline. i am still revolving around .66 -.70 d. i have tried lstm with various combinations like, bidirectional, different units (64,128,256) and also regularization but still it revolve around .68 -.71 e. progress made thus far: 1) a. i am still working on improving my vocabulary as well as will try bert to see if i can beat the baseline. remaining tasks: 2) a. i am still trying to find on how to improve the model f1 score to beat the baseline. i think improving the vocabulary will be helpful but not sure what other things should i try. any challenges/issues being faced: 3) progress report sunday, november 29, 2020 10:45 am cs 410 text analysis page 1 courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. team: 1) nitin kumar (uin : 656280346). i am working as individual. option selected : classification competition, yes, i am prepared to learn state-of-the-art neural network classifiers some of the neural classifiers and deep learning frameworks that you may have heard of. lstm, rnn,gru describe any relevant prior experience with such methods i have used some of these techniques for a proof of concept in one of my mooc courses. which programming language do you plan to use? i will be using the python and use keras library and other libraries like spacy, gensim or nltk courseproject following is the short description of the files: 1) final report.pdf : this contain the answers for the questions. 2) project_code_walk_through.mp4 : this is the video that shows walk thorugh of the code 3) text_classifocation_competition.ipynb : this is the code for the classifciation competition 4) answer.txt : this will contains the outcome of the prediction of 1800 records given as test data. 5) test.jsonl : this contains the 1800 test records 6) train.jsonl : this contains the 5000 train records. 7) progress report.pdf : this is old file which i submitted for progress report task. 8) proposal.md : this is initial proposal document i submitted at the begining of the project."	['overview', 'function', 'code', 'ie', 'used', 'part', 'project', 'predicting', 'given', 'text', 'tweet', 'sarcasm', 'not_sarcasm', 'based', 'response', 'extend', 'application', 'like', 'sentiment', 'analysis', 'find', 'sarcasam', 'mark', 'positive', 'negative', 'sen', 'timent', 'retrain', 'model', 'repurpose', 'train', 'data', 'learn', 'underlying', 'details', 'better', 'prediction', 'documentation', 'software', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'future', 'extension', 'improvement', 'python', 'using', 'various', 'library', 'pandas', 'numpy', 'transformer', 'sklearn', 'snapshot', 'f', 'versions', 'different', 'packages', 'importing', 'libraries', 'loading', 'encoding', 'prepend', 'append', 'sentence', 'cls', 'sep', 'token', 'needed', 'bert', 'padding', 'keep', 'fixed', 'length', 'row', 'test', 'creating', 'attention', 'mask', 'converting', 'torch', 'tensor', 'dataloader', 'pre', 'processing', 'remove', 'noise', 'bertforsequenceclassification', 'pretrain', 'scheduler', 'training', 'validation', 'testing', 'label', 'generating', 'output', 'file', 'references', 'trained', 'google', 'colab', 'gpu', 'option', 'without', 'taking', 'hours', 'able', 'min', 'mins', 'added', 'comments', 'readability', 'explaining', 'steps', 'high', 'level', 'usage', 'including', 'either', 'usages', 'apis', 'detailed', 'instructions', 'install', 'run', 'whichever', 'applicable', 'go', 'httpscolabresearchgooglecomnotebooksintroipynb', 'click', 'upload', 'notebook', 'sign', 'account', 'dont', 'possible', 'create', 'one', 'please', 'machine', 'preferred', 'cpu', 'mentioned', 'browse', 'classification', 'competitionipynb', 'order', 'need', 'environment', 'would', 'recommend', 'gp', 'u', 'following', 'imported', 'files', 'arrow', 'highlighted', 'red', 'visible', 'folder', 'icon', 'left', 'select', 'final', 'report', 'saturday', 'december', 'cs', 'page', 'httpsmargaretmzmediumcomrunningjupyternotebookwithcolabfaac', 'follow', 'link', 'import', 'selected', 'runtime', 'menu', 'shown', 'explained', 'video', 'attached', 'github', 'things', 'tried', 'method', 'done', 'preprocessing', 'removing', 'stopwords', 'character', 'alphanumeric', 'punctation', 'however', 'tokens', 'userurl', 'ii', 'navies', 'bayes', 'variation', 'multinomialnbcomplementnbbernoullinb', 'logistic', 'regression', 'svm', 'beat', 'baseline', 'revolving', 'around', 'bernoullinb', 'provide', 'result', 'iii', 'neural', 'networks', 'well', 'still', 'iv', 'cnn', 'filters', 'kernel', 'v', 'lstm', 'combinations', 'bidirectional', 'units', 'also', 'regularization', 'revolve', 'vi', 'end', 'pretrained', 'uncase', 'base', 'vii', 'smoothing', 'parameter', 'tfidf', 'ngram_range', 'l', 'deep', 'network', 'learning', 'word', 'embedding', 'glovetwitterbdtxt', 'adding', 'dropouts', 'multilayer', 'lstmbidirectional', 'hyperparameter', 'tuning', 'models', 'opted', 'problem', 'status', 'progress', 'b', 'c', 'e', 'made', 'thus', 'far', 'working', 'improving', 'vocabulary', 'try', 'see', 'remaining', 'tasks', 'trying', 'improve', 'score', 'think', 'helpful', 'sure', 'challengesissues', 'faced', 'sunday', 'november', 'courseproject', 'fork', 'repository', 'paste', 'microsoft', 'cmt', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'team', 'nitin', 'kumar', 'uin', 'individual', 'competition', 'yes', 'prepared', 'stateoftheart', 'classifiers', 'frameworks', 'may', 'heard', 'rnngru', 'describe', 'relevant', 'prior', 'experience', 'methods', 'techniques', 'proof', 'concept', 'mooc', 'courses', 'programming', 'language', 'plan', 'use', 'keras', 'spacy', 'gensim', 'nltk', 'short', 'description', 'reportpdf', 'contain', 'answers', 'questions', 'project_code_walk_throughmp', 'shows', 'walk', 'thorugh', 'text_classifocation_competitionipynb', 'classifciation', 'answertxt', 'contains', 'outcome', 'records', 'testjsonl', 'trainjsonl', 'old', 'submitted', 'task', 'proposalmd', 'initial', 'proposal', 'document', 'begining']
https://github.com/NikhilDIL/CourseProject	"team textminingmasters members: ndeena2, ajaw2, pwasal3, jiahuah2 project: reproducing a paper, mining casual topics in text data 1) progress made thus far: we have gathered and prepared the necessary data in order to perform one of the experiments stated in the paper. more specifically, we have parsed the nyt corpus and time series data from iowa electronic markets 2000 presidential winner-takes-all market using python and stored the data into a data structure. 2) remaining tasks: now that we've gathered and prepared the data the next step is to implement the iterative topic modeling with time series feedback algorithm stated in the paper, and feed in the data that we have prepared into that algorithm. then the next step is to perform some data visualization to understand our results. 3) any challenges/issues being faced: some parts of the algorithm are unclear to us. more specifically, steps 2 and 3. we are unsure on how to compute sig (c, x, t) in step 2, and how to apply granger tests to each of the candidate topics for step 3. project presentation team members: nikhil deenamsetty (ndeena2) peter wasala (pwasal3) angela jaw(ajaw2) jiahua he (jiahuah2) step 1: parsing data for time series prices data: we converted the data that we found online into a csv file which we read using pandas. `` df = pd.read_csv(""timeseriesprices.csv"") print(df) `` website link: https://iemweb.biz.uiowa.edu/pricehistory/pricehistory_selectcontract.cfm?market_id=29 for the nyt_corpus data: we loop through all the folders in order to reach the xml files and search for all the paragraphs that include the words ""gore"" and ""bush"" and use that to filter out the non-relevant documents. libraries used: os, tarfile, pandas, xml.etree. step 2: applying latent dirichlet analysis we get the topics by applying the topic modeling method (latent dirichlet analysis) to the set of documents with time stamps, let's call this set d. **the original experiment used plsa, but according to lecture, plsa and lda perform the same. we wanted to use lda since the gensim library has an lda function, and our plsa implementations take a very long time and are possibly incorrect.** step 3: get candidate causal topics with lags we use the granger tests to find topics with significant values greater than 1 - the output of the granger tests. we can get the set of candidate causal topics with lags, let's call this set ct. step 4: find the most significant causal words we apply the granger tests for each candidate topic in ct in order to find the most significant causal words. once we find those values, we record them. step 5: define a prior on the topic model parameters we need to separate the positive valued terms from the negative valued terms and ignore terms with values less than 10%. we can assign the prior probability proportions according to the significance levels. step 6: apply lda to d we use the prior from step 5. we use the feedback signals to guide lda to form topics that better correlate with the time series. step 7: repeat step 2 to step 5 we repeat steps 2 through 5 until the stopping criteria. once we reach the stopping criteria, the process stops and the function outputs ct, which is the output causal topic list. libraries we used in the project: for parsing, we use the libraries: os, tarfile, pandas, xml.etree. these libraries should already be included. for the iterative topic modeling framework with time series feedback function, we use the libraries: gensim, nltk, re, pprint, spacy. to install them, the commands are listed as below: conda install gensim conda install nltk conda install nltk conda install re conda install pprint conda install -c conda-forge spacy thank you so much! 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. a. nikhil deenamsetty ndeena2 (captain) b. peter john wasala pwasal3 c. jiahua he jiahuah2 d. angela carol jaw ajaw2 2. which paper have you chosen? a. mining causal topics in text data: iterative topic modeling with time series feedback 3. which programming language do you plan to use a. python 4. can you obtain the datasets used in the paper for evaluation? a. yes. 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? a. n/a 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? a. n/a * what is the function of the tool? * to analyze textual topics in conjunction with external time series variables. * who will benefit from such a tool? * anyone that needs to analyze text along with time series variables. for example, stock traders can benefit from this tool because this tool could help a stock trader decide what stocks to buy, hold, or trade since news articles can tell more information about the future of a stocks' value. * does this kind of tool already exist? if similar tools exist, how is your tool different from them? would people care about the difference? * yes, this kind of tool already exists. the difference between the similar tool that we found and ours is that the similar tool that we found displays geometric properties and our tool displays prior distributions on parameters. people would probably prefer our tool more since it provides feedback at each iteration. * what existing resources can you use? * https://catalog.ldc.upenn.edu/ldc2008t19 (dataset) * https://spiderbites.nytimes.com/2000/ (nyt articles backup) * https://iemweb.biz.uiowa.edu/pricehistory/pricehistory_selectcontract.cfm?marke t_id=29 (iowa electronic markets (iem) time series data) * https://finance.yahoo.com/quote/aal/history?period1=946684800&period2=9782 20800&interval=1d&filter=history&frequency=1d&includeadjustedclose=true (american airlines stock data) * https://finance.yahoo.com/quote/aapl/history?period1=946684800&period2=978 220800&interval=1d&filter=history&frequency=1d&includeadjustedclose=true (apple stock data) * meta toolkit for topic modeling algorithms * what techniques/algorithms will you use to develop the tool? (it's fine if you just mention some vague idea.) * plsa or latent dirichlet analysis (lda) as topic model * granger causality measure testing * how will you demonstrate the usefulness of your tool? * give a presentation on how you could use this tool to help a user decide what stocks to buy, hold, or trade and show how news articles can influence stock prices. * a very rough timeline to show when you expect to finish what. (the timeline doesn't have to be accurate.) * gather data and necessary resources to complete project (10/25) * finish iterative topic modeling algorithm (11/15) * create documentation (11/22) * create presentation (11/29) cs 410 courseproject table of contents 1. project video 2. an overview of the function of the code 3. documentation of how the software is implemented 4. documentation of the usage of the software 5. brief description of the contribution of each team member 6. references project video project video 1. an overview of the function of the code (i.e., what it does and what it can be used for) we chose to reproduce the first experiement of the paper, mining causal topics in text data: iterative topic modeling with time series feedback, which is where the authors of the paper examine the 2000 u.s. presidential election. we do this by: first, we parse through both the time series prices data, which was from the iowa electronic markets(irm) time series data, as well as the nyt_corpus data. then we start implementing the iterative topic modeling framework with time series feedback as explained in the paper. using this data we are able to implement a general text mining framework for discovering causal topics from text by combining the probabilistic topic model with time series causal analysis to discover topics that are semantically coherent as well as correlated with the time series data. by iterating through the data, we can refine the topics which increase the correlation of the topics with the time series. we can use this function in order to analyze textual topics in conjunction with external time series variables such as stocks what we implemented can be used to find the causal relationships between text data and non-text data, between media coverage and public opinion. thus, our code can potentially be modified in order to identify target paragraphs for topics relating to not just the 2000 u.s. presidential election but instead can be used for other things such as measuring the relationship between the public's response to topics such as climate change, corona virus, as well as other issues. 2. documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement for the time series prices data, we converted the data that we found online on this site into a csv file which we read using pandas. for the nyt_corpus data, we loop through all the folders in order to reach the xml files and search for all the paragraphs that include the words ""gore"" and ""bush"" and use that to filter out the non-relevant documents. the iterative topic modeling framework with time series feedback function can be broken down into the following six parts first, we get the topics by applying the topic modeling method (latent dirichlet analysis) to the set of documents with time stamps, let's call this set d the original experiment used plsa, but according to lecture, plsa and lda perform the same. we wanted to use lda since the gensim library has an lda function, and our plsa implementations take a very long time and are possibly incorrect. second, we use the granger tests to find topics with significant values greater than 1 - the output of the granger tests. then we can get the set of candidate causal topics with lag, let's call this set ct. third, we apply the granger tests for each candidate topic in ct in order to find the most significant causal words. once we find those values, we record them. fourth, we define a prior on the topic model parameters using significant terms and their values first, we need to separate the positive valued terms from the negative valued terms. we can ignore terms with values less than 10% then, we can assign the prior probability proportions according to the significance levels fifth, we use the prior from step 4 to apply lda to d this is the part that uses the feedback signals and guides lda to form topics that better correlate with the time series sixth, we repeat steps two through five until the stopping criteria. once we reach the stopping criteria, the process stops and the function outputs ct, which is the output causal topic list 3. documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run the software, whichever is applicable this project was run using python version 3.8. make sure you have access to jupyter notebook either by installing jupyter by following the directions at this link or by installing anaconda by following the directions at this link for parsing, we use the libraries: os, tarfile, xml.dom.minidom, pandas, xml.etree. these libraries should already be included in python. for the iterative topic modeling framework with time series feedback function, we use the libraries: gensim, nltk, re, pprint, spacy. to use these libraries, you need to install them which you can do by doing the following commands in the command prompt (the one we used was the anaconda prompt): - conda install gensim - conda install nltk - conda install re - conda install pprint - conda install -c conda-forage spacy after installing all the libraries, once you launch the notebook, you should be able to run each cell in the notebook by pressting the ""restart and run all"" button or you can run each cell one at a time by pressing the ""run"" button. 4. brief description of the contribution of each team member in case of a multi-person team in general, we worked together as a group on a call and gave each other advice and helped when possible whether it be by looking at the current issue, clarify what the iterative topic modeling framework with time series feedback function is doing, or googling resources such as libraries to use. down below is what we were tasked with, but we worked on things outside of what we were in charge of. nikhil deenamsetty (ndeena2) in charge of the iterative topic modeling framework with time series feedback function parts 2 and 3 peter wasala (pwasal3) in charge of the iterative topic modeling framework with time series feedback function parts 1, 4, 5 angela jaw (ajaw2) in charge of parsing data, wrote up the documentation, helped when asked, did tasks assigned to me jiahua he (jiahuah2) in charge of parsing data, worked on the presentation, helped when asked, did tasks assigned to me 5. references topic modeling with gensim (python) topic distribution statsmodel documentation"	['team', 'textminingmasters', 'members', 'ndeena', 'ajaw', 'pwasal', 'jiahuah', 'project', 'reproducing', 'paper', 'mining', 'casual', 'topics', 'text', 'data', 'progress', 'made', 'thus', 'far', 'gathered', 'prepared', 'necessary', 'order', 'perform', 'one', 'experiments', 'stated', 'specifically', 'parsed', 'nyt', 'corpus', 'time', 'series', 'iowa', 'electronic', 'markets', 'presidential', 'winnertakesall', 'market', 'using', 'python', 'stored', 'structure', 'remaining', 'tasks', 'weve', 'next', 'step', 'implement', 'iterative', 'topic', 'modeling', 'feedback', 'algorithm', 'feed', 'visualization', 'understand', 'results', 'challengesissues', 'faced', 'parts', 'unclear', 'us', 'steps', 'unsure', 'compute', 'sig', 'c', 'x', 'apply', 'granger', 'tests', 'candidate', 'presentation', 'nikhil', 'deenamsetty', 'peter', 'wasala', 'angela', 'jawajaw', 'jiahua', 'parsing', 'prices', 'converted', 'found', 'online', 'csv', 'file', 'read', 'pandas', 'df', 'pdread_csvtimeseriespricescsv', 'printdf', 'website', 'link', 'httpsiemwebbizuiowaedupricehistorypricehistory_selectcontractcfmmarket_id', 'nyt_corpus', 'loop', 'folders', 'reach', 'xml', 'files', 'search', 'paragraphs', 'include', 'words', 'gore', 'bush', 'use', 'filter', 'nonrelevant', 'documents', 'libraries', 'used', 'os', 'tarfile', 'xmletree', 'applying', 'latent', 'dirichlet', 'analysis', 'get', 'method', 'set', 'stamps', 'lets', 'call', 'original', 'experiment', 'plsa', 'according', 'lecture', 'lda', 'wanted', 'since', 'gensim', 'library', 'function', 'implementations', 'take', 'long', 'possibly', 'incorrect', 'causal', 'lags', 'find', 'significant', 'values', 'greater', 'output', 'ct', 'record', 'define', 'prior', 'model', 'parameters', 'need', 'separate', 'positive', 'valued', 'terms', 'negative', 'ignore', 'less', 'assign', 'probability', 'proportions', 'significance', 'levels', 'signals', 'guide', 'form', 'better', 'correlate', 'repeat', 'stopping', 'criteria', 'process', 'stops', 'outputs', 'list', 'already', 'included', 'framework', 'nltk', 'pprint', 'spacy', 'install', 'commands', 'listed', 'conda', 'condaforge', 'thank', 'much', 'names', 'netids', 'captain', 'administrative', 'duties', 'b', 'john', 'carol', 'jaw', 'chosen', 'programming', 'language', 'plan', 'obtain', 'datasets', 'evaluation', 'yes', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'na', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'introduced', 'tool', 'analyze', 'textual', 'conjunction', 'external', 'variables', 'benefit', 'anyone', 'needs', 'along', 'example', 'stock', 'traders', 'could', 'help', 'trader', 'decide', 'stocks', 'buy', 'hold', 'trade', 'news', 'articles', 'tell', 'information', 'future', 'value', 'kind', 'exist', 'tools', 'different', 'would', 'people', 'care', 'difference', 'exists', 'displays', 'geometric', 'properties', 'distributions', 'probably', 'prefer', 'provides', 'iteration', 'existing', 'resources', 'httpscatalogldcupenneduldct', 'httpsspiderbitesnytimescom', 'backup', 'httpsiemwebbizuiowaedupricehistorypricehistory_selectcontractcfmmarke', 't_id', 'iem', 'httpsfinanceyahoocomquoteaalhistoryperiodperiod', 'intervaldfilterhistoryfrequencydincludeadjustedclosetrue', 'american', 'airlines', 'httpsfinanceyahoocomquoteaaplhistoryperiodperiod', 'apple', 'meta', 'toolkit', 'algorithms', 'techniquesalgorithms', 'develop', 'fine', 'mention', 'vague', 'idea', 'causality', 'measure', 'testing', 'usefulness', 'give', 'user', 'show', 'influence', 'rough', 'timeline', 'expect', 'finish', 'doesnt', 'accurate', 'gather', 'complete', 'create', 'documentation', 'cs', 'courseproject', 'table', 'contents', 'video', 'overview', 'code', 'software', 'implemented', 'usage', 'brief', 'description', 'contribution', 'member', 'references', 'ie', 'chose', 'reproduce', 'first', 'experiement', 'authors', 'examine', 'election', 'parse', 'marketsirm', 'well', 'start', 'implementing', 'explained', 'able', 'general', 'discovering', 'combining', 'probabilistic', 'discover', 'semantically', 'coherent', 'correlated', 'iterating', 'refine', 'increase', 'correlation', 'relationships', 'nontext', 'media', 'coverage', 'public', 'opinion', 'potentially', 'modified', 'identify', 'target', 'relating', 'instead', 'things', 'measuring', 'relationship', 'publics', 'response', 'climate', 'change', 'corona', 'virus', 'issues', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'extension', 'improvement', 'site', 'broken', 'following', 'six', 'second', 'lag', 'third', 'fourth', 'fifth', 'part', 'uses', 'guides', 'sixth', 'two', 'five', 'including', 'either', 'usages', 'apis', 'detailed', 'instructions', 'run', 'whichever', 'applicable', 'make', 'sure', 'access', 'jupyter', 'notebook', 'installing', 'directions', 'anaconda', 'xmldomminidom', 'command', 'prompt', 'condaforage', 'launch', 'cell', 'pressting', 'restart', 'button', 'pressing', 'case', 'multiperson', 'worked', 'together', 'group', 'gave', 'advice', 'helped', 'possible', 'whether', 'looking', 'current', 'issue', 'clarify', 'googling', 'tasked', 'outside', 'charge', 'wrote', 'asked', 'assigned', 'distribution', 'statsmodel']
https://github.com/PSUlion16/CourseProject	"cs 410 project topics overview we will use microsoft cmt to manage course project grading. each student should please create an account there using their illinois email ids. after deciding your topics, each student should please enter their details in this sign-up sheet. carefully enter the information used while registering in cmt into the first few columns (this information will be used for grading, so please be careful! ). then, enter your group name (could be anything) and project topic. only the group leader needs to enter the project topic. however, every student needs to enter all other details. this needs to be completed before the proposal submission, i.e. before oct, 25 to facilitate grading. multiple groups can choose the same topic. feel free to coordinate with other groups working on the same topic. for example, different groups can work on separate sub-tasks to increase the project-scope and overall contribution. for the course project topics, we provide five broad categories of options for you: 1. you can choose to reproduce the model and results in a published paper. we provide some papers below. if you choose one of those papers, your project proposal is almost certain to get ""approved""*. 2. you can choose to improve over a current system by adding a function that is relevant to this course. we provide some systems and candidate functions to add below. if you choose among those systems and functions, your project proposal is almost certain to get ""approved""*. 3. it is possible that you work on other papers or systems that are not listed by us. 4. you can choose to join a text classification competition, or an information retrieval competition. if you choose this option, your project proposal is almost certain to get ""approved""*. 5. you can freely propose a topic relevant to this course. * for all the categories, the instructors will carefully review your project proposals and provide feedback. if we find your project topic/plan has some limitations, we will provide suggestions to improve it or suggest you to pick one of the sample topics. you're allowed to change topics after the proposal stage based on our feedback. more detailed information about each option is given below. option 1: reproducing a paper you can choose to reproduce one of the following papers from one of the following subtopics: * subtopic: latent aspect rating analysis * hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 * subtopic: pattern annotation * qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 * subtopic: contextual text mining * chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 * qiaozhu mei and chengxiang zhai. 2006. a mixture model for contextual text mining. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 649-655. doi=10.1145/1150402.1150482 * qiaozhu mei, chao liu, hang su, and chengxiang zhai. 2006. a probabilistic approach to spatiotemporal theme pattern mining on weblogs. in proceedings of the 15th international conference on world wide web (www 2006). acm, new york, ny, usa, 533-542. doi=10.1145/1135777.1135857 * subtopic: causal topic modeling * hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 all these papers are discussed in the lectures of week 12. once you have chosen one of these papers, please provide clear answers to the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. which paper have you chosen? 3. which programming language do you plan to use? 4. can you obtain the datasets used in the paper for evaluation? 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? at the final stage of your project, you need to deliver the following: * your documented source code and main results. * a demo that shows your code can actually run on the test dataset and generate the desired results. you don't need to run the training process during the demo. if your code takes too long to run, try to optimize it, or write some intermediate results (e.g. inverted index, trained model parameters, etc.) to disk beforehand. * discuss how your results match or mismatch those reported in the original paper. your results should cover all the main aspects and datasets discussed in the paper. * if some of your results do not match the paper, discuss possible reasons and solutions. option 2: improving a system you may choose to improve a system or service. we provide some candidates below. depending on your group size and the complexity of the techniques you develop, you may choose to work on one or several sub-topics provided per system. again, it should take you at least 20*n hours, where n is the total number of students in your team. 2.1 meta toolkit by now, you should all be familiar with the meta toolkit and its python library metapy. you can also refer to the publication. choose this option if you wish to contribute to it as stated below. * enhance meta and metapy usability many of you have experienced difficulties while using metapy in assignments this semester. you now have a chance to improve it so that future students and researchers can use this useful resource easily! some ideas for improvement are given below: * make metapy compatible with the latest python versions and different os systems * integrate it with existing popular toolkits e.g. nltk, gensim * enhance available tutorials for installing and using the tool on different platforms * add text mining functions to the meta toolkit the aim of this subtopic is to add some existing text mining algorithms to meta. note that the papers mentioned below are all discussed in the lectures of week 12 but cannot go to option 1 because there are online github repositories that implement them. if you want to borrow some code snippets from some repositories, make sure the licenses of those repositories allow you to do so, and you should follow the instructions in the licenses. if a repository does not have a license file, according to github, the default copyright laws apply, meaning that the authors retain all rights to their source code and no one may reproduce, distribute, or create derivative works from their work. that means you cannot use codes from github repositories without a proper license unless you obtain explicit written permission from the authors. * latent aspect rating analysis, given by the following paper # hongning wang, yue lu, and chengxiang zhai, latent aspect rating analysis on review text data: a rating regression approach. in proceedings of acm kdd 2010, pp. 783-792, 2010. doi=10.1145/1835804.1835903 * topic modeling with network regularization, given by the following paper # qiaozhu mei, deng cai, duo zhang, and chengxiang zhai. 2008. topic modeling with network regularization. in proceedings of the 17th international conference on world wide web (www 2008). acm, new york, ny, usa, 101-110. doi=10.1145/1367497.1367512 2.2 expertsearch system the expertsearch system (http://timan102.cs.illinois.edu/expertsearch//) was developed by some previous cs410 students as part of their course project! the system aims to find faculty specializing in the given research areas. the underlying data and ranker currently comes from the mp2 submissions of the previous course offering. you can read more about it here (sections 3.6 and 4: project are especially relevant). the code is available here. below are some ideas to improve and expand this system. you may choose to integrate your code with the existing system, or borrow some ideas from it, or build your own systems/algorithms from scratch. * automatically crawling faculty webpages recall that you developed scrapers for faculty web-pages in mp2.1, which, in general, can be a time-consuming task. so, the question is can we automate this process? some challenges include: * identifying faculty directory pages: first, we need to identify the pages from where faculty web-pages can be mined. in mp2.1, we used faculty directory pages as the starting point to find faculty webpages. so, given a university website, can we automatically identify the directory pages? this can be posed as a classification task, i.e. classify a url into a directory page vs. non-directory page. we have a huge resource of directory page urls available in the sign-up sheet. these can be the ""positive"" examples. you can get a list of some random urls online or crawl some other pages to get urls(e.g. other urls on the university websites, product websites, news sites,etc.). these would be the ""negative"" examples. * identifying faculty webpage urls: next, we need to extract the faculty webpages from the directory pages. this can again be posed as a classification task. given a url, can we identify whether it is a faculty webpage or not? we have a huge resource of faculty webpage urls (available under mp2.3 on coursera). these would be the ""positive"" examples. you can get a list of some random urls online or crawl some other pages to get urls (e.g. other urls on the university websites, product websites, news sites, etc.) to get the ""negative"" labels. * extracting relevant information from faculty bios: the problem here is to convert the unstructured text in faculty webpages into more structured text. such structured information would enhance the utility of the system. for example, in the expertsearch system, emails and faculty names extracted from bios are shown in the search results. users can click on the ""mail"" button to directly mail the faculty. extraction is done using regex-based techniques and named entity recognition (ner) that don't always work well. can you improve those existing techniques? you can also develop techniques for extracting other information, e.g. faculty research interests. for example, you may perform topic mining  on the bios available under mp2.3 on coursera. the top-keywords per topic could be the common research areas. you might also perform keyword extraction  from faculty bios, research papers, etc. 2.3 educationalweb system the educationalweb system (http://timan102.cs.illinois.edu/explanation//slide/cs-410/0) is a tool to help students learn from course slides. it has two main functionalities currently: 1) retrieve and recommend relevant slides for each slide. you can read more about this in the following papers web of slides, wos demo.; 2) find an explanation of a term/phrase on the slide by highlighting it and then clicking on the ""cap/scholar"" button on the top-right of a slide. it will try to retrieve a relevant section from the professor's textbook that contains an explanation of the selected phrase. you can read more about the underlying algorithm here. the code for the system is available here. below are some ideas to improve and expand this system. you may choose to integrate your code with the existing system, or borrow some ideas from it, or build your own systems/algorithms. * improving the usability and reach of the existing system some of you might have used the system and identified potential areas of improvement. the aim of this subtopic is to refine the current version of educationweb. some specific ideas include (many are borrowed from this piazza post): 1. scale up the current system. add more slides and courses from multiple sources e.g. coursera, uiuc courses, etc. and run the existing algorithms on them. again, it might be useful to think about automatic crawling similar to the subtopic in 2.2 above. it would be very interesting to see the interaction between slides/textbooks at a large scale!! 2. improve the performance of the system. currently, loading each slide takes time. 3. allow downloading slides in bulk. currently, we can only download one slide at a time. 4. add more context to the explanations (e.g. link to the specific page in the textbook) 5. allow adding additional courses/lectures directly from the web interface. this would also involve dynamically identifying the recommended/relevant slides for a new slide. currently, a static file is used which contains pre-computed recommendations for each slide. 6. integrate the tool with piazza/coursera, i.e. maybe link piazza/coursera to the tool or vice-versa. alternatively, add discussion forum and video capabilities to the tool so that it serves as a one-stop-shop for all users' educational needs. 7. link to latest related research articles: in this way, the lecture content can be automatically updated 8. you could also work on improving the current recommendation, search and explanation mining algorithms (described in the papers at the beginning of this section 2.3) * automatically creating teaching material for in-demand skills this subtopic is an extended version of the existing educationweb system. there is an increasing demand for skilled workers in the industry. quality education is not easily accessible to everyone due to barriers such as high cost, geographical and language barriers, etc. also, instructors cannot be available 24*7 to provide personalized support to all learners. in this subtopic, the overarching aim is to tackle some of these issues. in particular, the following tasks might be good starting points. * identifying in-demand skills: you can crawl and analyze relevant sections of job boards, news articles, scientific articles, social media, etc. to automatically identify the emerging keywords /topics. for this, you may refer to some papers on contextual text mining (mentioned in option 1 of this document). * creating lectures and tutorials for those skills: for this, you may consider lecture slides (e.g. from coursera courses) as the basic units of knowledge. then, the task could be to find the most relevant slides or clusters of slides (could be across multiple courses/lectures) for a given skill (topic). you may borrow some ideas from the educationweb system for this. you may also use the slides in existing lectures on some topics as the ""relevant slides"" for those topics. in this way, you can automatically generate training data for supervised learning. you could also combine knowledge from multiple sources (e.g. textbook sections, slides, videos, blogs, codebases) for creating more comprehensive tutorials. a more challenging task would be to automatically generate  the lectures/tutorials using techniques from natural language generation and abstractive text summarization. another interesting idea is to automatically generate agents , e.g. using virtual agent interaction framework (vaif). this goes beyond the material covered in class but could lead to some highly innovative and state-of-the-art projects! if you choose this option, please answer the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. what system have you chosen? which subtopic(s) under the system? 3. briefly describe the datasets, algorithms or techniques you plan to use 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly 6. which programming language do you plan to use? 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. at the final stage of your project, you need to deliver the following: * your documented source code. * a demo that shows your implementation actually works. if you are improving a function, compare your results to the previously available function. if your implementation works better, show it off. if not, discuss why. option 3: working on other papers or systems it is also possible that you work on other papers or systems that are not listed by us. because we do not list them, we will need more information from your proposal to decide whether you have a good topic. you may find more guidelines below. 3.1 reproducing an unlisted paper if you choose to reproduce a paper not listed under option 1, please make sure that your chosen paper satisfies the following criteria: 1. the paper should solve one of the research challenges introduced in lectures. 2. the paper should be published at a trustable venue (i.e. conference or journal). some examples include acm sigir, kdd, emnlp, acl, learning @ scale, edm, etc. if you can find cheng's paper(s) at some venue, then that venue is likely to be trustable. 3. there should be no publicly available implementation for this paper. for example, if the main method in a paper is already released on github or built into a library, you cannot choose that paper. 4. the main method in the paper should be advanced enough so that the work of reproducing it likely takes at least 20*n hours, where n is the total number of students in your team. you may justify this by listing the main tasks to be completed and the estimated time cost for each task. in your proposal, please explain how your chosen paper satisfies the above criteria, and also answer the questions listed under option 1. other requirements are the same as option 1. 3.2 improving over a paper you can choose to improve over a paper that is relevant to one of the tasks introduced in the lectures. if you choose this option, please answer the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. what paper have you chosen? 3. what is your idea for improving the paper/system? why do you think your idea will hopefully work better? 4. how are you going to evaluate your idea? what are the datasets and baseline methods? 5. which programming language do you plan to use? 6. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. at the final stage of your project, you need to deliver the following: * your documented source code and main results. * a demo that shows your code can actually run on the test dataset and generate the desired results. you don't need to run the training process during the demo. if your code takes too long to run, try to optimize it, or write some intermediate results (e.g. inverted index, trained model parameters, etc.) to disk beforehand. * if your idea works, discuss what advantages it has over the original paper, and what possible limitations are still there in your method. if your idea does not work, don't worry - just discuss possible causes and potential solutions, and you will get your credits as long as your study is solid and your discussion is thorough. 3.3 adding an unlisted function to a listed system you can choose to improve one of the systems listed under option 2 by adding a function that is not listed there but relevant to the course content. if you choose this option, please answer the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. what system have you chosen? what function are you adding? how will the new function benefit the users? 3. how will you demonstrate that the new function works as expected? 4. how will your code communicate with or utilize the system? 5. which programming language do you plan to use? 6. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. at the final stage of your project, you need to deliver the following: * your documented source code. explain how your code communicates with or utilize the system. * a demo that shows your implementation actually works. 3.4 improving over an unlisted system you can choose to improve a system or service that is relevant to the course content but not listed under option 2. you may either add a new function to the system or improve the performance of an existing function. if you choose this option, please answer the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. what system have you chosen? are you adding a function or improving a function? what function? 3. if you are adding a function, why is the new function important or interesting? how will it benefit the users? if you are improving a function, what are the main limitations of the current function? how are you going to improve it? how will your improvements benefit the users? 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? 5. how will your code communicate with or utilize the system? 6. which programming language do you plan to use? 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. at the final stage of your project, you need to deliver the following: * your documented source code. explain how your code communicates with or utilize the system. * a demo that shows your implementation actually works. if you are improving a function, compare your results to the previously available function. if your implementation works better, show it off. if not, discuss why. option 4: competitions this option may fit you well if you would like to gain some experience in state-of-the-art text classification or information retrieval practices. you will need to research by yourselves some cutting-edge models that are more recent than those introduced in the lectures. of course your tas will be there for you when you need help. performance is the most important factor. once you achieve the state-of-the-art performance, we give you a bonus (10% extra credit) that can be used to cover any loss of points in the project caused by small mistakes. we hope you can have fun in learning and trying recent methods in this option. we are thinking of hosting an information retrieval (ir) competition and a text classification competition. you will have access to the text and labels of a training dataset and the text of the test dataset, but you cannot see the labels of the test set. you will then develop a text classifier or a document ranker and submit your test set predictions. we will automatically evaluate your results on the test dataset and release the test set performance of all participating teams on a leaderboard (the setup would be similar to mp2.4). the text classification competition is available here. it is also available on livedatalab along with the baseline scores. the ir competition is available here. it is also available on livedatalab along with the baseline scores. you're allowed to use pre-built machine learning packages. however, if you find someone's solutions (source code) to similar competitions online, you may not use them directly. you're free to borrow some of their ideas with proper citations and credit attribution. you can also use publicly available external datasets but please make sure they don't overlap with the test sets. in each competition, you will compete with a competitive baseline and your classmates. your grade will largely depend on your test set performance. recall that in your project grading, there is 45% on ""source code submission"". (you can find the project grade composition in week 1.) assuming that there is no issue with your submitted source code, that 45% will be graded with the following criteria based on your test set performance on the leaderboard: * if you outperform the baseline, you get all 45%, plus 10% extra credit to make it up for you if you lose points in other parts of the project. the extra credit will not make you earn more than 100% for your project, and cannot be applied to other parts of this course. * if you do not outperform the baseline but make a valid submission, you get 15% + 30% * (1 - (r-1)/n), where r is your rank on the leaderboard and n is the total number of teams that have chosen this option. if there is an issue with your source code (e.g. using others' code without properly handled copyright, obvious bugs, etc.), it is possible that you get a lower score than those listed above. in your project proposal, please answer the following questions: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. which competition do you plan to join? 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods 4. which programming language do you plan to use? at the final stage of your project, you need to deliver the following: * your documented source code and test set predictions. * explain your model, and how you perform the training. describe your experiments with other methods that you may have tried and any hyperparameter tuning. * a demo that shows your code can actually run on the test set and generate your submitted predictions. you don't need to run the training process during the demo. if your code takes too long to run, try to optimize it, or write some intermediate results (e.g. inverted index, trained model parameters, etc.) to disk beforehand. option 5: free topics you may freely propose a topic that is not listed in this document but relevant to this course. in your proposal, please answer the following questions: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? 3. which programming language do you plan to use? 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. at the final stage of your project, you need to deliver the following: * your documented source code and main results. * self-evaluation. have you completed what you have planned? have you got the expected outcome? if not, discuss why. * a demo that shows your code can actually run and generate the desired results. if there is a training process involved, you don't need to show that process during the demo. if your code takes too long to run, try to optimize it, or write some intermediate results (e.g. inverted index, trained model parameters, etc.) to disk beforehand. cs410 project proposal name: chris toombs netid: ctoombs2@illinois.edu names and netids of members: for the scope of this project, i will be completing this text classification competition individually. my name and netid is listed at the top of this page for reference. intended competition: i intend to join the text classification competition, which is based around a sarcasm detector based on twitter posts. details of project: for the scope of this competition, i intend to complete my code using python, as i mainly focus on python at my current workplace and due purely to the ease of coding with python. i am very interested in this competition as there are direct parallels with my job at general motors in the field of text classification. in my current role, we have a need for classification of vehicle repair verbatems, so that we can more easily determine root cause in an automated fashion. this will be a related project which i can use in my day-to-day job. i am excited to use neural network classification techniques, and will be focusing mainly on word2vec and glove (although i am not sure which i will use yet). a few of my coworkers at work have used these, and python has a few libraries created to leverage, such as gensim. i will make it clear which approach i will take in my project documentation. i do not have prior experience with these frameworks however there is a robust set of documentation online which i can leverage. cs410 project status report name: chris toombs netid: ctoombs2@illinois.edu current progress: for this project, i am working on the twitter sarcasm detector as part of the text classification project. i have successfully created a python project with git integration to my project repository. i have verified that the repository connects successfully to live data lab. in terms of implementation of the project, i was going to use word2vec, but i am looking at utilizing gensim's doc2vec along with scikit-learn for classification. the reason for this is that doc2vec will allow me to retain semantics, whereas word2vec does not. i have successfully loaded in both the train and test data sets in my programs and have preprocessed the words using the nltk package and it's associated stop words. i am not going to perform stemming at this time, but i am adding some custom stop words (such as @user) to clean up the documents (i.e. tweets) remaining tasks: i will need to make documentation on how to run the program, as well as fully comment my code. to be completed, i need to instantiate my documents with word2vec and implement the logistic classifier. i also want to clean up my pre-processing step, so i will be working on that in the next couple of days. challenges: i've never used gensim before, so i will need to read up on that, but there seems to be a lot of content online regarding. i will be getting married this week, so i will not be completing this project (most likely) until next week, so i am going to try and get as much work done as possible from 11/29-12/1. so far, nothing blocking me from finishing this on time. ctoombs cs410 course project documentation description of this repository: answer.txt - classified answers based off the test.jsonl document provided to team classify.py - final code for the doc2vec twitter sarcasm model cs410_classification_demo link!!! - 20 minute demonstration of project, code, issues - https://mediaspace.illinois.edu/media/t/1_fltka8gr project_proposal_ctoombs2.pdf - proposal for project project_status_report_chris_toombs.pdf - status report from november in regards to project progress readme.md - full description and documentation for code twittersarcasmmodel.d2v - doc2vec model from successful submission of project to run the classifier: from pycharm: - you can load in the project repo as-is and run the code directly without modification - most environments will already have nltk and gensim included. if you get an error, just import those libraries to your environment from cli: - navigate to local folder for course project repo - type classifier.py note: this assumes you have python installed on your computer description of code my classify utilizes both gensim and nltk to classify the test data into sarcastic or non_sarcastic tweets. i was able to use the twittertokenizer to parse the reponse fields of the data into tokenized lists, with handles removed, words moved to lowercase, and repeated characters shortened to one. a brief description of the code methods: read_inputs() -- reads in both train and test files and tokenizes into lists initialize_doc2vec() -- initializes the doc2vec model based off the taggeddocument objects in the train list get_labels() -- determines the labels for the test dataset based off the doc2vec model saved in initialize_doc2vec() this method uses the infer_vector method of doc2vec to vectorize the test tweets output_results() -- outputs the data to answer.txt difficulties the most difficult part of this project was the hyperparameter tuning. much of the parameters had vague documentation and it seemed like use cases for parameter values varied greatlywith different users online. i probably spent 10-12 hours or so toying around with the parameters adding / removing items and observing behavior before landing on the set that worked for me. in the future, it may be more useful to find a more recent model with a larger user base, as it seems doc2vec is not as widely used (the git repo has not had a commit since 2018). i was confortable with the implementation of this as i have used word2vec in previous projects. references i saw a ton of forums for where people were discussing use cases, but the main sources i pulled from were the following: stackoverflow.com https://github.com/rare-technologies/gensim/blob/develop/gensim/models/doc2vec.py https://www.nltk.org/ https://github.com/rare-technologies/gensim/blob/develop/docs/notebooks/doc2vec-imdb.ipynb"	['cs', 'project', 'topics', 'overview', 'use', 'microsoft', 'cmt', 'manage', 'course', 'grading', 'student', 'please', 'create', 'account', 'using', 'illinois', 'email', 'ids', 'deciding', 'enter', 'details', 'signup', 'sheet', 'carefully', 'information', 'used', 'registering', 'first', 'columns', 'careful', 'group', 'name', 'could', 'anything', 'topic', 'leader', 'needs', 'however', 'every', 'completed', 'proposal', 'submission', 'ie', 'oct', 'facilitate', 'multiple', 'groups', 'choose', 'feel', 'free', 'coordinate', 'working', 'example', 'different', 'work', 'separate', 'subtasks', 'increase', 'projectscope', 'overall', 'contribution', 'provide', 'five', 'broad', 'categories', 'options', 'reproduce', 'model', 'results', 'published', 'paper', 'papers', 'one', 'almost', 'certain', 'get', 'approved', 'improve', 'current', 'system', 'adding', 'function', 'relevant', 'systems', 'candidate', 'functions', 'add', 'among', 'possible', 'listed', 'us', 'join', 'text', 'classification', 'competition', 'retrieval', 'option', 'freely', 'propose', 'instructors', 'review', 'proposals', 'feedback', 'find', 'topicplan', 'limitations', 'suggestions', 'suggest', 'pick', 'sample', 'youre', 'allowed', 'change', 'stage', 'based', 'detailed', 'given', 'reproducing', 'following', 'subtopics', 'subtopic', 'latent', 'aspect', 'rating', 'analysis', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'without', 'keyword', 'supervision', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'pattern', 'annotation', 'qiaozhu', 'mei', 'dong', 'xin', 'hong', 'cheng', 'jiawei', 'han', 'generating', 'semantic', 'annotations', 'frequent', 'patterns', 'context', 'th', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'data', 'mining', 'new', 'york', 'ny', 'usa', 'contextual', 'atulya', 'velivelli', 'bei', 'yu', 'crosscollection', 'mixture', 'comparative', 'chao', 'liu', 'hang', 'su', 'probabilistic', 'approach', 'spatiotemporal', 'theme', 'weblogs', 'world', 'wide', 'web', 'www', 'causal', 'modeling', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'thomas', 'rietz', 'daniel', 'diermeier', 'iterative', 'time', 'series', 'nd', 'management', 'cikm', 'discussed', 'lectures', 'week', 'chosen', 'clear', 'answers', 'questions', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'programming', 'language', 'plan', 'obtain', 'datasets', 'evaluation', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'final', 'need', 'deliver', 'documented', 'source', 'code', 'main', 'demo', 'shows', 'actually', 'run', 'test', 'generate', 'desired', 'dont', 'training', 'process', 'takes', 'long', 'try', 'optimize', 'write', 'intermediate', 'inverted', 'index', 'trained', 'parameters', 'etc', 'disk', 'beforehand', 'discuss', 'match', 'mismatch', 'reported', 'original', 'cover', 'aspects', 'reasons', 'solutions', 'improving', 'may', 'service', 'candidates', 'depending', 'size', 'complexity', 'techniques', 'develop', 'several', 'provided', 'per', 'take', 'least', 'n', 'hours', 'total', 'number', 'students', 'meta', 'toolkit', 'familiar', 'python', 'library', 'metapy', 'also', 'refer', 'publication', 'wish', 'contribute', 'stated', 'enhance', 'usability', 'many', 'experienced', 'difficulties', 'assignments', 'semester', 'chance', 'future', 'researchers', 'useful', 'resource', 'easily', 'ideas', 'improvement', 'make', 'compatible', 'latest', 'versions', 'os', 'integrate', 'existing', 'popular', 'toolkits', 'nltk', 'gensim', 'available', 'tutorials', 'installing', 'tool', 'platforms', 'aim', 'algorithms', 'note', 'mentioned', 'cannot', 'go', 'online', 'github', 'repositories', 'implement', 'want', 'borrow', 'snippets', 'sure', 'licenses', 'allow', 'follow', 'instructions', 'repository', 'license', 'file', 'according', 'default', 'copyright', 'laws', 'apply', 'meaning', 'authors', 'retain', 'rights', 'distribute', 'derivative', 'works', 'means', 'codes', 'proper', 'unless', 'explicit', 'written', 'permission', 'regression', 'network', 'regularization', 'deng', 'cai', 'duo', 'zhang', 'expertsearch', 'httptimancsillinoiseduexpertsearch', 'developed', 'previous', 'part', 'aims', 'faculty', 'specializing', 'research', 'areas', 'underlying', 'ranker', 'currently', 'comes', 'mp', 'submissions', 'offering', 'read', 'sections', 'especially', 'expand', 'build', 'systemsalgorithms', 'scratch', 'automatically', 'crawling', 'webpages', 'recall', 'scrapers', 'general', 'timeconsuming', 'task', 'automate', 'challenges', 'include', 'identifying', 'directory', 'pages', 'identify', 'mined', 'starting', 'point', 'university', 'website', 'posed', 'classify', 'url', 'page', 'vs', 'nondirectory', 'huge', 'urls', 'positive', 'examples', 'list', 'random', 'crawl', 'urlseg', 'websites', 'product', 'news', 'sitesetc', 'would', 'negative', 'webpage', 'next', 'extract', 'whether', 'coursera', 'sites', 'labels', 'extracting', 'bios', 'problem', 'convert', 'unstructured', 'structured', 'utility', 'emails', 'extracted', 'shown', 'search', 'users', 'click', 'mail', 'button', 'directly', 'extraction', 'done', 'regexbased', 'named', 'entity', 'recognition', 'ner', 'always', 'well', 'interests', 'perform', 'topkeywords', 'common', 'might', 'educationalweb', 'httptimancsillinoiseduexplanationslidecs', 'help', 'learn', 'slides', 'two', 'functionalities', 'retrieve', 'recommend', 'slide', 'wos', 'explanation', 'termphrase', 'highlighting', 'clicking', 'capscholar', 'topright', 'section', 'professors', 'textbook', 'contains', 'selected', 'phrase', 'algorithm', 'reach', 'identified', 'potential', 'refine', 'educationweb', 'specific', 'borrowed', 'piazza', 'post', 'scale', 'courses', 'sources', 'uiuc', 'think', 'automatic', 'interesting', 'see', 'interaction', 'slidestextbooks', 'large', 'performance', 'loading', 'downloading', 'bulk', 'download', 'explanations', 'link', 'additional', 'courseslectures', 'interface', 'involve', 'dynamically', 'recommendedrelevant', 'static', 'precomputed', 'recommendations', 'piazzacoursera', 'maybe', 'viceversa', 'alternatively', 'discussion', 'forum', 'video', 'capabilities', 'serves', 'onestopshop', 'educational', 'related', 'articles', 'way', 'lecture', 'content', 'updated', 'recommendation', 'described', 'beginning', 'creating', 'teaching', 'material', 'indemand', 'skills', 'extended', 'increasing', 'demand', 'skilled', 'workers', 'industry', 'quality', 'education', 'accessible', 'everyone', 'due', 'barriers', 'high', 'cost', 'geographical', 'personalized', 'support', 'learners', 'overarching', 'tackle', 'issues', 'particular', 'tasks', 'good', 'points', 'analyze', 'job', 'boards', 'scientific', 'social', 'media', 'emerging', 'keywords', 'document', 'consider', 'basic', 'units', 'clusters', 'across', 'skill', 'supervised', 'learning', 'combine', 'videos', 'blogs', 'codebases', 'comprehensive', 'challenging', 'lecturestutorials', 'natural', 'generation', 'abstractive', 'summarization', 'idea', 'agents', 'virtual', 'agent', 'framework', 'vaif', 'goes', 'beyond', 'covered', 'class', 'lead', 'highly', 'innovative', 'stateoftheart', 'projects', 'briefly', 'describe', 'expected', 'show', 'implementation', 'better', 'communicate', 'utilize', 'fine', 'state', 'clearly', 'justify', 'workload', 'estimated', 'compare', 'previously', 'decide', 'guidelines', 'unlisted', 'satisfies', 'criteria', 'solve', 'trustable', 'venue', 'journal', 'sigir', 'emnlp', 'acl', 'edm', 'chengs', 'likely', 'publicly', 'already', 'released', 'built', 'advanced', 'enough', 'listing', 'explain', 'requirements', 'papersystem', 'hopefully', 'evaluate', 'baseline', 'methods', 'advantages', 'still', 'worry', 'causes', 'credits', 'study', 'solid', 'thorough', 'benefit', 'communicates', 'either', 'important', 'improvements', 'competitions', 'fit', 'like', 'gain', 'experience', 'practices', 'cuttingedge', 'models', 'tas', 'factor', 'achieve', 'give', 'bonus', 'extra', 'credit', 'loss', 'caused', 'small', 'mistakes', 'hope', 'fun', 'trying', 'thinking', 'hosting', 'ir', 'access', 'set', 'classifier', 'submit', 'predictions', 'release', 'participating', 'teams', 'leaderboard', 'setup', 'livedatalab', 'along', 'scores', 'prebuilt', 'machine', 'packages', 'someones', 'citations', 'attribution', 'external', 'overlap', 'sets', 'compete', 'competitive', 'classmates', 'grade', 'largely', 'depend', 'composition', 'assuming', 'issue', 'submitted', 'graded', 'outperform', 'plus', 'lose', 'parts', 'earn', 'applied', 'valid', 'rn', 'r', 'rank', 'others', 'properly', 'handled', 'obvious', 'bugs', 'lower', 'score', 'prepared', 'query', 'expansion', 'fusion', 'concrete', 'tools', 'heard', 'neural', 'classifiers', 'deep', 'frameworks', 'prior', 'experiments', 'tried', 'hyperparameter', 'tuning', 'description', 'planned', 'involved', 'outcome', 'selfevaluation', 'got', 'chris', 'toombs', 'netid', 'ctoombsillinoisedu', 'scope', 'completing', 'individually', 'top', 'reference', 'intended', 'intend', 'around', 'sarcasm', 'detector', 'twitter', 'posts', 'complete', 'mainly', 'focus', 'workplace', 'purely', 'ease', 'coding', 'interested', 'direct', 'parallels', 'motors', 'field', 'role', 'vehicle', 'repair', 'verbatems', 'determine', 'root', 'cause', 'automated', 'fashion', 'daytoday', 'excited', 'focusing', 'wordvec', 'glove', 'although', 'yet', 'coworkers', 'libraries', 'created', 'leverage', 'documentation', 'robust', 'status', 'report', 'progress', 'git', 'integration', 'verified', 'connects', 'live', 'lab', 'terms', 'looking', 'utilizing', 'gensims', 'docvec', 'scikitlearn', 'reason', 'semantics', 'whereas', 'loaded', 'train', 'programs', 'preprocessed', 'words', 'package', 'associated', 'stop', 'stemming', 'custom', 'user', 'clean', 'documents', 'tweets', 'remaining', 'program', 'fully', 'comment', 'instantiate', 'logistic', 'preprocessing', 'step', 'couple', 'days', 'ive', 'never', 'seems', 'lot', 'regarding', 'getting', 'married', 'much', 'far', 'nothing', 'blocking', 'finishing', 'ctoombs', 'answertxt', 'classified', 'testjsonl', 'classifypy', 'cs_classification_demo', 'minute', 'demonstration', 'httpsmediaspaceillinoisedumediat_fltkagr', 'project_proposal_ctoombspdf', 'project_status_report_chris_toombspdf', 'november', 'regards', 'readmemd', 'full', 'twittersarcasmmodeldv', 'successful', 'pycharm', 'load', 'repo', 'asis', 'modification', 'environments', 'included', 'error', 'import', 'environment', 'cli', 'navigate', 'local', 'folder', 'type', 'classifierpy', 'assumes', 'installed', 'computer', 'utilizes', 'sarcastic', 'non_sarcastic', 'able', 'twittertokenizer', 'parse', 'reponse', 'fields', 'tokenized', 'lists', 'handles', 'removed', 'moved', 'lowercase', 'repeated', 'characters', 'shortened', 'brief', 'read_inputs', 'reads', 'files', 'tokenizes', 'initialize_docvec', 'initializes', 'taggeddocument', 'objects', 'get_labels', 'determines', 'saved', 'uses', 'infer_vector', 'vectorize', 'output_results', 'outputs', 'difficult', 'vague', 'seemed', 'cases', 'parameter', 'values', 'varied', 'greatlywith', 'probably', 'spent', 'toying', 'removing', 'items', 'observing', 'behavior', 'landing', 'worked', 'larger', 'base', 'widely', 'commit', 'since', 'confortable', 'references', 'saw', 'ton', 'forums', 'people', 'discussing', 'pulled', 'stackoverflowcom', 'httpsgithubcomraretechnologiesgensimblobdevelopgensimmodelsdocvecpy', 'httpswwwnltkorg', 'httpsgithubcomraretechnologiesgensimblobdevelopdocsnotebooksdocvecimdbipynb']
https://github.com/Parkkeo1/CourseProject	"cs 410 fa20 - project progress report 2.2 expertsearch system - extracting relevant information from faculty bios keon park, keonp2@illinois.edu background / overview my project is a system based on expertsearch  that, when finished, will automatically scrape and parse uiuc faculty pages from user-provided urls to extract key information about faculty members. my original proposal is available here: https://github.com/parkkeo1/courseproject. progress so far my work on the project so far has focused on text data retrieval, processing, and some keyword extraction and topic mining. my code is still in a wip jupyter notebook and has not yet been integrated into a full application. to get started, i am currently using my dataset of uiuc chbe faculty text data from my mp2.1. using this dataset, i have built a web scraper that scrapes text data from html tags whose css classes match common faculty profile sections (i.e. scrape only relevant content from the page). because faculty pages for a given department have the same or very similar format, i have implemented the ability to customize the web scraper's list of key css classes to match for each department at uiuc (currently only have one, for chbe). using the basic chbe faculty data, i have also developed working implementations of the following three key components in my application: 1. tokenizer, using spacy, with stop words + punctuation filtering and lemmatization. 2. tf-idf weighting, using scikit-learn; the trained vocabulary/index is able to be saved and loaded for use on new faculty data. 3. lda, using scikit-learn, the topic distributions are calculated using the training data, and the topic coverage for a new doc can be calculated too. with these parts working, i am able to scrape relevant text data from a faculty member page url not in the training data, tokenize/clean it, and add it to the existing tf-idf index/vocabulary to calculate its top weighted keywords and its topic coverage using lda. remaining tasks 1. refactor the existing components: scraper, tokenizer, tf-idf, and lda to work in a smooth pipeline for both training data and new user-input data such that: a. refine the scraper's ability to match relevant html tags for more different formats of faculty pages than just chbe's. b. for new faculty's text data, use spacy to find named entities and search for email and phone number tokens during the tokenization step, 2. test out the above functionality with a much bigger dataset (uiuc faculty bios from mp2.3) and refine/fix things as needed (the final application's tf-idf weights should be based on this as it should be more comprehensive over more different departments. 3. build out final backend and frontend to package work into a full application. challenges the main challenge i foresee in finishing this project is the frontend/ui and how i should approach designing and implementing the data visualizations for the faculty text mining results. given that i have already put in a lot of focus and effort on the text retrieval and mining components of the project, i may have settle for more basic data visualizations in the frontend than i originally planned, in order to keep my total project development time reasonable. cs 410 fa20 - project proposal 2.2 expertsearch system - extracting relevant information from faculty bios keon park, keonp2@illinois.edu (individual; captain) overview for my project, i plan to build upon expertsearch's extraction features and develop a new system that, given a faculty webpage's url, extracts not only names and emails but also other relevant information such as research and instruction areas by implementing keyword extraction on the text data. these extracted keywords will then function as ""tags"" that indicate faculty members' top topics/research areas. once finished, these features could be integrated into expertsearch to enhance its existing extraction utility. however, for now, my project will be a standalone system that will serve as a prototype for the new keyword extraction functionality. impact my system will tackle the problem of converting unstructured text into structured data by automatically and quickly summarizing faculty text data into topics/keywords for users to more easily understand. this will be better than what expertsearch currently does; apart from the faculty name/email extraction, it has users manually visit and read the faculty webpages if they desire to know more information, which may be burdensome as faculty webpages are often varied in format and content. thus, my system will allow users to more easily learn about faculty members with less manual effort. to demonstrate my system's usefulness, i will compare its results (containing structured information and topics) with expertsearch's results (basic word matches) for a given set of uiuc faculty. architecture my new system will be implemented as a web application, with a react.js frontend and python-flask backend. through the frontend, the user will be able to enter a url of a faculty webpage, which the backend will then scrape and extract information from. although my system will be separate from the existing expertsearch system, i plan to use its faculty name/email extraction code as a starting point/reference for my own implementation. data / techniques i plan to mainly use uiuc faculty and their webpages during development to test my system. for scraping text from faculty webpages, i will use my work from mp2.1 as a reference. to help implement my extraction techniques, i plan to use existing libraries such as nltk and textblob. key tasks + timeline 1. build web scraper with ability to detect and extract basic information from faculty profile sections (name, title, research, bio, contact, etc), using ner and html tags - 5 hours 2. implement keyword extraction to tag faculty to relevant topics (research areas, areas of expertise, etc) - 4 hours 3. test and refine web scraper and extraction functionality - 2 hours 4. incorporate code from steps 1-3 into flask backend - 2 hours 5. implement frontend for faculty webpage url queries and displaying results - 6 hours 6. integrate backend with frontend and finalize system - 3 hours keon park - cs 410 courseproject extracting relevant information from faculty bios (2.2) this repository contains the source code, data, and documentation for keon (isaac) park's final project for cs 410 fall 2020 at uiuc. this project is an extension/spin-off of the expertsearch system that seeks to build upon expertsearch's nlp features by extracting not only names and emails from faculty pages but also keywords, named entities, and topics in order to provide users with a more comprehensive overview without having to manually visit the page. this project was an individual effort by keon (isaac) park. software usage tutorial video the link to the tutorial video for this project is here. the video is a brief explanation of how to locally install/run and use the project code, including a example use case. the rest of this readme document also provides details regarding this software's functionality and implementation. overview as previously mentioned, this project is a standalone extension of the expertsearch system that provides improved nlp features to better analyze text in faculty web pages. in its current implementation, expertsearch only extracts the name and email of the faculty member from the page, limiting its use as a tool for users seeking more in-depth overviews of faculty members and their biographies. as a result, this project was developed with more advanced text retrieval and mining features to automatically provide users with a useful ""snapshot"" of faculty page content. it accomplishes this by scraping, processing, and analyzing text data from faculty pages via urls entered by the user using beautifulsoup, spacy, scikit-learn, and pre-trained tf-idf and lda models (available as .pkl files in the server/data directory) to automatically extract/calculate relevant keywords, named entities, and topics. for example, here is a screenshot of the system's results for uiuc professor tarek abdelzaher: as shown above, this software, like expertsearch includes the likely name and emails of the faculty member. it also provides detailed overviews of the system's calculated keywords, named entities, and topics with specific numbers to provide users with an effective ""snapshot"" of the page without visting it manually. for example, the user can deduce that professor abdelzaher is likely to be an engineering (likely cs or compe, due to keywords like system, transactions, and data) research professor involved/related with the institute of electrical and electronics engineers (ieee). pipeline the current pipeline of this sytem for retrieving, processing, and analyzing text data via user-provided urls is as follows: user enters a url of a faculty web page web-scrape the url and retrieve html source of the page retrieve text from ""relevant"" html tags containing useful information (match css classes of html tags; nlp/html_parser.py) perform ner to find names/organizations and find emails/links from text data using spacy tokenize text data into unigrams using spacy, keeping only alphabetic, non-stopword, noun/verb/adj tokens use tokenized documents for pre-trained scikit-learn tf-idf vectorizer (trained on ~600 uiuc faculty bios) to find keywords use tf-idf weights of document to calculate its topic coverage using pre-trained scikit-learn lda model and topic distributions compile results into dataframes, which are then converted into html and rendered in the results page. the code for this pipeline can be roughly traced in the query() route handler function in app.py. implementation this project/system is implemented as a flask web application with a python backend and html/css frontend. the code is organized like a standard flask application, in the following directory structure (not all files shown): courseproject/ | readme.md | .gitignore | ... +---server/ | app.py | train.py | config.py | requirements.txt +---data/ | tfidf.pkl | uiuc_bios.txt | ... +---nlp/ | scraper.py | html_parser.py | tfidf_lda.py | ... +---static/ | main.css +---templates/ base.html ... app.py houses the python code directly responsible for running the flask web application, including route handlers for the home and results pages. when the user enters and submits a url through the form in the home page, the flask app redirects the user to the /query endpoint with the provided url to invoke the corresponding route handler query() that is responsible for running the text retrieval and mining pipeline of the application. thus, most future changes/tweaks to this system's nlp pipeline will originate in this function (query()). train.py contains the python code necessary to train and save tf-idf and lda models using the uiuc faculty bios text data in the data directory; the model files generated by train.py are used by the flask application. config.py contains all of the constants used by both the flask application and train.py as configuration for various parameters during text retrieval and mining. for example, this file can be customized to tweak max_df and min_df used by the tf-idf vectorizer. the nlp directory contains all of the nlp-related code of the system, divided into individual modules/files that is used to perform scraping, tokenization, ner, keyword extraction, and topic mining. the functions in this package implement and use various nlp and data libraries, such as: beautifulsoup (for web-scraping), spacy (for tokenization and ner), scikit-learn (for tf-idf and lda), and pandas (for compiling results into dataframes). thus, most future changes to the specific nlp techniques used by this project will originate in this package and its specific modules. the data directory contains the trained tf-idf vectorizer and lda models as pickle files that are loaded in by the flask application when calculating tf-idf weights of keywords and topic coverages for the faculty page provided by the user. this directory also contains text files of uiuc faculty bios and urls compiled from the mp2.3 dataset; these data files are used by train.py to generate the .pkl files for the trained models. the static and template directories contain html/css code for the flask frontend. flask uses jinja2 templates. local setup these instructions assume the user is already knowledgeable of git and python environments and has python 3 (note: 3.7 was used during development) with pip installed. clone this repository bash git clone https://github.com/parkkeo1/courseproject.git cd courseproject create a new python venv and install dependencies bash python -m venv venv source venv/scripts/activate pip install -r server/requirements.txt python -m spacy download en_core_web_lg launch the software. bash cd server python train.py // if you want to to newly train and save a tf-idf and lda model based on data/uiuc_bios.txt to be later used by the flask app. python app.py // if you want to launch the project's main application, the flask app. if you launched the flask app, navigate to localhost:5000 in your web browser to view and use the flask app."	['cs', 'fa', 'project', 'progress', 'report', 'expertsearch', 'system', 'extracting', 'relevant', 'information', 'faculty', 'bios', 'keon', 'park', 'keonpillinoisedu', 'background', 'overview', 'based', 'finished', 'automatically', 'scrape', 'parse', 'uiuc', 'pages', 'userprovided', 'urls', 'extract', 'key', 'members', 'original', 'proposal', 'available', 'httpsgithubcomparkkeocourseproject', 'far', 'work', 'focused', 'text', 'data', 'retrieval', 'processing', 'keyword', 'extraction', 'topic', 'mining', 'code', 'still', 'wip', 'jupyter', 'notebook', 'yet', 'integrated', 'full', 'application', 'get', 'started', 'currently', 'using', 'dataset', 'chbe', 'mp', 'built', 'web', 'scraper', 'scrapes', 'html', 'tags', 'whose', 'css', 'classes', 'match', 'common', 'profile', 'sections', 'ie', 'content', 'page', 'given', 'department', 'similar', 'format', 'implemented', 'ability', 'customize', 'scrapers', 'list', 'one', 'basic', 'also', 'developed', 'working', 'implementations', 'following', 'three', 'components', 'tokenizer', 'spacy', 'stop', 'words', 'punctuation', 'filtering', 'lemmatization', 'tfidf', 'weighting', 'scikitlearn', 'trained', 'vocabularyindex', 'able', 'saved', 'loaded', 'use', 'new', 'lda', 'distributions', 'calculated', 'training', 'coverage', 'doc', 'parts', 'member', 'url', 'tokenizeclean', 'add', 'existing', 'indexvocabulary', 'calculate', 'top', 'weighted', 'keywords', 'remaining', 'tasks', 'refactor', 'smooth', 'pipeline', 'userinput', 'refine', 'different', 'formats', 'chbes', 'b', 'facultys', 'find', 'named', 'entities', 'search', 'email', 'phone', 'number', 'tokens', 'tokenization', 'step', 'test', 'functionality', 'much', 'bigger', 'refinefix', 'things', 'needed', 'final', 'applications', 'weights', 'comprehensive', 'departments', 'build', 'backend', 'frontend', 'package', 'challenges', 'main', 'challenge', 'foresee', 'finishing', 'frontendui', 'approach', 'designing', 'implementing', 'visualizations', 'results', 'already', 'put', 'lot', 'focus', 'effort', 'may', 'settle', 'originally', 'planned', 'order', 'keep', 'total', 'development', 'time', 'reasonable', 'individual', 'captain', 'plan', 'upon', 'expertsearchs', 'features', 'develop', 'webpages', 'extracts', 'names', 'emails', 'research', 'instruction', 'areas', 'extracted', 'function', 'indicate', 'topicsresearch', 'could', 'enhance', 'utility', 'however', 'standalone', 'serve', 'prototype', 'impact', 'tackle', 'problem', 'converting', 'unstructured', 'structured', 'quickly', 'summarizing', 'topicskeywords', 'users', 'easily', 'understand', 'better', 'apart', 'nameemail', 'manually', 'visit', 'read', 'desire', 'know', 'burdensome', 'often', 'varied', 'thus', 'allow', 'learn', 'less', 'manual', 'demonstrate', 'systems', 'usefulness', 'compare', 'containing', 'topics', 'word', 'matches', 'set', 'architecture', 'reactjs', 'pythonflask', 'user', 'enter', 'webpage', 'although', 'separate', 'starting', 'pointreference', 'implementation', 'techniques', 'mainly', 'scraping', 'reference', 'help', 'implement', 'libraries', 'nltk', 'textblob', 'timeline', 'detect', 'name', 'title', 'bio', 'contact', 'etc', 'ner', 'hours', 'tag', 'expertise', 'incorporate', 'steps', 'flask', 'queries', 'displaying', 'integrate', 'finalize', 'courseproject', 'repository', 'contains', 'source', 'documentation', 'isaac', 'parks', 'fall', 'extensionspinoff', 'seeks', 'nlp', 'provide', 'without', 'software', 'usage', 'tutorial', 'video', 'link', 'brief', 'explanation', 'locally', 'installrun', 'including', 'example', 'case', 'rest', 'readme', 'document', 'provides', 'details', 'regarding', 'softwares', 'previously', 'mentioned', 'extension', 'improved', 'analyze', 'current', 'limiting', 'tool', 'seeking', 'indepth', 'overviews', 'biographies', 'result', 'advanced', 'useful', 'snapshot', 'accomplishes', 'analyzing', 'via', 'entered', 'beautifulsoup', 'pretrained', 'models', 'pkl', 'files', 'serverdata', 'directory', 'extractcalculate', 'screenshot', 'professor', 'tarek', 'abdelzaher', 'shown', 'like', 'includes', 'likely', 'detailed', 'specific', 'numbers', 'effective', 'visting', 'deduce', 'engineering', 'compe', 'due', 'transactions', 'involvedrelated', 'institute', 'electrical', 'electronics', 'engineers', 'ieee', 'sytem', 'retrieving', 'follows', 'enters', 'webscrape', 'retrieve', 'nlphtml_parserpy', 'perform', 'namesorganizations', 'emailslinks', 'tokenize', 'unigrams', 'keeping', 'alphabetic', 'nonstopword', 'nounverbadj', 'tokenized', 'documents', 'vectorizer', 'model', 'compile', 'dataframes', 'converted', 'rendered', 'roughly', 'traced', 'query', 'route', 'handler', 'apppy', 'projectsystem', 'python', 'htmlcss', 'organized', 'standard', 'structure', 'readmemd', 'gitignore', 'server', 'trainpy', 'configpy', 'requirementstxt', 'tfidfpkl', 'uiuc_biostxt', 'scraperpy', 'html_parserpy', 'tfidf_ldapy', 'static', 'maincss', 'templates', 'basehtml', 'houses', 'directly', 'responsible', 'running', 'handlers', 'home', 'submits', 'form', 'app', 'redirects', 'endpoint', 'provided', 'invoke', 'corresponding', 'future', 'changestweaks', 'originate', 'necessary', 'train', 'save', 'generated', 'used', 'constants', 'configuration', 'various', 'parameters', 'file', 'customized', 'tweak', 'max_df', 'min_df', 'nlprelated', 'divided', 'modulesfiles', 'functions', 'webscraping', 'pandas', 'compiling', 'changes', 'modules', 'pickle', 'calculating', 'coverages', 'compiled', 'generate', 'template', 'directories', 'contain', 'uses', 'jinja', 'local', 'setup', 'instructions', 'assume', 'knowledgeable', 'git', 'environments', 'note', 'pip', 'installed', 'clone', 'bash', 'httpsgithubcomparkkeocourseprojectgit', 'cd', 'create', 'venv', 'install', 'dependencies', 'venvscriptsactivate', 'r', 'serverrequirementstxt', 'download', 'en_core_web_lg', 'launch', 'want', 'newly', 'datauiuc_biostxt', 'later', 'projects', 'launched', 'navigate', 'localhost', 'browser', 'view']
https://github.com/Redstone-WB/CS410-guava	<cs410 : project progress> project topic  project topic : (option 1) reproducing a paper: latent aspect rating analysis project schedule (table 1) date todo 11.20 ~ 11.28 paper review 11.29 progress report 11.30 ~ 12.01 source review 12.02 ~ 12.08 source implementation 12.09 ~ 12.11 result analysis & documentation 12.12 source code & documentation submission team members 1. hongseok ha (netid : hh23), with administrative duties 2. changsoo kim (netid : ck37) progress report 1. which tasks have been completed? (progress made thus far) a. paper review i. we went through the paper to get a holistic understanding and found that this paper suggests a unified framework laram, which is improves lara and enables aspect rating analysis without knowledge of the target domain. ii. laram has two components: 1) an aspect modeling module, and 2) a rating analysis module similar to the latent rating regression model (lrr) used in lara. iii. once we infer the latent aspect assignment z and aspect weight a with the given model th = (e, g, b, m, s, 2 ), we can estimate corpus-level parameters using the expectation maximization algorithm. b. find materials that help understand the paper i. we found the author's original source from his homepage. this would be very helpful to understand the process more precisely. however, it is implemented in java, so we need to convert it to python. ii. url: http://sifaka.cs.uiuc.edu/~wang296/ 2. which tasks are pending? (remaining tasks) a. python code implementation i. as there are two components and we have two members, each member will be in charge of one module. 1. hongseok ha: aspect modeling module 2. changsoo kim: rating analysis module b. an overall schedule is shown in table 1. 3. which tasks have been completed? (any challenges/issues being faced) a. ambiguity of aspect modeling part: the aspect modeling module behaves similarly as lda or slda, but it has different assumptions. we cannot spot the big difference so far, so we sent an email to the ta and we are going to ask on piazza as well. if there are only subtle difference, we are going to use lda instead and see the difference between the paper's result and ours. b. python portability: we will convert the author's original code in java to python. these differences can lead to slight differences in results. c. experiment results: in the paper, there are several comparisons, such as lda vs slda vs laram, lda+lrr vs slda+lrr vs laram, bootstrap+lrr, laram, and so on. if we were to compare the number of all cases, it would take a lot of time. we will only compare the paper's suggesting result and our result. <execution guidelines> cs410 final project, 2020, fall author : changsoo kim, hongseok ha prerequisites python : version over 3.5 python packages : numpy, lda if you want to use np.load to load .npy files, please use numpy version 1.16.1 data default data(small, to upload git repository) directory : './data/yelp_sanitation_data/' to try another dataset, please change line 16 of 'main.py' file. output example lda output (5 topics) lrr output execution steps clone the repository execute the main.py, using command 'python main.py' if you want to change the lda topic parameter (k), please modify line 24 of 'main.py' file. (n_topics) <cs410 : project proposal> team name : guava team members : hongseok ha (netid : hh23), with administrative duties changsoo kim (netid : ck37) project topic : (option 1) reproducing a paper: latent aspect rating analysis programming language that will be used : python dataset availability two datasets (the hotel review dataset and the amazon mp3 review dataset) that are used in the paper are both available in the link below. dataset link : http://sifaka.cs.uiuc.edu/~wang296/data/index.html however, for the amazon mp3 review dataset, the number of reviews are different in the paper and the actual dataset. (the paper : #16,680, the dataset : #55,740) we will see if we can get results similar to the paper. the paper (latent aspect rating analysis) deals with the methodology of mining latent topical aspects, without pre-specification of aspect keywords (hashtags, ... ). laram would be helpful to cluster user reviews with various aspects, making it easy for other users to retrieve topics that they want. also, reproducing this paper would be helpful for us to understand overall contents of cs410. <project review> cs410, 2020, fall authors : changsoo kim, hongseok ha overall laram(2011) improved lara(2010) in that it allows finding latent topics without specifying the seed words of the topics. laram can be divided into two modules, which are 1) finding latent topic aspects (aspect modeling module) and 2) finding ratings on each identified aspect (rating analysis module). although we tried to understand the details of laram based on the original author's source code and python code from other sources, it was difficult for us to figure out all the details of the paper. thus, as we mentioned in our progress report, we tried to implement the paper by replacing the aspect modeling module with lda, and the rating analysis module with lrr (latent rating regression). however, it was difficult for us to link the lda results to lrr. also, although we converted the java code of the original author to implement a python-version of lrr (which we could not find other references), there were subtle numeric differences in our intermediate results. we could not be sure whether the previous mismatch was the fundamental cause of following failures, but many unknown causes leaded us to a problem in which lbfgs (which was used as an optimizer, to minimize beta parameters) fails in line search, so that the beta parameters could not converge. in conclusion, the beta parameters could not be updated, so that the em algorithm could not worked properly, resulting the maximization of log-likelihood (that we expected) could not happen. we found that we should try to understand the paper more sufficiently, before starting the code implementation. also, to save time, utilizing libraries and packages would be very helpful. with this project, we were able to empathize with researchers who were making great efforts to advance their research in their fields. difficulties there were ambiguous words, that we could not be sure whether they should be included in stopwords. for instance, the phrase 'n't' was not included in stopwords of the nltk package. although it seems to mean 'not' with some verbs, it would mean nothing, without any verbs. although the python package 'scipy' provides l-bfg-s option in an optimizer, structures of parameters were different, so that using the function imported from scipy was difficult. that's why we chose to convert the original author's java code of lrr. however, it resulted in the numerical mismatch in intermediate results. in laram, the z values from aspect segmentation should be utilized in lrr, to improve the overall performance, but we could not implement that part, for lack of understanding of the paper and limit of time. we found that it is a tough task to implement a paper to well-structured codes only by looking at the formula and diagram in the paper. additional resources (such as the author's presentation materials, that provides details and easier explanation) seems to be helpful to implement the paper in detail. cs410 : courseproject term info : uiuc, cs410, 2020, fall authors : changsoo kim, hongseok ha guideline for the execution : execution guidelines.docx review for the whole project : project review.docx execution video : https://uillinoisedu-my.sharepoint.com/:v:/g/personal/ck37_illinois_edu/ebhmsn_g_cjfrkhp7k164twbjtk73jvocems8bs7yl_dyw?e=j3w4eq references laram (java) : http://sifaka.cs.uiuc.edu/~wang296/ preprocessing : https://github.com/tonyzhang1231/lara_python etc : https://github.com/ericcds/laram_python	['cs', 'project', 'progress', 'topic', 'option', 'reproducing', 'paper', 'latent', 'aspect', 'rating', 'analysis', 'schedule', 'table', 'date', 'todo', 'review', 'report', 'source', 'implementation', 'result', 'documentation', 'code', 'submission', 'team', 'members', 'hongseok', 'ha', 'netid', 'hh', 'administrative', 'duties', 'changsoo', 'kim', 'ck', 'tasks', 'completed', 'made', 'thus', 'far', 'went', 'get', 'holistic', 'understanding', 'found', 'suggests', 'unified', 'framework', 'laram', 'improves', 'lara', 'enables', 'without', 'knowledge', 'target', 'domain', 'ii', 'two', 'components', 'modeling', 'module', 'similar', 'regression', 'model', 'lrr', 'used', 'iii', 'infer', 'assignment', 'z', 'weight', 'given', 'th', 'e', 'g', 'b', 'estimate', 'corpuslevel', 'parameters', 'using', 'expectation', 'maximization', 'algorithm', 'find', 'materials', 'help', 'understand', 'authors', 'original', 'homepage', 'would', 'helpful', 'process', 'precisely', 'however', 'implemented', 'java', 'need', 'convert', 'python', 'url', 'httpsifakacsuiuceduwang', 'pending', 'remaining', 'member', 'charge', 'one', 'overall', 'shown', 'challengesissues', 'faced', 'ambiguity', 'part', 'behaves', 'similarly', 'lda', 'slda', 'different', 'assumptions', 'cannot', 'spot', 'big', 'difference', 'sent', 'email', 'ta', 'going', 'ask', 'piazza', 'well', 'subtle', 'use', 'instead', 'see', 'papers', 'portability', 'differences', 'lead', 'slight', 'results', 'c', 'experiment', 'several', 'comparisons', 'vs', 'ldalrr', 'sldalrr', 'bootstraplrr', 'compare', 'number', 'cases', 'take', 'lot', 'time', 'suggesting', 'execution', 'guidelines', 'final', 'fall', 'author', 'prerequisites', 'version', 'packages', 'numpy', 'want', 'npload', 'load', 'npy', 'files', 'please', 'data', 'default', 'datasmall', 'upload', 'git', 'repository', 'directory', 'datayelp_sanitation_data', 'try', 'another', 'dataset', 'change', 'line', 'mainpy', 'file', 'output', 'example', 'topics', 'steps', 'clone', 'execute', 'command', 'parameter', 'k', 'modify', 'n_topics', 'proposal', 'name', 'guava', 'programming', 'language', 'availability', 'datasets', 'hotel', 'amazon', 'mp', 'available', 'link', 'httpsifakacsuiuceduwangdataindexhtml', 'reviews', 'actual', 'deals', 'methodology', 'mining', 'topical', 'aspects', 'prespecification', 'keywords', 'hashtags', 'cluster', 'user', 'various', 'making', 'easy', 'users', 'retrieve', 'also', 'us', 'contents', 'improved', 'allows', 'finding', 'specifying', 'seed', 'words', 'divided', 'modules', 'ratings', 'identified', 'although', 'tried', 'details', 'based', 'sources', 'difficult', 'figure', 'mentioned', 'implement', 'replacing', 'converted', 'pythonversion', 'could', 'references', 'numeric', 'intermediate', 'sure', 'whether', 'previous', 'mismatch', 'fundamental', 'cause', 'following', 'failures', 'many', 'unknown', 'causes', 'leaded', 'problem', 'lbfgs', 'optimizer', 'minimize', 'beta', 'fails', 'search', 'converge', 'conclusion', 'updated', 'em', 'worked', 'properly', 'resulting', 'loglikelihood', 'expected', 'happen', 'sufficiently', 'starting', 'save', 'utilizing', 'libraries', 'able', 'empathize', 'researchers', 'great', 'efforts', 'advance', 'research', 'fields', 'difficulties', 'ambiguous', 'included', 'stopwords', 'instance', 'phrase', 'nt', 'nltk', 'package', 'seems', 'mean', 'verbs', 'nothing', 'scipy', 'provides', 'structures', 'function', 'imported', 'thats', 'chose', 'resulted', 'numerical', 'values', 'segmentation', 'utilized', 'improve', 'performance', 'lack', 'limit', 'tough', 'task', 'wellstructured', 'codes', 'looking', 'formula', 'diagram', 'additional', 'resources', 'presentation', 'easier', 'explanation', 'detail', 'courseproject', 'term', 'info', 'uiuc', 'guideline', 'guidelinesdocx', 'whole', 'reviewdocx', 'video', 'httpsuillinoisedumysharepointcomvgpersonalck_illinois_eduebhmsn_g_cjfrkhpktwbjtkjvocemsbsyl_dywejweq', 'preprocessing', 'httpsgithubcomtonyzhanglara_python', 'etc', 'httpsgithubcomericcdslaram_python']
https://github.com/Reynold-Chan/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/RyoTakaki/CS410_TIS_CourseProject	"cs410 text information systems (fall 2020) project progress report text classification competition: twitter sarcasm detection ryo takaki 1. progress made thus far 1.1 project outline: the goal of this project is to classify tweets into two labels(""sarcasm"" and ""not_sacasm""). a performance of the classified label will be evaluated by using f1 score, and will be compared to a baseline performance generated by a state-of-the-art model. 1.2 progress: i decided to use a bert(bidirectional encoder representations from transformers) which is known to have a good performance with text classification problems. fortunately, an implementation of the bert model was easy and a performance for our task(twitter sarcasm detection) was good enough to beat the baseline. specifically, although it was the first try to train the model, the f1 score was 0.744 (baseline: 0.723). 2. remaining tasks 2.1 model update: as i have already outperformed the baseline performance, additional parameters tuning for the model training is not necessary. 2.2 presentation preparation: for the final presentation, remaining tasks below will be done. * add comments to the code * make a project presentation video 3. any challenges/issues being faced currently, i do not have any issues. therefore, no additional support is needed. 1 cs410 text information systems (fall 2020) project final report text classification competition: twitter sarcasm detection ryo takaki 1. overview of functions 1.1 twitter sarcasm detection the main function of this system is to predict a label(sarcasm or not_sarcasm) of input tweets. the input tweets include response tweets and its context tweets. we are given 5,000 training data sets and 1,800 test data sets. the prediction performance will be evaluated using f1 score and compared to the baseline score. input : pairs of the tweets(response and context tweets) output : predicted labels of the response tweets(sarcasm or not_sarcasm) process : pre-trained bert model + single layer classifier 1.2 code outline the code of the twitter sarcasm detection system mainly consists of the components below. detailed instructions of how to implement those components are explained in the next section. 1 no component function outline 1 library installation install the hugging face library for bert model 2 context selection derive the latest tweet from context tweets 3 removing @user remove unnecessary words from the input tweets 4 tokenization convert the input text to the tokenized ids 5 formatting reshape the input ids size with fixed length 6 data split split the data into training and validation data set 7 model training build and train the bert model with recommended parameters 8 label prediction predict the labels using test set data cs410 text information systems (fall 2020) 2. implementation 2.1 library installation bert pre-trained model and its library can be used by just installing the library. https://huggingface.co/transformers/ 2.2 context selection as you can see that some contexts have several context tweets(e.g. 20), however the majority have only two to five context tweets. although we can see that at least two tweets are included in the context information, i decided to use only one latest context tweet as a first step. in the actual code below, the derived latest context tweet is stored as a new column(pre_comment). 2 cs410 text information systems (fall 2020) 2.3 removing @user as you can see, the original response and context include unnecessary words like ""@user"". the unnecessary word(@user) is removed by this function. 2.4 tokenization in order for the bert model to handle the input tweets, the original tweets sentences will be converted to tokenized words and its ids. 2.5 formatting in order to define the bert model's input dimensions, we need to identify the maximum length of the input tweets(response + context). thanks to the library, what we need to do to create the fixed size input data is to set the maximum input length when we encode the data. even if the actual input data length is shorter than the maximum input length, remaining parts will be automatically filled with zero. 3 cs410 text information systems (fall 2020) 2.6 data split 5,000 data sets are divided into 90% of training sets and 10% of validation sets randomly(although it is random selection, it is reproducible as the seed value is specified). 4 cs410 text information systems (fall 2020) 2.7 model training 2.7.1 model definition the model here consists of mainly two parts. one is the pre-trained bert model and the other is single layer linear classification for this tweet classification application. in order to build the model, we only need to import ""bertforsequenceclassification"" from transformers like below, and specify some parameters. in our case, num_lebels is 2 as we want to classify the tweets into sarcasm or not. 5 cs410 text information systems (fall 2020) 2.7.2 trainable parameters setting finally, i decided not to change the trainable parameters of the bert model as the performance with fixing the bert model was not good enough. however, those parameters can be changed by enabling the cell below if needed for other purposes. 2.7.3 model training with recommended parameters the batch size, the learning rate, the epsilon, and the number of epochs were determined based on the recommendation of the author of the bert papar. although i have not tried to change the parameters, it worked well at the first trial. 6 cs410 text information systems (fall 2020) although i only tried to use the pre-trained bert model + single linear classifier with recommended parameters, the training time was faster than expected and also the performance was good enough to beat the baseline(see 2.9). 7 cs410 text information systems (fall 2020) 2.8 label prediction on the test data by applying the same preprocessing as for the training/validation data set, the test data can also be inputted to the trained model. and finally, we can get the predicted labels by applying the softmax function to predicted values. 2.9 competition result the f1 score (0.737) beat the baseline score(0.723) as below. 2.10 reproducing the same prediction after re-running all the code, a reproducibility test will be done automatically as below by downloading the actual submitted prediction file and comparing them to the prediction labels generated in your environment. 8 cs410 text information systems (fall 2020) 2.11 reference the project code was inspired by a uiuc's tech review and a public website below. * https://github.com/zen030/tech_review/blob/master/techreview.pdf * https://mccormickml.com/2019/07/22/bert-fine-tuning/ 3. usage 3.1 open ""sarcasmclassification.ipynb"" 9 cs410 text information systems (fall 2020) 3.2 follow the setup instruction 1.1 and 1.2 below. 3.3 run the code after setting up the google colab gpu setting above, you can run all the code by clicking the ""runtime -> run all"" below, or simply run all the cells one by one. 10 cs410 text information systems (fall 2020) 4. contribution as my team member is only me, everything is done by myself. 11 cs410 text information systems (fall 2020) project proposal and team formation submission for grading ryo takaki in your project proposal, please answer the following questions: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. name: ryo takaki (captain) netid: rtakaki2 2. which competition do you plan to join? text classification competition 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods no. methods experience 1 cnn through udacity's self-driving car nanodegree and computer vision nanodegree course, i have learned the basics of cnn, rnn and how to use pytorch. computer vision nanodegree course syllabus automatic image captioning: combine cnn and rnn knowledge to build a deep learning model that produces captions given an input image. image captioning requires that you create a complex deep learning model with two components: a cnn that transforms an input image into a set of features, and an rnn that turns those features into rich, descriptive language. in this project, you will implement these cutting-edge deep learning architectures. 2 rnn 3 lstm 4 pytorch 5 bert no actual experience with this method, but i would like to try this first just because the bert is well-known. if the bert is not good enough, then i will try other methods. 4. which programming language do you plan to use? python courseproject classification competition twitter sarcasm detection project proposal project proposal project progress report project progress report project final report project final report code prediction results answer.txt tutorial movie uiuc media space"	['cs', 'text', 'information', 'systems', 'fall', 'project', 'progress', 'report', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'ryo', 'takaki', 'made', 'thus', 'far', 'outline', 'goal', 'classify', 'tweets', 'two', 'labelssarcasm', 'not_sacasm', 'performance', 'classified', 'label', 'evaluated', 'using', 'f', 'score', 'compared', 'baseline', 'generated', 'stateoftheart', 'model', 'decided', 'use', 'bertbidirectional', 'encoder', 'representations', 'transformers', 'known', 'good', 'problems', 'fortunately', 'implementation', 'bert', 'easy', 'tasktwitter', 'enough', 'beat', 'specifically', 'although', 'first', 'try', 'train', 'remaining', 'tasks', 'update', 'already', 'outperformed', 'additional', 'parameters', 'tuning', 'training', 'necessary', 'presentation', 'preparation', 'final', 'done', 'add', 'comments', 'code', 'make', 'video', 'challengesissues', 'faced', 'currently', 'issues', 'therefore', 'support', 'needed', 'overview', 'functions', 'main', 'function', 'system', 'predict', 'labelsarcasm', 'not_sarcasm', 'input', 'include', 'response', 'context', 'given', 'data', 'sets', 'test', 'prediction', 'pairs', 'tweetsresponse', 'output', 'predicted', 'labels', 'tweetssarcasm', 'process', 'pretrained', 'single', 'layer', 'classifier', 'mainly', 'consists', 'components', 'detailed', 'instructions', 'implement', 'explained', 'next', 'section', 'component', 'library', 'installation', 'install', 'hugging', 'face', 'selection', 'derive', 'latest', 'tweet', 'removing', 'user', 'remove', 'unnecessary', 'words', 'tokenization', 'convert', 'tokenized', 'ids', 'formatting', 'reshape', 'size', 'fixed', 'length', 'split', 'validation', 'set', 'build', 'recommended', 'used', 'installing', 'httpshuggingfacecotransformers', 'see', 'contexts', 'several', 'tweetseg', 'however', 'majority', 'five', 'least', 'included', 'one', 'step', 'actual', 'derived', 'stored', 'new', 'columnpre_comment', 'original', 'like', 'worduser', 'removed', 'order', 'handle', 'sentences', 'converted', 'define', 'models', 'dimensions', 'need', 'identify', 'maximum', 'thanks', 'create', 'encode', 'even', 'shorter', 'parts', 'automatically', 'filled', 'zero', 'divided', 'randomlyalthough', 'random', 'reproducible', 'seed', 'value', 'specified', 'definition', 'linear', 'application', 'import', 'bertforsequenceclassification', 'specify', 'case', 'num_lebels', 'want', 'trainable', 'setting', 'finally', 'change', 'fixing', 'changed', 'enabling', 'cell', 'purposes', 'batch', 'learning', 'rate', 'epsilon', 'number', 'epochs', 'determined', 'based', 'recommendation', 'author', 'papar', 'tried', 'worked', 'well', 'trial', 'time', 'faster', 'expected', 'also', 'baselinesee', 'applying', 'preprocessing', 'trainingvalidation', 'inputted', 'trained', 'get', 'softmax', 'values', 'result', 'reproducing', 'rerunning', 'reproducibility', 'downloading', 'submitted', 'file', 'comparing', 'environment', 'reference', 'inspired', 'uiucs', 'tech', 'review', 'public', 'website', 'httpsgithubcomzentech_reviewblobmastertechreviewpdf', 'httpsmccormickmlcombertfinetuning', 'usage', 'open', 'sarcasmclassificationipynb', 'follow', 'setup', 'instruction', 'run', 'google', 'colab', 'gpu', 'clicking', 'runtime', 'simply', 'cells', 'contribution', 'team', 'member', 'everything', 'proposal', 'formation', 'submission', 'grading', 'please', 'answer', 'following', 'questions', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'name', 'netid', 'rtakaki', 'plan', 'join', 'choose', 'prepared', 'learn', 'neural', 'network', 'classifiers', 'deep', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'cnn', 'udacitys', 'selfdriving', 'car', 'nanodegree', 'computer', 'vision', 'course', 'learned', 'basics', 'rnn', 'pytorch', 'syllabus', 'automatic', 'image', 'captioning', 'combine', 'knowledge', 'produces', 'captions', 'requires', 'complex', 'transforms', 'features', 'turns', 'rich', 'descriptive', 'language', 'cuttingedge', 'architectures', 'lstm', 'method', 'would', 'wellknown', 'programming', 'python', 'courseproject', 'results', 'answertxt', 'tutorial', 'movie', 'uiuc', 'media', 'space']
https://github.com/Sembian2-CS410Fall2020/CourseProject	"courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. project documentation: https://github.com/sembian2-cs410fall2020/courseproject/blob/main/sembian2_cs410f2020_project_documentation.pdf cs410 - course final project project documentation sembian2@illinois.edu project option 4: competitions - text classification competition team name: sembian2 ( individual ) project installation guide the project code is completely executed in a google colab environment, please download the ipynb file and upload to google, you can also make a copy directly from the google colab link https://colab.research.google.com/drive/1gzwqjesnkxulijox34z-quqepbyhpt75?usp=sharing download the ipynb and load into google colab ( https://colab.research.google.com/) and enable the gpu runtime **project documentaiton:** https://github.com/sembian2- cs410fall2020/courseproject/blob/main/sembian2_cs410f2020_project_documentation.pdf **project progress report:** https://github.com/sembian2- cs410fall2020/courseproject/blob/main/sembian2_cs410f2020_project_progress_report.pdf **project proposal document:** https://github.com/sembian2- cs410fall2020/courseproject/blob/main/sembian2_cs410f2020_project_proposal.pdf **project presentation video** (youtube link) : https://www.youtube.com/watch?v=ch2tzb5n_8y motivation & dataset: the text classification competition involves a binary classification of tweets with a balanced training including labels indicating sarcasm(0), not_sarcasm(1), i used the state-of-the-art transformers, pytorch libraries with bert embeddings. the training dataset had 5000 labelled samples with balanced label distribution of 50 % and the test dataset had 1800 rows with additional id field. approach: the training dataset is loaded into pandas dataframe and the response column was pre-processed with text cleaning including removing @user and @url, expanding shortwords, expanding emoji's, and removing any stopwords using nltk library, removing special characters and punctuations. after pre-processing the response tweets column and label column is split into training and validation i used a .33% validation and .77% training data set. classification methods: the first approach is to use the multinomial naive bayes by applying tf-idf and got a baseline auc score of .8118 the accuracy was around 72% i used this as a baseline and tried improving the baseline using bert embeddings and a feed forward neural network. text classification with transformers in pytorch: bert the transformer-based lm(language models) has shown promising progress on number of nlp benchmarks. by combining transfer learning methods with large-scale transformer language model is becoming a standard in modern nlp compared to traditional classification approaches. in this final approach to improve the baseline score of 72.24% from the multinomialnb approach we will attempt to increase the accuracy score by implementing a transformer architecture and fine-tuning of the pre-trained bert model for classification. the two important complimentary concepts in natural language processing: * word embeddings * language model transformers are used to build the language model and embeddings can be retrieved as the by-product of pretraining. transformers architecture implements so-called attention mechanism to include an entire sequence as a whole enabling training in parallel when compared to traditional lstm approaches. the huggingface transformers library has a huge collection of the language models and embeddings and makes it easier for implementing using pytorch in python. bert bert( bidirectional encoder representations from transformers) is a mothod of pretraining language representation. bert does not have a decoder but stacks 24 layer encoders for bert-uncased-large) #sample code showing the import and instantiation of bert model from transformers. import torch import torch.nn as nn from transformers import bertmodel # instantiate bert model self.bert = bertmodel.from_pretrained('bert-large-uncased') bert tokenizer and netowrk architecture the important limitation of bert is that the maximum sequence length is 512 tokens, the shorter sentences are added with [pad] and there is also a [cls] token for indicating beginning of the sentence and [sep] token at the end of sentence the tokenized sentence is then encoded using bert embeddings the bert-large has 1024 embeddings while there are multiple approaches i used a custom bertclassifier with a single feedforward neural network with # specify hidden size of bert, hidden size of our classifier, and number of labels # bert-large, uncased: 24-layer, 1024-hidden, 16-heads, 340m parameters d_in, h, d_out = 1024, 50, 2 # instantiate an one-layer feed-forward classifier self.classifier = nn.sequential( nn.linear(d_in, h), #https://pytorch.org/docs/stable/generated/torch.nn.linear.html#torch.nn.linear nn.relu(), #https://pytorch.org/docs/stable/generated/torch.nn.relu.html#torch.nn.relu nn.linear(h, d_out), #https://pytorch.org/docs/stable/generated/torch.nn.linear.html#torch.nn.linear ) the final layer out put is passed thru a relu activation layer and output dimensions of 2 indicating the 2 labels[sarcasm-0, not_sarcasm-1] , the bert tokenizer is applied on all responses of the training data and map tokens into wordpiece embeddings using the encode_plus function, the following parameters were used for training. learningrate 5e-5 max sequence length 89 batch size 32 no. of epochs 4 the model is then trained for 4 epochs and achieved a score of 81.17% on the training set that is almost 10 point increase from the baseline multinomialnb model. for hyperparameter tuning i used wandb.com ( weights and biases) to report out the various runs and compared the best score and the run named revivedpthunder-388 scored the highest and achieved a 81.17 validation accuracy and 75.19 test accuracy in the leaderboard report link to wandb tables training accuracy tf-idf vectorizer and multinomial naive bayes 72.24% transformers with bert_large_uncased embeddings 81.17% test accuracy of 75.18% - position 10 on leaderboard as of 12.02.2020 using the transformers, pytorch and bert classification model i was able to beat the baseline score on the leaderboard and improved the score by repeating the training with hyper parameter tuning and text pre- processing techniques and achieved a score of 75.18% test accuracy, and have no challenges. references: * images for illustration are taken from the original bert paper (devlin et al. 2018). * jacob devlin, ming-wei chang, kenton lee, and kristina toutanova,bert: pre-training of deep bidirectional transformers for languageunderstanding, 2018. * weights and biases: https://wandb.ai/cayush/bert-finetuning/reports/sentence-classification-with- huggingface-bert-and-w-b--vmlldzo4mdmwna * the role of conversation context for sarcasm detection in online interactions: https://arxiv.org/pdf/1707.06226.pdf * clark, kevin, urvashi khandelwal, omer levy, and christopher d. manning. ""what does bert look at? an analysis of bert's attention."" arxiv preprint arxiv:1906.04341 (2019). * sileo, damien. ""understanding bert transformer: attention isnt all you need."" towards data science (2019). * weiss, karl, taghi m. khoshgoftaar, and dingding wang. ""a survey of transfer learning."" journal of big data 3, no. 1 (2016): 9. * biewald, lukas. ""experiment tracking with weights and biases."" (2020). * text tweet pre processing - https://github.com/digitalepidemiologylab * the illustrated bert, elmo, and co. (how nlp cracked transfer learning) - https://jalammar.github.io/illustrated-bert/ * pytorch.org - https://pytorch.org/docs/stable/index.html * bert fine-tuning tutorial with pytorch for text classification: https://medium.com/@aniruddha.choudhury94/part-2-bert-fine-tuning-tutorial-with-pytorch-for-text- classification-on-the-corpus-of-linguistic-18057ce330e1 * huggingface transformers library - https://github.com/huggingface/transformers * bert for advance nlp with transformers in pytorch - https://www.linkedin.com/pulse/part1-bert- advance-nlp-transformers-pytorch-aniruddha-choudhury/ * attention is all you need; vaswani et al., 2017. - https://arxiv.org/pdf/1706.03762.pdf * bert: pre-training of deep bidirectional transformers for language understanding; devlin et al., 2018. - https://arxiv.org/pdf/1810.04805.pdf * encoder-decoder architecture& bert paperon the full research. - https://arxiv.org/pdf/1810.04805.pdf * rennie, j. d., shih, l., teevan, j., & karger, d. r. (2003). [tackling the poor assumptions of naive bayes text classifiers. in icml](https://people.csail.mit.edu/jrennie/papers/icml03-nb.pdf) (vol. 3, pp. 616-623). * text classification with transformers in tensorflow 2: bert, xlnet - https://atheros.ai/blog/text- classification-with-transformers-in-tensorflow-2 cs410 - course final project project progress report sembian2@illinois.edu project option 4: competitions - text classification competition team name: sembian2 ( individual ) which tasks have been completed? the final project was planned and split into 18 tasks and over six 2 week sprints, below are the tasks and child issues completed with sprint reports for hyperparameter tuning i used wandb.com ( weights and biases) to report out the various runs and compared the best score and the run named revivedpthunder-388 scored the highest and achieved a 81.17 validation accuracy and 75.19 test accuracy in the leaderboard report link to wandb test accuracy of 75.19% - position 6 on leaderboard as of 11.26.2020 which tasks are pending? the following tasks are in progress and i am on track for completing the project code documentation and presentation. are you facing any challenges? using the transformers, pytorch and bert classification model i was able to beat the baseline score on the leaderboard and improved the score by repeating the training with hyper parameter tuning and text pre- processing techniques and achieved a score of 75.19% test accuracy, and have no challenges. cs410 - course final project project proposal sembian2@illinois.edu project option 4: competitions - text classification competition team name: sembian2 ( individual ) what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. name: sembian balasubramanian netid: sembian2 i will doing this project as individual, i will ensure all administrative tasks are completed and will be submitting the deliverables as per schedule. which competition do you plan to join? i am really interested in the text classification competition, this would allow me to learn and build, train a state of the art classifier model using industry leading libraries implementing methods like lstm and convolutional neural networks using tensorflow-keras / pytorch transformers and using word embedding techniques - i will also experiment and train the model using activations like sigmoid, relu, softmax and exploring evaluations of accuracy and loss of training and validation , performing parameter tuning updates and using optimizers while the technology is complex, after watching the coursera lectures on text classification, i am comfortable in text classification methods, also at my i am leading the multi-channel measurement strategy and would apply my learning from this project to propose state of the art classification models and hyperparameter tuning for sentiment, sarcasm & emotion detection which programming language do you plan to use? python /jupyter notebook / google colab with cuda for model training"	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities', 'documentation', 'httpsgithubcomsembiancsfallcourseprojectblobmainsembian_csf_project_documentationpdf', 'cs', 'final', 'sembianillinoisedu', 'option', 'competitions', 'text', 'classification', 'competition', 'team', 'name', 'sembian', 'individual', 'installation', 'guide', 'code', 'completely', 'executed', 'google', 'colab', 'environment', 'download', 'ipynb', 'file', 'upload', 'also', 'make', 'copy', 'directly', 'httpscolabresearchgooglecomdrivegzwqjesnkxulijoxzquqepbyhptuspsharing', 'load', 'httpscolabresearchgooglecom', 'enable', 'gpu', 'runtime', 'documentaiton', 'httpsgithubcomsembian', 'csfallcourseprojectblobmainsembian_csf_project_documentationpdf', 'progress', 'report', 'csfallcourseprojectblobmainsembian_csf_project_progress_reportpdf', 'proposal', 'document', 'csfallcourseprojectblobmainsembian_csf_project_proposalpdf', 'presentation', 'video', 'youtube', 'httpswwwyoutubecomwatchvchtzbn_y', 'motivation', 'dataset', 'involves', 'binary', 'tweets', 'balanced', 'training', 'including', 'labels', 'indicating', 'sarcasm', 'not_sarcasm', 'used', 'stateoftheart', 'transformers', 'pytorch', 'libraries', 'bert', 'embeddings', 'labelled', 'samples', 'label', 'distribution', 'test', 'rows', 'additional', 'id', 'field', 'approach', 'loaded', 'pandas', 'dataframe', 'response', 'column', 'preprocessed', 'cleaning', 'removing', 'user', 'url', 'expanding', 'shortwords', 'emojis', 'stopwords', 'using', 'nltk', 'library', 'special', 'characters', 'punctuations', 'preprocessing', 'split', 'validation', 'data', 'set', 'methods', 'first', 'use', 'multinomial', 'naive', 'bayes', 'applying', 'tfidf', 'got', 'baseline', 'auc', 'score', 'accuracy', 'around', 'tried', 'improving', 'feed', 'forward', 'neural', 'network', 'transformerbased', 'lmlanguage', 'models', 'shown', 'promising', 'number', 'nlp', 'benchmarks', 'combining', 'transfer', 'learning', 'largescale', 'transformer', 'language', 'model', 'becoming', 'standard', 'modern', 'compared', 'traditional', 'approaches', 'improve', 'multinomialnb', 'attempt', 'increase', 'implementing', 'architecture', 'finetuning', 'pretrained', 'two', 'important', 'complimentary', 'concepts', 'natural', 'processing', 'word', 'build', 'retrieved', 'byproduct', 'pretraining', 'implements', 'socalled', 'attention', 'mechanism', 'include', 'entire', 'sequence', 'whole', 'enabling', 'parallel', 'lstm', 'huggingface', 'huge', 'collection', 'makes', 'easier', 'python', 'bidirectional', 'encoder', 'representations', 'mothod', 'representation', 'decoder', 'stacks', 'layer', 'encoders', 'bertuncasedlarge', 'sample', 'showing', 'import', 'instantiation', 'torch', 'torchnn', 'nn', 'bertmodel', 'instantiate', 'selfbert', 'bertmodelfrom_pretrainedbertlargeuncased', 'tokenizer', 'netowrk', 'limitation', 'maximum', 'length', 'tokens', 'shorter', 'sentences', 'added', 'pad', 'cls', 'token', 'beginning', 'sentence', 'sep', 'end', 'tokenized', 'encoded', 'bertlarge', 'multiple', 'custom', 'bertclassifier', 'single', 'feedforward', 'specify', 'hidden', 'size', 'classifier', 'uncased', 'heads', 'parameters', 'd_in', 'h', 'd_out', 'onelayer', 'selfclassifier', 'nnsequential', 'nnlineard_in', 'httpspytorchorgdocsstablegeneratedtorchnnlinearhtmltorchnnlinear', 'nnrelu', 'httpspytorchorgdocsstablegeneratedtorchnnreluhtmltorchnnrelu', 'nnlinearh', 'put', 'passed', 'thru', 'relu', 'activation', 'output', 'dimensions', 'labelssarcasm', 'applied', 'responses', 'map', 'wordpiece', 'encode_plus', 'function', 'following', 'learningrate', 'e', 'max', 'batch', 'epochs', 'trained', 'achieved', 'almost', 'point', 'hyperparameter', 'tuning', 'wandbcom', 'weights', 'biases', 'various', 'runs', 'best', 'run', 'named', 'revivedpthunder', 'scored', 'highest', 'leaderboard', 'wandb', 'tables', 'vectorizer', 'bert_large_uncased', 'position', 'able', 'beat', 'improved', 'repeating', 'hyper', 'parameter', 'pre', 'techniques', 'challenges', 'references', 'images', 'illustration', 'taken', 'original', 'paper', 'devlin', 'et', 'al', 'jacob', 'mingwei', 'chang', 'kenton', 'lee', 'kristina', 'toutanovabert', 'deep', 'languageunderstanding', 'httpswandbaicayushbertfinetuningreportssentenceclassificationwith', 'huggingfacebertandwbvmlldzomdmwna', 'role', 'conversation', 'context', 'detection', 'online', 'interactions', 'httpsarxivorgpdfpdf', 'clark', 'kevin', 'urvashi', 'khandelwal', 'omer', 'levy', 'christopher', 'manning', 'look', 'analysis', 'berts', 'arxiv', 'preprint', 'sileo', 'damien', 'understanding', 'isnt', 'need', 'towards', 'science', 'weiss', 'karl', 'taghi', 'khoshgoftaar', 'dingding', 'wang', 'survey', 'journal', 'big', 'biewald', 'lukas', 'experiment', 'tracking', 'tweet', 'httpsgithubcomdigitalepidemiologylab', 'illustrated', 'elmo', 'co', 'cracked', 'httpsjalammargithubioillustratedbert', 'pytorchorg', 'httpspytorchorgdocsstableindexhtml', 'tutorial', 'httpsmediumcomaniruddhachoudhurypartbertfinetuningtutorialwithpytorchfortext', 'classificationonthecorpusoflinguisticcee', 'httpsgithubcomhuggingfacetransformers', 'advance', 'httpswwwlinkedincompulsepartbert', 'advancenlptransformerspytorchaniruddhachoudhury', 'vaswani', 'encoderdecoder', 'paperon', 'full', 'research', 'rennie', 'j', 'shih', 'l', 'teevan', 'karger', 'r', 'tackling', 'poor', 'assumptions', 'classifiers', 'icmlhttpspeoplecsailmitedujrenniepapersicmlnbpdf', 'vol', 'pp', 'tensorflow', 'xlnet', 'httpsatherosaiblogtext', 'classificationwithtransformersintensorflow', 'tasks', 'completed', 'planned', 'six', 'sprints', 'child', 'issues', 'sprint', 'reports', 'pending', 'track', 'completing', 'facing', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'balasubramanian', 'netid', 'ensure', 'submitting', 'deliverables', 'per', 'schedule', 'plan', 'join', 'really', 'interested', 'would', 'allow', 'learn', 'train', 'state', 'art', 'industry', 'leading', 'like', 'convolutional', 'networks', 'tensorflowkeras', 'embedding', 'activations', 'sigmoid', 'softmax', 'exploring', 'evaluations', 'loss', 'performing', 'updates', 'optimizers', 'technology', 'complex', 'watching', 'lectures', 'comfortable', 'multichannel', 'measurement', 'strategy', 'apply', 'propose', 'sentiment', 'emotion', 'programming', 'jupyter', 'notebook', 'cuda']
https://github.com/ShyamShah11/CourseProject	"which tasks have been completed? i have determined the three techniques i wanted to implement (naive bayes, knn, and max entropy classifiers). i have generated my datasets, and have generated the feature vector representation of each url. i'm still experimenting with different representations but have most of the code ready for me to easily make changes to it. i originally tried using tokens from the url but have moved to using english words in the url. i have also created the first draft of my naive bayes and knn classifiers. they both currently classify about 80% of urls (n=500) correctly. which tasks are pending? i need to implement the max entropy classifier and tune my models. i also need to prepare the documentation and potentially add some files to be ran specifically for demoing. are you facing any challenges? progress has been limited at times because of hardware limitations (i considered moving to cloud but wanted to keep it simple/local for demo purposes). so i haven't been able to use my entire dataset yet which may skew the classifiers performance. topic specific questions: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. i will be doing this project by myself so i will be the captain. my name is shyam shah and my netid is shyam3. 2. what system have you chosen? which subtopic(s) under the system? the system i chose is expertsearch and the subtopic i will work on is ""automatically crawling faculty webpages"" -> ""identifying webpage faculty urls"" 3. briefly describe the datasets, algorithms or techniques you plan to use i will be working primarily with the faculty webpage dataset (from mp2.3) for positive examples. i intend on using the links on the sign-up sheet from mp2.1 (https://docs.google.com/spreadsheets/d/198hqeztqhchbcbcleuomoynna3z68cvxixu5vvmuu am/edit#gid=0) to also scrape some negative examples. my plan is to approach this as a classification problem, as suggested. i intend on using different classification algorithms/techniques (such as logistic regression, k-nearest neighbors, and neural networks) and want to treat part of this as a research opportunity to teach myself some different kinds of classification algorithms that are effective with text. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? i am going to treat this as adding a function to classify urls on a given webpage. i can demonstrate that this works by splitting my dataset into a training and validation dataset and measuring precision/recall on the validation dataset. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly i'll start by forking the current project on github and adding the functionality to it while developing it. there are instructions in the repo to run the application locally so i would not need to build anything else on my own. ultimately, i would like to have it merged with the current project but that may be something i look into outside of this course. 6. which programming language do you plan to use? i will be using python 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. 3h research algorithms 2h prepare data 10h implement different algorithms 5h testing and tuning parameters other general questions: 1. what is the function of the project? the function is to add the ability for expertsearch to automatically identify links within a page as relevant without requiring human intervention. 2. who will benefit from this project? the users and developers of expertsearch 3. what existing resources can you use? i can use existing python libraries like tensorflow and sklearn to implement the models, most of the work will probably be identifying good features to use for them 4. a very rough timeline to show when you expect to finish what. (the timeline doesn't have to be accurate.) november 1 gather information on all of the models i want to implement november 22 finish implementing first version of models november 29 finish tuning and testing models december 7 finish creating documentation and demonstration expertsearch: identifying faculty webpage urls proposal the project proposal is in the file called proposal.pdf. progress report the progress report is in the file called progress_report.pdf demonstration for my reviewers, the setup instructions and demo are documented in the readme file of the code folder. details about my implementation and decisions made are below. implementation i decided that i did not need to use the expertsearch code for this but i did use some of the expersearch data. i can isolate the task of classifying urls from the rest of the functionality provided by expertsearch so this project will be me working on it seperately (for now). everything implementation related is in this folder. preparing data in the data folder, i have a file for positive training data and negative training data. the positive training data has examples of actual faculty urls and is taken directly from here. the negative data has examples of non faculty urls from university pages as well as all of the directory urls themselves from the mp2.1 signup spreadsheet. the code for generating these is in scraper.py. note: the scraper uses selenium which requires chromedriver.exe to either be on your path, or in the same directory as scraper.py. i have over 15,000 positive and negative urls but only ended up using 500 of each of them. you won't need to run scraper.py unless you intend on using more than 15,000 urls to retrain the models. data as feature vectors for features, i used tokens from the url (ie. everything seperated by a non alphabetic characters) first. after a few tests, i decided to use only the tokens that were also english words since the tokens that aren't english words are usually people's names or university name acronyms which i felt did not add enough value for the number of features they added. preparedata.py converts the datasets into feature vectors which are used for the different algorithms, and it counts the term frequency over all urls. i have only uploaded feature vectors for a small subset of my data to avoid file size constraints. classifiers the three classifiers i experimented with were naive-bayes, maximum entropy, and k-nearest neighbors. i also tuned my models based on a small sample size of data (1000 total urls) because of time and hardware constraints. if the models are retrained with more data, it's likely that they will need to be tuned again. naive bayes i experimented with 4 kinds of naive bayes classifiers: gaussian, bernoulli, complement, and multinomial. over 400 test points, these were the results (accuracy is the number of correctly labelled urls). | classifier | accuracy | | :-------------|:------------- | | gaussian | 83% | | bernoulli | 87% | | complement | 79% | | multinomial | 49% | based on this, i decided to go with a bernoulli naive bayes classifier. one of the benefits of a bayes classifier is that you get to use a prior. however since i had an even split of positive and negative samples in the data i used, the prior i chose to use was a uniform prior over the two labels. a possible improvement would be to modify the scraper to calculate a more realistic prior by calculating the amount of urls on a university webpage that are faculty urls. k-nearest neighbors for the k-nearest neighbors classifier, i experimented with using uniform weights and distance based weights. these were the results for uniform weights. | k | accuracy | | :----|:------------- | | 2 | 71% | | 3 | 84% | | 4 | 83% | | 5 | 84% | | 6 | 84% | | 7 | 83% | | 8 | 85% | | 9 | 84% | | 10 | 84% | | 11 | 85% | | 12 | 84% | | 13 | 83% | | 14 | 82% | | 15 | 82% | | 16 | 79% | and these were the results for distance based weights. | k | accuracy | | :----|:------------- | | 2 | 71% | | 3 | 84% | | 4 | 84% | | 5 | 85% | | 6 | 85% | | 7 | 84% | | 8 | 86% | | 9 | 86% | | 10 | 86% | | 11 | 88% | | 12 | 86% | | 13 | 86% | | 14 | 86% | | 15 | 85% | | 16 | 85% | based on these results i went with k=11 and using distance based weights. maximum entropy for the maximum entropy classifier, i first had to make changes to how my data was being represented. the nltk maxentclassifier requires a dictionary instead of an array to be trained over. so instead of using the same feature vectors, i converted them back to dictionaries of tokens. i experimented with the gis and the iis algorithms. with 100 iterations, the gis algorithm classified 92% of the test points correctly, and the iis algorithm had 91% accuracy. the accuracy for both algorithms went down when i tried again with 500 iterations so i stuck with the gis algorithm and 100 iterations. i used this paper to help come up with some of the ideas used for this project."	['tasks', 'completed', 'determined', 'three', 'techniques', 'wanted', 'implement', 'naive', 'bayes', 'knn', 'max', 'entropy', 'classifiers', 'generated', 'datasets', 'feature', 'vector', 'representation', 'url', 'im', 'still', 'experimenting', 'different', 'representations', 'code', 'ready', 'easily', 'make', 'changes', 'originally', 'tried', 'using', 'tokens', 'moved', 'english', 'words', 'also', 'created', 'first', 'draft', 'currently', 'classify', 'urls', 'n', 'correctly', 'pending', 'need', 'classifier', 'tune', 'models', 'prepare', 'documentation', 'potentially', 'add', 'files', 'ran', 'specifically', 'demoing', 'facing', 'challenges', 'progress', 'limited', 'times', 'hardware', 'limitations', 'considered', 'moving', 'cloud', 'keep', 'simplelocal', 'demo', 'purposes', 'havent', 'able', 'use', 'entire', 'dataset', 'yet', 'may', 'skew', 'performance', 'topic', 'specific', 'questions', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'project', 'name', 'shyam', 'shah', 'netid', 'system', 'chosen', 'subtopics', 'chose', 'expertsearch', 'subtopic', 'work', 'automatically', 'crawling', 'faculty', 'webpages', 'identifying', 'webpage', 'briefly', 'describe', 'algorithms', 'plan', 'working', 'primarily', 'mp', 'positive', 'examples', 'intend', 'links', 'signup', 'sheet', 'httpsdocsgooglecomspreadsheetsdhqeztqhchbcbcleuomoynnazcvxixuvvmuu', 'ameditgid', 'scrape', 'negative', 'approach', 'classification', 'problem', 'suggested', 'algorithmstechniques', 'logistic', 'regression', 'knearest', 'neighbors', 'neural', 'networks', 'want', 'treat', 'part', 'research', 'opportunity', 'teach', 'kinds', 'effective', 'text', 'adding', 'function', 'demonstrate', 'works', 'expected', 'improving', 'show', 'implementation', 'actually', 'better', 'going', 'given', 'splitting', 'training', 'validation', 'measuring', 'precisionrecall', 'communicate', 'utilize', 'fine', 'build', 'systems', 'please', 'state', 'clearly', 'ill', 'start', 'forking', 'current', 'github', 'functionality', 'developing', 'instructions', 'repo', 'run', 'application', 'locally', 'would', 'anything', 'else', 'ultimately', 'like', 'merged', 'something', 'look', 'outside', 'course', 'programming', 'language', 'python', 'justify', 'workload', 'least', 'hours', 'total', 'number', 'students', 'list', 'main', 'estimated', 'time', 'cost', 'task', 'h', 'data', 'testing', 'tuning', 'parameters', 'general', 'ability', 'identify', 'within', 'page', 'relevant', 'without', 'requiring', 'human', 'intervention', 'benefit', 'users', 'developers', 'existing', 'resources', 'libraries', 'tensorflow', 'sklearn', 'probably', 'good', 'features', 'rough', 'timeline', 'expect', 'finish', 'doesnt', 'accurate', 'november', 'gather', 'information', 'implementing', 'version', 'december', 'creating', 'demonstration', 'proposal', 'file', 'called', 'proposalpdf', 'report', 'progress_reportpdf', 'reviewers', 'setup', 'documented', 'readme', 'folder', 'details', 'decisions', 'made', 'decided', 'expersearch', 'isolate', 'classifying', 'rest', 'provided', 'seperately', 'everything', 'related', 'preparing', 'actual', 'taken', 'directly', 'non', 'university', 'pages', 'well', 'directory', 'spreadsheet', 'generating', 'scraperpy', 'note', 'scraper', 'uses', 'selenium', 'requires', 'chromedriverexe', 'either', 'path', 'ended', 'wont', 'unless', 'retrain', 'vectors', 'used', 'ie', 'seperated', 'alphabetic', 'characters', 'tests', 'since', 'arent', 'usually', 'peoples', 'acronyms', 'felt', 'enough', 'value', 'added', 'preparedatapy', 'converts', 'counts', 'term', 'frequency', 'uploaded', 'small', 'subset', 'avoid', 'size', 'constraints', 'experimented', 'naivebayes', 'maximum', 'tuned', 'based', 'sample', 'retrained', 'likely', 'gaussian', 'bernoulli', 'complement', 'multinomial', 'test', 'points', 'results', 'accuracy', 'labelled', 'go', 'one', 'benefits', 'get', 'prior', 'however', 'even', 'split', 'samples', 'uniform', 'two', 'labels', 'possible', 'improvement', 'modify', 'calculate', 'realistic', 'calculating', 'amount', 'weights', 'distance', 'k', 'went', 'represented', 'nltk', 'maxentclassifier', 'dictionary', 'instead', 'array', 'trained', 'converted', 'back', 'dictionaries', 'gis', 'iis', 'iterations', 'algorithm', 'classified', 'stuck', 'paper', 'help', 'come', 'ideas']
https://github.com/SphtKr/MeTAPyquod	"matt williamson -- mdw8 (lead/captain) cs410 november 27, 2020 metapyquod progress report as of the end of november, the metapyquod-dev container image is essentially complete and working--at least for x86_64 platforms. work on metapyquod-server is in its early stages. metapyquod-dev initial creation of the container definition went smoothly and operates as expected on macos--in fact, a surprising result was observed that running a working implementation of mp2.4 natively on a macos 11 host and then in the metapyquod-dev container resulted in a consistently faster execution time in the container than natively: two adjustments from the initial proposal are likely necessary for the metapyquod-dev portion of the project: 1. a desired goal was to include a gui ide for python development in the container-- however, this was seen as high-complexity and added risk, especially on non-linux platforms. however, in the process of researching options the web-pdb python module was discovered, metapyquod - progress report 1 which provides a full debugging environment within a web browser. the need for a robust debugger was the primary motivator for providing a gui ide, and this module provides the visual debugging capability with far lower complexity. therefore, the final solution will map the host working directory into the container to allow any editor (pycharm, vscode, spyder, etc.) to work directly with the files on the host, but provide debugging via web-pdb. 2. another desired goal was to support armv7l/armhf and armv8/aarch64 systems, mainly because of the popularity of raspberry pi and similar sbc hardware. however, attempts to do so have been beset with build problems, despite the fact that the base official python 3.6 image being used supports those architectures. first, scipy/numpy and related dependencies are not well-supported on these systems, though this may be surmountable-- and if so, the benefit may be significant because the time required to build these dependencies on these platforms is a large investment, and a prebuilt container image would eliminate this cost. second, and more difficult, the meta build system itself fails on aarch64 (at least) when trying to download and build icu4c--the same problem encountered by many users on many different platforms--and the solution to this problem (or even it's exact root cause) remains elusive. this may be resolvable but would be likely to consume more time than is available within the project scope. metapyquod - progress report 2 it may be noted that--in this student's opinion--the present state of support of meta/metapy jeopardizes the viability of continuing to base the course content on these tools. it appears that no updates have been made to the tool in two years, and as python and other dependencies continue to evolve, the surface area of supported configurations will continue to shrink. additionally, it may be particularly noteworthy that the build problems described above with 64- bit arm systems are likely to also occur with new apple arm processor (m1) systems, which will eventually include all new apple systems going forward. metapyquod-server work on metapyquod-server is just beginning, but will benefit both from work already done on metapyquod-dev and the tech review completed on aws lambda--which shares some implementation details including the openapi specification. given difficulties with metapyquod- dev, it is likely that some descoping may occur here as well, for instance the feedback or metrics endpoints. remaining technical unknowns have to do with the behavior of meta inverted disk indexes being updated--e.g. it is unclear whether a total re-index will be necessary when starting the container or whether the existing index can be loaded and new documents added. based on experience with metapyquod-dev, the metapyquod-server container will only target x86_64 platforms, though this is less of an issue for its use case. metapyquod - progress report 3 matt williamson -- mdw8 (lead/captain) cs410 october 25, 2020 metapyquod containerized metapy appliances the object of this project is to simplify the use of meta and the metapy bindings by creating pre-packaged docker containers ready to use with all dependencies for different use cases. the result will be at least the following two reusable containers: metapyquod-dev this container will contain the metapy libraries and a functional development environment including a known good version of python, metapy dependencies and useful related libraries (e.g. scipy, numpy), git version control binaries, and a linux shell, suitable for experimentation and basic development (i.e., all the cs410 programming assignments should be able to be completed with only the tools in the container). this container (or a derivative) may also include a gui ide such as spyder and its dependencies to better facilitate development work. a particular goal of this container is to simplify use of the toolchain on windows with docker (and/or windows subsystem for linux), and the hope is that with docker's new ""multi-arch"" features that this and running on arm devices (e.g. raspberry pi) will be possible. if this goal is achieved, such users will be able to instantiate a full working environment for metapy development with a single ""docker run ..."" command. metapyquod-server this container will provide a simple search engine core as a microservice behind a rest api. the goal is for this container to be capable enough to serve in basic production use as a simple search appliance, for instance in an intranet search scenario. it will also facilitate experimentation with different metapy components in a real world use case. the search service will be intended for use with english language corpora. metapyquod 1 this container will expose a volume where it expects to find a web mirror filesystem structure according to the conventions produced by the wget spider process. this will allow the user to use the basic but flexible wget tool (likely in another container) to crawl and download web content for ingest by the metapyquod-server appliance. since wget supports timestamping of downloaded files (and requery culling based on last-modified headers, the appliance will monitor the volume for newly modified files, gaining some efficiencies. in addition to providing sane defaults, this container will also expose a volume with configuration control data (e.g. a config.toml or other relevant files) to facilitate customization of or experimentation with the search appliance. the search service itself will be written in python (probably with an existing http framework like django) and will expose at least the following three capabilities as http rest services: 1. a search service, with a text string parameter and pagination parameters. this service will return json-formatted search results including the url, and will include a query identifier for potential use with a feedback mechanism. 2. a feedback service for registering click-throughs for implicit feedback. the viewed url and the query identifier from the search service will be received as inputs. this service will likely have no effect in the initial iteration, but is established for future implementation of feedback incorporation. 3. a telemetry service providing basic information about the search index for diagnostic or engagement purposes (e.g. last 10 urls indexed, total documents/terms in index, etc.) a swagger/openapi specification will be provided such that a compliant client should be able to interact with the service--it should be possible to test the service using a generic swagger/openapi client. if time permits, a simple example web frontend demonstrator for the service may be provided. estimates metapyquod-dev: design and build container specification with dependencies, deploy and test on all target environments, create documentation: 4-6 hours. metapyquod-server: develop and implement rest services: 10-15 hours. package and test containerization, create documentation: 4-8 hours. metapyquod 2 metapyquod proposal pdf progress report pdf containerized metapy appliances the object of this project is to simplify the use of meta and the metapy bindings by creating pre-packaged docker containers ready to use with all dependencies for different use cases. the result is three reusable containers: metapyquod-dev with this container users can instantiate a full working environment for metapy development with a single ""docker run ..."" command, instead of fighting python versions and build issues. this container includes the metapy libraries and a functional development environment including a known good version of python, metapy dependencies and useful related libraries (e.g. scipy, numpy), git version control binaries, and a linux shell, suitable for experimentation and basic development (e.g., all the uiuc cs410 programming assignments should be able to be completed with only the tools in this container). this container builds on multiple architectures including i386, amd64, armv7l and aarch64--so it will run on windows, macos, linux, and raspberry pi 2, 3, and 4, for 32-bit and 64-bit os's! (it's also believed to be ready for windows arm64 and macos m1 arm64 processors when docker supports them!) metapyquod-server this container provides a simple search engine core as a microservice behind a rest api. this server is almost capable enough to serve in basic production use as a simple search appliance in an intranet search scenario, but lacks some robustness. mainly it can facilitate experimentation with different metapy components in a real world use case. the search service is intended for use with english language corpora. metapyquod-indexer this container expedites the creation of meta indexes from a directory structure like that produced by wget --recursive. it captures a few useful fields in the index metadata including the original url, the title from html documents, and the modification time of the file (which can be made to correspond to the modification date of the web page when retrieving with wget). this is intended to be used in conjunction with metapyquod-server, but may be useful in other contexts. what docker/why docker? docker is perhaps many things, but you can view it as yet another attempt to deliver ""write once run anywhere"" capability for software. java did this by abstracting away the operating system and hardware and presenting a new, ""virtual machine"" (the java vm runtime) that never existed before in concrete form. hardware virtualization (e.g. vmware, virtualbox, kvm) does this by presenting a software-based abstraction of existing physical hardware, upon which you can run any whole os and software. docker does something in between, by creating a virtual os running inside a ""container"" within another running os (usually linux) that to your software looks like a dedicated instance of an os, and--crucially--provides efficient mechanisms to package that virtual os and all of the dependencies necessary to run your software. in this way, software can be packaged, delivered, and used in a way that is predictable and repeatable regardless of the system on which it is run. with the above explanation, it may be clear why docker can be useful for distributing and using software like meta/metapy, especially for learning or research: it has dependencies or proclivities for certain versions of python, certain operating systems (i.e. windows) present problems, and gathering and/or building the software and its dependencies can be tedious and error prone and may require a level of proficiency in a number of different technical areas. for the containers in this project, one essentially needs only to install docker and run a single command to get started. helpful background while it is not necessary to have a thorough understanding of docker to use these containers (especially metapyquod-dev), the following references are helpful in understanding key concepts: docker simplified: a hands-on guide for absolute beginners (text) learn docker in 12 minutes (video) other references install docker desktop on windows (windows home specific instructions) install docker desktop on mac install docker engine on ubuntu (other distros also described on docs.docker.com, and pay special notice to the optional post-installation steps) installing docker on the raspberry pi how were these images built? the dockerfile within each directory defines the build steps necessary for each container, and you should be able to reproduce the build by using (or reading) these dockerfiles. note, however, that images for each container have been pushed to docker hub, so you should not have to build them yourself (e.g. docker build . -t metapyquod-indexer) unless you want to--you should be able to simply run them (e.g. docker run --rm sphtkr/metapyquod-indexer --help). the images on docker hub were built as ""multiarch"" images using buildx/buildkit, using an amd64 host, a raspberry pi 3 running raspbian buster as an arm7l (32-bit arm) build host and a raspbery pi 4 running ubuntu as an aarch64 (64-bit arm) build host. the result is that you should be able to use a single tag to pull/run any of these images from any x86_64 linux docker host (including macos's hypervisorkit driver and windows' wsl driver) or any armv7 or armv8 system supported by docker (e.g. raspberry pi 2, 3, and 4 systems). as the above link points out, this is probably also crucial to support use on windows and mac systems with arm processors, though docker is not yet supported on these systems. the base image for all containers are the [official python images], which are (thankfully) already multiarch images, simplifying the build process. since the metapyquod containers rely on the build system components being in the base image, the ""full"" official images are used and not the slim or alpine variants, which does result in a larger image/download size. (this could be improved for -server and -indexer in the future with a multi-stage build.) one notable aspect of all three dockerfiles is that they build metapy from source with a small patch (instead of using pip install metapy). in short, all current branches of meta include a specified url for downloading the icu library, but the icu project has changed all their download links to a new location on github. this problem should be avoidable by installing libicu and libicu-dev via the package manager (apt), but on some architectures the cmake build scripts for meta force a static build of icu (for reasons that are not entirely clear), which forces the use of the download url. furthermore, the metapy in pip and at the head of the master branch in github builds from a specific commit of meta that is no longer at the head of any branch, so to fix the problem both repositories would have to be updated. therefore, to simplify the cross-architecture build process, we simply checkout the metapy source from github recursively (including the specific commit of meta), patch the broken url (the md5 hash still matches) and build from that patched source. what's with the name? the pequod was the ship sailed by captain ahab in moby dick. the whale mascot in the docker logo is named moby dock. so, ba dum tss (or womp womp)."	['matt', 'williamson', 'mdw', 'leadcaptain', 'cs', 'november', 'metapyquod', 'progress', 'report', 'end', 'metapyquoddev', 'container', 'image', 'essentially', 'complete', 'workingat', 'least', 'x_', 'platforms', 'work', 'metapyquodserver', 'early', 'stages', 'initial', 'creation', 'definition', 'went', 'smoothly', 'operates', 'expected', 'macosin', 'fact', 'surprising', 'result', 'observed', 'running', 'working', 'implementation', 'mp', 'natively', 'macos', 'host', 'resulted', 'consistently', 'faster', 'execution', 'time', 'two', 'adjustments', 'proposal', 'likely', 'necessary', 'portion', 'project', 'desired', 'goal', 'include', 'gui', 'ide', 'python', 'development', 'however', 'seen', 'highcomplexity', 'added', 'risk', 'especially', 'nonlinux', 'process', 'researching', 'options', 'webpdb', 'module', 'discovered', 'provides', 'full', 'debugging', 'environment', 'within', 'web', 'browser', 'need', 'robust', 'debugger', 'primary', 'motivator', 'providing', 'visual', 'capability', 'far', 'lower', 'complexity', 'therefore', 'final', 'solution', 'map', 'directory', 'allow', 'editor', 'pycharm', 'vscode', 'spyder', 'etc', 'directly', 'files', 'provide', 'via', 'another', 'support', 'armvlarmhf', 'armvaarch', 'systems', 'mainly', 'popularity', 'raspberry', 'pi', 'similar', 'sbc', 'hardware', 'attempts', 'beset', 'build', 'problems', 'despite', 'base', 'official', 'used', 'supports', 'architectures', 'first', 'scipynumpy', 'related', 'dependencies', 'wellsupported', 'though', 'may', 'surmountable', 'benefit', 'significant', 'required', 'large', 'investment', 'prebuilt', 'would', 'eliminate', 'cost', 'second', 'difficult', 'meta', 'system', 'fails', 'aarch', 'trying', 'download', 'icucthe', 'problem', 'encountered', 'many', 'users', 'different', 'platformsand', 'even', 'exact', 'root', 'cause', 'remains', 'elusive', 'resolvable', 'consume', 'available', 'scope', 'noted', 'thatin', 'students', 'opinionthe', 'present', 'state', 'metametapy', 'jeopardizes', 'viability', 'continuing', 'course', 'content', 'tools', 'appears', 'updates', 'made', 'tool', 'years', 'continue', 'evolve', 'surface', 'area', 'supported', 'configurations', 'shrink', 'additionally', 'particularly', 'noteworthy', 'described', 'bit', 'arm', 'also', 'occur', 'new', 'apple', 'processor', 'eventually', 'going', 'forward', 'beginning', 'already', 'done', 'tech', 'review', 'completed', 'aws', 'lambdawhich', 'shares', 'details', 'including', 'openapi', 'specification', 'given', 'difficulties', 'dev', 'descoping', 'well', 'instance', 'feedback', 'metrics', 'endpoints', 'remaining', 'technical', 'unknowns', 'behavior', 'inverted', 'disk', 'indexes', 'updatedeg', 'unclear', 'whether', 'total', 'reindex', 'starting', 'existing', 'index', 'loaded', 'documents', 'based', 'experience', 'target', 'less', 'issue', 'use', 'case', 'october', 'containerized', 'metapy', 'appliances', 'object', 'simplify', 'bindings', 'creating', 'prepackaged', 'docker', 'containers', 'ready', 'cases', 'following', 'reusable', 'contain', 'libraries', 'functional', 'known', 'good', 'version', 'useful', 'eg', 'scipy', 'numpy', 'git', 'control', 'binaries', 'linux', 'shell', 'suitable', 'experimentation', 'basic', 'ie', 'programming', 'assignments', 'able', 'derivative', 'better', 'facilitate', 'particular', 'toolchain', 'windows', 'andor', 'subsystem', 'hope', 'dockers', 'multiarch', 'features', 'devices', 'possible', 'achieved', 'instantiate', 'single', 'run', 'command', 'simple', 'search', 'engine', 'core', 'microservice', 'behind', 'rest', 'api', 'capable', 'enough', 'serve', 'production', 'appliance', 'intranet', 'scenario', 'components', 'real', 'world', 'service', 'intended', 'english', 'language', 'corpora', 'expose', 'volume', 'expects', 'find', 'mirror', 'filesystem', 'structure', 'according', 'conventions', 'produced', 'wget', 'spider', 'user', 'flexible', 'crawl', 'ingest', 'since', 'timestamping', 'downloaded', 'requery', 'culling', 'lastmodified', 'headers', 'monitor', 'newly', 'modified', 'gaining', 'efficiencies', 'addition', 'sane', 'defaults', 'configuration', 'data', 'configtoml', 'relevant', 'customization', 'written', 'probably', 'http', 'framework', 'like', 'django', 'three', 'capabilities', 'services', 'text', 'string', 'parameter', 'pagination', 'parameters', 'return', 'jsonformatted', 'results', 'url', 'query', 'identifier', 'potential', 'mechanism', 'registering', 'clickthroughs', 'implicit', 'viewed', 'received', 'inputs', 'effect', 'iteration', 'established', 'future', 'incorporation', 'telemetry', 'information', 'diagnostic', 'engagement', 'purposes', 'last', 'urls', 'indexed', 'documentsterms', 'swaggeropenapi', 'provided', 'compliant', 'client', 'interact', 'serviceit', 'test', 'using', 'generic', 'permits', 'example', 'frontend', 'demonstrator', 'estimates', 'design', 'deploy', 'environments', 'create', 'documentation', 'hours', 'develop', 'implement', 'package', 'containerization', 'pdf', 'instead', 'fighting', 'versions', 'issues', 'includes', 'uiuc', 'builds', 'multiple', 'amd', 'armvl', 'aarchso', 'oss', 'believed', 'processors', 'server', 'almost', 'lacks', 'robustness', 'metapyquodindexer', 'expedites', 'recursive', 'captures', 'fields', 'metadata', 'original', 'title', 'html', 'modification', 'file', 'correspond', 'date', 'page', 'retrieving', 'conjunction', 'contexts', 'dockerwhy', 'perhaps', 'things', 'view', 'yet', 'attempt', 'deliver', 'write', 'anywhere', 'software', 'java', 'abstracting', 'away', 'operating', 'presenting', 'virtual', 'machine', 'vm', 'runtime', 'never', 'existed', 'concrete', 'form', 'virtualization', 'vmware', 'virtualbox', 'kvm', 'softwarebased', 'abstraction', 'physical', 'upon', 'whole', 'os', 'something', 'inside', 'usually', 'looks', 'dedicated', 'andcruciallyprovides', 'efficient', 'mechanisms', 'way', 'packaged', 'delivered', 'predictable', 'repeatable', 'regardless', 'explanation', 'clear', 'distributing', 'learning', 'research', 'proclivities', 'certain', 'gathering', 'building', 'tedious', 'error', 'prone', 'require', 'level', 'proficiency', 'number', 'areas', 'one', 'needs', 'install', 'get', 'started', 'helpful', 'background', 'thorough', 'understanding', 'references', 'key', 'concepts', 'simplified', 'handson', 'guide', 'absolute', 'beginners', 'learn', 'minutes', 'video', 'desktop', 'home', 'specific', 'instructions', 'mac', 'ubuntu', 'distros', 'docsdockercom', 'pay', 'special', 'notice', 'optional', 'postinstallation', 'steps', 'installing', 'images', 'built', 'dockerfile', 'defines', 'reproduce', 'reading', 'dockerfiles', 'note', 'pushed', 'hub', 'unless', 'want', 'toyou', 'simply', 'rm', 'sphtkrmetapyquodindexer', 'help', 'buildxbuildkit', 'raspbian', 'buster', 'arml', 'raspbery', 'tag', 'pullrun', 'macoss', 'hypervisorkit', 'driver', 'wsl', 'armv', 'link', 'points', 'crucial', 'thankfully', 'simplifying', 'rely', 'slim', 'alpine', 'variants', 'larger', 'imagedownload', 'size', 'could', 'improved', 'indexer', 'multistage', 'notable', 'aspect', 'source', 'small', 'patch', 'pip', 'short', 'current', 'branches', 'specified', 'downloading', 'icu', 'library', 'changed', 'links', 'location', 'github', 'avoidable', 'libicu', 'libicudev', 'manager', 'apt', 'cmake', 'scripts', 'force', 'static', 'reasons', 'entirely', 'forces', 'furthermore', 'head', 'master', 'branch', 'commit', 'longer', 'fix', 'repositories', 'updated', 'crossarchitecture', 'checkout', 'recursively', 'broken', 'md', 'hash', 'still', 'matches', 'patched', 'whats', 'name', 'pequod', 'ship', 'sailed', 'captain', 'ahab', 'moby', 'dick', 'whale', 'mascot', 'logo', 'named', 'dock', 'ba', 'dum', 'tss', 'womp']
https://github.com/Sushanta77/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/TomTJarosz/CourseProject	thomas jarosz netid: tjarosz2 uin: 669902044 cs410 final project proposal for my final project, i have chosen option 1: reproducing a paper. questions: 1a) what are the names and netids of all your team members? thomas jarosz: tjarosz2 1b) who is the captain? tjarosz2 2) which paper have you chosen? i have chosen to reproduce hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505. 3) which programming language do you plan to use? i plan to use python. 4) can you obtain the datasets used in the paper for evaluation? yes; the authors of this paper provide a link to the datasets. thomas jarosz progress report 1) which tasks have been completed? i have read through the paper. 2) which tasks are pending? implementing the paper. 3) are you facing any challenges? yes; understanding the paper is difficult. courseproject this repo contains the work for team foo's cs410 final project. proposal contained within the file cs410proposal.pdf is the team foo's project proposal.	['thomas', 'jarosz', 'netid', 'tjarosz', 'uin', 'cs', 'final', 'project', 'proposal', 'chosen', 'option', 'reproducing', 'paper', 'questions', 'names', 'netids', 'team', 'members', 'b', 'captain', 'reproduce', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'programming', 'language', 'plan', 'use', 'python', 'obtain', 'datasets', 'used', 'evaluation', 'yes', 'authors', 'provide', 'link', 'progress', 'report', 'tasks', 'completed', 'read', 'pending', 'implementing', 'facing', 'challenges', 'understanding', 'difficult', 'courseproject', 'repo', 'contains', 'work', 'foos', 'contained', 'within', 'file', 'csproposalpdf']
https://github.com/VisualPracticeRank/CourseProject	visual practice rank goal the goal of this project is to create a visual representation of a supplied ranking function in a form that is comparable to modern search engines with the display of additional data that would be only in the background project presentation https://mediaspace.illinois.edu/media/t/1_3s2zdgys getting started installation create a virtual environment using conda: conda create -n [your-env-name] python=3.6 e.g. conda create -n vpr python=3.6 anaconda activate the virtual environment conda activate [your-env-name] e.g. conda activate vpr download the repository git clone https://github.com/visualpracticerank/courseproject.git install the packages in requirements.txt cd courseproject pip install -r requirements.txt running the django server while in the courseproject folder, cd into vpr, list of the files and folders and you will see a file called manage.py. run the following command: python3 manage.py makemigrations python3 manage.py migrate --run-snycdb python3 manage.py runserver a browser with the application will pop-up, or you can head to 127.0.0.1:8000 if you are running this on a vm, instead of python3 manage.py runserver, you can run the following command: python3 manage.py runserver 0.0.0.0:8000 then, head over to [your ip]:8000, e.g. 18.219.133.210:8000 shutting down the django server if you want to shutdown the django server, you can do ctrl+c in the terminal to shut down the server. you can also deactivate the virtual environment with this command: conda deactivate features dataset you can upload your dataset by selecting dataset on the homepage and fill in and upload the appropriate files needed: 1. name 2. description 3. data 4. qrels 5. queries and select upload. model in addition to the default models available ('okapibm25', 'pivotedlength', 'absolutediscount', 'jelinekmercer', 'dirichletprior'), you can upload your own custom models. you can upload your own model (ranker) by selecting model on the homepage and fill in the textboxes: 1. name 2. description 3. model and select add. query after selecting the dataset and model that you want to use, you can specify a query in the textbox and select search. you will get the top 10 documents with the highest score in your model, displayed in descending order. step through this functionality allows you to step through the queries.txt file you specified when uploading the dataset and observe the changes in the ndcg score and other various stats. after selecting the dataset and model that you want to use, you can select step through. you can use the '>>' and '<<' buttons to step through and step out. how it works overview this program is implemented using django (python, html, sqlite3) as the frontend and metapy (and python) as the backend. frontend the dataset details are stored in the webui_dataset. the dataset, qrels, and queries files are stored in a folder, with a unique name generated by the system, under the dataset folder. the webui_dataset has the following fields: id (primary key), name, description, data, qrels, queries. when a dataset is being uploaded, the documents in the dataset is loaded into webui_document with the following fields: id (primary key), document_id, body, dataset_id (foreign key to webui_dataset.id). when a model is being uploaded, the model is loaded into webui_model with the following fields: id (primary key), description, model, name. before storing the actual model, it will be encoded to base64. after you can select a dataset, model, and query, you click on search. then frontend (in view.py) will call the backend (search_eval.py) and pass the following variables: folder (folder where the dataset is stored), model, query. for the iteration feature, the frontend will send these information to the backend: folder (path to dataset), model. after receiving the response from the backend, the frontend will display the following information: query (as specified in the queries.txt), ndcg, a table of the following information: the score of the document, size of the document, unique terms in the document, and snippit of the body. backend the backend (search_eval.py) will these variables from the frontend: folder, model, query. it will first change its directory to [folder_to_dataset]/datasets and build an inverted index. then, it will determine if the model is one of the defaults ('okapibm25', 'pivotedlength', 'absolutediscount', 'jelinekmercer', 'dirichletprior'). if it's not, then it will decode the string (using base64) and build the ranker. finally, it will run the ranker with the inverted index, query for the top 10 documents and return the top 10 documents, and their score. for the iteration feature, the backend will utilize the qrels.txt and queries.txt that were uploaded when uploading the dataset. it will return a list of list: 1. results[0] = list of top k articles 2. results[1] = list of ndcg 3. results[2] = list of running avg ndcg 4. results[3] = list of queries reference chase geiglem, 2017. [2-search-and-ir-eval.ipynb] (https://github.com/meta-toolkit/metapy/blob/master/tutorials/2-search-and-ir-eval.ipynb).	['visual', 'practice', 'rank', 'goal', 'project', 'create', 'representation', 'supplied', 'ranking', 'function', 'form', 'comparable', 'modern', 'search', 'engines', 'display', 'additional', 'data', 'would', 'background', 'presentation', 'httpsmediaspaceillinoisedumediat_szdgys', 'getting', 'started', 'installation', 'virtual', 'environment', 'using', 'conda', 'n', 'yourenvname', 'python', 'eg', 'vpr', 'anaconda', 'activate', 'download', 'repository', 'git', 'clone', 'httpsgithubcomvisualpracticerankcourseprojectgit', 'install', 'packages', 'requirementstxt', 'cd', 'courseproject', 'pip', 'r', 'running', 'django', 'server', 'folder', 'list', 'files', 'folders', 'see', 'file', 'called', 'managepy', 'run', 'following', 'command', 'makemigrations', 'migrate', 'runsnycdb', 'runserver', 'browser', 'application', 'popup', 'head', 'vm', 'instead', 'ip', 'shutting', 'want', 'shutdown', 'ctrlc', 'terminal', 'shut', 'also', 'deactivate', 'features', 'dataset', 'upload', 'selecting', 'homepage', 'fill', 'appropriate', 'needed', 'name', 'description', 'qrels', 'queries', 'select', 'model', 'addition', 'default', 'models', 'available', 'okapibm', 'pivotedlength', 'absolutediscount', 'jelinekmercer', 'dirichletprior', 'custom', 'ranker', 'textboxes', 'add', 'query', 'use', 'specify', 'textbox', 'get', 'top', 'documents', 'highest', 'score', 'displayed', 'descending', 'order', 'step', 'functionality', 'allows', 'queriestxt', 'specified', 'uploading', 'observe', 'changes', 'ndcg', 'various', 'stats', 'buttons', 'works', 'overview', 'program', 'implemented', 'html', 'sqlite', 'frontend', 'metapy', 'backend', 'details', 'stored', 'webui_dataset', 'unique', 'generated', 'system', 'fields', 'id', 'primary', 'key', 'uploaded', 'loaded', 'webui_document', 'document_id', 'body', 'dataset_id', 'foreign', 'webui_datasetid', 'webui_model', 'storing', 'actual', 'encoded', 'base', 'click', 'viewpy', 'call', 'search_evalpy', 'pass', 'variables', 'iteration', 'feature', 'send', 'information', 'path', 'receiving', 'response', 'table', 'document', 'size', 'terms', 'snippit', 'first', 'change', 'directory', 'folder_to_datasetdatasets', 'build', 'inverted', 'index', 'determine', 'one', 'defaults', 'decode', 'string', 'finally', 'return', 'utilize', 'qrelstxt', 'results', 'k', 'articles', 'avg', 'reference', 'chase', 'geiglem', 'searchandirevalipynb', 'httpsgithubcommetatoolkitmetapyblobmastertutorialssearchandirevalipynb']
https://github.com/Wenfan1993/CourseProject	cs410 text information systems - team: fan & jain rhymes project proposal team members: member name netid email wenxi fan (captain) wenxif2 wenxif2@illinois.edu abhishek jain aj26 aj26@illinois.edu competition to join: text classification language to use: python our team's key motivation to join the text classification competition is to go beyond what has been taught in the course, study state-of-the-art nlp tools and apply it on a real-world problem. this competition gives us such an opportunity where we cannot just learn the latest tools by solving a real-world problem but also it challenges us to raise our bars to implement optimal solutions to meet the baseline scores. we are extremely excited to learn, participate and give our best performance. in our current professional engagements, both of us are part of ai teams respectively where machine learning tools & techniques are used for problem solving. neural networks being the most advanced & extensively used methodologies in our respective enterprises, we both have got a chance to work and closely observe best practices & implementation styles using it. we have high level understanding and hands on experience of ann, rnn, cnn & lstm architecture styles and its realization using tensorflow keras & pytorch based implementation. for text related problems we have awareness on usage of word embeddings viz. word2vec & glove. with the latest developments in nlp, we are aware of the release of newer advanced tools like bert, openai gpt1/2/3, huggingface transformers which we have not yet explored. these tools are also in our consideration list for approaching the problem solution. wenxi was engaged in building rnn models for contract terms cleaning and classification, and in building the seq2seq model for document cleaning and document state mapping. abhishek has experience of working closely with data science teams which utilizes neural networks-based framework implementation to solve several problems like task sequence prediction, call conversation compliance, sales forecasting, customer look-a-likes and segmentation in customer relationship management domain. for this project, we will explore the sequential text features, and learn the associations between words in the short text. we will plan to explore the models that combine the text ranking algorithms and machine learning models (e.g. tf-idf and svm). then, we will plan to build models with recurrent neural networks, or convolutional neural networks or a combination of both and learn to improve the model performance with different architectures. we also plan to explore attention-based models and leverage attention models/hierarchical attention models to explore the performance impact. we will compare the different models and select the model with the best performance. cs410 text information systems - team: fan & jain rhymes progress report task completed: below are the tasks we have completed so far: 1. solution architecture design & approach finalization: team planned to use several state-of-art architectural styles to experiment & validate the results & compare different approaches results. approach is to start from conventional styles and gradually progress to use advance methodologies. a. conventional ml methodologies b. deep learning based implementations c. attention & transformers based implementations. 2. environment setup a. analyzed different environment viz. local desktop, google colab and cloud to setup experimentation playground. cost effectiveness & high processing needs were the key parameters considered. b. colab pro environment was preferred over others which enabled us using high memory & gpu/tpu based processing for deep learning based implementations. 3. ml pipeline setup: a. data import: training & test data was imported to google drive & authentication setup was done to access it. b. data preprocessing: data clean step is performed to address words spelling error, repetition, signs & emoji. c. feature engineering: several features were constructed to support solution approach as multi sentence sequence & single document classification problem. d. model training/fine tuning: select, train, and evaluate the model. for pre-trained models fine tuning step was performed considering different solution classification styles. e. prediction: output the predictions. 4. ml models: below are several modelling strategies which team has evaluated for given classification problem. a. tf-idf + dimensionality reduction (via svd) + tree (random forest). b. general lstm model (with one or multiple lstm layers followed by fully connected layers). c. transformer (attention-based) models leveraging hugging face pre-trained models: roberta, bert, xlm, based on which we fine-tune for our task. 5. observations: we have compared all the approaches & results are per our expectation as below: - conventional ml (tfidf/svd/random forest) based implementation was not able to beat the baseline score. - deep learning (lstm based) implementation - 2-3 lstm layers followed by 2-5 fully connected layers, which implementation was not able to beat the baseline score. - transformer based approach: cs410 text information systems - team: fan & jain rhymes o bert base: just at par with baseline results but ranked intermediate on leader board. o roberta base: performed very well with highest accuracy, precision & f1 values (achieved 72.3% accuracy, 80.4% recall, 76.2% f1) task pending: below are the tasks we plan to complete before the final submission: 1. we are planning to further explore other models for our task, that includes: gpt-2, gpt-3. 2. we are planning to complete the documentation of our pipeline to be prepared for the final submission. challenges faced: below are the challenges we faced: 1. noises in the data: the input data appears to have a lot of noises - words spelling error, repetition, words/signs/emoji that appear to occur very few times. in addition, there are many words/signs in test sets that are not included in the training set. these create challenges in extracting useful information out from the inputs and challenges in generalizing the model to the data not included in the training process. 2. the way to leverage context/response to engineer effective input features: currently we use the context/response by inputting them as two separate features or concatenating as one (and/or reversing orders). although we leveraged the transformer models that generate attention mechanism(both on words and position of words), we have not yet been able to explore a way ourselves to engineer features that might be more effective as inputs than pure words and sentences. the example of such inputs could be sentiment of sentences, the hierarchical attention from character-level to sentence level. 3. hyper-parameter tuning we found challenges in hyper-parameter tuning, especially when the parameter space is large. we used 'trainer' (utility from transformers) that helped automate the parameter search, but still the parameter space is large, and getting the best model may take time. 4. large model we are unable to tune large transformer models like roberta_large & bert_large models due to gpu memory issues. 5. select the performance criteria we found challenges in selecting models that generates well on test data - although we used validation set in addition to test set (which sets are separated out from training data), the model that test well (good f1) on validation and test set may not generalize well to the other data not seen in the training process. instead of just using f1 score, the one datapoint, as the criteria to judge the performance, the below steps were performed that achieved better performance criteria (which gives better picture on the performance of model): cs410 text information systems - team: fan & jain rhymes a. evaluate the distribution of scores on multiple batches of the validation set, to analyze the level and consistency of the performance. b. in addition to evaluate precision/recall/f1 the level of performance, we could also evaluate from a different perspective, such as analyzing the correlation between prediction and ground truth. colab notebook final version of our project code is available as google colab notebook which is shared and available at sequenceclassification. through this code, we trained and fine-tuned the roberta based transformer model for the text classification competition (identifying if the tweet is sarcasm or not_sarcasm), and we are able to achive f1 score higher than the base-line. below are the several steps detailed to be execute to run the code end to end. since modelling methodology is transformer based it would be recommended to use gpu for processing. google colab is the preferred environment to run the end to end process and generate the results. use of our model we have created the checkpoint our model, available to download from the below path. for use of our model, user can just just load the checkpoint to the api 'automodelforsequenceclassification'. (see https://huggingface.co/transformers/model_doc/auto.html for more details) for the use case of our text competition (and as an example of using our model), please refer to colab notebook roberta_model_test fpr using the checkpoint of our model and reproducing answer.txt. tutorial: reproduce_answers_with_checkpoint checkpoint available to download from: checkpoint see slide 11 for detailed step-by-step guidance presentation presentation and model testing please see presentation for the slides we created for the presentation. please see video tutorial: reproduce_answers_with_checkpoint for step by step guidance how to re-run and test our model contribution of team members each of us collaborated very closely in each step of reseach, experiment, and improvise. we have touch point scheduled on a weekly basis, where we shared the learning and resources, discuss our approach, and walk-through our codes. with that, each of us contributed 100% effort in each step of the project process. our team members are: wenxi fan (netid: wenxif2; email:wenxif2@illinois.edu) abhishek jain (netid: aj26; email:aj26@illinois.edu) below are the steps in our model training and output generation (as in sequenceclassification.) environment setup first setup the environment, we will do the following steps here. - transformers model installation - hyper parameter tuning library installation - colab setup you will be required to authorize the code using your google account. copy the authorization code generated and pass it in the notebook in the input box provided when you run mount drive code. below is the reference: ```py colab setup from google.colab import drive drive.mount('/content/drive', force_remount=true) ``` also please copy the train & test jsonl files provided in your google drive required for training and testing the models further. tutorial: environment setup data load next step is to load the training & test datasets as pandas dataframe. please update correct data path where training and test dataset is copied in your google drive. py datapath = r'/content/drive/my drive/mcsds/cs-410-text-mining/project/classificationcompetition/data' train_pddf = pd.read_json(datapath+'/train.jsonl', lines=true) test_pddf = pd.read_json(datapath+'/test.jsonl', lines=true) above example suggests my train & test jsonl files are copied in my drive at '/mcsds/cs-410-text-mining/project/classificationcompetition/data' location. further run the data load section. reference: data load & preprocessing data preprocessing next step is to run the data preprocessing steps. below are the different components of it: feature engineering create new features: * last response: extract the last response from the context since the current response was generated on last this can be separately treated. * context reversed: reverse the context before feeding to transformers so that latest tweets are given more attention and incase if context is too big latest shall be considered. * combine all into a single * combine current & last response into single sequence structuring define how do we want to structure the different tweets, basically two approaches are followed: * combine into single: last response only, combine all tweets togeather or current and last. * two sentence: (current, last response) or (current, context reversed). transform to datasets translate preprocessed dataframes to transformer datasets. this step is required to make our dataset translated into transformer datasets construct. reference: data load & preprocessing model configurtion configure which model strategy to select, train test valid splits, performance metrics, training batch sizes etc. below are the details: 1. model_checkpoint: which model to use for text sequence classification. roberta models are observed to give the maximum performance. 2. task: specify how to structure the sequences as described in sequence structuring step. we have observed the maximum performance with 'response_context_rev_sep' structure. this format structures input as two sequence where response is last tweet to be classified, and context tweets are the previous tweets in an reversed order of occurance. 3. metric_name: metric to be optimized while training. we have configured it to accuracy. 4. num_labels: 2, number of classes sarcasm, not sarcasm 5. batch_size: 16 for roberta, 64 for bert otherwise we face out of memory issues. 6. train_test_split: to divide training data into train and test datasets. 7. test_valid_split: to divide test dataset into test and validation set. 8. epoch: number of epochs to train model on. 9. weight_decay: determines how much an updating step influences the current value of the weights 10. learning_rate: weight update rule that causes the weights to exponentially decay to zero reference: model config tokenization this step translates words to context tokens. transformers tokenizer tokenize the inputs (including converting the tokens to their corresponding ids in the pretrained vocabulary) and put it in a format the model expects, as well as generate the other inputs that model requires. reference: tokenization & single model fine tuning single model fine tuning download the pretrained model and fine tune the selected model with arguments configured in the previous step. reference: tokenization & single model fine tuning reference: training results test validation validate the results on test data and compute the metrics. reference: validation results hyper parameter tuning could be only run with high gpu environment using transformer trainer utility which supports hyperparameter search using optuna or ray tune libraries which we have installed in our previous step. during hyperparameter tuning step, the trainer will run several trainings, so it needs to have the model defined via a function (so it can be reinitialized at each new run) instead of just having it passed. the hyperparameter_search method returns a bestrun objects, which contains the value of the objective maximized and the hyperparameters it used for that run. reference: hyperparameter tuning best run selection & training could be only run with high gpu environment to reproduce the best training run from our previous hyper parameter train setp we will set the best hyperparameters trainingargument before training the model again. reference: hyperparameter tuning text classification competition - attention-based transformers cs410: text information system team: fan & jain rhymes - wenxi fan (netid: wenxif2; email:wenxif2@illinois.edu) abhishek jain (netid: aj26; email:aj26@illinois.edu) agenda: project goal and our approach code walkthrough run the code test our results project goal project goal: implement text classifier to be able to identify if the twit is sarcasm or not. inputs: text (tweets) - response : the tweet response to be classified context : the conversation context of the response labels: sarcasm or not_sarcasm (two classes) goal: text classifier implemented to achieve f1 score >70% motivation: research, learn and implement best-in-class next generation techniques to approach text-based classification problems. expand our knowledge & understanding in nlp space beyond what is taught in the course. approach - overview research goal research available best-in-class nlp techniques learn & understand the application of each techniques outcome attention-based approach to text classification https://github.com/wenfan1993/courseproject/blob/main/research_summary/attentionbased%20approach%20to%20text%20classification.pdf the application of attention models in text classification https://github.com/wenfan1993/courseproject/blob/main/research_summary/application%20of%20attention%20to%20classification.pdf experiment goal evaluate different nlp techniques & short list for final implementation outcome initial experiments conducted for baseline results tfidf/svm bi-directional lstm with embedding transformer based pre-trained model) improvise goal optimize the best technique researched & tune it for result generation. outcome transformer based implementation were finalized tuned with different input structures used different pre-trained models like bert, roberta, xlm etc. approach - research research focus: attention mechanism, a breakthrough principle which has revolutionized building state-of-the-art nlp solutions. detailed overview on different solution architectures styles which can be used to solve text classification problem. see below reference to our research documents: https://github.com/wenfan1993/courseproject/blob/main/research_summary/attentionbased%20approach%20to%20text%20classification.pdf https://github.com/wenfan1993/courseproject/blob/main/research_summary/application%20of%20attention%20to%20classification.pdf approach - experiment approach - improvise (1) feature engineering & problem structuring input sequence structured as: single document classification all tweets combined as single document for classification response and last tweet combined as single document for classification sequence classification tweets modeled as two text sequence for classification response, last tweet response, context response, context reversed best results observed when problem modelled as sequence classification setup with text sequence as response and context reversed. approach - improvise (2) bert and roberta bert model - bidirectional encoder representations from transformer designed to pretrain deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers; has certain limitations, e.g. bert is limited to a particular input length for long document is split into segments of a fixed size with overlap. roberta - robustly optimized bert approach roberta is the enhanced transformer based on bert approach roberta is trained with dynamic masking, full-sentences without nsploss, large mini-batches, and a larger byte-level bpe. (2) roberta overcomes several limitations of bert including the one mentioned above. approach - improvise (3) model overview roberta embeddings: word embeddings position embeddings token-type embeddings roberta encoder (12 roberta layers) each layer includes: roberta self-attention based on query, key, value roberta self-output with dense layer, layer norm and dropout roberta intermediate with dense/linear layer roberta classifier: with dense/liner layers for more information, please refer to reference (1) code walk-through steps: environment setup (transformers model installation, hyper-parameter tuning library installation, colab set-up) data load and preprocessing features: we explored using the response, latest context, response and latest context concatenated, context reversed, and the combination of such, and turns out using the below features gave the best performance response context reversed (starting from latest dialog) label: 1 for sarcasm; 0 for non-sarcasm model configuration choose roberta-base model set up the evaluation metrics, batch-size, train-test split ratio, number of epochs tokenization use api autotokenizer single model finetuning set automodelforsequenceclassification, trainingarguments wrapped in trainer object hyperparameter tuning use hyperparameter_search method of the trainer object selected the best run select the best hyper-parameter that maximize the metrics (accuracy) test and compute the accuracy, precision, recall and f1 of the best model generate the outputs for submission see colab file 'sequenceclassifier.ipynb' for the script that includes these steps https://colab.research.google.com/drive/1nhscc1krbzpr6lkg3qfwq_cxhv4sr_ib?usp=sharing run the code test steps: tutorial available at https://drive.google.com/file/d/1aa75kqpg4qnej5hypzrw51etr_ua0idn/view?usp=sharing open colab notebook 'roberta_model_test' at the below link: https://colab.research.google.com/drive/1s9g8dd7jmut6jsjo1ysaa4e3ntcnakxk?usp=sharing also uploaded to github repo github repo path: https://github.com/wenfan1993/courseproject load the below items from the github repo to colab environment at '\content\' test.jsonl (uploaded to github repo) https://github.com/wenfan1993/courseproject/tree/main/test_source_data check_point.pth (the checkpoint where we stored our trained model) https://drive.google.com/file/d/1z1iieu1e7dgqtayypwe66qyag7h1d-st/view?usp=sharing run the colab notebook the output 'answer.txt' will be output and stored at collab '\content\' our results we passed the base-line! as of 12/11, 11:00pm cst, we ranked no.5 at the leaderboard, we achieved precision 72.3%, recall 80.4% and f1 76.2%. we are here appendix references: (1) https://huggingface.co/roberta-base (2) roberta: a robustly optimized bert pretraining approach, by linhan liu et. al. https://arxiv.org/abs/1907.11692 github repo path: https://github.com/wenfan1993/courseproject thank you! for any question, please feel free to contact our team members: wenxi fan email: wenfan1993@gmail.com/wenxif2@illinois.edu abhishek jain email:aj26@illinois.edu	['cs', 'text', 'information', 'systems', 'team', 'fan', 'jain', 'rhymes', 'project', 'proposal', 'members', 'member', 'name', 'netid', 'email', 'wenxi', 'captain', 'wenxif', 'wenxifillinoisedu', 'abhishek', 'aj', 'ajillinoisedu', 'competition', 'join', 'classification', 'language', 'use', 'python', 'teams', 'key', 'motivation', 'go', 'beyond', 'taught', 'course', 'study', 'stateoftheart', 'nlp', 'tools', 'apply', 'realworld', 'problem', 'gives', 'us', 'opportunity', 'cannot', 'learn', 'latest', 'solving', 'also', 'challenges', 'raise', 'bars', 'implement', 'optimal', 'solutions', 'meet', 'baseline', 'scores', 'extremely', 'excited', 'participate', 'give', 'best', 'performance', 'current', 'professional', 'engagements', 'part', 'ai', 'respectively', 'machine', 'learning', 'techniques', 'used', 'neural', 'networks', 'advanced', 'extensively', 'methodologies', 'respective', 'enterprises', 'got', 'chance', 'work', 'closely', 'observe', 'practices', 'implementation', 'styles', 'using', 'high', 'level', 'understanding', 'hands', 'experience', 'ann', 'rnn', 'cnn', 'lstm', 'architecture', 'realization', 'tensorflow', 'keras', 'pytorch', 'based', 'related', 'problems', 'awareness', 'usage', 'word', 'embeddings', 'viz', 'wordvec', 'glove', 'developments', 'aware', 'release', 'newer', 'like', 'bert', 'openai', 'gpt', 'huggingface', 'transformers', 'yet', 'explored', 'consideration', 'list', 'approaching', 'solution', 'engaged', 'building', 'models', 'contract', 'terms', 'cleaning', 'seqseq', 'model', 'document', 'state', 'mapping', 'working', 'data', 'science', 'utilizes', 'networksbased', 'framework', 'solve', 'several', 'task', 'sequence', 'prediction', 'call', 'conversation', 'compliance', 'sales', 'forecasting', 'customer', 'lookalikes', 'segmentation', 'relationship', 'management', 'domain', 'explore', 'sequential', 'features', 'associations', 'words', 'short', 'plan', 'combine', 'ranking', 'algorithms', 'eg', 'tfidf', 'svm', 'build', 'recurrent', 'convolutional', 'combination', 'improve', 'different', 'architectures', 'attentionbased', 'leverage', 'attention', 'modelshierarchical', 'impact', 'compare', 'select', 'progress', 'report', 'completed', 'tasks', 'far', 'design', 'approach', 'finalization', 'planned', 'stateofart', 'architectural', 'experiment', 'validate', 'results', 'approaches', 'start', 'conventional', 'gradually', 'advance', 'ml', 'b', 'deep', 'implementations', 'c', 'environment', 'setup', 'analyzed', 'local', 'desktop', 'google', 'colab', 'cloud', 'experimentation', 'playground', 'cost', 'effectiveness', 'processing', 'needs', 'parameters', 'considered', 'pro', 'preferred', 'others', 'enabled', 'memory', 'gputpu', 'pipeline', 'import', 'training', 'test', 'imported', 'drive', 'authentication', 'done', 'access', 'preprocessing', 'clean', 'step', 'performed', 'address', 'spelling', 'error', 'repetition', 'signs', 'emoji', 'feature', 'engineering', 'constructed', 'support', 'multi', 'sentence', 'single', 'trainingfine', 'tuning', 'train', 'evaluate', 'pretrained', 'fine', 'considering', 'e', 'output', 'predictions', 'modelling', 'strategies', 'evaluated', 'given', 'dimensionality', 'reduction', 'via', 'svd', 'tree', 'random', 'forest', 'general', 'one', 'multiple', 'layers', 'followed', 'fully', 'connected', 'transformer', 'leveraging', 'hugging', 'face', 'roberta', 'xlm', 'finetune', 'observations', 'compared', 'per', 'expectation', 'tfidfsvdrandom', 'able', 'beat', 'score', 'base', 'par', 'ranked', 'intermediate', 'leader', 'board', 'well', 'highest', 'accuracy', 'precision', 'f', 'values', 'achieved', 'recall', 'pending', 'complete', 'final', 'submission', 'planning', 'includes', 'documentation', 'prepared', 'faced', 'noises', 'input', 'appears', 'lot', 'wordssignsemoji', 'appear', 'occur', 'times', 'addition', 'many', 'wordssigns', 'sets', 'included', 'set', 'create', 'extracting', 'useful', 'inputs', 'generalizing', 'process', 'way', 'contextresponse', 'engineer', 'effective', 'currently', 'inputting', 'two', 'separate', 'concatenating', 'andor', 'reversing', 'orders', 'although', 'leveraged', 'generate', 'mechanismboth', 'position', 'might', 'pure', 'sentences', 'example', 'could', 'sentiment', 'hierarchical', 'characterlevel', 'hyperparameter', 'found', 'especially', 'parameter', 'space', 'large', 'trainer', 'utility', 'helped', 'automate', 'search', 'still', 'getting', 'may', 'take', 'time', 'unable', 'tune', 'roberta_large', 'bert_large', 'due', 'gpu', 'issues', 'criteria', 'selecting', 'generates', 'validation', 'separated', 'good', 'generalize', 'seen', 'instead', 'datapoint', 'judge', 'steps', 'better', 'picture', 'distribution', 'batches', 'analyze', 'consistency', 'precisionrecallf', 'perspective', 'analyzing', 'correlation', 'ground', 'truth', 'notebook', 'version', 'code', 'available', 'shared', 'sequenceclassification', 'trained', 'finetuned', 'identifying', 'tweet', 'sarcasm', 'not_sarcasm', 'achive', 'higher', 'detailed', 'execute', 'run', 'end', 'since', 'methodology', 'would', 'recommended', 'created', 'checkpoint', 'download', 'path', 'user', 'load', 'api', 'automodelforsequenceclassification', 'see', 'httpshuggingfacecotransformersmodel_docautohtml', 'details', 'case', 'please', 'refer', 'roberta_model_test', 'fpr', 'reproducing', 'answertxt', 'tutorial', 'reproduce_answers_with_checkpoint', 'slide', 'stepbystep', 'guidance', 'presentation', 'testing', 'slides', 'video', 'rerun', 'contribution', 'collaborated', 'reseach', 'improvise', 'touch', 'point', 'scheduled', 'weekly', 'basis', 'resources', 'discuss', 'walkthrough', 'codes', 'contributed', 'effort', 'emailwenxifillinoisedu', 'emailajillinoisedu', 'generation', 'first', 'following', 'installation', 'hyper', 'library', 'required', 'authorize', 'account', 'copy', 'authorization', 'generated', 'pass', 'box', 'provided', 'mount', 'reference', 'py', 'googlecolab', 'drivemountcontentdrive', 'force_remounttrue', 'jsonl', 'files', 'next', 'datasets', 'pandas', 'dataframe', 'update', 'correct', 'dataset', 'copied', 'datapath', 'rcontentdrivemy', 'drivemcsdscstextminingprojectclassificationcompetitiondata', 'train_pddf', 'pdread_jsondatapathtrainjsonl', 'linestrue', 'test_pddf', 'pdread_jsondatapathtestjsonl', 'suggests', 'mcsdscstextminingprojectclassificationcompetitiondata', 'location', 'section', 'components', 'new', 'last', 'response', 'extract', 'context', 'separately', 'treated', 'reversed', 'reverse', 'feeding', 'tweets', 'incase', 'big', 'shall', 'structuring', 'define', 'want', 'structure', 'basically', 'togeather', 'transform', 'translate', 'preprocessed', 'dataframes', 'make', 'translated', 'construct', 'configurtion', 'configure', 'strategy', 'valid', 'splits', 'metrics', 'batch', 'sizes', 'etc', 'model_checkpoint', 'observed', 'maximum', 'specify', 'sequences', 'described', 'response_context_rev_sep', 'format', 'structures', 'classified', 'previous', 'order', 'occurance', 'metric_name', 'metric', 'optimized', 'configured', 'num_labels', 'number', 'classes', 'batch_size', 'otherwise', 'train_test_split', 'divide', 'test_valid_split', 'epoch', 'epochs', 'weight_decay', 'determines', 'much', 'updating', 'influences', 'value', 'weights', 'learning_rate', 'weight', 'rule', 'causes', 'exponentially', 'decay', 'zero', 'config', 'tokenization', 'translates', 'tokens', 'tokenizer', 'tokenize', 'including', 'converting', 'corresponding', 'ids', 'vocabulary', 'put', 'expects', 'requires', 'selected', 'arguments', 'compute', 'supports', 'optuna', 'ray', 'libraries', 'installed', 'trainings', 'defined', 'function', 'reinitialized', 'passed', 'hyperparameter_search', 'method', 'returns', 'bestrun', 'objects', 'contains', 'objective', 'maximized', 'hyperparameters', 'selection', 'reproduce', 'setp', 'trainingargument', 'system', 'agenda', 'goal', 'classifier', 'identify', 'twit', 'labels', 'implemented', 'achieve', 'research', 'bestinclass', 'textbased', 'expand', 'knowledge', 'overview', 'understand', 'application', 'outcome', 'httpsgithubcomwenfancourseprojectblobmainresearch_summaryattentionbasedapproachtotextclassificationpdf', 'httpsgithubcomwenfancourseprojectblobmainresearch_summaryapplicationofattentiontoclassificationpdf', 'initial', 'experiments', 'conducted', 'tfidfsvm', 'bidirectional', 'embedding', 'optimize', 'technique', 'researched', 'result', 'finalized', 'tuned', 'focus', 'mechanism', 'breakthrough', 'principle', 'revolutionized', 'documents', 'structured', 'combined', 'modeled', 'modelled', 'encoder', 'representations', 'designed', 'pretrain', 'unlabeled', 'jointly', 'conditioning', 'left', 'right', 'certain', 'limitations', 'limited', 'particular', 'length', 'long', 'split', 'segments', 'fixed', 'size', 'overlap', 'robustly', 'enhanced', 'dynamic', 'masking', 'fullsentences', 'without', 'nsploss', 'minibatches', 'larger', 'bytelevel', 'bpe', 'overcomes', 'mentioned', 'tokentype', 'layer', 'selfattention', 'query', 'selfoutput', 'dense', 'norm', 'dropout', 'denselinear', 'denseliner', 'concatenated', 'turns', 'gave', 'starting', 'dialog', 'label', 'nonsarcasm', 'configuration', 'choose', 'robertabase', 'evaluation', 'batchsize', 'traintest', 'ratio', 'autotokenizer', 'finetuning', 'trainingarguments', 'wrapped', 'object', 'maximize', 'outputs', 'file', 'sequenceclassifieripynb', 'script', 'httpscolabresearchgooglecomdrivenhscckrbzprlkgqfwq_cxhvsr_ibuspsharing', 'httpsdrivegooglecomfiledaakqpgqnejhypzrwetr_uaidnviewuspsharing', 'open', 'link', 'httpscolabresearchgooglecomdrivesgddjmutjsjoysaaentcnakxkuspsharing', 'uploaded', 'github', 'repo', 'httpsgithubcomwenfancourseproject', 'items', 'content', 'testjsonl', 'httpsgithubcomwenfancourseprojecttreemaintest_source_data', 'check_pointpth', 'stored', 'httpsdrivegooglecomfiledziieuedgqtayypweqyaghdstviewuspsharing', 'collab', 'pm', 'cst', 'leaderboard', 'appendix', 'references', 'httpshuggingfacecorobertabase', 'pretraining', 'linhan', 'liu', 'et', 'al', 'httpsarxivorgabs', 'thank', 'question', 'feel', 'free', 'contact', 'wenfangmailcomwenxifillinoisedu']
https://github.com/Xinpeij/CourseProject	cs410 project proposal team members: * xinpei jiang, xinpeij2 (individual team) topic: * text classification competition l i plan to learn and use state-of-the-art neural network classifiers in the competition. l such state-of-the-art methods might include deep neural networks like cnn, rnn, lstm, or the nlp transformer models like google's bert, l i also plan to learn and use deep learning frameworks like tensorflow in which i might apply libraries like keras. l i plan to use python for this project. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['cs', 'project', 'proposal', 'team', 'members', 'xinpei', 'jiang', 'xinpeij', 'individual', 'topic', 'text', 'classification', 'competition', 'l', 'plan', 'learn', 'use', 'stateoftheart', 'neural', 'network', 'classifiers', 'methods', 'might', 'include', 'deep', 'networks', 'like', 'cnn', 'rnn', 'lstm', 'nlp', 'transformer', 'models', 'googles', 'bert', 'also', 'learning', 'frameworks', 'tensorflow', 'apply', 'libraries', 'keras', 'python', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/Xinyihe123/LARA	1) progress made thus far: our group is working on reproducing a paper of latent aspect rating analysis. the progress we made thus far includes the followings. all of our group members watched the lecture videos and read through the paper in order to understand the concepts of lara and its fundamental difference with lrr. we have found sample java code online implementing lrr and will start from here, write our own python code implementing lara. we have collected data sets and finished the preprocessing: remove the reviews with missing aspect rating or document length less than 50 words, convert to lower cases, removing punctuations and stop words. 2) remain task: we still need to read paper and understand the equations, and to finish our implement of the aspect modeling module. the model also needs validation, and we need to use it to produce results similar to the paper. 3) any challenges/issues being faced the equations provided in the paper are complex, it takes lots of time to try to understand them. besides, we also need to read the paper described lrr model to implement lara. since the functions are complex, this task requires heavily coding and debugging. course project proposal topic: reproduce a paper 1. team member: a. xinyi he, netid: xinyihe4; dingsen shi, netid: dingsen2; qunyu shen, netid: qunyus2; b. captain: xinyi he 2. the paper we choose is : hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 3. we plan to use java, since the model we need to reproduce according to the paper is based on lrr, whose source codes language is java. 4. we find the datasets used in the paper from http://times.cs.uiuc.edu/~wang296/data/ cs410 courseproject -- reproduce a paper documentation: team lara datasets from http://times.cs.uiuc.edu/~wang296/data/ references: hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 hongning wang, yue lu and chengxiang zhai. latent aspect rating analysis on review text data: a rating regression approach. the 16th acm sigkdd conference on knowledge discovery and data mining (kdd'2010), p783-792, 2010. the codes in lrr are downloaded from internet. these are references. source: hongning wang, yue lu and chengxiang zhai. latent aspect rating analysis on review text data: a rating regression approach. the 16th acm sigkdd conference on knowledge discovery and data mining (kdd'2010), p783-792, 2010. presentation: https://mediaspace.illinois.edu/media/t/1_fo2gtfej files: clean.py: data preprocess: first we remove the reviews with any missing aspect rating or document length less than 50 words (to keep the content coverage of all possible aspects). then we convert all the words into lower cases and remove punctuations and stop words. in vocab.txt we write vocabulary appearance based on reviews. if a word appears in several times in the same review, it would only be counted as once. we then filtered out words that have less than ten occurences. load.py: build matrix for reviews and generate results. load data for testing. lara.py: the lara model, mainly the aspect modeling part, using em algorithm.in this program, we implemented function such as update_mu, update_beta, e_step, m_step etc. gererated the alpha and s, which are the review-level k dimensional( 7 for our data) aspect weight vector and rating vector. the overall rating for the review can be drawn from the gaussian distribution with mean alpah.t dot product s, and variance delta. data: the test data we use, download from http://times.cs.uiuc.edu/~wang296/data/: tripadvisor data set: json results: high rating words collections and the aspect rating weight for each reviews represented as matrix. lrr : downloaded from internet. source: hongning wang, yue lu and chengxiang zhai. latent aspect rating analysis on review text data: a rating regression approach. the 16th acm sigkdd conference on knowledge discovery and data mining (kdd'2010), p783-792, 2010. the lrr model implemented by hongning wang using java we used some codes in lrr, since the lara we built is a generative model of lrr. we used some parameter initilizing codes in lrr. required packages in python3: numpy scipy nltk project members: xinyi he weijiang li dingsen shi qunyu shen ziyuan wei we decided to work with another team to build this model since the challenge we were facing when trying to understand the methods and alogrithm are extremely hard. implementation of model: the inputs of this model for each review d are: (epsilon, gamma, beta, mu, sigma, delta), with hidden parameters: sigma_inverse, alpha, sigma_square, eta, phi. epsilon, gamma, beta, mu, sigma, delta, phi, alpha, eta and the rating vector r are used in calculate log-likelihood. the outputs are alpha and s, which are the review-level k dimensional( 7 for our data) aspect weight vector and rating vector, used for gererate the final overall ratings of review d. the detail of this model can be found in the paper. this model involves more than ten parameters, some of them are generated by mutivariate gaussian distribution, variational distribution, dirichlet distribution, and multinomial distribution, and they are updated using gradient based method, which are hard to implement and transfer the complex math equations into codes. we spend most of our time on reading and understanding the paper and the math methods in the paper. thus although we spent more than 20*5 hours on this project, we can only produce a simple and crude model and test one dataset in the paper. team contribution: since each steps and parameters in the em algorithm are closely related to each other, we usually coded and debuged together through zoom, all of our teammates contributed their 100% effort on this project.	['progress', 'made', 'thus', 'far', 'group', 'working', 'reproducing', 'paper', 'latent', 'aspect', 'rating', 'analysis', 'includes', 'followings', 'members', 'watched', 'lecture', 'videos', 'read', 'order', 'understand', 'concepts', 'lara', 'fundamental', 'difference', 'lrr', 'found', 'sample', 'java', 'code', 'online', 'implementing', 'start', 'write', 'python', 'collected', 'data', 'sets', 'finished', 'preprocessing', 'remove', 'reviews', 'missing', 'document', 'length', 'less', 'words', 'convert', 'lower', 'cases', 'removing', 'punctuations', 'stop', 'remain', 'task', 'still', 'need', 'equations', 'finish', 'implement', 'modeling', 'module', 'model', 'also', 'needs', 'validation', 'use', 'produce', 'results', 'similar', 'challengesissues', 'faced', 'provided', 'complex', 'takes', 'lots', 'time', 'try', 'besides', 'described', 'since', 'functions', 'requires', 'heavily', 'coding', 'debugging', 'course', 'project', 'proposal', 'topic', 'reproduce', 'team', 'member', 'xinyi', 'netid', 'xinyihe', 'dingsen', 'shi', 'qunyu', 'shen', 'qunyus', 'b', 'captain', 'choose', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'without', 'keyword', 'supervision', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'plan', 'according', 'based', 'whose', 'source', 'codes', 'language', 'find', 'datasets', 'used', 'httptimescsuiuceduwangdata', 'cs', 'courseproject', 'documentation', 'references', 'review', 'text', 'regression', 'approach', 'th', 'sigkdd', 'conference', 'knowledge', 'discovery', 'mining', 'p', 'downloaded', 'internet', 'presentation', 'httpsmediaspaceillinoisedumediat_fogtfej', 'files', 'cleanpy', 'preprocess', 'first', 'keep', 'content', 'coverage', 'possible', 'aspects', 'vocabtxt', 'vocabulary', 'appearance', 'word', 'appears', 'several', 'times', 'would', 'counted', 'filtered', 'ten', 'occurences', 'loadpy', 'build', 'matrix', 'generate', 'load', 'testing', 'larapy', 'mainly', 'part', 'using', 'em', 'algorithmin', 'program', 'implemented', 'function', 'update_mu', 'update_beta', 'e_step', 'm_step', 'etc', 'gererated', 'alpha', 'reviewlevel', 'k', 'dimensional', 'weight', 'vector', 'overall', 'drawn', 'gaussian', 'distribution', 'mean', 'alpaht', 'dot', 'product', 'variance', 'delta', 'test', 'download', 'tripadvisor', 'set', 'json', 'high', 'collections', 'represented', 'built', 'generative', 'parameter', 'initilizing', 'required', 'packages', 'numpy', 'scipy', 'nltk', 'weijiang', 'li', 'ziyuan', 'wei', 'decided', 'work', 'another', 'challenge', 'facing', 'trying', 'methods', 'alogrithm', 'extremely', 'hard', 'implementation', 'inputs', 'epsilon', 'gamma', 'beta', 'mu', 'sigma', 'hidden', 'parameters', 'sigma_inverse', 'sigma_square', 'eta', 'phi', 'r', 'calculate', 'loglikelihood', 'outputs', 'gererate', 'final', 'ratings', 'detail', 'involves', 'generated', 'mutivariate', 'variational', 'dirichlet', 'multinomial', 'updated', 'gradient', 'method', 'transfer', 'math', 'spend', 'reading', 'understanding', 'although', 'spent', 'hours', 'simple', 'crude', 'one', 'dataset', 'contribution', 'steps', 'algorithm', 'closely', 'related', 'usually', 'coded', 'debuged', 'together', 'zoom', 'teammates', 'contributed', 'effort']
https://github.com/ZhengyuLi97/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/acscharf/CourseProject	"alexander scharf cs410 (fall 2020) course project background: after learners complete an online business course, they are prompted to enter a ""reflection"" on how they can apply the knowledge from the course to their job or daily life. these reflections are shared with other learners so they can deepen their understanding, learning how others applied their learning. this project aims to: 1.) to analyze ""useful"" and ""not useful"" reflections, finding syntactic elements that make up each 2.) gather user input for a user reflection and predict whether that reflection is ""useful"" or ""not useful"" via a web application the project uses a real data set from an online learning service with reflections in both english and japanese language. 1.) progress made thus far - the data set has been extracted for both english and japanese text - the labeling of the data set (""useful"" or ""not useful"" is being done manually and took longer than expected just for english, but is nearly complete - decided to use spacy as framework and researched its usage as part of tech review - ran preliminary analysis on data set (number of words, parts of speech, common words) for both ""useful"" and ""not useful"" reflections - coding for training model complete by referencing spacy sample code - preliminary web app created and hosted on personal server (take a look at http://alexscharf.com/) 2.) remaining tasks - complete labeling the english data set - begin labeling the japanese data set - make adjustments to the code as needed for the japanese data set - make the web app slightly more user friendly - conduct user tests - update documentation and clean up code to remove debugging 3.) any challenges/issues being faced - i thought i could outsource labeling the training data with amazon mechanical turk, but labeling it required too much domain knowledge - taking more time than i thought - unrelated to the direct goal of this project, but fiddling with the public facing web server took longer than expected since i don't have experience in this area. ended up switching from apache to nginx - labeling the japanese data set will take more time than expected. i plan labeling a train data size of 1000 reflections for english, i may do half of that for japanese - still a bit unknown how much rewriting the original application will be necessary for japanese or any other strange bugs like character encoding, especially with web app alex scharf project proposal, cs410 free topic - english and japanese course reflection analysis 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. individual project, alex scharf (acscharf2) 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? i am the product owner of globis unlimited (globis manabihodai) in japanese, an online course platform focused on business content with currently over 200,000 learners. after learners complete a course on the platform, they are prompted to enter an optional reflection about how they can apply the learning from the course to their job or life: some of the responses are quite good and well-thought out (""i am an engineer, and i can use logic trees to help me create test cases"") and others are not as insightful (""logic trees are good""). after learners post their reflections, they can view the reflections of other learners and ""like"" ones they found useful. as learners see the reflections of others, it is important that the reflections be of high quality, and hence useful to a wider audience. because the service is in english and japanese, data exists for both japanese and english reflections. i would like to do the following: a.) identify language and parts of speech that are common in reflections for both english and japanese b.) create an application that predicts whether an input reflection is ""high quality"" or ""low quality"" for english only c.) host that application on a public web server this task is important and interesting for the following reasons: - real-world challenge based upon actual data set - creates a proof of concept for a feature that would give learners feedback about the quality of their course reflection, leading to great personalization in online learning - creating a user-facing application that potential users could interact with - working across two language (japanese and english) that are very different my current plan is as follows: 1.) extract data set for both english and japanese 2.) choose the most appropriate way to score the data set (manual approach or use ""likes"") 3.) find tool that can analyze and make predictions for both english and japanese 4.) run analysis of common words in reflections to satisfy point a 5.) train predictive model on current data set 6.) create application that allows user input and compares against predictive model 7.) host application on a publicly accessible web server 8.) run user test with 4 people to see if their experience is in line with expectations i expect that the application should be able to identify ""good"" and ""bad"" reflections to a certain degree. i plan on evaluating my work if the test users enter a ""good"" reflection and a ""bad"" reflection and the application is in line with their expectations. here is what i imagine the application flow to look like: 1.) user is prompted for reflection input and submits 2.) system checks user input against trained data and decides whether it is ""high quality"" or ""low quality"" 3.) feedback is sent back to the user 3. which programming language do you plan to use? i plan on using python 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. - research tool that is appropriate for both japanese and english (2 hours) - extract data set and prepare in proper format (3 hours) - score the data set in appropriate format (3 hours) - create application to run semantic analysis of reflections (5 hours) - create application to train predictive model (5 hours) - create front-end application that allows users to input data against predictive model (5 hours) - host front-end application on publicly accessible web server (2 hours) - prepare for user test (1 hour) - 4 user tests x 30 minutes (2 hours) - create full documentation (2 hours) - summarize findings (2 hours) total: 32 hours english and japanese course reflection analysis and prediction about after learners complete a video-based online business course, they are prompted to enter a ""reflection"" on how they can apply the knowledge from the course to their job or daily life. these reflections are shared with other learners so they can deepen their understanding, learning how others applied their learning. this project aims to: 1.) to analyze ""useful"" and ""not useful"" reflections, finding syntactic elements that make up each, and create a trained model (train.py) 2.) gather user input for a user reflection and predict whether that reflection is ""useful"" or ""not useful"" based upon trained model (webapp.py) both 1.) and 2.) are done for both english and japanese language. project presentation https://www.youtube.com/watch?v=jn-gm5pj-hs try it a live version of the software is hosted below, complete with sample videos. try a ""useful"" and ""not useful"" reflection and see if it matches your expectations. the sample reflections will give you an idea of what might be considered ""useful"" and ""not useful."" english http://alexscharf.com/ japanese http://alexscharf.com/ja train.py (training application) overview reads labeled csv for reflection data, analyzes reflections, trains a model, and saves that model to disk. analysis looks at parts of speech (by percentage), common words, and average word counts for both ""useful"" and ""not useful"" reflections. implementation the application has three key functions, explained below: read_csv(filename, rows) opens a csv with the name of ""filename"" and reads the first number rows specified by ""rows."" the csv should have two columns, the first with a label of '1' if the reflection is 'useful' or '0' if it is ""not useful."" strips whitespace and returns a pandas dataframe. analyze_reflections(reflections, nlp, language) analyze reflections when provided with a pandas dataframe, spacy nlp object, a string to display for output. iterates over each unigram for both useful and not useful reflections, counting parts of speech, common words, and average length while ignoring whitespace. outputs the result using the print function. example output: https://github.com/acscharf/courseproject/blob/main/example_output.txt train_reflections(reflections, nlp, n_iter, n_texts): trains model based upon label reflections data with a pandas dataframe, spacy nlp object, and the number of iterations and items in the reflection data. holds 20% of the labeled data for evaluation, training off of the remaining 80%. prints loss, recall, precision, and f-score for each training iteration. currently build using the ""simple_cnn"" architecture provided by spacy. usage the application requires the spacy and pandas libaries as well as the ""en_core_web_sm"" and ""ja_core_news_sm"" spacy models. additionally, the software needs the english.csv and japanese.csv labeled reflection datasets in a ""data"" subfolder. these data sets were labeled ""useful"" or ""not useful"" by me and reflect actual user output. the data set for this project can be found in the below repository: english https://github.com/acscharf/courseproject/blob/main/data/english.csv japanese https://github.com/acscharf/courseproject/blob/main/data/japanese.csv after completion, the program saves a model to disk in the ""english_model"" and ""japanese_model"" subfolders. assuming the provided csv files are included, the program can be run as-is with no additional parameters. webapp.py (user-facing web application) overview flask-based web application that loads training model and gathers uset input to predict usefulness of reflection. english version can be accessed at the main directory (/), while japanese version can be accessed via a subdirectory (ja). implementation the program is implemented with flask, mixing python and html. there are two pages, and submission page and a results page, both in english and japanese. the submission page is pure html and javascript. the results page takes the submission from the previous page a parameters, loads a spacy model created by the train.py application, and runs the user submission against the trained text classifier to guess whether the submission is ""useful"" or ""not useful."" this output is displayed to the user, along with some generic hints for a useful reflection inferreed from analyzing reflections through the training application. usage the application requires the spacy and flask libraries as well as a training modeled generated by train.py. the app can be launched with the following commands: export flask_app=webapp.py flask run this will start a development server on http://127.0.0.1:5000/. a working version can be found at http://alexscharf.com/ other files proposal.pdf project proposal progress report.pdf mid-term progress report example_output.txt example output of train.py analysis waitress_server.py configuration file for production web server self-evaluation have you completed what you have planned? i was able to complete complete all the planned outcomes as mentioned in the original project proposal. in fact, i went beyond the project proposal by including generating a training model and a web front-end for japanese as well as english. i initially did not include this in the original proposal because i was not sure of my ability to correctly label the japanese data, but i found a subset of the data (for an accounting course) that allowed me to do so, and hence exceeded the original project proposal. have you got the expected outcome? the outcome for the reflection predicter is as expected. as originally proposed, i conducted user tests to see if the program functions to their expectations. their feedback was as follows: - the application is very good at filtering out obviously bad reflections (""the course was interesting""). this is very useful, as these low-quality responses have the largest user impact - the application can still be ""tricked"" by writing grammatically correct and keyword packed sentences that ultimately have little meaning (""i love studying business and applying business for my presentations. it helps me succeed at work with my boss and also with my coworkers."" gets a perfect score). this is not intended to be a grading mechanism, however, so tackling these it outside the scope of the project. the outcome for the reflection analyzer was also insightful, but not as much as expected. as expected, better reflections tend to have more words (around 22 on average, compared with 9 for not useful ones). however, the parts of speech and common words were quite similar for ""useful"" and ""not useful"" reflections, suggesting that to do a heuristic analysis of reflections, much deeper insight is needed and training a model is a much more effective approach, justifying the original project."	['alexander', 'scharf', 'cs', 'fall', 'course', 'project', 'background', 'learners', 'complete', 'online', 'business', 'prompted', 'enter', 'reflection', 'apply', 'knowledge', 'job', 'daily', 'life', 'reflections', 'shared', 'deepen', 'understanding', 'learning', 'others', 'applied', 'aims', 'analyze', 'useful', 'finding', 'syntactic', 'elements', 'make', 'gather', 'user', 'input', 'predict', 'whether', 'via', 'web', 'application', 'uses', 'real', 'data', 'set', 'service', 'english', 'japanese', 'language', 'progress', 'made', 'thus', 'far', 'extracted', 'text', 'labeling', 'done', 'manually', 'took', 'longer', 'expected', 'nearly', 'decided', 'use', 'spacy', 'framework', 'researched', 'usage', 'part', 'tech', 'review', 'ran', 'preliminary', 'analysis', 'number', 'words', 'parts', 'speech', 'common', 'coding', 'training', 'model', 'referencing', 'sample', 'code', 'app', 'created', 'hosted', 'personal', 'server', 'take', 'look', 'httpalexscharfcom', 'remaining', 'tasks', 'begin', 'adjustments', 'needed', 'slightly', 'friendly', 'conduct', 'tests', 'update', 'documentation', 'clean', 'remove', 'debugging', 'challengesissues', 'faced', 'thought', 'could', 'outsource', 'amazon', 'mechanical', 'turk', 'required', 'much', 'domain', 'taking', 'time', 'unrelated', 'direct', 'goal', 'fiddling', 'public', 'facing', 'since', 'dont', 'experience', 'area', 'ended', 'switching', 'apache', 'nginx', 'plan', 'train', 'size', 'may', 'half', 'still', 'bit', 'unknown', 'rewriting', 'original', 'necessary', 'strange', 'bugs', 'like', 'character', 'encoding', 'especially', 'alex', 'proposal', 'free', 'topic', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'individual', 'acscharf', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'outcome', 'going', 'evaluate', 'work', 'product', 'owner', 'globis', 'unlimited', 'manabihodai', 'platform', 'focused', 'content', 'currently', 'optional', 'responses', 'quite', 'good', 'wellthought', 'engineer', 'logic', 'trees', 'help', 'create', 'test', 'cases', 'insightful', 'post', 'view', 'ones', 'found', 'see', 'high', 'quality', 'hence', 'wider', 'audience', 'exists', 'would', 'following', 'identify', 'b', 'predicts', 'low', 'c', 'host', 'reasons', 'realworld', 'challenge', 'based', 'upon', 'actual', 'creates', 'proof', 'concept', 'feature', 'feedback', 'leading', 'great', 'personalization', 'creating', 'userfacing', 'potential', 'users', 'interact', 'working', 'across', 'two', 'different', 'current', 'follows', 'extract', 'choose', 'appropriate', 'way', 'score', 'manual', 'likes', 'find', 'tool', 'predictions', 'run', 'satisfy', 'point', 'predictive', 'allows', 'compares', 'publicly', 'accessible', 'people', 'line', 'expectations', 'expect', 'able', 'bad', 'certain', 'degree', 'evaluating', 'imagine', 'flow', 'submits', 'system', 'checks', 'trained', 'decides', 'sent', 'back', 'programming', 'using', 'python', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'students', 'list', 'main', 'completed', 'estimated', 'cost', 'research', 'prepare', 'proper', 'format', 'semantic', 'frontend', 'hour', 'x', 'minutes', 'full', 'summarize', 'findings', 'prediction', 'videobased', 'trainpy', 'webapppy', 'presentation', 'httpswwwyoutubecomwatchvjngmpjhs', 'try', 'live', 'version', 'software', 'videos', 'matches', 'idea', 'might', 'considered', 'httpalexscharfcomja', 'overview', 'reads', 'labeled', 'csv', 'analyzes', 'trains', 'saves', 'disk', 'looks', 'percentage', 'average', 'word', 'counts', 'implementation', 'three', 'key', 'functions', 'explained', 'read_csvfilename', 'rows', 'opens', 'name', 'filename', 'first', 'specified', 'columns', 'label', 'strips', 'whitespace', 'returns', 'pandas', 'dataframe', 'analyze_reflectionsreflections', 'nlp', 'provided', 'object', 'string', 'display', 'output', 'iterates', 'unigram', 'counting', 'length', 'ignoring', 'outputs', 'result', 'print', 'function', 'example', 'httpsgithubcomacscharfcourseprojectblobmainexample_outputtxt', 'train_reflectionsreflections', 'n_iter', 'n_texts', 'iterations', 'items', 'holds', 'evaluation', 'prints', 'loss', 'recall', 'precision', 'fscore', 'iteration', 'build', 'simple_cnn', 'architecture', 'requires', 'libaries', 'well', 'en_core_web_sm', 'ja_core_news_sm', 'models', 'additionally', 'needs', 'englishcsv', 'japanesecsv', 'subfolder', 'sets', 'reflect', 'repository', 'httpsgithubcomacscharfcourseprojectblobmaindataenglishcsv', 'httpsgithubcomacscharfcourseprojectblobmaindatajapanesecsv', 'completion', 'program', 'english_model', 'japanese_model', 'subfolders', 'assuming', 'files', 'included', 'asis', 'additional', 'parameters', 'flaskbased', 'loads', 'gathers', 'uset', 'usefulness', 'accessed', 'directory', 'subdirectory', 'ja', 'implemented', 'flask', 'mixing', 'html', 'pages', 'submission', 'page', 'results', 'pure', 'javascript', 'takes', 'previous', 'runs', 'classifier', 'guess', 'displayed', 'along', 'generic', 'hints', 'inferreed', 'analyzing', 'libraries', 'modeled', 'generated', 'launched', 'commands', 'export', 'flask_appwebapppy', 'start', 'development', 'http', 'proposalpdf', 'reportpdf', 'midterm', 'report', 'example_outputtxt', 'waitress_serverpy', 'configuration', 'file', 'production', 'selfevaluation', 'outcomes', 'mentioned', 'fact', 'went', 'beyond', 'including', 'generating', 'initially', 'include', 'sure', 'ability', 'correctly', 'subset', 'accounting', 'allowed', 'exceeded', 'got', 'predicter', 'originally', 'proposed', 'conducted', 'filtering', 'obviously', 'lowquality', 'largest', 'impact', 'tricked', 'writing', 'grammatically', 'correct', 'keyword', 'packed', 'sentences', 'ultimately', 'little', 'meaning', 'love', 'studying', 'applying', 'presentations', 'helps', 'succeed', 'boss', 'also', 'coworkers', 'gets', 'perfect', 'intended', 'grading', 'mechanism', 'however', 'tackling', 'outside', 'scope', 'analyzer', 'better', 'tend', 'around', 'compared', 'similar', 'suggesting', 'heuristic', 'deeper', 'insight', 'effective', 'justifying']
https://github.com/adeetikaushal/CourseProject	"team: voltron topic: book recommendation system 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. name netids captain adeeti kaushal adeetik2 yes vivek bansal vivekb3 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic: book recommendation system. description: in the course, we discussed about recommendation systems and search. there are two main recommendation system approaches that were discussed further, content-based filtering and collaborative based filtering. in this project, we are focusing on simple content-based book recommendation system. the content will be downloaded from public sites (project gutenberg). tasks involved: the tasks involve loading the content of book into python after downloading it. search for relevant content/words in the loaded data. tokenize the corpus and perform stemming on the tokenized corpus. next step would involve building bag of words model and find stop words, build term frequency-inverted document frequent model and show the results of tf-idf model. compute the distance between texts. look into search criteria and find similar books matching the content using cosine similarity. important and interesting: this topic is important and interesting because big corporations like facebook, amazon, apple, netflix, google (faang) and others big companies use recommendation system to show/target the content based on similarities in content. this is important for business to present or build the resources that users are searching and show them similarities between other books. planned approach: the approach that we plan to take involves collecting the books from project gutenberg which offers free books and that will be used as our dataset. we will find a topic/search term or title that will be used to create the model and then then find similarities in other books. python libraries will be used to perform various tasks like stemming, tokenizing etc. the outcome would involve books with similarities. tools, systems, dataset: python libraries that can be used for nlp, tokenization, stemming, parsing, classification etc. which are important tasks. jupyter notebook will be used to read the dataset and execute the python program. from project gutenberg, free books would be downloaded to build the dataset. expected outcome: being able to retrieve/recommend similar books based on the content. evaluation: results retrieved from the program should give recommendation of books that are matching or similar in some way or form. for example, a crime mystery novel should not return any match with children book. 3. which programming language do you plan to use? we are planning to use python. 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. we are planning to cover the following topics in the project. tasks estimated time (hrs learning python 8* research/build dataset 5 code for tokenization, stemming on corpus 4 build bag of words, find stop words 2 build tf-idf 4 build similarity matrix 2 full end to end integration, tuning 6 testing 5 visual representation of results (matplotlib) 6 other use case - content based similarity 6 report 4 total 52 n=2 20*2 hours = 40 hrs project estimated hours = 52 * since, both need to learn python, so we have added 8 hrs for learning but without that the efforts required for project are above the required hours. cs-410 text information system book recommendation system team: voltron team member email captain adeeti kaushal adeetik2@illinois.edu yes vivek bansal vivekb3@illinois.edu table of contents introduction ............................................................................................................................................................ 3 flow diagram .......................................................................................................................................................... 3 overview of tasks .................................................................................................................................................... 4 about the dataset ................................................................................................................................................... 4 code .......................................................................................................................................................................... 4 setup ....................................................................................................................................................................... 4 step by step code details ......................................................................................................................................... 5 set search criteria: .................................................................................................................................................. 5 load dataset and sort ............................................................................................................................................ 5 load titles and text in objects ................................................................................................................................. 6 load indexes ............................................................................................................................................................. 7 tokenize the corpus ................................................................................................................................................. 7 pickling the tokenized corpus ................................................................................................................................. 8 stemming of tokenized corpus ............................................................................................................................... 9 building a bag-of-words model .............................................................................................................................. 9 visualize the most common words ....................................................................................................................... 10 build a tf-idf model ............................................................................................................................................... 11 results of the tf-idf model .................................................................................................................................... 12 compute distance between texts ........................................................................................................................... 13 similar books ......................................................................................................................................................... 14 books with similar content .................................................................................................................................. 15 introduction the book recommendation system aims to provide a selection to user based on the user's taste. generally, a system would rely on user's metadata (for ex. author of the book, theme etc.) to determine which book would user enjoy the most. however, when we take the same approach with full text search or full content, it becomes a very heavy dataset. in this project, we will try to demonstrate the same by providing recommendation based on the content. flow diagram above picture shows the entire flow of the project. in dataset layer, we first downloaded the books (public) in text form from glutenberg.org. for our sample, we took 25 books and processed. in the data processing layer, we loaded the books as text and titles and performed clean up. we went through removal of stop words, grouped them together (created stem). using the stem words and dictionary, bagofwords were created for each book. finally, in data processing layer, we built the inverted index model. in the end, we did the analysis using similarity calculations by creating the matrix and using the matlib, created the visualization and horizontal dendrogram. overview of tasks following tasks were performed to complete this project. research/build dataset code for tokenization, stemming on corpus build bag of words, find stop words build tf-idf build similarity matrix full end to end integration, tuning testing visual representation of results (matplotlib) other use case - content based similarity report in this report, we will walk through the code step by step and also showcase the output of each step. about the dataset the dataset is collection of books that is manually downloaded from project gutenberg. for this project, around 20 books were downloaded and used to find the content by searching the text using similarity matrix. code the code is written in jupyter notebook and python3. following are the 2 components: recommender.ipynb - the ipynb is ipythonnotebook file (jupyter file) that contains the code. in the step 1, we will start with setting up the search criteria. the criteria for searching book of interest is set here. library - downloaded data from project gutenberg setup install the following tools/lang: * jupyter * python 3 install following python/machine learning libraries * glob: this is used fir filename and pattern matching. * re: this is used for regular expression matching. * nltk: natural language toolkit * os: it consists of functions interacting with operating system * genism: it is the natural language processing library used for unsupervised topic modeling * pandas: most important library used by data scientist for data analysis. * matplotlib: used for visualization * scipy: used for numerical integration and optimization. step by step code details set search criteria: bookinterstedin = relativityandgravitation load dataset and sort * download the dataset and store it in a folder ""library"". * read the .txt files from the library folder and load it into the memory using glob library. * sort the files using sort(). following output was obtained after reading the files from the ""library"" folder ['library/relativity.txt', 'library/experimentalmechanics.txt', 'library/thepoetryofscience.txt', 'library/theeinsteintheoryofrelativityaconcisestatement.txt', 'library/thegravitybusiness.txt', 'library/fromnewtontoeinstein.txt', 'library/the boyplaybookofscience.txt', 'library/sidelightsonrelativity.txt', 'library/relativitythespecialandgeneraltheory.txt', 'library/theeinsteinseesaw.txt', 'library/aetherandgravitation.txt', 'library/the earthbeginning.txt', 'library/specialtheoryrelativity.txt', # the folder created below folder = ""library/"" # list all the .txt files files = glob.glob(folder + ""*.txt"") 'library/thetheoriesof darwinandtheirrelationtophilosophyrelig ionandmorality.txt', 'library/relativityandgravitation.txt', 'library/thoughtsonart.txt', 'library/einsteintheoriesofrelativityandgravitation.txt', 'library/thejuniorclassics.txt'] load titles and text in objects * next step requires converting the data as information instead of string. for that purpose, open the files and encode them with utf-8 signature (utg-8-sig). when reading the file using utf-8-sig, it will treat bom as file info. * further clean up the file and remove the non-alphanumeric characters. * after reading the files, store the text and tiles of the books in two lists and save them as titles and txts. * to remove the folder name and .txt extension from the file name, use the os.path.basename() and replace() functions. #define objects to hold text and titles content_txts = [] book_titles = [] #loop through each, read, encode, remove txt extension for n in files: f = open(n, encoding='utf-8-sig') val = re.sub('[\w_]+', ' ', f.read()) content_txts.append(val) book_titles.append(os.path.basename(n).replace("".txt"", """")) [len(t) for t in content_txts] here is the output of above code: [24297, 519663, 875023, 59083, 56364, 169246, 953601, 69853, 24297, 69011, 941247, 600351, 197572, 669416, 548935, 273437, 548935, 716050] load indexes * in the next step, we need to store the index of the interested title from the ""titles"" list to a variable ""typeofbook"" * to verify, print the content of the ""typeofbook"" variable. # the list contains all the book titles for i in range(len(book_titles)): if(book_titles[i]==bookinterstedin): typeofbook = i print(str(typeofbook)) output: 14 tokenize the corpus now that the information has been collected, we will tokenize the corpus and transform into list of individual words. this is important step as we will now perform following steps in this: * to filter our words for processing, we need to define the stop words * use lower() method to convert the contents in ""content_txts"" * breakdown the lower case text into individual words and python provides a method ""split()"" for the same. * store the split word into another variable ""txts_split"". * remote the list of stop words in ""stoplist"". * store the resulting list into another variable ""texts"" * print first few tokens for the searched books. # define a list of stop words stoplist = set('for w a of the and to in to be which some is at that we i who whom show via may my our might as well project by gutenberg ebook'.split()) # convert the text to lower case * the output containing 20 tokens is below: pickling the tokenized corpus * in this step, we will generate a stem for each token. * further, we used the pickle library of python for serializing. python pickle module is used for serializing and de-serializing a python object structure. pickling is a way to convert a python object (list, dict, etc.) into a character stream. txts_lower_case = [txt.lower() for txt in content_txts] # transform the text into tokens txts_split = [txt.split() for txt in txts_lower_case] # remove tokens which are part of the list of stop words texts = [[word for word in txt if word not in stoplist] for txt in txts_split] # print the first 20 tokens texts[typeofbook][0:20] ['einstein', 'theories', 'relativity', 'gravitation', 'malcolm', 'united', 'states', 'other', 'parts', 'world', 'cost', 'restrictions', 'whatsoever', 'away', 'or', 're', 'under', 'terms', 'license', 'included'] # create an instance of a porterstemmer object porter = porterstemmer() # for each token of each text, we generated its stem texts_stem = [[porter.stem(token) for token in text] for text in texts] # save to pickle file pickle.dump( texts_stem, open( ""library/porterstem.p"", ""wb"" ) ) stemming of tokenized corpus stemming is the process of reducing a word to its word stem that affixes to suffixes and prefixes or to the roots of words known as a lemma. generally, it is also a part of queries and internet search engines. in our use case, the words related to the concept of selection would be gathered under the select stem. as we are analyzing 25 full books, the stemming algorithm can take several minutes to run. we will then load the final results from a pickle file and review the method used to generate it. output: building a bag-of-words model now, we need to build the model using the stemmed tokens, it will be used by algorithms in next part. * we created a dictionary that contains universe of all words in our corpus of books. * then, using the stemmed tokens and the dictionary, we will create bag-of-words models (bow) of each of our texts. * the bow models will represent our books as a list of all unique tokens they contain associated with their respective number of occurrences # load the stemmed tokens list from the pre generated pickle file texts_stem = pickle.load(open(""library/porterstem.p"", ""rb"" ) ) # print the 20 first stemmed tokens from texts_stem[typeofbook][0:20] ['einstein', 'theori', 'rel', 'gravit', 'malcolm', 'unit', 'state', 'other', 'part', 'world', 'cost', 'restrict', 'whatsoev', 'away', 'or', 're', 'under', 'term', 'licens', 'includ'] # create a dictionary from the stemmed tokens output: visualize the most common words for better understanding and interpret the results returned by bow model, there is a need for visualization. this will help understand which stemmed tokens are present in given book and how many occurrences are found. to visualize the content, we need to transform the content into dataframe using the libraries and display 10 most common stems for the book as searched book ""search criteria"". dictionary = corpora.dictionary(texts_stem) # create a bag-of-words model for each book, using the previously generated dictionary bows = [dictionary.doc2bow(text) for text in texts_stem] # print the first five elements using bow model bows[typeofbook][0:5] [(0, 1), (1, 1), (5, 51), (6, 5), (13, 3)] # convert the bow model into a dataframe df_bow_origin = pd.dataframe(bows[typeofbook]) # add the column names to the dataframe df_bow_origin.columns = [""index"", ""occurrences""] # add a column containing the token corresponding to the dictionary index df_bow_origin[""token""] = [dictionary[index] for index in df_bow_origin[""index""]] # sort the dataframe by descending number of occurrences and print the first 10 values df_bow_origin.sort_values(by=""occurrences"", ascending=false).head(10) output: build a tf-idf model next, we need to generate the tf-idf (term frequency-inverse document frequency) model from bow model using the library function gensim's (tfidfmodel()). tf-idf is a statistical measure that evaluates how relevant a word is to a document in a collection of documents. this model defines the importance of each word depending on how frequent it is in this text and how infrequent it is in all the other documents. as a result, a high tf-idf score for a word will indicate that this word is specific to this text. we will compute the score and print the results from model. # generate the tf-idf model model = tfidfmodel(bows) # print the model model[bows[typeofbook]] output: results of the tf-idf model in order to interpret the results of tf-idf model, we will display the 10 most specific words for a book. in our case, we used ""relativity"" book. # convert the tf-idf model into a dataframe df_tfidf = pd.dataframe(model[bows[typeofbook]]) # name the columns of the dataframe id and score df_tfidf.columns=[""id"", ""score""] # add the tokens corresponding to the numerical indices for better readability df_tfidf['token'] = [dictionary[i] for i in list(df_tfidf[""id""])] # sort the dataframe by descending tf-idf score and print the first 10 rows. df_tfidf.sort_values(by=""score"", ascending=false).head(10) output: compute distance between texts stemmed token that are specific to each book are returned by tf-idf model. the topics defined on the book ""relativity"" can be seen now (like, gravitation etc). with this, we have a model associating tokens to how specific they are to each book, we can measure how related to books are between each other. #compute similarity matrix sims = similarities.matrixsimilarity(model[bows]) # transform results to df sim_df = pd.dataframe(list(sims)) # add book_titles of the books as columns and index of df sim_df.columns = book_titles sim_df.index = book_titles # print matrix sim_df output: similar books the output we have contains the matrix containing all the similarity measures between any pair of books from the library. this matrix will be useful to quickly extract the information like distance between two books or more. this is needed to display plots in a notebook %matplotlib inline # select the column corresponding to v = sim_df[bookinterstedin] # sort by ascending scores v_sorted = v.sort_values(ascending=true) # plot this data has a horizontal bar plot v_sorted.plot.barh(x='lab', y='val', rot=0).plot() # modify the axes labels and plot title for better readability plt.xlabel(""cosine distance"") plt.ylabel("""") plt.title(""most similar books to ""+ bookinterstedin) output books with similar content this project/approach is a good fit and of use, if we want to determine similar books that match user's interest. for example, if user picked up the book ""relativity,"" user can read books discussing similar concepts such as ""special theory of relativity"" or ""relativity and gravitation if you are familiar with einstein's work, these suggestions will likely seem natural to you. however, we now want to have a better understanding of the big picture and see how einstein's books are generally related to each other (in terms of topics discussed). to this purpose, we will represent the whole similarity matrix as a dendrogram, which is a standard tool to display such data. this last approach will display all the information about book similarities at once. for example, we can find a book's closest relative but, also, we can visualize which groups of books have similar topics # compute the similarity matrix the wvma (ward variance minimization algorithm) z = hierarchy.linkage(sim_df, 'ward') # display the results in horizontal dendrogram a = hierarchy.dendrogram(z, leaf_font_size=10, labels=sim_df.index, orientation=""right"") output: cs-410 text information system fall 2020 book recommendation system progress report team: voltron team member email captain adeeti kaushal adeetik2@illinois.edu yes vivek bansal vivekb3@illinois.edu progress report 1) which tasks have been completed? * all tasks are complete, and report and presentation is submitted for review. 2) which tasks are pending? * no task pending from the list and if any feedback is received, we will make changes accordingly. 3) are you facing any challenges? * no. tasks status learning python completed research/build dataset completed code for tokenization, stemming on corpus completed build bag of words, find stop words completed build tf-idf completed build similarity matrix completed full end to end integration, tuning completed testing completed visual representation of results (matplotlib) completed other use case - content based similarity completed report completed - submitted for review presentation completed - link checked-in to repo total completed project code: https://github.com/adeetikaushal/courseproject/tree/main/code project report: https://github.com/vivekb3illinois/courseproject/blob/main/cs410_voltron_final_project_report.pdf project progress report: https://github.com/vivekb3illinois/courseproject/blob/main/cs410_voltron_process_report.pdf project video: https://mediaspace.illinois.edu/media/t/1_h258rjku"	['team', 'voltron', 'topic', 'book', 'recommendation', 'system', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'name', 'adeeti', 'kaushal', 'adeetik', 'yes', 'vivek', 'bansal', 'vivekb', 'free', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'course', 'discussed', 'search', 'two', 'main', 'approaches', 'contentbased', 'filtering', 'collaborative', 'based', 'project', 'focusing', 'simple', 'content', 'downloaded', 'public', 'sites', 'gutenberg', 'tasks', 'involve', 'loading', 'python', 'downloading', 'relevant', 'contentwords', 'loaded', 'data', 'tokenize', 'corpus', 'perform', 'stemming', 'tokenized', 'next', 'step', 'would', 'building', 'bag', 'words', 'model', 'find', 'stop', 'build', 'term', 'frequencyinverted', 'document', 'frequent', 'show', 'results', 'tfidf', 'compute', 'distance', 'texts', 'look', 'criteria', 'similar', 'books', 'matching', 'using', 'cosine', 'similarity', 'big', 'corporations', 'like', 'facebook', 'amazon', 'apple', 'netflix', 'google', 'faang', 'others', 'companies', 'use', 'showtarget', 'similarities', 'business', 'present', 'resources', 'users', 'searching', 'plan', 'take', 'involves', 'collecting', 'offers', 'used', 'dataset', 'topicsearch', 'title', 'create', 'libraries', 'various', 'tokenizing', 'etc', 'nlp', 'tokenization', 'parsing', 'classification', 'jupyter', 'notebook', 'read', 'execute', 'program', 'able', 'retrieverecommend', 'evaluation', 'retrieved', 'way', 'form', 'example', 'crime', 'mystery', 'novel', 'return', 'match', 'children', 'programming', 'language', 'planning', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'completed', 'estimated', 'time', 'cost', 'cover', 'following', 'topics', 'hrs', 'learning', 'researchbuild', 'code', 'matrix', 'full', 'end', 'integration', 'tuning', 'testing', 'visual', 'representation', 'matplotlib', 'case', 'report', 'since', 'need', 'learn', 'added', 'without', 'efforts', 'required', 'cs', 'text', 'information', 'member', 'email', 'adeetikillinoisedu', 'vivekbillinoisedu', 'table', 'contents', 'introduction', 'flow', 'diagram', 'overview', 'setup', 'details', 'set', 'load', 'sort', 'titles', 'objects', 'indexes', 'pickling', 'bagofwords', 'visualize', 'common', 'aims', 'provide', 'selection', 'user', 'taste', 'generally', 'rely', 'metadata', 'ex', 'author', 'theme', 'determine', 'enjoy', 'however', 'becomes', 'heavy', 'try', 'demonstrate', 'providing', 'picture', 'shows', 'entire', 'layer', 'first', 'glutenbergorg', 'sample', 'took', 'processed', 'processing', 'performed', 'clean', 'went', 'removal', 'grouped', 'together', 'created', 'stem', 'dictionary', 'finally', 'built', 'inverted', 'index', 'analysis', 'calculations', 'creating', 'matlib', 'visualization', 'horizontal', 'dendrogram', 'complete', 'walk', 'also', 'showcase', 'output', 'collection', 'manually', 'around', 'written', 'components', 'recommenderipynb', 'ipynb', 'ipythonnotebook', 'file', 'contains', 'start', 'setting', 'interest', 'library', 'install', 'toolslang', 'pythonmachine', 'glob', 'fir', 'filename', 'pattern', 'regular', 'expression', 'nltk', 'natural', 'toolkit', 'os', 'consists', 'functions', 'interacting', 'operating', 'genism', 'unsupervised', 'modeling', 'pandas', 'scientist', 'scipy', 'numerical', 'optimization', 'bookinterstedin', 'relativityandgravitation', 'download', 'store', 'folder', 'txt', 'files', 'memory', 'obtained', 'reading', 'libraryrelativitytxt', 'libraryexperimentalmechanicstxt', 'librarythepoetryofsciencetxt', 'librarytheeinsteintheoryofrelativityaconcisestatementtxt', 'librarythegravitybusinesstxt', 'libraryfromnewtontoeinsteintxt', 'librarythe', 'boyplaybookofsciencetxt', 'librarysidelightsonrelativitytxt', 'libraryrelativitythespecialandgeneraltheorytxt', 'librarytheeinsteinseesawtxt', 'libraryaetherandgravitationtxt', 'earthbeginningtxt', 'libraryspecialtheoryrelativitytxt', 'globglobfolder', 'librarythetheoriesof', 'darwinandtheirrelationtophilosophyrelig', 'ionandmoralitytxt', 'libraryrelativityandgravitationtxt', 'librarythoughtsonarttxt', 'libraryeinsteintheoriesofrelativityandgravitationtxt', 'librarythejuniorclassicstxt', 'requires', 'converting', 'instead', 'string', 'purpose', 'open', 'encode', 'utf', 'signature', 'utgsig', 'utfsig', 'treat', 'bom', 'info', 'remove', 'nonalphanumeric', 'characters', 'tiles', 'lists', 'save', 'txts', 'extension', 'ospathbasename', 'replace', 'define', 'hold', 'content_txts', 'book_titles', 'loop', 'f', 'openn', 'encodingutfsig', 'val', 'resubw_', 'fread', 'content_txtsappendval', 'book_titlesappendospathbasenamenreplacetxt', 'lent', 'interested', 'variable', 'typeofbook', 'verify', 'print', 'rangelenbook_titles', 'ifbook_titlesibookinterstedin', 'printstrtypeofbook', 'collected', 'transform', 'individual', 'steps', 'filter', 'lower', 'method', 'convert', 'breakdown', 'provides', 'split', 'word', 'another', 'txts_split', 'remote', 'stoplist', 'resulting', 'tokens', 'searched', 'setfor', 'w', 'via', 'might', 'well', 'ebooksplit', 'containing', 'generate', 'token', 'pickle', 'serializing', 'module', 'deserializing', 'object', 'structure', 'dict', 'character', 'stream', 'txts_lower_case', 'txtlower', 'txtsplit', 'part', 'textstypeofbook', 'einstein', 'theories', 'relativity', 'gravitation', 'malcolm', 'united', 'states', 'parts', 'world', 'restrictions', 'whatsoever', 'away', 'terms', 'license', 'included', 'instance', 'porterstemmer', 'porter', 'generated', 'texts_stem', 'porterstemtoken', 'pickledump', 'libraryporterstemp', 'wb', 'process', 'reducing', 'affixes', 'suffixes', 'prefixes', 'roots', 'known', 'lemma', 'queries', 'internet', 'engines', 'related', 'concept', 'gathered', 'select', 'analyzing', 'algorithm', 'several', 'minutes', 'run', 'final', 'review', 'stemmed', 'algorithms', 'universe', 'models', 'bow', 'represent', 'unique', 'contain', 'associated', 'respective', 'occurrences', 'pre', 'pickleloadopenlibraryporterstemp', 'rb', 'texts_stemtypeofbook', 'theori', 'rel', 'gravit', 'unit', 'state', 'restrict', 'whatsoev', 'licens', 'includ', 'better', 'understanding', 'interpret', 'returned', 'help', 'understand', 'given', 'many', 'found', 'dataframe', 'display', 'stems', 'corporadictionarytexts_stem', 'previously', 'bows', 'dictionarydocbowtext', 'five', 'elements', 'bowstypeofbook', 'df_bow_origin', 'pddataframebowstypeofbook', 'add', 'column', 'df_bow_origincolumns', 'corresponding', 'df_bow_origintoken', 'dictionaryindex', 'df_bow_originindex', 'descending', 'values', 'df_bow_originsort_valuesbyoccurrences', 'ascendingfalsehead', 'frequencyinverse', 'frequency', 'function', 'gensims', 'tfidfmodel', 'statistical', 'measure', 'evaluates', 'documents', 'defines', 'importance', 'depending', 'infrequent', 'result', 'high', 'score', 'indicate', 'specific', 'tfidfmodelbows', 'modelbowstypeofbook', 'order', 'df_tfidf', 'pddataframemodelbowstypeofbook', 'columns', 'id', 'df_tfidfcolumnsid', 'indices', 'readability', 'df_tfidftoken', 'dictionaryi', 'listdf_tfidfid', 'rows', 'df_tfidfsort_valuesbyscore', 'defined', 'seen', 'associating', 'sims', 'similaritiesmatrixsimilaritymodelbows', 'df', 'sim_df', 'pddataframelistsims', 'sim_dfcolumns', 'sim_dfindex', 'measures', 'pair', 'useful', 'quickly', 'extract', 'needed', 'plots', 'inline', 'v', 'sim_dfbookinterstedin', 'ascending', 'scores', 'v_sorted', 'vsort_valuesascendingtrue', 'plot', 'bar', 'v_sortedplotbarhxlab', 'yval', 'rotplot', 'modify', 'axes', 'labels', 'pltxlabelcosine', 'pltylabel', 'plttitlemost', 'projectapproach', 'good', 'fit', 'want', 'picked', 'discussing', 'concepts', 'special', 'theory', 'familiar', 'einsteins', 'suggestions', 'likely', 'seem', 'see', 'whole', 'standard', 'tool', 'last', 'closest', 'relative', 'groups', 'wvma', 'ward', 'variance', 'minimization', 'z', 'hierarchylinkagesim_df', 'hierarchydendrogramz', 'leaf_font_size', 'labelssim_dfindex', 'orientationright', 'fall', 'progress', 'presentation', 'submitted', 'pending', 'feedback', 'received', 'make', 'changes', 'accordingly', 'facing', 'challenges', 'status', 'link', 'checkedin', 'repo', 'httpsgithubcomadeetikaushalcourseprojecttreemaincode', 'httpsgithubcomvivekbillinoiscourseprojectblobmaincs_voltron_final_project_reportpdf', 'httpsgithubcomvivekbillinoiscourseprojectblobmaincs_voltron_process_reportpdf', 'video', 'httpsmediaspaceillinoisedumediat_hrjku']
https://github.com/akhilbhamidipati5/CourseProject	"progress report our group has made some reasonable progress on our project, which is reproducing the paper outlined in mining causal topics in text data: iterative topic modeling with time series feedback.  right now, we have our response data: our time series data which we arbitrarily chose to be the closing price of facebook, apple, microsoft, tesla, and american airlines stock from 1/2/2018 to 10/30/2020. we have also decided what we will be using as our text data: the most popular tweets surrounding a ticker symbol tag on twitter. in our case, $fb, $aapl, $msft, $tsla, and $aal. to get our document collections, we have begun using tweepy, a twitter api, to create a collection of top tweets containing each ticker symbol along with the day they were tweeted. we have also written out the pseudocode for the iterative topic modeling with time series feedback algorithm so that we can begin with our model soon. the major tasks that we still have to carry out are finalizing the document collection, writing the code for our topic modeling of the tweets, deciding what our causality measure will be and which testing strategy (granger or pearson) we will use to evaluate significance, deciding how strong of an effect we want our prior to have, and writing code to perform sentiment analysis on tweets and words. one challenge we are working through is people who tag several ticker symbols in their tweet to try to make it more popular. these tweets often are not focused on the stock we are trying to observe and will create unnecessary noise. another challenge is getting a complete understanding of how to use the prior in the iterative topic modeling and writing out the code for this process. a third problem we are facing comes in the presence of pictures. oftentimes people will tweet a picture of a stock chart or the picture will contain essential information without which the tweets itself may seem out of context or to be missing information. therefore, we are trying to think about what the best way to handle pictures will be. right now we are thinking about filtering images out and ignoring all non-text data, but should we find that these tweets contain crucial text data, we may try to include them somehow. paper we will be reproducing: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 project proposal our team is stonksonlygoup and akhil bhamidipati (akhilsb2) will be the team captain along with team members angeeras ramanath (ar13) and josh perakis (perakis2). we will be reproducing an algorithm outlined in the paper mining causal topics in text data: iterative topic modeling with time series feedback  to observe the impact of news and tweets on the stock prices of facebook, apple, microsoft, tesla, and american airlines. these specific stocks have been chosen for certain reasons: apple and american airlines stock prices were used as response data in the original paper and using this same data again after several years will likely yield quite interesting results; facebook, tesla and microsoft have been extremely popular stocks over the past few years and analyzing the prices of those stocks will best serve the needs of our ideal users. the goal of our project will be to implement the itmtf algorithm to determine words from our sources linked causally to stock price changes--relevant positive words which are correlated with increasing stock price and relevant negative words which are correlated with decreasing stock price. the important concept is that the time-series data, stock prices in this case, has to change after a certain time delay after the relevant data has been observed. once we have our topic mining done, we will evaluate the effectiveness of our model on our time-series stock market data by using a significance test to compare the model to the actual prices of the respective stocks during those time periods. to carry out this project, we will use python and several of its libraries for the development of the model and then use r for parts of our statistical analysis process when needed. for our data, we will also use tweepy (a twitter api to get our twitter input data from select accounts), web scrape news headlines and rumors from select pages, and use finnhub to get our time series stock price data. once we are finished, we will demonstrate the usefulness of our model by trying to evaluate it over a future series after the algorithm is developed and using a significance test to estimate its effectiveness in that window. this test should give us a baseline on whether our model is good enough to ""put our money on"" or not. the people who will benefit most from our model will be common robinhood investors, investment bankers, and traders who can try to capitalize on market volatility induced by news or tweets. while similar tools do already exist, there are not many which show a causal relationship between news and actual changes in price which makes our tool unique in that sense. also, because our tool is focused on a relatively simple set of inputs and response data, it will provide starting investors with a comprehensible algorithm which they can use to judge investor sentiment and make informed trades. topic modeling and causality evaluation an evaluation of how coverage of topics in tweets with cashtags ($tsla, $pltr, $nflx) are causally linked to the price of the respective stock. team members: captain -> akhil bhamidipati (akhilsb2), angeeras ramanath (ar13), joshua perakis (perakis2) introduction we proposed to implement the paper titled mining causal topics in text data: iterative topic modeling with time series feedback. in this paper they used aal and aapl stock as well as presidential probability odds as time series data and new york times text data. the topic modeling is generic, however, in the paper they only implement the plsa (probabilistic semantic analysis) method. the paper uses both pearson correlation coefficient and granger causality to quantitatively evaluate the correlations. our project was to implement the iterative topic modeling with time series feedback (itmtf) algorithm to identify which words from tweets are linked causally to stock price changes. hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 itmtf algorithm below is a general summarization / pseudocode of the itmtf algorithm which helped us understand the paper: identify our time series response data (x = x1, ..., xn) with timestamp t1, ..., tn 1a. stock data identify collection of documents form same time period d = {(d1,td1), ..., (dm, tdm)} 2a. twitter tweets use a topic modeling method to generate topics for each doc t1, .., ttn 3a. this topic modeling method is m 3b. going to apply m to d, find topics with high causality for each topic apply c to find most significant causal words in the top words of the topic and get the impact of these significant words separate positive impact terms and negative impact terms assign prior probabilities according to significance level use the prior to repeat until we reach good topic quality purpose the goal of this project was to find relevant words which where causally linked with price movements so that we could use the document collection in the future to predict trends. ultimately, what our code does is evaluate which words' coverages over time are most strongly causally linked to changed in price within a 5-day lag. further improvements on our project will be able to more effectively find significantly causal words which are linked to movements in price and more accurately predict changes in stock prices based on the coverage of topics in tweets with the respective cashtag. implementation we begin by using tweepy, a twitter querying api to retreive tweets with the cashtags $tsla, $pltr, and $nflx and format them into files with their date and the tweet. parse the files from step 1 to make document collections create corpuses to maintain a vocabulary and calculate word coverage over time in the time series use granger testing to test for a causality relationship where the coverage of a word over time in the given corpus ""granger causes"" the change in the stock's price within a lag of 5 days. evaluate words which are significantly causal and possible implications/inferences. a walk-through of our project take a look at our demo video on youtube: https://youtu.be/yu4mr-rqw80 in the file twitter_stock.py you will find the first steps of our project which involved retrieval of tweets. we then generated the tweets we retreived into the files tweet_data_tsla.txt, tweet_data_pltr.txt, and tweet_data_nflx.txt. at this point we were ready for the main portion of our project which can be found in doc_collection_topic_modeling.html or doc_collection_topic_modeling.ipynb. in this step, we first parsed the data from the previous files to create comprehensive document collections and then went ahead and intialized corpuses for all of these document collections while ignoring stopwords. after intializing these corpuses, we performed topic modeling calculations (which are further documented in doc_collection_topic_modeling.html) to understand the coverage of the most highly covered words at any point in our time series over time. once we had narrowed down our list of words for every corpus along with their coverage over time, we converted these data frames into csv's so that we could import them in r and perform granger tests. the final step of our project can be observed in grangertesting.html or grangertesting.rmd and what it essentially comprises of is hand-selecting topics from the top 200 topics that we had filtered for in the previous step, and then performing a granger test for causality from the coverage of that topic in the time series to movements in that stock's price within 5 days. after completing that last step, we were able to find a few words who's coverage over time was causally linked to changes in the stock's price. a lot of our documentation was best suited to be in docstring format within our files. please take a look at the specified files for more details. some additional information we decided to use the closing prices of stocks $tsla, $pltr, and $nflx as our time series data. a reason we decided to choose these stocks was due to their liquidity, popularity, and unique ticker symbols which allowed for easy parsing. for our document collection we scraped twitter using tweepy between 11/20/2020 and 12/11/2020 as there was increased volatility due to the us presidential election and easy scrapers to aid in building the document collection. after creating the document collection, we created parsers using the psla algorithm to determine the probabilities of words in different ranges of vocabulary. the probabilities we calculated include a word in a tweet, a word in a tweet within a day, etc. we used stopwords as well to minimize the noise in our document collection. additionally, our parser identified non-english tweets and scrapped them from the document collection. we used the same r library used by the paper used for determining granger causality with the top 200 words for each of our three stock tickers. we experimented with different time lags between the range of 3-6 days to find the best results. contributions of each member the project began with data collection by joshua. the team decided that twitter is a good platform to retrieve data from. after setting up a developer account, he began to pull tweets that contained pltr, nflx, and tsla. 100 tweets were pulled from every day for the last month all using twitter's api. these tweets were written into a respective .txt file and each tweet was treated as a document. angeeras led the algorithms for topic modeling. akhil contributed to the topic modeling as well. on top of that, he implemented granger tests in r. the dataset for these algorithms to be run on came from the tweets that joshua provided as well as the stock data that akhil provided from yahoo finance. overall the project was split very well. the contributions made by all members were all equally important in completing the project and also a great learning experience in applying class material to real world analysis. conclusions & further research things we learned: creating a twitter document collection was quite difficult excess noise in tweets makes it hard to scrape a good document collection iterative topic modeling is complicated pictures are very difficult to model creating topic models for short documents is tricky potential future extensions of this project: try to model more stocks and see what words we find as causally linked for these tickers implement the feedback loop to allow our causal topics/words to guide our model and make it much more oaccurate use the data from the project to created predictive models based on sentiment and topic coverage"	['progress', 'report', 'group', 'made', 'reasonable', 'project', 'reproducing', 'paper', 'outlined', 'mining', 'causal', 'topics', 'text', 'data', 'iterative', 'topic', 'modeling', 'time', 'series', 'feedback', 'right', 'response', 'arbitrarily', 'chose', 'closing', 'price', 'facebook', 'apple', 'microsoft', 'tesla', 'american', 'airlines', 'stock', 'also', 'decided', 'using', 'popular', 'tweets', 'surrounding', 'ticker', 'symbol', 'tag', 'twitter', 'case', 'fb', 'aapl', 'msft', 'tsla', 'aal', 'get', 'document', 'collections', 'begun', 'tweepy', 'api', 'create', 'collection', 'top', 'containing', 'along', 'day', 'tweeted', 'written', 'pseudocode', 'algorithm', 'begin', 'model', 'soon', 'major', 'tasks', 'still', 'carry', 'finalizing', 'writing', 'code', 'deciding', 'causality', 'measure', 'testing', 'strategy', 'granger', 'pearson', 'use', 'evaluate', 'significance', 'strong', 'effect', 'want', 'prior', 'perform', 'sentiment', 'analysis', 'words', 'one', 'challenge', 'working', 'people', 'several', 'symbols', 'tweet', 'try', 'make', 'often', 'focused', 'trying', 'observe', 'unnecessary', 'noise', 'another', 'getting', 'complete', 'understanding', 'process', 'third', 'problem', 'facing', 'comes', 'presence', 'pictures', 'oftentimes', 'picture', 'chart', 'contain', 'essential', 'information', 'without', 'may', 'seem', 'context', 'missing', 'therefore', 'think', 'best', 'way', 'handle', 'thinking', 'filtering', 'images', 'ignoring', 'nontext', 'find', 'crucial', 'include', 'somehow', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'proceedings', 'nd', 'acm', 'international', 'conference', 'knowledge', 'management', 'cikm', 'new', 'york', 'ny', 'usa', 'doi', 'proposal', 'team', 'stonksonlygoup', 'akhil', 'bhamidipati', 'akhilsb', 'captain', 'members', 'angeeras', 'ramanath', 'ar', 'josh', 'perakis', 'impact', 'news', 'prices', 'specific', 'stocks', 'chosen', 'certain', 'reasons', 'used', 'original', 'years', 'likely', 'yield', 'quite', 'interesting', 'results', 'extremely', 'past', 'analyzing', 'serve', 'needs', 'ideal', 'users', 'goal', 'implement', 'itmtf', 'determine', 'sources', 'linked', 'causally', 'changesrelevant', 'positive', 'correlated', 'increasing', 'relevant', 'negative', 'decreasing', 'important', 'concept', 'timeseries', 'change', 'delay', 'observed', 'done', 'effectiveness', 'market', 'test', 'compare', 'actual', 'respective', 'periods', 'python', 'libraries', 'development', 'r', 'parts', 'statistical', 'needed', 'input', 'select', 'accounts', 'web', 'scrape', 'headlines', 'rumors', 'pages', 'finnhub', 'finished', 'demonstrate', 'usefulness', 'future', 'developed', 'estimate', 'window', 'give', 'us', 'baseline', 'whether', 'good', 'enough', 'put', 'money', 'benefit', 'common', 'robinhood', 'investors', 'investment', 'bankers', 'traders', 'capitalize', 'volatility', 'induced', 'similar', 'tools', 'already', 'exist', 'many', 'show', 'relationship', 'changes', 'makes', 'tool', 'unique', 'sense', 'relatively', 'simple', 'set', 'inputs', 'provide', 'starting', 'comprehensible', 'judge', 'investor', 'informed', 'trades', 'evaluation', 'coverage', 'cashtags', 'pltr', 'nflx', 'joshua', 'introduction', 'proposed', 'titled', 'well', 'presidential', 'probability', 'odds', 'times', 'generic', 'however', 'plsa', 'probabilistic', 'semantic', 'method', 'uses', 'correlation', 'coefficient', 'quantitatively', 'correlations', 'identify', 'general', 'summarization', 'helped', 'understand', 'x', 'xn', 'timestamp', 'tn', 'documents', 'form', 'period', 'dtd', 'dm', 'tdm', 'generate', 'doc', 'ttn', 'b', 'going', 'apply', 'high', 'c', 'significant', 'separate', 'terms', 'assign', 'probabilities', 'according', 'level', 'repeat', 'reach', 'quality', 'purpose', 'movements', 'could', 'predict', 'trends', 'ultimately', 'coverages', 'strongly', 'changed', 'within', 'lag', 'improvements', 'able', 'effectively', 'significantly', 'accurately', 'based', 'cashtag', 'implementation', 'querying', 'retreive', 'format', 'files', 'date', 'parse', 'step', 'corpuses', 'maintain', 'vocabulary', 'calculate', 'word', 'given', 'corpus', 'causes', 'days', 'possible', 'implicationsinferences', 'walkthrough', 'take', 'look', 'demo', 'video', 'youtube', 'httpsyoutubeyumrrqw', 'file', 'twitter_stockpy', 'first', 'steps', 'involved', 'retrieval', 'generated', 'retreived', 'tweet_data_tslatxt', 'tweet_data_pltrtxt', 'tweet_data_nflxtxt', 'point', 'ready', 'main', 'portion', 'found', 'doc_collection_topic_modelinghtml', 'doc_collection_topic_modelingipynb', 'parsed', 'previous', 'comprehensive', 'went', 'ahead', 'intialized', 'stopwords', 'intializing', 'performed', 'calculations', 'documented', 'highly', 'covered', 'narrowed', 'list', 'every', 'converted', 'frames', 'csvs', 'import', 'tests', 'final', 'grangertestinghtml', 'grangertestingrmd', 'essentially', 'comprises', 'handselecting', 'filtered', 'performing', 'completing', 'last', 'whos', 'lot', 'documentation', 'suited', 'docstring', 'please', 'specified', 'details', 'additional', 'reason', 'choose', 'due', 'liquidity', 'popularity', 'allowed', 'easy', 'parsing', 'scraped', 'increased', 'election', 'scrapers', 'aid', 'building', 'creating', 'created', 'parsers', 'psla', 'different', 'ranges', 'calculated', 'etc', 'minimize', 'additionally', 'parser', 'identified', 'nonenglish', 'scrapped', 'library', 'determining', 'three', 'tickers', 'experimented', 'lags', 'range', 'contributions', 'member', 'began', 'platform', 'retrieve', 'setting', 'developer', 'account', 'pull', 'contained', 'pulled', 'month', 'twitters', 'txt', 'treated', 'led', 'algorithms', 'contributed', 'implemented', 'dataset', 'run', 'came', 'provided', 'yahoo', 'finance', 'overall', 'split', 'equally', 'great', 'learning', 'experience', 'applying', 'class', 'material', 'real', 'world', 'conclusions', 'research', 'things', 'learned', 'difficult', 'excess', 'hard', 'complicated', 'models', 'short', 'tricky', 'potential', 'extensions', 'see', 'loop', 'allow', 'topicswords', 'guide', 'much', 'oaccurate', 'predictive']
https://github.com/alany9552/CourseProject	"reproducing paper: latent aspect rating analysis chengmin huang ge yu xuehao wang introduction and overview in this paper, we will introduce the steps of building latent aspect rating analysis(lara) in order to mining the opinion ratings on topical aspects of given certain services type(hotel reviews, restaurant reviews etc.). specifically, it will infer the opinion ratings and relative weights focusing on the different aspects based on the reviews from the website such as yelps, trip advisor, amazon. we'll be using trip advisor as our dataset. the basic model of lara will be based on the pre-defined aspect keywords, whereas the advanced lara model won't need the supervision of predefined aspect keywords. since it's the time where the data is everywhere , lara is helpful for users to digest a larger amount of the online reviews about a specific entity of tropic. in our project, we use the hotel reviews dataset provided by the trip advisor. nowadays, most websites already decompose the overall rating into different specific aspects. for example, the hotel reviews might have such values, rooms, cleanliness and other categories. since different users emphasize different aspects, it might still not be informative. our lara model can infer the relative emphasis placed by a reviewer on different aspects by digging into their specific reviews. lara takes review texts about an entity as an input, and will produce output as 1) the ratings on a set of predefined aspects 2) the relative weights that the user placed based on their review texts. for our implementation, we divide the lara model into three stages: 1) data processing to process the raw data into the format for further processing 2) a bootstrap algorithm to identify the aspects and segment of the processed review content 3) a latent rating regression model to infer the aspect rating and weights in a review. the specific implementation will be introduced in the next section. implementation and documentation data reading and processing in order to process the data, we developed several functions. first, we read the initialized aspect words and stop words. we downloaded the stop words from the nltk library. then we read the reviews from the json file downloaded from the database, and call the stemming stop removal() function to 1)tokenize the reviews into sentences and words 2) remove the stop words to improve the accuracy of the model 3)add words to the vocabulary list 4) make the sentence objects and corresponding review objects. also, since there are words that have less frequency but could be affecting the overall results as outliers, we developed a function to remove the words that have the frequency less than 5. after the processing step for the data, we call the functions in bootstrap.py to generate the processed word lists as local files. bootstrap algorithm as mentioned in the paper, the main usage of bootstrapping algorithms is to identify the aspects and segment the review content. we use a bootstrapping algorithm to generate the keywords. this is the code that we used from others and changed some details in order to make it satisfy our own goal . the assignaspect function: this is basically just assigning aspects to sentences. the chisq and calcchisq: these two functions are used to generate the chi-square value which is used to tell you how much difference exists between the observed date and the data you would expect to get. populatelists: this function is used to generate the word list. the bootstrap function: it is used to execute the algorithm, it basically implements all the functions i mentioned above. and savetofile function is just simply saving the file. all the files are saved in the modeldata folder. wlist.json is a list of words and their frequency matrix, ratingslist.json is list of ratings dictionary belong to review class, reviewidlist.json is list of review ids, vocab.json is the list of all the vocabularies that being selected and the aspectkeywords.json is the file that contains the keywords that we obtain using the bootstrapping algorithm. then we applied a linear rating regression model with these keywords. linear rating regression after identification of aspects and segments in review content, the authors applied the latent rating regression(lrr) model to complete the prediction. the lrr model mainly consists of two steps. the input of the lrr model is a list of words and their frequency in the review content. at the beginning of lrr model, the word list is separated into two subset i.e. training set and testing set. the original code separated 75% word frequency data into training set and the rest of data into testing data. in the e-step of training step, the model constrained posterior inference. to be specific, it estimated the updated states using the current parameters. in the m-step, it updated the parameter estimation and maximized the log-likelihood of the whole corpus. the model is using the ""overall"" rating of each review as the true value and calculating the likelihood between these values and prediction values. however, review text might not be directly related to the overall rating values. one possible improvement is to replace the ""overall"" rating with the average of all aspects numbers such as ""service"", ""cleanliness"", and ""location"". another possible improvement is that since the original model didn't use the validation dataset during the training step while the validation set could help with the optimization and convergence of parameters. further improvement the results of this model are promising and meaningful. even though there are some large numbers in the prediction values, the overall trend and relevant values are almost consistent with the actual values. it can be told that the prediction numbers of actual 5.0 rating is greater than the prediction numbers of actual 3.0 rating in the order of magnitudes. we think the possible reason for these large numbers might come from the bag-of-words assumption. this assumption limited the model's aspect segmentation capabilities. at the beginning of e-step and m-step, the calculation parameters mu and sigma are set to the large range of numbers which leads prediction values to increase cumulatively. even after many iterations steps, it would be difficult to lower these parameters down to the reasonable range. further improvement can focus on the normalization of these prediction values to the [0, 5] range. in this way, it would be more clear to compare these two kinds of values and evaluate the performance of this model. furthermore, the initialization of these parameters might also help with the improvement of accuracy. also, like mentioned in the paper, we successfully implemented the proposed method of using lrr as the model with the aspect keywords as supervision. however, we fail to implement the advanced model which has a better performance without using predefined aspect keywords as supervision. in the future, we will implement the improved model and compared with our model using bootstrap algorithm and lrr model. usage of software this paper proposed a generative lara model and used the model to infer the opinion rating on topic aspects. also it improves the model by eliminating the use of pre-defined aspects of keywords. the software can be downloaded from https://github.com/alany9552/courseproject. to run the software, users need to make sure they have installed the python3 environment on their device. also, the software uses nltk  stopwords so users should use import nltk, nltk.download('stopwords'), and nltk.download('punkt') to download the necessary dictionaries. after the completion of installation, users can run the software using python3 readdata.py, python3 bootstrap.py, and python3 lrr.py sequentially. then, the running results would show up. the results will list the ""reviewid"", ""actual overallrating"", and ""predicted overallrating"" respectively. also, there is a simple classification at the end of prediction that the review would be positive when the ""predicted overallrating"" is greater than 3.0 or negative when it is smaller than 3.0. the software running can also be customized by users in terms of ratio of training dataset and testing dataset. in the line 46 lrr.py file, the users can change the percentage of the training set. currently, the training dataset and testing dataset are in 3:1 ratio. in addition to the training ratio, users can also specify the maximum interaction steps and coverage threshold in line 370. moreover, if they want to change the maximum interaction steps much lower, the changing of line 339 is also needed. this model is applied to predict the review score of hotels and restaurants based on the review text. therefore, it can be generalized to the prediction of most opinion tasks. elimination of predefined aspects of keywords enables this model to be applied in various areas. for example, as mentioned in the paper, it can be applied to reviewer behavior analysis, topic opinion prediction, and personalization recommendations. contribution of each team member in case it is hard to say who contributes to which part of the project since we are basically all doing work that overlapped. we first all read and understand the paper by ourselves, then we gathered and shared our understanding together. after uniting the idea, the team leader (geyu) gave each of us different work. to be more specific, chengmin huang and ge yu contributed more in coding, and xuehao wang contributed more in testing and processing the data. citations and contributors original implementation of the authors: http://www.cs.virginia.edu/~hw5x/codes/lara.zip since the implementation of the lrr and bootstrap algorithm, we extend existing models from the web as our model per the instructor's instructions and directions, and did some changes to fit our models better: https://github.com/redris96/lara https://github.com/seanliu96/lara https://github.com/biubiutang/lara-1 data sources: http://times.cs.uiuc.edu/~wang296/data/ overall implementation and ideas: ""latent aspect rating analysis on review text data: a rating regression approach"", http://sifaka.cs.uiuc.edu/~wang296/paper/rp166f-wang.pdf ""latent aspect rating analysis without aspect keyword supervision"", http://sifaka.cs.uiuc.edu/~wang296/paper/p618.pdf cs410 project progress report ge yu - gey2 chengmin huang - ch61 xuehao wang - xuehaow2 * progress made: 1. understand the advantages of latent aspect rating analysis model compared to previous two-step solution 2. data from tripadvisor has been processed into sql database * remaining tasks: 1. try to pull more datas from the website to make the model more meaningful 2. algorithms to calculate the k-means from different features 3. still try to implement algorithms described in the paper * challenges: 1. fit the model with the bag-of-word assumption 2. how to determine the aspect segments and their weights 3. acceleration on the training process for the test dataset 4. dimensionality reduction to solve the data sparsity 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. xuehao wang: xuehaow2 geyu: gey2 chengmin huang: ch61 geyu is the captain 2. which paper have you chosen? we choose the first one subtopic: latent aspect rating analysis hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 3. which programming language do you plan to use? we plan to use python 4. can you obtain the datasets used in the paper for evaluation? yes, we can obtain from this website http://times.cs.uiuc.edu/~wang296/data/ courseproject for cs410 at university of illinois at urbana-champaign presentation videos: https://mediaspace.illinois.edu/media/t/1_jj5lzils https://www.youtube.com/watch?v=o0btraiyknm&feature=youtu.be citations and resources: the python implementation is following the instructions from research papers: ""latent aspect rating analysis on review text data: a rating regression approach"", http://sifaka.cs.uiuc.edu/~wang296/paper/rp166f-wang.pdf ""latent aspect rating analysis without aspect keyword supervision"", http://sifaka.cs.uiuc.edu/~wang296/paper/p618.pdf this implementation uses the orignal implementation given by the author (http://www.cs.virginia.edu/~hw5x/codes/lara.zip). also, the latent rating regression model and bootstrap use the implementation of existing models from: https://github.com/redris96/lara https://github.com/seanliu96/lara https://github.com/biubiutang/lara-1 contributors: chengmin huang - ch61@illinois.edu xuehao wang - xuehaow2@illinois.edu ge yu - gey2@illinois.edu organization of the implemenataion: src/hotelrivews: this directory includes the hotel reviews download from the database http://times.cs.uiuc.edu/~wang296/data/ from tripadvisor. for testing, we include only one review file. you are free to download the whole dataset to do a better training, which might take up to 30 minutes to run 10 json files. src/settings: this is the directory to store the pre-difined laten words and stopwords downloaded from nltk libaray. src/modeldata: this is the directory to store the data after processed by readdata.py, the file includes the ratings, reviewid, each word's frequencyy and the aspectkeywords after reading thereviews. src this is the directory to store all of the files including three main class: readdata.py that includes the data proessig methods, bootstrap.py that contains the boot strapping algorithms and lrr.py that implemented the linear rating regression model. how to run the model: to run the software, users need to make sure they have installed the python3 environment on their device. also, the software uses nltk stopwords so users should use import nltk, nltk.download('stopwords'), and nltk.download('punkt') to download the necessary dictionaries. step-by-step tutorial: https://mediaspace.illinois.edu/media/1_s4x9i7wo https://www.youtube.com/watch?v=sbrppuofsgy&feature=youtu.be background: python 3.7 required packages: nltk, numpy, panda, pandas, matplotlib specific step: after the completion of installation, users can run the software using python3 readdata.py, python3 bootstrap.py, and python3 lrr.py sequentially. then, the running results would show up. the results will list the ""reviewid"", ""actual overallrating"", and ""predicted overallrating"" respectively in your terminal window. customize: the software running can also be customized by users in terms of ratio of training dataset and testing dataset. in the line 46 lrr.py file, the users can change the percentage of the training set. currently, the training dataset and testing dataset are in 3:1 ratio. in addition to the training ratio, users can also specify the maximum interaction steps and coverage threshold in line 370. moreover, if they want to change the maximum interaction steps much lower, the changing of line 339 is also needed. reading results: the results will list the ""reviewid"", ""actual overallrating"", and ""predicted overallrating"" respectively. also, there is a simple classification at the end of prediction that the review would be positive when the ""predicted overallrating"" is greater than 3.0 or negative when it is smaller than 3.0."	['reproducing', 'paper', 'latent', 'aspect', 'rating', 'analysis', 'chengmin', 'huang', 'ge', 'yu', 'xuehao', 'wang', 'introduction', 'overview', 'introduce', 'steps', 'building', 'analysislara', 'order', 'mining', 'opinion', 'ratings', 'topical', 'aspects', 'given', 'certain', 'services', 'typehotel', 'reviews', 'restaurant', 'etc', 'specifically', 'infer', 'relative', 'weights', 'focusing', 'different', 'based', 'website', 'yelps', 'trip', 'advisor', 'amazon', 'well', 'using', 'dataset', 'basic', 'model', 'lara', 'predefined', 'keywords', 'whereas', 'advanced', 'wont', 'need', 'supervision', 'since', 'time', 'data', 'everywhere', 'helpful', 'users', 'digest', 'larger', 'amount', 'online', 'specific', 'entity', 'tropic', 'project', 'use', 'hotel', 'provided', 'nowadays', 'websites', 'already', 'decompose', 'overall', 'example', 'might', 'values', 'rooms', 'cleanliness', 'categories', 'emphasize', 'still', 'informative', 'emphasis', 'placed', 'reviewer', 'digging', 'takes', 'review', 'texts', 'input', 'produce', 'output', 'set', 'user', 'implementation', 'divide', 'three', 'stages', 'processing', 'process', 'raw', 'format', 'bootstrap', 'algorithm', 'identify', 'segment', 'processed', 'content', 'regression', 'introduced', 'next', 'section', 'documentation', 'reading', 'developed', 'several', 'functions', 'first', 'read', 'initialized', 'words', 'stop', 'downloaded', 'nltk', 'library', 'json', 'file', 'database', 'call', 'stemming', 'removal', 'function', 'tokenize', 'sentences', 'remove', 'improve', 'accuracy', 'add', 'vocabulary', 'list', 'make', 'sentence', 'objects', 'corresponding', 'also', 'less', 'frequency', 'could', 'affecting', 'results', 'outliers', 'step', 'bootstrappy', 'generate', 'word', 'lists', 'local', 'files', 'mentioned', 'main', 'usage', 'bootstrapping', 'algorithms', 'code', 'used', 'others', 'changed', 'details', 'satisfy', 'goal', 'assignaspect', 'basically', 'assigning', 'chisq', 'calcchisq', 'two', 'chisquare', 'value', 'tell', 'much', 'difference', 'exists', 'observed', 'date', 'would', 'expect', 'get', 'populatelists', 'execute', 'implements', 'savetofile', 'simply', 'saving', 'saved', 'modeldata', 'folder', 'wlistjson', 'matrix', 'ratingslistjson', 'dictionary', 'belong', 'class', 'reviewidlistjson', 'ids', 'vocabjson', 'vocabularies', 'selected', 'aspectkeywordsjson', 'contains', 'obtain', 'applied', 'linear', 'identification', 'segments', 'authors', 'regressionlrr', 'complete', 'prediction', 'lrr', 'mainly', 'consists', 'beginning', 'separated', 'subset', 'ie', 'training', 'testing', 'original', 'rest', 'estep', 'constrained', 'posterior', 'inference', 'estimated', 'updated', 'states', 'current', 'parameters', 'mstep', 'parameter', 'estimation', 'maximized', 'loglikelihood', 'whole', 'corpus', 'true', 'calculating', 'likelihood', 'however', 'text', 'directly', 'related', 'one', 'possible', 'improvement', 'replace', 'average', 'numbers', 'service', 'location', 'another', 'didnt', 'validation', 'help', 'optimization', 'convergence', 'promising', 'meaningful', 'even', 'though', 'large', 'trend', 'relevant', 'almost', 'consistent', 'actual', 'told', 'greater', 'magnitudes', 'think', 'reason', 'come', 'bagofwords', 'assumption', 'limited', 'models', 'segmentation', 'capabilities', 'calculation', 'mu', 'sigma', 'range', 'leads', 'increase', 'cumulatively', 'many', 'iterations', 'difficult', 'lower', 'reasonable', 'focus', 'normalization', 'way', 'clear', 'compare', 'kinds', 'evaluate', 'performance', 'furthermore', 'initialization', 'like', 'successfully', 'implemented', 'proposed', 'method', 'fail', 'implement', 'better', 'without', 'future', 'improved', 'compared', 'software', 'generative', 'topic', 'improves', 'eliminating', 'httpsgithubcomalanycourseproject', 'run', 'sure', 'installed', 'python', 'environment', 'device', 'uses', 'stopwords', 'import', 'nltkdownloadstopwords', 'nltkdownloadpunkt', 'download', 'necessary', 'dictionaries', 'completion', 'installation', 'readdatapy', 'lrrpy', 'sequentially', 'running', 'show', 'reviewid', 'overallrating', 'predicted', 'respectively', 'simple', 'classification', 'end', 'positive', 'negative', 'smaller', 'customized', 'terms', 'ratio', 'line', 'change', 'percentage', 'currently', 'addition', 'specify', 'maximum', 'interaction', 'coverage', 'threshold', 'moreover', 'want', 'changing', 'needed', 'predict', 'score', 'hotels', 'restaurants', 'therefore', 'generalized', 'tasks', 'elimination', 'enables', 'various', 'areas', 'behavior', 'personalization', 'recommendations', 'contribution', 'team', 'member', 'case', 'hard', 'say', 'contributes', 'part', 'work', 'overlapped', 'understand', 'gathered', 'shared', 'understanding', 'together', 'uniting', 'idea', 'leader', 'geyu', 'gave', 'us', 'contributed', 'coding', 'citations', 'contributors', 'httpwwwcsvirginiaeduhwxcodeslarazip', 'extend', 'existing', 'web', 'per', 'instructors', 'instructions', 'directions', 'changes', 'fit', 'httpsgithubcomredrislara', 'httpsgithubcomseanliulara', 'httpsgithubcombiubiutanglara', 'sources', 'httptimescsuiuceduwangdata', 'ideas', 'approach', 'httpsifakacsuiuceduwangpaperrpfwangpdf', 'keyword', 'httpsifakacsuiuceduwangpaperppdf', 'cs', 'progress', 'report', 'gey', 'ch', 'xuehaow', 'made', 'advantages', 'previous', 'twostep', 'solution', 'tripadvisor', 'sql', 'remaining', 'try', 'pull', 'datas', 'calculate', 'kmeans', 'features', 'described', 'challenges', 'bagofword', 'determine', 'acceleration', 'test', 'dimensionality', 'reduction', 'solve', 'sparsity', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'chosen', 'choose', 'subtopic', 'hongning', 'yue', 'lu', 'chengxiang', 'zhai', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'programming', 'language', 'plan', 'datasets', 'evaluation', 'yes', 'courseproject', 'university', 'illinois', 'urbanachampaign', 'presentation', 'videos', 'httpsmediaspaceillinoisedumediat_jjlzils', 'httpswwwyoutubecomwatchvobtraiyknmfeatureyoutube', 'resources', 'following', 'research', 'papers', 'orignal', 'author', 'chillinoisedu', 'xuehaowillinoisedu', 'geyillinoisedu', 'organization', 'implemenataion', 'srchotelrivews', 'directory', 'includes', 'include', 'free', 'take', 'minutes', 'srcsettings', 'store', 'predifined', 'laten', 'libaray', 'srcmodeldata', 'frequencyy', 'aspectkeywords', 'thereviews', 'src', 'including', 'proessig', 'methods', 'boot', 'strapping', 'stepbystep', 'tutorial', 'httpsmediaspaceillinoisedumedia_sxiwo', 'httpswwwyoutubecomwatchvsbrppuofsgyfeatureyoutube', 'background', 'required', 'packages', 'numpy', 'panda', 'pandas', 'matplotlib', 'terminal', 'window', 'customize']
https://github.com/alex-pi/CourseProject	courseproject automatic crawler of faculty pages tool is live on this url: https://sxxgrc.github.io/faculty-scraper/ demo video under: doc/usagedemo.mp4 directory structure faculty_scraper_ui.py >> flask client for gui cli.py >> command line utility to use the faculty scraper globals.py >> common python definitions readme.md +---data finalized_model.sav >> svm model data output.zip >> output example trainingdatasettest.csv trainingtestingdataset.csv +---output >> csv files will be generated here, one for positive cases, another for all urls tested .gitignore readme.md +---doc automatic crawler of faculty pages - project proposal.pdf progressreport.pdf finalreport.pdf usagedemo.mp4 +---spiderbot scrapy_spider.py +---ui >> web content for gui such as js, html and css +---public +---src faculty_scraper.js >> main search page for ui, handles accessing the flask client and polling results.js >> main results page which displays the json result from the flask client +---urlclassification url_classification.py >> model training and classification	['courseproject', 'automatic', 'crawler', 'faculty', 'pages', 'tool', 'live', 'url', 'httpssxxgrcgithubiofacultyscraper', 'demo', 'video', 'docusagedemomp', 'directory', 'structure', 'faculty_scraper_uipy', 'flask', 'client', 'gui', 'clipy', 'command', 'line', 'utility', 'use', 'scraper', 'globalspy', 'common', 'python', 'definitions', 'readmemd', 'data', 'finalized_modelsav', 'svm', 'model', 'outputzip', 'output', 'example', 'trainingdatasettestcsv', 'trainingtestingdatasetcsv', 'csv', 'files', 'generated', 'one', 'positive', 'cases', 'another', 'urls', 'tested', 'gitignore', 'doc', 'project', 'proposalpdf', 'progressreportpdf', 'finalreportpdf', 'usagedemomp', 'spiderbot', 'scrapy_spiderpy', 'ui', 'web', 'content', 'js', 'html', 'css', 'public', 'src', 'faculty_scraperjs', 'main', 'search', 'page', 'handles', 'accessing', 'polling', 'resultsjs', 'results', 'displays', 'json', 'result', 'urlclassification', 'url_classificationpy', 'training', 'classification']
https://github.com/alex6499cat/CourseProject	"cs 410 - jaws project progress report sentiment analysis of customer support tweets 1) which tasks have been completed? * replacing emojis with descriptions of emojis * general data cleaning to remove urls, unnecessary line endings, etc * running topic analysis on amazon, apple, and uber tweets * creating a parallel database that links all the tweets in the same thread. * sentiment analysis of the first and last user tweet of each thread to determine change in sentiment due to the interaction with the customer service team * summarize the average initial sentiment of the customer, and the average improvement of sentiment by company. * visualize how the sentiment changes over time for one company. 2) which tasks are pending? * sentiment analysis between successive customer tweets of a thread * generating a language model representing ""successful"" customer service tweets * visualizing/summarizing data * continue topic analysis on airline companies trying different topic counts * incorporating topic analysis into sentiment analysis of companies * visualize how the company compares to others in the same industry regarding the effectiveness of their team in improving customer sentiment. 3) are you facing any challenges? * general runtime of scripts * choosing what parts of our analyses are most interesting to summarize and present * finding coherent topics of tweets programmatically team name:  jaws team members: joan ball - joan2 alex ginglen - aging2 walter griebenow - wfg2 - team captain cs - 410 project proposal:  sentiment analysis of customer support tweets 1. project objective / hypotheses to test what is the function of the tool? our tool analyzes customer support tweets generated by both customers and call center personnel and performs several textual analyses: * determines the sentiment of the initial tweet, response tweet and subsequent interactions. * determines the topics/categories that exist in order to categorize tweets. * relating to complaint, such as bad service, faulty product, etc * relating to industry, such as software, food service, etc * searches in the response tweets word unigrams and bigrams that partially characterize the content of the response. * mines possible associations of those uni or bi-grams with the change in the sentiment between the initial customer tweet and the tweet after the interaction with the call center employee (to estimate ""success"" of the customer service) * uses non textual variables to control for variations due to company / industry and topic (maybe timeliness of response too). for further exploration: * find correlations between inbound and outbound topic which would be the initial step for predicting the answer from the question the customer asks who will benefit from such a tool? the idea behind this project is to find associations between the language used and the effectiveness of the interaction with the customer, that may lead to a focused a/b testing which in turn would be used to establish best practices for the service personnel. does this kind of tools already exist? if similar tools exist, how is your tool different from them? we can assume that technology savvy companies already have discovered the best language to approach angry or dissatisfied customers and have clear guidelines for different types of interactions. but probably smaller companies do not have the resources to perform this type of analysis and rely on common sense and the experience of their employees. would people care about the difference? we do not know yet what we will find but this path could be much faster than discovering language patterns only with the experience. also, this would help to flatten the learning curve of new employees by informing of empirical best practices. how are you going to evaluate your work? initially, we will evaluate our work by observing that our tool produces accurate results when analyzing the sentiments of a small amount of data. a larger scale test could be running our tool on a large, similar dataset that has already had a sentiment analysis done to it and compare the results. we will also visualize our output and analyzed input data to better understand it. 2. course topics covered by the project / tools to be used in analysis and display of results what techniques/algorithms will you use to develop the tool? (it's fine if you just mention some vague idea.) we will apply sentiment analysis, topic mining, and general cs techniques like parsing text to remove useless words, database wrangling to put together related tweets and some type of regression analysis. we intend to do the development work in python. 3. data description what existing resources can you use? our group has identified a suitable dataset in kaggle that can be accessed in this site: https://www.kaggle.com/thoughtvector/customer-support-on-twitter this dataset is a large corpus of over 3 million tweets and replies from big brands like apple, amazon, delta and t-mobile. this dataset is organized in one row per tweet in 7 fields per row that include the links to previous and next (if applicable) tweets. 4. other how will you demonstrate the usefulness of your tool? we will run the analysis using a jupyter notebook that can be run by the ta. this notebook will include graphs and tables that show the uncovered relationships (hopefully some with statistical significance) a very rough timeline to show when you expect to finish what 1. data exploration and data wrangling - 11-05-2020 - 3 hours per person 2. sentiment analysis and topic mining by type (customer or employee) by 11-15-2020 - 5 hours per person 3. word unigrams and bigrams in the response and their association with the change in sentiment - 11-25-2020 - 5 hours per person 4. project presentation made - 11-30-2020 - 3 hours person 5. optional: prediction of response topic from inbound topic by - tbd sentiment analysis of customer service tweets presentation: https://youtu.be/wccymlzrou8 our goals note: it was not our intention to create any library or software, but instead to do a deep dive into a data set and present our findings. because of this, our presentation is more about our findings instead of usage, and our ""testable"" code is more of a playground with limited functionality, running all code that we used to generate our findings could take days. as discussed in our proposal, we set out to analyze 1 million customer service tweets. this analysis includes: - analysis of the overall sentiment change of a thread. that is, the difference in sentiment between the first and last tweet of one customer in a thread. this data was stratified by time and company to further compare and analyze how well the top companies stack up against each other. - analysis of common topics by company. with tweets being short and complaints not being too broad within the scope of one company, we found that a smaller amount of topics (k) tends to find more distinct topics. while these topics aren't given any human readable title, you can infer what a topic might be about based on its unigram language model. - analysis of successive sentiment. that is, the difference in sentiment of customer tweets that ""sandwich"" a customer service tweet. as opposed to the earlier mentioned sentiment analysis, this had the intention of finding successful language, instead of comparing companies against each other or themselves over time. but again with tweets being short and customer service responses tending to be formulaic, there wasn't much difference in language between successful and unsuccessful customer service responses. testing/""playground"" along with python notebooks, we also have a well put together excel spreadsheet that includes data from our first goal and that also has several sheets you can interact with. that spreadsheet is found at output/sentiment summary by company and month.xlsx we have provided several playground files, or files meant for our tester to ""test"" our code with since they are more lightweight. - overall sentiment change - tester files: jupyter notebooks/fromadjacencytodataframe.ipynb jupyter notebooks/sentiment improvement by company and month.ipynb jupyter notebooks/sentimentanalysis.ipynb - dependencies: pandas, datetime, stanza corenlp (java & pytorch needed for stanza) - topic analysis: - tester files: jupyter notebooks/deltatopicsdetermination.ipynb jupyter notebooks/sentiment of topics.ipynb - dependencies: gensim, nltk, collections, pandas - consecutive sentiment change (developed on python 3.7.3) - tester files: jupyter notebooks/con_sent_tester.ipynb - dependencies: pandas, gensim sentiment analysis of customer service tweets jaws team - cs410 joan ball, alex ginglen, walter griebenow objective monitor effectiveness of the service center in improving customers satisfaction and compare to industry benchmarks find the topics most asked for in the tweets and their typical sentiment portray the characteristics of a successful interaction with the customer process followed text cleaning convert emoticons to words associated tweets into threads customer sentiment: initial & final compare by industry / time topic analysis relate to sentiment sentiment change after interaction language of effective interactions 1 2 3 4 1. pre processing cleaning remove unneeded twitter handles remove urls and &amp; emoji to text replace emoticons with corresponding english words (grin face, happy face) weave tweets into threads gather related tweets in a sequence to build a conversation 1. translate emojis script emojitranslate.py process remove emojis for topic analysis translate emojis to text description for sentiment analysis smile face 2. effectiveness of customer service initial sentiment of customer tweets is improved by interaction with the customer service team. how do we compare? (tech industry) spotify not only has better initial sentiment but also they are better in improving the final sentiment. microsoft lags behind. 2. monitoring the sentiment in time timely detect changes in sentiment of customer tweets. delta airlines does better than the average of its industry, but there is always space for improvement. did something different happen in june 2017? 3. topic analysis process remove stopwords incorporate bigrams component incorporate tf-idf component create model using latent dirichlet allocation execute model on list of tweets aggregate list of tweets with assigned topics 3.topic analysis results generated topics did not directly match single, clear topics identifiable by humans. topics tended to match some specific areas topic 2 tended to match tweets about gates. topic 5 tended to match tweets requesting help or being on hold. in order to identify coherent and granular topics consistently, our algorithm would need human intervention such as in text categorization or by providing a pre-classified list of tweets 3.topic to sentiment some topics tended to have higher average sentiments than others topic 0 tended to match tweets praising customer service and had a higher average sentiment starting a tweet thread topic 5 tended to match tweets requesting help and being on hold and had the lowest average sentiment starting a tweet thread the more positively associated topics tended to improve less in sentiment airlines may need to pay special attention to topics that have a low starting sentiment and a low sentiment improvement 4. successive sentiment more granular than overall sentiment instead of evaluating company success, evaluating what successful or helpful speech looks like sentiment analysis isn't perfect, makes for some interesting results! 4. successive sentiment: ""best"" results analysis not always perfect, but it's not hard to see where things were interpreted wrong correct strong positive change, but the cs tweet did not assist in any way might have interpreted ""wining"" as ""winning"". ""good luck"" also added to evaluating as positive sentiment good feedback! 4. successive sentiment: ""worst"" results lots of these were genuinely confusing customer response not related to cs response not sure how to interpret this as a human good interpretation! 4. successive sentiment: unigrams ""best"" tweets have sentiment change +3 ""good"" tweets have sentiment change greater than or equal to +2 4. successive sentiment: unigrams ""worst"" tweets have sentiment change -3 ""bad"" tweets have sentiment change less than or equal to -2 future improvements enhance topic detection by initializing topics with keywords: airlines: flight delay, bag claim, phone long, cancel refund, etc. technology: battery life, screen size, game start, etc. model the quality of employee response as a function of language used: q=f(l) naive bayes logit regression: tf best cs tweets tf worst cs tweets add bigrams as language features, here we analyzed unigrams only industry, topic, time as context"	['cs', 'jaws', 'project', 'progress', 'report', 'sentiment', 'analysis', 'customer', 'support', 'tweets', 'tasks', 'completed', 'replacing', 'emojis', 'descriptions', 'general', 'data', 'cleaning', 'remove', 'urls', 'unnecessary', 'line', 'endings', 'etc', 'running', 'topic', 'amazon', 'apple', 'uber', 'creating', 'parallel', 'database', 'links', 'thread', 'first', 'last', 'user', 'tweet', 'determine', 'change', 'due', 'interaction', 'service', 'team', 'summarize', 'average', 'initial', 'improvement', 'company', 'visualize', 'changes', 'time', 'one', 'pending', 'successive', 'generating', 'language', 'model', 'representing', 'successful', 'visualizingsummarizing', 'continue', 'airline', 'companies', 'trying', 'different', 'counts', 'incorporating', 'compares', 'others', 'industry', 'regarding', 'effectiveness', 'improving', 'facing', 'challenges', 'runtime', 'scripts', 'choosing', 'parts', 'analyses', 'interesting', 'present', 'finding', 'coherent', 'topics', 'programmatically', 'name', 'members', 'joan', 'ball', 'alex', 'ginglen', 'aging', 'walter', 'griebenow', 'wfg', 'captain', 'proposal', 'objective', 'hypotheses', 'test', 'function', 'tool', 'analyzes', 'generated', 'customers', 'call', 'center', 'personnel', 'performs', 'several', 'textual', 'determines', 'response', 'subsequent', 'interactions', 'topicscategories', 'exist', 'order', 'categorize', 'relating', 'complaint', 'bad', 'faulty', 'product', 'software', 'food', 'searches', 'word', 'unigrams', 'bigrams', 'partially', 'characterize', 'content', 'mines', 'possible', 'associations', 'uni', 'employee', 'estimate', 'success', 'uses', 'non', 'variables', 'control', 'variations', 'maybe', 'timeliness', 'exploration', 'find', 'correlations', 'inbound', 'outbound', 'would', 'step', 'predicting', 'answer', 'question', 'asks', 'benefit', 'idea', 'behind', 'used', 'may', 'lead', 'focused', 'ab', 'testing', 'turn', 'establish', 'best', 'practices', 'kind', 'tools', 'already', 'similar', 'assume', 'technology', 'savvy', 'discovered', 'approach', 'angry', 'dissatisfied', 'clear', 'guidelines', 'types', 'probably', 'smaller', 'resources', 'perform', 'type', 'rely', 'common', 'sense', 'experience', 'employees', 'people', 'care', 'difference', 'know', 'yet', 'path', 'could', 'much', 'faster', 'discovering', 'patterns', 'also', 'help', 'flatten', 'learning', 'curve', 'new', 'informing', 'empirical', 'going', 'evaluate', 'work', 'initially', 'observing', 'produces', 'accurate', 'results', 'analyzing', 'sentiments', 'small', 'amount', 'larger', 'scale', 'large', 'dataset', 'done', 'compare', 'output', 'analyzed', 'input', 'better', 'understand', 'course', 'covered', 'display', 'techniquesalgorithms', 'use', 'develop', 'fine', 'mention', 'vague', 'apply', 'mining', 'techniques', 'like', 'parsing', 'text', 'useless', 'words', 'wrangling', 'put', 'together', 'related', 'regression', 'intend', 'development', 'python', 'description', 'existing', 'group', 'identified', 'suitable', 'kaggle', 'accessed', 'site', 'httpswwwkagglecomthoughtvectorcustomersupportontwitter', 'corpus', 'million', 'replies', 'big', 'brands', 'delta', 'tmobile', 'organized', 'row', 'per', 'fields', 'include', 'previous', 'next', 'applicable', 'demonstrate', 'usefulness', 'run', 'using', 'jupyter', 'notebook', 'ta', 'graphs', 'tables', 'show', 'uncovered', 'relationships', 'hopefully', 'statistical', 'significance', 'rough', 'timeline', 'expect', 'finish', 'hours', 'person', 'association', 'presentation', 'made', 'optional', 'prediction', 'tbd', 'httpsyoutubewccymlzrou', 'goals', 'note', 'intention', 'create', 'library', 'instead', 'deep', 'dive', 'set', 'findings', 'usage', 'testable', 'code', 'playground', 'limited', 'functionality', 'generate', 'take', 'days', 'discussed', 'analyze', 'includes', 'overall', 'stratified', 'well', 'top', 'stack', 'short', 'complaints', 'broad', 'within', 'scope', 'found', 'k', 'tends', 'distinct', 'arent', 'given', 'human', 'readable', 'title', 'infer', 'might', 'based', 'unigram', 'sandwich', 'opposed', 'earlier', 'mentioned', 'comparing', 'responses', 'tending', 'formulaic', 'wasnt', 'unsuccessful', 'testingplayground', 'along', 'notebooks', 'excel', 'spreadsheet', 'goal', 'sheets', 'interact', 'outputsentiment', 'summary', 'monthxlsx', 'provided', 'files', 'meant', 'tester', 'since', 'lightweight', 'notebooksfromadjacencytodataframeipynb', 'notebookssentiment', 'monthipynb', 'notebookssentimentanalysisipynb', 'dependencies', 'pandas', 'datetime', 'stanza', 'corenlp', 'java', 'pytorch', 'needed', 'notebooksdeltatopicsdeterminationipynb', 'topicsipynb', 'gensim', 'nltk', 'collections', 'consecutive', 'developed', 'notebookscon_sent_testeripynb', 'monitor', 'satisfaction', 'benchmarks', 'asked', 'typical', 'portray', 'characteristics', 'process', 'followed', 'convert', 'emoticons', 'associated', 'threads', 'final', 'relate', 'effective', 'pre', 'processing', 'unneeded', 'twitter', 'handles', 'amp', 'emoji', 'replace', 'corresponding', 'english', 'grin', 'face', 'happy', 'weave', 'gather', 'sequence', 'build', 'conversation', 'translate', 'script', 'emojitranslatepy', 'smile', 'improved', 'tech', 'spotify', 'microsoft', 'lags', 'monitoring', 'timely', 'detect', 'airlines', 'always', 'space', 'something', 'happen', 'june', 'stopwords', 'incorporate', 'component', 'tfidf', 'latent', 'dirichlet', 'allocation', 'execute', 'list', 'aggregate', 'assigned', 'directly', 'match', 'single', 'identifiable', 'humans', 'tended', 'specific', 'areas', 'gates', 'requesting', 'hold', 'identify', 'granular', 'consistently', 'algorithm', 'need', 'intervention', 'categorization', 'providing', 'preclassified', 'higher', 'praising', 'starting', 'lowest', 'positively', 'improve', 'less', 'pay', 'special', 'attention', 'low', 'evaluating', 'helpful', 'speech', 'looks', 'isnt', 'perfect', 'makes', 'hard', 'see', 'things', 'interpreted', 'wrong', 'correct', 'strong', 'positive', 'assist', 'way', 'wining', 'winning', 'good', 'luck', 'added', 'feedback', 'worst', 'lots', 'genuinely', 'confusing', 'sure', 'interpret', 'interpretation', 'greater', 'equal', 'future', 'improvements', 'enhance', 'detection', 'initializing', 'keywords', 'flight', 'delay', 'bag', 'claim', 'phone', 'long', 'cancel', 'refund', 'battery', 'life', 'screen', 'size', 'game', 'start', 'quality', 'qfl', 'naive', 'bayes', 'logit', 'tf', 'add', 'features', 'context']
https://github.com/anilkpalli/CourseProject	project: text classification competition progress: i was able to achieve an accuracy of 0.77 with my initial implementation which includes pre- trained language model along with pytorch neural network framework for fine-tuning the model to fit to the sarcastic dataset. however i forgot to set the seed values due to which i couldn't reproduce the results although the output predictions were saved. with a specific seed set, i am able to reproduce the output predictions with accuracy ~0.765, almost close to my max. i have used google-colab free version for training the model so it comes with its own limitations. i am kind of struck on achieving maximum accuracy of 0.77 (currently (as on 25- nov) best on the leaderboard) on the hidden dataset, although the models performance is good enough (~0.86) on the hold-out validation set created from the overall training dataset. i will try to use few more derived heuristic variables along with pre-trained models to see if that helps in improving the performance a bit more. remaining tasks:  need to do a thorough documentation of the code  create tutorial presentation as part of project deliverables challenges/issues:  limited gpu memory is allocated in google-colab free version. layering the pre-trained models with any more slightly complex or deep neural layers is resulting in out of memory issues. had to settle with shallow layers.  struck within a performance range of 0.7 to 0.77 with the approach listed above. need to come up with a different approach to improve the performance while working with limited memory name: anil kumar palli net id: anilkp2 email: anilkp2@illinois.edu project topic: text classification competition programming language: python prior experience: most of my real-time work experience has been on classification problems but never got to work with text classification. this would be a great opportunity and learning experience while researching and participating in the competition. in this process i would to explore more on the neural network classifiers based on convolution and recurrent neural networks preferably using keras framework. although my main interest lies in exploring the latest and leading language models like bert, open ai's gpt etc... that are being discussed a lot in the nlp community recently. objective: the objective of this task is to detect sarcasm in tweets. datasets: train: 5000 records (columns: response, context, and label) test: 1000 records (columns: response, context) tools used: google colab notebook (free version) language: python libraries: torch, sklearn, transformers (ver=3.0.0), numpy, pandas, json, time approach: roberta (developed as an extension of bert) pre-trained model is used as the starting point. further the model is fine-tuned using sarcasm train dataset and the final optimal model is used for predicting the labels on sarcasm test dataset. the code is split into 6 sections. in order to get the final predictions the code needs to be just executed in sequence as described below. section: 1 - read input data the train and test json files are stored in google drive and are directly imported into google colab by providing appropriate credentials. refer to this short tutorial for importing data into colab section: 2 - preprocess data the input data (train) consists of 3 columns: response, context and label. in this step the response and context are combined into one single sentence in the order of last to first conversation sequence. further analysis is done using this single sentence approach which captures both response and context as one complete conversation. note: * tried out using response alone without context and it didn't perform better than using response and context together * tried out data cleaning steps like removing stop words, special characters, urls etc.. but they didn't prove to be any useful in improving the accuracy while using this approach so removed those steps from final code section: 3 - prepare data for modeling split the data into training and validation: 80% of the data from train set is used for training the model and 20% of train dataset is hold-out for validation purpose. tokenize and encode sequences of both training and validation sets: the conversations are of varying lengths and therefore have to be truncated and padded to equal lengths. based on the distribution of lengths, max length is selected as 200 since most of the conversations are covered within this range. any higher number could possibly cause model to train slower or run out of memory due to colab limitations in its free version create train and validation tensor datasets: tensor datasets are created to work efficiently with torch framework while building the model section: 4 - define model build functions define functions to initialize the pre-trained roberta-base model and fine-tune the parameters as needed to fit the data in hand. in-line documentation of these functions is available in the code. note: * for the per-trained model, tried out bert-base-uncased, bert-large-uncased, roberta-base, roberta-large. among these the large variants ran out of memory quickly and among the base variants roberta-base performed better, so retained it in the final submission * make sure to set appropriate seed values to reproduce the results section: 5 - build the model define model parameters: includes defining optimizer, loss functions, number of epochs and batch size. used adam optimizer and a suitable learning rate to tune roberta-base for 10 epochs. negative log-likelihood loss (alternatively cross-entropy loss) is used as the loss function. run the model and store the best model: the model is iterated for each epoch while optimizing the parameters. during training, the model parameters are evaluated against the validation set. saved the model each time the validation accuracy increases so that the model with the highest validation accuracy is identified and stored. the train and validation metrics (loss and accuracy) are captured and stored for all the epochs. section: 6 - test predictions load the best model - load the model having the highest validation accuracy that is stored in prior step for predicting the test set prepare and manipulate test data - the test set should undergo same data preprocessing and preparation steps as the training which includes: combining response and context into one sentence, tokenize and encode test conversations split the test dataset into 2 parts to overcome limited space issue in colab - there are 1800 records in test set. due to the space limitations in colab where majority was already utilized for loading and tuning pre-trained roberta, the test set was split into 2 sets of 1000 and 800 records respectively. get the predictions for the 2 test sets and combine into one final dataframe - the test sets are scored using the best model and the predictions are combined into one single dataframe and then to csv to submit the result in appropriate format	['project', 'text', 'classification', 'competition', 'progress', 'able', 'achieve', 'accuracy', 'initial', 'implementation', 'includes', 'pre', 'trained', 'language', 'model', 'along', 'pytorch', 'neural', 'network', 'framework', 'finetuning', 'fit', 'sarcastic', 'dataset', 'however', 'forgot', 'set', 'seed', 'values', 'due', 'couldnt', 'reproduce', 'results', 'although', 'output', 'predictions', 'saved', 'specific', 'almost', 'close', 'max', 'used', 'googlecolab', 'free', 'version', 'training', 'comes', 'limitations', 'kind', 'struck', 'achieving', 'maximum', 'currently', 'nov', 'best', 'leaderboard', 'hidden', 'models', 'performance', 'good', 'enough', 'holdout', 'validation', 'created', 'overall', 'try', 'use', 'derived', 'heuristic', 'variables', 'pretrained', 'see', 'helps', 'improving', 'bit', 'remaining', 'tasks', 'need', 'thorough', 'documentation', 'code', 'create', 'tutorial', 'presentation', 'part', 'deliverables', 'challengesissues', 'limited', 'gpu', 'memory', 'allocated', 'layering', 'slightly', 'complex', 'deep', 'layers', 'resulting', 'issues', 'settle', 'shallow', 'within', 'range', 'approach', 'listed', 'come', 'different', 'improve', 'working', 'name', 'anil', 'kumar', 'palli', 'net', 'id', 'anilkp', 'email', 'anilkpillinoisedu', 'topic', 'programming', 'python', 'prior', 'experience', 'realtime', 'work', 'problems', 'never', 'got', 'would', 'great', 'opportunity', 'learning', 'researching', 'participating', 'process', 'explore', 'classifiers', 'based', 'convolution', 'recurrent', 'networks', 'preferably', 'using', 'keras', 'main', 'interest', 'lies', 'exploring', 'latest', 'leading', 'like', 'bert', 'open', 'ais', 'gpt', 'etc', 'discussed', 'lot', 'nlp', 'community', 'recently', 'objective', 'task', 'detect', 'sarcasm', 'tweets', 'datasets', 'train', 'records', 'columns', 'response', 'context', 'label', 'test', 'tools', 'google', 'colab', 'notebook', 'libraries', 'torch', 'sklearn', 'transformers', 'ver', 'numpy', 'pandas', 'json', 'time', 'roberta', 'developed', 'extension', 'starting', 'point', 'finetuned', 'final', 'optimal', 'predicting', 'labels', 'split', 'sections', 'order', 'get', 'needs', 'executed', 'sequence', 'described', 'section', 'read', 'input', 'data', 'files', 'stored', 'drive', 'directly', 'imported', 'providing', 'appropriate', 'credentials', 'refer', 'short', 'importing', 'preprocess', 'consists', 'step', 'combined', 'one', 'single', 'sentence', 'last', 'first', 'conversation', 'analysis', 'done', 'captures', 'complete', 'note', 'tried', 'alone', 'without', 'didnt', 'perform', 'better', 'together', 'cleaning', 'steps', 'removing', 'stop', 'words', 'special', 'characters', 'urls', 'prove', 'useful', 'removed', 'prepare', 'modeling', 'purpose', 'tokenize', 'encode', 'sequences', 'sets', 'conversations', 'varying', 'lengths', 'therefore', 'truncated', 'padded', 'equal', 'distribution', 'length', 'selected', 'since', 'covered', 'higher', 'number', 'could', 'possibly', 'cause', 'slower', 'run', 'tensor', 'efficiently', 'building', 'define', 'build', 'functions', 'initialize', 'robertabase', 'finetune', 'parameters', 'needed', 'hand', 'inline', 'available', 'pertrained', 'bertbaseuncased', 'bertlargeuncased', 'robertalarge', 'among', 'large', 'variants', 'ran', 'quickly', 'base', 'performed', 'retained', 'submission', 'make', 'sure', 'defining', 'optimizer', 'loss', 'epochs', 'batch', 'size', 'adam', 'suitable', 'rate', 'tune', 'negative', 'loglikelihood', 'alternatively', 'crossentropy', 'function', 'store', 'iterated', 'epoch', 'optimizing', 'evaluated', 'increases', 'highest', 'identified', 'metrics', 'captured', 'load', 'manipulate', 'undergo', 'preprocessing', 'preparation', 'combining', 'parts', 'overcome', 'space', 'issue', 'majority', 'already', 'utilized', 'loading', 'tuning', 'respectively', 'combine', 'dataframe', 'scored', 'csv', 'submit', 'result', 'format']
https://github.com/antonioalfonso/CourseProject	"cs 410 - text information systems antonio gomez lopez progress report: project: text classification competition (sarcasm on twitter) 1) which tasks have been completed? so far, as part of the project i have completed the following tasks: 1. take training data into pandas (python) 2. processing of the data which includes: a. removal of @user references b. removal of hmtl references c. removal of hashtag symbols d. removal of links e. removal of punctuation f. removal of stopwords g. removal / substitution of emojis by text (testing these two scenarios). h. removal of other special symbols. 3. i have created a classifier using neural networks, specifically using lstm with an embeddings layer (activation function being sigmoid, which i find appropriate for a classifier). 4. i have tested three approaches / packages: a. word2vec b. glove c. fasttext so far, i have gotten my best results (69.5% f1 score) with fast text under specific conditions (see below). i was expecting much better results with glove but that turned out not to be the case. what am i currently working on? 5. with the nn as described above, i am currently testing different embedding dimensions (25, 50, 100, 200) for the embeddings layer. i have no conclusion yet, but it seems like i am getting better results with embedding dimension = 100. 6. currently testing two optimizers: a. started with adam at learning rate 0.01, results were somewhat overwhelming (f1 score ~55%) b. i found better results by using adamax (which is recommended for nn using embeddings), and at learning rate 0.001. because of the smaller learning rate, i need to run more epochs (hence is slower to learn, which is totally expected), but i managed to improve to my best result using that. c. i am using cross-binary entropy as loss function, which again i find pertinent for the problem i am trying to optimize for (classification issue). d. it seems, however, that i am facing a barrier as i cannot move past 70% with my current efforts (see below on what's pending and issues facing). cs 410 - text information systems antonio gomez lopez 2) which tasks are pending? i have a functioning nn model that is able to assess the tweets as required by the assignment. so in that sense i have something to show . having said that, and as mentioned before, i am not achieving the desired result (beating the baseline, currently at above 72.3% f1 score. things i still have pending to do: * further research for models that can take into advantage context information (which i am currently not using), such as replies to tweets, which could shed more light on the intention of the original tweet that is subject to sentiment analysis. * check other potential approaches to the problem that do not include training a neural network (although i am not sure they could be better). 3) are you facing any challenges? yes. i have a working model, but i am not hitting high numbers to beat the baseline, and i would like to do so. going further i would like to have a high f1 score (likely by having a high precision score, but open to less accuracy for a higher recall, if that gets me above the f1 score). with my current approach i am unable go above 69.5% f1 score (with various numbers in precision ranging from 55% to 63%). my other challenges are: * i am currently not using the context information for tweets given in the training and tests set, and i think i am missing out on important information to improve my algorithms / models. i am not using this information mostly because i do not know how to embed or incorporate that information into the nn to improve the predictions (or how to use it at all even if it were not a nn). * i am currently converting emojis to text, but i am not sure if this is making any difference (versus, say leaving the emojis untouched and let the nn process them as they are represented). * i am not sure i am using the best optimizer and loss function (i think i am, but i don't know what else is out there). so, if you have any guidance, to a paper, specific model in kaggle, whatever that can be of use for me, please feel free to share that information with me as part of the feedback. i am working in this project alone. cs410: project proposal antonio gomez lopez 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. i am doing this project individually. so, i am the captain . full name: antonio gomez lopez, netid: aag8 2. which competition do you plan to join? text classification (sarcasm detection on twitter). 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods: i am prepared to learn state-of-the-art neural network classifiers. i am interested in this challenge because i can see the difficulty for a non-human to discern from the literal to intended meaning of the words. prior experience: i have taken two machine learning courses (one in ut austin, the other one currently in uiuc), in which i have implemented versions of the following (as part of projects): a. perceptron algorithm b. logistic regression (which is not quite useful for the classification issue but still). c. support vector machine d. naive bayes i also studied the theory for k-nearest neighbor, but never implemented it. in additionto this, i took a reinforcement learning class at ut austin, and in it, as part of our practical experience, we had the choice to work with either tensorflow or pytorch in order to implement policy evaluation using neural networks, as well as the reinforce algorithm. i implemented both successfully using tensorflow (which is the one framework with which i have experience). 4. which programming language do you plan to use? python text classification competition: twitter sarcasm detection submission by antonio gomez lopez this model was built using neural networks, as a consequence the training time can vary significantly depending on whether you train in a local environment (e.g. your computer), or gpus (e.g. google colab) important: you can find the tutorial here (i show it running colab and beat the baseline live :-)) https://www.youtube.com/watch?v=p1t-eklidua if you want to run it using colab, there is a read-only version of the notebook available on the link below: https://colab.research.google.com/drive/1kejxnhx-thkjg38bjtw9ol2qh67lgxag?usp=sharing otherwise, use the classificationcompetition_bert_antoniogomez.ipynb and run it locally. i recommend using jupyter, but i assume any good python editor would do the work. check 2) to make sure you have both train.jsonl and test.jsonl files in the right directory. 1) what's included in this submission? 1.1) this file includes details on what needs to be setup. 1.2) the reference to google colab (above) as well as the .ipynb file contain the commented source code. 1.3) answer.txt contains the test set predictions (as required in https://docs.google.com/document/d/13any7fhyovh_2jl3gvrvvzxscdh5ol5l5xs2nlp4dn4/edit) 2) what is required to run this model? in both cases you need to have the files train.jsonl, and test.jsonl ready to be loaded. 2.1) if you want to use the google colab instance, you should: 2.1.1) mount your google drive (assumes you have a gmail or otherwise google-compatible account) 2.1.2) upload the train.jsonl and test.jsonl at the root of your drive as you run the code, you might get the following message: ""warning: this notebook was not authored by google. this notebook was authored by aalfonzo@gmail.com. it may request access to your data stored with google, or read data and credentials from other sessions. please review the source code before executing this notebook. please contact the creator of this notebook at aalfonzo@gmail.com with any additional questions."" 2.2)if you want to use the local run instance, you should: 2.2.1) from the folder you are running the .ipynb file, you should have a /data folder, in which you will place both the train.jsonl and the test.jsonl files. 3) about the workbooks: 3.1) both workbooks (ipynb) have cell-by-cell runs with my comments on the code explaning either what the code does or why did i choose specific parameter values. -remember that the local run instance will train much more slowly (it can take you many hours to get to the trained model). for instance, in my laptop it took roughly 35 minutes per epoch, so 35x3=105 minutes, a little bit less than two hours to have the model trained. 4) please note that: 4.1) the final design, fine-tuning and training of the network, including number of nodes, size of input, batch-size, dropout rates, which optimizer and learning rate to use were all of my authorship after several tests being performed. 4.2) having said that, when it comes to the neural network solution i am presenting, i got inspired by two other projects i found in kaggle, and that i am referencing here: [a] sarcasm detection using bert (92% accuracy), by raghav khemka. https://www.kaggle.com/raghavkhemka/sarcasm-detection-using-bert-92-accuracy, [b] sarcasm detection with bert (val accuracy 98.5%), by carmen sandiego (clearly a pseudonym). https://www.kaggle.com/carmensandiego/sarcasm-detection-with-bert-val-accuracy-98-5 [c] https://arxiv.org/pdf/1810.04805.pdf to get information about best optimizers and learning rates to use for bert 4.3) how did i arrive to the succesful model? background: important to note, in the course of the project i have worked with different pre-defined packages (and data transformations), that i am not including here for the sake of focus on what's really the working solution. having said that, however, the exploring of different alternatives was what had made my views evolve (looking for higher f1 scores). below is a summary of what i worked with and the average f1 scores i got in each case. technology f1 score - metapy (no features, naive bayes) ~57% - embeddings and glove ~66% - embeddings and doc2vec ~68% - embeddings and fasttext (by facebook) ~70% - embeddings and bert ~73.1% note that the setup of each model was dependent on the pre-defined package i was using. explanation of the model: it is based on a neural network with 5 layers (including the input and output layers, and including one layer with embeddings provided by bert). i included a chance to dropout on the basis of potential overfitting (having a too big network for the task at hand). in addition, optimizer, learning rate, batch size, and loss functions were all parameters up for fine-tuning. there is some pre-processing of the data: mostly removed punctuation, special symbols and stopwords. having said that, i obtained best results when i did not removed @user, references or emoticons. some encoding / padding was included to keep consistent the size of the input for tweets either in training or testing. how did the training happen? for all the methods used (except metapy - naive bayes), all of my training and initial fine-tuning happened first with the optimizer, learning rate, and ""size"" of embeddings (this last one was not the case for bert). i also experimented with pre-processing of data, but as i mentioned earlier, i seem to obtained better results when i did not remove as many references that i originally thought would be mostly noise (e.g. @user, ). in the specific case of bert i performed the following fine-tuning (not necessarily in this order): optimizer: started with adam, then moved to adamweightdecay, and finally got best results with adamax. as per the documentation in tensorflow, adamax is recommended when the model includes an embeddings layer. learning rate and number of epochs: i used 2e-5 as direct recommendation of the bert paper: https://arxiv.org/pdf/1810.04805.pdf number of epochs is also recommended in this paper. i experimented however with large numbers (large as 10), but it was very clear that i was overfitting the model with the training data. i found that a number of epochs between 2-4 would work best, but needed additional fine-tuning. dropout rate: from the referenced model, they use a dropout rate of 20%. i was still overfitting in many instances after the third epoch, so ended up increasing the droupout to 40%, and with that i could mitigate the problem of overfitting the model with the training model. pre-processing data: i coded different functions to remove different parts of the tweets that i thought would constitute noise, but ended commenting most of them and leaving the functions that would remove just the stopwords and special punctuation symbols. batch-size: i experimented with different batch sizes making sure that i was maximizing the maximum input from bert (512 bytes). i ended up with an input of 64 and batch size of 8, but i equally beat the baseline with input size of 128 and batch size of 4. 5) other important details about this implementation: throughout the workbook you will find comments that seek to justify my choices many of the parameters and fine-tuning completed. the most important things to know are: 5.1) the model worked best when running only for 3 epochs, given my selection of optimizer and learning rate. 5.2) i had to dropout roughly 40% of the nodes (according to literature i consulted it is considered normal to do dropouts between 20% and 50%. this was the case because i was getting overfitting on the training data already in the third epoch (which indicates that maybe my network was too big to begin with...). 5.3) i tried multiple times to provide a saved model so that you could run the network the same way i did, however for unknown reasons, even though i was able to succesfully save my models, i was not able to load them back again. 5.4) as a consequence of 5.3), it is likely that a run of the model as it is might not render results that beat the baseline, (because is dependent on the training), so take that into consideration as you do the peer-review or assessment. 4.5) having said that, i included my best run as part of the project submission (also as it was required as per homework guidelines (see https://docs.google.com/document/d/13any7fhyovh_2jl3gvrvvzxscdh5ol5l5xs2nlp4dn4/edit)"	['cs', 'text', 'information', 'systems', 'antonio', 'gomez', 'lopez', 'progress', 'report', 'project', 'classification', 'competition', 'sarcasm', 'twitter', 'tasks', 'completed', 'far', 'part', 'following', 'take', 'training', 'data', 'pandas', 'python', 'processing', 'includes', 'removal', 'user', 'references', 'b', 'hmtl', 'c', 'hashtag', 'symbols', 'links', 'e', 'punctuation', 'f', 'stopwords', 'g', 'substitution', 'emojis', 'testing', 'two', 'scenarios', 'h', 'special', 'created', 'classifier', 'using', 'neural', 'networks', 'specifically', 'lstm', 'embeddings', 'layer', 'activation', 'function', 'sigmoid', 'find', 'appropriate', 'tested', 'three', 'approaches', 'packages', 'wordvec', 'glove', 'fasttext', 'gotten', 'best', 'results', 'score', 'fast', 'specific', 'conditions', 'see', 'expecting', 'much', 'better', 'turned', 'case', 'currently', 'working', 'nn', 'described', 'different', 'embedding', 'dimensions', 'conclusion', 'yet', 'seems', 'like', 'getting', 'dimension', 'optimizers', 'started', 'adam', 'learning', 'rate', 'somewhat', 'overwhelming', 'found', 'adamax', 'recommended', 'smaller', 'need', 'run', 'epochs', 'hence', 'slower', 'learn', 'totally', 'expected', 'managed', 'improve', 'result', 'crossbinary', 'entropy', 'loss', 'pertinent', 'problem', 'trying', 'optimize', 'issue', 'however', 'facing', 'barrier', 'cannot', 'move', 'past', 'current', 'efforts', 'whats', 'pending', 'issues', 'functioning', 'model', 'able', 'assess', 'tweets', 'required', 'assignment', 'sense', 'something', 'show', 'said', 'mentioned', 'achieving', 'desired', 'beating', 'baseline', 'things', 'still', 'research', 'models', 'advantage', 'context', 'replies', 'could', 'shed', 'light', 'intention', 'original', 'tweet', 'subject', 'sentiment', 'analysis', 'check', 'potential', 'include', 'network', 'although', 'sure', 'challenges', 'yes', 'hitting', 'high', 'numbers', 'beat', 'would', 'going', 'likely', 'precision', 'open', 'less', 'accuracy', 'higher', 'recall', 'gets', 'approach', 'unable', 'go', 'various', 'ranging', 'given', 'tests', 'set', 'think', 'missing', 'important', 'algorithms', 'mostly', 'know', 'embed', 'incorporate', 'predictions', 'use', 'even', 'converting', 'making', 'difference', 'versus', 'say', 'leaving', 'untouched', 'let', 'process', 'represented', 'optimizer', 'dont', 'else', 'guidance', 'paper', 'kaggle', 'whatever', 'please', 'feel', 'free', 'share', 'feedback', 'alone', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'individually', 'full', 'name', 'netid', 'aag', 'plan', 'join', 'detection', 'choose', 'ir', 'prepared', 'stateoftheart', 'methods', 'query', 'expansion', 'rank', 'fusion', 'etc', 'concrete', 'tools', 'may', 'heard', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'interested', 'challenge', 'difficulty', 'nonhuman', 'discern', 'literal', 'intended', 'meaning', 'words', 'taken', 'machine', 'courses', 'one', 'ut', 'austin', 'uiuc', 'implemented', 'versions', 'projects', 'perceptron', 'algorithm', 'logistic', 'regression', 'quite', 'useful', 'support', 'vector', 'naive', 'bayes', 'also', 'studied', 'theory', 'knearest', 'neighbor', 'never', 'additionto', 'took', 'reinforcement', 'class', 'practical', 'choice', 'work', 'either', 'tensorflow', 'pytorch', 'order', 'implement', 'policy', 'evaluation', 'well', 'reinforce', 'successfully', 'framework', 'programming', 'language', 'submission', 'built', 'consequence', 'time', 'vary', 'significantly', 'depending', 'whether', 'train', 'local', 'environment', 'eg', 'computer', 'gpus', 'google', 'colab', 'tutorial', 'running', 'live', 'httpswwwyoutubecomwatchvpteklidua', 'want', 'readonly', 'version', 'notebook', 'available', 'link', 'httpscolabresearchgooglecomdrivekejxnhxthkjgbjtwolqhlgxaguspsharing', 'otherwise', 'classificationcompetition_bert_antoniogomezipynb', 'locally', 'recommend', 'jupyter', 'assume', 'good', 'editor', 'make', 'trainjsonl', 'testjsonl', 'files', 'right', 'directory', 'included', 'file', 'details', 'needs', 'setup', 'reference', 'ipynb', 'contain', 'commented', 'source', 'code', 'answertxt', 'contains', 'test', 'httpsdocsgooglecomdocumentdanyfhyovh_jlgvrvvzxscdhollxsnlpdnedit', 'cases', 'ready', 'loaded', 'instance', 'mount', 'drive', 'assumes', 'gmail', 'googlecompatible', 'account', 'upload', 'root', 'might', 'get', 'message', 'warning', 'authored', 'aalfonzogmailcom', 'request', 'access', 'stored', 'read', 'credentials', 'sessions', 'review', 'executing', 'contact', 'creator', 'additional', 'questions', 'folder', 'place', 'workbooks', 'cellbycell', 'runs', 'comments', 'explaning', 'parameter', 'values', 'remember', 'slowly', 'many', 'hours', 'trained', 'laptop', 'roughly', 'minutes', 'per', 'epoch', 'x', 'little', 'bit', 'note', 'final', 'design', 'finetuning', 'including', 'number', 'nodes', 'size', 'input', 'batchsize', 'dropout', 'rates', 'authorship', 'several', 'performed', 'comes', 'solution', 'presenting', 'got', 'inspired', 'referencing', 'bert', 'raghav', 'khemka', 'httpswwwkagglecomraghavkhemkasarcasmdetectionusingbertaccuracy', 'val', 'carmen', 'sandiego', 'clearly', 'pseudonym', 'httpswwwkagglecomcarmensandiegosarcasmdetectionwithbertvalaccuracy', 'httpsarxivorgpdfpdf', 'arrive', 'succesful', 'background', 'course', 'worked', 'predefined', 'transformations', 'sake', 'focus', 'really', 'exploring', 'alternatives', 'made', 'views', 'evolve', 'looking', 'scores', 'summary', 'average', 'technology', 'metapy', 'features', 'docvec', 'facebook', 'dependent', 'package', 'explanation', 'based', 'layers', 'output', 'provided', 'chance', 'basis', 'overfitting', 'big', 'task', 'hand', 'addition', 'batch', 'functions', 'parameters', 'preprocessing', 'removed', 'obtained', 'emoticons', 'encoding', 'padding', 'keep', 'consistent', 'happen', 'used', 'except', 'initial', 'happened', 'first', 'last', 'experimented', 'earlier', 'seem', 'remove', 'originally', 'thought', 'noise', 'necessarily', 'moved', 'adamweightdecay', 'finally', 'documentation', 'direct', 'recommendation', 'large', 'clear', 'needed', 'referenced', 'instances', 'third', 'ended', 'increasing', 'droupout', 'mitigate', 'coded', 'parts', 'constitute', 'commenting', 'sizes', 'maximizing', 'maximum', 'bytes', 'equally', 'implementation', 'throughout', 'workbook', 'seek', 'justify', 'choices', 'selection', 'according', 'literature', 'consulted', 'considered', 'normal', 'dropouts', 'already', 'indicates', 'maybe', 'begin', 'tried', 'multiple', 'times', 'provide', 'saved', 'way', 'unknown', 'reasons', 'though', 'succesfully', 'save', 'load', 'back', 'render', 'consideration', 'peerreview', 'assessment', 'homework', 'guidelines']
https://github.com/armhoeft/CS410Fall2020-CourseProject	"courseproject enhance meta and metapy usability: python 3.9 for required project submissions, see project-artifacts. final submission details the first body of interesting code lies in an adjacent repo (https://github.com/armhoeft/metapy-container) which i built strictly for this project to separate my deliverables from an artifact that can live on beyond the scope of this course. the second body of interesting code lies in the sample-assignment directory, where i've provided an example of how to use this container for course assignments. the final (and perhaps most important) is artifact is a functioning docker container (armhoeft/metapy-container) that can be found here (https://hub.docker.com/r/armhoeft/metapy-container) or by executing the following command. this container contains a python 3.9 runtime environment and a compiled version of meta and metapy. {bash} docker pull armhoeft/metapy-container:0.2.13 recommendations for a reviewer watch the video: https://drive.google.com/file/d/19wavewpicqya1xftohihv-6bqbbniu69/view?usp=sharing look around this repo and: https://github.com/armhoeft/metapy-container. read: https://github.com/armhoeft/metapy-container/blob/main/readme.md read: https://github.com/armhoeft/cs410fall2020-courseproject/blob/main/sample-assignment/readme.md download: https://hub.docker.com/r/armhoeft/metapy-container have fun and be generous in your grading/feedback! closing thoughts after many hours of fighting with meta and metapy, i realized that literally building the project on python 3.9 wasn't especially remarkable. you struggle through a series of errors (most of which were the product of dead links or the repository falling into relative disrepair as the software world keeps chugging along), search the web for ways to resolve them, and try building again until you hit the end. this realization caused me to revector my efforts after succeeding in my initial task and incorporate some of my ""stretch goals"": namely, building a docker container and making this class-ready. in my view, the biggest outcomes of this assignment are: a better working knowledge of how meta and metapy are constructed. a documented process for using docker to make standardized build and execution environments for all students (which should help with those who have difficulty getting environment consistency between their local setup and the autograder). a published docker container on dockerhub! a path to replacing the typical autograders with kubernetes (since k8s likes containers)! i don't pretend to know how our autograders work, but i do know from personal and professional experience that elastically scaling kubernetes pods are the future and could lead to substantial cost savings if not already implemented by the school."	['courseproject', 'enhance', 'meta', 'metapy', 'usability', 'python', 'required', 'project', 'submissions', 'see', 'projectartifacts', 'final', 'submission', 'details', 'first', 'body', 'interesting', 'code', 'lies', 'adjacent', 'repo', 'httpsgithubcomarmhoeftmetapycontainer', 'built', 'strictly', 'separate', 'deliverables', 'artifact', 'live', 'beyond', 'scope', 'course', 'second', 'sampleassignment', 'directory', 'ive', 'provided', 'example', 'use', 'container', 'assignments', 'perhaps', 'important', 'functioning', 'docker', 'armhoeftmetapycontainer', 'found', 'httpshubdockercomrarmhoeftmetapycontainer', 'executing', 'following', 'command', 'contains', 'runtime', 'environment', 'compiled', 'version', 'bash', 'pull', 'recommendations', 'reviewer', 'watch', 'video', 'httpsdrivegooglecomfiledwavewpicqyaxftohihvbqbbniuviewuspsharing', 'look', 'around', 'read', 'httpsgithubcomarmhoeftmetapycontainerblobmainreadmemd', 'httpsgithubcomarmhoeftcsfallcourseprojectblobmainsampleassignmentreadmemd', 'download', 'fun', 'generous', 'gradingfeedback', 'closing', 'thoughts', 'many', 'hours', 'fighting', 'realized', 'literally', 'building', 'wasnt', 'especially', 'remarkable', 'struggle', 'series', 'errors', 'product', 'dead', 'links', 'repository', 'falling', 'relative', 'disrepair', 'software', 'world', 'keeps', 'chugging', 'along', 'search', 'web', 'ways', 'resolve', 'try', 'hit', 'end', 'realization', 'caused', 'revector', 'efforts', 'succeeding', 'initial', 'task', 'incorporate', 'stretch', 'goals', 'namely', 'making', 'classready', 'view', 'biggest', 'outcomes', 'assignment', 'better', 'working', 'knowledge', 'constructed', 'documented', 'process', 'using', 'make', 'standardized', 'build', 'execution', 'environments', 'students', 'help', 'difficulty', 'getting', 'consistency', 'local', 'setup', 'autograder', 'published', 'dockerhub', 'path', 'replacing', 'typical', 'autograders', 'kubernetes', 'since', 'ks', 'likes', 'containers', 'dont', 'pretend', 'know', 'work', 'personal', 'professional', 'experience', 'elastically', 'scaling', 'pods', 'future', 'could', 'lead', 'substantial', 'cost', 'savings', 'already', 'implemented', 'school']
https://github.com/ashpradhan01123/CourseProject	"cs-410 text information systems final project text miners ashish kumar pradhan (apradh6@illinois.edu) kirti magadum (magadum2@illinois.edu) bhuvaneswari periasamy (bp14@illinois.edu) improving educationalweb system 1. introduction the educationalweb system is the term given to the web of slides (wos) created at the university of illinois at urbana champaign by sahiti labhishetty, bhavya, kevin pei, assma boughoula and prof. chengxiang zhai. it aimed to link all the lecture slides of a course which would be easily navigable and searchable. not only that, with machine learning, it is also able to provide a list of related slides which has some similarity to the current slide displayed. it is created as a python flask web app with an interface which is similar to opening up a powerpoint presentation. navigation can be primarily done by clicking through the previous and next buttons in the interface as well as from the list of similar slides provided by the system. a separate system allows the search ability through which the navigation can be done as well. this project consisted of adding a few features which would enhance the system so that it can be used in a more widespread manner. keeping true to the vision which was to create a system which would interact with each of the slides in a way that the current internet interacts, the modifications are aimed that doing just that. 2. background the existing code consists of two major components: a. the related slides code which computes the similarity between slides using deep learning https://github.com/bhaavya/mooc-web-of-slides b. the structural part of the application which consists of the rest of the python flask web app. https://github.com/cs410fall2020/educationalweb initially, we thought of incorporating both parts of the code into one and then including the modifications but due to the computationally heavy part of the deep learning component, we decided to exclude this part completely and focus on adding the new components to the web app. 3. code explanation before incorporating the modifications, installing the existing code from the repository was necessary. we have detailed the following steps taken for installing the code in our windows machines. a. download the download the code from the github page ( https://github.com/cs410fall2020/educationalweb) to a folder educationalweb in your local machine b. elastic search elastic search was installed by downloading the zip file from the elastic search website. https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.10.1-windows- x86_64.zip. unzip the folder in a folder elasticsearch and then run the following code in the command prompt after changing the directory to that location. .\bin\elasticsearch.bat this will start the elastic search in your local machine. fig 1 fig 2 c. create index (need to be done only once) run the following script after navigating to the educationalweb folder in the command prompt python create_es_index.py fig 3 d. download tfidf_outputs.zip folder download it from the following link, unzip it and save it in educationalweb/static https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing e. download the lecture slides use the following link to download the lecture slides and then unzip it to educationalweb/pdf.js/static/slides/ https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing f. install gulp server follow the steps in this page ( https://gulpjs.com/docs/en/getting-started/quick-start/) to install gulp server g. run gulp server open a separate terminal window and navigate to educationalweb/pdf.js/build/generic/web and execute the following command to run gulp server gulp server fig 4 h. run the application in another terminal window, navigate to the educationalweb folder and run the following script to start the code. make sure that all the python libraries present in the code are installed before the script is run. python app.py i. launch the application the application should open in http://localhost:8096/ 4. modifications to the code our goal is to add additional courses to the existing code so that users can navigate between courses and utilize the features available to maximize the learning ability from those courses. in order to achieve that, we have made two additions to the code, namely: a. created a web crawler which would take as input the url of the webpage which contains all the lecture content and create a list of urls which contains the pdf links b. download the pdfs, and subsequently create a repository like the existing one for cs410, containing folders for each lecture pdfs which will contain single page pdfs split automatically by the code. c. these courses are then incorporated into the existing code, bringing in all the course slides into the educationalweb which can then be navigated like the existing cs410 course web crawler an automatic web crawler is essential to any web application which needs to add new content from the web. a web crawler essentially follows all the links from a starting page and then retrieves information from the pages as desired. our web crawler recursively follows all the links which are contained from a starting page. if it finds a dead end in any of the pages, i.e. there are no additional pages to scrape from that page, it will just go one step up and then continue the scraping of the pages from there on. the creation of the web crawler was done by using the very useful beautiful soup library which parses content from html pages using a tree structure. it is very useful in navigating, searching and modifying a parse tree of an html page, all very essential parts of web scraping. download the lecture content after the web crawler scrapes through all the urls containing lecture slides in each webpage, we need to download them and structure them in such a way so that it fits the educational web code. the existing code handles only single page pdfs which are then navigated and searched by the system. to achieve that for the newly added courses, these are the steps that were taken: 1. download the pdfs from the urls scraped by the web crawler. 2. scrape the lecture title from the webpage 3. create a folder structure like the existing 410 slides. there needs to be one folder for every lecture pdf 4. split the pdfs into single page pdfs and then add them to that lecture's folder. for our project, we have included 3 additional university of illinois courses whose lecture slides are publicly available. those are: 1. ece 313 (https://courses.engr.illinois.edu/ece313/sp2013/slides.html) 2. cs 425 (https://courses.engr.illinois.edu/cs425/fa2019/lectures.html) 3. cs 554 (https://solomonik.cs.illinois.edu/teaching/cs554/index.html) add the slides to the existing code after the slides have been created according to the configuration of the code, modifications had to be made to add them under the drop downs under the ""courses"" section. we specifically parsed texts from these webpages to add the details to that course section in the system. the details were present in various tags which needed to be extracted so that we get the relevant titles for the slides. running the modified code the code has been integrated in the existing system in such a way that it does not need any additional input from the user. changes were made inside the model.py and app.py scripts with the additional functions which were defined being referenced from within the existing functions, thus reducing the need for any user input specifically. to run the modified code, all that's required is to run the app.py function again which will start the web scraping from the webpages and then create the folder structures for each of the subject and then integrate them into the existing educationalweb system. fig 5 fig 6 fig 7 fig 8 5. limitations and scope for further work 1. due to an absence of a training dataset, a classification model could not be created to correctly classify a webpage as one which contains lecture slides. due to this we had to explicitly input the starting url for web scraping. creating that model required much more time than what could be allotted to this project. 2. the related slides section which uses deep learning to find out the similarity between the slides could not be incorporated. additional work needs to be done to integrate it into the existing code 3. documentation of the code and how to navigate between the scripts would have been helpful to understand the code in the initial stages and not spend a lot of time in that. 6. contribution of team members team member contribution ashish pradhan (captain) web crawler, documentation kirti magadum pdf splitting code, integration to the existing code bhuvaneswari periasamy modeling code, text parsing code 7. conclusion the educationalweb is a powerful tool which can assist the learners from learning in an optimized manner without spending a lot of time in searching and navigating through slides across different topics. there is tremendous potential in this application and the scope of incorporating a lot of features is immense. the modifications which we added to the existing code paves the way for additional work which would improve the system. as stated in the scope above, creating a classification model and adding it to our web scraper would make it largely automated and be able to scrape the pdf urls from anywhere in the web courseproject please install the educational web as mentioned below from the cs410 repository and then overwrite the two python scripts (app.py and model.py) from our project repository. the git push from the original repo was showing an error when we were trying to bring in the entire code. we have tested the code using python 3.6. please let us know if you need a demo or require any assistance installing the code in your local machine for testing. educationalweb installation steps the following instructions have been tested with python2.7 on linux and macos 1. download educationalweb code from https://github.com/cs410fall2020/educationalweb you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html create the index in elasticsearch by running python create_es_index.py from educationalweb/ download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under educationalweb/pdf.js/static/slides/ from educationalweb/pdf.js/build/generic/web , run the following command: gulp server please install the libraries mentioned in app.py before you run the code. in another terminal window, run python app.py from educationalweb/ the site should be available at http://localhost:8096/ text miners team project 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. team member netid ashish pradhan [captain] apradh6@illinois.edu kirti magadum magadum2@illinois.edu bhuvaneswari periasamy bp14@illinois.edu 2. what system have you chosen? which subtopic(s) under the system? we have chosen to enhance the educational web system and intend to add new features, focusing on the following subtopics: * scale up the current system add more slides and courses from multiple sources e.g. coursera, uiuc courses, etc. and run the existing algorithms on them. we intend to create an automatic crawler which could classify a webpage containing slides correctly and subsequently download them. * allow downloading slides in bulk: downloading the entire collection of slides for a particular course or interest. our goal is to primarily focus on creating a successful crawler and then aim for creating the ability to allow slides in bulk after that. 3. briefly describe the datasets, algorithms or techniques you plan to use dataset create a dataset of all the uiuc pages which has slides available for download and also some random pages which are ""negative"" examples. algorithms dirichlet prior, em algorithm, all algorithms currently in use. for classification, we intend to use all the standard available ones such as svm, clustering, logistic regression to achieve maximum accuracy. techniques automatic web crawler. all techniques currently in use. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? - scale up the current system we are adding an automatic web crawler. we will crawl data related to selected courses from the mentioned dataset. users should be able to select newly added courses and our updated code should be able to display relevant data to users. also upon selection of a newly added course, options related to course should get updated. # courses [newly added courses] # recently visited slides # lectures # search result. * allow downloading slides in bulk we will enhance the existing functionality from downloading a single slide into downloading multiple slides that fits under the same course/slide heading. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly we will aim to automate the crawling to feed slides directly into the system so that users will not have to create a zip file and then manually upload it into the system. for the second part, we will aim to provide the user two options: to download the slide for a particular lecture or the whole course (as a zip file). 6. which programming language do you plan to use? we will be writing our code predominantly in python but might implement javascript, css and html if needed. 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. * scale up the current system task hours ( hours * n team member) detailed understanding code for existing system 6 (2 * 3 ) user interface changes 3 (1 * 3 ) automatic web crawling (including creation of training dataset and a classification model) 33 (11* 3) deployment and testing 12 (4 * 3) bug fix 3 ( 1 * 3) performance test 3 (1 * 3) total 60 hours 8. allow downloading slides in bulk note: any remaining time from the above section will be utilized to complete this task. text miners team project: progress made thus far: scale up the current system: poc to read the pdf file(slides) from uiuc url and download it in the required format is complete. implemented the changes to show the newly added courses for users to select on test data. remaining tasks: creation of automatic web crawler by leveraging the poc that we completed now. implementing the code changes for search result and recently visited slides. unit testing and integration testing any challenges/issues being faced: determining the reference link on course era was not straight forward as the links contained sections which could not be parsed via code. we need the slides in single-page pdf as input to the educational web search program. also, it requires additional authentication, ultimately downloading the pdf from cloudfront.net. as we don't have access to cloudfront, we decided to refer slides from uiuc site as input data to our program."	['cs', 'text', 'information', 'systems', 'final', 'project', 'miners', 'ashish', 'kumar', 'pradhan', 'apradhillinoisedu', 'kirti', 'magadum', 'magadumillinoisedu', 'bhuvaneswari', 'periasamy', 'bpillinoisedu', 'improving', 'educationalweb', 'system', 'introduction', 'term', 'given', 'web', 'slides', 'wos', 'created', 'university', 'illinois', 'urbana', 'champaign', 'sahiti', 'labhishetty', 'bhavya', 'kevin', 'pei', 'assma', 'boughoula', 'prof', 'chengxiang', 'zhai', 'aimed', 'link', 'lecture', 'course', 'would', 'easily', 'navigable', 'searchable', 'machine', 'learning', 'also', 'able', 'provide', 'list', 'related', 'similarity', 'current', 'slide', 'displayed', 'python', 'flask', 'app', 'interface', 'similar', 'opening', 'powerpoint', 'presentation', 'navigation', 'primarily', 'done', 'clicking', 'previous', 'next', 'buttons', 'well', 'provided', 'separate', 'allows', 'search', 'ability', 'consisted', 'adding', 'features', 'enhance', 'used', 'widespread', 'manner', 'keeping', 'true', 'vision', 'create', 'interact', 'way', 'internet', 'interacts', 'modifications', 'background', 'existing', 'code', 'consists', 'two', 'major', 'components', 'computes', 'using', 'deep', 'httpsgithubcombhaavyamoocwebofslides', 'b', 'structural', 'part', 'application', 'rest', 'httpsgithubcomcsfalleducationalweb', 'initially', 'thought', 'incorporating', 'parts', 'one', 'including', 'due', 'computationally', 'heavy', 'component', 'decided', 'exclude', 'completely', 'focus', 'new', 'explanation', 'installing', 'repository', 'necessary', 'detailed', 'following', 'steps', 'taken', 'windows', 'machines', 'download', 'github', 'page', 'folder', 'local', 'elastic', 'installed', 'downloading', 'zip', 'file', 'website', 'httpsartifactselasticcodownloadselasticsearchelasticsearchwindows', 'x_zip', 'unzip', 'elasticsearch', 'run', 'command', 'prompt', 'changing', 'directory', 'location', 'binelasticsearchbat', 'start', 'fig', 'c', 'index', 'need', 'script', 'navigating', 'create_es_indexpy', 'tfidf_outputszip', 'save', 'educationalwebstatic', 'httpsdrivegooglecomfilediacqahnwkkxasbnfsclqrigdtfiwviewuspsharing', 'e', 'use', 'educationalwebpdfjsstaticslides', 'httpsdrivegooglecomfiledxiwosavooejsy_siiixpfaqsuyuuhviewuspsharing', 'f', 'install', 'gulp', 'server', 'follow', 'httpsgulpjscomdocsengettingstartedquickstart', 'g', 'open', 'terminal', 'window', 'navigate', 'educationalwebpdfjsbuildgenericweb', 'execute', 'h', 'another', 'make', 'sure', 'libraries', 'present', 'apppy', 'launch', 'httplocalhost', 'goal', 'add', 'additional', 'courses', 'users', 'utilize', 'available', 'maximize', 'order', 'achieve', 'made', 'additions', 'namely', 'crawler', 'take', 'input', 'url', 'webpage', 'contains', 'content', 'urls', 'pdf', 'links', 'pdfs', 'subsequently', 'like', 'containing', 'folders', 'contain', 'single', 'split', 'automatically', 'incorporated', 'bringing', 'navigated', 'automatic', 'essential', 'needs', 'essentially', 'follows', 'starting', 'retrieves', 'pages', 'desired', 'recursively', 'contained', 'finds', 'dead', 'end', 'ie', 'scrape', 'go', 'step', 'continue', 'scraping', 'creation', 'useful', 'beautiful', 'soup', 'library', 'parses', 'html', 'tree', 'structure', 'searching', 'modifying', 'parse', 'scrapes', 'fits', 'educational', 'handles', 'searched', 'newly', 'added', 'scraped', 'title', 'every', 'lectures', 'included', 'whose', 'publicly', 'ece', 'httpscoursesengrillinoiseduecespslideshtml', 'httpscoursesengrillinoiseducsfalectureshtml', 'httpssolomonikcsillinoiseduteachingcsindexhtml', 'according', 'configuration', 'drop', 'downs', 'section', 'specifically', 'parsed', 'texts', 'webpages', 'details', 'various', 'tags', 'needed', 'extracted', 'get', 'relevant', 'titles', 'running', 'modified', 'integrated', 'user', 'changes', 'inside', 'modelpy', 'scripts', 'functions', 'defined', 'referenced', 'within', 'thus', 'reducing', 'thats', 'required', 'function', 'structures', 'subject', 'integrate', 'limitations', 'scope', 'work', 'absence', 'training', 'dataset', 'classification', 'model', 'could', 'correctly', 'classify', 'explicitly', 'creating', 'much', 'time', 'allotted', 'uses', 'find', 'documentation', 'helpful', 'understand', 'initial', 'stages', 'spend', 'lot', 'contribution', 'team', 'members', 'member', 'captain', 'splitting', 'integration', 'modeling', 'parsing', 'conclusion', 'powerful', 'tool', 'assist', 'learners', 'optimized', 'without', 'spending', 'across', 'different', 'topics', 'tremendous', 'potential', 'immense', 'paves', 'improve', 'stated', 'scraper', 'largely', 'automated', 'anywhere', 'courseproject', 'please', 'mentioned', 'overwrite', 'git', 'push', 'original', 'repo', 'showing', 'error', 'trying', 'bring', 'entire', 'tested', 'let', 'us', 'know', 'demo', 'require', 'assistance', 'testing', 'installation', 'instructions', 'linux', 'macos', 'httpswwwelasticcoguideenelasticsearchreferencecurrenttargzhtml', 'place', 'cszip', 'site', 'names', 'netids', 'administrative', 'duties', 'netid', 'chosen', 'subtopics', 'intend', 'focusing', 'scale', 'multiple', 'sources', 'eg', 'coursera', 'uiuc', 'etc', 'algorithms', 'allow', 'bulk', 'collection', 'particular', 'interest', 'successful', 'aim', 'briefly', 'describe', 'datasets', 'techniques', 'plan', 'random', 'negative', 'examples', 'dirichlet', 'prior', 'em', 'algorithm', 'currently', 'standard', 'ones', 'svm', 'clustering', 'logistic', 'regression', 'maximum', 'accuracy', 'demonstrate', 'works', 'expected', 'show', 'implementation', 'actually', 'better', 'crawl', 'data', 'selected', 'select', 'updated', 'display', 'upon', 'selection', 'options', 'recently', 'visited', 'result', 'functionality', 'courseslide', 'heading', 'communicate', 'fine', 'build', 'state', 'clearly', 'automate', 'crawling', 'feed', 'directly', 'manually', 'upload', 'second', 'whole', 'programming', 'language', 'writing', 'predominantly', 'might', 'implement', 'javascript', 'css', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'main', 'tasks', 'completed', 'estimated', 'cost', 'task', 'understanding', 'deployment', 'bug', 'fix', 'performance', 'test', 'note', 'remaining', 'utilized', 'complete', 'progress', 'far', 'poc', 'read', 'fileslides', 'format', 'implemented', 'leveraging', 'implementing', 'unit', 'challengesissues', 'faced', 'determining', 'reference', 'era', 'straight', 'forward', 'sections', 'via', 'singlepage', 'program', 'requires', 'authentication', 'ultimately', 'cloudfrontnet', 'dont', 'access', 'cloudfront', 'refer']
https://github.com/avinashnathan1/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/azk0019/CourseProject	"akash singla 11/29/2020 cs 410 progress report - fall 2020 1) i have implemented lara using python. the data set used is yelp hotel review corpus. latent aspects are calculated and new aspects from the reviews are generated. the mode was fined tuned empirically to get more than 25 aspects from every review. every aspect was provided a rating. 2) submit complete code and instructions (tutorial and documentation) for presentation. 3) the training phase on more than 4000 reviews took time. i would wish to use a gpu for this purpose. 1. i implemented a latent aspect rating analysis from hongning wang, yue lu, chengxiang zhai in python. the code is provided in a zip file. the dataset used is yelp restaurant review corpus. latent aspects are calculated and new aspects from the reviews is generated. the model was fine tuned empirically to get more than 25 aspects from every review. every aspect was provided a rating. 2. the training phase on more than 4000 reviews took time. i would wish to use a better gpu for this purpose. 3. the dataset is freely available from https://www.yelp.com/dataset 3. code: dependencies it requires the nltk dataset and additional packages for running. use nltk.download() and download all the given packages. also required is the vader package from nltk. it requires python3. running code the code can be run manually by using main.py the newly acquired aspects are stored in the ""output"" folder.""final_aspect_words.txt "" text file holds the newly acquired aspects mined. corresponding ratings are allocated to every aspect mined and stored in review_data.txt. 4. theory and observations: in this paper, authors identified and analysed a new problem of opinionated text data analysis called latent aspect rating analysis (lara), which aims to analyse opinions expressed about an object in an online review at the level of topical aspects to discover the latent opinion of each individual reviewer on each aspect as well as the relative focus on various aspects when forming the overall judgement to solve this new text mining issue in a general manner, they proposed a novel probabilistic rating regression model. empirical studies on a data set for a hotel review show that the proposed latent rating regression model can effectively solve the lara problem and that a thorough analysis of opinions at the level of topical aspects allowed by the proposed model can help a broad range of application tasks, such as overview of aspect opinion, ranking of individuals based on aspect ratings, and reviewer analysis. in the code i went through the following steps to replicate the paper: i. create vocabulary from the dataset. ii. i used porter stemmer on the dataset to create a vocabulary (stemmed) corpus of the reviews. this stemmed corpus will then be used for aspect mining and rating. iii. initially defined aspects (10 aspects) are read from the file init_aspect_word.txt"" iv. the aspects are then mined using laram bootstraping , which uses the following two classes for restaurant reviews: * class review: * class restaurant v. the the w matrix is calculated using ci-square metrics to calculate the ratings per mined aspect. vi. the results are the saved in output folder. note: the original paper used regression to calculate weight for each aspect. but i also used sentiment analysis module from nltk to rate individual aspects. the regression.py does not work, i just left it there for reference. use mainpy to run the actual code. project proposal report 1) akash kumar- net id: akashk5. i am working this project individually and i will be the captain and have all the administrative duties. 2) i have chosen latent aspect rating analysis as my research paper to reproduce. 3) i will be using python to reproduce this paper. 4) no. 5) yes, i can obtain similar dataset. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview."	['akash', 'singla', 'cs', 'progress', 'report', 'fall', 'implemented', 'lara', 'using', 'python', 'data', 'set', 'used', 'yelp', 'hotel', 'review', 'corpus', 'latent', 'aspects', 'calculated', 'new', 'reviews', 'generated', 'mode', 'fined', 'tuned', 'empirically', 'get', 'every', 'aspect', 'provided', 'rating', 'submit', 'complete', 'code', 'instructions', 'tutorial', 'documentation', 'presentation', 'training', 'phase', 'took', 'time', 'would', 'wish', 'use', 'gpu', 'purpose', 'analysis', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'zip', 'file', 'dataset', 'restaurant', 'model', 'fine', 'better', 'freely', 'available', 'httpswwwyelpcomdataset', 'dependencies', 'requires', 'nltk', 'additional', 'packages', 'running', 'nltkdownload', 'download', 'given', 'also', 'required', 'vader', 'package', 'run', 'manually', 'mainpy', 'newly', 'acquired', 'stored', 'output', 'folderfinal_aspect_wordstxt', 'text', 'holds', 'mined', 'corresponding', 'ratings', 'allocated', 'review_datatxt', 'theory', 'observations', 'paper', 'authors', 'identified', 'analysed', 'problem', 'opinionated', 'called', 'aims', 'analyse', 'opinions', 'expressed', 'object', 'online', 'level', 'topical', 'discover', 'opinion', 'individual', 'reviewer', 'well', 'relative', 'focus', 'various', 'forming', 'overall', 'judgement', 'solve', 'mining', 'issue', 'general', 'manner', 'proposed', 'novel', 'probabilistic', 'regression', 'empirical', 'studies', 'show', 'effectively', 'thorough', 'allowed', 'help', 'broad', 'range', 'application', 'tasks', 'overview', 'ranking', 'individuals', 'based', 'went', 'following', 'steps', 'replicate', 'create', 'vocabulary', 'ii', 'porter', 'stemmer', 'stemmed', 'iii', 'initially', 'defined', 'read', 'init_aspect_wordtxt', 'iv', 'laram', 'bootstraping', 'uses', 'two', 'classes', 'class', 'v', 'w', 'matrix', 'cisquare', 'metrics', 'calculate', 'per', 'vi', 'results', 'saved', 'folder', 'note', 'original', 'weight', 'sentiment', 'module', 'rate', 'regressionpy', 'work', 'left', 'reference', 'actual', 'project', 'proposal', 'kumar', 'net', 'id', 'akashk', 'working', 'individually', 'captain', 'administrative', 'duties', 'chosen', 'research', 'reproduce', 'yes', 'obtain', 'similar', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'coursera', 'week', 'course']
https://github.com/bachman5/CS410-BiasDetector	"cs410 course project proposal us news political bias detector team name: bias detectives names: anh nguyen, muhammad rafay, nicholas bachman netid's: anhn4@illinois.edu, mrafay2@illinois.edu, bachman5@illinois.edu team captain: nicholas bachman free topic: sentiment analysis description: our free topic is to design a system that can examine mainstream news headlines and determine if they contain any political bias. the bias would be determined using sentiment analysis and nlp techniques. important or interesting: the political tension between the democrat and republican parties in the us has never seemed higher. mainstream news media reports on events with a palpable bias that slants heavily toward one party or the other. many americans want unbiased, factual news reports to avoid being manipulated. an example visualization of this political bias from allsides.com is shown in figure 1. these visualizations are created from community feedback data which can also be bias / not normalized. https://www.allsides.com/media-bias/media-bias-ratings figure 1 media bias visual planned approach: our approach will be to text mine news headlines from 2020 to create a data set or find an existing dataset that has already been labeled. we will then build or modify an existing sentiment analysis model and tune it for political bias. other models that we might try in case we don't get good results are clustering based on latent dirichlet allocation (lda), logistic regression and deep learning. we then plan to visualize the results to see how various media outlets rank across a bias spectrum. left and right will be the sentiment classes. we might add lean left and lean right classes if deemed appropriate. tools, systems, datasets: nltk is a suite of python libraries that can be used for classification, tokenization, stemming, tagging, parsing and nlp. google's named entities sentiment beta api for entity sentiment. might use tensorflow if we tried deep learning model. gensim for lda. we will high likely use hybrid sentimental analysis algorithms which include stemming, tokenization, lexicon along with some automatic approaches available for public use like bert. the final report might be displayed in form of bi visualization with tableau or d3.js. expected outcome: * input * a new article headline * a fixed set of classes c = {c1,c2,..,cn} * output o a predicted class c  c project timeline: milestone due date submit proposal oct 25th working prototype nov 22th project progress report nov 29th project completion and submission dec 13th programing language: python and nltk (http://www.nltk.org/) workload justification: n = 3 team members 3 * 20 = 60 hours task estimated hours build text mining / web scrapping for news headlines 5 collect and label test / training datasets (corpus) 5 build / tune sentiment analysis model 20 train sentiment analysis model (iterative) 15 test sentiment analysis model 15 visualization to display results (tableau or website) 8 develop software documentation 2 create video demonstration 2 total 72 cs410 course project final report us news political bias detector december 13th, 2020 team name: bias detectives names: anh nguyen, muhammad rafay, nicholas bachman netid's: anhn4@illinois.edu, mrafay2@illinois.edu, bachman5@illinois.edu team captain: nicholas bachman free topic: text classification and sentiment analysis public repository: https://github.com/bachman5/cs410-biasdetector project timeline: milestone due date submit proposal oct 25th - complete working prototypes nov 22th - complete code video demo nov 28th - complete project progress report submission nov 29th - complete 2 x initial peer reviews dec 2nd - complete project completion and submission dec 13th - complete 2 x final peer reviews dec 16th workload justification: n = 3 team members 3 * 20 = 60 hours task estimated hours build text mining / clean news headlines 4 hours - complete collect and label test / training datasets (corpus) 10 hours - complete build / tune sentiment analysis technique 12 hours - complete build / train / tune logistic & svm model 12 hours - complete build / train / tune deep learning technique 12 hours - complete develop software documentation 2 hours - complete team meetings 8 hours - complete create video demonstrations 5 hours - complete total 65 hours project motivation the political tension between the democrat and republican parties in the us has never seemed higher. mainstream news media reports on events with a palpable bias that slants heavily toward one party or the other. many americans want unbiased, factual news reports to avoid being manipulated. our free topic was to design a system that can examine mainstream news headlines and determine if they contain any political bias. the bias was determined using various sentiment analysis, shallow nlp and machine learning techniques. we then compared the results of three specific approaches by using all the knowledge gained from the cs 410 course. collect and label datasets (corpus) raw dataset: https://www.kaggle.com/snapcrack/all-the-news our corpus was taken from ~200,000 news articles published in the new york times, breitbart, cnn, business insider, the atlantic, fox news, talking points memo, buzzfeed news, national review, new york post, the guardian, npr, reuters, vox, and the washington post. the bulk of headlines were taken from 2015-2017 during a heated us presidential election. data model figure 1: data collection, filtering and labeling workflow aws sagemaker with aws sagemaker, large labeling jobs can be broken up and assigned to public or private workforces. sagemaker increased the speed and accuracy of our labeling process. the jobs were broken up and assigned across all three team members. each team member then recruited politically independent 3rd party members to assist with the large labeling task. we specifically tried to get labeling assistance from friends and family members that don't have strong political ties to either the republican or democratic ideologies. if the labeler has a strong political bias, then the resulting models could also reflect that bias. aws groundtruth aws groundtruth is the portal that private team members used to label our data. a simple dashboard was created for the labeler to view a single news headline at a time with no additional information like publisher that could introduce additional bias. the groundtruth user had options to label the headline as either having right bias, left bias or neutral. final labeled test / training dataset: https://github.com/bachman5/cs410- biasdetector/tree/main/data_labeled our completed training data contained over 4,000 filtered, cleaned and labeled headlines from the workflow. news headlines were labeled as either right wing bias, left wing political bias or neutral using aws sagemaker and groundtruth. here is an example record correctly labeled with left wing bias: lessons learned aws ground truth provides a great way to explain to the labeler exactly what you are looking for. you can even provide them examples of correct and incorrect label. these are great features, but they come at a high cost. our team was unaware that aws charges .08 cents per label. there is no warning or advertised cost until you get your monthly bill. 4,057 objects x .08 = $323.56. category classification + sentiment analysis approach language: python dependencies: nltk, nltk.vader, numpy, pandas public repository: https://github.com/bachman5/cs410-biasdetector/blob/main/sentiment_test.py primary team member: nick bachman overview: vader (valence aware dictionary for sentiment reasoning) is a model used for text sentiment analysis that is sensitive to both polarity (positive/negative) and intensity (strength) of emotion. it is included in the nltk package and can be applied directly to unlabeled text data. it can also be customized for specific domains and use cases. our first approach was to see if we could design a system that combines topic category and sentiment to accurately predict political bias. technical approach: the goal of this model is to correctly determine if a text headline includes left or right political bias. in the headline ""daily news mourns the death of the republican party, killed by epidemic of trump"", the subject of the news article is the daily news. the reuters writer lucas jackson used the terms mourns, death, killed and epidemic to communicate significantly negative sentiment about the republican party and donald trump. most people would agree that this headline supports a left-wing political position and thus includes a left bias. {""source"":""69446,""daily news mourns the death of the republican party, killed by epidemic of trump'"",""class-name"":""left""} as a group, we spent time thinking about the definition of political bias and how to design a labeling and detection system. the chart below summarizes our design decision. sentiment alone is not enough to determine political bias. you also need a way to determine the category that sentiment is being directed toward. topic category sentiment bias republican negative :( left republican positive :) right republican neutral :| neutral democrat negative :( right democrat positive :) left democrat neutral :| neutral table 1: combining category and sentiment to determine bias figure 2: combining category and sentiment to determine bias technical challenges: updating the category lexicon with descriptive terms and updating the vader sentiment lexicon with popular political terms increased the accuracy by about 8-10%. tunning the values for how much negative or positive sentiment yields a neutral response also helped because ""neutral"" was the label with the most entropy. example: ""game of thrones: republicans hate it, democrats love it"". got is the subject in this example. if the reader likes the hbo show game of thrones, it changes how they will label it. both republicans and democrats are mentioned so there are multiple categories to attach the sentiment. both negative (hate) and positive (love) sentiment are expressed. the labeler may choose neutral because they are unsure or do not know what game of thrones is in relation to this political topic. complex sentiment and ambiguity make it very difficult to accurately label bias and accurately predict bias. lessons learned one additional feature that i added was putting a heavier weight on terms that occurred first in a headline. in english, most subjects occur to the left of the predicate. when both democratic and republican terms are mentioned, i subtracted the weights from each other. if the difference was minor, i added a category for ""both"" that covers when democrats and republicans are both the subject (left of the predicate) and close together. this does not cover the minority cases when the subject is to the right of the predicate. this happens with questions, sentences that begin with ""here"" or ""there"" and sentences beginning with one or more prepositional phrases. additional rules could be added to check for these three exceptions to change the weighing when the subject occurs after the predicate. i tried using nlp external libraries such as spacy but they also struggled with identifying the subject of many headlines. i think this is because news headlines are not using natural language. in other words, humans don't usually talk or write in the same way that news headlines are written to capture your attention. example: ""hillary clinton: republicans dishonor constitution by vowing to block scalia replacement"" hillary clinton (dem) is saying that republicans are dishonoring the constitution. the colon is acting like the verb ""says"". my code correctly identifies hillary clinton (left) as the subject and attaches the negative sentiment because of the word dishonor and determines that it's right bias. however, the reader sees that the negative sentiment is attached to republicans and labels it as left bias. in this case the sentiment was not attached to the subject but rather what the subject said about another subject. this is just one example of the challenges faced by trying to attach sentiment to a subject. results: biasdetective1 biasdetective2 biasdetective3 right precision .580 .487 .414 right recall .593 .633 .708 right f1 .586 .550 .523 left precision .450 .575 .557 left recall .565 .542 .578 left f1 .503 .558 .568 overall accuracy .521 .528 .483 support vector machine approach language: python public repository: https://github.com/bachman5/cs410-biasdetector/tree/main/svm_model dependencies: numpy, panda, glove, spacy, sklearn primary team member: anh nguyen overview: support vector machine (svm), a discriminative classification introduced in one of our lectures in text categorization, is another method that we decided to implement in our model. the method is mainly included in sklearn package. to improve the dataset and support model's accuracy, couple of nlp methods and vector embedding are also utilized and can be explain further in the technical approach figure 3: svm explanation technical approach: figure 4: overall diagram for svm model 1. preprocessing data (nlp): (using spacy) the main goal of this step is using some nlp techniques to conduct meaningful patterns and themes for the text data using spacy package: tokenization (breaking news titles into token), stopword (removing common stop works in sentence), punctuation (clean sentence better by ignoring punctuation like marks and spaces) before and after word tokenized before and after removing stopwords word tokenization appeared to perform accurately with the purpose of data cleaning. however, removing stopwords tend to remove all the context of the sentence. 2. word embedding & magnitude (using glove) building corpus after preprocessing data, we then store available data into three different text files: train.txt, text.txt and corpus.txt. ideally corpus should be a dictionary including all political words in bigger spectrum than only words in train & text data, however due to the limitation of the data our corpus only built upon our available scope of data. words in corpus then mapped to corresponding vectors (word embedding/word vectorization) with the hope of capturing the meaning of potential relationship of word in term of similar contexts/syntax/spelling/co-occurrence. corpus (dictionary) with vectorized words testing word's distance: result: another method that we were using (using glove package) was store our corpus to a magnitude file. normally a corpus can be text-formatted but storing dictionary in magnitude file helps improving the processing time. vectorizing titles using meanembeddingvectorizer & tf-idf embedding 3. train/tune model (using sklearn) current result tf_idf (preprocessing) mean embedding vector (preprocessing) accuracy 0.514379622021364 0.5308134757600658 precision 0.5306949522525308 0.4542249353200501 recall 0.514379622021364 0.5308134757600658 f1 score 0.4751926328128259 0.48172315509176467 technical challenge/ lesson learn: the current accuracy is still in range 50% with tf-idf embedding preprocessing as well as vector preprocessing. while there is not much success in improving the accuracy levels. we started to doubt the truthfulness of our labelled data. to assert the validity of our model pipeline, we switched to benchmarking using a different dataset while keeping everything else the same. the dataset is atis airline spoken language intent (train / test) which classifies a passenger's inquiry into 1 of the possible 18 intents: flight, flight time, meal, etc. the data size is about 5000 records and 18 classes (intents). the performance came out significantly better than what observed from our dataset: accuracy : 0.9113495200451722 precision: 0.9107883118388134 recall : 0.9113495200451722 f1 score : 0.9011684778567066 one more example of our doubt in data integrity is that that we discovered the differences labels in one title. however, we do not complete blame on this issue as in the real world many opinions can appear for the same information. 100300,"" republican, democratic senators demand inquiry into russian election interference"", neutral 113763,"" republican, democratic senators demand inquiry into russian election interference"", left 100300,"" republican, democratic senators demand inquiry into russian election interference"", neutral 113763,"" republican, democratic senators demand inquiry into russian election interference"", neutral deep learning: recurrent neural network classification approach language: python dependencies: tensorflow primary team member: muhammad rafay overview: the approach uses a recurrent neural network (rnn) to classify news headlines as left or right biased. technical approach of rnn: unlike the feed forward neural network we used an rnn for classifying news headlines. the difference in rnn verses feed forward is that output of an rnn is not just influenced by the input we just fed but it is influenced by the history of inputs we have fed earlier. an example is given below: so, it means rnn is suitable for classifying sequence data and news headline is a sequence. since, neural network processes numbers we had to convert text to a sequence of token indices using an encoder. after the encoding is the embedding layer, this layer stores one vector per word after training words with similar meanings have similar vectors. next comes the rnn with a stack of hidden layers, it processes the sequence of input by iterating through the elements. at each step output from the previous step is passed with the input of the next step. the sequence is converted to a single vector which is further converted to a single logit as the classification output. the architecture of our rnn is like the one given below: lesson learned: our current classification accuracy is 53%. not much different from other models. since we are classifying based on political bias and not sentiments, the two classes: left and right has a lot of common vocabulary. both text of both classes contains hate speech and words ""democrats"" and ""republican"" so in short, the vocabulary is not a very distinguishing feature for the two classes. the sentiment of bias is sometimes hidden behind the meaning of the sentence and it is not obvious e.g. ""are republicans more likely to prefer pulp in their orange juice?"" it is only obvious when something positive or negative is being said about one of the parties, and that involves recognizing the sentiment of the entity but not every headline is like that e.g. ""republicans' patience with trump may be running out"" we also suspected that the poor results are due to erroneous labeling of dataset. hence, we explored and found another similar dataset ideological books corpus (ibc). we trained/tested rnn on ibc dataset and found that might not me the case as the performance metrics for this dataset were like ours rather a bit poor so, we need a model that would learn the hidden meaning behind the headlines. on our own dataset accuracy: 0.528 precision: 0.507 recall: 0.558 f1 score: 0.531 on our own dataset accuracy: 0.504 precision: 0.454 recall: 0.432 f1 score: 0.442 -------------------------------------------- deep learning: classification using bert language: python dependencies: tensorflow primary team member: muhammad rafay overview: bert is recent breakthrough in nlp. it makes use of a transformer mechanism that learns contextual relations between words. it has achieved state-of-the-art performance on several nlp tasks such as glue. as we looked forward to improving performance our next choice of model was bert technical approach: as compared to an rnn based lstms which we implemented earlier bert incorporates a non-directional encoder unlike lstms which read the test in sequence (left-to-right or right-to-left) bert reads the entire sequence at once. this allows bert to learn the context of a word based on all its surroundings. bert models are pre-trained on a large corpus of text. they then fine-tuned for specific tasks like the last model bert also uses vector space representations of natural language to learn and predict. lessons learned: this approach validates our hypothesis for this kind of problem we need a model that better grasps the context of the sentence, rather than just learning from the word sentiment. bert proved to be a significantly better classifier than the other three, due to its bidirectional training. but still, not good enough to be used in a real application. current result: on our own dataset accuracy: 0.594 precision: 0.568 recall: 0.630 f1 score: 0.599 on ibc dataset: accuracy: 0.598 precision: 0.558 recall: 0.568 f1 score: 0.563 video demonstration category + sentiment demo https://drive.google.com/file/d/1ycsjyzalt915zt_rqleku-lhgaig8hyr/view?usp=sharing svm model demo https://drive.google.com/file/d/1rgzv26i5q7gmmnr9mwlthtdqprfe5h-4/view?usp=sharing conclusion: we learned that getting a correctly labeled dataset is extremely important when training any ml model. inaccuracy, duplication of records, ambiguity and bias can all negatively affect the outcomes. we also learned that how you create the labels are important. we chose three labels to categorize headlines but there were five or more separate clusters of word distributions that overlapped with each other. discriminately classifying them and defining similarity was a significant challenge. the category/sentiment and svm approach produced slightly lower accuracy than lstm and bert. correctly identify the subject of the headline was difficult with shallow nlp which caused the sentiment to attach with the wrong subject and decreased the accuracy. one approach that we could have done is doing text categorization and sentimental analysis as two different steps of this project. this might be a future improvement that we can look into. even though we didn't get to achieve the accuracy that we were hoping for, this project has brought much knowledge. it helps tie up all materials in class together from the way we do nlp, using tf-idf to generative and classifier models like naive bayes, logistic regression, svm, etc. it's like a perfect summary that we need to put everything we learnt in materials into practice. to conclude, we learned that bias detection is a harder text categorization problem than sentiment analysis because bias categories are weakly corelated to the surface features of the text such the sentiments of words in a sentence are not enough to predict bias. this hypothesis is validated by the result from bert model. since bert learns contextual relationship between words it has performed better, and the accuracy has increased. probably more fine-tuning can help it improve more. the other bottleneck includes amount of training data. since we couldn't find the dataset, we were looking for we had to hand label it our self. which bring us to another problem, we later found instances where our labeling was not accurate. so better training data set in terms of amount of data and better labeling would help improve bias detection as well. category + sentiment svm lstm bert overall precision 0.512 0.530 0.507 0.568 overall recall 0.601 0.514 0.558 0.630 overall f1 0.550 0.475 0.531 0.599 overall accuracy 0.521 0.514 0.528 0.594 references hutto, c.j. & gilbert, e.e. (2014). vader: a parsimonious rule-based model for sentiment analysis of social media text. eighth international conference on weblogs and social media (icwsm-14). ann arbor, mi, june 2014. https://www.tensorflow.org/tutorials/text/classify_text_with_bert https://www.tensorflow.org/tutorials/text/text_classification_rnn https://www.dataquest.io/blog/tutorial-text-classification-in-python-using-spacy/ https://www.analyticsvidhya.com/blog/2018/04/a-comprehensive-guide-to-understand-and- implement-text-classification-in-python/ https://aws.amazon.com/sagemaker/groundtruth/ https://spacy.io/usage/spacy-101 cs410 course project progress report us news political bias detector team name: bias detectives names: anh nguyen, muhammad rafay, nicholas bachman netid's: anhn4@illinois.edu, mrafay2@illinois.edu, bachman5@illinois.edu team captain: nicholas bachman free topic: text classification and sentiment analysis public repository: https://github.com/bachman5/cs410-biasdetector project timeline: milestone due date submit proposal oct 25th - complete working prototypes nov 22th - complete code video demo nov 28th - complete project progress report submission nov 29th - complete 2 x initial peer reviews dec 2nd project completion and submission dec 13th 2 x final peer reviews dec 16th workload justification: n = 3 team members 3 * 20 = 60 hours task estimated hours build text mining / clean news headlines 4 hours - complete collect and label test / training datasets (corpus) 10 hours - complete build / tune sentiment analysis technique 12 hours - complete build / train / tune logistic & svm model 12 hours - complete build / train / tune deep learning technique 14 hours - in progress visualization to display results (tableau or website) ? develop software documentation 2 team meetings 5 hours create video demonstrations 4 hours total project motivation collect and label datasets (corpus) raw dataset: https://www.kaggle.com/snapcrack/all-the-news description: our corpus was taken from ~200,000 news articles published in the new york times, breitbart, cnn, business insider, the atlantic, fox news, talking points memo, buzzfeed news, national review, new york post, the guardian, npr, reuters, vox, and the washington post. the bulk of headlines were taken from 2015-2017 during a heated us presidential election. data model figure 1: data collection, filtering and labeling workflow aws sagemaker with aws sagemaker, large labeling jobs can be broken up and assigned to public or private workforces. sagemaker increased the speed and accuracy of our labeling process. the jobs were broken up and assigned across all three team members. each team member then recruited politically independent 3rd party members to assist with the large labeling task. we specifically tried to get labeling assistance from friends and family members that don't have strong political ties to either the republican or democratic ideologies. if the labeler has a strong political bias, then the resulting models could also reflect that bias. aws groundtruth aws groundtruth is the portal that private team members used to label our data. a simple dashboard was created for the labeler to view a single news headline at a time with no additional information like publisher that could introduce additional bias. the groundtruth user had options to label the headline as either having right bias, left bias or neutral. final labeled test / training dataset: https://github.com/bachman5/cs410- biasdetector/tree/main/data_labeled description: ~4,000 filtered, cleaned and labeled headlines were created from the workflow. news headlines were labeled as either right wing bias, left wing political bias or neutral using aws sagemaker and groundtruth. here is an example record correctly labeled with left wing bias: category + sentiment analysis approach language: python dependencies: nltk, nltk.vader, numpy, pandas public repository: https://github.com/bachman5/cs410-biasdetector/blob/main/sentiment_test.py primary team member: nick bachman overview: vader (valence aware dictionary for sentiment reasoning) is a model used for text sentiment analysis that is sensitive to both polarity (positive/negative) and intensity (strength) of emotion. it is included in the nltk package and can be applied directly to unlabeled text data. it can also be customized for specific domains and use cases. our first approach was to see if we could design a system that combines topic category and sentiment to accurately predict political bias. technical approach: the goal of this model is to correctly determine if a text headline includes left or right political bias. in the headline ""daily news mourns the death of the republican party, killed by epidemic of trump"", the subject of the news article is the republican party. the reuters writer lucas jackson used the terms mourn, death, killed and epidemic to communicate significantly negative sentiment about the republican party and donald trump. most people would agree that this headline supports a left-wing political position and thus includes a left bias. {""source"":""69446,""daily news mourns the death of the republican party, killed by epidemic of trump'"",""class-name"":""left""} as a group, we spent time thinking about the definition of political bias and how to design a labeling and detection system. the chart below summarizes our design decision. sentiment alone is not enough to determine political bias. you also need a way to determine the category that sentiment is being directed toward. topic category sentiment bias republican negative :( left republican positive :) right republican neutral :| neutral democrat negative :( right democrat positive :) left democrat neutral :| neutral table 1: combining category and sentiment to determine bias figure 2: combining category and sentiment to determine bias technical challenges: updating the category lexicon with descriptive terms and updating the vader sentiment lexicon with popular political terms increased the accuracy by about 8-10%. tunning the values for how much negative or positive sentiment yields a neutral response also helped because ""neutral"" was the label with the most entropy. for example: ""game of thrones: republicans hate it, democrats love it"". if the reader likes the hbo show game of thrones, it changes how they will label it. both republicans and democrats are mentioned so there are multiple subject categories. both negative (hate) and positive (love) sentiment are expressed. the labeler may choose neutral because they are unsure or do not know what game of thrones is in relation to this political topic. complex sentiment and ambiguity make it difficult to accurately label bias and accurately predict bias. current results: test dataset: biasdetective1.csv classification accuracy: 44% test dataset: biasdetective2.csv classification accuracy: 42% test dataset: biasdetective3.csv classification accuracy: 47% more advanced supervised and deep learning models discussed later in the report yield more accurate results. -------------------------------------------- support vector machine approach language: python dependencies: numpy, panda, glove, spacy, sklearn primary team member: anh nguyen overview: support vector machine (svm) is a discriminative classification introduced in one of our lectures in text categorization. svm uses classification algo to separate classes of data point then find the maximum margin of hyperplane between data points in their associated classes. the method below also includes some nlp methods + vector embedding to improve dataset and support model's accuracy technical approach: follow by diagram below overall diagram 1. prepare data (nlp): (using spacy) goal of this is to conduct a more meaningful patterns and themes for the text data using spacy. the main method for this data processing is tokenization was breaking news titles into token, clean sentence better by ignoring punctuation like marks and spaces. before and after word tokenized another method that i have tried is removing stopwords from sentences. however, it brings me to uncompleted sentences that are difficult to translate and understand. before and after removing stopwords output: x : word in titles, y : labels 2. word embedding & magnitude (using glove) building corpus after preprocessing data, i have built three different text files: train.txt, text.txt and corpus.txt. ideally corpus should be a dictionary including all political words in bigger spectrum than only words in train & text data, however due to the limitation of the data our corpus only built upon our available scope of data. words in corpus then mapped to corresponding vectors (word embedding/word vectorization) with the hope of capturing the meaning of potential relationship of word in term of similar contexts/syntax/spelling/co-occurrence. corpus (dictionary) with vectorized words testing word's distance: result: another method that i'm using in this is store our corpus to a magnitude file. normally a corpus can be text- formatted but storing dictionary in magnitude file helps improving the processing time. vectorizing titles using meanembeddingvectorizer & tf-idf embedding 3. train/tune model (using sklearn) current result tf-idf for preprocess + svm classification accuracy : 0.514379622021364 precision: 0.5306949522525308 recall : 0.514379622021364 f1 score : 0.4751926328128259 mean embedding vector preprocess + svm classification accuracy : 0.5308134757600658 precision: 0.4542249353200501 recall : 0.5308134757600658 f1 score : 0.48172315509176467 the current accuracy is still in range 50% with tf-idf embedding preprocessing as well as vector preprocessing. while there is not much success in improving the accuracy levels. i started to doubt the truthfulness of our labelled data. to assert the validity of our model pipeline, i switched to benchmarking using a different dataset while keeping everything else the same. the dataset is atis airline spoken language intent (train / test) which classifies a passenger's inquiry into 1 of the possible 18 intents: flight, flight time, meal, etc. the data size is about 5000 records and 18 classes (intents). the performance came out significantly better than what observed from our dataset: accuracy : 0.9113495200451722 precision: 0.9107883118388134 recall : 0.9113495200451722 f1 score : 0.9011684778567066 challenges: nlp: still facing challenging with precise deep semantic analysis & bias in labelled data: -------------------------------------------- deep learning: recurrent neural network classification approach language: python dependencies: tensorflow primary team member: rafay, muhammad overview: the approach uses a recurrent neural network (rnn) to classify news headlines as left or right biased. technical approach: unlike the feed forward neural network we used an rnn for classifying news headlines. the difference in rnn verses feed forward is that output of an rnn is not just influenced by the input we just fed but it is influenced by the history of inputs we have fed earlier. an example is given below: so, it means rnn is suitable for classifying sequence data and news headline is a sequence. since, neural network processes numbers we had to convert text to a sequence of token indices using an encoder. after the encoding is the embedding layer, this layer stores one vector per word after training words with similar meanings have similar vectors. next comes the rnn with a stack of hidden layers, it processes the sequence of input by iterating through the elements. at each step output from the previous step is passed with the input of the next step. the sequence is converted to a single vector which is further converted to a single logit as the classification output. the architecture of our rnn is similar to the one given below: current results: our current classification accuracy is 60% with the vanilla rnn and improved to 62% when we added two lstm (long short-term memory) layers. although the accuracy is not good enough for practical usage but this is the best, we have got among the models we tried. challenges: since we are classifying based on political bias and not sentiments, the two classes: left and right has a lot of common vocabulary. both text of both classes contains hate speech and words ""democrats"" and ""republican"" so in short, the vocabulary is not a very distinguishing feature for the two classes. the sentiment of bias is sometimes hidden behind the meaning of the sentence and it is not obvious e.g. ""are republicans more likely to prefer pulp in their orange juice?"" it is only obvious when something positive or negative is being said about one of the parties, and that involves recognizing the sentiment of the entity but not every headline is like that e.g. ""republicans' patience with trump may be running out"" so, we need to involve feature engineering that would help the model learn the hidden meaning behind the headlines. video demonstration rules + sentiment model demo https://drive.google.com/file/d/1ycsjyzalt915zt_rqleku-lhgaig8hyr/view?usp=sharing svm model demo https://drive.google.com/file/d/16fyqpfdd6cv-wdykem-gwnpkaqadnhbd/view?usp=sharing instruction for testing svm: $make install - installing all necessary packages in local dir $make data - build corpus $make train - train model $make test - test result remaining tasks in the next two weeks, we will continue to improve our accuracy. we look forward to use the bert model a recent break thorough in machine learning. the bert is a non- directional model instead of reading the words in a sequence it processes each token in context of all token before and after. secondly, another bottle neck in improving accuracy is the accuracy of the data labeling. we suspect that some of the data has been incorrectly labeled as well that is confusing our classifier. thirdly, we have about 4000 instances in our training data increasing the amount of training data might improve the results further. so, we are exploring new datasets to use with our model. references hutto, c.j. & gilbert, e.e. (2014). vader: a parsimonious rule-based model for sentiment analysis of social media text. eighth international conference on weblogs and social media (icwsm-14). ann arbor, mi, june 2014. https://github.com/plasticityai/magnitude#file-format-and-converter courseproject cs 410 group project- bias detectives we have divided our work into three different technical approaches to determine which is the most accurate for our use case. if you would like to test the code, clone this repo and follow the instructions below. you can also download a video demo of rules and svm. rules_model video demo https://drive.google.com/file/d/1ycsjyzalt915zt_rqleku-lhgaig8hyr/view?usp=sharing instructions for testing rules_model: $pip3 install nltk $pip3 install numpy $pip3 install pandas $cd rules_model $python3 sentiment_test.py svm_model video demo https://drive.google.com/file/d/16fyqpfdd6cv-wdykem-gwnpkaqadnhbd/view?usp=sharing instruction for testing svm_model: $make install - installing all necessary packages in local dir $make data - build corpus $make train - train model $make test - test result deep_learning_models video demo - https://drive.google.com/file/d/1trkzgctpx2u6qporr2sq3iwydhav7tua/view instruction for testing deep_learning_models: install jupyter notebook: ""pip install notebook"" go to notebook directory in terminal install tensorflow: ""pip install tensorflow==2.3"" run ""jupyter notebook"""	['cs', 'course', 'project', 'proposal', 'us', 'news', 'political', 'bias', 'detector', 'team', 'name', 'detectives', 'names', 'anh', 'nguyen', 'muhammad', 'rafay', 'nicholas', 'bachman', 'netids', 'anhnillinoisedu', 'mrafayillinoisedu', 'bachmanillinoisedu', 'captain', 'free', 'topic', 'sentiment', 'analysis', 'description', 'design', 'system', 'examine', 'mainstream', 'headlines', 'determine', 'contain', 'would', 'determined', 'using', 'nlp', 'techniques', 'important', 'interesting', 'tension', 'democrat', 'republican', 'parties', 'never', 'seemed', 'higher', 'media', 'reports', 'events', 'palpable', 'slants', 'heavily', 'toward', 'one', 'party', 'many', 'americans', 'want', 'unbiased', 'factual', 'avoid', 'manipulated', 'example', 'visualization', 'allsidescom', 'shown', 'figure', 'visualizations', 'created', 'community', 'feedback', 'data', 'also', 'normalized', 'httpswwwallsidescommediabiasmediabiasratings', 'visual', 'planned', 'approach', 'text', 'mine', 'create', 'set', 'find', 'existing', 'dataset', 'already', 'labeled', 'build', 'modify', 'model', 'tune', 'models', 'might', 'try', 'case', 'dont', 'get', 'good', 'results', 'clustering', 'based', 'latent', 'dirichlet', 'allocation', 'lda', 'logistic', 'regression', 'deep', 'learning', 'plan', 'visualize', 'see', 'various', 'outlets', 'rank', 'across', 'spectrum', 'left', 'right', 'classes', 'add', 'lean', 'deemed', 'appropriate', 'tools', 'systems', 'datasets', 'nltk', 'suite', 'python', 'libraries', 'used', 'classification', 'tokenization', 'stemming', 'tagging', 'parsing', 'googles', 'named', 'entities', 'beta', 'api', 'entity', 'use', 'tensorflow', 'tried', 'gensim', 'high', 'likely', 'hybrid', 'sentimental', 'algorithms', 'include', 'lexicon', 'along', 'automatic', 'approaches', 'available', 'public', 'like', 'bert', 'final', 'report', 'displayed', 'form', 'bi', 'tableau', 'djs', 'expected', 'outcome', 'input', 'new', 'article', 'headline', 'fixed', 'c', 'cccn', 'output', 'predicted', 'class', 'timeline', 'milestone', 'due', 'date', 'submit', 'oct', 'th', 'working', 'prototype', 'nov', 'progress', 'completion', 'submission', 'dec', 'programing', 'language', 'httpwwwnltkorg', 'workload', 'justification', 'n', 'members', 'hours', 'task', 'estimated', 'mining', 'web', 'scrapping', 'collect', 'label', 'test', 'training', 'corpus', 'train', 'iterative', 'display', 'website', 'develop', 'software', 'documentation', 'video', 'demonstration', 'total', 'december', 'repository', 'httpsgithubcombachmancsbiasdetector', 'complete', 'prototypes', 'code', 'demo', 'x', 'initial', 'peer', 'reviews', 'nd', 'clean', 'technique', 'svm', 'meetings', 'demonstrations', 'motivation', 'shallow', 'machine', 'compared', 'three', 'specific', 'knowledge', 'gained', 'raw', 'httpswwwkagglecomsnapcrackallthenews', 'taken', 'articles', 'published', 'york', 'times', 'breitbart', 'cnn', 'business', 'insider', 'atlantic', 'fox', 'talking', 'points', 'memo', 'buzzfeed', 'national', 'review', 'post', 'guardian', 'npr', 'reuters', 'vox', 'washington', 'bulk', 'heated', 'presidential', 'election', 'collection', 'filtering', 'labeling', 'workflow', 'aws', 'sagemaker', 'large', 'jobs', 'broken', 'assigned', 'private', 'workforces', 'increased', 'speed', 'accuracy', 'process', 'member', 'recruited', 'politically', 'independent', 'rd', 'assist', 'specifically', 'assistance', 'friends', 'family', 'strong', 'ties', 'either', 'democratic', 'ideologies', 'labeler', 'resulting', 'could', 'reflect', 'groundtruth', 'portal', 'simple', 'dashboard', 'view', 'single', 'time', 'additional', 'information', 'publisher', 'introduce', 'user', 'options', 'neutral', 'httpsgithubcombachmancs', 'biasdetectortreemaindata_labeled', 'completed', 'contained', 'filtered', 'cleaned', 'wing', 'record', 'correctly', 'lessons', 'learned', 'ground', 'truth', 'provides', 'great', 'way', 'explain', 'exactly', 'looking', 'even', 'provide', 'examples', 'correct', 'incorrect', 'features', 'come', 'cost', 'unaware', 'charges', 'cents', 'per', 'warning', 'advertised', 'monthly', 'bill', 'objects', 'category', 'dependencies', 'nltkvader', 'numpy', 'pandas', 'httpsgithubcombachmancsbiasdetectorblobmainsentiment_testpy', 'primary', 'nick', 'overview', 'vader', 'valence', 'aware', 'dictionary', 'reasoning', 'sensitive', 'polarity', 'positivenegative', 'intensity', 'strength', 'emotion', 'included', 'package', 'applied', 'directly', 'unlabeled', 'customized', 'domains', 'cases', 'first', 'combines', 'accurately', 'predict', 'technical', 'goal', 'includes', 'daily', 'mourns', 'death', 'killed', 'epidemic', 'trump', 'subject', 'writer', 'lucas', 'jackson', 'terms', 'communicate', 'significantly', 'negative', 'donald', 'people', 'agree', 'supports', 'leftwing', 'position', 'thus', 'sourcedaily', 'trumpclassnameleft', 'group', 'spent', 'thinking', 'definition', 'detection', 'chart', 'summarizes', 'decision', 'alone', 'enough', 'need', 'directed', 'positive', 'table', 'combining', 'challenges', 'updating', 'descriptive', 'popular', 'tunning', 'values', 'much', 'yields', 'response', 'helped', 'entropy', 'game', 'thrones', 'republicans', 'hate', 'democrats', 'love', 'got', 'reader', 'likes', 'hbo', 'show', 'changes', 'mentioned', 'multiple', 'categories', 'attach', 'expressed', 'may', 'choose', 'unsure', 'know', 'relation', 'complex', 'ambiguity', 'make', 'difficult', 'feature', 'added', 'putting', 'heavier', 'weight', 'occurred', 'english', 'subjects', 'occur', 'predicate', 'subtracted', 'weights', 'difference', 'minor', 'covers', 'close', 'together', 'cover', 'minority', 'happens', 'questions', 'sentences', 'begin', 'beginning', 'prepositional', 'phrases', 'rules', 'check', 'exceptions', 'change', 'weighing', 'occurs', 'external', 'spacy', 'struggled', 'identifying', 'think', 'natural', 'words', 'humans', 'usually', 'talk', 'write', 'written', 'capture', 'attention', 'hillary', 'clinton', 'dishonor', 'constitution', 'vowing', 'block', 'scalia', 'replacement', 'dem', 'saying', 'dishonoring', 'colon', 'acting', 'verb', 'says', 'identifies', 'attaches', 'word', 'determines', 'however', 'sees', 'attached', 'labels', 'rather', 'said', 'another', 'faced', 'trying', 'biasdetective', 'precision', 'recall', 'f', 'overall', 'support', 'vector', 'httpsgithubcombachmancsbiasdetectortreemainsvm_model', 'panda', 'glove', 'sklearn', 'discriminative', 'introduced', 'lectures', 'categorization', 'method', 'decided', 'implement', 'mainly', 'improve', 'couple', 'methods', 'embedding', 'utilized', 'explanation', 'diagram', 'preprocessing', 'main', 'step', 'conduct', 'meaningful', 'patterns', 'themes', 'breaking', 'titles', 'token', 'stopword', 'removing', 'common', 'stop', 'works', 'sentence', 'punctuation', 'better', 'ignoring', 'marks', 'spaces', 'tokenized', 'stopwords', 'appeared', 'perform', 'purpose', 'cleaning', 'tend', 'remove', 'context', 'magnitude', 'building', 'store', 'different', 'files', 'traintxt', 'texttxt', 'corpustxt', 'ideally', 'including', 'bigger', 'limitation', 'built', 'upon', 'scope', 'mapped', 'corresponding', 'vectors', 'embeddingword', 'vectorization', 'hope', 'capturing', 'meaning', 'potential', 'relationship', 'term', 'similar', 'contextssyntaxspellingcooccurrence', 'vectorized', 'testing', 'distance', 'result', 'file', 'normally', 'textformatted', 'storing', 'helps', 'improving', 'processing', 'vectorizing', 'meanembeddingvectorizer', 'tfidf', 'traintune', 'current', 'tf_idf', 'mean', 'score', 'challenge', 'lesson', 'learn', 'still', 'range', 'well', 'success', 'levels', 'started', 'doubt', 'truthfulness', 'labelled', 'assert', 'validity', 'pipeline', 'switched', 'benchmarking', 'keeping', 'everything', 'else', 'atis', 'airline', 'spoken', 'intent', 'classifies', 'passengers', 'inquiry', 'possible', 'intents', 'flight', 'meal', 'etc', 'size', 'records', 'performance', 'came', 'observed', 'integrity', 'discovered', 'differences', 'title', 'blame', 'issue', 'real', 'world', 'opinions', 'appear', 'senators', 'demand', 'russian', 'interference', 'recurrent', 'neural', 'network', 'uses', 'rnn', 'classify', 'biased', 'unlike', 'feed', 'forward', 'classifying', 'verses', 'influenced', 'fed', 'history', 'inputs', 'earlier', 'given', 'means', 'suitable', 'sequence', 'since', 'processes', 'numbers', 'convert', 'indices', 'encoder', 'encoding', 'layer', 'stores', 'meanings', 'next', 'comes', 'stack', 'hidden', 'layers', 'iterating', 'elements', 'previous', 'passed', 'converted', 'logit', 'architecture', 'sentiments', 'two', 'lot', 'vocabulary', 'contains', 'speech', 'short', 'distinguishing', 'sometimes', 'behind', 'obvious', 'eg', 'prefer', 'pulp', 'orange', 'juice', 'something', 'involves', 'recognizing', 'every', 'patience', 'running', 'suspected', 'poor', 'erroneous', 'hence', 'explored', 'found', 'ideological', 'books', 'ibc', 'trainedtested', 'metrics', 'bit', 'recent', 'breakthrough', 'makes', 'transformer', 'mechanism', 'learns', 'contextual', 'relations', 'achieved', 'stateoftheart', 'several', 'tasks', 'glue', 'looked', 'choice', 'lstms', 'implemented', 'incorporates', 'nondirectional', 'read', 'lefttoright', 'righttoleft', 'reads', 'entire', 'allows', 'surroundings', 'pretrained', 'finetuned', 'last', 'space', 'representations', 'validates', 'hypothesis', 'kind', 'problem', 'grasps', 'proved', 'classifier', 'bidirectional', 'application', 'httpsdrivegooglecomfiledycsjyzaltzt_rqlekulhgaighyrviewuspsharing', 'httpsdrivegooglecomfiledrgzviqgmmnrmwlthtdqprfehviewuspsharing', 'conclusion', 'getting', 'extremely', 'ml', 'inaccuracy', 'duplication', 'negatively', 'affect', 'outcomes', 'chose', 'categorize', 'five', 'separate', 'clusters', 'distributions', 'overlapped', 'discriminately', 'defining', 'similarity', 'significant', 'categorysentiment', 'produced', 'slightly', 'lower', 'lstm', 'identify', 'caused', 'wrong', 'decreased', 'done', 'steps', 'future', 'improvement', 'look', 'though', 'didnt', 'achieve', 'hoping', 'brought', 'tie', 'materials', 'generative', 'naive', 'bayes', 'perfect', 'summary', 'put', 'learnt', 'practice', 'conclude', 'harder', 'weakly', 'corelated', 'surface', 'validated', 'performed', 'probably', 'finetuning', 'help', 'bottleneck', 'amount', 'couldnt', 'hand', 'self', 'bring', 'later', 'instances', 'accurate', 'references', 'hutto', 'cj', 'gilbert', 'ee', 'parsimonious', 'rulebased', 'social', 'eighth', 'international', 'conference', 'weblogs', 'icwsm', 'ann', 'arbor', 'mi', 'june', 'httpswwwtensorfloworgtutorialstextclassify_text_with_bert', 'httpswwwtensorfloworgtutorialstexttext_classification_rnn', 'httpswwwdataquestioblogtutorialtextclassificationinpythonusingspacy', 'httpswwwanalyticsvidhyacomblogacomprehensiveguidetounderstandand', 'implementtextclassificationinpython', 'httpsawsamazoncomsagemakergroundtruth', 'httpsspacyiousagespacy', 'mourn', 'biasdetectivecsv', 'advanced', 'supervised', 'discussed', 'yield', 'algo', 'point', 'maximum', 'margin', 'hyperplane', 'associated', 'follow', 'prepare', 'brings', 'uncompleted', 'translate', 'understand', 'im', 'formatted', 'preprocess', 'facing', 'challenging', 'precise', 'semantic', 'vanilla', 'improved', 'long', 'shortterm', 'memory', 'although', 'practical', 'usage', 'best', 'among', 'involve', 'engineering', 'httpsdrivegooglecomfiledfyqpfddcvwdykemgwnpkaqadnhbdviewuspsharing', 'instruction', 'install', 'installing', 'necessary', 'packages', 'local', 'dir', 'remaining', 'weeks', 'continue', 'break', 'thorough', 'non', 'directional', 'instead', 'reading', 'secondly', 'bottle', 'neck', 'suspect', 'incorrectly', 'confusing', 'thirdly', 'increasing', 'exploring', 'httpsgithubcomplasticityaimagnitudefileformatandconverter', 'courseproject', 'divided', 'work', 'clone', 'repo', 'instructions', 'download', 'rules_model', 'pip', 'cd', 'sentiment_testpy', 'svm_model', 'deep_learning_models', 'httpsdrivegooglecomfiledtrkzgctpxuqporrsqiwydhavtuaview', 'jupyter', 'notebook', 'go', 'directory', 'terminal', 'run']
https://github.com/bashirpartovi/CourseProject	"expertsearch improvements progress report topic modeler assignee: karthik rajagopal (kr22@illinois.edu) updates: challenges: running topic modeler for all bios is computationally extensive. we are incrementally optimizing the algorithm to achieve a better performance but this has proven to be challenging. bio page classifier assignee: bashir partovi (partovi2@illinois.edu) updates: task progress implemented topic modeling using spacy python library and it accurately predicts topics for individual bio pages completed integrating topic modeler in expertsearch system to display top 5 topics for each search result in progress task progress implemented a url crawler using scrapy to crawl carnegie mellon university and university of maryland in order to generate completed challenges: it was difficult to understand how keras deep neural network layers work, especially for someone who has never worked with the library before. in addition, transforming the text data into a feature vector in order to fit the model was very challenging. automatic url crawler assignee: mohana venkata kalyan cheerla (cheerla3@illinois.edu) updates: negative labels for classifier using keras, implemented a deep learning layer and trained it with the compiled bios from class project and the urls that were crawled by the scrapy spider, achieving 99% accuracy on the test data completed write a wrapper to load the model and use it with the url crawler in order to identify bio pages in progress task progress code development to dynamically route from university home page to all its subsequent web pages and scraping their content has been completed. this scraping activity covers the extraction of the entire text information of those pages along with some important metadata that can feed additional information to ""faculty bio page classifier"" beyond what it requires today to help further improvements in future. completed adding additional filtering criteria to the crawler to eliminate crawling of uninteresting urls. configuration of crawler to be more dynamic in progress challenges: crawler runs for a long time and fetches over 40k+ web pages per university. identifying the filter criteria to reduce the false positives is challenging. is also pending along with integrating it with the classifier courseproject overview as indicated in the project proposal, we improved upon expert search system. the automated crawler requires classification model which can be generated by running the classifier source code and documentation each component includes instructions on how to setup and run * bio page classifier * automated crawler * topic modeler presentation and demo you can find our recorded presentation here as well as our presentation slides"	['expertsearch', 'improvements', 'progress', 'report', 'topic', 'modeler', 'assignee', 'karthik', 'rajagopal', 'krillinoisedu', 'updates', 'challenges', 'running', 'bios', 'computationally', 'extensive', 'incrementally', 'optimizing', 'algorithm', 'achieve', 'better', 'performance', 'proven', 'challenging', 'bio', 'page', 'classifier', 'bashir', 'partovi', 'partoviillinoisedu', 'task', 'implemented', 'modeling', 'using', 'spacy', 'python', 'library', 'accurately', 'predicts', 'topics', 'individual', 'pages', 'completed', 'integrating', 'system', 'display', 'top', 'search', 'result', 'url', 'crawler', 'scrapy', 'crawl', 'carnegie', 'mellon', 'university', 'maryland', 'order', 'generate', 'difficult', 'understand', 'keras', 'deep', 'neural', 'network', 'layers', 'work', 'especially', 'someone', 'never', 'worked', 'addition', 'transforming', 'text', 'data', 'feature', 'vector', 'fit', 'model', 'automatic', 'mohana', 'venkata', 'kalyan', 'cheerla', 'cheerlaillinoisedu', 'negative', 'labels', 'learning', 'layer', 'trained', 'compiled', 'class', 'project', 'urls', 'crawled', 'spider', 'achieving', 'accuracy', 'test', 'write', 'wrapper', 'load', 'use', 'identify', 'code', 'development', 'dynamically', 'route', 'home', 'subsequent', 'web', 'scraping', 'content', 'activity', 'covers', 'extraction', 'entire', 'information', 'along', 'important', 'metadata', 'feed', 'additional', 'faculty', 'beyond', 'requires', 'today', 'help', 'future', 'adding', 'filtering', 'criteria', 'eliminate', 'crawling', 'uninteresting', 'configuration', 'dynamic', 'runs', 'long', 'time', 'fetches', 'k', 'per', 'identifying', 'filter', 'reduce', 'false', 'positives', 'also', 'pending', 'courseproject', 'overview', 'indicated', 'proposal', 'improved', 'upon', 'expert', 'automated', 'classification', 'generated', 'source', 'documentation', 'component', 'includes', 'instructions', 'setup', 'run', 'presentation', 'demo', 'find', 'recorded', 'well', 'slides']
https://github.com/bearnomore/CourseProject	"cs 410 project report reproduction of paper ""generating semantic annotations for frequent patterns with context analysis"" team tr squirrels: ye xu, weidi ouyang, raj datta 1 introduction our project focused on reproducing the paper ""generating semantic annotations for frequent patterns with context analysis"" by chengxiang zhai et al (see reference 1.) we were interested in this paper since it has broad applicability covering a variety of data types. we were also enthused by the fact that the paper used multiple data mining techniques such as frequent patterns, clustering, and similarity functions. we believed that it would allow us to solidify our knowledge based on class materials while learning and exploring new areas as well (e.g. frequent patterns.) the paper uses frequent pattern mining as a fundamental building block. the frequent patterns that occur in datasets, however, have to be interpreted to understand their relevance and semantic applicability. the goal of the paper is to create a way to attach (annotate) meaningful information to frequent patterns that lets us understand the frequent pattern better. the analogy of a dictionary is taken whereby words that are looked up, have a description, but also have examples and other related words presented to fully understand the looked-up word. the equivalent in the frequent pattern universe would then be to identify a) the definition of the frequent pattern by its context indicators, b) representative transactions with the frequent pattern, and c) semantically similar patterns. these specifics are extracted through a series of data mining steps and algorithms which are detailed in the paper. we undertook the effort by first understanding the specifics of the paper, finalizing project scope, selecting appropriate tools and libraries, and implementing the desired result. project scope when we evaluated the specifics of what the paper had accomplished, we realized that the full scope of the paper would require much more effort than what was expected for the team project and endeavored to refine the scope more clearly and realistically. in consultation and agreement with the lead ta, bhavya, we decided on the following: * to use only one dataset, not three as in the paper * to implement only one of the two clustering algorithms for removal of title pattern redundancy. * to implement the entire sequence of steps/algorithms necessary to extract the context indicators and define the given frequent pattern in the context units space (section 4.1 of paper). * to leave extraction of representative transactions (section 4.2 of paper) and semantically similar patterns (section 4.3 of paper) as optional, to be implemented only if time allowed * we would then match our results against the paper's results for the appropriate database we decide to use (either section 5.1, 5.2, or 5.3 of the paper.) 2 implementation we decided to choose the dblp dataset for our implementation. specifically, we started with dblp50000 (see reference 2.) as in the paper, we decided to focus our efforts on the author data attributes for itemset frequent pattern mining, and on title data attributes for sequential frequent pattern mining. we also decided to implement the agglomerative hierarchical micro-clustering algorithm (mentioned as algorithm 1 in the paper.) we wrote our scripts in python and chose nltk for stemming and stop-words removal for titles, mlxend library for frequent pattern mining of authors and pyspark library for sequential frequent pattern mining of titles, as they are more modern python-based libraries with good adoption in the industry. these are not the same libraries used when the paper was written (which may be somewhat outdated), but using the same algorithms. for the author pattern mining, we used the fpgrowth algorithm with some code sample adjustment for finding closed frequent patterns (see reference 3). for title pattern mining we used the prefixspan algorithm. for stemming, we used the porter stemmer (as opposed to krovertz stemmer used in the paper) due to our familiarity with nltk and possibility of higher false negative rates in krovertz stemmer. we used the default stopword removal (for english and german languages) in nltk (the paper only mentions the fact that 12 words were removed without mentioning which words.) data acquisition and pre-processing after we acquired the dblp50000 raw dataset (with 50000 transactions), we parsed it and removed transactions that had no author names, which resulted in 49233 rows. we found that some of our computations (e.g. the hierarchical clustering algorithm is not scaled up well for large data such as the gigantic distance matrix) were taking too long due to the size of the dataset. we decided to take a smaller slice of raw data only from the year 2000 (based on recommendation from bhavya, lead ta.) this reduced our dataset size to a manageable 4004 rows of transactions. obtaining closed frequent patterns after obtaining the clean dataset, the next step is to get the closed frequent patterns for authors and titles which become the fundamental building blocks of the rest of the paper's approach. given that we had a smaller dataset, we decided to lower the support of author count to 4 (as opposed to 10 as in the paper) and obtained 14 such closed frequent patterns. and using the same support count (4) as in paper for title frequent patterns, we obtained 1912 frequent patterns (each title has multiple word sequences and hence a higher likelihood for patterns.) as part of defining the building blocks, we also wrote scripts to find transactions related to author and title frequent patterns by building a reverse index of the transactions, which in turn helps downstream 3 computations related to clustering and building weight vectors of context units. clustering we implemented the agglomerative hierarchical clustering algorithm with complete linkage, outlined as algorithm 1 in the paper. we implemented the jaccard distance measure as defined in the paper (definition 9) for the purpose of clustering. after the visualization of the resulting dendrogram (figure 1) and the elbow analysis of clustering iterations, we chose the threshold/cutoff of maximum depth at 0.01 to give 166 clusters. we tested a range of cutoff thresholds that gave different numbers of clusters around the elbow of the velocity curve where the clustering of branches slows down and examined the clustered words at these cutoff points. we felt that anything more than 166 clusters would have some redundancy, while less than 166 clusters would lack specificity and lose some information. therefore, we chose 166 as our heuristic best. figure 1: dendrogram of hierarchical clustering of the 1912 sequential patterns of titles. weighting and context indicators weighting and the choice of context indicators is core to the context modeling part of the paper. for this, we chose the full set of our closed frequent patterns by combining both author and title frequent patterns into one pool of context indicators of 180 patterns. we then computed the mutual information between pairwise patterns as defined by paper and generated a 180 x 180 weight matrix of context indicators. optional features 4 having achieved suitable implementation covering 4.1 of the paper, we decided to implement the optional parts of identifying example transactions (section 4.2 of paper), as well as finding semantically similar patterns (section 4.3 of paper.) after implementation, we created one example of context annotation for a given author pattern, and one example of context annotation for a given title pattern. in each example, the given pattern had top 5 weighted context indicators as its definition, 5 most representative titles from transactions and 5 most semantically similar titles or authors as synonyms to verify the soundness of the implementation. results analysis & conclusion since we had chosen the dblp dataset for processing, our target for results comparison became what is presented in section 5.1 of the paper, which simply presents examples of the patterns and its contextual definition, representative transactions, and some semantically similar patterns (ssp's). since we had taken a data slice from only one year (the year 2000), we knew the results wouldn't be exactly the same as in the paper, but should be indicative of the power of the approach mentioned in the paper. the following are the two examples generated from our project. as shown below, they are defining what the paper intended as contextual definition, representative examples, and similarly related patterns quite well. having accomplished all 3 aspects (sections 4.1, 4.2, 4.3 of the paper), makes this more than what we had targeted in the scope of the project (since 4.2 and 4.3 were decided as optional.) 5 results example1: context annotation of an author ""ralf steinmetz"". author definition representative titles (top 5) synonym authors (top5) synonym titles (top5) ralf steinmetz ralf steinmetz domain name based visualization of web histories in a zoomable user interface. sanjay kumar madria user interfac virtuellen intelligent graphical user interface design utilizing multiple fuzzy agents. roberto gorrieri process descript sanjay kumar madria realistic force feedback for virtual reality based diagnostic surgery simulators. thomas s. huang virtuellen workbench techniques for simulating difficult queueing problems: adaptive importance sampling simulation of queueing networks. edwin r. hancock summari edwin r. hancock blackboard segmentation using video image of lecture and its applications. gerald sommer high speed 6 results example2: context annotation of a title title definition representative titles (top5) synonym titles (top5) synonym authors (top5) virtual realiti sanjay kumar madria domain name based visualization of web histories in a zoomable user interface. receiv roberto gorrieri edwin r. hancock realistic force feedback for virtual reality based diagnostic surgery simulators. diagnost sanjay kumar madria roberto gorrieri blackboard segmentation using video image of lecture and its applications. debug program thomas s. huang analysi access techniques for simulating difficult queueing problems: adaptive importance sampling simulation of queueing networks. versu,bharat k bhargava thomas s. huang an approximate model for the computation of blocking probabilities in cellular networks with repeated calls. analysi access bill hancock overall, we feel that the results are very useful and are convinced that this can help in building intelligence in applications reliant on various types of data. what we have built can easily be scaled up for larger datasets (by providing more computing power), and tuned to the specifics of the application (by modifying a variety of parameters in the algorithms implemented.) this was a useful exercise for the team to understand the importance of the mining approaches we learnt in the course. 7 references 1. q. mei, d. xin, h. cheng, j. han, and c. zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proc. of the 12th acm sigkdd international conference on knowledge discovery and data mining, kdd '06, acm, pp. 337-346. 2. source of dblp50000: https://hpi.de/naumann/projects/repeatability/datasets/dblp- dataset.html citation: frequency-aware similarity measures.lange, dustin; naumann, felix (2011). 243-- 248. 3. how to find closed and maximal frequent itemsets from fp-growth | by andrewngai | towards data science 4. project github site: https://github.com/bearnomore/courseproject 5. presentation developed as tutorial of paper available on github site: https://github.com/bearnomore/courseproject/blob/main/guidance%20of%20reproducing%2 0the%20paper.pptx 6. video of paper tutorial presentation and walkthrough of implementation details: https://mediaspace.illinois.edu/media/t/1_2uzja14v 8 appendix: setup instructions instruction for reproducing paper ""generating semantic annotations for frequent patterns with context analysis"" (instructions are also available as a readme file in the project github site (see reference 4.) 1. overview of the github courseproject there are three folders, datasets, pythoncodes and jupyternotebookdemo, in the repository. the pythoncodes and the jupyternotebookdemo contain the same scripts but different file formats (py file and ipynb file). within each of these two script folders, there are 6 folders giving the execution order for reproducing the paper using the dblp dataset (paper section 5.1). all datasets imported and generated using the scripts are located in the datasets folder. the input and output paths of these datasets files need to be changed if downloaded to your local computer. except for the raw dataset ""dblp50000.xml"", all other datasets are generated by the scripts. in addition, the final report, the link (https://mediaspace.illinois.edu/media/t/1_2uzja14v) to the video demo and the powerpoint slides of paper review and project introduction are also in the courseproject repository. 2. python library and packages numpy, scipy, pandas, nltk, csv, os, mlxend and pyspark are libraries needed for running the srcipts. except for pyspark, all libraries can be downloaded and installed through pip or conda, depending on your preference and execution environment. the installation of pyspark (and spark) is a bit complicated and requires some environmental configuration and functional java of version 8.0 or above. here is the link of the tutorial how to install pyspark/spark on windows system: https://www.datacamp.com/community/tutorials/installation-of-pyspark 3. script running instruction 3.1. parse the raw data (folder 1. rawdataparsing) download ""dblp50000.xml"" and run script ""dblp_raw_data_parsing.py"" or ""dblp_raw_data_parsing.ipynb"". this generates the dataset ""dblp2000.csv"". 3.2. build the context units space (folder 2. contextmodeling) 3.2.1. find closed frequent pattern (fp) for authors using fpgrowth algorithm in mlxtend lib. run script ""author_fp_mining.py"" or ""author_fp_mining.ipynb"" to import ""dblp2000.csv"" and generate the dataset ""authorsfp2000_with_index.csv"", which contains 14 closed fps of authors and their transaction index in ""dblp2000.csv"" (e.g. author ""edwin r. hancock"" is a closed fp and it showed in the 9 839th, 1119th, 1127th, 1204th and 1576th row of dblp2000, its transaction index list is [839, 1119, 1127, 1204, 1576] ). 3.2.2. preprocess dblp titles run script ""dbpl_preprocessing_titles.py"" or ""dbpl_preprocessing_titles.ipynb"" to import ""dblp2000.csv"" and generate the dataset ""dblp2000_preprocessed_titles.txt"". in this step, stop words are removed and the titles are stemmed. 3.2.3. find title sequential pattern using prefixspan algorithm in pyspark run ""titles_seqpattern_mining.py"" to import ""dblp2000_preprocessed_titles.txt"" and to find closed sequential frequent patterns from titles of dblp2000. i had issue with configuration of spark in jupyter notebook environment therefore no corresponding script in ""ipynb"" format was put in the ""jupyternotebookdemo\contextmodeling"" directory . however, the python script was executed successfully in the windows cmd of my laptop. the script ""titles_seqpattern_mining.py"" generates an output folder containing the pattern file ""part-00000"". set the ""part-00000"" file to txt format. run ""title_sequentialfp_processing.py"" or ""title_sequentialfp_processing.ipynb"" to import ""part- 00000.txt"" and generate the cleaned dataset ""titlesfp2000.csv"". 3.2.4. find transaction index of title sequential patterns run ""find_transaction_index_of_title_fps.py"" or ""find_transaction_index_of_title_fps.ipynb"" to import ""titlesfp2000.csv""and generate ""titlesfp2000_with_index.csv"", which adds the list of transaction index to each title pattern. 3.2.5. reduce title fp redundancy by microclustering (hierarchical clustering) run ""hierarchical_clustering_titlefps2000.py"" or ""hierarchical_clustering_titlefps2000.ipynb"" to import ""titlesfp2000_with_index.csv"" and generate ""titlesfp2000_final.csv"". this script applies the hierarchical clustering with jaccard distance defined per paper and clusters 1912 title sequential patterns into 166 clusters. it chooses the most frequent pattern in each cluster as the ""centroid"" pattern to further build the context unit space. 3.2.6. combine author fps and title fps to build the context units space run ""dblp2000_context_units_with_transaction_index.py"" or ""dblp2000_context_units_with_transaction_index.ipynb"" to import 'authorsfp2000_with_index.csv' and 'titlesfp2000_final.csv' and to generate the final context units dataset ""dblp2000_context_units.csv"". 3.3. define given frequent patterns using context units defined above (folder 3. patterndefinition) 3.3.1. build weight vectors of fps in the context unit space run ""weighting_function.py"" or ""weighting_function.ipynb"" to import """"dbpl2000_context_units.csv"" and ""dblp2000.csv"" and generate ""context_units_weights.csv"". this script generates context vectors for all context units defined in 2.2 and builds a weight matrix between the pairwised context fps. each element of the matrix is the mutual information score between the context unit pair per definition in 10 the paper. 3.3.2. annotate the given fp (e.g. an author) by context units with highest weights run ""defining_pattern_with_context_units.py"" or ""defining_pattern_with_context_units.ipynb"" to import ""context_units_weights.csv"". in this step, we first pick an author from the author fps and rank the weights of its context vector. the context units with top 5 weights are selected as the definition of this author and are saved as ""author_annotation_example1.csv"". similarly, we pick a title from the title fps and rank the weights of its context vector, and save the context units with top 5 weights as ""title_annotation_example1.csv"". 3.4. find representative titles of the given pattern (folder 4. representativetitles2pattern) run script ""find_representative_titles_to_pattern.py"" or ""find_representative_titles_to_pattern.ipynb"" to import ""dblp2000_context_units.csv"", ""dblp2000.csv"" and ""context_units_weights.csv"". this script first generates the weight matrix of transactions (titles) in the context units space as the dataset ""transaction_weights.csv"", and then computes the cosine similarity between the transaction weight vectors and the given pattern weight vector (e.g. the same author and title chosen in 2.3.2). the similarity matrix of transaction to author fps is saved as ""similarity_scores_of_transaction_to_author.csv"", and the similarity matrix of transaction to title fps is saved as ""similarity_scores_of_transaction_to_title.csv"". this script then generates the top 5 representative titles with highest similarity scores to the given author and to the given title pattern as dataset ""rep_titles_author_example1.csv"" and ""rep_titles_title_example1.csv"", respectively. 3.5. find synonyms of the given pattern (folder 5. synonyms2pattern) run ""find_synonyms_of_pattern.py"" or ""find_synonyms_of_pattern.ipynb"" to import ""context_units_weights.csv"" and to compute the cosine similarity between the candidate patterns of similarity (e.g. all closed frequent patterns of authors) and the given pattern (e.g. the same author and title chosen in 2.3.2). select the authors with the highest 5 similarity scores as the synonyms of the given author or title other than the author or title itself. this script generates 2 datasets for synonyms of author pattern: ""coauthor_to_author_example1.csv"", ""syn_titles_to_author_example1.csv"", and 2 datasets for synonyms of title pattern: ""syn_titles_to_title_example1.csv"" and ""syn_authors_to_title_example1.csv"". 3.6. a final display of the context annotation of the given pattern (folder 6. contextannotation) finally, run ""author_context_annotation_example1.py"" (or ""author_context_annotation_example1.ipynb"") and ""title_context_annotation_example1.py"" (or ""title_context_annotation_example1.ipnb"") to combine the output datasets generated in step 2.4, 2.5 and 2.6. this script builds the two examples of context annotation for the given author pattern and the given title pattern respectivley and fullfills the two experiments in paper section 5.1. progress report for reproducing the paper ""generating semantic annotations for frequent patterns with context "" raj datta, weidi ouyang, ye xu team tr squirrels 1) which tasks have been completed? * thorough study of paper and understanding of options * presentation draft prepared covering overview of paper * tightly defined scope, in discussion with bhavya, lead ta * to choose only one dataset (chosen to be dblp) * to choose and use only one clustering algorithm * to target completing the context modeling and frequent pattern mining steps through part 4.1 of the paper * consider 4.2 and 4.3 to be out of scope unless time allows after completing 4.1 * obtained clarification on various open questions and direction from bhavya, lead ta * obtained the raw dataset (dbpl.xml) * cleaned & parsed the dataset into csv format with ""author"" and ""title"" columns * decided the proper algorithm and libraries for ""closed frequent pattern"" mining and redundancy reduction (test pre-processings and pattern clustering). * using uiuc paper authors, created a toy dataset to test the concepts, algorithms and libraries. * initial trial on the dblp dataset to generate author itemset frequent patterns 2) which tasks are pending? * finalize selection of toolset/library for closed frequent patterns mining on author list and title list * generate formal itemsets and sequential frequent patterns for clean data set * using hierarchical clustering algorithm, remove redundancy from the initial closed frequent patterns * finalize the context modeling by implementing the weighting function on context indicator and pattern pairs * analysis of results * finalize presentation and report based on implementation and results 3) are you facing any challenges? * understanding the concepts and the algorithms in the paper * paper was written for many general scenarios (e.g. graphs/subgraphs) which aren't necessarily applicable to our implementation; trying to make it more generic made it more difficult to understand the applicability and our relevant extracts * some of the concepts weren't covered in depth in class (e.g. closed frequent patterns, maximal frequent patterns.) * some ambiguity (e.g. stop word removal, specifics of laplace smoothing) * since the paper is dated, we needed to find/explore some of our own more recent libraries and tools, hoping there would be minimal impact on the end result * implementing weighting functions (mutual information) to build context indicator vectors * timeline for completing all remaining optional parts of the paper. cs410 project proposal team tr squirrels 20-oct-2020 team tr squirrels has three members, captain ye xu (net id: yex2), member weidi ouyang (net id: wonyan2) and raj datta (net id: datta7). we will work on reproducing the listed paper ""generating semantic annotations for frequent patterns with context analysis"" using python as the primary coding language. this proposal addressed all related questions from week1 guideline and topic instruction. answers to these questions were highlighted. 1. background of the paper this paper proposed a novel approach to generate semantic annotation for frequent patterns that can better interpret the in depth and hidden meaning of the pattern. one meaningful application of this algorithm/procedure is in the field of computational biology. with tremendous sequencing data of genes and their transcripts (e.g. mrna sequence and protein sequence), annotation of functionality is much needed but barely and poorly supported by the lab-work evidence. most annotations in our biological databases are counted on computational work that link the known or predicted functions to frequent patterns observed in sequence data. one example is to connect the structural motif of a peptide that describe the connectivity of secondary structural element (e.g. ""helix-turn-helix"" or ""zinc finger"" ) to a potential function of a protein or part of the protein (e.g. dna binding domain of a transcription regulator). biologists, either working on ""omics"" (e.g. genomics, transcriptomics, etc.) or focusing on a particular gene cassette or metabolic pathway, all benefit from such application. a well tagged dataset leads to proficient and precise findings and this is true for applications in areas other than biological science. however, annotation of patterns is challenging and can be very labor intensive. taking genome annotation for example, in addition to manual annotation (curation), a large part of annotation work is completed by automatic annotation tools based on different algorithms. the most basic one is the homology search tool ""blast"" though structural and functional annotation are usually needed to identify and tag the biological information to the genomic elements. this whole process often involves both biological experiment (lab evidence) and ""in silico"" bioinformatic analysis. this paper, however, provided a novel approach that completely based on the text information retrieval and mining to interpret the discovered patterns and tested the procedure on three different datasets including a gene ontology annotation dataset. 2. resources and technique to reproduce the paper we will use the same or similar datasets to reproduce the results. the first dataset is dblp dataset that provides bibliographical information about computer science journals and proceedings and is available for download (https://hpi.de/naumann/projects/repeatability/datasets/dblp-dataset.html). the second dataset is no longer available from the paper link but similar datasets that include the gene ontology terms and motif for drosophila are accessible from gene ontology website (annotation database). the third dataset is provided by biocreative task 1b and is also no longer available. however, we can apply the same approach by crawling abstracts from the medline database with query keyword ""drosophila"" and recreate the dataset. we will apply the same technique used in the paper which include the two toolkits ""fp-close"" and ""clospan"" to generate ""closed frequent itemset"" and ""krovertz stemmer"" to stem the title words. same or similar clustering algorithms, either hierarchical clustering or one-pass clustering, will be applied for redundancy reduction. python libraries and packages, such as ""scipy"" and ""scikit-learn"" provide convenient built-in functions to implement these algorithms too. 3. brief timeline of the project course week dataset acquisition week 10 dataset processing based on understanding of the pattern context modeling week 10 - 12 dataset oriented modeling and semantic analysis week 13 - 14 coding and presentation finalization week 15 - 16 the detailed workload and distribution will evolve as the project goes. guidance of reproducing the paper: generating semantic annotations for frequent patterns with context analysis cs 410 course project ye xu, weidi ouyang, raj datta overview of the paper focus of the paper not about frequent pattern discovery, but about ""interpreting the frequent pattern with semantic annotations by constructing the context model of the frequent pattern selecting context indicators extracting representative transactions and semantically similar patterns input: frequent pattern output: semantic annotation of that pattern what is the semantic annotation of the frequent pattern 1. semantic definition of the pattern can be inferred by its context and words sharing the similar context : context indicator. 2. extract the data transactions that best represent the meanings of the pattern. 3. extract semantically similar patterns (ssps) of the given pattern, i.e., patterns with similar contexts as the original pattern. what is the semantic annotation of the frequent pattern definition example sentences synonyms or thesaurus definitions and problems the problem formulation section some concept transaction: a collection of itemsets, sequences, graphs... a pattern: a item, a subsequence, a subgraph... support: absolute number of transactions that contain the pattern the proportion of transactions containing the pattern in the entire transaction dataset some concepts frequent pattern: a pattern with support equal or larger than the specified threshold context unit: an object from the transaction set that carries semantic information and co-occurs with at least one pattern in the pattern set and in at least one transaction of the transaction set. some concepts context indicator: a select context unit of a frequent pattern. each of such units co-occur with the frequent pattern and associate with a weight to measure its strength of semantic indication of the pattern major task define context units to form the context vector space; design a strength weight for each unit to model the contexts of frequent patterns in order to extract the most significant context indicators as the ""definition"" for the given pattern unit. design similarity measures between a transaction and a pattern context and between the contexts of two patterns in order to extract representative transactions and semantically similar patterns to finalize the structured annotation of a given frequent pattern. context modeling vector space model for context modeling a transaction and the context of a frequent pattern both are represented as vectors of context units. context unit selection very flexible: any object in the database that carries semantic information or serves to discriminate patterns semantically can be a context unit. single items, transactions, patterns any group of items/patterns in the paper, context unit = pattern redundancy reduction  context unit == closed frequent pattern closed frequent pattern: a frequent pattern is closed if there exists no super-pattern that has the same support count as this original pattern. how to find closed and maximal frequent itemsets from fp-growth | by andrewngai | towards data science further redundancy removal by micro-clustering (both are agglomerative clustering with complete link) hierarchical clustering one pass clustering strength weighting for context unit intuitively, the strongest context indicators for a pattern should be those units that frequently co-occur with this pattern but infrequently co-occur with others. extract strongest context indicator as the definition with the weighting function for each context unit (ui) of a pattern, compute wi = w(ui, pa), rank ui  u with wi in descending order and select the top k units. semantic analysis and pattern annotation semantic similarity for pattern pa, its context vector is a vector of unit weighting functions c(a) = [w(u1, pa), w(u2, pa), ..., w(uk, pa)], where ui is the select context unit (closed frequent pattern). cosine distance is used to compute the similarity between two context vectors. extracting representative transactions represent a transaction as a vector in the same vector space as the context model of the frequent pattern pa, i.e., c(t) = w1, w2, ..., wk. compute cosine similarity between the transaction and the pattern: s(c(t), c(pa )). rank the similarity in descending order and select top k transactions. extracting semantically similar patterns let pc = {c(p1), ..., c(pc)} be the context vectors for {p1, ..., pc} which are believed to be good candidates for annotating the semantics of pa. compute sim(c(pi), c(pa)) for each pi  pc, rank them in descending order, and select the top k pi's. pc can be very flexible (e.g. the whole frequent pattern set). workflow of the dblp dataset parsing raw data find closed fps of authors as context units find closed sequential fps of titles as context units preprocessing titles fp mining processing title fps combine fps of authors and titles to form context units space weight matrix of context units annotation of given pattern by context units with top weights find representative titles of given pattern find synonyms of given pattern instruction for reproducing paper ""generating semantic annotations for frequent patterns with context analysis"" 1. overview of the github courseproject there are three folders, datasets, pythoncodes and jupyternotebookdemo, in the repository. the pythoncodes and the jupyternotebookdemo contain the same scripts but different file formats (py file and ipynb file). within each of these two script folders, there are 6 folders giving the execution order for reproducing the paper using the dblp dataset (paper section 5.1). all datasets imported and generated using the scripts are located in the datasets folder. the input and output paths of these datasets files need to be changed if downloaded to your local computer. except for the raw dataset ""dblp50000.xml"", all other datasets are generated by the scripts. in addition, the final report, the link (https://mediaspace.illinois.edu/media/t/1_2uzja14v) to the video demo and the powerpoint slides of paper review and project introduction are also in the courseproject repository. 2. python library and packages numpy, scipy, pandas, nltk, csv, os, mlxend and pyspark are libraries needed for running the srcipts. except for pyspark, all libraries can be downloaded and installed through pip or conda, depending on your preference and execution environment. the installation of pyspark (and spark) is a bit complicated and requires some environmental configuration and functional java of version 8.0 or above. here is the link of the tutorial how to install pyspark/spark on windows system: https://www.datacamp.com/community/tutorials/installation-of-pyspark 3. script running instruction 3.1. parse the raw data (folder 1. rawdataparsing) download ""dblp50000.xml"" and run script ""dblp_raw_data_parsing.py"" or ""dblp_raw_data_parsing.ipynb"". this generates the dataset ""dblp2000.csv"". 3.2. build the context units space (folder 2. contextmodeling) 3.2.1. find closed frequent pattern (fp) for authors using fpgrowth algorithm in mlxtend lib. run script ""author_fp_mining.py"" or ""author_fp_mining.ipynb"" to import ""dblp2000.csv"" and generate the dataset ""authorsfp2000_with_index.csv"", which contains 14 closed fps of authors and their transaction index in ""dblp2000.csv"" (e.g. author ""edwin r. hancock"" is a closed fp and it showed in the 839th, 1119th, 1127th, 1204th and 1576th row of dblp2000, its transaction index list is [839, 1119, 1127, 1204, 1576] ). 3.2.2. preprocess dblp titles run script ""dbpl_preprocessing_titles.py"" or ""dbpl_preprocessing_titles.ipynb"" to import ""dblp2000.csv"" and generate the dataset ""dblp2000_preprocessed_titles.txt"". in this step, stop words are removed and the titles are stemmed. 3.2.3. find title sequential pattern using prefixspan algorithm in pyspark run ""titles_seqpattern_mining.py"" to import ""dblp2000_preprocessed_titles.txt"" and to find closed sequential frequent patterns from titles of dblp2000. i had issue with configuration of spark in jupyter notebook environment therefore no corresponding script in ""ipynb"" format was put in the ""jupyternotebookdemo\contextmodeling"" directory . however, the python script was executed successfully in the windows cmd of my laptop. the script ""titles_seqpattern_mining.py"" generates an output folder containing the pattern file ""part-00000"". set the ""part-00000"" file to txt format. run ""title_sequentialfp_processing.py"" or ""title_sequentialfp_processing.ipynb"" to import ""part-00000.txt"" and generate the cleaned dataset ""titlesfp2000.csv"". 3.2.4. find transaction index of title sequential patterns run ""find_transaction_index_of_title_fps.py"" or ""find_transaction_index_of_title_fps.ipynb"" to import ""titlesfp2000.csv"" and generate ""titlesfp2000_with_index.csv"", which adds the list of transaction index to each title pattern. 3.2.5. reduce title fp redundancy by microclustering (hierarchical clustering) run ""hierarchical_clustering_titlefps2000.py"" or ""hierarchical_clustering_titlefps2000.ipynb"" to import ""titlesfp2000_with_index.csv"" and generate ""titlesfp2000_final.csv"". this script apply the hierarchical clustering with jaccard distance defined per paper and clusters 1912 title sequential patterns into 166 clusters. it chooses the most frequent pattern in each cluster as the ""centroid"" pattern to further build the context unit space. 3.2.6. combine author fps and title fps to build the context units space run ""dblp2000_context_units_with_transaction_index.py"" or ""dblp2000_context_units_with_transaction_index.ipynb"" to import 'authorsfp2000_with_index.csv' and 'titlesfp2000_final.csv' and to generate the final context units dataset ""dblp2000_context_units.csv"". 3.3. define given frequent patterns using context units defined above (folder 3. patterndefinition) 3.3.1. build weight vectors of fps in the context unit space run ""weighting_function.py"" or ""weighting_function.ipynb"" to import """"dbpl2000_context_units.csv"" and ""dblp2000.csv"" and generate ""context_units_weights.csv"". this script generates context vectors for all context units defined in 2.2 and builds a weight matrix between the pairwised context fps. each element of the matrix is the mutual information score between the context unit pair per definition in the paper. 3.3.2. annotate the given fp (e.g. an author) by context units with highest weights run ""defining_pattern_with_context_units.py"" or ""defining_pattern_with_context_units.ipynb"" to import ""context_units_weights.csv"". in this step, we first pick an author from the author fps and rank the weights of its context vector. the context units with top 5 weights are selected as the definition of this author and are saved as ""author_annotation_example1.csv"". similarly, we pick a title from the title fps and rank the weights of its context vector, and save the context units with top 5 weights as ""title_annotation_example1.csv"". 3.4. find representative titles of the given pattern (folder 4. representativetitles2pattern) run script ""find_representative_titles_to_pattern.py"" or ""find_representative_titles_to_pattern.ipynb"" to import ""dblp2000_context_units.csv"", ""dblp2000.csv"" and ""context_units_weights.csv"". this script first generates the weight matrix of transactions (titles) in the context units space as the dataset ""transaction_weights.csv"", and then computes the cosine similarity between the transaction weight vectors and the given pattern weight vector (e.g. the same author and title chosen in 2.3.2). the similarity matrix of transaction to author fps is saved as ""similarity_scores_of_transaction_to_author.csv"", and the similarity matrix of transaction to title fps is saved as ""similarity_scores_of_transaction_to_title.csv"". this script then generates the top 5 representative titles with highest similarity scores to the given author and to the given title pattern as dataset ""rep_titles_author_example1.csv"" and ""rep_titles_title_example1.csv"", respectively. 3.5. find synonyms of the given pattern (folder 5. synonyms2pattern) run ""find_synonyms_of_pattern.py"" or ""find_synonyms_of_pattern.ipynb"" to import ""context_units_weights.csv"" and to compute the cosine similarity between the candidate patterns of similarity (e.g. all closed frequent patterns of authors) and the given pattern (e.g. the same author and title chosen in 2.3.2). select the authors with the highest 5 similarity scores as the synonyms of the given author or title other than the author or title itself. this script generates 2 datasets for synonyms of author pattern: ""coauthor_to_author_example1.csv"", ""syn_titles_to_author_example1.csv"", and 2 datasets for synonyms of title pattern: ""syn_titles_to_title_example1.csv"" and ""syn_authors_to_title_example1.csv"". 3.6. a final display of the context annotation of the given pattern (folder 6. contextannotation) finally, run ""author_context_annotation_example1.py"" (or ""author_context_annotation_example1.ipynb"") and ""title_context_annotation_example1.py"" (or ""title_context_annotation_example1.ipnb"") to combine the output datasets generated in step 2.4, 2.5 and 2.6. this script builds the two examples of context annotation for the given author pattern and the given title pattern respectivley and fullfills the two experiments in paper section 5.1."	['cs', 'project', 'report', 'reproduction', 'paper', 'generating', 'semantic', 'annotations', 'frequent', 'patterns', 'context', 'analysis', 'team', 'tr', 'squirrels', 'ye', 'xu', 'weidi', 'ouyang', 'raj', 'datta', 'introduction', 'focused', 'reproducing', 'chengxiang', 'zhai', 'et', 'al', 'see', 'reference', 'interested', 'since', 'broad', 'applicability', 'covering', 'variety', 'data', 'types', 'also', 'enthused', 'fact', 'used', 'multiple', 'mining', 'techniques', 'clustering', 'similarity', 'functions', 'believed', 'would', 'allow', 'us', 'solidify', 'knowledge', 'based', 'class', 'materials', 'learning', 'exploring', 'new', 'areas', 'well', 'eg', 'uses', 'pattern', 'fundamental', 'building', 'block', 'occur', 'datasets', 'however', 'interpreted', 'understand', 'relevance', 'goal', 'create', 'way', 'attach', 'annotate', 'meaningful', 'information', 'lets', 'better', 'analogy', 'dictionary', 'taken', 'whereby', 'words', 'looked', 'description', 'examples', 'related', 'presented', 'fully', 'lookedup', 'word', 'equivalent', 'universe', 'identify', 'definition', 'indicators', 'b', 'representative', 'transactions', 'c', 'semantically', 'similar', 'specifics', 'extracted', 'series', 'steps', 'algorithms', 'detailed', 'undertook', 'effort', 'first', 'understanding', 'finalizing', 'scope', 'selecting', 'appropriate', 'tools', 'libraries', 'implementing', 'desired', 'result', 'evaluated', 'accomplished', 'realized', 'full', 'require', 'much', 'expected', 'endeavored', 'refine', 'clearly', 'realistically', 'consultation', 'agreement', 'lead', 'ta', 'bhavya', 'decided', 'following', 'use', 'one', 'dataset', 'three', 'implement', 'two', 'removal', 'title', 'redundancy', 'entire', 'sequence', 'stepsalgorithms', 'necessary', 'extract', 'define', 'given', 'units', 'space', 'section', 'leave', 'extraction', 'optional', 'implemented', 'time', 'allowed', 'match', 'results', 'papers', 'database', 'decide', 'either', 'implementation', 'choose', 'dblp', 'specifically', 'started', 'focus', 'efforts', 'author', 'attributes', 'itemset', 'sequential', 'agglomerative', 'hierarchical', 'microclustering', 'algorithm', 'mentioned', 'wrote', 'scripts', 'python', 'chose', 'nltk', 'stemming', 'stopwords', 'titles', 'mlxend', 'library', 'authors', 'pyspark', 'modern', 'pythonbased', 'good', 'adoption', 'industry', 'written', 'may', 'somewhat', 'outdated', 'using', 'fpgrowth', 'code', 'sample', 'adjustment', 'finding', 'closed', 'prefixspan', 'porter', 'stemmer', 'opposed', 'krovertz', 'due', 'familiarity', 'possibility', 'higher', 'false', 'negative', 'rates', 'default', 'stopword', 'english', 'german', 'languages', 'mentions', 'removed', 'without', 'mentioning', 'acquisition', 'preprocessing', 'acquired', 'raw', 'parsed', 'names', 'resulted', 'rows', 'found', 'computations', 'scaled', 'large', 'gigantic', 'distance', 'matrix', 'taking', 'long', 'size', 'take', 'smaller', 'slice', 'year', 'recommendation', 'reduced', 'manageable', 'obtaining', 'clean', 'next', 'step', 'get', 'become', 'blocks', 'rest', 'approach', 'lower', 'support', 'count', 'obtained', 'sequences', 'hence', 'likelihood', 'part', 'defining', 'find', 'reverse', 'index', 'turn', 'helps', 'downstream', 'weight', 'vectors', 'complete', 'linkage', 'outlined', 'jaccard', 'measure', 'defined', 'purpose', 'visualization', 'resulting', 'dendrogram', 'figure', 'elbow', 'iterations', 'thresholdcutoff', 'maximum', 'depth', 'give', 'clusters', 'tested', 'range', 'cutoff', 'thresholds', 'gave', 'different', 'numbers', 'around', 'velocity', 'curve', 'branches', 'slows', 'examined', 'clustered', 'points', 'felt', 'anything', 'less', 'lack', 'specificity', 'lose', 'therefore', 'heuristic', 'best', 'weighting', 'choice', 'core', 'modeling', 'set', 'combining', 'pool', 'computed', 'mutual', 'pairwise', 'generated', 'x', 'features', 'achieved', 'suitable', 'parts', 'identifying', 'example', 'created', 'annotation', 'top', 'weighted', 'synonyms', 'verify', 'soundness', 'conclusion', 'chosen', 'processing', 'target', 'comparison', 'became', 'simply', 'presents', 'contextual', 'ssps', 'knew', 'wouldnt', 'exactly', 'indicative', 'power', 'shown', 'intended', 'similarly', 'quite', 'aspects', 'sections', 'makes', 'targeted', 'ralf', 'steinmetz', 'synonym', 'domain', 'name', 'web', 'histories', 'zoomable', 'user', 'interface', 'sanjay', 'kumar', 'madria', 'interfac', 'virtuellen', 'intelligent', 'graphical', 'design', 'utilizing', 'fuzzy', 'agents', 'roberto', 'gorrieri', 'process', 'descript', 'realistic', 'force', 'feedback', 'virtual', 'reality', 'diagnostic', 'surgery', 'simulators', 'thomas', 'huang', 'workbench', 'simulating', 'difficult', 'queueing', 'problems', 'adaptive', 'importance', 'sampling', 'simulation', 'networks', 'edwin', 'r', 'hancock', 'summari', 'blackboard', 'segmentation', 'video', 'image', 'lecture', 'applications', 'gerald', 'sommer', 'high', 'speed', 'realiti', 'receiv', 'diagnost', 'debug', 'program', 'analysi', 'access', 'versubharat', 'k', 'bhargava', 'approximate', 'model', 'computation', 'blocking', 'probabilities', 'cellular', 'repeated', 'calls', 'bill', 'overall', 'feel', 'useful', 'convinced', 'help', 'intelligence', 'reliant', 'various', 'built', 'easily', 'larger', 'providing', 'computing', 'tuned', 'application', 'modifying', 'parameters', 'exercise', 'approaches', 'learnt', 'course', 'references', 'q', 'mei', 'xin', 'h', 'cheng', 'j', 'han', 'proc', 'th', 'acm', 'sigkdd', 'international', 'conference', 'discovery', 'kdd', 'pp', 'source', 'httpshpidenaumannprojectsrepeatabilitydatasetsdblp', 'datasethtml', 'citation', 'frequencyaware', 'measureslange', 'dustin', 'naumann', 'felix', 'maximal', 'itemsets', 'andrewngai', 'towards', 'science', 'github', 'site', 'httpsgithubcombearnomorecourseproject', 'presentation', 'developed', 'tutorial', 'available', 'httpsgithubcombearnomorecourseprojectblobmainguidanceofreproducing', 'thepaperpptx', 'walkthrough', 'details', 'httpsmediaspaceillinoisedumediat_uzjav', 'appendix', 'setup', 'instructions', 'instruction', 'readme', 'file', 'overview', 'courseproject', 'folders', 'pythoncodes', 'jupyternotebookdemo', 'repository', 'contain', 'formats', 'py', 'ipynb', 'within', 'script', 'giving', 'execution', 'order', 'imported', 'located', 'folder', 'input', 'output', 'paths', 'files', 'need', 'changed', 'downloaded', 'local', 'computer', 'except', 'dblpxml', 'addition', 'final', 'link', 'demo', 'powerpoint', 'slides', 'review', 'packages', 'numpy', 'scipy', 'pandas', 'csv', 'os', 'needed', 'running', 'srcipts', 'installed', 'pip', 'conda', 'depending', 'preference', 'environment', 'installation', 'spark', 'bit', 'complicated', 'requires', 'environmental', 'configuration', 'functional', 'java', 'version', 'install', 'pysparkspark', 'windows', 'system', 'httpswwwdatacampcomcommunitytutorialsinstallationofpyspark', 'parse', 'rawdataparsing', 'download', 'run', 'dblp_raw_data_parsingpy', 'dblp_raw_data_parsingipynb', 'generates', 'dblpcsv', 'build', 'contextmodeling', 'fp', 'mlxtend', 'lib', 'author_fp_miningpy', 'author_fp_miningipynb', 'import', 'generate', 'authorsfp_with_indexcsv', 'contains', 'fps', 'transaction', 'showed', 'row', 'list', 'preprocess', 'dbpl_preprocessing_titlespy', 'dbpl_preprocessing_titlesipynb', 'dblp_preprocessed_titlestxt', 'stop', 'stemmed', 'titles_seqpattern_miningpy', 'issue', 'jupyter', 'notebook', 'corresponding', 'format', 'put', 'jupyternotebookdemocontextmodeling', 'directory', 'executed', 'successfully', 'cmd', 'laptop', 'containing', 'txt', 'title_sequentialfp_processingpy', 'title_sequentialfp_processingipynb', 'cleaned', 'titlesfpcsv', 'find_transaction_index_of_title_fpspy', 'find_transaction_index_of_title_fpsipynb', 'titlesfpcsvand', 'titlesfp_with_indexcsv', 'adds', 'reduce', 'hierarchical_clustering_titlefpspy', 'hierarchical_clustering_titlefpsipynb', 'titlesfp_finalcsv', 'applies', 'per', 'chooses', 'cluster', 'centroid', 'unit', 'combine', 'dblp_context_units_with_transaction_indexpy', 'dblp_context_units_with_transaction_indexipynb', 'dblp_context_unitscsv', 'patterndefinition', 'weighting_functionpy', 'weighting_functionipynb', 'dbpl_context_unitscsv', 'context_units_weightscsv', 'builds', 'pairwised', 'element', 'score', 'pair', 'highest', 'weights', 'defining_pattern_with_context_unitspy', 'defining_pattern_with_context_unitsipynb', 'pick', 'rank', 'vector', 'selected', 'saved', 'author_annotation_examplecsv', 'save', 'title_annotation_examplecsv', 'representativetitlespattern', 'find_representative_titles_to_patternpy', 'find_representative_titles_to_patternipynb', 'transaction_weightscsv', 'computes', 'cosine', 'similarity_scores_of_transaction_to_authorcsv', 'similarity_scores_of_transaction_to_titlecsv', 'scores', 'rep_titles_author_examplecsv', 'rep_titles_title_examplecsv', 'respectively', 'synonymspattern', 'find_synonyms_of_patternpy', 'find_synonyms_of_patternipynb', 'compute', 'candidate', 'select', 'coauthor_to_author_examplecsv', 'syn_titles_to_author_examplecsv', 'syn_titles_to_title_examplecsv', 'syn_authors_to_title_examplecsv', 'display', 'contextannotation', 'finally', 'author_context_annotation_examplepy', 'author_context_annotation_exampleipynb', 'title_context_annotation_examplepy', 'title_context_annotation_exampleipnb', 'respectivley', 'fullfills', 'experiments', 'progress', 'tasks', 'completed', 'thorough', 'study', 'options', 'draft', 'prepared', 'tightly', 'discussion', 'completing', 'consider', 'unless', 'allows', 'clarification', 'open', 'questions', 'direction', 'dbplxml', 'columns', 'proper', 'reduction', 'test', 'preprocessings', 'uiuc', 'toy', 'concepts', 'initial', 'trial', 'pending', 'finalize', 'selection', 'toolsetlibrary', 'formal', 'remove', 'function', 'indicator', 'pairs', 'facing', 'challenges', 'many', 'general', 'scenarios', 'graphssubgraphs', 'arent', 'necessarily', 'applicable', 'trying', 'make', 'generic', 'made', 'relevant', 'extracts', 'werent', 'covered', 'ambiguity', 'laplace', 'smoothing', 'dated', 'findexplore', 'recent', 'hoping', 'minimal', 'impact', 'end', 'timeline', 'remaining', 'proposal', 'oct', 'members', 'captain', 'net', 'id', 'yex', 'member', 'wonyan', 'work', 'listed', 'primary', 'coding', 'language', 'addressed', 'week', 'guideline', 'topic', 'answers', 'highlighted', 'background', 'proposed', 'novel', 'interpret', 'hidden', 'meaning', 'algorithmprocedure', 'field', 'computational', 'biology', 'tremendous', 'sequencing', 'genes', 'transcripts', 'mrna', 'protein', 'functionality', 'barely', 'poorly', 'supported', 'labwork', 'evidence', 'biological', 'databases', 'counted', 'known', 'predicted', 'observed', 'connect', 'structural', 'motif', 'peptide', 'describe', 'connectivity', 'secondary', 'helixturnhelix', 'zinc', 'finger', 'potential', 'dna', 'binding', 'transcription', 'regulator', 'biologists', 'working', 'omics', 'genomics', 'transcriptomics', 'etc', 'focusing', 'particular', 'gene', 'cassette', 'metabolic', 'pathway', 'benefit', 'tagged', 'leads', 'proficient', 'precise', 'findings', 'true', 'challenging', 'labor', 'intensive', 'genome', 'manual', 'curation', 'automatic', 'basic', 'homology', 'search', 'tool', 'blast', 'though', 'usually', 'tag', 'genomic', 'elements', 'whole', 'often', 'involves', 'experiment', 'lab', 'silico', 'bioinformatic', 'provided', 'completely', 'text', 'retrieval', 'discovered', 'procedure', 'including', 'ontology', 'resources', 'technique', 'reproduce', 'provides', 'bibliographical', 'journals', 'proceedings', 'httpshpidenaumannprojectsrepeatabilitydatasetsdblpdatasethtml', 'second', 'longer', 'include', 'terms', 'drosophila', 'accessible', 'website', 'third', 'biocreative', 'task', 'apply', 'crawling', 'abstracts', 'medline', 'query', 'keyword', 'recreate', 'toolkits', 'fpclose', 'clospan', 'stem', 'onepass', 'applied', 'scikitlearn', 'provide', 'convenient', 'builtin', 'brief', 'oriented', 'finalization', 'workload', 'distribution', 'evolve', 'goes', 'guidance', 'interpreting', 'constructing', 'extracting', 'inferred', 'sharing', 'represent', 'meanings', 'ie', 'contexts', 'original', 'sentences', 'thesaurus', 'definitions', 'problem', 'formulation', 'concept', 'collection', 'graphs', 'item', 'subsequence', 'subgraph', 'absolute', 'number', 'proportion', 'equal', 'specified', 'threshold', 'object', 'carries', 'cooccurs', 'least', 'cooccur', 'associate', 'strength', 'indication', 'major', 'form', 'significant', 'measures', 'structured', 'represented', 'flexible', 'serves', 'discriminate', 'single', 'items', 'group', 'itemspatterns', 'exists', 'superpattern', 'pass', 'intuitively', 'strongest', 'frequently', 'infrequently', 'others', 'ui', 'wi', 'wui', 'pa', 'u', 'descending', 'ca', 'wu', 'wuk', 'ct', 'w', 'wk', 'sct', 'cpa', 'let', 'pc', 'cp', 'cpc', 'p', 'candidates', 'annotating', 'semantics', 'simcpi', 'pi', 'pis', 'workflow', 'parsing', 'parttxt']
https://github.com/blake-wright/CourseProject	"course project proposal 1. i, blake wright, will be working on this project individually. netid: blakekw2 2. i will join the text classification competition. 3. i am ready to learn state-of-the-art neural network classifiers. i am in constant search for classifiers or frameworks that i will be using. bert seems to be a very popular framework. however, i did also find xlnet which can empirically outperform bert on some instances and roberta which also outperforms bert on the glue benchmark. i am interested in some of the later listed models that are based off bert as i find it interesting that they tried to address key problems they found lacking in bert. experience: i have no experience in any of these methods. i have used tensorflow very mildly to try to build a prediction model for stock and cryptocurrency prices. however, no experience in using text classification. i hope this project will further my interest in using these frameworks. 4. i plan on using python as my programming language. blake wright nov 29, 2020 progress report - text classification 1. i have done more research and determined to use bert (from google) in order to complete my project. i have also done research on how to use bert and some tutorials to familiarize myself with the libraries. i have also got my environment, libraries, and data set as needed and ran a short test to ensure i had everything. 2. the main pending task is the implementation of the coding and further documentation on my overall project. 3. the primary challenge was time. i have been busier than expected with my job the past couple weeks and haven't been able to really get to focus on the project. however, the next couple weeks i will be able to focus in and complete the project. i do feel like the implementation and producing a reasonable score will be the most difficult part. i am sure i will run into roadblocks during the coding. classification competition - analyzing twitter tweets video link to presentation: https://drive.google.com/file/d/17dmsy3kkd93lzayn_cvysvckzseqahd7/view?usp=sharing in the video i go over most of this readme besides the setup. i do have another video below that is my own video of the environment setup. video link to environment setup (farther down you will see the videos from jeff heaton where i sourced this information): https://drive.google.com/file/d/1hqfquth2hxuuuufbrt_a4rnttmnmoq8x/view?usp=sharing conda env create -v -f tensorflow.yml python -m ipykernel install --user --name tensorflow --display-name ""python 3.7 (tensorflow)"" setting up your environment you will need the following libraries to successfully run my project: library version used pip install cmd tensorflow 2.3.1 pip install tensorflow sklearn-learn 0.23 pip install sklearn transformers 3.5.1 pip install transformers pandas 1.1.3 pip install pandas numpy 1.18.5 pip install numpy torch 1.7.1 pip install torch the following videos can be used as a reference on how to setup a miniconda python environment if you don't have any of the libraries and want some setup automatically. however, for the tensorflow.yml file you will want to update the tensorflow=2.0 to tensorflow=2.3.1. or just copy the below. ``` name: tensorflow dependencies: - python=3.7 - pip>=19.0 - jupyter - tensorflow=2.3.1 - scikit-learn - scipy - pandas - pandas-datareader - matplotlib - pillow - tqdm - requests - h5py - pyyaml - flask - boto3 - pip: - bayesian-optimization - gym - kaggle ``` for windows: https://www.youtube.com/watch?v=rgo8bbngb8w for macos: https://www.youtube.com/watch?v=mpuvdld932c&t=372s running the project before trying to run the project note that this is a very resource demanding program. i have tested it on the following pieces of hardware. desktop: cpu: 3.9 ghz ryzen 7 3800x ram: 32gb disk: < 10gb available laptop: cpu: 3.1 ghz i5 ram: 16gb disk: < 200gb available if your hardware isn't able to run please contact me and you can use my system. i am working on additional ways to test on lower ram devices. to run this project: if you have jupyter notebook you can locate the file, select file, and choose the cell tab and then select run all. structure of the project i first imported the data that was given by using the pandas library. ``` read in train & test data traindata = pd.read_json('train.jsonl', lines = true) testdata = pd.read_json('test.jsonl', lines = true) ``` next i converted the labels (""sarcasm"" and ""not_sarcasm"") to binary values. this was done because the model requires a binary label to respond to. for i in range(len(traindata)): if traindata['label'][i] == ""sarcasm"": traindata['label'][i] = 1 else: traindata['label'][i] = 0 from here i set my modelid, tokenizer, and model. i choose to include case and i felt that sometimes when people are sending out sarcastic tweets they may often use letter case to further voice their sarcasm. as you can see i used the autotokenizer from the transformers library as i would not have to switch it when using different models. i initiailly wrote this project using distilbert, which is far faster than bert and is almost as accurate. i also did try using bert, i did get better results (~2% accuracy) but when i uploaded them to the leaderboard they were slightly worse. i also tried xlnet and roberta but with my code they were performing up to 10% less accurate than bert. i believe this was because i was not able to configure them as precisely. ``` setting modelid, tokenizer, and model modelid = ""distilbert-base-cased"" tokenizer = autotokenizer.from_pretrained(modelid) model = distilbertmodel.from_pretrained(modelid) ``` next up was getting all of the data ready for the model. tokenizing the data, padding the lengths, and masking so the padding was not used. ``` tokenized = traindata['response'].apply((lambda x: tokenizer.encode(x, add_special_tokens = true))) tokenized_2 = testdata['response'].apply((lambda x: tokenizer.encode(x, add_special_tokens = true))) trainpad = pad_sequences(tokenized, maxlen = 100, padding='post') testpad = pad_sequences(tokenized_2, maxlen = 100, padding='post') trainmask = np.where(trainpad != 0,1,0) testmask = np.where(testpad != 0,1,0) converting to int64 traininput = torch.tensor(trainpad).to(torch.int64) testinput = torch.tensor(testpad).to(torch.int64) converting to tensor type trainmask = torch.tensor(trainmask) testmask = torch.tensor(testmask) ``` i concurrently modeled both the training set and the testing set. i have done these concurrently because upon prediction the input will have to match what it was trained against. with torch.no_grad(): output = model(traininput, attention_mask = trainmask) with torch.no_grad(): outputtest = model(testinput, attention_mask = testmask) here i prepared features and labels that will be used to train and test. trainfeats = output[0][:,0,:].numpy() testfeats = outputtest[0][:,0,:].numpy() labels = traindata['label'] trainfeats, valfeats, train_labels, test_labels = train_test_split(trainfeats, labels) i tried many, many different classifiers and randomforestclassifier teneded to fair the best at ~77%. 77% accuracy was lower than expected and desired. i will expand on improvements in the future in the 'improvement' section. classifier = randomforestclassifier(n_estimators=500, max_depth=none, min_samples_split=8, random_state=2) classifier.fit(trainfeats, train_labels) classifier.score(valfeats, test_labels) for the rest of the program i am just creating the answer file and writing to it. there is a small bug where it sometimes does not write the entire file. i am troubleshooting this problem. i included a print screen so you could see the results being written. ``` results = classifier.predict(testfeats) f = open(""answer.txt"", ""w"") print(results[1799]) for i in range(len(results)): id = str(testdata['id'][i]) answer = str(results[i]) f.write(id) f.write(',') if answer == ""1"": f.write(""sarcasm"") else: f.write(""not_sarcasm"") f.write('\n') print(id, answer) ``` improvements i spent a large (maybe too much) time trying to train the model instead of using a pretrained model for bert. i was not very successful in this and wish i could have had more time to expand on it as i feel like this would have greatly increased results. i also considered manipulating the tweets. some things i considered were taking out common words that would be used in a sarcastic or not sarcastic and throwing them out as my model may have been able to better train on relevant information. there was also consideration on furthering expanding weighting on the hashtags found in tweets as many of them seemed to correlate strongly from my point of view. however, i was not sure how to go about this. i did not use the context as part of the analysis as well. i feel like this could have been a big improvement without too much more additional code. however, time was a factor in this project and i was not able to complete this task. credit/documentation huggingface's website was a great help. the transformers library is maintained by them which was used in this project. they also provide ample of documentation on how to use them. i also found their examples extremely useful in understanding the flow of the program. i have included links to both the home page and to the example. https://huggingface.co/ https://huggingface.co/transformers/model_doc/distilbert.html (documentation on library) https://github.com/huggingface/notebooks/blob/master/examples/text_classification.ipynb jay alammar was also a great help to this project. his visual guide helped fill in knowledge gaps of how each part of the model worked and which types it needed. (http://jalammar.github.io/a-visual-guide-to-using-bert-for-the-first-time/)"	['course', 'project', 'proposal', 'blake', 'wright', 'working', 'individually', 'netid', 'blakekw', 'join', 'text', 'classification', 'competition', 'ready', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'constant', 'search', 'frameworks', 'using', 'bert', 'seems', 'popular', 'framework', 'however', 'also', 'find', 'xlnet', 'empirically', 'outperform', 'instances', 'roberta', 'outperforms', 'glue', 'benchmark', 'interested', 'later', 'listed', 'models', 'based', 'interesting', 'tried', 'address', 'key', 'problems', 'found', 'lacking', 'experience', 'methods', 'used', 'tensorflow', 'mildly', 'try', 'build', 'prediction', 'model', 'stock', 'cryptocurrency', 'prices', 'hope', 'interest', 'plan', 'python', 'programming', 'language', 'nov', 'progress', 'report', 'done', 'research', 'determined', 'use', 'google', 'order', 'complete', 'tutorials', 'familiarize', 'libraries', 'got', 'environment', 'data', 'set', 'needed', 'ran', 'short', 'test', 'ensure', 'everything', 'main', 'pending', 'task', 'implementation', 'coding', 'documentation', 'overall', 'primary', 'challenge', 'time', 'busier', 'expected', 'job', 'past', 'couple', 'weeks', 'havent', 'able', 'really', 'get', 'focus', 'next', 'feel', 'like', 'producing', 'reasonable', 'score', 'difficult', 'part', 'sure', 'run', 'roadblocks', 'analyzing', 'twitter', 'tweets', 'video', 'link', 'presentation', 'httpsdrivegooglecomfileddmsykkdlzayn_cvysvckzseqahdviewuspsharing', 'go', 'readme', 'besides', 'setup', 'another', 'farther', 'see', 'videos', 'jeff', 'heaton', 'sourced', 'information', 'httpsdrivegooglecomfiledhqfquthhxuuuufbrt_arnttmnmoqxviewuspsharing', 'conda', 'env', 'create', 'v', 'f', 'tensorflowyml', 'ipykernel', 'install', 'user', 'name', 'displayname', 'setting', 'need', 'following', 'successfully', 'library', 'version', 'pip', 'cmd', 'sklearnlearn', 'sklearn', 'transformers', 'pandas', 'numpy', 'torch', 'reference', 'miniconda', 'dont', 'want', 'automatically', 'file', 'update', 'copy', 'dependencies', 'jupyter', 'scikitlearn', 'scipy', 'pandasdatareader', 'matplotlib', 'pillow', 'tqdm', 'requests', 'hpy', 'pyyaml', 'flask', 'boto', 'bayesianoptimization', 'gym', 'kaggle', 'windows', 'httpswwwyoutubecomwatchvrgobbngbw', 'macos', 'httpswwwyoutubecomwatchvmpuvdldcts', 'running', 'trying', 'note', 'resource', 'demanding', 'program', 'tested', 'pieces', 'hardware', 'desktop', 'cpu', 'ghz', 'ryzen', 'x', 'ram', 'gb', 'disk', 'available', 'laptop', 'isnt', 'please', 'contact', 'system', 'additional', 'ways', 'lower', 'devices', 'notebook', 'locate', 'select', 'choose', 'cell', 'tab', 'structure', 'first', 'imported', 'given', 'read', 'train', 'traindata', 'pdread_jsontrainjsonl', 'lines', 'true', 'testdata', 'pdread_jsontestjsonl', 'converted', 'labels', 'sarcasm', 'not_sarcasm', 'binary', 'values', 'requires', 'label', 'respond', 'rangelentraindata', 'traindatalabeli', 'else', 'modelid', 'tokenizer', 'include', 'case', 'felt', 'sometimes', 'people', 'sending', 'sarcastic', 'may', 'often', 'letter', 'voice', 'autotokenizer', 'would', 'switch', 'different', 'initiailly', 'wrote', 'distilbert', 'far', 'faster', 'almost', 'accurate', 'better', 'results', 'accuracy', 'uploaded', 'leaderboard', 'slightly', 'worse', 'code', 'performing', 'less', 'believe', 'configure', 'precisely', 'distilbertbasecased', 'autotokenizerfrom_pretrainedmodelid', 'distilbertmodelfrom_pretrainedmodelid', 'getting', 'tokenizing', 'padding', 'lengths', 'masking', 'tokenized', 'traindataresponseapplylambda', 'tokenizerencodex', 'add_special_tokens', 'tokenized_', 'testdataresponseapplylambda', 'trainpad', 'pad_sequencestokenized', 'maxlen', 'paddingpost', 'testpad', 'pad_sequencestokenized_', 'trainmask', 'npwheretrainpad', 'testmask', 'npwheretestpad', 'converting', 'int', 'traininput', 'torchtensortrainpadtotorchint', 'testinput', 'torchtensortestpadtotorchint', 'tensor', 'type', 'torchtensortrainmask', 'torchtensortestmask', 'concurrently', 'modeled', 'training', 'testing', 'upon', 'input', 'match', 'trained', 'torchno_grad', 'output', 'modeltraininput', 'attention_mask', 'outputtest', 'modeltestinput', 'prepared', 'features', 'trainfeats', 'outputnumpy', 'testfeats', 'outputtestnumpy', 'traindatalabel', 'valfeats', 'train_labels', 'test_labels', 'train_test_splittrainfeats', 'many', 'randomforestclassifier', 'teneded', 'fair', 'best', 'desired', 'expand', 'improvements', 'future', 'improvement', 'section', 'classifier', 'randomforestclassifiern_estimators', 'max_depthnone', 'min_samples_split', 'random_state', 'classifierfittrainfeats', 'classifierscorevalfeats', 'rest', 'creating', 'answer', 'writing', 'small', 'bug', 'write', 'entire', 'troubleshooting', 'problem', 'included', 'print', 'screen', 'could', 'written', 'classifierpredicttestfeats', 'openanswertxt', 'w', 'printresults', 'rangelenresults', 'id', 'strtestdataidi', 'strresultsi', 'fwriteid', 'fwrite', 'fwritesarcasm', 'fwritenot_sarcasm', 'fwriten', 'printid', 'spent', 'large', 'maybe', 'much', 'instead', 'pretrained', 'successful', 'wish', 'greatly', 'increased', 'considered', 'manipulating', 'things', 'taking', 'common', 'words', 'throwing', 'relevant', 'consideration', 'furthering', 'expanding', 'weighting', 'hashtags', 'seemed', 'correlate', 'strongly', 'point', 'view', 'context', 'analysis', 'well', 'big', 'without', 'factor', 'creditdocumentation', 'huggingfaces', 'website', 'great', 'help', 'maintained', 'provide', 'ample', 'examples', 'extremely', 'useful', 'understanding', 'flow', 'links', 'home', 'page', 'example', 'httpshuggingfaceco', 'httpshuggingfacecotransformersmodel_docdistilberthtml', 'httpsgithubcomhuggingfacenotebooksblobmasterexamplestext_classificationipynb', 'jay', 'alammar', 'visual', 'guide', 'helped', 'fill', 'knowledge', 'gaps', 'worked', 'types', 'httpjalammargithubioavisualguidetousingbertforthefirsttime']
https://github.com/bo8b/CourseProject	"cs 410: text information systems group project documentation team green koalas team members: yuxiang huang - yh43@illinois.edu bob manasco - manasco2@illinois.edu - group coordinator cullen stone - cpstone2@illinois.edu project installation: the following instructions have been tested with python2.7 on linux and macos source code (including team green koala enhancements) can be found at https://github.com/cs410fall2020/courseproject you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html create the index in elasticsearch by running python create_es_index.py from educationalweb/ download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under educationalweb/pdf.js/static/slides/ from educationalweb/pdf.js/build/generic/web, run the following command: gulp server in another terminal window, run python app.py from educationalweb/ the site should then be available at http://localhost:8096/ how to use: the educationalweb system was developed by some of the students in prof. zhai's research group for navigating through course slides. at present, it only contains the slides for cs410, but could be expanded in the future to include other courses. note that if more courses are added in the future, the names for their directories and slides must follow the same naming conventions as used for cs410: directory name can really be anything, but it may be helpful if it is a descriptive name of the lecture series. for instance, one cs410 directory was named ""06_lesson-3-6-evaluation-of-tr-systems-practical-issues_3.6_evaluation_of_tr_systems_-_practical_issues.txt"". using a name this long is not required, nor is it even recommended, as it causes problems for windows users. then within that directory, the slide names must be sequentially numbered, starting at zero (""0"") in this format: class name (""cs-410"") followed by four dashes (""----"") followed by directory name followed by four dashes (""----"") followed by ""slide"" + number + "".pdf"" below are some of the features of the educationalweb tool: choosing a lecture using the drop-down list in the navigation bar sequentially navigating through the lectures/slides using the next and prev buttons at the bottom of a slide searching for relevant slides using the search bar at the bottom of a slide navigating to a related/recommend slide from the column on the right finding an explanation of a term/phrase on the slide by highlighting it and then clicking on the ""explain selected text"" button on the top-right of a slide. it will try to retrieve a relevant section from professor's textbook that contains an explanation of the selected phrase. downloading the current slide being viewed by clicking on the ""download"" button, to the right of the ""explain selected text"" button. downloading all slides for the lecture for the current slide being viewed by clicking on the ""download all"" button, to the right of the ""download"" button. (***note: this is the function that was added by team green koalas***) download download explain selected text explain selected text download all download all implementation: first, in the /build/generic/web/viewer.js file, we included some code that allows us to see the url for the slide currently being viewed. then, in the /build/generic/web/viewer.html file, we updated some code and wrote several new functions: alertall() is used to get the current-slide url we provided in viewer.js (above) and convert it to a usable format for our purposes. geturls() converts the formatted current-slide url into a list of potential slides that may be contained within that file's folder. zipitup() takes that list of potential file names and adds any existing files to a zip file (""slide-series.zip"") and then provides the opportunity for a user to save that zip file through their browser. we also added a new button ""download all"" to initiate this function. finally, in the /build/generic/web/viewer.css file, we made changes necessary to format the ""download all"" button referenced above. we also fixed the graphic for the existing button for the ""explain selected text"" button to allow it to fit properly. justification: our intention was to also take on one additional improvement (performance, enabling new courses, etc.), but ran into several impediments that affected our ability to do so. first, setup of the educationalweb environment took much, much longer than anticipated. one team member was tracking his time and can show (in timesheet.xlxs) that he spent over 10 hours just trying to configure the system. most of the problems were caused either by attempting to set up the tool in a windows environment or using a newer version of python. another team member finally had success on a mac, so the third team member borrowed a mac computer, which allowed him to finish setup relatively quickly after that. also, we did not realize when taking on this project that the work that needed to be done was almost entirely in javascript. one team member has no experience in javascript, and the other two have only slight knowledge, so it took a while just to get up-to-speed with this technology. if we had known more, we would not have been so cavalier in just assuming we'd be able to zip an entire folder at once or else get a list of files from a server folder on a client javascript - which we now know we cannot do. much time was spent researching ways to do this, including node.js, jquery, php, ajax, and kintone. we finally reverted to just using the file naming convention in our favor and assuming there would be fewer than 99 files in any lecture directory. according to the timesheet.xlsx file, one team member spent over 30 hours on this project, which exceeds the requirements for this assignment, so we did not address any issue beyond the multiple-slide download enhancement. cs 410: text information systems group project progress report team green koalas team members: yuxiang huang - yh43@illinois.edu bob manasco - manasco2@illinois.edu - group coordinator cullen stone - cpstone2@illinois.edu project progress report: 1) which tasks have been completed? two of the three team members have successfully installed the educationalweb tool in our local environments. 2) which tasks are pending? work has begun on enabling downloads for multiple slides at a time, but it is not completed yet. we need to complete that and (possibly) work on a performance improvement. we then need to produce the video talk. 3) are you facing any challenges? getting the educationalweb system up and running in local proved to be more difficult than expected, particularly in windows. one team member is still struggling with this, but we are helping him through the last of his issues. also, none of us are javascript experts, so it is taking more time than we originally thought even to do a relatively simple enhancement. we are committed to completing on time, though. cs 410: text information systems group project proposal team green koalas team members: yuxiang huang - yh43@illinois.edu bob manasco - manasco2@illinois.edu - group coordinator cullen stone - cpstone2@illinois.edu proposal: for this group project, team green koalas will be improving the educational web system. the educational web system is a tool recently developed by some of the students in professor zhai's research group that allows students to view all lecture slides from course cs 410 (text information systems). this tool supports choosing a specific lecture's worth of lecture slides, sequential navigation through individual slides, searching for relevant slides, navigating to other recommended slides, and finding term and phrase definitions from the textbook. specifically, we will develop the ability to allow for bulk downloading of slides. this simple enhancement would provide concrete value to future students, instructors, and other users of this system for years to come. understanding that the expectation is for each group member to spend around 20 hours of effort on this assignment, if we are able to complete the bulk download in less than 60 hours (which seems likely), we will then move onto another topic, such as improving performance or expanding the content to include slides and textbooks from other courses. this could potentially expand the user base to students and instructors of other courses as well. to the best of our knowledge, no other tool of this type exists, at least specific to the lecture data for which we are using it. in terms of existing resources, we would obviously be modifying the source code for the tool. if we do take on the task of expanding to include other courses, we will require access to the lecture slides and possibly the textbooks for any additional classes. the first step would have to be securing permission from the owner of the lectures and textbooks to use these resources, to ensure we do not violate intellectual property rights. for downloading slides in batches, it should be easy enough to do through stitching individual slides into a single pdf or some other method. for improving performance, we would investigate buffering next slide and previous slide to speed up that portion of the application. if we expand to new courses, then no technology would change, we would merely be making sure the application is scalable enough to handle the new data. it should be a trivial effort to show the usefulness of bulk downloading or improved performance through a recorded demonstration comparing the current state with the new functionality. if we expand to include other classes, perhaps we could include a student from the other class or another student from our class (if the new course is not currently in session) and record a quick usability study. we expect to have a general understanding of the existing application by week 10. we will take weeks 11 and 12 to enable bulk download. weeks 13 and 14 can then be used for one additional enhancement, followed by week 15, which will be set aside for the recording the demonstration. cs 410: text information systems group project proposal team green koalas team members: yuxiang huang - yh43@illinois.edu bob manasco - manasco2@illinois.edu - group coordinator cullen stone - cpstone2@illinois.edu tutorial video link: https://youtu.be/gexk8ohcg3c team green koalas cs410 group project for this group project, team green koalas will be improving the educational web system. the educational web system is a tool recently developed by some of the students in professor zhai's research group that allows students to view all lecture slides from course cs 410 (text information systems). this tool supports choosing a specific lecture's worth of lecture slides, sequential navigation through individual slides, searching for relevant slides, navigating to other recommended slides, and finding term and phrase definitions from the textbook. specifically, we will develop the ability to allow for bulk downloading of slides. this simple enhancement would provide concrete value to future students, instructors, and other users of this system for years to come. this enhancement required each group member to spend around 20 hours of effort on this assignment, so we were not able to move onto any another topic. team members: yuxiang huang - yh43@illinois.edu bob manasco - manasco2@illinois.edu - group coordinator cullen stone - cpstone2@illinois.edu submission files: project proposal - ""green koalas project proposal.docx"" project progress report - ""green koalas project progress report.docx"" project documentation - ""green koalas project documentation.docx"" project tutorial video"	['cs', 'text', 'information', 'systems', 'group', 'project', 'documentation', 'team', 'green', 'koalas', 'members', 'yuxiang', 'huang', 'yhillinoisedu', 'bob', 'manasco', 'manascoillinoisedu', 'coordinator', 'cullen', 'stone', 'cpstoneillinoisedu', 'installation', 'following', 'instructions', 'tested', 'python', 'linux', 'macos', 'source', 'code', 'including', 'koala', 'enhancements', 'found', 'httpsgithubcomcsfallcourseproject', 'elasticsearch', 'installed', 'running', 'httpswwwelasticcoguideenelasticsearchreferencecurrenttargzhtml', 'create', 'index', 'create_es_indexpy', 'educationalweb', 'download', 'tfidf_outputszip', 'httpsdrivegooglecomfilediacqahnwkkxasbnfsclqrigdtfiwviewuspsharing', 'unzip', 'file', 'place', 'folder', 'educationalwebstatic', 'cszip', 'httpsdrivegooglecomfiledxiwosavooejsy_siiixpfaqsuyuuhviewuspsharing', 'educationalwebpdfjsstaticslides', 'educationalwebpdfjsbuildgenericweb', 'run', 'command', 'gulp', 'server', 'another', 'terminal', 'window', 'apppy', 'site', 'available', 'httplocalhost', 'use', 'system', 'developed', 'students', 'prof', 'zhais', 'research', 'navigating', 'course', 'slides', 'present', 'contains', 'could', 'expanded', 'future', 'include', 'courses', 'note', 'added', 'names', 'directories', 'must', 'follow', 'naming', 'conventions', 'used', 'directory', 'name', 'really', 'anything', 'may', 'helpful', 'descriptive', 'lecture', 'series', 'instance', 'one', 'named', '_lessonevaluationoftrsystemspracticalissues__evaluation_of_tr_systems__practical_issuestxt', 'using', 'long', 'required', 'even', 'recommended', 'causes', 'problems', 'windows', 'users', 'within', 'slide', 'sequentially', 'numbered', 'starting', 'zero', 'format', 'class', 'followed', 'four', 'dashes', 'number', 'pdf', 'features', 'tool', 'choosing', 'dropdown', 'list', 'navigation', 'bar', 'lecturesslides', 'next', 'prev', 'buttons', 'bottom', 'searching', 'relevant', 'search', 'relatedrecommend', 'column', 'right', 'finding', 'explanation', 'termphrase', 'highlighting', 'clicking', 'explain', 'selected', 'button', 'topright', 'try', 'retrieve', 'section', 'professors', 'textbook', 'phrase', 'downloading', 'current', 'viewed', 'function', 'implementation', 'first', 'buildgenericwebviewerjs', 'included', 'allows', 'us', 'see', 'url', 'currently', 'buildgenericwebviewerhtml', 'updated', 'wrote', 'several', 'new', 'functions', 'alertall', 'get', 'currentslide', 'provided', 'viewerjs', 'convert', 'usable', 'purposes', 'geturls', 'converts', 'formatted', 'potential', 'contained', 'files', 'zipitup', 'takes', 'adds', 'existing', 'zip', 'slideserieszip', 'provides', 'opportunity', 'user', 'save', 'browser', 'also', 'initiate', 'finally', 'buildgenericwebviewercss', 'made', 'changes', 'necessary', 'referenced', 'fixed', 'graphic', 'allow', 'fit', 'properly', 'justification', 'intention', 'take', 'additional', 'improvement', 'performance', 'enabling', 'etc', 'ran', 'impediments', 'affected', 'ability', 'setup', 'environment', 'took', 'much', 'longer', 'anticipated', 'member', 'tracking', 'time', 'show', 'timesheetxlxs', 'spent', 'hours', 'trying', 'configure', 'caused', 'either', 'attempting', 'set', 'newer', 'version', 'success', 'mac', 'third', 'borrowed', 'computer', 'allowed', 'finish', 'relatively', 'quickly', 'realize', 'taking', 'work', 'needed', 'done', 'almost', 'entirely', 'javascript', 'experience', 'two', 'slight', 'knowledge', 'uptospeed', 'technology', 'known', 'would', 'cavalier', 'assuming', 'wed', 'able', 'entire', 'else', 'client', 'know', 'cannot', 'researching', 'ways', 'nodejs', 'jquery', 'php', 'ajax', 'kintone', 'reverted', 'convention', 'favor', 'fewer', 'according', 'timesheetxlsx', 'exceeds', 'requirements', 'assignment', 'address', 'issue', 'beyond', 'multipleslide', 'enhancement', 'progress', 'report', 'tasks', 'completed', 'three', 'successfully', 'local', 'environments', 'pending', 'begun', 'downloads', 'multiple', 'yet', 'need', 'complete', 'possibly', 'produce', 'video', 'talk', 'facing', 'challenges', 'getting', 'proved', 'difficult', 'expected', 'particularly', 'still', 'struggling', 'helping', 'last', 'issues', 'none', 'experts', 'originally', 'thought', 'simple', 'committed', 'completing', 'though', 'proposal', 'improving', 'educational', 'web', 'recently', 'professor', 'view', 'supports', 'specific', 'lectures', 'worth', 'sequential', 'individual', 'term', 'definitions', 'specifically', 'develop', 'bulk', 'provide', 'concrete', 'value', 'instructors', 'years', 'come', 'understanding', 'expectation', 'spend', 'around', 'effort', 'less', 'seems', 'likely', 'move', 'onto', 'topic', 'expanding', 'content', 'textbooks', 'potentially', 'expand', 'base', 'well', 'best', 'type', 'exists', 'least', 'data', 'terms', 'resources', 'obviously', 'modifying', 'task', 'require', 'access', 'classes', 'step', 'securing', 'permission', 'owner', 'ensure', 'violate', 'intellectual', 'property', 'rights', 'batches', 'easy', 'enough', 'stitching', 'single', 'method', 'investigate', 'buffering', 'previous', 'speed', 'portion', 'application', 'change', 'merely', 'making', 'sure', 'scalable', 'handle', 'trivial', 'usefulness', 'improved', 'recorded', 'demonstration', 'comparing', 'state', 'functionality', 'perhaps', 'student', 'session', 'record', 'quick', 'usability', 'study', 'expect', 'general', 'week', 'weeks', 'enable', 'aside', 'recording', 'tutorial', 'link', 'httpsyoutubegexkohcgc', 'submission', 'proposaldocx', 'reportdocx', 'documentationdocx']
https://github.com/bojiang3/CourseProject	"interoffice memorandum to: ms. beth springer, vp john repogle, ceo subject: burt's bees date: 8/19/2019 after reviewing this case, i have concluded that clorox will not become eco-friendly by only purchasing burt's bees. however, with clorox's purchase of burt's bees and the clorox's new initiative to ""think about the greater good,"" this acquisition can provide the clorox with insight on how a successful eco-friendly business operates. implementing these practices will give clorox an advantage over their competitors who are trying to enter the eco-friendly market as well. the burt's bees brand will see some negative impact because many of their fans are environmentally conscious, and clorox's reputation when it comes to being environmentally friendly is not well perceived. with this acquisition, clorox will see more of a benefit than burt's bees. with clorox's purchase of burt's bees, they now have an insight into the eco-friendly consumer market that not many of their competitors do not have. according to research done by clorox, ""53% of consumers"" plan on purchasing more eco-friendly products within the next year. these consumers are also willing to pay more for those eco-friendly products. the information provided tells us there is now a need for more eco-friendly products in the consumer market. clorox will be able to charge more for these ""luxury"" products, which can be up to 57% more than standard (not eco-friendly) products. clorox will now be in the position to set the standard of what natural cleaning products should be and will be making a profit from their efforts. another benefit for clorox in this acquisition is burt's bees research lab; this lab is full of competitor's products that burt's bees have been testing. these products are being tested to see if they can be considered a natural product. this testing will give insight into what companies have tried and failed when qualifying for the natural products association label. it will lead clorox's brand of natural products to become the standard for what natural cleaning products should be. clorox needs to implement its initiative for ""thinking about the greater good"" and inform the market that they are serious about producing more natural and eco-friendly products. burt's bees will not see such a positive impact from this acquisition. although their product does not bare the clorox name, they are now associated with the company, and many consumers think of bleach when seeing or hearing clorox. burt's bees will need to focus on informing their consumers they still maintain their values of being eco-friendly. there is a need for eco-friendly products in the consumer market, and they will continue to make a profit if they retain those eco-friendly values. clorox will achieve profitability more so than burt's bees in this acquisition. when clorox implements burt's bees business practices to their company and especially to their line of eco-friendly products, it will have a positive impact. there is a need for more eco-friendly products in the consumer market, and consumers are willing to pay for those products. implementing the eco-friendly products will ultimately lead to a profit even though the cost for producing these products will be more. clorox should then advertise the fact that they are the standard when it comes to reliable, eco-friendly products. although burt's bees will not be as profitable as clorox, there is still a need for their eco-friendly products in the consumer market. group sn #196 cs 410 final project report group sn # 196: bojiang li, david ye, yunfei ma sentiment analysis tool (option 5: free topic) this project aims to help students improve paper-reading and -writing ability by providing sentimental and keyword analysis. midway topic change: since during our original planned project implementation - educationalweb, we encountered too many unforeseen obstacles, we midway decided to switch something new - this sentimental analysis project. we have completed the project for giving feedback on the sentiment and giving scores for the sentimentals. we may keep working on the frontend later to to improve the user experience. technology used programming language: python microsoft azure azure.ai.textanalytics library azure.core.credentials library azure.cognitiveservices library msrest.authentication library sample sample input text/paper group sn #196 sample output result outcomes and results - in the rendered, according to every sentence, it will give a score to the phrase. - sentimental analysis will be given to each one of the sentences. - the high scores on both positive and negative will be noticed because it does not follow the required neutral tone of the essay. 050b.docx  is the sample file we test for the sentimental analysis. for grammercheck.py , it is the code for checking the right wording for the whole paper. main.py  stores the user side code for this project. video presentation https://mediaspace.illinois.edu/media/1_h6ncumvp project proposal - group sn 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. team members: bojiang li (bojiang3), zhanyuan ye(zye19), yunfei ma(yunfeim2). captain: bojiang li 2. what system have you chosen? which subtopic(s) under the system? we have chosen educationalweb system. the subtopic under the system is ""improving the usability and reach of the existing system "". 3. briefly describe the datasets, algorithms or techniques you plan to use we will use elasticsearch to implement searching functionality. we plan to use python and javascript to build the frontend and backend. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? we will have a user interface to test if our function can have the expected performance like observing if the searching results are related to the search keys. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly we will just implement some additional functions based on the finished system. 6. which programming language do you plan to use? we plan to use python and javascript. 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. * project setup - 15 hours * implement function 1 - 15 hours * implement function 2 - 15 hours * implement function 3 - 15 hours * test and optimize - 10 hours cs 410 final project for the specific information, sample text input and output results, please see ""cs 410 final project report"" in the main menu. sentiment analysis tool (option 5: free topic) group sn (#196) bojiang li, yunfei ma, david ye this project aims to help students improve paper-reading and -writing ability by providing sentimental and keyword analysis. the source code is provided in the main folder. software installation first install the azure coginitive services package service. pip3 install azure3 pip3 install cognitiveservices pip3 install msrest pip3 install docx2txt then direct run the file with python. - python3 works python text_analytics_bing_search_key_phase.py the result will be rendered in textanalyticresult.docx discussion & midway topic change since during our original planned project implementation - educationalweb, we encountered too many unforeseen obstacles, we decided to switch something new - this sentimental analysis project. we have completed the project for giving feedbacks on the sentiment and giving scores for the sentimentals. we may keep working on the frontend later to to improve the user experience. result and outcome in the rendered, according to every sentence, it will give a score to the phrase. sentimental analysis will be given to each one of sentences. the high scores on both positive and negetive will be noticed because it does not follow the require neutral tone of the essay. 050b.docx is the sample file we test for the sentimental analysis. for grammercheck.py, it is the code for checking the right wording for the whole paper. main.py will be the user side code for this project video presentation https://mediaspace.illinois.edu/media/1_h6ncumvp references/sources https://docs.microsoft.com/en-us/office/troubleshoot/word/spelling-grammar-checker-underline-color https://realpython.com/sentiment-analysis-python/ https://www.digitalocean.com/community/tutorials/how-to-perform-sentiment-analysis-in-python-3-using-the-natural-language-toolkit-nltk https://stackabuse.com/python-for-nlp-sentiment-analysis-with-scikit-learn/ progress report paper id 196 progress made: our team had 3 zoom meetings to discuss and understand the educationweb system and we made discussions about the potential bullet points and the potential improvements for the system. the small improvements we are interested in are scaling up the current system, allowing downloading slides in bulk, adding more context to explanation, and integrating the tool with piazza. we may finally abandon some of the our choices based on the difficulty and time. remaining tasks:we will push the remaining code to git, and we have finished 1 one the bullet point we mentioned above, and we are still working on scale up the system and allowing downloading slides in bulk this week, we may finish our code production on dec,5 and have a zoom meeting to test and make improvements of the code. in addition, we may make a youtube video to present our results to the peer reviewer. challenges/issues: if encountered we will attend office hour."	['interoffice', 'memorandum', 'ms', 'beth', 'springer', 'vp', 'john', 'repogle', 'ceo', 'subject', 'burts', 'bees', 'date', 'reviewing', 'case', 'concluded', 'clorox', 'become', 'ecofriendly', 'purchasing', 'however', 'cloroxs', 'purchase', 'new', 'initiative', 'think', 'greater', 'good', 'acquisition', 'provide', 'insight', 'successful', 'business', 'operates', 'implementing', 'practices', 'give', 'advantage', 'competitors', 'trying', 'enter', 'market', 'well', 'brand', 'see', 'negative', 'impact', 'many', 'fans', 'environmentally', 'conscious', 'reputation', 'comes', 'friendly', 'perceived', 'benefit', 'consumer', 'according', 'research', 'done', 'consumers', 'plan', 'products', 'within', 'next', 'year', 'also', 'willing', 'pay', 'information', 'provided', 'tells', 'us', 'need', 'able', 'charge', 'luxury', 'standard', 'position', 'set', 'natural', 'cleaning', 'making', 'profit', 'efforts', 'another', 'lab', 'full', 'testing', 'tested', 'considered', 'product', 'companies', 'tried', 'failed', 'qualifying', 'association', 'label', 'lead', 'needs', 'implement', 'thinking', 'inform', 'serious', 'producing', 'positive', 'although', 'bare', 'name', 'associated', 'company', 'bleach', 'seeing', 'hearing', 'focus', 'informing', 'still', 'maintain', 'values', 'continue', 'make', 'retain', 'achieve', 'profitability', 'implements', 'especially', 'line', 'ultimately', 'even', 'though', 'cost', 'advertise', 'fact', 'reliable', 'profitable', 'group', 'sn', 'cs', 'final', 'project', 'report', 'bojiang', 'li', 'david', 'ye', 'yunfei', 'sentiment', 'analysis', 'tool', 'option', 'free', 'topic', 'aims', 'help', 'students', 'improve', 'paperreading', 'writing', 'ability', 'providing', 'sentimental', 'keyword', 'midway', 'change', 'since', 'original', 'planned', 'implementation', 'educationalweb', 'encountered', 'unforeseen', 'obstacles', 'decided', 'switch', 'something', 'completed', 'giving', 'feedback', 'scores', 'sentimentals', 'may', 'keep', 'working', 'frontend', 'later', 'user', 'experience', 'technology', 'used', 'programming', 'language', 'python', 'microsoft', 'azure', 'azureaitextanalytics', 'library', 'azurecorecredentials', 'azurecognitiveservices', 'msrestauthentication', 'sample', 'input', 'textpaper', 'output', 'result', 'outcomes', 'results', 'rendered', 'every', 'sentence', 'score', 'phrase', 'given', 'one', 'sentences', 'high', 'noticed', 'follow', 'required', 'neutral', 'tone', 'essay', 'bdocx', 'file', 'test', 'grammercheckpy', 'code', 'checking', 'right', 'wording', 'whole', 'paper', 'mainpy', 'stores', 'side', 'video', 'presentation', 'httpsmediaspaceillinoisedumedia_hncumvp', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'zhanyuan', 'yezye', 'mayunfeim', 'system', 'chosen', 'subtopics', 'subtopic', 'improving', 'usability', 'reach', 'existing', 'briefly', 'describe', 'datasets', 'algorithms', 'techniques', 'use', 'elasticsearch', 'searching', 'functionality', 'javascript', 'build', 'backend', 'adding', 'function', 'demonstrate', 'works', 'expected', 'show', 'actually', 'better', 'interface', 'performance', 'like', 'observing', 'related', 'search', 'keys', 'communicate', 'utilize', 'fine', 'systems', 'please', 'state', 'clearly', 'additional', 'functions', 'based', 'finished', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'list', 'main', 'tasks', 'estimated', 'time', 'task', 'setup', 'optimize', 'specific', 'text', 'menu', 'source', 'folder', 'software', 'installation', 'first', 'install', 'coginitive', 'services', 'package', 'service', 'pip', 'cognitiveservices', 'msrest', 'docxtxt', 'direct', 'run', 'text_analytics_bing_search_key_phasepy', 'textanalyticresultdocx', 'discussion', 'feedbacks', 'outcome', 'negetive', 'require', 'referencessources', 'httpsdocsmicrosoftcomenusofficetroubleshootwordspellinggrammarcheckerunderlinecolor', 'httpsrealpythoncomsentimentanalysispython', 'httpswwwdigitaloceancomcommunitytutorialshowtoperformsentimentanalysisinpythonusingthenaturallanguagetoolkitnltk', 'httpsstackabusecompythonfornlpsentimentanalysiswithscikitlearn', 'progress', 'id', 'made', 'zoom', 'meetings', 'discuss', 'understand', 'educationweb', 'discussions', 'potential', 'bullet', 'points', 'improvements', 'small', 'interested', 'scaling', 'current', 'allowing', 'downloading', 'slides', 'bulk', 'context', 'explanation', 'integrating', 'piazza', 'finally', 'abandon', 'choices', 'difficulty', 'remaining', 'taskswe', 'push', 'git', 'point', 'mentioned', 'scale', 'week', 'finish', 'production', 'dec', 'meeting', 'addition', 'youtube', 'present', 'peer', 'reviewer', 'challengesissues', 'attend', 'office', 'hour']
https://github.com/bzhao10/CourseProject	"cs410 courseproject(text classification competition): twitter sarcasm detection table of contents background install usage presentation results contributing citation background this is a course project for cs410 text information systems and is a part of a text classification competition, which involves twitter sarcasm detection. in this competition, it is required that you classify a twitter response in a conversation into either 'sarcasm' or 'not sarcasm'. data the dataset is comprised of two jsonl files, including a train.jsonl for data training and a text.jsonl for text classification. each line of the training dataset includes the following fileds: - response : the tweet to be classified - context : the conversation context of the response - label : sarcasm or not_sarcasm - id: string identifier for sample. the testing dataset(text.jsonl) differs from the training dataset only in that the each line of the dataset lacks the label. the size of training dataset is 5000 and the size of the testing dataset is 1800. output the output of the project is an anwser.txt document, each line of which includes both id of test sample and a label of either sarcasm or not_sarcasm predicted by the model. install you can run the whole project on google colab. you don't have to install anything locally. usage each of the ipynb file in the code folder represents one solution in the competition. step 1 download two jsonl files, including one training data file and one testing data file, from dataset. step 2 download one of these ipynb files and open it on google colab. step 3 upload the two jsonl files to google colab under the dataset folder in the project that you have opened in step 2. step 4 run the code line by line using google colab. by following all the steps mentioned above, you will get an answer.txt file. please refer to the presentation video for detailed instructions. presentation following is our presentation demo link: https://mediaspace.illinois.edu/media/1_ef6myyuo results the following table records the best performance achieved (highest f1 score) by using each model: the score marked in bold are passing the baseline scores. | model| precision | recall| f1 | |-------|-------|-------|-------| | albert | 0.65814 |0.77222 | 0.71063 | | albert v2 | 0.64377 |0.56222 | 0.60024 | | bert | 0.62681 | 0.86778 | 0.72787 | | bert(rsup) | 0.64717 | 0.76222 | 0.7 | | bert(r_context) | 0.66042 | 0.70444 | 0.68172 | | roberta | 0.63974 | 0.89777 | 0.74711 | | roberta-large | 0.54708 | 0.98778 | 0.70416 | | roberta(r_context) | 0.67836 | 0.77333 | 0.72274 | | squeezebert | 0.61348 | 0.91 | 0.73289 | | xml-roberta | 0.61864 | 0.89222 | 0.73066 | rsup: remove stopwords and unnecessary puncuations r_context: reverse context contributing contributors team name: gfz team member: bei zhao - beizhao3 (captain) beizhao3@illinois.edu ryan fraser - rfraser3 rfraser3@illinois.edu yiming gu - yimingg7 yimingg7@illinois.edu citation tutorial: fine-tuning bert for spam classification text classification competition proposal team gfz 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. bei zhao - beizhao3 (captain) ryan fraser - rfraser3 yiming gu - yimingg7 2. which competition do you plan to join? text classification competition 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods here are some neural classifiers and deep learning frameworks that we are going to learn and try: * word2vec and glove word2vec and glove are word-based models that can map the vocabularies and phrases into vectors of numbers, which can help us to separate the phrases and words. for the context of meaningful classification, they need to combine with neural networks to work out, such as convolutional neural networks (cnn), recurrent neural networks (rnn), artificial neural networks (ann), etc. * bert bert is a context-based model, which can map the vocabularies and phrases based on the sentence position. however, this model is limited to the size of the corpus it could train compared to word2vec and glove. but it abandons the traditional rnn and cnn formula, therefore, this may perform much faster than word2vec and glove implementations. * other models we will try other useful classifiers and frameworks in the competition procedure continuously until we find the best fit one. here are the relevant experience of each team members: * bei: don't have any machine learning experience but will try to learn as much as possible in this competition. * ryan: completed data science certificate from ucla for-credit, included the ""machine learning using r"" course which went through the ""introduction to statistical learning"" book. i will need to take some time to get up to speed on these methods but anticipate it should not take long and am prepared to learn these frameworks. i have made progress in the fast.ai tutorials in an effort to learn more about these methods, and have heard about using tensorflow/keras/pytorch to complete these types of tasks. * yiming: don't have any machine learning experience but will try to learn it in this competition. 4. which programming language do you plan to use? the main programming language that we are going to use is python. 5. competition milestones: * text /data processing in this step, we will prepare and process the raw data. for example, text may contain numbers, special characters, etc. we need to transform the raw data into something that could be used in the project. * feature extracting we will extract features from the texts in order to classify them. this is important because only when the features are extracted precisely, the text could then be rightly classified. we will evaluate different models in this step as well. * train and evaluate models we will train different models on a dataset in order to investigate their actual effectiveness. it is essential that we optimize the models according to the results. * deploy the models in the competition * revise and keep optimizing if necessary * document source code and test set predictions * document the model and the test set predictions, experiments with other methods, hyperparameter tuning, etc. * create a demo that shows code can run on the test set and generate submitted predictions, etc team gfz final report bei zhao(captain) beizhao3@illinois.edu ryan fraser rfraser3@illinois.edu yiming gu yimingg7@illinois.edu table of contents: explain what problem we are trying to solve 2 explain our model 3 explain how we perform the training 5 explain any other methods tried and hyperparameter tuning 6 results from testing various pre-trained model and hyperparameter combinations 7 team member contributions 9 references 10 1 explain what problem we are trying to solve this code attempts to detect sarcasm in tweets. this is a particularly tricky problem in natural language processing (nlp) due to the nature of sarcasm itself. sarcasm is highly dependent on the author, the specific topic in question, cultural attitudes about the topic, current events, tone, and much more. the difficulty is further compounded by the fact that sarcasm is (usually) intentionally designed to not sound sarcastic. in a simple example, a person asking his friend if an idea is good may hear that his idea is ""a really good idea,"" when in fact the friend means the opposite. in particular, this code was built for the text classification competition for cs 410 at the university of illinois at urbana-champaign. in this competition, 2 sets of tweets are provided. the training set is pre-labeled and identifies if example tweets are sarcastic or not. the test set is not labeled. both sets also contain the context of the tweets, which in this context means the parent tweets that the tweets in question are responding to. the goals of the competition are twofold. first, teams must outperform the baseline, which means realizing an f1 score of about 0.723 (based on current results on livedatalab). second, teams must try to rank highest out of all other teams. 2 explain our model we achieved our best results for this task by using a pre-trained deep learning model called roberta. this model builds off of another well-known deep learning model called bert, which stands for ""bidirectional encoder representations from transformers."" a few key differences between bert and roberta are outlined below: as one can see, roberta takes longer to train because it has much more data. it also does not use next sentence prediction, which is explained further below. at its core, bert uses transformers. these are a deep learning construct that ""learns contextual relations between words (or sub-words) in a text. in its vanilla form, transformer includes two separate mechanisms - an encoder that reads the text input and a decoder that produces a prediction for the task."" a key feature of bert is that it is bidirectional. this means it reads all of the words at once and uses all context available. prior models used left, right, left-right, right-left context or some combination of those. this means that bert obtains a more holistic understanding of context versus prior methods, usually leading to better results. in very general terms, bert uses 2 strategies to train on the data. first is masked lm and second is next sentence prediction. 3 in masked lm, bert hides a number of words in each sequence before training and then attempts to predict the hidden words. the loss function only considers the prediction of those hidden values. because of this, the model is a bit slower to converge than prior models that did not make use of the full context. in next sentence prediction, the bert model also ""receives pairs of sentences as input and learns to predict if the second sentence in the pair is the subsequent sentence in the original document. during training, 50% of the inputs are a pair in which the second sentence is the subsequent sentence in the original document, while in the other 50% a random sentence from the corpus is chosen as the second sentence. the assumption is that the random sentence will be disconnected from the first sentence."" note that roberta does not use next sentence prediction. both strategies are used when training the model and the goal is to balance and minimize the loss of the combined strategies. we believe that roberta outperforms bert for sarcasm detection in tweets because tweets are very short and tend to have less overall context. therefore, it makes sense that a scoring mechanism that does not focus as much on next sentence prediction will be more fit for purpose for this competition. 4 explain how we perform the training our very general outline of steps taken is below. to keep things concise, only high level descriptions are given. our code is somewhat short and more detailed documentation is available in the code comments. basic steps: * convert json data to csv format while cleaning the labels * create k-fold cross-validation training sets * create a list of dictionaries for our training and test data * create csvs with the context data, the response data, and the labels * convert csvs into pandas dataframes * split data into respective training/test sets * select model and import into the environment * encode the text data using the tokenizer library * convert data into tensors using pytorch * set up model parameters * batch size * wrap tensors * create sampler for sampling data during training * create dataloader for training set * freeze parameters * create model class and initialization logic * initialize model * import model optimizer from huggingface transformers library * compute starting class weights * convert class weights to tensors * define number of training epochs * define model training function * define model evaluation function * run and train the model 5 explain any other methods tried and hyperparameter tuning the team spent time on a number of different tasks outside of just building the model: 1. we spent a few weeks researching the competition and educating ourselves on deep learning models. when we first started, we believed we'd use word2vec and/or sentence2vec, two approaches for nlp. however, as we did more research, we found that there were better models we could use. 2. we spent time trying various deep learning models to see how each performed. we used a library from huggingface that allowed us to easily swap out pretrained nlp deep learning models. below we've outlined the performance of various pretrained model/hyperparameter combinations, which is how we ultimately decided to use roberta. 3. we also spent time trying to identify which data to train the model on. the data includes both target tweets and the context surrounding them, therefore, there were 3 intuitive combinations we felt were worth trying: response-only, context-only, and a combination of both. we found that the combination of both works best. this made sense to us given the very nature of sarcasm. in fact, sarcasm is almost always an extremely context dependent response to a topic that is oftentimes serious, or not inherently sarcastic. by its nature, sarcasm taken out of context sounds like any other normal statement. (just think of the phrase, ""good work,"" which can take on many different meanings depending on a huge number of factors. most of the time, this should be taken as a friendly, encouraging, and positive statement. however, depending on the context, it could also be a sarcastic statement.) 6 results from testing various pre-trained model and hyperparameter combinations following are the different testing results we've tried so far (we only include the best scores of different setup models). passing the baseline f1 scores are highlighted in green color. 7 model precisio n recall f1 model description albert bs=25 0.65294 0.74000 0.69375 albert model with batch size 25 albert bs=25 msl= 300 0.64178 0.70667 0.67266 albert model with batch size 25 max_seq_len=300 albert bs=26 0.64400 0.75778 0.69627 albert model with batch size 26 albert bs=27 0.63944 0.75667 0.69313 albert model with batch size 27 albert bs=28 0.63520 0.77000 0.69613 albert model with batch size 28 albert bs=29 0.62868 0.76000 0.68813 albert model with batch size 29 albert bs=30 0.62960 0.79889 0.70421 albert model with batch size 30 albert bs=31 0.65814 0.77222 0.71063 albert model with batch size 31 albert bs=32 0.65145 0.69778 0.67382 albert model with batch size 32 albert bs=33 0.64371 0.77889 0.70488 albert model with batch size 33 albert bs=34 0.61558 0.82556 0.70527 albert model with batch size 34 albert bs=35 0.65490 0.74222 0.69583 albert model with batch size 35 albert v2 bs=31 0.64377 0.56222 0.60024 albert model v2 with batch size 35 bert bs=25 0.68477 0.71444 0.69929 bert model with batch size 25 bert bs=26 rs&up 0.63957 0.72556 0.67985 bert model with batch size 26 remove stopword and unnecessary punctuations bert bs=27 0.65652 0.76667 0.70733 bert model with batch size 27 bert bs=27 rs&up 0.64245 0.75667 0.6949 bert model with batch size 27 remove stopword and unnecessary punctuations bert bs=28 0.62681 0.86778 0.72787 bert model with batch size 28 bert bs=28 r_context 0.66042 0.70444 0.68172 bert model with batch size 28 and reverse context bert bs=28 rs&up 0.64717 0.76222 0.7 bert model with batch size 28 remove stopword and unnecessary punctuations bert bs=29 0.6519 0.80111 0.71884 bert model with batch size 29 bert bs=29 r_context 0.67768 0.57000 0.61919 bert model with batch size 29 and reverse context bert bs=29 rs&up 0.64358 0.70222 0.67163 bert model with batch size 29 remove stopword and unnecessary punctuations 8 bert bs=30 0.68614 0.66556 0.67569 bert model with batch size 30 roberta bs=28 0.66057 0.80222 0.72453 roberta model with batch size 28 roberta bs=29 0.64521 0.86888 0.74053 roberta model with batch size 29 roberta bs=29 r_context 0.67836 0.77333 0.72274 roberta model with batch size 29 and reverse context roberta bs=30 0.66324 0.78778 0.72016 roberta model with batch size 30 roberta bs=31 0.63974 0.89777 0.74711 roberta-large model with batch size 31 roberta-large bs=27 0.64571 0.62778 0.63662 roberta-large model with batch size 27 roberta-large bs=28 0.54708 0.98778 0.70416 roberta-large model with batch size 28 roberta-large bs=29 0.71308 0.37556 0.49199 roberta-large model with batch size 29 squeezebert bs=28 0.6506 0.72 0.68354 squeezebert model with batch size 28 squeezebert bs=29 0.6537 0.74667 0.6971 squeezebert model with batch size 29 squeezebert bs=30 0.65345 0.76889 0.70648 squeezebert model with batch size 30 squeezebert bs=32 0.63973 0.84444 0.72797 squeezebert model with batch size 32 squeezebert bs=33 0.61348 0.91 0.73289 squeezebert model with batch size 33 squeezebert bs=34 0.63851 0.84 0.72553 squeezebert model with batch size 33 xml-roberta bs=27 0.70183 0.34 0.45808 xml-roberta model with batch size 27 xml-roberta bs=28 0.6059 0.91222 0.72816 xml-roberta model with batch size 28 xml-roberta bs=29 0.61864 0.89222 0.73066 xml-roberta model with batch size 29 xml-roberta bs=29 msl=150 0.64249 0.82667 0.72303 xml-roberta model with batch size 29, max_seq_len = 150 xml-roberta bs=30 0.60588 0.91556 0.72920 xml-roberta model with batch size 30 team member contributions - bei zhao (team captain): bei served as our team captain for this project. bei helped on all facets of the project. she wrote our initial proposal and coordinated all meeting times. bei also spent a lot of time working to try various model/hyperparameter combinations to get the best results. - yiming gu: yiming was instrumental in getting our model up and running. he was quickly and efficiently able to get us a very solid foundation to work off of, such that we could spend time focusing on the best model and hyperparameters. yiming also spent a lot of time trying various model and hyperparameter combinations to find the best results and wrote the readme for the project. - ryan fraser: ryan helped the team strategize about how to approach the competition. he spent time trying to get the model to run on a gpu for faster training times, but ultimately the team decided to use cpus. ryan also wrote the project progress report, the documentation, and the final report. 9 references amardeep kumar and vivek anand 2020. transformers on sarcasm detection with context. proceedings of the second workshop on figurative language processing debanjan ghosh, avijit vajpayee, smaranda muresan, and educational testing service 2data science institute, columbia university {dghosh, avajpayee}@ets.org smara@columbia.edu 2020. a report on the 2020 sarcasm detection shared task. arxiv preprint arxiv:2005.05814. glue benchmark leaderboard. (n.d.). retrieved november 11, 2020, from https://gluebenchmark.com/leaderboard hankyol lee, youngjae yu, and gunhee kim. augmenting data for sarcasm detection with unlabeled conversation context. arxiv preprint arxiv:2006.06259. ingham, f. (2018, november 27). dissecting bert part 2: bert specifics. retrieved november 11, 2020, from https://medium.com/dissecting-bert/dissecting-bert-part2-335ff2ed9c73 jacob devlin, ming-wei chang, kenton lee, kristina toutanova, and google ai language {jacobdevlin,mingweichang,kentonl,kristout}@google.com 2019. bert: pre-training of deep bidirectional transformers for language understanding. arxiv preprint arxiv:1810.04805. nikhil jaiswal 2020. neural sarcasm detection using conversation context. proceedings of the second workshop on figurative language processing tanvi dadu and kartikey pant 2020. sarcasm detection using context separators in online discourse. arxiv preprint arxiv:2006.00850. xiangjue dong, changmao li, and jinho d. choi 2020.transformer-based context-aware sarcasm detection in conversation threads from social media. arxiv preprint arxiv:2005.11424. yinhan liu, myle ott, naman goyal, jingfei du, mandar joshi, danqi chen, omer levy, mike lewis, luke zettlemoyer, veselin stoyanov 2019. roberta: a robustly optimized bert pretraining approach. conference paper at iclr 2020 suleiman khan, ph.d. ""bert, roberta, distilbert, xlnet - which one to use?"" medium , towards data science, 17 oct. 2019, towardsdatascience.com/bert-roberta-distilbert-xlnet-which-one-to-use-3d5ab82ba5f8. 10 uiuc online mcs - cs410: text information systems fall 2020 team gfz (bei zhao, yiming gu, ryan fraser) project progress report progress made for our project, we decided to compete in the text classification competition. in summary, we have become more familiar with deep learning generally and bert in particular, and have implemented a working model that surpasses the competition baseline. our weekly status is outlined below for more detail: * week 1: the team spent time individually researching various approaches to solving this problem. we explored kaggle competition notebooks, browsed academic papers, and searched the internet for tools that could be useful. we then aggregated and summarized our findings. * week 2: the team agreed to focus on using the bert deep learning model for our submission. all of us are new to deep learning, so we spent this week learning more about deep learning generally and bert in particular. * week 3 and 4: to better understand bert and prepare ourselves for the competition, we all individually used this time to get bert working on our local machines. this helped us understand how data needed to be cleaned and prepared for use, and also helped us understand the behavior of the model when different parameters change. * week 5: we are currently working on enhancing model performance. we are working to get our model running on google colab and we are also experimenting with a few changes to our approach. first, we are testing if we can improve performance by cleaning the dataset in different ways. second, we are attempting to implement an enhanced version of bert called roberta to see if this helps. remaining tasks 1. fine tune the model and prepare it for final submission a. try c1+c2+c3 preprocessing of context with response and c3+c2+c1 preprocessing of context b. try other models such as xlm-roberta, albert, squeezebert, etc. c. change model parameters to optimize performance d. change train_test_split parameters and max_seq_len parameters to optimize performance 2. document how to use the code 3. document how the code is implemented 4. software usage tutorial presentation challenges/issues being faced in general, things are going very smoothly. our toughest challenge so far has been identifying a suitable solution to the problem and writing code so that it works for this specific dataset and use case. getting up to speed quickly on deep learning, while also taking this course, has proven time consuming."	['cs', 'courseprojecttext', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'table', 'contents', 'background', 'install', 'usage', 'presentation', 'results', 'contributing', 'citation', 'course', 'project', 'text', 'information', 'systems', 'part', 'involves', 'required', 'classify', 'response', 'conversation', 'either', 'data', 'dataset', 'comprised', 'two', 'jsonl', 'files', 'including', 'trainjsonl', 'training', 'textjsonl', 'line', 'includes', 'following', 'fileds', 'tweet', 'classified', 'context', 'label', 'not_sarcasm', 'id', 'string', 'identifier', 'sample', 'testing', 'datasettextjsonl', 'differs', 'lacks', 'size', 'output', 'anwsertxt', 'document', 'test', 'predicted', 'model', 'run', 'whole', 'google', 'colab', 'dont', 'anything', 'locally', 'ipynb', 'file', 'code', 'folder', 'represents', 'one', 'solution', 'step', 'download', 'open', 'upload', 'opened', 'using', 'steps', 'mentioned', 'get', 'answertxt', 'please', 'refer', 'video', 'detailed', 'instructions', 'demo', 'link', 'httpsmediaspaceillinoisedumedia_efmyyuo', 'records', 'best', 'performance', 'achieved', 'highest', 'f', 'score', 'marked', 'bold', 'passing', 'baseline', 'scores', 'precision', 'recall', 'albert', 'v', 'bert', 'bertrsup', 'bertr_context', 'roberta', 'robertalarge', 'robertar_context', 'squeezebert', 'xmlroberta', 'rsup', 'remove', 'stopwords', 'unnecessary', 'puncuations', 'r_context', 'reverse', 'contributors', 'team', 'name', 'gfz', 'member', 'bei', 'zhao', 'beizhao', 'captain', 'beizhaoillinoisedu', 'ryan', 'fraser', 'rfraser', 'rfraserillinoisedu', 'yiming', 'gu', 'yimingg', 'yiminggillinoisedu', 'tutorial', 'finetuning', 'spam', 'proposal', 'names', 'netids', 'members', 'administrative', 'duties', 'plan', 'join', 'choose', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'deep', 'learning', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'going', 'try', 'wordvec', 'glove', 'wordbased', 'models', 'map', 'vocabularies', 'phrases', 'vectors', 'numbers', 'help', 'us', 'separate', 'words', 'meaningful', 'need', 'combine', 'networks', 'work', 'convolutional', 'cnn', 'recurrent', 'rnn', 'artificial', 'ann', 'etc', 'contextbased', 'based', 'sentence', 'position', 'however', 'limited', 'corpus', 'could', 'train', 'compared', 'abandons', 'traditional', 'formula', 'therefore', 'perform', 'much', 'faster', 'implementations', 'useful', 'procedure', 'continuously', 'find', 'fit', 'machine', 'possible', 'completed', 'science', 'certificate', 'ucla', 'forcredit', 'included', 'r', 'went', 'introduction', 'statistical', 'book', 'take', 'time', 'speed', 'anticipate', 'long', 'made', 'progress', 'fastai', 'tutorials', 'effort', 'tensorflowkeraspytorch', 'complete', 'types', 'tasks', 'programming', 'language', 'use', 'main', 'python', 'milestones', 'processing', 'prepare', 'process', 'raw', 'example', 'contain', 'special', 'characters', 'transform', 'something', 'used', 'feature', 'extracting', 'extract', 'features', 'texts', 'order', 'important', 'extracted', 'precisely', 'rightly', 'evaluate', 'different', 'well', 'investigate', 'actual', 'effectiveness', 'essential', 'optimize', 'according', 'deploy', 'revise', 'keep', 'optimizing', 'necessary', 'source', 'set', 'predictions', 'experiments', 'hyperparameter', 'tuning', 'create', 'shows', 'generate', 'submitted', 'final', 'report', 'zhaocaptain', 'explain', 'problem', 'trying', 'solve', 'tried', 'various', 'pretrained', 'combinations', 'contributions', 'references', 'attempts', 'detect', 'tweets', 'particularly', 'tricky', 'natural', 'nlp', 'due', 'nature', 'highly', 'dependent', 'author', 'specific', 'topic', 'question', 'cultural', 'attitudes', 'current', 'events', 'tone', 'difficulty', 'compounded', 'fact', 'usually', 'intentionally', 'designed', 'sound', 'sarcastic', 'simple', 'person', 'asking', 'friend', 'idea', 'good', 'hear', 'really', 'means', 'opposite', 'particular', 'built', 'university', 'illinois', 'urbanachampaign', 'sets', 'provided', 'prelabeled', 'identifies', 'labeled', 'also', 'parent', 'responding', 'goals', 'twofold', 'first', 'teams', 'must', 'outperform', 'realizing', 'livedatalab', 'second', 'rank', 'task', 'called', 'builds', 'another', 'wellknown', 'stands', 'bidirectional', 'encoder', 'representations', 'transformers', 'key', 'differences', 'outlined', 'see', 'takes', 'longer', 'next', 'prediction', 'explained', 'core', 'uses', 'construct', 'learns', 'contextual', 'relations', 'subwords', 'vanilla', 'form', 'transformer', 'mechanisms', 'reads', 'input', 'decoder', 'produces', 'available', 'left', 'right', 'leftright', 'rightleft', 'combination', 'obtains', 'holistic', 'understanding', 'versus', 'leading', 'better', 'general', 'terms', 'strategies', 'masked', 'lm', 'hides', 'number', 'sequence', 'predict', 'hidden', 'loss', 'function', 'considers', 'values', 'bit', 'slower', 'converge', 'make', 'full', 'receives', 'pairs', 'sentences', 'pair', 'subsequent', 'original', 'inputs', 'random', 'chosen', 'assumption', 'disconnected', 'note', 'goal', 'balance', 'minimize', 'combined', 'believe', 'outperforms', 'short', 'tend', 'less', 'overall', 'makes', 'sense', 'scoring', 'mechanism', 'focus', 'purpose', 'outline', 'taken', 'things', 'concise', 'high', 'level', 'descriptions', 'given', 'somewhat', 'documentation', 'comments', 'basic', 'convert', 'json', 'csv', 'format', 'cleaning', 'labels', 'kfold', 'crossvalidation', 'list', 'dictionaries', 'csvs', 'pandas', 'dataframes', 'split', 'respective', 'trainingtest', 'select', 'import', 'environment', 'encode', 'tokenizer', 'library', 'tensors', 'pytorch', 'parameters', 'batch', 'wrap', 'sampler', 'sampling', 'dataloader', 'freeze', 'class', 'initialization', 'logic', 'initialize', 'optimizer', 'huggingface', 'compute', 'starting', 'weights', 'define', 'epochs', 'evaluation', 'spent', 'outside', 'building', 'weeks', 'researching', 'educating', 'started', 'believed', 'wed', 'andor', 'sentencevec', 'approaches', 'research', 'found', 'performed', 'allowed', 'easily', 'swap', 'weve', 'modelhyperparameter', 'ultimately', 'decided', 'identify', 'target', 'surrounding', 'intuitive', 'felt', 'worth', 'responseonly', 'contextonly', 'works', 'almost', 'always', 'extremely', 'oftentimes', 'serious', 'inherently', 'sounds', 'like', 'normal', 'statement', 'think', 'phrase', 'many', 'meanings', 'depending', 'huge', 'factors', 'friendly', 'encouraging', 'positive', 'far', 'include', 'setup', 'highlighted', 'green', 'color', 'precisio', 'n', 'description', 'bs', 'msl', 'max_seq_len', 'stopword', 'punctuations', 'served', 'helped', 'facets', 'wrote', 'initial', 'coordinated', 'meeting', 'times', 'lot', 'working', 'instrumental', 'getting', 'running', 'quickly', 'efficiently', 'able', 'solid', 'foundation', 'spend', 'focusing', 'hyperparameters', 'readme', 'strategize', 'approach', 'gpu', 'cpus', 'amardeep', 'kumar', 'vivek', 'anand', 'proceedings', 'workshop', 'figurative', 'debanjan', 'ghosh', 'avijit', 'vajpayee', 'smaranda', 'muresan', 'educational', 'service', 'institute', 'columbia', 'dghosh', 'avajpayeeetsorg', 'smaracolumbiaedu', 'shared', 'arxiv', 'preprint', 'glue', 'benchmark', 'leaderboard', 'nd', 'retrieved', 'november', 'httpsgluebenchmarkcomleaderboard', 'hankyol', 'lee', 'youngjae', 'yu', 'gunhee', 'kim', 'augmenting', 'unlabeled', 'ingham', 'dissecting', 'specifics', 'httpsmediumcomdissectingbertdissectingbertpartffedc', 'jacob', 'devlin', 'mingwei', 'chang', 'kenton', 'kristina', 'toutanova', 'ai', 'jacobdevlinmingweichangkentonlkristoutgooglecom', 'pretraining', 'nikhil', 'jaiswal', 'tanvi', 'dadu', 'kartikey', 'pant', 'separators', 'online', 'discourse', 'xiangjue', 'dong', 'changmao', 'li', 'jinho', 'choi', 'transformerbased', 'contextaware', 'threads', 'social', 'media', 'yinhan', 'liu', 'myle', 'ott', 'naman', 'goyal', 'jingfei', 'du', 'mandar', 'joshi', 'danqi', 'chen', 'omer', 'levy', 'mike', 'lewis', 'luke', 'zettlemoyer', 'veselin', 'stoyanov', 'robustly', 'optimized', 'conference', 'paper', 'iclr', 'suleiman', 'khan', 'phd', 'distilbert', 'xlnet', 'medium', 'towards', 'oct', 'towardsdatasciencecombertrobertadistilbertxlnetwhichonetousedabbaf', 'uiuc', 'mcs', 'fall', 'compete', 'summary', 'become', 'familiar', 'generally', 'implemented', 'surpasses', 'weekly', 'status', 'detail', 'week', 'individually', 'solving', 'explored', 'kaggle', 'notebooks', 'browsed', 'academic', 'papers', 'searched', 'internet', 'tools', 'aggregated', 'summarized', 'findings', 'agreed', 'submission', 'new', 'understand', 'local', 'machines', 'needed', 'cleaned', 'behavior', 'change', 'currently', 'enhancing', 'experimenting', 'changes', 'improve', 'ways', 'attempting', 'implement', 'enhanced', 'version', 'helps', 'remaining', 'fine', 'tune', 'ccc', 'preprocessing', 'b', 'xlmroberta', 'c', 'train_test_split', 'software', 'challengesissues', 'faced', 'smoothly', 'toughest', 'challenge', 'identifying', 'suitable', 'writing', 'case', 'taking', 'proven', 'consuming']
https://github.com/ccasey645/CourseProject	"team members: netid's of all team members: cdblair2. team of 1. cdblair2 (casey blair) is the captain. topic: i have chosen to update metapy's python version compatibility to python 3.8 on both windows 10 and osx 10.15. description: metapy currently will not install on windows 10 or mac osx 10.15 with python 3.8.*. my project will focus on updating metapy's code to be compatible with python 3.8 as it is the most stable recent version of python. for security reasons, python codebases around the world have been upgraded from python 2.* to python 3.* since python 2.*'s deprecation in january of 2020. python 2 is no longer being maintained and using python 2.* code in production is a security risk. however, when running the metapy toolkit on my assignments in this class, my classmates and i were only able to run metapy with python 2.7 (there were posts in piazza and slack about using python 2.7 exclusively as python 3.* compatibility was reported broken by everyone who attempted to use python 3). if i want to use this immensely useful toolkit in production code, i'm going to have to update the metapy toolkit's python compatibility to python 3.* to run with any production python server/project, so i would like to contribute to this open source toolkit by updating the repo to work with python 3.8. justifying the workload is at least 20 hours: i've attempted to run metapy on osx and windows 10 using python 3.8 and neither would install correctly: both os's failed to install metapy during the setup.py file's when using the command line command ""pip install metapy"" with python 3.8. both os's threw errrors related to the c bindings. i'm going to have to research which c bindings are broken, research pybind11 and get familiar with c bindings for python, and possibly research os related issues to get metapy to work with both windows 10 and osx 10.15. the issues with c bindings may take a while to fix as it appears that import of various cmake libraries in windows and osx have changed and will need substantial refactoring to work. also i will need to get familiar with pybind11 and c bindings for python. and there will be a lot of testing required to make sure functionality is working as expected: example programs will need to be run (if they exist), and tests will need to be updated. cs 410 casey blair final project progress report 11/29/2020 my final project is to update the metapy github repo to allow for installation with python 3. currently, when trying to install metapy using pip on both windows 10 and mac osx, if using a python 3 environment, the setup wheel fails to install the metapy package due to errors. however, if using a python 2.7 environment on both windows 10 and osx, the metapy library will install correctly. since python 2 was deprecated in january of 2020, updating the metapy code base to work with python 3.* environments is vital for using metapy in production code bases. i have been researching pybind11 and how python can be used with c and c++ code to understand how the metapy git repo works. metapy is a python wrapper for the meta github repo (https://github.com/meta-toolkit/meta). the meta code base is written in c++, and when the metapy package is installed with pip, the meta c++ code is downloaded and installed then a python interface is constructed so the code can be used from a python interpreter. when installing metapy in a python 2.7 environment, the pip installer downloads a tar.gz file from the github repo's releases page with the metapy code already compiled for a python 2.7 environment, which is why it can be installed correctly with a python 2 environment. all the necessary files, including third party libraries, are already downloaded and bundled in the tar.gz file that is then used to install metapy. however, when installing metapy using python 3.*, instead of using this tar.gz file from the github repo's releases page, the pip setup wheel builds the metapy code from scratch, which requires redownloading all third party libraries and compiling the c++ code in the meta git submodule. the third party library download step fails because a library the meta repo uses is failing to download from the url specified in the meta makefile build steps. the following error is repeated over and over again and the installation ultimately fails after 5 retries of downloading the missing package: -- downloading... dst='/users/caseyblair/documents/classes/cs_410/metapy/deps/meta/deps/icu-58.2/icu4c-58_2-src.tgz' timeout='none' -- using src='http://download.icu-project.org/files/icu4c/58.2/icu4c-58_2-src.tgz' -- [download 100% complete] * closing connection 2 * closing connection 0 * closing connection 1 -- verifying file... file='/users/caseyblair/documents/classes/cs_410/metapy/deps/meta/deps/icu-58.2/icu4c-58_2-src.tgz' -- md5 hash of /users/caseyblair/documents/classes/cs_410/metapy/deps/meta/deps/icu-58.2/icu4c-58_2-src.tgz does not match expected value expected: 'fac212b32b7ec7ab007a12dff1f3aea1' actual: 'ac2ff460bdda9c70e6ed803f5e4d03fb' -- hash mismatch, removing... -- retrying... first, i had to determine which errors were occurring on both operating systems (windows 10 and osx) to determine if the installation errors were related or operating system dependent. it turns out the same error is occurring on both windows 10 and osx which led me to believe the issue was not operating system dependent and that i needed to follow the build steps to determine why this third party library was failing to install. i had to figure out why the metapy package was installing correctly for python 2 but not python 3 as it didn't make sense that if the c++ code was being compiled on my laptop why it would compile correctly for python 2 but not python 3 since the installer would be using the same c++ compiler. now that i understand that this ""icu4c"" library is included in the tar.gz file downloaded for python 2 environments i now i understand that the c++ compile step would fail for both a python 2 and python 3 environment because this third party library is unable to be downloaded from this broken link. after researching why this ""icu4c"" package was failing to download repeatedly, i found out that the url used to download the ""icu4c-58_2-src.tgz"" no longer has this tgz file at this url. i had to step though the setup.py file's build steps and figure out what exactly the build steps were. the setup.py file from the metapy repo is actually running a c++ make file that downloads the meta git repo (https://github.com/meta-toolkit/meta), then runs a makefile to compile the c++ code for the host machine. the icu4c-58_2-src.tgz file download is performed in the meta c++ makefile system, so i need to figure out how to update this file download in this second git repo. while fixing this icu4c-58_2-src.tgz is definitely an important part of fixing the issues with the setup.py file's installation issues, it is unclear what further steps i will need to take to fix the python 3.* installation at this time. i will not know what other steps i will have to take to fix the c++ makefile compile steps since i'm blocked from progressing further though the compilation steps at this time until i can fix the icu4c-58_2-src.tgz file download. however, figuring out this third party download issue is vital to fixing the python 3 installation issues as the url currently in the meta git repo's makefile build steps to download the icu4c file no longer works. but it is possible i will run in to operating system dependent issues when the c++ code is able to be compiled. but until i can get to the point where the c++ compiler is able to attempt to compile the code, i have to fix these other issues that are preventing c++ code compilation from even being started. casey blair team member net id's: cdblar2 cs 410 final project fix broken metapy installation in python 3.8 environments my final project is to update the metapy github repo to allow for installation with python 3.8. currently, when trying to install metapy using pip on windows 10, mac osx, and linux if using a python 3.8 or higher environment, the install setup python wheel fails to install the metapy package due to errors. however, if using a python 3.7 - 2.7 environment the metapy library will install correctly. since it is vital to keep this library functioning with the latest version of python to allow this library to be used in production code bases. i have been researching pybind11 and how python can be used with c and c++ code to understand how the metapy git repo works. metapy is a python wrapper for the meta github repo (https://github.com/meta-toolkit/meta). the meta code base is written in c++, and when the metapy package is installed with pip, the meta c++ code is downloaded and installed then a python interface is constructed so the code can be used from a python interpreter. when installing metapy in a python 3.7 - 2.7 environment, the pip installer downloads a tar.gz file from the github repo's releases page with the metapy code already built for that specific python version's environment, which is why it can be installed correctly with a python 3.7 - 2.7 environments. the maintainers of the repository stopped making new releases after they published the python 3.7 version in august 2018. if there is not a pre-built tar file for the specific python version, then pip will use python's installation wheel system to manually build the version on the client's computer to do the installation of metapy. the metapy repository is a python wrapper around the meta library (https://github.com/meta- toolkit/meta). this meta project's code is written in c++. the pybind11 library allows for a python interface to be constructed between c++ code and python to allow for c++ code to be used in a python interpreter. i next researched the pybind11 python package and learned how c++ code could be used from a python interpreter as i have never written a python program that used c++ code before so i needed to understand this system to understand how metapy worked. at this point i was unsure if the c++ code was failing because the c++ code needed to be updated to be compatible with a new version of the c++ compiler, or maybe a dependency in the c++ code had changed unexpectedly which was causing the issue. i spent 3-4 hours reading the pybind documentation so i understood how this library was linking the c++ code from the meta submodule to the metapy python code. i also didn't know if metapy simply needed to be updated to be python 3.8 compatible. when i first used this library, my mac had 0python 3.8 installed as well as python 2.7 and since a release compatible with python 3.8 has not been released it caused the setup.py script to be used instead of the just downloading the prebuilt tar file. because the c++ files in the meta file needed to be compiled using the cmake files i also brushed up on c make files as it has been years since i've written one. i then downloaded the metapy code and ran the manual build steps outlined here: (https://github.com/meta-toolkit/metapy#getting-started-the-hard-way). i ran in to many issues trying to get my c++ compiler to compile the meta. i also had to brush up on c++ make files as the meta repo's c++ build steps were failing, so i needed to figure out how the system was being built and it required me to refresh my knowledge of c++ make files as i have not written one in over 5 years. after this initial research, which took 7-8 hours, i started stepping though the c++ compiler errors one at a time. the problem with debugging c++ compiler errors is that when the compiler encounters the first error, it exits the compilation. so the developer doesn't know how many more errors there may be until after the fix the previous error: there can only be one error encountered at a time since the compiler exits the compilation after the first encountered error. so i knew i needed to fix all the errors the c++ compiler encountered here to allow the system to build correctly for python 3.8. i attempted to install the metapy library in my python 3.8 environment using the following command (which failed): sudo python3.8 -m pip install metapy the first error i ran in to was due to a missing c header file on my operating system. this was to be expected as i just created this virtual machine with a clean install of ubuntu and it did not have python 3.8 installed on it by default, so i had installed python 3.8 but forgot to install some development tools associated with python. i needed to install the debian package python3.8-dev with the following command: sudo apt-get install python3.8-dev to install the missing python.h header file that the c++ compiler was throwing an error because this file was misssing from my operating system. i had to research the error being thrown to figure out that the python3.8-dev package was needed to fix the missing python.h file error being thrown by the metapy install wheel. after fixing the python.h missing file issue, rerunning the metapy's installation command would fail with the following error repeating five times before exiting the installation: -- downloading... dst='/users/caseyblair/documents/classes/cs_410/metapy/deps/meta/deps/icu-61.1/icu4c-61_1-src.tgz' timeout='none' -- using src='http://download.icu-project.org/files/icu4c/61.1/icu4c-61_1-src.tgz'' -- [download 100% complete] * closing connection 2 * closing connection 0 * closing connection 1 -- verifying file... file='/users/caseyblair/documents/classes/cs_410/metapy/deps/meta/deps/icu-61.1/icu4c-61_1-src.tgz' -- md5 hash of /users/caseyblair/documents/classes/cs_410/metapy/deps/meta/deps/icu-61.1/icu4c-61_1-src.tgz does not match expected value expected: 'fac212b32b7ec7ab007a12dff1f3aea1' actual: 'ac2ff460bdda9c70e6ed803f5e4d03fb' -- hash mismatch, removing... -- retrying... it was very strange that this icu tar file download was producing a different md5 hash after each attempt to download the tar file. i decided to investigate this further as if the tar file had been updated, but the expected md5 hash had not been, then at least the same incorrect md5 hash should be displaying each time. however, the actual md5 hash was a different hash each time, which made me suspect a different error was occurring. i decided to attempt to visit the url the c++ code was attempting to download the dependency from (http://download.icu-project.org/files/icu4c/61.1/icu4c-61_1-src.tgz). after pasting this url in to my web browser, instead of a tgz file download, my browser took me to an html page listing all the releases of this icu dependency. puzzled why this url was not a download link anymore, i navigated around this website until i found an answer. after going to the ""source repository"" page, at the top of this page i found my answer (http://site.icu-project.org/repository http://site.icu-project.org/repository). the code repository that used to host this icu dependency was migrated from subversion to github. therefore, the previous download link would not work anymore, and all pre-built tgz files were now on github. i then returned to the icu version release page and found my version 61 listed and clicked on that link. i was redirected to a page listing the change log for this new version and found the link to the git repo where the code now resides: https://github.com/unicode-org/icu/releases/tag/release-61-1. i navigated to the github repo to find many pre-built tgz files. i had to step though the setup.py file's build steps and figure out what exactly the build steps were ad where this icu package was being downloaded at in the code. the setup.py file from the metapy repo is actually running a c++ make file that downloads the meta git repo (https://github.com/meta-toolkit/meta), then runs a makefile to compile the c++ code for the host machine. the icu4c-61_1 -src.tgz file download is performed in the meta c++ makefile system, so i need to figure out how to update this file download in this second git repo. it took me a while to search though all the c++ code in the meta repo to find the correct location where the icu package was being downloaded. i finally found the line in the meta repo where the icu package was downloaded. i tried each of the tgz files until once successfully downloaded and the c++ compiler progressed past that point of the installation. each attempt took 20 minutes as the c++ compiler is quite slow, so this was a manual process to debug. at this point, i was not sure how many other issues i would encounter. i didn't know if i would need to fix many more of these external dependency url's that were broken, or if this was the only one. fortunately, this was the only broken url and the rest of the compilation succeeded. i successfully fixed the python 3.8 build system as the c++ compiler was able to compile the meta repo successfully, then install the metapy library using pip. i did have to make forks of the metapy and meta repos in github as my github account does not have write access to the main metapy or meta repos. i tried to make a new branch on the metapy and meta repos to update the code, however, i was met with 403 unauthorized errors each time. so i needed to fork the repos and make my own version, then make merge requests from my forked repo back to the parent repo. i currently have three open github pull requests to fix this issue in the original parent repos: https://github.com/meta-toolkit/meta/pull/222, https://github.com/meta-toolkit/meta/pull/220, and https://github.com/meta-toolkit/metapy/pull/10. all three pull requests are currently waiting review by the code repo's members so i have no idea when or if they will approve these changes as none of them have made an update to the repo since august 2018. however, you can currently use my forked version of metapy to correctly install metapy for python 3.8 with the following command: sudo python3.8 -m pip install git+https://github.com/ccasey645/metapy.git this command, on ubuntu 18.04, will build and install the metapy library correctly. this command will instead download my forked version of metapy from my github repo and the installation succeeds. i did not have time to attempt the build on osx and windows 10 too as spent well over 20 hours figuring out the code changes needed to fix the c++ compiler errors. however, when i was attempting to run this on osx and windows 10 my c++ compiler installations on these os's were in a very broken state: windows 10 needed some new version of visual studio c++ library installed that would break other projects i was working on, and my osx's clang compiler was throwing errors saying that it was not allowed to compile c files using a c++ compiler so i decided to focus just on the code changes needed to fix the errors and leave the osx and windows 10 tgz building to the metapy code repo owners. when the metapy code repo owners accept my github pull requests, there is a make-release.sh script in the metapy repo that will build the appropriate tar files for all three platforms, so each client computer will not have to have a 100% configured c++ compiler just to install the metapy library. courseproject team name game of threads netid's cdblair2 (casey blair) topic: update metapy repo's code to fix errors when installing with python 3.8 environment final project documentation/report file name: final_project_final_report.pdf link: https://github.com/ccasey645/courseproject/blob/main/final_project_final_report.pdf presentation video file: link: https://drive.google.com/file/d/1ty8qgflu-29fex0ypsj502wzu_ywygvt/view?usp=sharing on google drive because git's file size limit prevented me from uploading it here. installation demo video file: mentioned this in presentation video file this 12 minute video demonstrated how ""sudo python3.8 -m pip install metapy"" fails, but ""sudo python3.8 -m pip install git+https://github.com/ccasey645/metapy.git"" succeeds"" link: https://drive.google.com/file/d/1cb1ybejkyavfmk_liholwqlwr72blmas/view?usp=sharing on google drive source code: courseproject/metapy note: this is a git submodule that will redirect you to another github repository. this is where all my code is since i was updating the metapy repo: i needed to make a fork of the original repo."	['team', 'members', 'netids', 'cdblair', 'casey', 'blair', 'captain', 'topic', 'chosen', 'update', 'metapys', 'python', 'version', 'compatibility', 'windows', 'osx', 'description', 'metapy', 'currently', 'install', 'mac', 'project', 'focus', 'updating', 'code', 'compatible', 'stable', 'recent', 'security', 'reasons', 'codebases', 'around', 'world', 'upgraded', 'since', 'deprecation', 'january', 'longer', 'maintained', 'using', 'production', 'risk', 'however', 'running', 'toolkit', 'assignments', 'class', 'classmates', 'able', 'run', 'posts', 'piazza', 'slack', 'exclusively', 'reported', 'broken', 'everyone', 'attempted', 'use', 'want', 'immensely', 'useful', 'im', 'going', 'toolkits', 'serverproject', 'would', 'like', 'contribute', 'open', 'source', 'repo', 'work', 'justifying', 'workload', 'least', 'hours', 'ive', 'neither', 'correctly', 'oss', 'failed', 'setuppy', 'files', 'command', 'line', 'pip', 'threw', 'errrors', 'related', 'c', 'bindings', 'research', 'pybind', 'get', 'familiar', 'possibly', 'os', 'issues', 'may', 'take', 'fix', 'appears', 'import', 'various', 'cmake', 'libraries', 'changed', 'need', 'substantial', 'refactoring', 'also', 'lot', 'testing', 'required', 'make', 'sure', 'functionality', 'working', 'expected', 'example', 'programs', 'exist', 'tests', 'updated', 'cs', 'final', 'progress', 'report', 'github', 'allow', 'installation', 'trying', 'environment', 'setup', 'wheel', 'fails', 'package', 'due', 'errors', 'library', 'deprecated', 'base', 'environments', 'vital', 'bases', 'researching', 'used', 'understand', 'git', 'works', 'wrapper', 'meta', 'httpsgithubcommetatoolkitmeta', 'written', 'installed', 'downloaded', 'interface', 'constructed', 'interpreter', 'installing', 'installer', 'downloads', 'targz', 'file', 'repos', 'releases', 'page', 'already', 'compiled', 'necessary', 'including', 'third', 'party', 'bundled', 'instead', 'builds', 'scratch', 'requires', 'redownloading', 'compiling', 'submodule', 'download', 'step', 'uses', 'failing', 'url', 'specified', 'makefile', 'build', 'steps', 'following', 'error', 'repeated', 'ultimately', 'retries', 'downloading', 'missing', 'dstuserscaseyblairdocumentsclassescs_metapydepsmetadepsicuicuc_srctgz', 'timeoutnone', 'srchttpdownloadicuprojectorgfilesicucicuc_srctgz', 'complete', 'closing', 'connection', 'verifying', 'fileuserscaseyblairdocumentsclassescs_metapydepsmetadepsicuicuc_srctgz', 'md', 'hash', 'userscaseyblairdocumentsclassescs_metapydepsmetadepsicuicuc_srctgz', 'match', 'value', 'facbbecabadfffaea', 'actual', 'acffbddaceedfedfb', 'mismatch', 'removing', 'retrying', 'first', 'determine', 'occurring', 'operating', 'systems', 'system', 'dependent', 'turns', 'led', 'believe', 'issue', 'needed', 'follow', 'figure', 'didnt', 'sense', 'laptop', 'compile', 'compiler', 'icuc', 'included', 'fail', 'unable', 'link', 'repeatedly', 'found', 'icuc_srctgz', 'tgz', 'though', 'exactly', 'actually', 'runs', 'host', 'machine', 'performed', 'second', 'fixing', 'definitely', 'important', 'part', 'unclear', 'time', 'know', 'blocked', 'progressing', 'compilation', 'figuring', 'possible', 'point', 'attempt', 'preventing', 'even', 'started', 'member', 'net', 'ids', 'cdblar', 'linux', 'higher', 'keep', 'functioning', 'latest', 'built', 'specific', 'versions', 'maintainers', 'repository', 'stopped', 'making', 'new', 'published', 'august', 'prebuilt', 'tar', 'pythons', 'manually', 'clients', 'computer', 'httpsgithubcommeta', 'toolkitmeta', 'projects', 'allows', 'next', 'researched', 'learned', 'could', 'never', 'program', 'worked', 'unsure', 'maybe', 'dependency', 'unexpectedly', 'causing', 'spent', 'reading', 'documentation', 'understood', 'linking', 'simply', 'well', 'release', 'released', 'caused', 'script', 'brushed', 'years', 'one', 'ran', 'manual', 'outlined', 'httpsgithubcommetatoolkitmetapygettingstartedthehardway', 'many', 'brush', 'refresh', 'knowledge', 'initial', 'took', 'stepping', 'problem', 'debugging', 'encounters', 'exits', 'developer', 'doesnt', 'previous', 'encountered', 'knew', 'sudo', 'header', 'created', 'virtual', 'clean', 'ubuntu', 'default', 'forgot', 'development', 'tools', 'associated', 'debian', 'pythondev', 'aptget', 'pythonh', 'throwing', 'misssing', 'thrown', 'rerunning', 'repeating', 'five', 'times', 'exiting', 'strange', 'icu', 'producing', 'different', 'decided', 'investigate', 'incorrect', 'displaying', 'made', 'suspect', 'visit', 'attempting', 'httpdownloadicuprojectorgfilesicucicuc_srctgz', 'pasting', 'web', 'browser', 'html', 'listing', 'puzzled', 'anymore', 'navigated', 'website', 'answer', 'top', 'httpsiteicuprojectorgrepository', 'migrated', 'subversion', 'therefore', 'returned', 'listed', 'clicked', 'redirected', 'change', 'log', 'resides', 'httpsgithubcomunicodeorgicureleasestagrelease', 'find', 'ad', 'icuc_', 'srctgz', 'search', 'correct', 'location', 'finally', 'tried', 'successfully', 'progressed', 'past', 'minutes', 'quite', 'slow', 'process', 'debug', 'encounter', 'external', 'urls', 'fortunately', 'rest', 'succeeded', 'fixed', 'forks', 'account', 'write', 'access', 'main', 'branch', 'met', 'unauthorized', 'fork', 'merge', 'requests', 'forked', 'back', 'parent', 'three', 'pull', 'original', 'httpsgithubcommetatoolkitmetapull', 'httpsgithubcommetatoolkitmetapypull', 'waiting', 'review', 'idea', 'approve', 'changes', 'none', 'githttpsgithubcomccaseymetapygit', 'succeeds', 'installations', 'state', 'visual', 'studio', 'break', 'osxs', 'clang', 'saying', 'allowed', 'leave', 'building', 'owners', 'accept', 'makereleasesh', 'appropriate', 'platforms', 'client', 'configured', 'courseproject', 'name', 'game', 'threads', 'documentationreport', 'final_project_final_reportpdf', 'httpsgithubcomccaseycourseprojectblobmainfinal_project_final_reportpdf', 'presentation', 'video', 'httpsdrivegooglecomfiledtyqgflufexypsjwzu_ywygvtviewuspsharing', 'google', 'drive', 'gits', 'size', 'limit', 'prevented', 'uploading', 'demo', 'mentioned', 'minute', 'demonstrated', 'httpsdrivegooglecomfiledcbybejkyavfmk_liholwqlwrblmasviewuspsharing', 'courseprojectmetapy', 'note', 'redirect', 'another']
https://github.com/cds95/CourseProject	cs 410 project progress report christopher dimitri sastropranoto project description create a google chrome extension that can extract the text from a cnn news article and give a text summary about it. progress my main goal for the early part of the project was to gain some experience using python's nltk library to process and summarize a given piece of text. i've spent most of the time going over online tutorials and documentation about nltk. in addition to this, i've also spent time researching the different types of ways that text is usually summarized. these methods include abstractive and extractive methods. abstractive summarization is done by analyzing the text to determine it's meaning, which is then used to generate a summary. extractive methods rely on scoring the words and sentences in a passage to determine important parts. these scoring functions are similar to those presented in cs 410. for the purposes of this project i will be using the latter method. after going through the documentation, i went ahead and created a jupyter notebook to start getting some hands on experience using nltk. i've done some basic preprocessing steps to tokenize and build a document-term matrix out of a sample article i pulled from cnn. challenges the biggest challenge so far has been familiarizing myself with the nltl library. one thing that was hard was to setup the library in the beginning as the installation steps were not as simple as just using pip. remaining work the last remaining step to completing the jupyter notebook is to implement the scoring function and actual text summarization steps. fortunately nltk has some built in libraries that can help with this meaning that it should not take up too much time. once this step has been completed, the following things need to be done. 1. package jupyter notebook code as an api. 2. build google chrome extension. the extension will consist of a simple ui with a button allowing the user to summarize the article. all it does is just scrape the text from the screen, pass it into the api from step 1 and finally outputting the result. cs 410 project documentation christopher dimitri sastropranoto project goal the goal of the project was to build a google chrome extension that can summarize a cnn article. architecture the initial plan was to host a python api that would accept get requests from the extension. the extension would pass in the raw text to the api and get the summarized text back. i was unfortunately unable to successfully host the python server due to time constraints and a lack of experience in using either django or flask. in the end i worked around this issue by having all the code to summarize text live in the chrome extension. implementation the project code is mainly split into two parts. i first did some exploratory work on how to do extractive text summarization using the nltk python library in a jupyter notebook environment. the notebook can be found in the exploration folder. the next step was to actually build the chrome extension. the code for the extension lives in the chrome-extension folder. folder structure exploration test-article.txt --> test article used for exploratory purposes text_summarization_exploration.ipynb --> jupyter notebook chrome-extension manifest.json --> configuration file for chrome extension content.js --> code for scraping the page content and summarizing it user-interface.js --> code to hand ui interactions user-interface.css --> stylesheet for extension. user-interface.html --> html file for extension ui. icon.png --> icon for extension. summarization algorithm the program relies on extractive summarization to summarize text. in extractive summarization, each sentence is given a score and the highest scoring sentences are used in the summary. this means that the summary is only limited to the content in the text. sentences are scored based on the frequency counts of each of their non-stop word terms. 1. tokenize words and sentences 2. remove stop words from tokenized word list. 3. calculate the frequency of each word and put into a dictionary. the dictionary keys are the words and the values are the counts. 4. normalize the counts in the dictionary from step 2. 5. calculate the score of each sentence. the score is calculated by adding up the scores of each word in a sentence. 6. sort sentences by descending order of score. 7. take the top n sentences by score but preserve their order. 8. output step 7 as the result. improvements * incorporate inverse document frequency into the scoring function. * use abstractive summarization instead of extractive summarization. abstractive summarization uses deep learning models to decipher the meaning of the passage and generate new sentences for the summary. self evaluation i was able to accomplish the goals of the project as the extension i've implemented successfully scrapes the text from a cnn news article and manages to give a summary for it. running the program refer to the instructions provided in the readme.md section. cs410 project proposal christopher dimitri sastropranoto 678097021 project description the proposed project is to implement a google chrome extension that can quickly summarize a medium articles. who will benefit from such a tool? almost anyone can benefit from such a tool. for example, i am an avid user of medium but feel that some articles are unnecessarily lengthy and would love to save some time just getting the gist of an article by having a quick summary of what it is about. if i'm interested in the summary then i could go ahead and read the full article. existing tools doing a quick google search resulted in several chrome extensions and websites that do something similar. the biggest drawback from most of them was that they required the user to either enter in a link to an article, or copy and paste the article's contents. the goal is for my tool is to allow the user to skip those steps and simply click a button to summarize the article's contents whilst on the browsing. programming language and other other resources there are currently several online services that i can use to help implement this project. my plan is to use the python nltk library to help with summarizing text and packaging that inside a chrome extension ui. in addition to this, i plan to do my own online research by utilizing youtube, medium and other websites to augment what i've learnt in cs410. techniques and algorithms from my research so far, summarizing text requires some preprocessing steps such as lemmatization and pos tagging. once this is done, the next step would be to model topic distributions in the document. in addition to this, there are several summarization techniques that need to be explored. these are extraction-based summarization, extractive summary and abstract based summarization. how will you demonstrate the usefulness of your tool? if successful, i plan to demonstrate the usefulness of my tool by creating a video and also releasing it in the google extension store. project timeline project start date: 10/26/20 work justification i feel that the scope of the project sufficiently fulfills the 20 hour requirement as it involves multiple components. this includes doing further research into the summarization techniques, preprocessing the data, training it using nltk and finally implementing a chrome extension ui for it. milestone target date complete research into summarization techniques 10/28 preprocess data 11/4 train text summarizer. this step will be done in isolation using jupyternotebook. 11/8 build chrome extension and hook up to text summarizer. this step requires implementing a way for the extension to scrape the article's contents from the website. 11/13 testing and bugfixes if needed 11/16 courseproject running the project jupyter notebook exploration 1) install jupyter notebook by following instructions here https://jupyter.org/install. from the root of the project directory. 2) cd exploration 3) jupyter-notebook chrome extension refer to the demo to see how to run the extension. link to demo: https://www.youtube.com/watch?v=pomi_eibtcs	['cs', 'project', 'progress', 'report', 'christopher', 'dimitri', 'sastropranoto', 'description', 'create', 'google', 'chrome', 'extension', 'extract', 'text', 'cnn', 'news', 'article', 'give', 'summary', 'main', 'goal', 'early', 'part', 'gain', 'experience', 'using', 'pythons', 'nltk', 'library', 'process', 'summarize', 'given', 'piece', 'ive', 'spent', 'time', 'going', 'online', 'tutorials', 'documentation', 'addition', 'also', 'researching', 'different', 'types', 'ways', 'usually', 'summarized', 'methods', 'include', 'abstractive', 'extractive', 'summarization', 'done', 'analyzing', 'determine', 'meaning', 'used', 'generate', 'rely', 'scoring', 'words', 'sentences', 'passage', 'important', 'parts', 'functions', 'similar', 'presented', 'purposes', 'latter', 'method', 'went', 'ahead', 'created', 'jupyter', 'notebook', 'start', 'getting', 'hands', 'basic', 'preprocessing', 'steps', 'tokenize', 'build', 'documentterm', 'matrix', 'sample', 'pulled', 'challenges', 'biggest', 'challenge', 'far', 'familiarizing', 'nltl', 'one', 'thing', 'hard', 'setup', 'beginning', 'installation', 'simple', 'pip', 'remaining', 'work', 'last', 'step', 'completing', 'implement', 'function', 'actual', 'fortunately', 'built', 'libraries', 'help', 'take', 'much', 'completed', 'following', 'things', 'need', 'package', 'code', 'api', 'consist', 'ui', 'button', 'allowing', 'user', 'scrape', 'screen', 'pass', 'finally', 'outputting', 'result', 'architecture', 'initial', 'plan', 'host', 'python', 'would', 'accept', 'get', 'requests', 'raw', 'back', 'unfortunately', 'unable', 'successfully', 'server', 'due', 'constraints', 'lack', 'either', 'django', 'flask', 'end', 'worked', 'around', 'issue', 'live', 'implementation', 'mainly', 'split', 'two', 'first', 'exploratory', 'environment', 'found', 'exploration', 'folder', 'next', 'actually', 'lives', 'chromeextension', 'structure', 'testarticletxt', 'test', 'text_summarization_explorationipynb', 'manifestjson', 'configuration', 'file', 'contentjs', 'scraping', 'page', 'content', 'summarizing', 'userinterfacejs', 'hand', 'interactions', 'userinterfacecss', 'stylesheet', 'userinterfacehtml', 'html', 'iconpng', 'icon', 'algorithm', 'program', 'relies', 'sentence', 'score', 'highest', 'means', 'limited', 'scored', 'based', 'frequency', 'counts', 'nonstop', 'word', 'terms', 'remove', 'stop', 'tokenized', 'list', 'calculate', 'put', 'dictionary', 'keys', 'values', 'normalize', 'calculated', 'adding', 'scores', 'sort', 'descending', 'order', 'top', 'n', 'preserve', 'output', 'improvements', 'incorporate', 'inverse', 'document', 'use', 'instead', 'uses', 'deep', 'learning', 'models', 'decipher', 'new', 'self', 'evaluation', 'able', 'accomplish', 'goals', 'implemented', 'scrapes', 'manages', 'running', 'refer', 'instructions', 'provided', 'readmemd', 'section', 'proposal', 'proposed', 'quickly', 'medium', 'articles', 'benefit', 'tool', 'almost', 'anyone', 'example', 'avid', 'feel', 'unnecessarily', 'lengthy', 'love', 'save', 'gist', 'quick', 'im', 'interested', 'could', 'go', 'read', 'full', 'existing', 'tools', 'search', 'resulted', 'several', 'extensions', 'websites', 'something', 'drawback', 'required', 'enter', 'link', 'copy', 'paste', 'contents', 'allow', 'skip', 'simply', 'click', 'whilst', 'browsing', 'programming', 'language', 'resources', 'currently', 'services', 'packaging', 'inside', 'research', 'utilizing', 'youtube', 'augment', 'learnt', 'techniques', 'algorithms', 'requires', 'lemmatization', 'pos', 'tagging', 'model', 'topic', 'distributions', 'explored', 'extractionbased', 'abstract', 'demonstrate', 'usefulness', 'successful', 'creating', 'video', 'releasing', 'store', 'timeline', 'date', 'justification', 'scope', 'sufficiently', 'fulfills', 'hour', 'requirement', 'involves', 'multiple', 'components', 'includes', 'data', 'training', 'implementing', 'milestone', 'target', 'complete', 'preprocess', 'train', 'summarizer', 'isolation', 'jupyternotebook', 'hook', 'way', 'website', 'testing', 'bugfixes', 'needed', 'courseproject', 'install', 'httpsjupyterorginstall', 'root', 'directory', 'cd', 'demo', 'see', 'run', 'httpswwwyoutubecomwatchvpomi_eibtcs']
https://github.com/cf16-uiuc/CourseProject	progress report for my project i am working on the classification competition. i have made some significant progress on it over the last few weeks. the tasks i have completed are preprocessing the text - cleaning it up, converting emojis into text, and preparing the data to be used for training the model. i have also spent a lot of time reading about bert and have trained an initial model using bert. tasks going forward are testing my code with the test data provided to see how my initial model performs to the baseline and optimizing the model to improve performance. depending on how that performance goes i may explore other options for training the model as well. i then need to work on creating the documentation and cleaning up and organizing the code i have written. i am currently not facing any challenges as i work on my project. project proposal cs410 fall 2020 what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. i will be working on this project by myself. as the only team member i will be the captain. name: christine frandsen netid: cf16 which competition do you plan to join? i am planning to join the text classification project if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. yes, i am excited to learn more about state-of-the-art neural network classifiers. some neural classifiers i am looking at are the perceptron network, a simple model to set a baseline, an extreme learning machine (elm) network, and a support vector machine (svm), although this is not generally considered a neural network. i have had a few experiences with perceptron networks and svms and am eager to expand my knowledge to other neural network classifiers. in terms of deep learning frame works i have worked a little bit with tensorflow and keras, but am a little rusty. i am hoping to incorporate those as well as potentially bringing in pytorch as well. which programming language do you plan to use? i plan to use python for this project. text classification competition: twitter sarcasm detection this project is for cs410 during the fall 2020 semester at uiuc. more details about this competition can be found at: https://github.com/cs410fall2020/classificationcompetition implementation overview this classifier relies on the simple transformer package, based on the transformer package from huggingface. the documentation for simple transformer can be found here: https://simpletransformers.ai/docs/classification-models/#classificationmodel. all packages needed can be installed with the package manager pip. the code is broken into two files - train.py and test.py. in train.py the focus of the file is training the model. prior to training the model we do a little bit of preprocessing of the data. first, we remove all stop words, then we replace all emoticons with text that may be able to provide information to the model that is trained. for the training we rely on the simple transformer package. from that package we use the binary classifier. their setup allows us to bring in any pretrained model and adjust to our data. we looked at multiple pretrained models from huggingface found here: https://huggingface.co/models. in the end we discovered that simply using the bert model yielded the best results. to apply labels to a new set of tweets we can run the test.py file. this does a similar process of converting emoticons to text and removing stop words to preprocess the data. we then read in our trained model from train.py and can use the predict() function to predict the new labels. running the code to run the code you need to ensure that all the required packages are installed. the code can be run from the command line by running either python train.py or python test.py, depending on which file needs to be run. the code can also be run from python ides. the different variables, such as file name for training data, number of epochs, or learning rate can be adjusted within the file at the beginning of the file. the end result of running train.py will be created in a folder titled outputs. the test.py file reads from the outputs folder and will output and an answer.txt file. for a detailed overview of running the code, an instructional demo can be found here: https://youtu.be/hzymmahryae functions the code contains three main functions - convert_emojis (appears in both files), bert_training (train.py), and predict_sarcasm (test.py). convert_emojis(text): this function takes a single input, text. it cycles through the list of known emojis, looking for them in the text and replacing them to allow for consistency. bert_training(model_type, model_base, train_data, early_stop, early_stop_delta, overwrite, epoch, batch_size, learning_rate, output): this function is where the model is trained. several inputs are required, all of which are defined at the beginning of the file. this allows for models to be trained for different model types, varying epochs, and different batch sizes easily. also allows a user to specify where the output should be written out to, making it easy to save several different models without worrying about overwriting existing models. predict_sarcasm(data_path, results, model_loc, model): this function takes a model and input text and generated labels for whether or not a tweet is sarcastic or not. the inputs for this function allow the user to specify the location of the data, what the results file should be called, where the model is located, and what type of model it is. this allows the user to easily chagne various parameters to compare different models performance. parameter tuning and model exploration the main parameters that we focused on for this project were learning rate, batch size, number of epochs, and base models. we explored using roberta, xlnet, and electra, before finally deciding on bert. we also looked at using an ensemble method combining results from bert, electra, and roberta. however, those results were below the baseline, so we opted to just use the bert model. we also looked at batch size. we found that at batch size of 100 performed well. the classic transformer package used 8 as default. this did well, however, not well enough to beat the baseline. when we increased the batch size by much more, we found that the model tended to predict everything to be sarcastic. notes the final trained model was not uploaded to git. please reach out to me if you would like to see the model or have questions about it. a similar model can be generated by first running train.py before running test.py. useful links and sources https://huggingface.co/models https://simpletransformers.ai/docs/binary-classification/ https://towardsdatascience.com/simple-transformers-introducing-the-easiest-bert-roberta-xlnet-and-xlm-library-58bf8c59b2a3 https://github.com/thilinarajapakse/simpletransformers	['progress', 'report', 'project', 'working', 'classification', 'competition', 'made', 'significant', 'last', 'weeks', 'tasks', 'completed', 'preprocessing', 'text', 'cleaning', 'converting', 'emojis', 'preparing', 'data', 'used', 'training', 'model', 'also', 'spent', 'lot', 'time', 'reading', 'bert', 'trained', 'initial', 'using', 'going', 'forward', 'testing', 'code', 'test', 'provided', 'see', 'performs', 'baseline', 'optimizing', 'improve', 'performance', 'depending', 'goes', 'may', 'explore', 'options', 'well', 'need', 'work', 'creating', 'documentation', 'organizing', 'written', 'currently', 'facing', 'challenges', 'proposal', 'cs', 'fall', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'member', 'name', 'christine', 'frandsen', 'netid', 'cf', 'plan', 'join', 'planning', 'choose', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'deep', 'learning', 'frameworks', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'yes', 'excited', 'looking', 'perceptron', 'simple', 'set', 'extreme', 'machine', 'elm', 'support', 'vector', 'svm', 'although', 'generally', 'considered', 'experiences', 'networks', 'svms', 'eager', 'expand', 'knowledge', 'terms', 'frame', 'works', 'worked', 'little', 'bit', 'tensorflow', 'keras', 'rusty', 'hoping', 'incorporate', 'potentially', 'bringing', 'pytorch', 'programming', 'language', 'use', 'python', 'twitter', 'sarcasm', 'detection', 'semester', 'uiuc', 'details', 'found', 'httpsgithubcomcsfallclassificationcompetition', 'implementation', 'overview', 'classifier', 'relies', 'transformer', 'package', 'based', 'huggingface', 'httpssimpletransformersaidocsclassificationmodelsclassificationmodel', 'packages', 'needed', 'installed', 'manager', 'pip', 'broken', 'two', 'files', 'trainpy', 'testpy', 'focus', 'file', 'first', 'remove', 'stop', 'words', 'replace', 'emoticons', 'able', 'provide', 'information', 'rely', 'binary', 'setup', 'allows', 'us', 'bring', 'pretrained', 'adjust', 'looked', 'multiple', 'models', 'httpshuggingfacecomodels', 'end', 'discovered', 'simply', 'yielded', 'best', 'results', 'apply', 'labels', 'new', 'tweets', 'run', 'similar', 'process', 'removing', 'preprocess', 'read', 'predict', 'function', 'running', 'ensure', 'required', 'command', 'line', 'either', 'needs', 'ides', 'different', 'variables', 'number', 'epochs', 'rate', 'adjusted', 'within', 'beginning', 'result', 'created', 'folder', 'titled', 'outputs', 'reads', 'output', 'answertxt', 'detailed', 'instructional', 'demo', 'httpsyoutubehzymmahryae', 'functions', 'contains', 'three', 'main', 'convert_emojis', 'appears', 'bert_training', 'predict_sarcasm', 'convert_emojistext', 'takes', 'single', 'input', 'cycles', 'list', 'known', 'replacing', 'allow', 'consistency', 'bert_trainingmodel_type', 'model_base', 'train_data', 'early_stop', 'early_stop_delta', 'overwrite', 'epoch', 'batch_size', 'learning_rate', 'several', 'inputs', 'defined', 'types', 'varying', 'batch', 'sizes', 'easily', 'user', 'specify', 'making', 'easy', 'save', 'without', 'worrying', 'overwriting', 'existing', 'predict_sarcasmdata_path', 'model_loc', 'generated', 'whether', 'tweet', 'sarcastic', 'location', 'called', 'located', 'type', 'chagne', 'various', 'parameters', 'compare', 'parameter', 'tuning', 'exploration', 'focused', 'size', 'base', 'explored', 'roberta', 'xlnet', 'electra', 'finally', 'deciding', 'ensemble', 'method', 'combining', 'however', 'opted', 'performed', 'classic', 'default', 'enough', 'beat', 'increased', 'much', 'tended', 'everything', 'notes', 'final', 'uploaded', 'git', 'please', 'reach', 'would', 'like', 'questions', 'useful', 'links', 'sources', 'httpssimpletransformersaidocsbinaryclassification', 'httpstowardsdatasciencecomsimpletransformersintroducingtheeasiestbertrobertaxlnetandxlmlibrarybfcba', 'httpsgithubcomthilinarajapaksesimpletransformers']
https://github.com/chanwoo321/CourseProject	"1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. which paper have you chosen? 3. which programming language do you plan to use? 4. can you obtain the datasets used in the paper for evaluation? 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? the group captain of this project is jonathan kim (jck3) and the other two members of the group are michael xiang (mx9) and tyler ruckstaetter (thr2). the paper we have chosen is "" a cross-collection mixture model for comparative text mining."" the language that we will be using for this project is python. since the paper is from 2004, it seems like the exact datasets used in the paper will be unavailable for us. however, a similar dataset will be obtainable since the nature of the data is very publicly available. as of right now, we can still use reviews of laptops as used in the paper as well as more modern laptops. war news is available on many news sites, so while the exact documents from the paper may not be directly used, they will be very similar in nature. progress report so far, we have researched the sources as mentioned in the paper. in order to keep this project as similar to the paper as possible, articles were pulled from the websites mentioned in the paper. this includes war news from cnn and bbc sites online and getting reviews from epinions.com. since epinions no longer exists as a domain, an archive of the internet was used in order to extract data from the approximate time period the paper was published. this led to a couple of complications: it was unclear in the paper what articles/reviews in particular were used despite mentioning the website they were taken from. while internet archives are available to extract data from that period of time, the archives are not comprehensive. thus, we were not able to get all of the reviews mentioned in the paper (though we believe a sufficient number of them have been obtained to still run the model in a meaningful manner). additionally, since the specific articles/reviews were not released in the paper, it is unclear whether our extracted data matches the data used for the model in the paper. regardless, we expect the content to be very similar, so this should not affect the results. the only task that is left to be done is to implement the model itself. this involves two parts: creating the naive mixture model and creating the mixture model described in the paper. this will likely be in a format similar to that of mp3, so it should be a doable amount of time. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. demo video note that the video was not recorded with the final edits to the repository. the actual results may differ/be more accurate. table of contents introduction brief overview obtaining and organizing the data running the software code information baseline model cross-collection model introduction hello! our group consists of three people: jonathan kim, michael xiang, and tyler ruckstaetter. this repository was created for the final project for the class cs 410: text information systems at the university of illinois at urbana-champaign. the purpose of this project was to reproduce the comparatrive text mining model described in the paper ""a cross-collection mixture model for comparative text mining"", which can be found here. brief overview the model in the paper was created in order to solve the novel text mining problem of ""comaparative text mining"". this problem consists of trying to find common themes across some collections of texts and to summarize the similarities and differences between these collections. thus, a generative probabilistic mixture model was proposed. it performs cross-collection clustering and within-collection clustering. this is done to find themes across collections and utilize the fact that each collection may have information on a similar topic to the other collections as opposed to a completely different one. the data used in the paper and the model implemented in this repository were laptop reviews and war news. in particular, the laptop reviews analyzed the apple ibook mac notebook, the dell inspiron 8200, and the ibm thinkpad t20 2647. the war news covered the iraq war and the afghanistan war. to verify the validity of this model, a simple baseline mixture model was also implemented that takes the data of all of the laptops or all of the wars and tries to cluster documents without utiliing the differences in different collections. this cross-collection mixture model works notably better than the baseline. obtaining and organizing the data in order to keep the study as close as possible to the paper, the reviews available in this repository were collected based on the description of the paper. the war news was collected from articles from bbc and cnn for one year starting from november 2001. on the other hand, the laptop reviews were pulled from epinions.com. however, epinions.com is no longer available at the time this project was completed. in order to maintain as accurate of a reproduction of this model as possible, a internet archiving website was used to see what was available on epinions.com in 2001. the data is organized inside of the ""data"" folder of this repository. each text file in the data folder represent data collected for each individual laptop and war. inside the data folder, there is another folder called ""combined"". this folder contains two files: laptops.txt and wars.txt. laptops.txt contain all of the laptop reviews in one file and wars.txt contain all of the war articles in one file. this was done so that the baseline model could access all of the needed reviews or articles as necessary. running the software this software uses python3 and uses numpy and pandas. to run the baseline mixture model, ensure that numpy, pandas, and python are properly installed (pip install numpy/pip install pandas) and run the following code in the terminal: python main.py this will run the baseline model on data/combined/laptops.txt by default. if another data set should be analyzed, provide the file location as a parameter. for example, if analysis wants to be run on war models, run the following: python main.py 200 ./data/combined/wars.txt the format being: python main.py [iterations] [dataset] to run the cross-collection mixture model, run the following code in the terminal: python cross_collection_model.py the above will run the cross collection model on the default dataset of the laptop reviews with the collections being mac.txt, inspiron.txt, and thinkpad.txt. if you want to run it with another set of data, you will want to run the following command: python cross_collection_model.py 10 ./data/combined/laptops.txt ./data/inspiron.txt ./data/mac.txt ./data/thinkpad.txt the format being: python cross_collection_model.py [iterations] [full dataset] [collections files separated by spaces] note that running either model may take a long amount of time because of how much data the model is processing. we noticed that you could see pretty realistic word-probability assignments in as little as 5 iterations of testing. code information baseline model the code from the baseline model is primarily based on the plsa algorithm as used in mp3 of cs 410. this model was estimated using the em (estimation-maximization) algorithm. here is a quick overview of the functions provided: normalize(input_matrix) normalizes the rows of a 2d input_matrix so they sum to 1. class naivemodel(object) class that actually runs the baseline mixture model. includes the following methods: build_corpus(self) fills in self.documents with a list of list of words by reading from the document path build_vocabulary(self) constructs a list of unique works in the whole corpus and updates self.vocabulary build_term_doc_matrix(self) constructs a term document matrix where each row represents a document, and each column represents a vocabulary term. initialize_randomly(self, number_of_topics) randomly sets the normalized matrices self.document_topic_prob, self.topic_word_prob, and self.background_prob. initialize_uniformly(self, number_of_topics) uniformly sets the normalized matrices self.document_topic_prob, self.topic_word_prob, and self.background_prob. initialize(self, number_of_topics, random=false) sets up the matrices of the model using initalize_randomly or initialize_uniformly. expectation_step(self) runs the expectation_step as part of the em algorithm. maximization_step(self, number_of_topics) runs the maximization_step as part of the em algorithm. calculate_likelihood(self, number_of_topics) calculates the log-likelihood of the model using the model's updated probability matrices. used to determine when the em algorithm is complete/converged. naivemodel(self, number_of_topics, max_iter, epsilon) runs the model in its entirety on self.document_path and the provided parameters. show_top_10(matrix, model) displays the top 10 probabilities of a topic-word-probability matrix given a model's vocabulary main(documents_path) this is the default function used when running from the terminal. runs the model with default parameters. cross collection mixture model the code from the cross collection model is also primarily based on the plsa algorithm as used in mp3 of cs 410 with modifications according to the paper's given formulae. this model was estimated using the em (estimation-maximization) algorithm. here is a quick overview of the functions provided (functions shared with baseline are omitted): class ccmodel(object) class that actually runs the cross collection mixture model. includes the following methods: build_corpus(self) fills in self.documents with a list of list of words by reading from the document path build_vocabulary(self) constructs a list of unique works in the whole corpus and updates self.vocabulary build_term_doc_matrix(self) constructs a term document matrix where each row represents a document, and each column represents a vocabulary term. initialize_randomly(self, number_of_topics) randomly sets the normalized matrices self.document_topic_prob, self.topic_word_prob, and self.background_prob. initialize_uniformly(self, number_of_topics) uniformly sets the normalized matrices self.document_topic_prob, self.topic_word_prob, and self.background_prob. initialize(self, number_of_topics, random=false) sets up the matrices of the model using initalize_randomly or initialize_uniformly. expectation_step(self) runs the expectation_step as part of the em algorithm. maximization_step(self, number_of_topics) runs the maximization_step as part of the em algorithm. calculate_likelihood(self, number_of_topics) calculates the log-likelihood of the model using the model's updated probability matrices. used to determine when the em algorithm is complete/converged. naivemodel(self, number_of_topics, max_iter, epsilon) runs the model in its entirety on self.document_path and the provided parameters. show_top_10(matrix, model) displays the top 10 probabilities of a topic-word-probability matrix given a model's vocabulary main(documents_path) this is the default function used when running from the terminal. runs the model with default parameters. a cross-collection mixture model for comparative text mining chengxiang zhai department of computer science university of illinois at urbana champaign atulya velivelli department of electrical and computer engineering university of illinois at urbana champaign bei yu graduate school of library and information science university of illinois at urbana champaign abstract in this paper, we define and study a novel text mining problem, which we refer to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent com- mon themes across all collections as well as summarize the similarity and differences of these collections along each com- mon theme. this general problem subsumes many interest- ing applications, including business intelligence and opinion summarization. we propose a generative probabilistic mix- ture model for comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the model can be estimated efficiently using the expectation-maximization (em) algo- rithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. categories and subject descriptors: h.3.3 [informa- tion search and retrieval]: text mining general terms: algorithms keywords: comparative text mining, mixture models, clus- tering 1. introduction text mining is concerned with extracting knowledge and patterns from text [5, 6]. while there has been much re- search in text mining, most existing research is focused on one single collection of text. the goals are often to extract basic semantic units such as named entities, to extract rela- tions between information units, or to extract topic themes. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. kdd'04, august 22-25, 2004, seattle, washington, usa. copyright 2004 acm 1-58113-888-1/04/0008 ...$5.00. in this paper, we study a novel problem of text mining re- ferred to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent common themes across all collections as well as summarize the similarity and differ- ences of these collections along each common theme. specif- ically, the task involves: (1) discovering the different com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. the need for comparative text mining exists in many different applica- tions, including business intelligence, summarizing reviews of similar products, and comparing different opinions about a common topic in general. in this paper, we study the ctm problem and propose a generative probabilistic mixture model for ctm. the model simultaneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the mixture model is based on component multinomial distribution models, each characterizing a different theme. the common themes and collection-specific themes are explicitly modeled. the pro- posed model can be estimated efficiently using the expectation- maximization (em) algorithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. the rest of the paper is organized as follows. in section 2, we briefly introduce the problem of ctm. we then present a baseline simple mixture model and a new cross-collection mixture model in section 3 and section 4. we discuss the experiment results in section 5. 2. comparative text mining 2.1 a motivating example with the popularity of e-commerce, online customer eval- uations are becoming widely provided by online stores and third-party websites. pioneers like amazon.com and epin- ions.com have accumulated large amounts of customer input including reviews, comments, recommendations and advice, etc. for example, the number of reviews in epinions.com is more than one million[4]. given a product, there could be up to hundreds of reviews, which is impossible for the readers to go through. it is thus desirable to summarize a collection of reviews for a certain type of products in order to provide the readers the most salient feedbacks from the peers. for review summarization, the most important task is to identify different semantic aspects of a product that the reviewers mentioned and to group the opinions accord- ing to these aspects to show similarities and differences in the opinions. for example, suppose we have reviews of three different brands of laptops (dell, ibm, and apple), and we want to summarize the reviews. a useful summary would be a tab- ular representation of the opinions as shown in table 1, in which each row represents one aspect (subtopic) and differ- ent columns correspond to different opinions. table 1: a tabular summary subtopics dell ibm apple battery life long enough short short memory good bad good speed slow fast fast it is, of course, very difficult, if not impossible to pro- duce such a table completely automatically. however, we can achieve a less ambitious goal - identifying the semantic aspects and identifying the common and specific character- istics of each product in an unsupervised way. this is a concrete example of comparative text mining. 2.2 the general problem the example above is only one of the many possible appli- cations of comparative text mining. in general, the task of comparative text mining involves: (1) discovering the com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. it is very hard to precisely define what a theme is, but it corresponds roughly to a topic or subtopic. the granularity of themes is application-specific. ctm is a fundamental task in ex- ploratory text analysis. in addition to opinion comparison and summarization, it has many other applications, such as business intelligence (comparing different companies), cus- tomer relationship management (comparing different groups of customers), and semantic integration of text (comparing component text collections). ctm is challenging in several ways: (1) it is a completely unsupervised learning task; no training data is available. (it is for the same reason that ctm can be very useful for many different purposes - it makes minimum assumptions about the collections and in principle we can compare any arbitrary partition of text.) (2) we need to identify themes across different collections, which is more challenging than identifying topic themes in one single collection. (3) the task involves a discrimination component - for each discov- ered theme, we also want to identify the unique information specific to each collection. such a discrimination task is dif- ficult given that we do not have training data. in a way, ctm goes beyond the regular one-collection text mining by requiring an ""alignment"" of multiple collections based on common themes. since no training data is available, in general, we must rely on unsupervised learning methods, such as clustering, to perform ctm. in this paper, we study how to use prob- abilistic mixture models to perform ctm. below we first describe a simple mixture model for clustering, which repre- sents a straightforward application of an existing text min- ing method, and then present a more sophisticated mixture model specifically designed for ctm. 3. clustering with a simple mixture model   th  th  th "" $ % th ' th figure 1: the simple mixture model a naive solution to ctm is to treat the multiple collec- tions as one single collection and perform clustering. our hope is that some clusters would represent the common themes across the collections, while some others would rep- resent themes specific to one collection (see figure 1). we now present a simple multinomial mixture model for clus- tering an arbitrary collection of documents, in which we assume there are k latent common themes in all collections, and each is characterized by a multinomial word distribu- tion (also called a unigram language model). a document is regarded as a sample of a mixture model with these theme models as components. we fit such a mixture model to the union of all the text collections we have, and the obtained component multinomial models can be used to analyze the common themes and differences among the collections. formally, let c = {c1, c2, ..., cm} be m comparable col- lections of documents. let th1, ..., thk be k theme unigram language models and thb be the background model for all the collections. a document d is regarded as a sample of the following mixture model (based on word generation). pd(w) = lbp(w|thb) + (1 - lb) k j=1 [pd,jp(w|thj)] where w is a word, pd,j is a document-specific mixing weight for the j-th aspect theme, and k j=1 pd,j = 1. lb is the mix- ing weight of the background model thb. the log-likelihood of all the collections c is log p(c|l) = m i=1 dci wv [c(w, d) x log(lbp(w|thb) + (1 - lb) k j=1 (pd,jp(w|thj)))] where v is the set of all the words (i.e., vocabulary), c(w, d) is the count of word w in document d, and l = ({thj, pd,j}k j=1 is the set of all the theme model parameters. the purpose of using a background model is to ""force"" clustering to be done based on more discriminative words, leading to more informative and more discriminative component models. we control this effect through thb. the model can be estimated using any estimator. for example, the expectation-maximization (em) algorithm [3] can be used to compute a maximum likelihood estimate with the following updating formulas: p(zd,w = j) = p(n) d,j p(n)(w|thj) k j'=1 p(n) d,j'p(n)(w|thj') p(zd,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j p(n)(w|thj) p(n+1) d,j = wv c(w, d)p(zd,w = j) j' wv c(w, d)p(zd,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,w = b))p(zd,w = j) w'v m i=1 dci c(w', d)(1 - p(zd,w' = b))p(zd,w' = j) this mixture model is closely related to the probabilis- tic latent semantic indexing model (plsi) proposed in [7] and treats ctm as a single-collection text mining problem. however, such a simple model is inadequate for ctm for two reasons: (1) we have completely ignored the structure of collections. as a result, we may have clusters that repre- sent only some, not all of the collections. (2) there is no easy way to identify which theme cluster represents the common information across collections and which represents specific information to a particular collection. below we present a more sophisticated coordinated mixture model, which is specifically designed for ctm and addresses these two defi- ciencies. 4. clustering with a cross- collection mixture model  th th    th     th    th    th    th    th    th figure 2: the cross-collection mixture model 4.1 the model our main idea for improving the simple mixture model for comparative text mining is to explicitly distinguish com- mon theme clusters that characterize common information across all collections from special theme clusters that char- acterize collection-specific information. thus we now con- sider k latent common themes as well as a potentially dif- ferent set of k collection-specific themes for each collection (illustrated in figure 2). these component models directly correspond to all the information we are interested in discov- ering. the sampling distribution of a word in document d (from collection ci) is now collection-specific. specifically, it involves the background model (thb), k common theme models (th1, ..., thk), and k collection-specific theme models (th1,i, ..., thk,i), which are to capture the unique information about the k themes in collection ci. that is, pd(w|ci) = (1 - lb) k j=1 [pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))] +lbp(w|thb) where lb is the weight on the background model thb and lc is the weight on the common theme model thj (as opposed to the collection-specific theme model thj,i). intuitively, when we ""generate"" a word, we first decide whether to use the background model thb according to lb; the larger lb is, the more likely we will use thb. if we decide not to use thb, then we need to decide which theme to use; this is controlled by pd,j, the probability of using theme j when generating words in d. finally, once we decide which theme to use, we still need to decide whether we should use the common theme model or the collection-specific theme model, and this is con- trolled by lc, the probability of using the common model. the weighting parameters lb and lc are intentionally to be set by the user, and their interpretation is as follows. lb reflects our knowledge about how noisy the collections are. if we believe the text is verbose, then lb should be set to a larger value. in our experiments, a value of 0.9 - 0.95 often works well. lc indicates our emphasis on the commonality, as opposed to the speciality in comparative text mining. a larger lc would allow us to learn a richer common theme model, whereas a smaller one would learn a weaker com- mon theme model, but stronger special models. the optimal value depends on the specific applications. according to this generative model, the log-likelihood of the whole set of collections is log p(c) = m i=1 dci wv [c(w, d) log[lbp(w|thb) +(1 - lb) k j=1 pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))]] 4.2 parameter estimation we estimate the background model thb using all the avail- able text in the m text collections. that is, ^p(w|thb) = m i=1 dci c(w, d) m i=1 dci w'v c(w', d) since lb and lc are set manually, this leaves us with the following parameters to estimate: (1) the common theme models, th = {th1, ..., thk}; (2) the special theme models for each collection ci, thci = {th1,i, ..., thk,i}; and (3) the theme mixing weights for each document d: pd = {pd,1, ..., pd,k}. p(zd,ci,w = j) = p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) k j'=1 p(n) d,j'(lcp(n)(w|thj') + (1 - lc)p(n)(w|thj',i)) p(zd,ci,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) p(zd,ci,j,w = c) = lcp(n)(w|thj) lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i) p(n+1) d,j = wv c(w, d)p(zd,ci,w = j) j' wv c(w, d)p(zd,ci,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)p(zd,ci,j,w = c) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)p(zd,ci,j,w' = c) p(n+1)(w|thj,i) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)(1 - p(zd,ci,j,w = c)) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)(1 - p(zd,ci,j,w' = c)) figure 3: em updating formulas for the cross-collection mixture model as in the simple mixture model, we can also use the em algorithm to compute a maximum likelihood estimate. the updating formulas are shown in figure 3. each em iteration involves scanning all the text once, so the algorithm is quite scalable. 4.3 using the model once the model is estimated, we will have k collection- specific models for each of the m collections and k common theme models across all collections. each of these mod- els is a word distribution or unigram language model. the high probability words can characterize the theme/cluster extracted. such words can often be used directly as a sum- mary or indirectly (e.g., through a hidden markov model) to extract relevant sentences to form a summary of the cor- responding theme. the extracted word distributions can also be used in many other ways, e.g., to classify other text documents or to link the related passages in the text collec- tions so that a user can navigate the information space for comparative analysis. we can input our bias for ctm through setting lb and lc manually. specifically, lb allows us to input our knowledge about the noise (stop words) in the data - if we know the text data is verbose, then we should set lb to a high value, whereas if the data is concise and mostly content-bearing keywords, then we need to set lb to a smaller value. sim- ilarly, lc allows us to input a trade-off between extracting common theme models (setting lc to a higher value) vs. ex- tracting collection-specific models (setting lc to a smaller value). such biases cannot be learned by the maximum like- lihood estimator. indeed, maximizing the data likelihood is only a means to achieve our ultimate goal, which is why we want to regularize our model in a meaningful way so that we can impose certain preferences while maximizing the data likelihood. the flexibility and control provided by lb and lc make it possible for a user to control the focus of the results of comparative text mining. 5. experiments and result analysis we evaluated the simple mixture model (simpmix) and the cross-collection mixture model (ccmix) on two do- mains - war news and laptop reviews. 5.1 war news the war news data consists of news excerpts on two com- parable events: (1) iraq war and (2) afghanistan war, both of which occurred in the last two years. the iraq war news excerpts were a combination of 30 articles from the cnn and bbc web sites over the last one year span. the afghanistan war data consists of 26 news articles downloaded from the cnn and bbc web sites for one year starting from nov. 2001. our goal is to compare these two wars and find out their common and specific characteristics. the results of using either the simple mixture model or the cross-collection mixture model are shown in table 2, where the top words of each theme model are listed along with their probabilities. we set lb = 0.95 for simpmix and set lb = 0.9, lc = 0.25 for ccmix; in both cases, the number of clusters is fixed to 5. variations of these parameters are discussed later. we see that although there are some interesting themes in the results of simpmix (e.g., cluster3 and cluster4 appear to be about american and british inquiry into the pres- ence of weapons in iraq, respectively, while cluster2 suggests the presence of british soldier in basra, a town in southern iraq), they are all about iraq war. we do not see any obvi- ous theme common to both iraq war and afghanistan war. this is expected given that simpmix pools all documents together without exploiting the collection structure. in contrast, the results of ccmix explicitly suggest the common themes and the corresponding collection-specific themes. for example, cluster3 clearly suggests that in both wars, there has been loss of lives. furthermore, the top words in the corresponding iraq theme include names of some key defense people that are involved in the iraq war (e.g., ""hoon"" is the last name of the british defense secre- tary and ""sanchez"" is the last name of the u.s general in iraq). in comparison, the top words in the corresponding afghanistan theme includes the name of the u.s defense secretary who had an important role in the afghan war. cluster4 and cluster5 are also meaningful themes. the common theme captured in cluster4 is the monday briefings by an official spokesman of a political administration during both wars; the corresponding special themes indicate the dif- ference in the topics discussed in the briefings (e.g., weapon inquiry for iraq war and bin laden for afghanistan war). the common theme of cluster5 is about the diplomatic role table 2: war news results using simpmix model (top) vs. ccmix model (bottom) cluster1 cluster2 cluster3 cluster4 cluster5 common will 0.019 british 0.017 weapons 0.022 inquiry 0.052 countries 0.026 theme let 0.012 soldiers 0.015 kay 0.021 intelligence 0.036 contracts 0.023 words united 0.012 baghdad 0.015 rumsfeld 0.017 dossier 0.024 allawi 0.012 god 0.011 air 0.011 commission 0.014 hutton 0.021 hoon 0.012 inspectors 0.011 basra 0.011 group 0.014 claim 0.019 russian 0.010 your 0.010 mosque 0.010 senate 0.011 wmd 0.019 international 0.010 nation 0.010 southern 0.01 survey 0.010 mps 0.018 russia 0.009 n 0.010 fired 0.010 paper 0.010 committee 0.017 reconstruction 0.009 cluster1 cluster2 cluster3 cluster4 cluster5 common us 0.042 mr 0.029 killed 0.036 monday 0.036 united 0.042 theme nation 0.030 marines 0.025 month 0.032 official 0.032 nations 0.04 words will 0.024 dead 0.023 deaths 0.023 i 0.029 with 0.03 action 0.022 general 0.022 one 0.023 would 0.028 is 0.025 re 0.022 defense 0.019 died 0.022 where 0.025 it 0.024 border 0.019 key 0.018 been 0.022 do 0.025 they 0.023 its 0.017 since 0.018 drive 0.018 spokesman 0.022 diplomatic 0.023 ve 0.016 first 0.016 according 0.015 political 0.021 blair 0.022 iraq god 0.022 iraq 0.022 troops 0.016 intelligence 0.049 n 0.03 theme saddam 0.016 us 0.021 hoon 0.015 weapons 0.034 weapons 0.024 words baghdad 0.013 baghdad 0.017 sanchez 0.012 inquiry 0.028 inspectors 0.023 your 0.012 nato 0.015 billion 0.01 commission 0.017 council 0.016 live 0.01 iraqi 0.013 spokeswoman 0.008 independent 0.016 declaration 0.015 afghan paper 0.021 story 0.028 taleban 0.026 bin 0.031 northern 0.040 theme afghan 0.019 full 0.026 rumsfeld 0.020 laden 0.031 alliance 0.040 words meeting 0.014 saturday 0.016 hotel 0.012 steinberg 0.027 kabul 0.030 euro 0.012 e 0.015 front 0.011 taliban 0.023 taleban 0.025 highway 0.012 rabbani 0.012 dropped 0.010 chat 0.019 aid 0.020 played by the united nations (un). the corresponding spe- cial themes again suggest the difference between the two wars. the iraq theme indicates the role of un in sending weapon inspectors to iraq; the afghanistan theme refers to northern alliance that received aid from the un and came to power in afghanistan after the defeat of taliban. 5.2 laptop customer reviews this data set was constructed to test our models for com- paring opinions of customers on different laptops. we man- ually downloaded the following 3 review sets from epin- ions.com [4], filtering out the misplaced ones: apple ibook (m8598ll/a) mac notebook (34 reviews), dell inspiron 8200 (8tworh) pc notebook (22 reviews), ibm thinkpad t20 2647 (264744u) pc notebook (42 reviews). the results on this data set are generally similar to those on war news. due to the limit of space, we only show the ccmix results in table 3, which are obtained by setting lc=.7 and lb=.96 and fixing the number of clusters to 8. here we again see many very interesting common themes; in- deed, the top two words in the common themes can provide a very good summary of the themes (e.g., ""sound and speak- ers"" for cluster1, ""battery hours"" for cluster5, and ""mi- crosoft office"" for cluster8). however, the special themes, although suggesting some differences among the three lap- tops, are much harder to interpret. this may be because there is a great deal of variation in product-specific opin- ions in the data, which makes the data extremely sparse for learning a coherent collection-specific theme for each of the eight themes. 5.3 parameter tuning when we vary lb and lc in ccmix, the results are gen- erally different. specifically, when lb is set to a small value, non-informative stop words tend to show up in common themes. a reasonable value for lb is generally higher than 0.9 - in that case, the model automatically eliminates the non-informative words from the theme clusters, allowing for more discriminative clustering. indeed, in all our experi- ments, we have intentionally retained all the stop words, and the model is clearly able to filter out non-informative words, though in some cases, they still show up as top words in the common themes of the news data. they can be ""eliminated"" by using an even higher lb, but then we may end up having insufficient information to learn a common theme reliably. lc affects the vocabulary allocation between the common and collection-specific themes. in the news data experiments, when we change lc to a value above 0.4, the collection-specific terms would dominate the common theme models. in the laptop data experiments, when lc is less than 0.7, we lose many content keywords of the com- mon themes to the corresponding collection-specific themes. both lb and lc are intentionally left for a user to tune so that we can incorporate application-specific bias into the model. 6. related work the most related work to our work is the coupled clus- tering method presented in [8], which appears to be one of the very few studies considering the clustering problem in multiple collections. they extend the information bottle- neck approach to discover common clusters across different collections. comparative text mining goes beyond this by analyzing both the similarities and collection-specific differ- ences. we also use a completely different approach based on probabilistic mixture models. another related work is [10], where cross-training is used for learning classifiers from mul- tiple document sets. our work differs from it in that we per- form unsupervised learning. the aspect models studied in [7, 2] are also related to our work but they are closer to our baseline model and are not designed for comparing multiple collections. there are many studies in document clustering [1]. again, the difference lies in that they consider only one collection and thus are similar to the baseline model. our work is also related to document summarization, es- pecially multiple document summarization (e.g.,[9, 12]). in- deed, we can the results of ctm as a special form of sum- mary of multiple text collections. however, an important difference is that while a summary intends to retain the ex- plicit information in text (to maintain fidelity), ctm aims at extracting non-obvious implicit patterns. 7. conclusions and future work in this paper, we define and study a novel text mining problem referred to as comparative text mining. it is con- table 3: laptop review results using ccmix model cluster1 cluster2 cluster3 cluster4 cluster5 cluster6 cluster7 cluster8 c sound 0.035 port 0.023 ram 0.105 m 0.027 battery 0.129 t 0.039 cd 0.095 office 0.037 o speakers 0.035 jack 0.021 mb 0.037 trackpad 0.018 hours 0.080 modem 0.017 drive 0.076 microsoft 0.021 m playback 0.034 ports 0.018 memory 0.034 chip 0.013 life 0.060 internet 0.017 rw 0.055 little 0.018 m feel 0.019 will 0.018 256mb 0.027 improved 0.012 5 0.038 later 0.014 dvd 0.049 basic 0.015 o pros 0.017 your 0.017 128mb 0.021 volume 0.012 end 0.016 configuration 0.014 combo 0.025 6 0.014 n cons 0.017 warm 0.013 tech 0.020 did 0.011 3 0.016 free 0.013 drives 0.023 under 0.013 market 0.017 keep 0.012 128 0.020 latch 0.011 high 0.015 vga 0.012 rom 0.020 mhz 0.012 size 0.014 down 0.012 support 0.018 make 0.010 processor 0.014 were 0.012 floppy 0.017 word 0.011 d rests 0.026 banias 0.019 options 0.039 inspiron 0.061 dells 0.032 fans 0.019 apoint 0.017 0 0.046 e palm 0.022 svga 0.014 sodimm 0.025 pentium 0.052 ran 0.017 shipping 0.017 blah 0.015 angle 0.018 l 9000 0.020 record 0.014 eraser 0.021 8200 0.03 prong 0.015 2nd 0.016 hook 0.011 portion 0.0154 l smart 0.018 supposedly 0.013 crucial 0.018 toshiba 0.027 requiring 0.014 tracking 0.015 tug 0.011 usb 0.0153 reader 0.018 rebate 0.013 sdram 0.018 440 0.026 second 0.011 spoke 0.015 2499 0.011 specials 0.014 a magazine 0.011 osx 0.040 macos 0.019 macos0.016 g4 0.016 iphoto 0.031 airport 0.075 appleworks 0.060 p ipod 0.010 quartz 0.015 personal 0.018 netscape 0.013 interlaced 0.016 itunes 0.027 burn 0.035 word 0.021 p strong 0.01 instance 0.014 shield 0.016 apache 0.009 mac 0.016 import 0.021 4x 0.018 result 0.016 l icon 0.009 underneath 0.012 airport 0.016 ie5 0.008 imac 0.014 book 0.018 reads 0.014 spreadsheet 0.013 e choppy 0.008 cooling 0.012 installation 0.015 ll 0.008 powermac 0.012 quicktime 0.016 schools 0.013 excel 0.012 i technology 0.023 rj 0.033 exchange 0.023 company 0.021 thinkpad 0.077 thinkpads 0.020 t20 0.04 list 0.015 b outdated 0.020 chik 0.018 hassle 0.016 570 0.017 ibm 0.047 connector 0.018 ultrabay 0.030 factor 0.013 m surprisingly 0.018 dsl 0.017 disc 0.015 turn 0.017 covers 0.029 connectors 0.018 tells 0.021 months 0.013 trackpoint 0.014 45 0.015 t23 0.012 buttons 0.015 lightest 0.028 bluetoot 0.018 device 0.021 cap 0.013 recommend 0.013 pacbell 0.012 cdrw 0.015 numlock 0.012 3000 0.027 sturdy 0.011 number 0.020 helpdesk 0.0128 cerned with discovering any latent common themes across a set of comparable collections of text as well as summariz- ing the similarities and differences of these collections along each theme. we propose a generative cross-collection mixture model for performing comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. we define the model and present the em algorithm that can estimate the model ef- ficiently. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method based on a simple mixture model. experiment results show that the cross-collection mixture model is quite effective in dis- covering the latent common themes across collections and performs significantly better than the baseline simple mix- ture model. the proposed model has many obvious applica- tions in opinion summarization and business intelligence. it also has many other less obvious applications in the general area of text mining and semantic integration of text. for example, our model can be used to compare the course web pages from the major computer science department web sites to discover core computer science topics. it can also be used to compare literature collections in different communities to support concept switching [11]. the work reported in this paper is just an initial step toward a promising new direction. there are many interest- ing future research directions. first, it may be interesting to explore how we can further improve the ccmix model and its estimation. one interesting direction is to explore the maximum a posterior (map) estimator, which would allow us to incorporate more prior knowledge in a princi- pled way. for example, a user may already have certain thematic aspects in mind. with map estimation, we can easily add that bias to the component models. second, we can generalize our model to model semi-structured data to perform more general comparative data mining. one way to achieve this goal is to introduce additional random variables in each component model so that we can model any struc- tured data. finally, it would be very interesting to explore how we could exploit the learned theme models to provide additional help to a user who wants to perform comparative analysis. for example, the learned common theme models can be used to construct a hidden markov model (hmm) to identify the parts in the text collections about the common themes, and to connect them through automatically gener- ated hyperlinks. this would allow a user to easily navigate through the common themes. 8. references [1] d. baker and a. mccallum. distributional clustering of words for text classification. in proceedings of acm sigir 1998, 1998. [2] d. blei, a. ng, and m. jordan. latent dirichlet allocation. journal of machine learning research, 3:993-1022, 2003. [3] a. p. dempster, n. m. laird, and d. b. rubin. maximum likelihood from incomplete data via the em algorithm. journal of royal statist. soc. b, 39:1-38, 1977. [4] epinions.com, 2003. http://www.epinions.com/. [5] r. feldman and i. dagan. knowledge discovery in textual databases. in proceedings of the international conference on knowledge discovery and data mining, 1995. [6] m. a. hearst. untangling text data mining. in proceedings of acl'99, 1999. [7] t. hofmann. probabilistic latent semantic indexing. in proceedings of acm sigir'99, pages 50-57, 1999. [8] z. marx, i. dagan, j. buhmann, and e. shamir. coupled clustering: a method for detecting structural correspondence. journal of machine learning research, 3:747-780, 2002. [9] k. mckeown, j. l. klavans, v. hatzivassiloglou, r. barzilay, and e. e. towards multidocument summarization by reformulation: progress and prospects. in proceedings of aaai-99. [10] s. sarawagi, s. chakrabarti, and s. godbole. cross-training: learning probabilistic mappings between topics. in proceedings of acm sigkdd 2003. [11] b. r. schatz. the interspace: concept navigation across distributed communities. computer, 35(1):54-62, 2002. [12] h. zha. generic summarization and keyphrase extraction using mutual reinforcement principle and sentence clustering. in proceedings of acm sigir 2002."	['names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'paper', 'chosen', 'programming', 'language', 'plan', 'use', 'obtain', 'datasets', 'used', 'evaluation', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'group', 'project', 'jonathan', 'kim', 'jck', 'two', 'michael', 'xiang', 'mx', 'tyler', 'ruckstaetter', 'thr', 'crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'using', 'python', 'since', 'seems', 'like', 'exact', 'unavailable', 'us', 'however', 'obtainable', 'data', 'publicly', 'available', 'right', 'still', 'reviews', 'laptops', 'well', 'modern', 'war', 'news', 'many', 'sites', 'documents', 'may', 'directly', 'progress', 'report', 'far', 'researched', 'sources', 'mentioned', 'order', 'keep', 'possible', 'articles', 'pulled', 'websites', 'includes', 'cnn', 'bbc', 'online', 'getting', 'epinionscom', 'epinions', 'longer', 'exists', 'domain', 'archive', 'internet', 'extract', 'approximate', 'time', 'period', 'published', 'led', 'couple', 'complications', 'unclear', 'articlesreviews', 'particular', 'despite', 'mentioning', 'website', 'taken', 'archives', 'comprehensive', 'thus', 'able', 'get', 'though', 'believe', 'sufficient', 'number', 'obtained', 'run', 'meaningful', 'manner', 'additionally', 'specific', 'released', 'whether', 'extracted', 'matches', 'regardless', 'expect', 'content', 'affect', 'results', 'task', 'left', 'done', 'implement', 'involves', 'parts', 'creating', 'naive', 'described', 'likely', 'format', 'mp', 'doable', 'amount', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'demo', 'video', 'note', 'recorded', 'final', 'edits', 'actual', 'differbe', 'accurate', 'table', 'contents', 'introduction', 'brief', 'overview', 'obtaining', 'organizing', 'running', 'software', 'code', 'information', 'baseline', 'hello', 'consists', 'three', 'people', 'created', 'class', 'cs', 'systems', 'university', 'illinois', 'urbanachampaign', 'purpose', 'reproduce', 'comparatrive', 'found', 'solve', 'novel', 'problem', 'comaparative', 'trying', 'find', 'common', 'themes', 'across', 'collections', 'texts', 'summarize', 'similarities', 'differences', 'generative', 'probabilistic', 'proposed', 'performs', 'clustering', 'withincollection', 'utilize', 'fact', 'collection', 'topic', 'opposed', 'completely', 'different', 'one', 'implemented', 'laptop', 'analyzed', 'apple', 'ibook', 'mac', 'notebook', 'dell', 'inspiron', 'ibm', 'thinkpad', 'covered', 'iraq', 'afghanistan', 'verify', 'validity', 'simple', 'also', 'takes', 'wars', 'tries', 'cluster', 'without', 'utiliing', 'works', 'notably', 'better', 'study', 'close', 'collected', 'based', 'description', 'year', 'starting', 'november', 'hand', 'completed', 'maintain', 'reproduction', 'archiving', 'see', 'organized', 'inside', 'folder', 'file', 'represent', 'individual', 'called', 'combined', 'contains', 'files', 'laptopstxt', 'warstxt', 'contain', 'could', 'access', 'needed', 'necessary', 'uses', 'numpy', 'pandas', 'ensure', 'properly', 'installed', 'pip', 'install', 'numpypip', 'following', 'terminal', 'mainpy', 'datacombinedlaptopstxt', 'default', 'set', 'provide', 'location', 'parameter', 'example', 'analysis', 'wants', 'models', 'datacombinedwarstxt', 'iterations', 'cross_collection_modelpy', 'cross', 'mactxt', 'inspirontxt', 'thinkpadtxt', 'want', 'command', 'datainspirontxt', 'datamactxt', 'datathinkpadtxt', 'full', 'separated', 'spaces', 'either', 'take', 'long', 'much', 'processing', 'noticed', 'pretty', 'realistic', 'wordprobability', 'assignments', 'little', 'testing', 'primarily', 'plsa', 'algorithm', 'estimated', 'em', 'estimationmaximization', 'quick', 'functions', 'provided', 'normalizeinput_matrix', 'normalizes', 'rows', 'input_matrix', 'sum', 'naivemodelobject', 'actually', 'runs', 'methods', 'build_corpusself', 'fills', 'selfdocuments', 'list', 'words', 'reading', 'document', 'path', 'build_vocabularyself', 'constructs', 'unique', 'whole', 'corpus', 'updates', 'selfvocabulary', 'build_term_doc_matrixself', 'term', 'matrix', 'row', 'represents', 'column', 'vocabulary', 'initialize_randomlyself', 'number_of_topics', 'randomly', 'sets', 'normalized', 'matrices', 'selfdocument_topic_prob', 'selftopic_word_prob', 'selfbackground_prob', 'initialize_uniformlyself', 'uniformly', 'initializeself', 'randomfalse', 'initalize_randomly', 'initialize_uniformly', 'expectation_stepself', 'expectation_step', 'part', 'maximization_stepself', 'maximization_step', 'calculate_likelihoodself', 'calculates', 'loglikelihood', 'updated', 'probability', 'determine', 'completeconverged', 'naivemodelself', 'max_iter', 'epsilon', 'entirety', 'selfdocument_path', 'parameters', 'show_top_matrix', 'displays', 'top', 'probabilities', 'topicwordprobability', 'given', 'maindocuments_path', 'function', 'modifications', 'according', 'papers', 'formulae', 'shared', 'omitted', 'ccmodelobject', 'chengxiang', 'zhai', 'department', 'computer', 'science', 'urbana', 'champaign', 'atulya', 'velivelli', 'electrical', 'engineering', 'bei', 'yu', 'graduate', 'school', 'library', 'abstract', 'define', 'refer', 'ctm', 'comparable', 'discover', 'latent', 'com', 'mon', 'similarity', 'along', 'theme', 'general', 'subsumes', 'interest', 'ing', 'applications', 'including', 'business', 'intelligence', 'opinion', 'summarization', 'propose', 'mix', 'ture', 'simul', 'taneously', 'within', 'applied', 'arbitrary', 'efficiently', 'expectationmaximization', 'algo', 'rithm', 'evaluate', 'ie', 'article', 'review', 'compare', 'experiment', 'show', 'quite', 'effective', 'discovering', 'significantly', 'categories', 'subject', 'descriptors', 'h', 'informa', 'tion', 'search', 'retrieval', 'terms', 'algorithms', 'keywords', 'clus', 'tering', 'concerned', 'extracting', 'knowledge', 'patterns', 'existing', 'research', 'focused', 'single', 'goals', 'often', 'basic', 'semantic', 'units', 'named', 'entities', 'rela', 'tions', 'permission', 'make', 'digital', 'hard', 'copies', 'work', 'personal', 'classroom', 'granted', 'fee', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'citation', 'first', 'page', 'copy', 'otherwise', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'prior', 'andor', 'kdd', 'august', 'seattle', 'washington', 'usa', 'copyright', 'acm', 'ferred', 'differ', 'ences', 'specif', 'ically', 'discovered', 'characterize', 'among', 'col', 'lections', 'need', 'applica', 'summarizing', 'products', 'comparing', 'opinions', 'simultaneously', 'component', 'multinomial', 'distribution', 'characterizing', 'collectionspecific', 'explicitly', 'modeled', 'pro', 'posed', 'expectation', 'maximization', 'rest', 'follows', 'section', 'briefly', 'introduce', 'present', 'new', 'discuss', 'motivating', 'popularity', 'ecommerce', 'customer', 'eval', 'uations', 'becoming', 'widely', 'stores', 'thirdparty', 'pioneers', 'amazoncom', 'epin', 'ionscom', 'accumulated', 'large', 'amounts', 'input', 'comments', 'recommendations', 'advice', 'etc', 'million', 'product', 'hundreds', 'impossible', 'readers', 'go', 'desirable', 'certain', 'type', 'salient', 'feedbacks', 'peers', 'important', 'identify', 'aspects', 'reviewers', 'accord', 'suppose', 'brands', 'useful', 'summary', 'would', 'tab', 'ular', 'representation', 'shown', 'aspect', 'subtopic', 'ent', 'columns', 'correspond', 'tabular', 'subtopics', 'battery', 'life', 'enough', 'short', 'memory', 'good', 'bad', 'speed', 'slow', 'fast', 'difficult', 'duce', 'automatically', 'achieve', 'less', 'ambitious', 'goal', 'identifying', 'character', 'istics', 'unsupervised', 'way', 'concrete', 'appli', 'cations', 'precisely', 'corresponds', 'roughly', 'granularity', 'applicationspecific', 'fundamental', 'ex', 'ploratory', 'addition', 'comparison', 'companies', 'cus', 'tomer', 'relationship', 'management', 'groups', 'customers', 'integration', 'challenging', 'several', 'ways', 'learning', 'training', 'reason', 'purposes', 'makes', 'minimum', 'assumptions', 'principle', 'partition', 'discrimination', 'discov', 'ered', 'dif', 'ficult', 'goes', 'beyond', 'regular', 'onecollection', 'requiring', 'alignment', 'multiple', 'must', 'rely', 'perform', 'prob', 'abilistic', 'describe', 'repre', 'sents', 'straightforward', 'application', 'min', 'sophisticated', 'specifically', 'designed', 'th', 'figure', 'solution', 'treat', 'collec', 'hope', 'clusters', 'others', 'rep', 'resent', 'assume', 'k', 'characterized', 'word', 'distribu', 'unigram', 'regarded', 'sample', 'components', 'fit', 'union', 'analyze', 'formally', 'let', 'c', 'cm', 'thk', 'thb', 'background', 'generation', 'pdw', 'lbpwthb', 'lb', 'j', 'pdjpwthj', 'w', 'pdj', 'documentspecific', 'mixing', 'weight', 'jth', 'log', 'pcl', 'dci', 'wv', 'cw', 'x', 'loglbpwthb', 'v', 'count', 'l', 'thj', 'pdjk', 'force', 'discriminative', 'leading', 'informative', 'control', 'effect', 'estimator', 'compute', 'maximum', 'likelihood', 'estimate', 'updating', 'formulas', 'pzdw', 'pn', 'dj', 'pnwthj', 'djpnwthj', 'b', 'dpzdw', 'bpzdw', 'closely', 'related', 'probabilis', 'tic', 'indexing', 'plsi', 'treats', 'singlecollection', 'inadequate', 'reasons', 'ignored', 'structure', 'result', 'sent', 'easy', 'coordinated', 'addresses', 'defi', 'ciencies', 'main', 'idea', 'improving', 'distinguish', 'special', 'char', 'acterize', 'con', 'sider', 'potentially', 'ferent', 'illustrated', 'interested', 'ering', 'sampling', 'ci', 'thi', 'thki', 'capture', 'pdwci', 'pdjlcpwthj', 'lcpwthji', 'lc', 'thji', 'intuitively', 'generate', 'decide', 'larger', 'controlled', 'generating', 'finally', 'trolled', 'weighting', 'intentionally', 'user', 'interpretation', 'reflects', 'noisy', 'verbose', 'value', 'experiments', 'indicates', 'emphasis', 'commonality', 'speciality', 'allow', 'learn', 'richer', 'whereas', 'smaller', 'weaker', 'stronger', 'optimal', 'depends', 'pc', 'estimation', 'avail', 'pwthb', 'manually', 'leaves', 'thci', 'weights', 'pd', 'pdk', 'pzdciw', 'lcpnwthj', 'lcpnwthji', 'djlcpnwthj', 'pzdcijw', 'dpzdciw', 'bpzdciw', 'jpzdcijw', 'pnwthji', 'iteration', 'scanning', 'scalable', 'mod', 'els', 'high', 'themecluster', 'mary', 'indirectly', 'hidden', 'markov', 'relevant', 'sentences', 'form', 'cor', 'responding', 'distributions', 'classify', 'passages', 'navigate', 'space', 'bias', 'setting', 'allows', 'noise', 'stop', 'know', 'concise', 'mostly', 'contentbearing', 'sim', 'ilarly', 'tradeoff', 'higher', 'vs', 'tracting', 'biases', 'cannot', 'learned', 'lihood', 'indeed', 'maximizing', 'means', 'ultimate', 'regularize', 'impose', 'preferences', 'flexibility', 'focus', 'evaluated', 'simpmix', 'ccmix', 'mains', 'excerpts', 'parable', 'events', 'occurred', 'last', 'years', 'combination', 'web', 'span', 'downloaded', 'nov', 'characteristics', 'listed', 'cases', 'fixed', 'variations', 'discussed', 'later', 'although', 'interesting', 'appear', 'american', 'british', 'inquiry', 'pres', 'ence', 'weapons', 'respectively', 'suggests', 'presence', 'soldier', 'basra', 'town', 'southern', 'obvi', 'ous', 'expected', 'pools', 'together', 'exploiting', 'contrast', 'suggest', 'corresponding', 'clearly', 'loss', 'lives', 'furthermore', 'include', 'key', 'defense', 'involved', 'hoon', 'name', 'secre', 'tary', 'sanchez', 'secretary', 'role', 'afghan', 'captured', 'monday', 'briefings', 'official', 'spokesman', 'political', 'administration', 'indicate', 'ference', 'topics', 'weapon', 'bin', 'laden', 'diplomatic', 'bottom', 'countries', 'soldiers', 'kay', 'contracts', 'united', 'baghdad', 'rumsfeld', 'dossier', 'allawi', 'god', 'air', 'commission', 'hutton', 'inspectors', 'claim', 'russian', 'mosque', 'senate', 'wmd', 'international', 'nation', 'survey', 'mps', 'russia', 'n', 'fired', 'committee', 'reconstruction', 'mr', 'killed', 'marines', 'month', 'nations', 'dead', 'deaths', 'action', 'died', 'border', 'drive', 'blair', 'troops', 'saddam', 'nato', 'billion', 'council', 'live', 'iraqi', 'spokeswoman', 'independent', 'declaration', 'story', 'taleban', 'northern', 'alliance', 'meeting', 'saturday', 'hotel', 'steinberg', 'kabul', 'euro', 'e', 'front', 'taliban', 'highway', 'rabbani', 'dropped', 'chat', 'aid', 'played', 'un', 'spe', 'cial', 'difference', 'sending', 'refers', 'received', 'came', 'power', 'defeat', 'constructed', 'test', 'paring', 'man', 'ually', 'filtering', 'misplaced', 'ones', 'mlla', 'tworh', 'u', 'generally', 'due', 'limit', 'fixing', 'deed', 'sound', 'speak', 'ers', 'hours', 'mi', 'crosoft', 'office', 'suggesting', 'lap', 'tops', 'harder', 'interpret', 'great', 'deal', 'variation', 'productspecific', 'opin', 'ions', 'extremely', 'sparse', 'coherent', 'eight', 'tuning', 'vary', 'gen', 'erally', 'small', 'noninformative', 'tend', 'reasonable', 'case', 'eliminates', 'allowing', 'experi', 'ments', 'retained', 'filter', 'eliminated', 'even', 'end', 'insufficient', 'reliably', 'affects', 'allocation', 'change', 'dominate', 'lose', 'tune', 'incorporate', 'coupled', 'presented', 'appears', 'studies', 'considering', 'extend', 'bottle', 'neck', 'approach', 'analyzing', 'crosstraining', 'classifiers', 'mul', 'tiple', 'differs', 'per', 'studied', 'closer', 'lies', 'consider', 'es', 'pecially', 'intends', 'retain', 'plicit', 'fidelity', 'aims', 'nonobvious', 'implicit', 'conclusions', 'future', 'referred', 'port', 'ram', 'cd', 'speakers', 'jack', 'mb', 'trackpad', 'modem', 'playback', 'ports', 'chip', 'rw', 'feel', 'improved', 'dvd', 'pros', 'volume', 'configuration', 'combo', 'cons', 'warm', 'tech', 'free', 'drives', 'market', 'latch', 'vga', 'rom', 'mhz', 'size', 'support', 'processor', 'floppy', 'rests', 'banias', 'options', 'dells', 'fans', 'apoint', 'palm', 'svga', 'sodimm', 'pentium', 'ran', 'shipping', 'blah', 'angle', 'record', 'eraser', 'prong', 'nd', 'hook', 'portion', 'smart', 'supposedly', 'crucial', 'toshiba', 'tracking', 'tug', 'usb', 'reader', 'rebate', 'sdram', 'second', 'spoke', 'specials', 'magazine', 'osx', 'macos', 'g', 'iphoto', 'airport', 'appleworks', 'p', 'ipod', 'quartz', 'netscape', 'interlaced', 'itunes', 'burn', 'strong', 'instance', 'shield', 'apache', 'import', 'icon', 'underneath', 'imac', 'book', 'reads', 'spreadsheet', 'choppy', 'cooling', 'installation', 'powermac', 'quicktime', 'schools', 'excel', 'technology', 'rj', 'exchange', 'company', 'thinkpads', 'outdated', 'chik', 'hassle', 'connector', 'ultrabay', 'factor', 'surprisingly', 'dsl', 'disc', 'turn', 'covers', 'connectors', 'tells', 'months', 'trackpoint', 'buttons', 'lightest', 'bluetoot', 'device', 'cap', 'recommend', 'pacbell', 'cdrw', 'numlock', 'sturdy', 'helpdesk', 'cerned', 'summariz', 'performing', 'ef', 'ficiently', 'dis', 'covering', 'obvious', 'area', 'pages', 'major', 'core', 'literature', 'communities', 'concept', 'switching', 'reported', 'initial', 'step', 'toward', 'promising', 'direction', 'directions', 'explore', 'improve', 'posterior', 'map', 'princi', 'pled', 'already', 'thematic', 'mind', 'easily', 'add', 'generalize', 'semistructured', 'additional', 'random', 'variables', 'struc', 'tured', 'exploit', 'help', 'construct', 'hmm', 'connect', 'gener', 'ated', 'hyperlinks', 'references', 'baker', 'mccallum', 'distributional', 'classification', 'proceedings', 'sigir', 'blei', 'ng', 'jordan', 'dirichlet', 'journal', 'machine', 'dempster', 'laird', 'rubin', 'incomplete', 'via', 'royal', 'statist', 'soc', 'httpwwwepinionscom', 'r', 'feldman', 'dagan', 'discovery', 'textual', 'databases', 'conference', 'hearst', 'untangling', 'acl', 'hofmann', 'z', 'marx', 'buhmann', 'shamir', 'detecting', 'structural', 'correspondence', 'mckeown', 'klavans', 'hatzivassiloglou', 'barzilay', 'towards', 'multidocument', 'reformulation', 'prospects', 'aaai', 'sarawagi', 'chakrabarti', 'godbole', 'mappings', 'sigkdd', 'schatz', 'interspace', 'navigation', 'zha', 'generic', 'keyphrase', 'extraction', 'mutual', 'reinforcement', 'sentence']
https://github.com/chask8ng/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/chengbo322/CourseProject	individual project - free topic sentiment analysis in management discussion and analysis (md&a) from company's sec filing chengbo jiang chengbo6@illinois.edu 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. net id: chengbo6, this will be an individual project so chengbo jiang will be served as the captain and other roles. 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work?  free topic: sentiment analysis in management discussion and analysis (md&a) from company's sec filing.  the task is to extract the management and analysis (md&a) sections of text from public companies' 10k (annual) and 10q (quarterly) filings from u.s. securities and exchange commission (sec) database.  after extracting the texts, i will try to classify the sentiment whether they are positive or negative using the methods and algorithms learned from cs410.  positive and negative can be determined via counting positive or negative words from dictionary.  other than accounting information on those filings, text information could be valuable but overwhelming. classifying these texts information in positivity or negativity will streamline the analytical procedures of public companies as well analysts' understanding. for example, if we can filter the negatives so that we can concentrate more on analyzing the positive ones.  the planned approach: 1. write a web crawler to download the reports from sec's website. 2. extract the md&a information sections from the downloaded reports. 3. sentiment analysis using methods such as naive bayes, multinomial naive bayes etc.  tools: python (metapy, nltk, numpy, beautifulsoup etc.)  datasets: the edgar (electronic data gathering, analysis, and retrieval) database from sec.  expected outcome: expect to accurately classify the textual data in their respective categories.  evaluation: since i will use different methods, i will compare the results from different methods. 3. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. 1. write a web crawler to download the reports from sec's website. 40 hours 2. extract the md&a information sections from the downloaded reports. 10 hours 3. sentiment analysis using methods such as naive bayes, multinomial naive bayes etc. 40 hours courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['individual', 'project', 'free', 'topic', 'sentiment', 'analysis', 'management', 'discussion', 'mda', 'companys', 'sec', 'filing', 'chengbo', 'jiang', 'chengboillinoisedu', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'net', 'id', 'served', 'roles', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'extract', 'sections', 'text', 'public', 'companies', 'k', 'annual', 'q', 'quarterly', 'filings', 'us', 'securities', 'exchange', 'commission', 'database', 'extracting', 'texts', 'try', 'classify', 'whether', 'positive', 'negative', 'using', 'methods', 'algorithms', 'learned', 'cs', 'determined', 'via', 'counting', 'words', 'dictionary', 'accounting', 'information', 'could', 'valuable', 'overwhelming', 'classifying', 'positivity', 'negativity', 'streamline', 'analytical', 'procedures', 'well', 'analysts', 'understanding', 'example', 'filter', 'negatives', 'concentrate', 'analyzing', 'ones', 'write', 'web', 'crawler', 'download', 'reports', 'secs', 'website', 'downloaded', 'naive', 'bayes', 'multinomial', 'etc', 'python', 'metapy', 'nltk', 'numpy', 'beautifulsoup', 'edgar', 'electronic', 'data', 'gathering', 'retrieval', 'expect', 'accurately', 'textual', 'respective', 'categories', 'evaluation', 'since', 'use', 'different', 'compare', 'results', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'tasks', 'completed', 'estimated', 'time', 'cost', 'courseproject', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/chenyuzhao98/CourseProject	"cs 410: final project progress report team abracadabra chuhan (vivian yu), chenyu zhao at this point, our group have completely follow the proposed timeline included in our project proposal. we have finished the research on currently available movie recommender systems by doing a competitive analysis. we looked at movielens (https://movielens.org/) and taste (https://www.taste.io/) which we believe share similar concept with the recommendation system we intend to develop. we have completed building up the crawler for gathering information from two target websites: imdb and rotten tomatoes. another thing we did is we applied tkinter to build a sketchy interface that facilitate the use of our system. to makes the design of our system more human-centered, we have improved our algorithm so users can choose the maximum of three different emotions at the same time. in the following two weeks, we aim to finish two main tasks: first, completing the main script that contains our algorithm and calls the interface and crawlers; second, if time permits, further polish the system by prototyping as a mobile app. the challenge we are facing right now is due to the web structure of rotten tomatoes websites: more detailed information about the movie, such as grading and runtime are stored inside the movie profile links. even though we have successfully enables our program to look into the profile links and capture intended information, it takes a while for python to actually process it. our group is still working on figuring out the best way to present the movie information without taking excessive time. moviemood cs 410 final project: a mood-based movie recommendation system team introduction a collaborative work is done by vivian chuhan yu (chuhany2) and chenyu zhao (chenyu5). being a psych major, vivian applied her expertise in designing the connection between human emotions and movie genres. she is also responsible for designing the graphical user interface using tkinter, and presenting the information in treeview. chenyu is responsible for building the web scraper, designing the logistic regression algorithm, and implement the cosine similarity analysis. he is also responsible for writing the documentation and narrating the presentation. project overview this is a python-based movie recommendation system that implemented text-retrieval techniques and graphical user interface. one special thing about this system is that its recommendations were tailored around users' emotion of the moment. there are so many existing movie recommender systems available on the market, but only a small number of them were designed based on users' psychological needs. the main objective of this project is to fill this gap by making traditional recommender system more user-driven. emotion associated with genre of movie there are 10 categories of emotion the system presented to users to choose from. these are 5 postive emotions (""happy"", ""satisfied"", ""peaceful"", ""excited"", ""content"") and 5 negative emotions (""sad"", ""angry"", ""fearful"", ""depressed"", ""sorrowful""). these emotions taken as inputs from the gui interface we built through tkinter (please refer to interface.py): the correspondence of every emotion with genre of movies are set up as below: - happy - horror - sad - drama - satisfied - animation - angry - romance - peaceful - fantasy - fearful - adventure - excited - crime - depressed - comedy - content - mystery - sorrowful - action based on the inputted emotion, the system is going to be selected from the corresponding genre based on their ratings given by two websites: imdb and rotten tomatoes. the reason why we are collecting movie information from both websites is that we believe the system is able to capture a more full-scaled opinions from movie lovers. application of crawling because we intend to scrape two websites with different web structure, we developed one imdb crawler and another rt crawler to extract movie information. check out scraper.py for more details. here are two example movie pages of imdb and rotten tomatoes: as you can see, comparing to imdb, rotten tomatoes includes the majority of movie information in each movie profile link. our crawler had to look up each link to capture hidden information, such as movie length, maturity grading, cast, etc. therefore, it is unavoidable that the program takes more time to scrape rt pages. ranking and scoring we would pull user rating scores from both imdb and rotten tomatoes. due to the different rating scales used by imdb and rotten tomatoes, we would first convert both scores to a 10-point scale for the ease of comparison. we would also take the number of ratings into consideration, as larger number of ratings tends to make the overall rating more credible. therefore, we would run logistic regression function on the number of ratings, and add it as an additional weightage to the final movie score. present movie information after users indicate their moods, the program is going to look up the corresponding link to the movie page and present movie information as treeview, which is a module included by the tkinter library displaying a hierarchical collection of items. here is an example output of the list of recommended movies: note: not every movie has all information listed. if the crawler cannot find relevant information, it will automatically fill the space with ""not found"". you may also like... after users chose their favorite movie from the list, we would run a cosine similarity analysis to recommend 3 similar movies based on the summary. here is an example of movies similar to toy story 4: self-evaluation the work is equally distributed between the two teammates, and we were able to complete our mood-based movie recommender system as intended. we chose not to build a seperate mobile application, but instead spend the time working on additional features like cosine similarity and logistic regression. in the end, we have obtained the expected outcome. environment set-up please check out requirements.txt for information. you can install all packages at once using $ pip install -r requirements.txt. please use python 3. otherwise you will need to import tkinter.ttk separately because it is not a submodule of tkinter in python2 how to use? after making sure you have all packages installed, activate the program through main.py. the program will start running immediately. the scraping process may take up to 30 seconds. please do not close the tkinter window when the program is running. video presentation youtube link"	['cs', 'final', 'project', 'progress', 'report', 'team', 'abracadabra', 'chuhan', 'vivian', 'yu', 'chenyu', 'zhao', 'point', 'group', 'completely', 'follow', 'proposed', 'timeline', 'included', 'proposal', 'finished', 'research', 'currently', 'available', 'movie', 'recommender', 'systems', 'competitive', 'analysis', 'looked', 'movielens', 'httpsmovielensorg', 'taste', 'httpswwwtasteio', 'believe', 'share', 'similar', 'concept', 'recommendation', 'system', 'intend', 'develop', 'completed', 'building', 'crawler', 'gathering', 'information', 'two', 'target', 'websites', 'imdb', 'rotten', 'tomatoes', 'another', 'thing', 'applied', 'tkinter', 'build', 'sketchy', 'interface', 'facilitate', 'use', 'makes', 'design', 'humancentered', 'improved', 'algorithm', 'users', 'choose', 'maximum', 'three', 'different', 'emotions', 'time', 'following', 'weeks', 'aim', 'finish', 'main', 'tasks', 'first', 'completing', 'script', 'contains', 'calls', 'crawlers', 'second', 'permits', 'polish', 'prototyping', 'mobile', 'app', 'challenge', 'facing', 'right', 'due', 'web', 'structure', 'detailed', 'grading', 'runtime', 'stored', 'inside', 'profile', 'links', 'even', 'though', 'successfully', 'enables', 'program', 'look', 'capture', 'intended', 'takes', 'python', 'actually', 'process', 'still', 'working', 'figuring', 'best', 'way', 'present', 'without', 'taking', 'excessive', 'moviemood', 'moodbased', 'introduction', 'collaborative', 'work', 'done', 'chuhany', 'psych', 'major', 'expertise', 'designing', 'connection', 'human', 'genres', 'also', 'responsible', 'graphical', 'user', 'using', 'presenting', 'treeview', 'scraper', 'logistic', 'regression', 'implement', 'cosine', 'similarity', 'writing', 'documentation', 'narrating', 'presentation', 'overview', 'pythonbased', 'implemented', 'textretrieval', 'techniques', 'one', 'special', 'recommendations', 'tailored', 'around', 'emotion', 'moment', 'many', 'existing', 'market', 'small', 'number', 'designed', 'based', 'psychological', 'needs', 'objective', 'fill', 'gap', 'making', 'traditional', 'userdriven', 'associated', 'genre', 'categories', 'presented', 'postive', 'happy', 'satisfied', 'peaceful', 'excited', 'content', 'negative', 'sad', 'angry', 'fearful', 'depressed', 'sorrowful', 'taken', 'inputs', 'gui', 'built', 'please', 'refer', 'interfacepy', 'correspondence', 'every', 'movies', 'set', 'horror', 'drama', 'animation', 'romance', 'fantasy', 'adventure', 'crime', 'comedy', 'mystery', 'action', 'inputted', 'going', 'selected', 'corresponding', 'ratings', 'given', 'reason', 'collecting', 'able', 'fullscaled', 'opinions', 'lovers', 'application', 'crawling', 'scrape', 'developed', 'rt', 'extract', 'check', 'scraperpy', 'details', 'example', 'pages', 'see', 'comparing', 'includes', 'majority', 'link', 'hidden', 'length', 'maturity', 'cast', 'etc', 'therefore', 'unavoidable', 'ranking', 'scoring', 'would', 'pull', 'rating', 'scores', 'scales', 'used', 'convert', 'scale', 'ease', 'comparison', 'take', 'consideration', 'larger', 'tends', 'make', 'overall', 'credible', 'run', 'function', 'add', 'additional', 'weightage', 'score', 'indicate', 'moods', 'page', 'module', 'library', 'displaying', 'hierarchical', 'collection', 'items', 'output', 'list', 'recommended', 'note', 'listed', 'cannot', 'find', 'relevant', 'automatically', 'space', 'found', 'may', 'like', 'chose', 'favorite', 'recommend', 'summary', 'toy', 'story', 'selfevaluation', 'equally', 'distributed', 'teammates', 'complete', 'seperate', 'instead', 'spend', 'features', 'end', 'obtained', 'expected', 'outcome', 'environment', 'setup', 'requirementstxt', 'install', 'packages', 'pip', 'r', 'otherwise', 'need', 'import', 'tkinterttk', 'separately', 'submodule', 'sure', 'installed', 'activate', 'mainpy', 'start', 'running', 'immediately', 'scraping', 'seconds', 'close', 'window', 'video', 'youtube']
https://github.com/chiragcshetty/CourseProject	courseproject student: chirag c. shetty (cshetty2) paper: chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 [link] introduction the paper explores a further improvement like plsa in mining topics. in plsa, k topics are mined from the entire collection. however, collection may have subset and we may be interested in knowing the topics within a collection while also comparing across different collections. the paper adds one more level of generative variable (lambda_c) and tries to achieve this. data the original paper from 2004 had used a set on news articles and reviews fro epionions.com. the site is no longer active and the dataset wasn't archived anywhere. so i decided to write a scraper, starting with the codes used in the mp's. i chose cnn, which has a search feature on its webpage. so i scrap the webpage resulting from searching a topic of interest and extract the news articles. this mostly involved handcrafting the extraction process. procedure for scraping the main python file is called scrap.py edit the 'name' variable to indicate the topic. files extracted will be stored with this name no_pages: number of pages to search. each page has 10 articles run scrap.py (tested for python3.5), by setting dir_url to a topic search page on cnn webpage example: for example this webpage shows for the search 'election': https://www.cnn.com/search?q=election run python (3.5 used) scrap.py. the extracted docs will be stored in the folder 'cnn' you can run it for as many topics as you wish baseline model for baseline, the paper uses the standard plsa model. starting with plsa code from mp3, background model was added. thus complete plsa was implemented at plsa_proj.py. cross-collection mixture model the model is implemented at ccmix.py. following at the em update equations from the paper procedure: run scrap.py, by setting dir_url to a topic search page on cnn webpage. set appropritae variables as described in scrap.py set n - number of docs of each kind in the collection name_set=list of names of each collection eg: ['elon','bezos'] set number_of_topics run the code the output displays top_n words in each distribution important notes 1) in calculating c(w,d) that count of word w in doc d across all words and docs, smoothing must be applied. no c(w,d) should be exactly 0. esle it'll cause divison by zero problem. in the code, term_doc_matrix stores c(w,d) 2) in the em update steps given in the paper, observe the update for p(w/theta j,i) i.e the collection specific word distributions. since both numerator and denominator are summed over the entire collection, p(w/theta j,i) will not capture features specific to the sub-collections. they will all behave similarly. hence in implementation, the summations are only taken over the docs in collection concerned cs 440 project: cross-collection mixture model 1 cs 440 project: cross-collection mixture model student: chirag c. shetty (cshetty2 paper: chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining kdd 2004. acm, new york, ny, usa, 743748. doi10.1145/1014052.1014150 [link] github link: https://github.com/chiragcshetty/courseproject introduction the paper explores a further improvement like plsa in mining topics. in plsa, k topics are mined from the entire collection. however, collection may have subset and we may be interested in knowing the topics within a collection while also comparing across different collections. the paper adds one more level of generative variable (lambda_c) and tries to achieve this. data the original paper from 2004 had used a set on news articles and reviews fro epionions.com. the site is no longer active and the dataset wasn't archived anywhere. so i decided to write a scraper, starting with the codes used in the mp's. i chose cnn, which has a search feature on its webpage. so i scrap the webpage resulting from searching a topic of interest and extract the news articles. this mostly involved handcrafting the extraction process. procedure for scraping the main python file is called scrap.py  edit the 'name' variable to indicate the topic. files extracted will be stored with this name  no_pages: number of pages to search. each page has 10 articles  run scrap.py (tested for python3.5, by setting dir_url to a topic search page on cnn webpage example: for example this webpage shows for the search 'election': https://www.cnn.com/search?q=election cs 440 project: cross-collection mixture model 2  run python 3.5 used) scrap.py. the extracted docs will be stored in the folder 'cnn'  you can run it for as many topics as you wish baseline model for baseline, the paper uses the standard plsa model. starting with plsa code from mp3, background model was added. thus complete plsa was implemented at plsa_proj.py. cross-collection mixture model the model is implemented at ccmix.py. following at the em update equations from the paper procedure:  run scrap.py, by setting dir_url to a topic search page on cnn webpage. set appropritae variables as described in scrap.py  set n - number of docs of each kind in the collection  name_set=list of names of each collection eg: ['elon','bezos']  set number_of_topics  run the code  the output displays top_n words in each distribution important notes cs 440 project: cross-collection mixture model 3 1 in calculating c(w,d) that count of word w in doc d across all words and docs, smoothing must be applied. no c(w,d) should be exactly 0. esle it'll cause divison by zero problem. in the code, term_doc_matrix stores c(w,d) 2 in the em update steps given in the paper, observe the update for p(w/theta j,i) i.e the collection specific word distributions. since both numerator and denominator are summed over the entire collection, p(w/theta j,i) will not capture features specific to the sub-collections. they will all behave similarly. hence in implementation, the summations are only taken over the docs in collection concerned experiments and results to experiment we need related document sub-collections, each of which have a common theme. one good example of such a collection is about famous people in related fields. i chose 'elon musk' and 'bill gates'. both are billionaire businessmen, hence there will be similarities in news articles about them. however of-late they are in news for very different reasons. so each sub-collection has its own features. articles are scrapped from cnn, in order of recency and stored in folder cnn. there are 29 files for each category. plsa baseline lamba_b is kept at 0.9. increasing it too much seemed to include informative but words into background model. the word 'tesla' for instance for the chosen dataset. decreasing lamba_b too much lets stopwords leak into topic distributions. around 0.9 seemed the right compromise. number of topics is taken to be 2 plsa gives the following result: clearly the topic 0 refers to 'elon musk' with words like 'tesla', 'rocket', 'texas' musk moving to texas has been in news a lot recently). topic 1 is not as clearly associated with gates. however given gates' charity work, especially in healthcare, the topic 1 makes sense cs 440 project: cross-collection mixture model 4 ccm model lamba_b was retained at 0.9 and lambda_c was taken as 0.7. with same dataset as above this is the result of ccm with lamba_c = 0.6 lamba_c= 0.4 cs 440 project: cross-collection mixture model 5 the difference between collection 1 and collection 2 specific distribution is stark and informative. they clearly are clustering around musk's articles and gates' article. however, the topics themselves do not show much distinction. there is some flavour of topic 0 being about technology while topic 1 is about society and governance. but one can not decisively say so. it might also be possible that the articles donot have enough variety to force the em to cluster well. better data with more latent topics may reveal further benefits of the ccm model. also, knobs of lambda_c and lambda_b can be optimized further. ____________________________________________________________________________________________	['courseproject', 'student', 'chirag', 'c', 'shetty', 'cshetty', 'paper', 'chengxiang', 'zhai', 'atulya', 'velivelli', 'bei', 'yu', 'crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'data', 'kdd', 'new', 'york', 'ny', 'usa', 'doi', 'link', 'introduction', 'explores', 'improvement', 'like', 'plsa', 'topics', 'k', 'mined', 'entire', 'collection', 'however', 'may', 'subset', 'interested', 'knowing', 'within', 'also', 'comparing', 'across', 'different', 'collections', 'adds', 'one', 'level', 'generative', 'variable', 'lambda_c', 'tries', 'achieve', 'original', 'used', 'set', 'news', 'articles', 'reviews', 'fro', 'epionionscom', 'site', 'longer', 'active', 'dataset', 'wasnt', 'archived', 'anywhere', 'decided', 'write', 'scraper', 'starting', 'codes', 'mps', 'chose', 'cnn', 'search', 'feature', 'webpage', 'scrap', 'resulting', 'searching', 'topic', 'interest', 'extract', 'mostly', 'involved', 'handcrafting', 'extraction', 'process', 'procedure', 'scraping', 'main', 'python', 'file', 'called', 'scrappy', 'edit', 'name', 'indicate', 'files', 'extracted', 'stored', 'no_pages', 'number', 'pages', 'page', 'run', 'tested', 'setting', 'dir_url', 'example', 'shows', 'election', 'httpswwwcnncomsearchqelection', 'docs', 'folder', 'many', 'wish', 'baseline', 'uses', 'standard', 'code', 'mp', 'background', 'added', 'thus', 'complete', 'implemented', 'plsa_projpy', 'ccmixpy', 'following', 'em', 'update', 'equations', 'appropritae', 'variables', 'described', 'n', 'kind', 'name_setlist', 'names', 'eg', 'elonbezos', 'number_of_topics', 'output', 'displays', 'top_n', 'words', 'distribution', 'important', 'notes', 'calculating', 'cwd', 'count', 'word', 'w', 'doc', 'smoothing', 'must', 'applied', 'exactly', 'esle', 'itll', 'cause', 'divison', 'zero', 'problem', 'term_doc_matrix', 'stores', 'steps', 'given', 'observe', 'pwtheta', 'ji', 'ie', 'specific', 'distributions', 'since', 'numerator', 'denominator', 'summed', 'capture', 'features', 'subcollections', 'behave', 'similarly', 'hence', 'implementation', 'summations', 'taken', 'concerned', 'cs', 'project', 'github', 'httpsgithubcomchiragcshettycourseproject', 'experiments', 'results', 'experiment', 'need', 'related', 'document', 'common', 'theme', 'good', 'famous', 'people', 'fields', 'elon', 'musk', 'bill', 'gates', 'billionaire', 'businessmen', 'similarities', 'oflate', 'reasons', 'subcollection', 'scrapped', 'order', 'recency', 'category', 'lamba_b', 'kept', 'increasing', 'much', 'seemed', 'include', 'informative', 'tesla', 'instance', 'chosen', 'decreasing', 'lets', 'stopwords', 'leak', 'around', 'right', 'compromise', 'gives', 'result', 'clearly', 'refers', 'rocket', 'texas', 'moving', 'lot', 'recently', 'associated', 'charity', 'work', 'especially', 'healthcare', 'makes', 'sense', 'ccm', 'retained', 'lamba_c', 'difference', 'stark', 'clustering', 'musks', 'article', 'show', 'distinction', 'flavour', 'technology', 'society', 'governance', 'decisively', 'say', 'might', 'possible', 'donot', 'enough', 'variety', 'force', 'cluster', 'well', 'better', 'latent', 'reveal', 'benefits', 'knobs', 'lambda_b', 'optimized', '____________________________________________________________________________________________']
https://github.com/chriistinahu/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/chuanyueshen/CourseProject	"cs 410 text information system: final project proposal team python team members: * chuanyue shen (netid: cs11, team leader) * jianjia zhang (netid: jianjia2) * runpeng nie (netid: runpeng3) project name: in-class text classification competition answer required questions: * are you prepared to learn state-of-the-art neural network classifiers? o yes. * name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. o neural classifiers: dnn, rnn, lstm, and cnn. o deep learning frameworks: tensorflow, pytorch * models we may explore: o we may start with a self-developed dnn architecture to get to know about the dataset. then we may move on to implement some state of art cnn architectures and tune the learning parameters to achieve a higher accuracy. we may also use some pretrained model to expediate the model training. relevant prior experience: the team members are familiar with python language and have some limited experience with mini machine learning projects during machine learning related courses. we chose this competition to gain some hands on in text classification and to explore machine learning approaches. programming language: python timeline: * model buildup: week 11 - 12 * training and testing: week 12-14 * model improvement: week 14-15 * final report: week 15-16 cs 410: project progress report team python team members: * chuanyue shen (netid: cs11, team leader) * jianjia zhang (netid: jianjia2) * runpeng nie (netid: runpeng3) tasks have been completed: 1. data preprocessing: training data and test data store in json line file. each data item has three fields. the first field of the training data is a label, indicating whether the response of this data is sarcasm or not. the first field of the test data is its id. both training data and test data have a response field and a context field. the response field stores the tweet to be classified, and the context field stores the conversation context of the response relatively. both response and context are string data. because the data is tweets, so there are lots of emoji objects and @user marks. the first step is removing the emojis and @user. first of all, the regular expression package is used since all emojis are encoded in unicode. by using re.compile() function the emoji unicode pattern is defined, and emojis are removed through re.sun() function. @user is relatively easier to remove. just like what we learned from lectures, there are lots of meaningless stop words like ""the"", ""a"" etc, they are almost useless for text classification. the nltk package provides an english stopwords list, by adding ""@user"" to the list and removing all words that appear in the list from response and context. besides, for text classification, the punctuation character is useless too since the punctuation does not hold sentiment like normal words. words are combined except punctuation through using string.punctuation. after these operations, the data is basically cleaned. only having a clean dataset is not enough. in english, with the change of grammar and context, there are many words with similar roots that have a similar meaning. for instance computer, computing, and computational. their appearance increases the complexity of matrix operations. in order to improve performance and raise classification accuracy, words need to be grouped/replaced by their stem word. nltk's portstemmer tool is very useful. by replacing some words with their stem word, the computation complexity dropped significantly. 2. model implementation * naive bayes o for this model, we choose the gaussian distribution to fit the distribution of the count of each word. then use naive bayes classifier to fit the data. o result: # precision = 0.5371 # recall = 0.7967 # f1 = 0.6416 * svm o for this model, we preprocess the data using tf-idf methods. due to the reason that we have too many unique words and which will result in around 20,000 features, but the training data has only 5000 rows which will possibly result in underfitting. we remove the words with term count less than 3. after the data cleaning, the unique words are around 6,000, which is reasonable compared to original unique words. o parameters: # min_df = 3 o result: # precision = 0.5829 # recall = 0.8633 # f1 = 0.6959 * lstm (passed the baseline) o for this model, we use three densely-connected layers and use sigmoid as the activation function in the output layer. we choose binary cross entropy as the loss function, and rmsprop as the optimizer. we take the 5000 strings as the input and for each string we choose at most max_len = 100 words from the right side to left side. o parameters: max_words = 5000, max_len = 100, batch_size = 128, epochs = 50, dropout_value = 0.5 o result # precision = 0.6068 # recall = 0.8967 # f1 = 0.7238 * cnn model (in progress): o we start with a basic cnn model based on pytorch framework. the model uses three convolutional layers with leakyrelu and batchnorm2d, and sigmoid as the activation function in the output layer. we use sgd as the optimizer, and nllloss as the loss function. with proper fine tuning, the model is expected to pass the baseline and beat the lstm model. tasks are pending: * finish the cnn model and fine-tune the learning parameters * implement some other state of art models/methods, such as transformer-based machine learning technique bert challenges: * during tuning lstm models, we found it is not easy to improve the precision value. * current completed models cannot achieve much higher f1 scores. we will try to achieve the f1 scores by using cnn model and/or bert model and finetuning the parameters. cs 410 final project - classification competition this is team pyhton's repo for cs 410 final project classification competition. this competition is about twitter sarcasm detection. we implemented naive bayes, svm, and lstm to classify a tweet as sarcasm or not sarcasm. lstm model gave the best prediction for the test dataset. team members: chuanyue shen (cs11), jianjia zhang (jianjia2), runpeng nie (runpeng3) prerequisite please use python3 and install the following packages: numpy jsonlines nltk string re autocorrect keras sklearn pandas it is recommended to run our program on machines with gpu. run the code data cleaning and preprocessing type python preprocessdata.py train the model and make predictions to run the lstm model, type python lstm.py to run the svm model, type python svm.py to run the naive bayes model, type python naviebayes.py test dataset prediction after running the model, the test dataset prediction will be saved in the local directory, named answer.txt reference https://www.kaggle.com/kredy10/simple-lstm-for-text-classification presentation https://youtu.be/ic9ncgvvbcq more details about the project source code please refer to the source code part to the ""run the code"" part mentioned above. the test set prediction of our best results can be found in answer.txt. the f1 score of one of our best results using lstm beat the baseline and can be found in the livedatalab leaderboard under the name of cs11 and/or jianjia2. implementation details data preprocessing: training data and test data store in json line file. each data item has three fields. the first field of the training data is a label, indicating whether the response of this data is sarcasm or not. the first field of the test data is its id. both training data and test data have a response field and a context field. the response field stores the tweet to be classified, and the context field stores the conversation context of the response relatively. both response and context are string data. because the data is the tweets, so there are lots of emoji objects and @user marks. the first step is removing the emojis and @user. first of all, the regular expression package is used since all emojis are encoded in unicode. by using re.compile() function the emoji unicode pattern is defined, and emojis are removed through re.sun() function. @user is relatively easier to remove. just like what we learned from lectures, there are lots of meaningless stop words like ""the"", ""a"" etc, they are almost useless for text classification. the nltk package provides an english stopwords list, by adding ""@user"" to the list and removing all words that appear in the list from response and context. besides, for text classification, the punctuation character is useless too since the punctuation does not hold sentiment like normal words. words are combined except punctuation through using string.punctuation. after these operations, the data is cleaned. only having a clean dataset is not enough. in english, with the change of grammar and context, there are many words with similar roots that have a similar meaning. for instance computer, computing, and computational. their appearance increases the complexity of matrix operations. to improve performance and raise classification accuracy, words need to be grouped/replaced by their stem word. nltk's portstemmer tool is very useful. by replacing some words with their stem word, the computation complexity dropped significantly. with the steps mentioned above, we can generate a n * 3 numpy array. the 3 columns store label, response, and context, respectively. the array is saved in 'datastep1.csv' file. using the n * 3 numpy array, we can build a term document matrix that counts the frequency of each vocabulary in each tweet. the term document matrix is saved in 'term_doc_matrix.csv' file. 'datastep1.csv' is mainly used in lstm model implementation with some further processing. 'term_doc_matrix.csv' is mainly used in naive bayes and svm models. model implementation and test result * naive bayes for this model, we choose the gaussian distribution to fit the distribution of the count of each word. then use the naive bayes classifier to fit the data. result: # precision = 0.5371 # recall = 0.7967 # f1 = 0.6416 * svm for this model, we preprocess the data using tf-idf methods. due to the reason that we have too many unique words and which will result in around 20,000 features, but the training data has only 5000 rows which will possibly result in underfitting. we remove the words with term count less than 3. after the data cleaning, the unique words are around 6,000, which is reasonable compared to original unique words. in the training process, we shuffle the training dataset and split it as training data (0.8) and validation data (0.2). result: # precision = 0.5829 # recall = 0.8633 # f1 = 0.6959 * lstm (best model) for this model, we create a neural network with lstm, and word embeddings were learned while fitting the neutral network. we try to manipulate the number of layers and layer depths to find the best model architecture. our final best rnn with lstm model is composed of an embedding layer, a lstm layer, 3 densely-connected layers, and activation and dropout layers in between. 'relu' is used for the activation function. dropout = 0.5 is used to reduce overfitting. we adopt sigmoid as the activation function in the output layer. in the training process, we try to compare different loss functions (mse, binary cross entropy), optimizers (adam, sgd, rmsprop), and batch sizes (16,32,64,128). our final best model using binary cross entropy as the loss function, rmsprop as the optimizer, and batch size = 128. also, we shuffle the training dataset and split it as training data (0.8) and validation data (0.2). for the data input, we further process the 'datastep1.csv'. at first, we take the 5000 strings as the input and for each string, we choose at most max_len = 100 words from the right side to the left side. and then, based on the vocabulary, we store the index of each word for each string in the table (matrix_sequences) with its size as 5000 by 100. overall, the data input for the lstm model would be a matrix with a size of 5000 by 100. result # precision = 0.6068 # recall = 0.8967 # f1 = 0.7238 contribution all team members made equal contribution to the project and commited 20 hours+ per person to this project."	['cs', 'text', 'information', 'system', 'final', 'project', 'proposal', 'team', 'python', 'members', 'chuanyue', 'shen', 'netid', 'leader', 'jianjia', 'zhang', 'runpeng', 'nie', 'name', 'inclass', 'classification', 'competition', 'answer', 'required', 'questions', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'yes', 'deep', 'learning', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'dnn', 'rnn', 'lstm', 'cnn', 'tensorflow', 'pytorch', 'models', 'explore', 'start', 'selfdeveloped', 'architecture', 'get', 'know', 'dataset', 'move', 'implement', 'state', 'art', 'architectures', 'tune', 'parameters', 'achieve', 'higher', 'accuracy', 'also', 'use', 'pretrained', 'model', 'expediate', 'training', 'familiar', 'language', 'limited', 'mini', 'machine', 'projects', 'related', 'courses', 'chose', 'gain', 'hands', 'approaches', 'programming', 'timeline', 'buildup', 'week', 'testing', 'improvement', 'report', 'progress', 'tasks', 'completed', 'data', 'preprocessing', 'test', 'store', 'json', 'line', 'file', 'item', 'three', 'fields', 'first', 'field', 'label', 'indicating', 'whether', 'response', 'sarcasm', 'id', 'context', 'stores', 'tweet', 'classified', 'conversation', 'relatively', 'string', 'tweets', 'lots', 'emoji', 'objects', 'user', 'marks', 'step', 'removing', 'emojis', 'regular', 'expression', 'package', 'used', 'since', 'encoded', 'unicode', 'using', 'recompile', 'function', 'pattern', 'defined', 'removed', 'resun', 'easier', 'remove', 'like', 'learned', 'lectures', 'meaningless', 'stop', 'words', 'etc', 'almost', 'useless', 'nltk', 'provides', 'english', 'stopwords', 'list', 'adding', 'appear', 'besides', 'punctuation', 'character', 'hold', 'sentiment', 'normal', 'combined', 'except', 'stringpunctuation', 'operations', 'basically', 'cleaned', 'clean', 'enough', 'change', 'grammar', 'many', 'similar', 'roots', 'meaning', 'instance', 'computer', 'computing', 'computational', 'appearance', 'increases', 'complexity', 'matrix', 'order', 'improve', 'performance', 'raise', 'need', 'groupedreplaced', 'stem', 'word', 'nltks', 'portstemmer', 'tool', 'useful', 'replacing', 'computation', 'dropped', 'significantly', 'implementation', 'naive', 'bayes', 'choose', 'gaussian', 'distribution', 'fit', 'count', 'classifier', 'result', 'precision', 'recall', 'f', 'svm', 'preprocess', 'tfidf', 'due', 'reason', 'unique', 'around', 'features', 'rows', 'possibly', 'underfitting', 'term', 'less', 'cleaning', 'reasonable', 'compared', 'original', 'min_df', 'passed', 'baseline', 'denselyconnected', 'layers', 'sigmoid', 'activation', 'output', 'layer', 'binary', 'cross', 'entropy', 'loss', 'rmsprop', 'optimizer', 'take', 'strings', 'input', 'max_len', 'right', 'side', 'left', 'max_words', 'batch_size', 'epochs', 'dropout_value', 'basic', 'based', 'framework', 'uses', 'convolutional', 'leakyrelu', 'batchnormd', 'sgd', 'nllloss', 'proper', 'fine', 'tuning', 'expected', 'pass', 'beat', 'pending', 'finish', 'finetune', 'modelsmethods', 'transformerbased', 'technique', 'bert', 'challenges', 'found', 'easy', 'value', 'current', 'cannot', 'much', 'scores', 'try', 'andor', 'finetuning', 'pyhtons', 'repo', 'twitter', 'detection', 'implemented', 'classify', 'gave', 'best', 'prediction', 'prerequisite', 'please', 'install', 'following', 'packages', 'numpy', 'jsonlines', 'autocorrect', 'keras', 'sklearn', 'pandas', 'recommended', 'run', 'program', 'machines', 'gpu', 'code', 'type', 'preprocessdatapy', 'train', 'make', 'predictions', 'lstmpy', 'svmpy', 'naviebayespy', 'running', 'saved', 'local', 'directory', 'named', 'answertxt', 'reference', 'httpswwwkagglecomkredysimplelstmfortextclassification', 'presentation', 'httpsyoutubeicncgvvbcq', 'details', 'source', 'refer', 'part', 'mentioned', 'set', 'results', 'score', 'one', 'livedatalab', 'leaderboard', 'steps', 'generate', 'n', 'array', 'columns', 'respectively', 'datastepcsv', 'build', 'document', 'counts', 'frequency', 'vocabulary', 'term_doc_matrixcsv', 'mainly', 'processing', 'process', 'shuffle', 'split', 'validation', 'create', 'embeddings', 'fitting', 'neutral', 'manipulate', 'number', 'depths', 'find', 'composed', 'embedding', 'dropout', 'relu', 'reduce', 'overfitting', 'adopt', 'compare', 'different', 'functions', 'mse', 'optimizers', 'adam', 'batch', 'sizes', 'size', 'index', 'table', 'matrix_sequences', 'overall', 'would', 'contribution', 'made', 'equal', 'commited', 'hours', 'per', 'person']
https://github.com/chungfaith1/CourseProject	"courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. for the final project submission, please go to the ""documentation"" folder to read the final project report and presentation. the link to the demo is here: https://www.youtube.com/watch?v=k2cqh4ppybk&feature=youtu.be"	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities', 'final', 'submission', 'go', 'documentation', 'folder', 'read', 'report', 'presentation', 'demo', 'httpswwwyoutubecomwatchvkcqhppybkfeatureyoutube']
https://github.com/clairebrekken/CourseProject	"progress made thus far: we have started building a foundation for an application that will accurately classify sarcastic tweets. we started by brainstorming different classification modeling techniques, features to engineer, and researching existing white papers on more advanced applications. through our initial research, we decided to implement a series of models ranging from naive to advanced including decision tree classifier, logistic regression, linear svc, svc with radial-basis kernel, k-nearest neighbors classifier, gaussian naive bayes, random forest classifier, adaboost classifier and gradient boosting classifier. we first spot-checked these models (using default parameters) via 10-fold cross-validation on the entire training set. the results showed that linear models such as logistic regression and linear svc worked as well as did the more complex nonlinear models. we then proceeded to perform hyper-parameter tuning (using 10-fold cross-validation and f1 score as the metric) to optimize the models. equally as important as the modeling techniques, we needed to engineer features to capture the nuances that determine whether a tweet is sarcastic. so far, we have implemented features to represent the number of users tagged in the tweet, number of hashtags, length of tweet, and number of characters in the tweet. we also have tried to capture the sentiment of the tweet by creating features to represent ellipses, laughter, affirmations, negations, interjections, intensifiers, punctuation and emojis. after creating these features, we also used tsne to visualize our features to get an idea of how they cluster and represent the data thus far. overall, we have seen the best performance with the linear/regression models compared to more complex models such as adaboost or the gradient boosted classifier. our best metrics thus far are as follows: precision = 0.6006, recall = 0.8355 and f1 = 0.6988. remaining tasks: our largest area for improvement of our current work is to engineer additional features to capture more of the nuances of sarcastic tweets. since our complex models have not performed well thus far, we think this indicates that our features are not complex enough to capture characteristics of sarcastic tweets. we think our biggest wins will come from creating features based on the context of each tweet. since sarcasm is often a response as part of a conversation, we are hoping this will improve model performance. we also plan on implementing features to represent text patterns in sarcastic tweets like parts of speech, n-grams, and topics represented in the tweet using lda or a similar technique. we also think it would be interesting to implement a deep learning model after the additional feature engineering and evaluate how this performs against the other models. additionally, we plan to explore an ensemble model that combines the models that have performed well to see if we can optimize performance that way. in the end, we plan to have a robust suite of models that are trained on data with features that capture the nuances of sarcastic tweets. challenges/issues: our main obstacle we are currently facing is that we are not reaching baseline performance. with the remaining tasks that we have detailed above, we believe we will be able to reach baseline accuracy with our final implementation. our other challenge has been time. between finishing up content for the course and preparing for the second exam, we have not been able to prioritize working on this project. half of our team has now completed the exam so we are not concerned with time being a challenge as we complete this project over the next couple of weeks. project proposal 1. what are the names and netids of all your team members? team members: * claire brekken (brekken2) - captain * yizi xiao (yizix2) 2. which competition do you plan to join? we plan to join the text classification competition. 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods yes we are prepared to learn the state-of-the-art neural network classifiers. the classifiers we have heard of and plan to explore are: * logistic regression classifier * deep neural network classifier (dnn) * recurrent neural network classifiers * lstm models * convolutional neural network classifiers (cnn) relevant experiences: * logistic regression model to detect seizures in eeg data (medical device application) * logistic regression to predict likelihood of orders happening in the future (supply chain/logistics application) * dnn for classify respiratory sounds (medical device application) * dnn for estimated time of arrival (supply chain/logistics application) * cnn for handwritten and image recognition (school work) 4. which programming language do you plan to use? we plan to use python. text classification competition: twitter sarcasm detection demos: - feature_engineering_demo.zip - yizi_xiao_demo.zip - bert_demo.zip code: requirements: python version >= 3.7 pip3 install -r requirements.txt files: there are 3 jupyter notebooks which contain the code developed for this project: feature_engineering.ipynb ml.ipynb bert.ipynb feature_engineering.ipynb this notebook is self-contained and can be run from top to bottom in sequence. the only dependency is the file utils_text_clf.py, which contains auxillary functions to process data. this notebook outputs data to be used in the conventional ml models. ml.ipynb: this notebook is self-contained and can be run from top to bottom in sequence. the only dependency is the file utils_text_clf.py, which contains auxillary functions to process data. it is also dependent on feature_engineering.py to have been run previously and that the output of that notebook has been saved. bert.ipynb this notebook is self-contained and can be run from top to bottom in sequence. the only dependency is the file utils_text_clf.py, which contains auxillary functions to process data. project specification dataset format: each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | for test, we've provided you the response and the context. we also provide the id (i.e., identifier) to report the results. submission instructions : follow the same instructions as for the mps -- create a private copy of this repo and add a webhook to connect to livedatalab.please add a comma separated file named answer.txt containing the predictions on the test dataset. the file should have no headers and have exactly 1800 rows. each row must have the sample id and the predicted label. for example: twitter_1,sarcasm twitter_2,not_sarcasm ..."	['progress', 'made', 'thus', 'far', 'started', 'building', 'foundation', 'application', 'accurately', 'classify', 'sarcastic', 'tweets', 'brainstorming', 'different', 'classification', 'modeling', 'techniques', 'features', 'engineer', 'researching', 'existing', 'white', 'papers', 'advanced', 'applications', 'initial', 'research', 'decided', 'implement', 'series', 'models', 'ranging', 'naive', 'including', 'decision', 'tree', 'classifier', 'logistic', 'regression', 'linear', 'svc', 'radialbasis', 'kernel', 'knearest', 'neighbors', 'gaussian', 'bayes', 'random', 'forest', 'adaboost', 'gradient', 'boosting', 'first', 'spotchecked', 'using', 'default', 'parameters', 'via', 'fold', 'crossvalidation', 'entire', 'training', 'set', 'results', 'showed', 'worked', 'well', 'complex', 'nonlinear', 'proceeded', 'perform', 'hyperparameter', 'tuning', 'f', 'score', 'metric', 'optimize', 'equally', 'important', 'needed', 'capture', 'nuances', 'determine', 'whether', 'tweet', 'implemented', 'represent', 'number', 'users', 'tagged', 'hashtags', 'length', 'characters', 'also', 'tried', 'sentiment', 'creating', 'ellipses', 'laughter', 'affirmations', 'negations', 'interjections', 'intensifiers', 'punctuation', 'emojis', 'used', 'tsne', 'visualize', 'get', 'idea', 'cluster', 'data', 'overall', 'seen', 'best', 'performance', 'linearregression', 'compared', 'boosted', 'metrics', 'follows', 'precision', 'recall', 'remaining', 'tasks', 'largest', 'area', 'improvement', 'current', 'work', 'additional', 'since', 'performed', 'think', 'indicates', 'enough', 'characteristics', 'biggest', 'wins', 'come', 'based', 'context', 'sarcasm', 'often', 'response', 'part', 'conversation', 'hoping', 'improve', 'model', 'plan', 'implementing', 'text', 'patterns', 'like', 'parts', 'speech', 'ngrams', 'topics', 'represented', 'lda', 'similar', 'technique', 'would', 'interesting', 'deep', 'learning', 'feature', 'engineering', 'evaluate', 'performs', 'additionally', 'explore', 'ensemble', 'combines', 'see', 'way', 'end', 'robust', 'suite', 'trained', 'challengesissues', 'main', 'obstacle', 'currently', 'facing', 'reaching', 'baseline', 'detailed', 'believe', 'able', 'reach', 'accuracy', 'final', 'implementation', 'challenge', 'time', 'finishing', 'content', 'course', 'preparing', 'second', 'exam', 'prioritize', 'working', 'project', 'half', 'team', 'completed', 'concerned', 'complete', 'next', 'couple', 'weeks', 'proposal', 'names', 'netids', 'members', 'claire', 'brekken', 'captain', 'yizi', 'xiao', 'yizix', 'competition', 'join', 'choose', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'name', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'yes', 'dnn', 'recurrent', 'lstm', 'convolutional', 'cnn', 'experiences', 'detect', 'seizures', 'eeg', 'medical', 'device', 'predict', 'likelihood', 'orders', 'happening', 'future', 'supply', 'chainlogistics', 'respiratory', 'sounds', 'estimated', 'arrival', 'handwritten', 'image', 'recognition', 'school', 'programming', 'language', 'use', 'python', 'twitter', 'detection', 'demos', 'feature_engineering_demozip', 'yizi_xiao_demozip', 'bert_demozip', 'code', 'requirements', 'version', 'pip', 'install', 'r', 'requirementstxt', 'files', 'jupyter', 'notebooks', 'contain', 'developed', 'feature_engineeringipynb', 'mlipynb', 'bertipynb', 'notebook', 'selfcontained', 'run', 'top', 'bottom', 'sequence', 'dependency', 'file', 'utils_text_clfpy', 'contains', 'auxillary', 'functions', 'process', 'outputs', 'conventional', 'ml', 'dependent', 'feature_engineeringpy', 'previously', 'output', 'saved', 'specification', 'dataset', 'format', 'line', 'json', 'object', 'following', 'fields', 'classified', 'note', 'ordered', 'list', 'dialogue', 'ie', 'three', 'elements', 'c', 'order', 'reply', 'label', 'not_sarcasm', 'id', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'test', 'instance', 'example', 'user', 'dont', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'instead', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'immediate', 'goal', 'optionally', 'full', 'size', 'statistics', 'train', 'weve', 'provided', 'provide', 'report', 'submission', 'instructions', 'follow', 'mps', 'create', 'private', 'copy', 'repo', 'add', 'webhook', 'connect', 'livedatalabplease', 'comma', 'separated', 'answertxt', 'containing', 'predictions', 'headers', 'exactly', 'rows', 'row', 'must', 'predicted', 'twitter_sarcasm', 'twitter_not_sarcasm']
https://github.com/cnj3/CourseProject	"progress report for project chameleon (jacob huss, chaitanya jujjavarapu, and edward park) 1. we have successfully scraped the needed iem data from the iem website into a csv. we then wrote iemcsvtranformer.py, which took this data and calculated the normalized price for each date. these normalized prices were stored in data/iemprices.txt. we then wrote a function in datareader.py to read these prices into a dictionary. for the 2nd part of our scraping process, we had to create a program that fetches the data from all 47000 xml files between the dates of may 2000 and october 2000, and then parses the text of each article so that only our matching query terms were pulled out and outputted and cleaned up into a text file through a 'bag of words' approach. 2. now that we have our data completely scraped and prepared, we need to implement the algorithm detailed in the paper. in order to do this, we will first need to break down our algorithm into smaller pieces that can be tackled by each team member. doing this will require us to first gain a better understanding of the algorithm itself. 3. the biggest challenge that we are facing is understanding how the algorithm for our function works. 1.team members: a. jacob huss, netid: jnhuss2 (team captain) b. chaitanya jujjavarapu, netid: cnj3 c. edward park, netid: edwardp3 mining causal topics in text data: iterative topic modeling with time series feedback: https://dl-acm-org.proxy2.library.illinois.edu/doi/epdf/10.1145/2505515.2505612 python yes. we have access to all the data used in the first experiment described by the paper: a. we will scrape the new york times data from this site: https://spiderbites.nytimes.com/2000/ b. we will scrape the iem data from this site: https://iemweb.biz.uiowa.edu/pricehistory/pricehistory_selectcontract.cfm?market_id=29 n/a n/a cs 410 final project jnhuss2, cnj3, edwardp3 overview we are working on reproducing the paper, ""mining causal topics in text data: iterative topic modeling with time series feedback."" our code scrapes two datasets, iem price history data and the new york times site map data. it uses these datasets to generate common topics in new york times articles that are correlated with change in the iem prices. the algorithm uses an iterative approach. it first uses lda to generate topics. it then analyzes these topics to determine which topics and words are most correlated to change in the iem data. these results are used to generate priors, which are used as input to the next iteration of lda. how the software is implemented the primary functionality of the itmtf algorithm is in the file main.py. in the following section, we break this file down into the various functions that are used to implement it. this file data_reader.py is used by main.py to read in the iem and nyt data from the data files iemprices.txt and articles.txt. both of these txt documents are held in the data directory. article_compiler.py consists of the code that was used to scrape the nyt data and create articles.txt. iem_csv_tranformer.py consists of the code that was used to create iemprices.txt from the data held in iemprices.csv. functions in main.py: read_data - reads in data from articles.txt and iemprices.txt run_itmtf - runs the itmtf algorithm with nyt_data and runs methods to determine the significant topics get_topic_total_probability_by_date - finds the probability of topics by date and creates a multidimensional array find_significant_topics - finds the significant topics using the granger algorithm granger_significance_test - runs grainger significance test off of a multidimensional array that is inputted as a parameter get_pos_neg_words - states whether the word has a positive or negative correlation with the iem prices determine_new_priors - creates a weight for each word to be used next time lda is run get_avg_confidence - gets the average confidence amongst all of the words that have been chosen to be significant get_avg_purity - gets the average purity amongst all of the topics in data_reader.py get_iem_prices - reads in iemprices.txt and returns a dictionary of date object keys and the iem normalized price values read_data_file usage of software / how to run apis used to program our software, we used python. we used python because of its simplicity and packages. for scraping the new york times article data, we used bs4's beautifulsoup. we used the gensim library in multiple locations. in main.py, we used gensim to create a dictionary that acts as a vocabulary list for the entire corpus. the keys in the dictionary act as ids and the values are the strings of words, which is nice because each word gets an id associated with it. in data_reader.py, gensim is used to clean up the characters and words scraped from the new york times data. we used gensim methods, such as strip_punctuation and remove_stopwords. next, we used statsmodels.tsa.stattools in main.py because it contains a method called grangercausalitytests, which we used for the granger test algorithm. we also used scipy.stats because it contains a method for the pearson correlation algorithm, pearsonr. how to run to run the code, clone the repository and open it in your terminal. after this, install all of the needed packages and run python main.py. sh $ pip install numpy $ pip install datetime $ pip install bs4 $ pip install gensim $ pip install statsmodels $ pip install scipy $ python iem_csv_transformer.py $ python main.py running this program took our computers about 25 minutes to complete. it runs the itmtf algorithm a total of 4 times, each time varying the number of topics that is generated by lda. each time the itmtf algorithm is run, its core functions are iterated 5 times (lda runs 5 times). with each iteration, the program prints out the topics it generated that are significant as well as the words that were most correlated to positive and negative movement in the iem price. once itmtf is run all 4 times, it prints out the average purity and causality for each iteration in each run of the algorithm. team member contributions jacob sh scraped the iem data. wrote the code to read in iem and new york times data files. wrote the backend code to find the significant words, differentiate if they are positive and negative, and make a list of words that ""cause"" or are related to changes in the iem betting prices. chaitanya sh worked with edward to scrape the new york times data. cleaned the code, worked on implementing the method to find significant words, documented the code, and wrote the documentation edward sh worked with chaitanya to scrape the new york times data. (ghosted us for the rest of the project) presentation you can view the final presentation using this youtube link: https://youtu.be/5niqwlt-tu4 it is also in the github repository."	['progress', 'report', 'project', 'chameleon', 'jacob', 'huss', 'chaitanya', 'jujjavarapu', 'edward', 'park', 'successfully', 'scraped', 'needed', 'iem', 'data', 'website', 'csv', 'wrote', 'iemcsvtranformerpy', 'took', 'calculated', 'normalized', 'price', 'date', 'prices', 'stored', 'dataiempricestxt', 'function', 'datareaderpy', 'read', 'dictionary', 'nd', 'part', 'scraping', 'process', 'create', 'program', 'fetches', 'xml', 'files', 'dates', 'may', 'october', 'parses', 'text', 'article', 'matching', 'query', 'terms', 'pulled', 'outputted', 'cleaned', 'file', 'bag', 'words', 'approach', 'completely', 'prepared', 'need', 'implement', 'algorithm', 'detailed', 'paper', 'order', 'first', 'break', 'smaller', 'pieces', 'tackled', 'team', 'member', 'require', 'us', 'gain', 'better', 'understanding', 'biggest', 'challenge', 'facing', 'works', 'members', 'netid', 'jnhuss', 'captain', 'b', 'cnj', 'c', 'edwardp', 'mining', 'causal', 'topics', 'iterative', 'topic', 'modeling', 'time', 'series', 'feedback', 'httpsdlacmorgproxylibraryillinoisedudoiepdf', 'python', 'yes', 'access', 'used', 'experiment', 'described', 'scrape', 'new', 'york', 'times', 'site', 'httpsspiderbitesnytimescom', 'httpsiemwebbizuiowaedupricehistorypricehistory_selectcontractcfmmarket_id', 'na', 'cs', 'final', 'overview', 'working', 'reproducing', 'code', 'scrapes', 'two', 'datasets', 'history', 'map', 'uses', 'generate', 'common', 'articles', 'correlated', 'change', 'lda', 'analyzes', 'determine', 'results', 'priors', 'input', 'next', 'iteration', 'software', 'implemented', 'primary', 'functionality', 'itmtf', 'mainpy', 'following', 'section', 'various', 'functions', 'data_readerpy', 'nyt', 'iempricestxt', 'articlestxt', 'txt', 'documents', 'held', 'directory', 'article_compilerpy', 'consists', 'iem_csv_tranformerpy', 'iempricescsv', 'read_data', 'reads', 'run_itmtf', 'runs', 'nyt_data', 'methods', 'significant', 'get_topic_total_probability_by_date', 'finds', 'probability', 'creates', 'multidimensional', 'array', 'find_significant_topics', 'using', 'granger', 'granger_significance_test', 'grainger', 'significance', 'test', 'inputted', 'parameter', 'get_pos_neg_words', 'states', 'whether', 'word', 'positive', 'negative', 'correlation', 'determine_new_priors', 'weight', 'run', 'get_avg_confidence', 'gets', 'average', 'confidence', 'amongst', 'chosen', 'get_avg_purity', 'purity', 'get_iem_prices', 'returns', 'object', 'keys', 'values', 'read_data_file', 'usage', 'apis', 'simplicity', 'packages', 'bss', 'beautifulsoup', 'gensim', 'library', 'multiple', 'locations', 'acts', 'vocabulary', 'list', 'entire', 'corpus', 'act', 'ids', 'strings', 'nice', 'id', 'associated', 'clean', 'characters', 'strip_punctuation', 'remove_stopwords', 'statsmodelstsastattools', 'contains', 'method', 'called', 'grangercausalitytests', 'also', 'scipystats', 'pearson', 'pearsonr', 'clone', 'repository', 'open', 'terminal', 'install', 'sh', 'pip', 'numpy', 'datetime', 'bs', 'statsmodels', 'scipy', 'iem_csv_transformerpy', 'running', 'computers', 'minutes', 'complete', 'total', 'varying', 'number', 'generated', 'core', 'iterated', 'prints', 'well', 'movement', 'causality', 'contributions', 'backend', 'find', 'differentiate', 'make', 'cause', 'related', 'changes', 'betting', 'worked', 'implementing', 'documented', 'documentation', 'ghosted', 'rest', 'presentation', 'view', 'youtube', 'link', 'httpsyoutubeniqwlttu', 'github']
https://github.com/codylw2/CourseProject	"cody webster progress report progress made thus far generic wrote script(s) to process documents and convert to a json format for easy loading in the future. json files contain tokenized representations of the text and queries cranfield wrote script to convert json text data into cranfield datasets as required for the metapy module. adapted the scripts for homework to find the optimal values of weights in for the jm and bm25 algorithms. adapted the scripts for homework to ranking documents. bert downloaded google's ms-marco pre-trained bert model. wrote script to examine documents and determine missing vocab that is common to the corpus. adapted the scripts in the git repo (https://github.com/cognitiveailab/ranking) to finetune and train the model with the tensorflow_ranking python module. adapted the scripts in the aforementioned git repo to run the scripts in a docker container running in window's subsystem for linux on my desktop's gpu. rewrote the script for running to docker to run outside of docker for use with google colab. wrote script to convert ranking output into a predictions file. remaining tasks generic consolidate scripts and files that are spread over several directories and add into the git repo. cranfield run again with titles included in the ""text"" (not likely to beat baseline) bert finish running the bert model and compile results. each document/query combination that is longer than 512 broken tokens has been into segments. i will test whether a mean, geometric mean, or max score within the segment is a better metric. test if i can use a larger bert model with google colab (currently using bert small) any challenges adapting the examples in the git repo so that i can run the bert model on my system or in git hardware limitations on my pc. partially solved by using google colab scoring the documents with bert takes an excessive amount of time due to the large number of documents in the corpus and the limit of 512 tokens per analysis run. this excessive wait on results has seriously slowed my progress. actually beating the baseline performance. cody webster progress report 1) progress made thus far generic wrote script(s) to process documents and convert to a json format for easy loading in the future. json files contain tokenized representations of the text and queries cranfield wrote script to convert json text data into cranfield datasets as required for the metapy module. adapted the scripts for homework to find the optimal values of weights in for the jm and bm25 algorithms. adapted the scripts for homework to ranking documents. bert downloaded google's ms-marco pre-trained bert model. wrote script to examine documents and determine missing vocab that is common to the corpus. adapted the scripts in the git repo (https://github.com/cognitiveailab/ranking) to finetune and train the model with the tensorflow_ranking python module. adapted the scripts in the aforementioned git repo to run the scripts in a docker container running in window's subsystem for linux on my desktop's gpu. rewrote the script for running to docker to run outside of docker for use with google colab. wrote script to convert ranking output into a predictions file. 2) remaining tasks generic consolidate scripts and files that are spread over several directories and add into the git repo. cranfield run again with titles included in the ""text"" (not likely to beat baseline) bert finish running the bert model and compile results. each document/query combination that is longer than 512 broken tokens has been into segments. i will test whether a mean, geometric mean, or max score within the segment is a better metric. test if i can use a larger bert model with google colab (currently using bert small) 3) any challenges * adapting the examples in the git repo so that i can run the bert model on my system or in git * hardware limitations on my pc. partially solved by using google colab * scoring the documents with bert takes an excessive amount of time due to the large number of documents in the corpus and the limit of 512 tokens per analysis run. this excessive wait on results has seriously slowed my progress. * actually beating the baseline performance. ir competition project documentation cody webster contents overview 3 project demonstration 3 project results 3 dirichletprior 3 jelinekmercer 4 okapibm25 4 bm25+ 4 bert 5 scibert *difficulty running this model limited options 6 tensorflow ranking custom model 7 assumptions 7 installation instructions 7 what to install if running locally 7 what python packages to install 8 how to run 8 prepare data (required if local) 8 (method 1) run bm25+ or another ranker (reproduces best results) 9 option 1 (google colab) 9 option 2 (run locally) 9 (method 2) run tensorflow ranking 9 option 1 (google colab) 9 option 2 (run locally) 9 (method 3) run a bert model 9 option 1 (google colab) 9 option 2 (run locally) 10 script api documentation 10 general 10 metapy (bm25, ...) 12 tensorflow ranking 13 bert 16 resources 20 citations 20 installation guidance 20 stopwords 20 bm25 21 tensorflow ranking 21 tensorflow ranking (how to serve a model) 21 tensorflow ranking (how to predict) 21 bert checkpoint conversion 21 bert 21 scibert 21 docker 21 overview the purpose of this project is to participate in the ir competition. for this project i developed and extensively tested three main ways to rank documents. the first is ranking documents using a ranking function either packaged with metapy or through a custom definition implemented through metapy. initially, the best results that i achieved with this method were through a custom implementation of bm25+. through a longshot attempt on the last day, i actually beat all of my other rankings using metapy's bm25 implementation. the second is ranking documents using a custom model that is trained using the python library tensorflow_ranking. the third option is to use a pretrained model and it's associated vocabulary and then finetune it using tensorflow_ranking. overall the best results that i have achieved have come from running the okapibm25 algorithm implemented with metapy and using parameters that were produced from a brute force optimization. project demonstration i have uploaded ""cs410_project_demo.mp4"" into the git repository. i have also uploaded the file to illinois media: https://mediaspace.illinois.edu/media/t/1_07py0q5f project results unfortunately, despite my best attempt i was not able to beat the initial baseline performance score as defined by the class professor or tas. nobody else was able to beat the initial baseline either so it is likely that baseline was an unreasonable standard for us to achieve with our limited knowledge and experience. in this section i will briefly detail some of the variations and experiments that i attempted. it is not possible for me capture every variation that i tried but i will cover as best as i can. i do not have a consistent record of the score for every attempt so i will not be including those scores. on the last day of the competition, the class administrators lowered the score of the baseline. i decided to give it another shot because i really had nothing to lose. i was able to beat the new baseline using the standard bm25 algorithm implemented via metapy. the only difference between what i did on the last day and what i had done on previous days was that i allowed one of the parameters to vary more than i initially had. i will detail that more within the bm25 section. dirichletprior this algorithm was implemented using metapy. the value of the parameter was optimized on the train dataset using a brute forcing approach of testing every reasonable parameter and selecting the parameter that achieved the best ncdg@20 score on the training dataset. none of the attempts for this algorithm achieved results that rivaled the bm25 algorithm so it was quickly determined to be a non-ideal approach. initial attempts with this algorithm were made using the body text only. later attempts also used the title and abstract/intro. further experimentation with the kldivergenceprf implementation in metapy and variations on its parameters was also performed but performance lagged behind other approaches. jelinekmercer this algorithm was implemented using metapy. the value of the parameter was optimized on the train dataset using a brute forcing approach of testing every reasonable parameter and selecting the parameter that achieved the best ncdg@20 score on the training dataset. none of the attempts for this algorithm achieved results that rivaled the bm25 algorithm so it was quickly determined to be a non-ideal approach. this algorithm was only ever attempted with the body text and results were deemed not good enough to justify further experimentation. okapibm25 this algorithm was implemented using metapy. the value of the three parameters was optimized on the training dataset using a brute force approach of testing every reasonable combination of parameters and selecting the set that achieved the greatest. due to the number of variations that i tried with this algorithm, i had to optimize the parameters a number of times and i developed a multi-processing script that was capable of doing this at a much quicker pace. initially i only attempted to run the algorithm on the body text for each paper but the performance for that was poor. with the body text i attempted to optimize a different ndcg values, 10, 20, and 50 respectively. none of them produced significant improvements in the overall performance. next, i attempted to use the title, abstract, and introduction along with the body text and that produce marginal improvements in the score. another boost came once i removed the body text from the dataset and only trained on the title, abstract, and introduction. i also attempted to use metapy's implementation of rocchio feedback. i optimized the parameters for rocchio in a similar manner to the normal okapibm25 algorithm. ultimately the rocchio feedback produced worse results then the standalone ranker so i excluded it from further test with this algorithm. the performance was initially still inadequate so i pursued further methods. one the last day, after i noticed that they had lowered the baseline, i attempted some new variations of this algorithm. i did not run the other algorithms because they all take longer to run and i did not have time to implement anything new. the new variation that i tried on the last day was to let the k3 parameter vary. i had previously not done this due to the faulty assumption that it would only hurt my results because that was the experience that i had during mp2.2. almost immediately while running the pooled optimization, i was able to see that the performance was superior my previous results. i selected a number of the different parameter combinations to try from the generated set. on the third try i was able to beat the baseline using k1=2.0, b=0.75, and k3=4450. i am immensely frustrated that i have wasted so much effort trying to find other ways to rank documents and the answer was so simple but i am happy to have beaten the baseline. bm25+ this algorithm was implemented with metapy's api using the definition of bm25+ from (trotman et al, 2014). since it was implemented in python and c++ like the native metapy implementations, it ran slower. i optimized it in the same way that i optimized the okapibm25 algorithm. this implementation ultimately outperformed the native okapibm25 algorithm, but it did not beat the baseline. better results were obtained when using this in conjunction with the bert implementation. i tried numerous variations on this algorithm in an attempt to increase my score on the test dataset. similar to the other algorithms, i initially tried to only use the body text for my analysis. this did not produce the results that i desired. i have briefly listed some of the other variations that i tried: attempted with body text only attempted with title, abstract, intro, and body text attempted with title, abstract, and intro attempted with title only attempted with rocchio pseudo feedback, varying the parameters to rocchio attempted to remove all urls in the corpus attempted to replace all variants of the words coronavirus, covid-19, 2019-ncov, and sars-ncov-2 with coronavirus attempted to run with query text, question text, or narrative text attempted to run with all variations of query combined attempted different variations of metapy analyzer chains attempted to remove docs with duplicate s2_id but different uids, docs were functionally duplicates attempted to use a date cutoff for document attempted to pre-tokenize the queries and documents using bert's tokenizer attempted to use multiple datasets with various weightings and combine into one result used different variations of stopwords that were gathered online (listed in resources) ultimately, i was not able to beat the baseline using this custom algorithm, so i continued my exploration of other possibilities. bert i had completed my technical review over the bert model and had learned through that about its superior performance when classifying documents. i chose this as the algorithm to attempt to rank with. it was a significant struggle to get bert to work for document ranking. there are very few tutorials online for how to achieve this and i spent a significant amount of time trying to get it to work. i ultimately was able to find a tutorial provided by peter jansen from the university of arizona (link in resources). this tutorial gave an example of using the tensorflow_ranking module with bert to achieve document ranking. unfortunately, the tutorial relied on docker to serve a fine-tuned model. i had to do a significant amount of researching about how to get docker to work with a tensorflow model on windows. in order to get it to work, i had to upgrade my windows 10 os to the development version so that it would support the latest windows subsytem for linux (wsl). i needed the latest wsl because that was what nvidia required for their latest cuda drivers for gpus. i needed the latest cuda drivers because that was the only way to get docker to run on my gpu using wsl. i also had to install bazel for windows because the training script was meant to be compiled to run. this lengthy setup process is obviously unsuitable for the rapid development that i needed and because it is not realistic for reviewers to reproduce this setup on their own machines. docker is also not supported in google colab so i needed to arrive at a repeatable and easily setup solution for the graders. i was able to remove the need for docker and the need to serve the model at all by exploring the documentation for tensorflow. this exploration give me insight into how to directly load the model and use it to predict document scores. i implemented this methodology into the scripts and was thus able to create a version that can be easily ran within google colab for easy review. once i had an effective way of running the model, i was able to experiment with various ways to utilized it. i attempted to run three variations of the pre-trained bert model, all provided by google research, bert-mini, bert-small, and bert-base. the bert-base model was too large to effectively train without utilizing tpus. i choose to do my testing with the bert-mini model because it allowed me the most flexibility with my training parameters. some key parameters used are list size and batch size. the size of the model along with those two parameters determine what hardware is required to run the model. if you try to run on inadequate hardware than you will easily run out of memory and be unable to train the model. i attempted a number of variations in ways to score or setup the data. ultimately, i was not able to beat either baseline when using bert but i was able to improve upon my initial results with bm25+. i have detailed some of the variations that i tried below. varied the list size varied the batch size updated vocabulary to include most common coronavirus variants attempted to run with query, question, or narrative attempted to vary the max token sequence size 256, 512, 1024 relevance = score of first doc segment relevance = max score of all doc segments relevance = mean score of all doc segments ignore body text and only use title+abstract+intro varied the number of training steps used both ncdg approximated loss and softmax loss re-rank top 1000, 2000, 5000, and 10000 results of bm25+ scibert *difficulty running this model limited options this model was initially very promising but the issues with getting it to run ultimately made it insufficient for what i needed. this model was create by iz beltagy et al. for scientific research. this model is essentially just a bert-base model that was pretrained on a scientific corpus instead of the generic one. the vocabulary consists of more scientific terms as a result and should theoretically be able to perform better at ranking the scientific documents in the cord-19 corpus. i updated a few of the unused vocabulary items to the command variants of coronavirus and included the drug remdesivir as well. unfortunately, due to the size of the model i was very limited in the list size and batch size options that i could try. i firmly believe that with a larger list size i would have been able to adequately finetune this model and it would have performed better than the bert model. my inability to get the model to run on the tpus available through google colab prevented me from realizing this goal. tensorflow ranking custom model this model was created by basing it off of the example in the tensorflow ranking repository. i left the structure of the context features and the example features the same. the context features contain the query tokens and the example features contain the document tokens and when training, the relevance judgement of the file. i attempted to change the script to use the argparse module instead of the flags from the absl module but when that was attempted the script stopped producing the results of the training data to stdout. i determine that there are likely scripts deeper within the tensorflow ranking module that are using these flags to determine various facets of the training process, so i restore the flags. the model consists of 3 hidden layers at a size of 64, 32, and 16 respectively. during testing the dropout rate of the model was adjust to 0.65 from the default of 0.80. this adjustment produced better results but further drops in this dropout rate risked overfitting the model to the training data. the batch size was set to 1 and the list size maximized so that it would train on more docs for a single query at once. based on empirical results that i observed during experimentation, this produced better results than increasing batch size and lowering the list size. the maximum limit for the list_size was 100 depending on the hardware available in colab and if it exceeded that value then it would run out of memory when training. one other significant variable was the max sequence length to use for each example. i tested with both 512 and 1024. the results did not appear to differ significantly between the two but this variable is important because it defines how much of the document can be captured per example. for this model i only used the title, abstract, and introduction because previous experimentation on other models and rankers showed that the body text was not helpful. ultimately the results produced with this method were worse the results obtained from the bert models. assumptions if you are running this locally then you are running this code on windows 10 machine that has ample ram and a cuda capable gpu. every script can run on linux but i have not generated scripts within this repo to accommodate that. all file paths are relative to the base directory of the repository installation instructions what to install if running locally acquire the datasets: files should be downloaded and unzipped here: .\competition\datasets the test files can be obtained from https://drive.google.com/file/d/1fcw8fmcneow5yydgapkpigm-r2x6ofkm/view?usp=sharing the train files can be obtained from https://drive.google.com/file/d/1e_y-mknvooyoczuzza8jj3exihytfkto/view?usp=sharing python instructions: https://docs.conda.io/projects/conda/en/latest/user-guide/install/ latest nvidia drivers (required to run bert or tensorflow ranking on gpu) instructions: https://docs.nvidia.com/cuda/wsl-user-guide/index.html instructions require installation of other software and packages you must follow all of them bert model (required to run bert) due to the size of the models, they are not directly included in the repository google bert models (recommended): google offers a variety of different sizes for the models to run. i ran using a bert mini but could possibly use a bert small as well. anything larger likely requires a tpu through google colab to run. https://github.com/google-research/bert scibert model (not recommended, requires tpu): https://github.com/allenai/scibert/ what python packages to install to run the full capability of all scripts defined in this project it is required that you setup two environments. all but one script can run in the main environment but the bert checkpoint convertor relies on the dev version of a module that conflicts with requirements of the other modules: main python environment: this is the main environment and should be used when running most of the scripts. you can install the latest stable versions of these modules to run the project. python version: 3.7 pip packages: tensorflow_ranking metapy pytoml bert conversion environment: this is required because there are conflicts in the dependencies of the modules required to convert a model's checkpoints and the modules used to run it. python version: 3.7 pip packages: tf-models-nightly how to run **warning: running some of these scripts will require a large amount of ram if you use the full dataset** * your python environment should be activated before running any scripts prepare data (required if local) generate the json file that contains the information for each dataset. this is required in order to run any of the different methodologies. file path: .\competition\create_bert_data.bat (method 1) run bm25+ or another ranker (reproduces best results) option 1 (google colab) run each cell individually from top to bottom to fully. if you view the file within github there is a link at the top of the file to open in google colab. this is the only google colab file that does not require a google colab pro account. the free account should be capable of running this notebook. file path: .\colab_cranfield_metapy.ipynb option 2 (run locally) generate the cranfield datasets that will be required to run the ranker file path: .\competition\cranfield_metapy\cm_create_data.bat run the ranker of your choice (default arguments already in the file) file path: .\competition\cranfield_metapy\cm_rank_docs.bat (method 2) run tensorflow ranking option 1 (google colab) run each cell individually from top to bottom to fully. training data for a fine-tuned model is provided so there is not need to run training but the capability is provided. if you view the file within github there is a link at the top of the file to open in google colab. t this file will likely require a google colab pro account for the script to work. if not using a colab pro account it will run out of memory. file path: .\colab_tfr.ipynb option 2 (run locally) convert the train data into two tensorflow example list with context (elwc) files file path: .\competition\tfr_custom\tfr_create_train_elwc.bat train the model on the elwc files file path: .\competition\tfr_custom\tfr_train_model.bat re-rank the output of a previous run (requires a file in the format of a predictions file, no limit on docs per query but will truncate output to 1000 file path: .\competition\tfr_custom\tfr_predict.bat (method 3) run a bert model option 1 (google colab) run each cell individually from top to bottom to fully. training data for a fine-tuned model is provided so there is not need to run training but the capability is provided. if you view the file within github there is a link at the top of the file to open in google colab. this file will likely require a google colab pro account for the script to work. if not using a colab pro account it will run out of memory. file path: .\colab_bert.ipynb option 2 (run locally) convert the train data into two tensorflow example list with context (elwc) files file path: .\competition\bert\bert_create_train_elwc.bat train the model on the elwc files file path: .\competition\bert\bert_train_model.bat re-rank the output of a previous run (requires a file in the format of a predictions file, no limit on docs per query but will truncate output to 1000 file path: .\competition\bert\bert_predict.bat script api documentation **unless otherwise specified paths are relative to the root of the repository general file: ./competition/check_covid_variants.py purpose: check for coronavirus variants in the corpus source: developed by project team api: variant_file: the file that the coronavirus variants will be output to. file can already exist. existing variants will be loaded. known_variants: known variants of the coronavirus that exist in the corpus and will be used to determine other variants doc_keys: the keys to use when search the document dictionary for variants run_type: the dataset that will be searched for variants input_dir: the directory that contains the json representation of the datasets to be processed detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_bert_data.py in order to run. it loads the json for one or both datasets and then processes the text to find variants of some predefined words in the corpus and queries. the text is processed using python multiprocessing module in order to speed up execution of the script. file: ./competition/checkpoint_converter.py purpose: converter bert checkpoint files from tensorflow v1 to v2+ source: tensorflow model garden repository api: bert_config_file: bert configuration file to define core bert layers. checkpoint_to_convert: initial checkpoint from a pretrained bert model core (that is, only the bertmodel, with no task heads.) converted_checkpoint_path: name for the created object-based v2 checkpoint. checkpoint_model_name: the name of the model when saving the checkpoint, i.e., the checkpoint will be saved using: tf.train.checkpoint(flags.checkpoint_model_name=model). converted_model: whether to convert the checkpoint to a `bertencoder` model or a `bertpretrainerv2` model (with mlm but without classification heads). detailed description: this script was not written by me but was lightly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script is meant to convert a bert module that you downloaded into a version that is capable of being ran using tensorflow version 2.0+. file: ./competition/create_bert_data.py purpose: combine and compile the information from the dataset into and easily loadable json for use by other scripts source: developed by project team api: vocab_file: the file containing the vocabulary to be used when tokenizing a text variant_file: a file containing variants of the word coronavirus or its equivalents variant_default: the value that will be used to replace all variants in the corpus run_type: the dataset that will be searched for variants tokenize: if use, this will store a tokenized representation of the script in the output json. must be used with `vocab_file` input_dir: the directory that contains all of the source files for the dataset output_dir: the directory where the json representations of the documents will be stored detailed description: this is a python script that was tested in python 3.7. the inputs to the script will determine the exact behavior at run time but lets discuss the more complete case of the training dataset. when the training dataset is specified it will start by loading the queries from there original xml format into a python dictionary. if the script is ran with the tokenize option then each of the three variants of the query (query, question, and narrative) will be tokenized according to the vocabulary defined in the specified vocab file. this json is then dumped into a target directory. for the training dataset it will also load the query relevance judgements. a list of all of the documents and their associated uid, title, abstract, publication date, and list of files containing the text representation is pulled from the metadata.csv file. the list of documents to further process is pruned done to the same as the list of relevance judgements. for each document to process the script iterates through the list of files that contains the text representation until it finds a suitable candidate or exhausts all options. the text from the representation file is loaded in the document dictionary object. if the tokenize option is used, the documents will then be tokenized through the use of a multi-processed pool. the resulting output is then written to the disk. metapy (bm25, ...) file: ./competition/cranfield_metapy/create_cranfield.py purpose: use the json representation of the dataset to create a cranfield dataset for use with metapy source: developed by project team api: variant_file: a file containing variants of the word coronavirus or its equivalents variant_default: the value that will be used to replace all variants in the corpus run_type: the dataset that will be searched for variants query_keys: the keys that will be used when creating the cranfield query file. if multiple keys are specified, text will be combined. doc_keys: the keys that will be used when creating the cranfield document files. multiple keys can be specified and multiple keys can be combined into a single document. if creating separate datasets, use a ';' to separate keys. if combining keys for a dataset use a ':' to separate keys: cranfield_dir: the directory to use as a base for generating the cranfield data. input_dir: the directory where the json representations of the documents are stored detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_bert_data.py in order to run. this uses the loaded json representation of the dataset to produce a use specified cranfield dataset for use with metapy. each cranfield dataset can be uniquely defined by the user to consist of a one-to-one relationship with keys in the document dictionary or it can consist of multiple keys combined. this allows for flexibility in how the expansive each iteration of ranking testing is. file: ./competition/cranfield_metapy/search_eval.py purpose: rank the documents in the corpus and create the predictions file source: original version from mp 2.2 and heavily modified to fit use case api: config_template: the template file that will be used for creating the configs for each run of the ranker run_type: the dataset that will be searched for variants dat_keys: the keys to use that indicate the name of the cranfield dataset(s). this corresponds to the first key used for every section of 'doc_keys' parameter and the 'create_cranfield.py' script. doc_weights: the weights to use when combining the rankings of multiple datasets. ranker: the ranker to use for ranking the documents. valid rankers can be found in the script. params: the value(s) for the ranker parameters. multiple values should be separated by `;`. cranfield_dir: the directory that is the base for the cranfield dataset(s) predict_dir: the directory to contain the predictions file. remove_idx: delete an existing inverted index and create a new one. if no index exists it will not fail detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_cranfield.py in order to run. this script allows the user to specify what ranker to run from a predefined list of rankers. the user can also run rankings over multiple datasets and specify the weight that each ranking will contribute to the final prediction rankings. file: ./competition/cranfield_metapy/search_eval_pool.py purpose: used to find the optimal parameters for ranking algorithms. not for production use. source: original version from mp 2.2 and heavily modified to fit use case api: n/a detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_cranfield.py in order to run. this script allows the user to attempt to optimize the parameters for a predefined list of rankers. the optimization takes place using a multi-processed pool so that it can run numerous iterations over a predefined range of values. each iteration of the optimization loop is evaulated based on normalized cumulative gain at 20 documents. tensorflow ranking file: ./competition/tfr_custom/tfr_convert_json_to_elwc.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to convert json data to an elwc formatted tfrecord file for use with model training api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_train_file: the tfrecord file to be used for training output_eval_file: the tfrecord file to be used for evaluation list_size: the maximum number of documents to score per query do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries, documents, and relevance judgments for the train dataset and converts them to an example list with context files for use in training the model. the maximum number of documents associated with each query is defined by the list size parameter. if the number of documents for a query exceeds this parameter value then the document list is chunked into multiple elwc representations before being output to the files. the elwc objects are formatted for the model's specific requirements. each query and document is limited to a maxim number of tokens as defined by sequence_length and if a document or query is longer than this value then it is truncated. file: ./competition/tfr_custom/tfr_train.py source: lightly version of file located here https://github.com/tensorflow/ranking/blob/master/tensorflow_ranking/examples/tf_ranking_tfrecord.py purpose: to train a tensorflow model on a dataset with predefined relevance judgements. api: data_format: data format defined in data.py. train_path: input file path used for training. eval_path: input file path used for eval. vocab_path: vocabulary path for query and document tokens. model_dir: output directory for models. batch_size: the batch size for train. num_train_steps: number of steps for train. learning_rate: learning rate for optimizer. dropout_rate: the dropout rate before output layer. hidden_layer_dims: sizes for hidden layers. list_size: list size used for training. use none for dynamic list size. group_size: group size used in score function. loss: the rankinglosskey for the loss function. weights_feature_name: the name of the feature where unbiased learning-to-rank weights are stored. listwise_inference: if true, exports accept `data_format` while serving. use_document_interactions: if true, uses cross-document interactions to generate scores. embedding_dim: max size of any query or document detailed description: this script was not originally written by me but has been lightly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of tfr_convert_json_to_elwc.py in order to run. this script loads in the elwc files generated by tfr_convert_json_to_elwc.py and trains the model on the data provided in the elwc files. the training will run for the ""num_train_steps"" defined by the user. the outputs of this script are stored in ""model_dir"" and you can load the output model for use in prediction of a documents relevance. file: ./competition/tfr_custom/tfr_predict.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to score the documents in the test dataset against the queries in the test dataset and output a predictions file api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_file: the file that will contain the scores model_path: the path to the saved model for use in predictions docs_at_once: the maximum number of documents to score at once rerank_file: the input file consisting of previous rankings that will be reranked with the tensorflow model do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries and documents for the specified dataset. it also loads in the relevance judgements of a previous ranking and a trained model. the list of documents to rank is limited to only the files specified in the previous ranking. each document query combination is converted into an example list with context(elwc) object and then it is passed to the loaded model. all of the documents ranked for each query is combined into a singular list that is sorted by the score and only the top 1000 documents are output to a predictions file. the predictions file output is the same as the file of the relevance judgements. bert file: ./competition/bert/bert_predict.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to convert json data to an elwc formatted tfrecord file for use with model training api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_train_file: the tfrecord file to be used for training output_eval_file: the tfrecord file to be used for evaluation list_size: the maximum number of documents to score per query do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries, documents, and relevance judgments for the train dataset and converts them to an example list with context files for use in training the model. the maximum number of documents associated with each query is defined by the list size parameter. if the number of documents for a query exceeds this parameter value then the document list is chunked into multiple elwc representations before being output to the files. the elwc objects are formatted for the model's specific requirements. each query and document is limited to a maxim number of tokens as defined by sequence_length and if a document or query is longer than this value then it is truncated. file: ./competition/bert/bert_train.py source: lightly version of file located here https://github.com/tensorflow/ranking/blob/master/tensorflow_ranking/extension/examples/tfrbert_example.py purpose: to train a tensorflow model on a dataset with predefined relevance judgements. api: local_training: if true, run training locally. train_input_pattern: input file path pattern used for training. eval_input_pattern: input file path pattern used for eval. learning_rate: learning rate for the optimizer. train_batch_size: number of input records used per batch for training. eval_batch_size: number of input records used per batch for eval. checkpoint_secs: saves a model checkpoint every checkpoint_secs seconds. num_checkpoints: saves at most num_checkpoints checkpoints in workspace. num_train_steps: number of training iterations. default means continuous training. num_eval_steps: number of evaluation iterations. loss: the rankinglosskey deciding the loss function used in training. list_size: list size used for training. convert_labels_to_binary: if true, relevance labels are set to either 0 or 1. model_dir: output directory for models. dropout_rate: the dropout rate. bert_config_file: the config json file corresponding to the pre-trained bert model. this specifies the model architecture. please download the model from the link: https://github.com/google-research/bert bert_init_ckpt: initial checkpoint from a pre-trained bert model. please download from the link: https://github.com/google-research/bert bert_max_seq_length: the maximum input sequence length (#words) after wordpiece tokenization. sequences longer than this will be truncated, and sequences shorter than this will be padded. bert_num_warmup_steps: this is used for adjust learning rate. if global_step < num_warmup_steps, the learning rate will be `global_step/num_warmup_steps * init_lr`. this is implemented in the bert/optimization.py file. detailed description: this script was not originally written by me but has been lightly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of bert_convert_json_to_elwc.py in order to run. this script loads in the elwc files generated by bert_convert_json_to_elwc.py and trains the model on the data provided in the elwc files. the training will run for the ""num_train_steps"" defined by the user. the outputs of this script are stored in ""model_dir"" and you can load the output model for use in prediction of a documents relevance. file: ./competition/bert/bert_convert_json_to_elwc.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to score the documents in the test dataset against the queries in the test dataset and output a predictions file api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_file: the file that will contain the scores model_path: the path to the saved model for use in predictions docs_at_once: the maximum number of documents to score at once rerank_file: the input file consisting of previous rankings that will be reranked with the tensorflow model do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries and documents for the specified dataset. it also loads in the relevance judgements of a previous ranking and a trained model. the list of documents to rank is limited to only the files specified in the previous ranking. each document query combination is converted into an example list with context(elwc) object and then it is passed to the loaded model. all of the documents ranked for each query is combined into a singular list that is sorted by the score and only the top 1000 documents are output to a predictions file. the predictions file output is the same as the file of the relevance judgements. resources citations rama kumar pasumarthi and sebastian bruch and xuanhui wang and cheng li and michael bendersky and marc najork and jan pfeifer and nadav golbandi and rohan anil and stephan wolf. 2019. tf-ranking: scalable tensorflow library for learning-to-rank. proceedings of the 25th acm sigkdd international conference on knowledge discovery and data mining, pages 2970-2978 turc, iulia and chang, ming-wei and lee, kenton and toutanova, kristina. 2019. well-read students learn better: on the importance of pre-training compact models. arxiv preprint arxiv:1908.08962v2 g. v. cormack, c. l. a. clarke, and stefan buttcher. 2009. reciprocal rank fusion outperforms condorcet and individual rank learning methods andrew trotman, antti puurula, blake burgess. 2014. improvements to bm25 and language models examined zhuyun dai and jamie callan. 2019. deeper text understanding for ir with contextual neural language modeling. in proceedings of the 42nd international acm sigir conference on research and development in information retrieval (sigir '19), july 21-25, 2019, paris, france. acm, new york, ny, usa, 4 pages. https://doi.org/10.1145/3331184.3331303 iz beltagy, kyle lo, arman cohan. 2019. scibert: a pretrained language model for scientific text. proceedings of the 2019 conference on empirical methods in natural language processing and the 9th international joint conference on natural language processing (emnlp-ijcnlp), pages 3615-3620 installation guidance tensorflow gpu requirements: https://www.tensorflow.org/install/gpu cuda: https://developer.nvidia.com/cuda-10.1-download-archive-update2?target_os=linux&target_arch=x86_64&target_distro=ubuntu&target_version=1804&target_type=deblocal cudnn: https://developer.nvidia.com/rdp/cudnn-archive install .deb: https://www.quora.com/is-it-possible-to-install-a-deb-package-in-windows#:~:text=potentially%20yes%2c%20as%20long%20as,deb stopwords https://www.ranks.nl/stopwords https://countwordsfree.com/stopwords bm25 https://github.com/vespa-engine/cord-19/blob/master/cord-19-queries.md https://docs.vespa.ai/documentation/reference/bm25.html tensorflow ranking http://cognitiveai.org/2020/09/08/using-tensorflow-ranking-bert-tfr-bert-an-end-to-end-example/ https://github.com/cognitiveailab/ranking https://github.com/tensorflow/ranking https://colab.research.google.com/github/tensorflow/ranking/blob/master/tensorflow_ranking/examples/handling_sparse_features.ipynb tensorflow ranking (how to serve a model) https://www.tensorflow.org/tfx/serving/serving_basic https://www.tensorflow.org/tfx/tutorials/serving/rest_simple#serve_your_model_with_tensorflow_serving https://github.com/tensorflow/docs/blob/master/site/en/r1/guide/saved_model.md#cli-to-inspect-and-execute-savedmodel https://github.com/cognitiveailab/ranking/blob/master/tensorflow_ranking/extension/examples/tfrbert_client_predict_from_json.py tensorflow ranking (how to predict) https://github.com/tensorflow/ranking/issues/48 https://stackoverflow.com/questions/59528975/tf-estimator-predict-slow-with-tensorflow-ranking-module bert checkpoint conversion https://github.com/tensorflow/models/tree/master/official/nlp/bert bert https://github.com/google-research/bert https://ai.googleblog.com/2018/12/tf-ranking-scalable-tensorflow-library.html https://arxiv.org/pdf/1812.00073.pdf scibert https://www.aclweb.org/anthology/d19-1371/ https://huggingface.co/gsarti/scibert-nli https://github.com/allenai/scibert/ docker https://superuser.com/questions/1382472/how-do-i-find-and-enable-the-virtualization-setting-on-windows-10 https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled https://docs.docker.com/docker-for-windows/install/ ir competition project documentation cody webster contents overview ....................................................................................................................................................... 3 project demonstration ................................................................................................................................. 3 project results .............................................................................................................................................. 3 dirichletprior ............................................................................................................................................ 3 jelinekmercer ........................................................................................................................................... 4 okapibm25 ............................................................................................................................................... 4 bm25+ ....................................................................................................................................................... 4 bert .......................................................................................................................................................... 5 scibert *difficulty running this model limited options .......................................................................... 6 tensorflow ranking custom model ......................................................................................................... 7 assumptions ................................................................................................................................................. 7 installation instructions ............................................................................................................................... 7 what to install if running locally .............................................................................................................. 7 what python packages to install ............................................................................................................. 8 how to run ................................................................................................................................................... 8 prepare data (required if local) .............................................................................................................. 8 (method 1) run bm25+ or another ranker (reproduces best results) ................................................... 9 option 1 (google colab)........................................................................................................................ 9 option 2 (run locally) ............................................................................................................................ 9 (method 2) run tensorflow ranking ....................................................................................................... 9 option 1 (google colab)........................................................................................................................ 9 option 2 (run locally) ............................................................................................................................ 9 (method 3) run a bert model ................................................................................................................. 9 option 1 (google colab)........................................................................................................................ 9 option 2 (run locally) .......................................................................................................................... 10 script api documentation .......................................................................................................................... 10 general ................................................................................................................................................... 10 metapy (bm25, ...) .................................................................................................................................. 12 tensorflow ranking ................................................................................................................................ 13 bert ........................................................................................................................................................ 16 resources .................................................................................................................................................... 20 citations .................................................................................................................................................. 20 installation guidance ............................................................................................................................. 20 stopwords ............................................................................................................................................... 20 bm25 ....................................................................................................................................................... 21 tensorflow ranking ................................................................................................................................ 21 tensorflow ranking (how to serve a model) ........................................................................................ 21 tensorflow ranking (how to predict) .................................................................................................... 21 bert checkpoint conversion ................................................................................................................. 21 bert ........................................................................................................................................................ 21 scibert.................................................................................................................................................... 21 docker ..................................................................................................................................................... 21 overview the purpose of this project is to participate in the ir competition. for this project i developed and extensively tested three main ways to rank documents. the first is ranking documents using a ranking function either packaged with metapy or through a custom definition implemented through metapy. initially, the best results that i achieved with this method were through a custom implementation of bm25+. through a longshot attempt on the last day, i actually beat all of my other rankings using metapy's bm25 implementation. the second is ranking documents using a custom model that is trained using the python library tensorflow_ranking. the third option is to use a pretrained model and it's associated vocabulary and then finetune it using tensorflow_ranking. overall the best results that i have achieved have come from running the okapibm25 algorithm implemented with metapy and using parameters that were produced from a brute force optimization. project demonstration i have uploaded ""cs410_project_demo.mp4"" into the git repository. i have also uploaded the file to illinois media: https://mediaspace.illinois.edu/media/t/1_07py0q5f project results unfortunately, despite my best attempt i was not able to beat the initial baseline performance score as defined by the class professor or tas. nobody else was able to beat the initial baseline either so it is likely that baseline was an unreasonable standard for us to achieve with our limited knowledge and experience. in this section i will briefly detail some of the variations and experiments that i attempted. it is not possible for me capture every variation that i tried but i will cover as best as i can. i do not have a consistent record of the score for every attempt so i will not be including those scores. on the last day of the competition, the class administrators lowered the score of the baseline. i decided to give it another shot because i really had nothing to lose. i was able to beat the new baseline using the standard bm25 algorithm implemented via metapy. the only difference between what i did on the last day and what i had done on previous days was that i allowed one of the parameters to vary more than i initially had. i will detail that more within the bm25 section. dirichletprior this algorithm was implemented using metapy. the value of the parameter was optimized on the train dataset using a brute forcing approach of testing every reasonable parameter and selecting the parameter that achieved the best ncdg@20 score on the training dataset. none of the attempts for this algorithm achieved results that rivaled the bm25 algorithm so it was quickly determined to be a non- ideal approach. initial attempts with this algorithm were made using the body text only. later attempts also used the title and abstract/intro. further experimentation with the kldivergenceprf implementation in metapy and variations on its parameters was also performed but performance lagged behind other approaches. jelinekmercer this algorithm was implemented using metapy. the value of the parameter was optimized on the train dataset using a brute forcing approach of testing every reasonable parameter and selecting the parameter that achieved the best ncdg@20 score on the training dataset. none of the attempts for this algorithm achieved results that rivaled the bm25 algorithm so it was quickly determined to be a non- ideal approach. this algorithm was only ever attempted with the body text and results were deemed not good enough to justify further experimentation. okapibm25 this algorithm was implemented using metapy. the value of the three parameters was optimized on the training dataset using a brute force approach of testing every reasonable combination of parameters and selecting the set that achieved the greatest. due to the number of variations that i tried with this algorithm, i had to optimize the parameters a number of times and i developed a multi- processing script that was capable of doing this at a much quicker pace. initially i only attempted to run the algorithm on the body text for each paper but the performance for that was poor. with the body text i attempted to optimize a different ndcg values, 10, 20, and 50 respectively. none of them produced significant improvements in the overall performance. next, i attempted to use the title, abstract, and introduction along with the body text and that produce marginal improvements in the score. another boost came once i removed the body text from the dataset and only trained on the title, abstract, and introduction. i also attempted to use metapy's implementation of rocchio feedback. i optimized the parameters for rocchio in a similar manner to the normal okapibm25 algorithm. ultimately the rocchio feedback produced worse results then the standalone ranker so i excluded it from further test with this algorithm. the performance was initially still inadequate so i pursued further methods. one the last day, after i noticed that they had lowered the baseline, i attempted some new variations of this algorithm. i did not run the other algorithms because they all take longer to run and i did not have time to implement anything new. the new variation that i tried on the last day was to let the k3 parameter vary. i had previously not done this due to the faulty assumption that it would only hurt my results because that was the experience that i had during mp2.2. almost immediately while running the pooled optimization, i was able to see that the performance was superior my previous results. i selected a number of the different parameter combinations to try from the generated set. on the third try i was able to beat the baseline using k1=2.0, b=0.75, and k3=4450. i am immensely frustrated that i have wasted so much effort trying to find other ways to rank documents and the answer was so simple but i am happy to have beaten the baseline. bm25+ this algorithm was implemented with metapy's api using the definition of bm25+ from (trotman et al, 2014). since it was implemented in python and c++ like the native metapy implementations, it ran slower. i optimized it in the same way that i optimized the okapibm25 algorithm. this implementation ultimately outperformed the native okapibm25 algorithm, but it did not beat the baseline. better results were obtained when using this in conjunction with the bert implementation. i tried numerous variations on this algorithm in an attempt to increase my score on the test dataset. similar to the other algorithms, i initially tried to only use the body text for my analysis. this did not produce the results that i desired. i have briefly listed some of the other variations that i tried: * attempted with body text only * attempted with title, abstract, intro, and body text * attempted with title, abstract, and intro * attempted with title only * attempted with rocchio pseudo feedback, varying the parameters to rocchio * attempted to remove all urls in the corpus * attempted to replace all variants of the words coronavirus, covid-19, 2019-ncov, and sars-ncov-2 with coronavirus * attempted to run with query text, question text, or narrative text * attempted to run with all variations of query combined * attempted different variations of metapy analyzer chains * attempted to remove docs with duplicate s2_id but different uids, docs were functionally duplicates * attempted to use a date cutoff for document * attempted to pre-tokenize the queries and documents using bert's tokenizer * attempted to use multiple datasets with various weightings and combine into one result * used different variations of stopwords that were gathered online (listed in resources) ultimately, i was not able to beat the baseline using this custom algorithm, so i continued my exploration of other possibilities. bert i had completed my technical review over the bert model and had learned through that about its superior performance when classifying documents. i chose this as the algorithm to attempt to rank with. it was a significant struggle to get bert to work for document ranking. there are very few tutorials online for how to achieve this and i spent a significant amount of time trying to get it to work. i ultimately was able to find a tutorial provided by peter jansen from the university of arizona (link in resources). this tutorial gave an example of using the tensorflow_ranking module with bert to achieve document ranking. unfortunately, the tutorial relied on docker to serve a fine-tuned model. i had to do a significant amount of researching about how to get docker to work with a tensorflow model on windows. in order to get it to work, i had to upgrade my windows 10 os to the development version so that it would support the latest windows subsytem for linux (wsl). i needed the latest wsl because that was what nvidia required for their latest cuda drivers for gpus. i needed the latest cuda drivers because that was the only way to get docker to run on my gpu using wsl. i also had to install bazel for windows because the training script was meant to be compiled to run. this lengthy setup process is obviously unsuitable for the rapid development that i needed and because it is not realistic for reviewers to reproduce this setup on their own machines. docker is also not supported in google colab so i needed to arrive at a repeatable and easily setup solution for the graders. i was able to remove the need for docker and the need to serve the model at all by exploring the documentation for tensorflow. this exploration give me insight into how to directly load the model and use it to predict document scores. i implemented this methodology into the scripts and was thus able to create a version that can be easily ran within google colab for easy review. once i had an effective way of running the model, i was able to experiment with various ways to utilized it. i attempted to run three variations of the pre-trained bert model, all provided by google research, bert-mini, bert-small, and bert-base. the bert-base model was too large to effectively train without utilizing tpus. i choose to do my testing with the bert-mini model because it allowed me the most flexibility with my training parameters. some key parameters used are list size and batch size. the size of the model along with those two parameters determine what hardware is required to run the model. if you try to run on inadequate hardware than you will easily run out of memory and be unable to train the model. i attempted a number of variations in ways to score or setup the data. ultimately, i was not able to beat either baseline when using bert but i was able to improve upon my initial results with bm25+. i have detailed some of the variations that i tried below. * varied the list size * varied the batch size * updated vocabulary to include most common coronavirus variants * attempted to run with query, question, or narrative * attempted to vary the max token sequence size 256, 512, 1024 * relevance = score of first doc segment * relevance = max score of all doc segments * relevance = mean score of all doc segments * ignore body text and only use title+abstract+intro * varied the number of training steps * used both ncdg approximated loss and softmax loss * re-rank top 1000, 2000, 5000, and 10000 results of bm25+ scibert *difficulty running this model limited options this model was initially very promising but the issues with getting it to run ultimately made it insufficient for what i needed. this model was create by iz beltagy et al. for scientific research. this model is essentially just a bert-base model that was pretrained on a scientific corpus instead of the generic one. the vocabulary consists of more scientific terms as a result and should theoretically be able to perform better at ranking the scientific documents in the cord-19 corpus. i updated a few of the unused vocabulary items to the command variants of coronavirus and included the drug remdesivir as well. unfortunately, due to the size of the model i was very limited in the list size and batch size options that i could try. i firmly believe that with a larger list size i would have been able to adequately finetune this model and it would have performed better than the bert model. my inability to get the model to run on the tpus available through google colab prevented me from realizing this goal. tensorflow ranking custom model this model was created by basing it off of the example in the tensorflow ranking repository. i left the structure of the context features and the example features the same. the context features contain the query tokens and the example features contain the document tokens and when training, the relevance judgement of the file. i attempted to change the script to use the argparse module instead of the flags from the absl module but when that was attempted the script stopped producing the results of the training data to stdout. i determine that there are likely scripts deeper within the tensorflow ranking module that are using these flags to determine various facets of the training process, so i restore the flags. the model consists of 3 hidden layers at a size of 64, 32, and 16 respectively. during testing the dropout rate of the model was adjust to 0.65 from the default of 0.80. this adjustment produced better results but further drops in this dropout rate risked overfitting the model to the training data. the batch size was set to 1 and the list size maximized so that it would train on more docs for a single query at once. based on empirical results that i observed during experimentation, this produced better results than increasing batch size and lowering the list size. the maximum limit for the list_size was 100 depending on the hardware available in colab and if it exceeded that value then it would run out of memory when training. one other significant variable was the max sequence length to use for each example. i tested with both 512 and 1024. the results did not appear to differ significantly between the two but this variable is important because it defines how much of the document can be captured per example. for this model i only used the title, abstract, and introduction because previous experimentation on other models and rankers showed that the body text was not helpful. ultimately the results produced with this method were worse the results obtained from the bert models. assumptions * if you are running this locally then you are running this code on windows 10 machine that has ample ram and a cuda capable gpu. every script can run on linux but i have not generated scripts within this repo to accommodate that. * all file paths are relative to the base directory of the repository installation instructions what to install if running locally acquire the datasets: files should be downloaded and unzipped here: .\competition\datasets the test files can be obtained from https://drive.google.com/file/d/1fcw8fmcneow5yydgapkpigm-r2x6ofkm/view?usp=sharing the train files can be obtained from https://drive.google.com/file/d/1e_y- mknvooyoczuzza8jj3exihytfkto/view?usp=sharing python instructions: https://docs.conda.io/projects/conda/en/latest/user-guide/install/ latest nvidia drivers (required to run bert or tensorflow ranking on gpu) instructions: https://docs.nvidia.com/cuda/wsl-user-guide/index.html instructions require installation of other software and packages you must follow all of them bert model (required to run bert) due to the size of the models, they are not directly included in the repository google bert models (recommended): google offers a variety of different sizes for the models to run. i ran using a bert mini but could possibly use a bert small as well. anything larger likely requires a tpu through google colab to run. https://github.com/google-research/bert scibert model (not recommended, requires tpu): https://github.com/allenai/scibert/ what python packages to install to run the full capability of all scripts defined in this project it is required that you setup two environments. all but one script can run in the main environment but the bert checkpoint convertor relies on the dev version of a module that conflicts with requirements of the other modules: main python environment: this is the main environment and should be used when running most of the scripts. you can install the latest stable versions of these modules to run the project. python version: 3.7 pip packages: tensorflow_ranking metapy pytoml bert conversion environment: this is required because there are conflicts in the dependencies of the modules required to convert a model's checkpoints and the modules used to run it. python version: 3.7 pip packages: tf-models-nightly how to run **warning: running some of these scripts will require a large amount of ram if you use the full dataset** * your python environment should be activated before running any scripts prepare data (required if local) generate the json file that contains the information for each dataset. this is required in order to run any of the different methodologies. file path: .\competition\create_bert_data.bat (method 1) run bm25+ or another ranker (reproduces best results) option 1 (google colab) run each cell individually from top to bottom to fully. if you view the file within github there is a link at the top of the file to open in google colab. this is the only google colab file that does not require a google colab pro account. the free account should be capable of running this notebook. file path: .\colab_cranfield_metapy.ipynb option 2 (run locally) generate the cranfield datasets that will be required to run the ranker file path: .\competition\cranfield_metapy\cm_create_data.bat run the ranker of your choice (default arguments already in the file) file path: .\competition\cranfield_metapy\cm_rank_docs.bat (method 2) run tensorflow ranking option 1 (google colab) run each cell individually from top to bottom to fully. training data for a fine-tuned model is provided so there is not need to run training but the capability is provided. if you view the file within github there is a link at the top of the file to open in google colab. t this file will likely require a google colab pro account for the script to work. if not using a colab pro account it will run out of memory. file path: .\colab_tfr.ipynb option 2 (run locally) convert the train data into two tensorflow example list with context (elwc) files file path: .\competition\tfr_custom\tfr_create_train_elwc.bat train the model on the elwc files file path: .\competition\tfr_custom\tfr_train_model.bat re-rank the output of a previous run (requires a file in the format of a predictions file, no limit on docs per query but will truncate output to 1000 file path: .\competition\tfr_custom\tfr_predict.bat (method 3) run a bert model option 1 (google colab) run each cell individually from top to bottom to fully. training data for a fine-tuned model is provided so there is not need to run training but the capability is provided. if you view the file within github there is a link at the top of the file to open in google colab. this file will likely require a google colab pro account for the script to work. if not using a colab pro account it will run out of memory. file path: .\colab_bert.ipynb option 2 (run locally) convert the train data into two tensorflow example list with context (elwc) files file path: .\competition\bert\bert_create_train_elwc.bat train the model on the elwc files file path: .\competition\bert\bert_train_model.bat re-rank the output of a previous run (requires a file in the format of a predictions file, no limit on docs per query but will truncate output to 1000 file path: .\competition\bert\bert_predict.bat script api documentation **unless otherwise specified paths are relative to the root of the repository general file: ./competition/check_covid_variants.py purpose: check for coronavirus variants in the corpus source: developed by project team api: variant_file: the file that the coronavirus variants will be output to. file can already exist. existing variants will be loaded. known_variants: known variants of the coronavirus that exist in the corpus and will be used to determine other variants doc_keys: the keys to use when search the document dictionary for variants run_type: the dataset that will be searched for variants input_dir: the directory that contains the json representation of the datasets to be processed detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_bert_data.py in order to run. it loads the json for one or both datasets and then processes the text to find variants of some predefined words in the corpus and queries. the text is processed using python multiprocessing module in order to speed up execution of the script. file: ./competition/checkpoint_converter.py purpose: converter bert checkpoint files from tensorflow v1 to v2+ source: tensorflow model garden repository api: bert_config_file: bert configuration file to define core bert layers. checkpoint_to_convert: initial checkpoint from a pretrained bert model core (that is, only the bertmodel, with no task heads.) converted_checkpoint_path: name for the created object-based v2 checkpoint. checkpoint_model_name: the name of the model when saving the checkpoint, i.e., the checkpoint will be saved using: tf.train.checkpoint(flags.checkpoint_model_name=model). converted_model: whether to convert the checkpoint to a `bertencoder` model or a `bertpretrainerv2` model (with mlm but without classification heads). detailed description: this script was not written by me but was lightly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script is meant to convert a bert module that you downloaded into a version that is capable of being ran using tensorflow version 2.0+. file: ./competition/create_bert_data.py purpose: combine and compile the information from the dataset into and easily loadable json for use by other scripts source: developed by project team api: vocab_file: the file containing the vocabulary to be used when tokenizing a text variant_file: a file containing variants of the word coronavirus or its equivalents variant_default: the value that will be used to replace all variants in the corpus run_type: the dataset that will be searched for variants tokenize: if use, this will store a tokenized representation of the script in the output json. must be used with `vocab_file` input_dir: the directory that contains all of the source files for the dataset output_dir: the directory where the json representations of the documents will be stored detailed description: this is a python script that was tested in python 3.7. the inputs to the script will determine the exact behavior at run time but lets discuss the more complete case of the training dataset. when the training dataset is specified it will start by loading the queries from there original xml format into a python dictionary. if the script is ran with the tokenize option then each of the three variants of the query (query, question, and narrative) will be tokenized according to the vocabulary defined in the specified vocab file. this json is then dumped into a target directory. for the training dataset it will also load the query relevance judgements. a list of all of the documents and their associated uid, title, abstract, publication date, and list of files containing the text representation is pulled from the metadata.csv file. the list of documents to further process is pruned done to the same as the list of relevance judgements. for each document to process the script iterates through the list of files that contains the text representation until it finds a suitable candidate or exhausts all options. the text from the representation file is loaded in the document dictionary object. if the tokenize option is used, the documents will then be tokenized through the use of a multi-processed pool. the resulting output is then written to the disk. metapy (bm25, ...) file: ./competition/cranfield_metapy/create_cranfield.py purpose: use the json representation of the dataset to create a cranfield dataset for use with metapy source: developed by project team api: variant_file: a file containing variants of the word coronavirus or its equivalents variant_default: the value that will be used to replace all variants in the corpus run_type: the dataset that will be searched for variants query_keys: the keys that will be used when creating the cranfield query file. if multiple keys are specified, text will be combined. doc_keys: the keys that will be used when creating the cranfield document files. multiple keys can be specified and multiple keys can be combined into a single document. if creating separate datasets, use a ';' to separate keys. if combining keys for a dataset use a ':' to separate keys: cranfield_dir: the directory to use as a base for generating the cranfield data. input_dir: the directory where the json representations of the documents are stored detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_bert_data.py in order to run. this uses the loaded json representation of the dataset to produce a use specified cranfield dataset for use with metapy. each cranfield dataset can be uniquely defined by the user to consist of a one-to-one relationship with keys in the document dictionary or it can consist of multiple keys combined. this allows for flexibility in how the expansive each iteration of ranking testing is. file: ./competition/cranfield_metapy/search_eval.py purpose: rank the documents in the corpus and create the predictions file source: original version from mp 2.2 and heavily modified to fit use case api: config_template: the template file that will be used for creating the configs for each run of the ranker run_type: the dataset that will be searched for variants dat_keys: the keys to use that indicate the name of the cranfield dataset(s). this corresponds to the first key used for every section of 'doc_keys' parameter and the 'create_cranfield.py' script. doc_weights: the weights to use when combining the rankings of multiple datasets. ranker: the ranker to use for ranking the documents. valid rankers can be found in the script. params: the value(s) for the ranker parameters. multiple values should be separated by `;`. cranfield_dir: the directory that is the base for the cranfield dataset(s) predict_dir: the directory to contain the predictions file. remove_idx: delete an existing inverted index and create a new one. if no index exists it will not fail detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_cranfield.py in order to run. this script allows the user to specify what ranker to run from a predefined list of rankers. the user can also run rankings over multiple datasets and specify the weight that each ranking will contribute to the final prediction rankings. file: ./competition/cranfield_metapy/search_eval_pool.py purpose: used to find the optimal parameters for ranking algorithms. not for production use. source: original version from mp 2.2 and heavily modified to fit use case api: n/a detailed description: this is a python script that was implemented in python 3.7. this script relies on the output of create_cranfield.py in order to run. this script allows the user to attempt to optimize the parameters for a predefined list of rankers. the optimization takes place using a multi-processed pool so that it can run numerous iterations over a predefined range of values. each iteration of the optimization loop is evaulated based on normalized cumulative gain at 20 documents. tensorflow ranking file: ./competition/tfr_custom/tfr_convert_json_to_elwc.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to convert json data to an elwc formatted tfrecord file for use with model training api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_train_file: the tfrecord file to be used for training output_eval_file: the tfrecord file to be used for evaluation list_size: the maximum number of documents to score per query do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries, documents, and relevance judgments for the train dataset and converts them to an example list with context files for use in training the model. the maximum number of documents associated with each query is defined by the list size parameter. if the number of documents for a query exceeds this parameter value then the document list is chunked into multiple elwc representations before being output to the files. the elwc objects are formatted for the model's specific requirements. each query and document is limited to a maxim number of tokens as defined by sequence_length and if a document or query is longer than this value then it is truncated. file: ./competition/tfr_custom/tfr_train.py source: lightly version of file located here https://github.com/tensorflow/ranking/blob/master/tensorflow_ranking/examples/tf_ranking_tfrecord .py purpose: to train a tensorflow model on a dataset with predefined relevance judgements. api: data_format: data format defined in data.py. train_path: input file path used for training. eval_path: input file path used for eval. vocab_path: vocabulary path for query and document tokens. model_dir: output directory for models. batch_size: the batch size for train. num_train_steps: number of steps for train. learning_rate: learning rate for optimizer. dropout_rate: the dropout rate before output layer. hidden_layer_dims: sizes for hidden layers. list_size: list size used for training. use none for dynamic list size. group_size: group size used in score function. loss: the rankinglosskey for the loss function. weights_feature_name: the name of the feature where unbiased learning-to-rank weights are stored. listwise_inference: if true, exports accept `data_format` while serving. use_document_interactions: if true, uses cross-document interactions to generate scores. embedding_dim: max size of any query or document detailed description: this script was not originally written by me but has been lightly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of tfr_convert_json_to_elwc.py in order to run. this script loads in the elwc files generated by tfr_convert_json_to_elwc.py and trains the model on the data provided in the elwc files. the training will run for the ""num_train_steps"" defined by the user. the outputs of this script are stored in ""model_dir"" and you can load the output model for use in prediction of a documents relevance. file: ./competition/tfr_custom/tfr_predict.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to score the documents in the test dataset against the queries in the test dataset and output a predictions file api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_file: the file that will contain the scores model_path: the path to the saved model for use in predictions docs_at_once: the maximum number of documents to score at once rerank_file: the input file consisting of previous rankings that will be reranked with the tensorflow model do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries and documents for the specified dataset. it also loads in the relevance judgements of a previous ranking and a trained model. the list of documents to rank is limited to only the files specified in the previous ranking. each document query combination is converted into an example list with context(elwc) object and then it is passed to the loaded model. all of the documents ranked for each query is combined into a singular list that is sorted by the score and only the top 1000 documents are output to a predictions file. the predictions file output is the same as the file of the relevance judgements. bert file: ./competition/bert/bert_predict.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to convert json data to an elwc formatted tfrecord file for use with model training api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_train_file: the tfrecord file to be used for training output_eval_file: the tfrecord file to be used for evaluation list_size: the maximum number of documents to score per query do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries, documents, and relevance judgments for the train dataset and converts them to an example list with context files for use in training the model. the maximum number of documents associated with each query is defined by the list size parameter. if the number of documents for a query exceeds this parameter value then the document list is chunked into multiple elwc representations before being output to the files. the elwc objects are formatted for the model's specific requirements. each query and document is limited to a maxim number of tokens as defined by sequence_length and if a document or query is longer than this value then it is truncated. file: ./competition/bert/bert_train.py source: lightly version of file located here https://github.com/tensorflow/ranking/blob/master/tensorflow_ranking/extension/examples/tfrbert_e xample.py purpose: to train a tensorflow model on a dataset with predefined relevance judgements. api: local_training: if true, run training locally. train_input_pattern: input file path pattern used for training. eval_input_pattern: input file path pattern used for eval. learning_rate: learning rate for the optimizer. train_batch_size: number of input records used per batch for training. eval_batch_size: number of input records used per batch for eval. checkpoint_secs: saves a model checkpoint every checkpoint_secs seconds. num_checkpoints: saves at most num_checkpoints checkpoints in workspace. num_train_steps: number of training iterations. default means continuous training. num_eval_steps: number of evaluation iterations. loss: the rankinglosskey deciding the loss function used in training. list_size: list size used for training. convert_labels_to_binary: if true, relevance labels are set to either 0 or 1. model_dir: output directory for models. dropout_rate: the dropout rate. bert_config_file: the config json file corresponding to the pre-trained bert model. this specifies the model architecture. please download the model from the link: https://github.com/google-research/bert bert_init_ckpt: initial checkpoint from a pre-trained bert model. please download from the link: https://github.com/google-research/bert bert_max_seq_length: the maximum input sequence length (#words) after wordpiece tokenization. sequences longer than this will be truncated, and sequences shorter than this will be padded. bert_num_warmup_steps: this is used for adjust learning rate. if global_step < num_warmup_steps, the learning rate will be `global_step/num_warmup_steps * init_lr`. this is implemented in the bert/optimization.py file. detailed description: this script was not originally written by me but has been lightly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of bert_convert_json_to_elwc.py in order to run. this script loads in the elwc files generated by bert_convert_json_to_elwc.py and trains the model on the data provided in the elwc files. the training will run for the ""num_train_steps"" defined by the user. the outputs of this script are stored in ""model_dir"" and you can load the output model for use in prediction of a documents relevance. file: ./competition/bert/bert_convert_json_to_elwc.py source: modified version of file located here https://github.com/cognitiveailab/ranking purpose: to score the documents in the test dataset against the queries in the test dataset and output a predictions file api: vocab_file: the file containing the vocabulary to be used when tokenizing a text sequence_length: the max length of any individual query or document query_file: the json file that contains all of the queries qrel_files: the file containing the training relevance judgements query_key: the type of query that will be used as context for ranking, i.e. (query, question, narrative) doc_file: the json file that contains all of the documents output_file: the file that will contain the scores model_path: the path to the saved model for use in predictions docs_at_once: the maximum number of documents to score at once rerank_file: the input file consisting of previous rankings that will be reranked with the tensorflow model do_lower_case: ensure all query and document strings are lowercase detailed description: this script was not originally written by me but has been highly modified for the purpose of this project. this is a python script that was tested in python 3.7. this script relies on the output of create_bert_data.py in order to run. this script loads in the queries and documents for the specified dataset. it also loads in the relevance judgements of a previous ranking and a trained model. the list of documents to rank is limited to only the files specified in the previous ranking. each document query combination is converted into an example list with context(elwc) object and then it is passed to the loaded model. all of the documents ranked for each query is combined into a singular list that is sorted by the score and only the top 1000 documents are output to a predictions file. the predictions file output is the same as the file of the relevance judgements. resources citations rama kumar pasumarthi and sebastian bruch and xuanhui wang and cheng li and michael bendersky and marc najork and jan pfeifer and nadav golbandi and rohan anil and stephan wolf. 2019. tf- ranking: scalable tensorflow library for learning-to-rank. proceedings of the 25th acm sigkdd international conference on knowledge discovery and data mining, pages 2970-2978 turc, iulia and chang, ming-wei and lee, kenton and toutanova, kristina. 2019. well-read students learn better: on the importance of pre-training compact models. arxiv preprint arxiv:1908.08962v2 g. v. cormack, c. l. a. clarke, and stefan buttcher. 2009. reciprocal rank fusion outperforms condorcet and individual rank learning methods andrew trotman, antti puurula, blake burgess. 2014. improvements to bm25 and language models examined zhuyun dai and jamie callan. 2019. deeper text understanding for ir with contextual neural language modeling. in proceedings of the 42nd international acm sigir conference on research and development in information retrieval (sigir '19), july 21-25, 2019, paris, france. acm, new york, ny, usa, 4 pages. https://doi.org/10.1145/3331184.3331303 iz beltagy, kyle lo, arman cohan. 2019. scibert: a pretrained language model for scientific text. proceedings of the 2019 conference on empirical methods in natural language processing and the 9th international joint conference on natural language processing (emnlp-ijcnlp), pages 3615-3620 installation guidance tensorflow gpu requirements: https://www.tensorflow.org/install/gpu cuda: https://developer.nvidia.com/cuda-10.1-download-archive- update2?target_os=linux&target_arch=x86_64&target_distro=ubuntu&target_version= 1804&target_type=deblocal cudnn: https://developer.nvidia.com/rdp/cudnn-archive install .deb: https://www.quora.com/is-it-possible-to-install-a-deb-package-in- windows#:~:text=potentially%20yes%2c%20as%20long%20as,deb stopwords https://www.ranks.nl/stopwords https://countwordsfree.com/stopwords bm25 https://github.com/vespa-engine/cord-19/blob/master/cord-19-queries.md https://docs.vespa.ai/documentation/reference/bm25.html tensorflow ranking http://cognitiveai.org/2020/09/08/using-tensorflow-ranking-bert-tfr-bert-an-end-to-end- example/ https://github.com/cognitiveailab/ranking https://github.com/tensorflow/ranking https://colab.research.google.com/github/tensorflow/ranking/blob/master/tensorflow_ranking /examples/handling_sparse_features.ipynb tensorflow ranking (how to serve a model) https://www.tensorflow.org/tfx/serving/serving_basic https://www.tensorflow.org/tfx/tutorials/serving/rest_simple#serve_your_model_with_tensorf low_serving https://github.com/tensorflow/docs/blob/master/site/en/r1/guide/saved_model.md#cli-to- inspect-and-execute-savedmodel https://github.com/cognitiveailab/ranking/blob/master/tensorflow_ranking/extension/example s/tfrbert_client_predict_from_json.py tensorflow ranking (how to predict) https://github.com/tensorflow/ranking/issues/48 https://stackoverflow.com/questions/59528975/tf-estimator-predict-slow-with-tensorflow- ranking-module bert checkpoint conversion https://github.com/tensorflow/models/tree/master/official/nlp/bert bert https://github.com/google-research/bert https://ai.googleblog.com/2018/12/tf-ranking-scalable-tensorflow-library.html https://arxiv.org/pdf/1812.00073.pdf scibert https://www.aclweb.org/anthology/d19-1371/ https://huggingface.co/gsarti/scibert-nli https://github.com/allenai/scibert/ docker https://superuser.com/questions/1382472/how-do-i-find-and-enable-the-virtualization-setting- on-windows-10 https://docs.docker.com/docker-for-windows/troubleshoot/#virtualization-must-be-enabled https://docs.docker.com/docker-for-windows/install/ cody webster codylw2@illinois.edu project proposal team members: codylw2 project: i intend to participate in the information retrieval (ir) competition. i am prepared to learn state of the art retrieval methods such as reciprocal rank fusion or inverse square rank fusion and how to utilize machine learning through a method of machine-learned ranking. if i choose to utilize a rank fusion method, i will combine different statistical and probabilistic models that are optimized on the given data set. i have little relevant prior experience in ir outside of this course. i intend to program my project using python. cody webster codylw2@illinois.edu project proposal team members: codylw2 project: i intend to participate in the information retrieval (ir) competition. i am prepared to learn state of the art retrieval methods such as reciprocal rank fusion or inverse square rank fusion and how to utilize machine learning through a method of machine-learned ranking. if i choose to utilize a rank fusion method, i will combine different statistical and probabilistic models that are optimized on the given data set. i have little relevant prior experience in ir outside of this course. i intend to program my project using python. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['cody', 'webster', 'progress', 'report', 'made', 'thus', 'far', 'generic', 'wrote', 'scripts', 'process', 'documents', 'convert', 'json', 'format', 'easy', 'loading', 'future', 'files', 'contain', 'tokenized', 'representations', 'text', 'queries', 'cranfield', 'script', 'data', 'datasets', 'required', 'metapy', 'module', 'adapted', 'homework', 'find', 'optimal', 'values', 'weights', 'jm', 'bm', 'algorithms', 'ranking', 'bert', 'downloaded', 'googles', 'msmarco', 'pretrained', 'model', 'examine', 'determine', 'missing', 'vocab', 'common', 'corpus', 'git', 'repo', 'httpsgithubcomcognitiveailabranking', 'finetune', 'train', 'tensorflow_ranking', 'python', 'aforementioned', 'run', 'docker', 'container', 'running', 'windows', 'subsystem', 'linux', 'desktops', 'gpu', 'rewrote', 'outside', 'use', 'google', 'colab', 'output', 'predictions', 'file', 'remaining', 'tasks', 'consolidate', 'spread', 'several', 'directories', 'add', 'titles', 'included', 'likely', 'beat', 'baseline', 'finish', 'compile', 'results', 'documentquery', 'combination', 'longer', 'broken', 'tokens', 'segments', 'test', 'whether', 'mean', 'geometric', 'max', 'score', 'within', 'segment', 'better', 'metric', 'larger', 'currently', 'using', 'small', 'challenges', 'adapting', 'examples', 'system', 'hardware', 'limitations', 'pc', 'partially', 'solved', 'scoring', 'takes', 'excessive', 'amount', 'time', 'due', 'large', 'number', 'limit', 'per', 'analysis', 'wait', 'seriously', 'slowed', 'actually', 'beating', 'performance', 'ir', 'competition', 'project', 'documentation', 'contents', 'overview', 'demonstration', 'dirichletprior', 'jelinekmercer', 'okapibm', 'scibert', 'difficulty', 'limited', 'options', 'tensorflow', 'custom', 'assumptions', 'installation', 'instructions', 'install', 'locally', 'packages', 'prepare', 'local', 'method', 'another', 'ranker', 'reproduces', 'best', 'option', 'api', 'general', 'resources', 'citations', 'guidance', 'stopwords', 'serve', 'predict', 'checkpoint', 'conversion', 'purpose', 'participate', 'developed', 'extensively', 'tested', 'three', 'main', 'ways', 'rank', 'first', 'function', 'either', 'packaged', 'definition', 'implemented', 'initially', 'achieved', 'implementation', 'longshot', 'attempt', 'last', 'day', 'rankings', 'metapys', 'second', 'trained', 'library', 'third', 'associated', 'vocabulary', 'overall', 'come', 'algorithm', 'parameters', 'produced', 'brute', 'force', 'optimization', 'uploaded', 'cs_project_demomp', 'repository', 'also', 'illinois', 'media', 'httpsmediaspaceillinoisedumediat_pyqf', 'unfortunately', 'despite', 'able', 'initial', 'defined', 'class', 'professor', 'tas', 'nobody', 'else', 'unreasonable', 'standard', 'us', 'achieve', 'knowledge', 'experience', 'section', 'briefly', 'detail', 'variations', 'experiments', 'attempted', 'possible', 'capture', 'every', 'variation', 'tried', 'cover', 'consistent', 'record', 'including', 'scores', 'administrators', 'lowered', 'decided', 'give', 'shot', 'really', 'nothing', 'lose', 'new', 'via', 'difference', 'done', 'previous', 'days', 'allowed', 'one', 'vary', 'value', 'parameter', 'optimized', 'dataset', 'forcing', 'approach', 'testing', 'reasonable', 'selecting', 'ncdg', 'training', 'none', 'attempts', 'rivaled', 'quickly', 'determined', 'nonideal', 'body', 'later', 'used', 'title', 'abstractintro', 'experimentation', 'kldivergenceprf', 'performed', 'lagged', 'behind', 'approaches', 'ever', 'deemed', 'good', 'enough', 'justify', 'set', 'greatest', 'optimize', 'times', 'multiprocessing', 'capable', 'much', 'quicker', 'pace', 'paper', 'poor', 'different', 'ndcg', 'respectively', 'significant', 'improvements', 'next', 'abstract', 'introduction', 'along', 'produce', 'marginal', 'boost', 'came', 'removed', 'rocchio', 'feedback', 'similar', 'manner', 'normal', 'ultimately', 'worse', 'standalone', 'excluded', 'still', 'inadequate', 'pursued', 'methods', 'noticed', 'take', 'implement', 'anything', 'let', 'k', 'previously', 'faulty', 'assumption', 'would', 'hurt', 'mp', 'almost', 'immediately', 'pooled', 'see', 'superior', 'selected', 'combinations', 'try', 'generated', 'b', 'immensely', 'frustrated', 'wasted', 'effort', 'trying', 'answer', 'simple', 'happy', 'beaten', 'trotman', 'et', 'al', 'since', 'c', 'like', 'native', 'implementations', 'ran', 'slower', 'way', 'outperformed', 'obtained', 'conjunction', 'numerous', 'increase', 'desired', 'listed', 'intro', 'pseudo', 'varying', 'remove', 'urls', 'replace', 'variants', 'words', 'coronavirus', 'covid', 'ncov', 'sarsncov', 'query', 'question', 'narrative', 'combined', 'analyzer', 'chains', 'docs', 'duplicate', 's_id', 'uids', 'functionally', 'duplicates', 'date', 'cutoff', 'document', 'pretokenize', 'berts', 'tokenizer', 'multiple', 'various', 'weightings', 'combine', 'result', 'gathered', 'online', 'continued', 'exploration', 'possibilities', 'completed', 'technical', 'review', 'learned', 'classifying', 'chose', 'struggle', 'get', 'work', 'tutorials', 'spent', 'tutorial', 'provided', 'peter', 'jansen', 'university', 'arizona', 'link', 'gave', 'example', 'relied', 'finetuned', 'researching', 'order', 'upgrade', 'os', 'development', 'version', 'support', 'latest', 'subsytem', 'wsl', 'needed', 'nvidia', 'cuda', 'drivers', 'gpus', 'bazel', 'meant', 'compiled', 'lengthy', 'setup', 'obviously', 'unsuitable', 'rapid', 'realistic', 'reviewers', 'reproduce', 'machines', 'supported', 'arrive', 'repeatable', 'easily', 'solution', 'graders', 'need', 'exploring', 'insight', 'directly', 'load', 'methodology', 'create', 'effective', 'experiment', 'utilized', 'research', 'bertmini', 'bertsmall', 'bertbase', 'effectively', 'without', 'utilizing', 'tpus', 'choose', 'flexibility', 'key', 'list', 'size', 'batch', 'two', 'memory', 'unable', 'improve', 'upon', 'detailed', 'varied', 'updated', 'include', 'token', 'sequence', 'relevance', 'doc', 'ignore', 'titleabstractintro', 'steps', 'approximated', 'loss', 'softmax', 'rerank', 'top', 'promising', 'issues', 'getting', 'insufficient', 'iz', 'beltagy', 'scientific', 'essentially', 'instead', 'consists', 'terms', 'theoretically', 'perform', 'cord', 'unused', 'items', 'command', 'drug', 'remdesivir', 'well', 'could', 'firmly', 'believe', 'adequately', 'inability', 'available', 'prevented', 'realizing', 'goal', 'created', 'basing', 'left', 'structure', 'context', 'features', 'judgement', 'change', 'argparse', 'flags', 'absl', 'stopped', 'producing', 'stdout', 'deeper', 'facets', 'restore', 'hidden', 'layers', 'dropout', 'rate', 'adjust', 'default', 'adjustment', 'drops', 'risked', 'overfitting', 'maximized', 'single', 'based', 'empirical', 'observed', 'increasing', 'lowering', 'maximum', 'list_size', 'depending', 'exceeded', 'variable', 'length', 'appear', 'differ', 'significantly', 'important', 'defines', 'captured', 'models', 'rankers', 'showed', 'helpful', 'code', 'machine', 'ample', 'ram', 'accommodate', 'paths', 'relative', 'base', 'directory', 'acquire', 'unzipped', 'competitiondatasets', 'httpsdrivegooglecomfiledfcwfmcneowyydgapkpigmrxofkmviewuspsharing', 'httpsdrivegooglecomfilede_ymknvooyoczuzzajjexihytfktoviewuspsharing', 'httpsdocscondaioprojectscondaenlatestuserguideinstall', 'httpsdocsnvidiacomcudawsluserguideindexhtml', 'require', 'software', 'must', 'follow', 'recommended', 'offers', 'variety', 'sizes', 'mini', 'possibly', 'requires', 'tpu', 'httpsgithubcomgoogleresearchbert', 'httpsgithubcomallenaiscibert', 'full', 'capability', 'environments', 'environment', 'convertor', 'relies', 'dev', 'conflicts', 'requirements', 'modules', 'stable', 'versions', 'pip', 'pytoml', 'dependencies', 'checkpoints', 'tfmodelsnightly', 'warning', 'activated', 'generate', 'contains', 'information', 'methodologies', 'path', 'competitioncreate_bert_databat', 'cell', 'individually', 'bottom', 'fully', 'view', 'github', 'open', 'pro', 'account', 'free', 'notebook', 'colab_cranfield_metapyipynb', 'competitioncranfield_metapycm_create_databat', 'choice', 'arguments', 'already', 'competitioncranfield_metapycm_rank_docsbat', 'colab_tfripynb', 'elwc', 'competitiontfr_customtfr_create_train_elwcbat', 'competitiontfr_customtfr_train_modelbat', 'truncate', 'competitiontfr_customtfr_predictbat', 'colab_bertipynb', 'competitionbertbert_create_train_elwcbat', 'competitionbertbert_train_modelbat', 'competitionbertbert_predictbat', 'unless', 'otherwise', 'specified', 'root', 'competitioncheck_covid_variantspy', 'check', 'source', 'team', 'variant_file', 'exist', 'existing', 'loaded', 'known_variants', 'known', 'doc_keys', 'keys', 'search', 'dictionary', 'run_type', 'searched', 'input_dir', 'representation', 'processed', 'description', 'create_bert_datapy', 'loads', 'processes', 'predefined', 'speed', 'execution', 'competitioncheckpoint_converterpy', 'converter', 'v', 'garden', 'bert_config_file', 'configuration', 'define', 'core', 'checkpoint_to_convert', 'bertmodel', 'task', 'heads', 'converted_checkpoint_path', 'name', 'objectbased', 'checkpoint_model_name', 'saving', 'ie', 'saved', 'tftraincheckpointflagscheckpoint_model_namemodel', 'converted_model', 'bertencoder', 'bertpretrainerv', 'mlm', 'classification', 'written', 'lightly', 'modified', 'competitioncreate_bert_datapy', 'loadable', 'vocab_file', 'containing', 'tokenizing', 'word', 'equivalents', 'variant_default', 'tokenize', 'store', 'output_dir', 'stored', 'inputs', 'exact', 'behavior', 'lets', 'discuss', 'complete', 'case', 'start', 'original', 'xml', 'according', 'dumped', 'target', 'judgements', 'uid', 'publication', 'pulled', 'metadatacsv', 'pruned', 'iterates', 'finds', 'suitable', 'candidate', 'exhausts', 'object', 'multiprocessed', 'pool', 'resulting', 'disk', 'competitioncranfield_metapycreate_cranfieldpy', 'query_keys', 'creating', 'separate', 'combining', 'cranfield_dir', 'generating', 'uses', 'uniquely', 'user', 'consist', 'onetoone', 'relationship', 'allows', 'expansive', 'iteration', 'competitioncranfield_metapysearch_evalpy', 'heavily', 'fit', 'config_template', 'template', 'configs', 'dat_keys', 'indicate', 'corresponds', 'create_cranfieldpy', 'doc_weights', 'valid', 'found', 'params', 'separated', 'predict_dir', 'remove_idx', 'delete', 'inverted', 'index', 'exists', 'fail', 'specify', 'weight', 'contribute', 'final', 'prediction', 'competitioncranfield_metapysearch_eval_poolpy', 'production', 'na', 'place', 'iterations', 'range', 'loop', 'evaulated', 'normalized', 'cumulative', 'gain', 'competitiontfr_customtfr_convert_json_to_elwcpy', 'located', 'formatted', 'tfrecord', 'sequence_length', 'individual', 'query_file', 'qrel_files', 'query_key', 'type', 'doc_file', 'output_train_file', 'output_eval_file', 'evaluation', 'do_lower_case', 'ensure', 'strings', 'lowercase', 'originally', 'highly', 'judgments', 'converts', 'exceeds', 'chunked', 'objects', 'specific', 'maxim', 'truncated', 'competitiontfr_customtfr_trainpy', 'httpsgithubcomtensorflowrankingblobmastertensorflow_rankingexamplestf_ranking_tfrecordpy', 'data_format', 'datapy', 'train_path', 'input', 'eval_path', 'eval', 'vocab_path', 'model_dir', 'batch_size', 'num_train_steps', 'learning_rate', 'learning', 'optimizer', 'dropout_rate', 'layer', 'hidden_layer_dims', 'dynamic', 'group_size', 'group', 'rankinglosskey', 'weights_feature_name', 'feature', 'unbiased', 'learningtorank', 'listwise_inference', 'true', 'exports', 'accept', 'serving', 'use_document_interactions', 'crossdocument', 'interactions', 'embedding_dim', 'tfr_convert_json_to_elwcpy', 'trains', 'outputs', 'competitiontfr_customtfr_predictpy', 'output_file', 'model_path', 'docs_at_once', 'rerank_file', 'consisting', 'reranked', 'converted', 'contextelwc', 'passed', 'ranked', 'singular', 'sorted', 'competitionbertbert_predictpy', 'competitionbertbert_trainpy', 'httpsgithubcomtensorflowrankingblobmastertensorflow_rankingextensionexamplestfrbert_examplepy', 'local_training', 'train_input_pattern', 'pattern', 'eval_input_pattern', 'train_batch_size', 'records', 'eval_batch_size', 'checkpoint_secs', 'saves', 'seconds', 'num_checkpoints', 'workspace', 'means', 'continuous', 'num_eval_steps', 'deciding', 'convert_labels_to_binary', 'labels', 'config', 'corresponding', 'specifies', 'architecture', 'please', 'download', 'bert_init_ckpt', 'bert_max_seq_length', 'wordpiece', 'tokenization', 'sequences', 'shorter', 'padded', 'bert_num_warmup_steps', 'global_step', 'num_warmup_steps', 'global_stepnum_warmup_steps', 'init_lr', 'bertoptimizationpy', 'bert_convert_json_to_elwcpy', 'competitionbertbert_convert_json_to_elwcpy', 'rama', 'kumar', 'pasumarthi', 'sebastian', 'bruch', 'xuanhui', 'wang', 'cheng', 'li', 'michael', 'bendersky', 'marc', 'najork', 'jan', 'pfeifer', 'nadav', 'golbandi', 'rohan', 'anil', 'stephan', 'wolf', 'tfranking', 'scalable', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'discovery', 'mining', 'pages', 'turc', 'iulia', 'chang', 'mingwei', 'lee', 'kenton', 'toutanova', 'kristina', 'wellread', 'students', 'learn', 'importance', 'pretraining', 'compact', 'arxiv', 'preprint', 'arxivv', 'g', 'cormack', 'l', 'clarke', 'stefan', 'buttcher', 'reciprocal', 'fusion', 'outperforms', 'condorcet', 'andrew', 'antti', 'puurula', 'blake', 'burgess', 'language', 'examined', 'zhuyun', 'dai', 'jamie', 'callan', 'understanding', 'contextual', 'neural', 'modeling', 'nd', 'sigir', 'retrieval', 'july', 'paris', 'france', 'york', 'ny', 'usa', 'httpsdoiorg', 'kyle', 'lo', 'arman', 'cohan', 'natural', 'processing', 'joint', 'emnlpijcnlp', 'httpswwwtensorfloworginstallgpu', 'httpsdevelopernvidiacomcudadownloadarchiveupdatetarget_oslinuxtarget_archx_target_distroubuntutarget_versiontarget_typedeblocal', 'cudnn', 'httpsdevelopernvidiacomrdpcudnnarchive', 'deb', 'httpswwwquoracomisitpossibletoinstalladebpackageinwindowstextpotentiallyyescaslongasdeb', 'httpswwwranksnlstopwords', 'httpscountwordsfreecomstopwords', 'httpsgithubcomvespaenginecordblobmastercordqueriesmd', 'httpsdocsvespaaidocumentationreferencebmhtml', 'httpcognitiveaiorgusingtensorflowrankingberttfrbertanendtoendexample', 'httpsgithubcomtensorflowranking', 'httpscolabresearchgooglecomgithubtensorflowrankingblobmastertensorflow_rankingexampleshandling_sparse_featuresipynb', 'httpswwwtensorfloworgtfxservingserving_basic', 'httpswwwtensorfloworgtfxtutorialsservingrest_simpleserve_your_model_with_tensorflow_serving', 'httpsgithubcomtensorflowdocsblobmastersiteenrguidesaved_modelmdclitoinspectandexecutesavedmodel', 'httpsgithubcomcognitiveailabrankingblobmastertensorflow_rankingextensionexamplestfrbert_client_predict_from_jsonpy', 'httpsgithubcomtensorflowrankingissues', 'httpsstackoverflowcomquestionstfestimatorpredictslowwithtensorflowrankingmodule', 'httpsgithubcomtensorflowmodelstreemasterofficialnlpbert', 'httpsaigoogleblogcomtfrankingscalabletensorflowlibraryhtml', 'httpsarxivorgpdfpdf', 'httpswwwaclweborganthologyd', 'httpshuggingfacecogsartiscibertnli', 'httpssuperusercomquestionshowdoifindandenablethevirtualizationsettingonwindows', 'httpsdocsdockercomdockerforwindowstroubleshootvirtualizationmustbeenabled', 'httpsdocsdockercomdockerforwindowsinstall', 'non', 'ideal', 'multi', 'httpsdrivegooglecomfilede_y', 'mknvooyoczuzzajjexihytfktoviewuspsharing', 'httpsgithubcomtensorflowrankingblobmastertensorflow_rankingexamplestf_ranking_tfrecord', 'py', 'httpsgithubcomtensorflowrankingblobmastertensorflow_rankingextensionexamplestfrbert_e', 'xamplepy', 'tf', 'httpsdevelopernvidiacomcudadownloadarchive', 'updatetarget_oslinuxtarget_archx_target_distroubuntutarget_version', 'target_typedeblocal', 'httpswwwquoracomisitpossibletoinstalladebpackagein', 'windowstextpotentiallyyescaslongasdeb', 'httpcognitiveaiorgusingtensorflowrankingberttfrbertanendtoend', 'httpscolabresearchgooglecomgithubtensorflowrankingblobmastertensorflow_ranking', 'exampleshandling_sparse_featuresipynb', 'httpswwwtensorfloworgtfxtutorialsservingrest_simpleserve_your_model_with_tensorf', 'low_serving', 'httpsgithubcomtensorflowdocsblobmastersiteenrguidesaved_modelmdclito', 'inspectandexecutesavedmodel', 'httpsgithubcomcognitiveailabrankingblobmastertensorflow_rankingextensionexample', 'stfrbert_client_predict_from_jsonpy', 'httpsstackoverflowcomquestionstfestimatorpredictslowwithtensorflow', 'rankingmodule', 'httpssuperusercomquestionshowdoifindandenablethevirtualizationsetting', 'onwindows', 'codylwillinoisedu', 'proposal', 'members', 'codylw', 'intend', 'prepared', 'state', 'art', 'inverse', 'square', 'utilize', 'machinelearned', 'statistical', 'probabilistic', 'given', 'little', 'relevant', 'prior', 'course', 'program', 'courseproject', 'fork', 'paste', 'microsoft', 'cmt', 'coursera', 'week', 'overviewweek', 'activities']
https://github.com/czhu99/CourseProject	"untitled december 13, 2020 1 project 1.1 cs 410, text information retrieval 1.1.1 university of illinois at urbana-champaign, fall 2020 ramin melikov, chris zhu, francis alloba due: 12/13/2020, 11:59 pm cst 2 reproduction of mining causal topics in text data kim, h. d., castellanos, m., hsu, m., zhai, c. x., rietz, t., & diermeier, d. (2013). mining causal topics in text data: iterative topic modeling with time series feedback. in cikm 2013 - proceedings of the 22nd acm international conference on information and knowledge man- agement (pp. 885-890). (international conference on information and knowledge management, proceedings). https://doi.org/10.1145/2505515.2505612 3 video introduction to the project https://www.youtube.com/watch?v=2raomgm07t8 please watch the video overview of the project frst. 4 repository location https://github.com/czhu99/courseproject 4.0.1 this is a knime project knime is an advanced analytics platform. it is available for free at http://www.knime.com after the knime is downloaded and installed, you have to import the workfow to see how it works. the workfow in in the repository. workfow is named paper_replication.knwf. 1 5 some code from our project the code below is used in knime to get the articles that are tagged with bush or gore and it then does some processing that produces a table with 2 columns: a date column and a string column. in the string column each row represents each article. each string is lowercased, lematized, fltered, etc. see code for exact steps. from pandas import dataframe import os from bs4 import beautifulsoup import metapy import pandas as pd base_dir = 'd:/git/text_information_systems/project_files/project/nyt_corpus/data/2000' def extract_data(filename): return beautifulsoup(open(filename, encoding = 'utf8')) def list_files(dir): return [os.path.join(r, n) for r, _, f in os.walk(dir) for n in f] blobs = [] for file_path in list_files(base_dir): blobs.append(extract_data(file_path)) filtered = [ blob for blob in blobs if [ person.get_text() for person in blob.find_all('person') if person.get_text() in ['bush, george w (gov)', 'gore, al (vice pres)'] 2 ] ] tokenized = {} date = [] articles = [] for article in filtered: doc = metapy.index.document() year = article.find('meta', attrs = {'name':""publication_year""}).get(""content"") month = article.find('meta', attrs = {'name':""publication_month""}).get(""content"") day = article.find('meta', attrs = {'name':""publication_day_of_month""}).get(""content"") doc.content(article.body.get_text()) tok = metapy.analyzers.icutokenizer(suppress_tags=true) tok = metapy.analyzers.lowercasefilter(tok) tok = metapy.analyzers.listfilter(tok, ""d:/git/text_information_systems/project_files/project/nyt_corpus/data/lemur-stopwords.txt"", metapy.analyzers.listfilter.type.reject) tok = metapy.analyzers.porter2filter(tok) tok = metapy.analyzers.lengthfilter(tok, min=2, max=30) tok.set_content(doc.content()) articles.append("" "".join([token for token in tok if not any(c.isdigit() or c == '.' for c in token)])) date.append(str(year) + '-' + str(month) + '-' + str(day)) tokenized['date'] = date tokenized['articles'] = articles output_table = pd.dataframe.from_dict(tokenized) the following code gets the p-value for the granger causality test from statsmodels.tsa.stattools import grangercausalitytests import pandas as pd gr = grangercausalitytests(input_table[['price', 'topic_sum']], 1, verbose = false) p = gr[1][0]['ssr_ftest'][1] dict = {'p': p} output_table = pd.dataframe(dict, index = [0]) 6 team contributions for our collaboration process during this project, we did pair programming with all three members present on a video call. ramin did the majority of the coding on his machine while chris and francis viewed the screen and gave input and ideas. 3 cs 410 francis alobba (falobba2) ramin melikov (melikov2) chris zhu (cjzhu2) project progress report 1) which tasks have been completed? so far, we have successfully begun mining through the nyt corpus data and have already gotten the specific data that we need to replicate the paper into our jupyter notebook. 2) which tasks are pending? the next steps we need to complete include implementing the algorithm used in the paper and of course running the experiment from the paper using said algorithm. 3) are you facing any challenges? no challenges thus far. what are the names and netids of all your team members? who is the captain? the captain will have more administrative what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. duties than team members. members: { 'net_id' : ['melikov2', 'falobba2', 'cjzhu2'], 'name' : ['ramin melikov', 'francis alobba', 'chris zhu'] } captain: {'chris zhu'} which paper have you chosen? which paper have you chosen? mining causal topics in text data: iterative topic modeling with time series feedback which programming language do you plan to use? which programming language do you plan to use? python can you obtain the datasets used in the paper for evaluation? can you obtain the datasets used in the paper for evaluation? yes if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? another dataset that is similar in nature)? n/a if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? introduced in the paper? n/a project cs 410, text information retrieval university of illinois at urbana-champaign, fall 2020 ramin melikov, chris zhu, francis alloba due: 12/13/2020, 11:59 pm cst reproduction of mining causal topics in text data kim, h. d., castellanos, m., hsu, m., zhai, c. x., rietz, t., & diermeier, d. (2013). mining causal topics in text data: iterative topic modeling with time series feedback. in cikm 2013 - proceedings of the 22nd acm international conference on information and knowledge management (pp. 885-890). (international conference on information and knowledge management, proceedings). https://doi.org/10.1145/2505515.2505612 video introduction to the project https://www.youtube.com/watch?v=2raomgm07t8 please watch the video overview of the project first. repository location https://github.com/czhu99/courseproject this is a knime project knime is an advanced analytics platform. it is available for free at http://www.knime.com after the knime is downloaded and installed, you have to import the workflow to see how it works. the workflow in in the repository. workflow is named paper_replication.knwf. some code from our project the code below is used in knime to get the articles that are tagged with bush or gore and it then does some processing that produces a table with 2 columns: a date column and a string column. in the string column each row represents each article. each string is lowercased, lematized, filtered, etc. see code for exact steps. ````python from pandas import dataframe import os from bs4 import beautifulsoup import metapy import pandas as pd base_dir = 'd:/git/text_information_systems/project_files/project/nyt_corpus/data/2000' def extract_data(filename): return beautifulsoup(open(filename, encoding = 'utf8')) def list_files(dir): return [os.path.join(r, n) for r, _, f in os.walk(dir) for n in f] blobs = [] for file_path in list_files(base_dir): blobs.append(extract_data(file_path)) filtered = [ blob for blob in blobs if [ person.get_text() for person in blob.find_all('person') if person.get_text() in ['bush, george w (gov)', 'gore, al (vice pres)'] ] ] tokenized = {} date = [] articles = [] for article in filtered: doc = metapy.index.document() year = article.find('meta', attrs = {'name':""publication_year""}).get(""content"") month = article.find('meta', attrs = {'name':""publication_month""}).get(""content"") day = article.find('meta', attrs = {'name':""publication_day_of_month""}).get(""content"") doc.content(article.body.get_text()) tok = metapy.analyzers.icutokenizer(suppress_tags=true) tok = metapy.analyzers.lowercasefilter(tok) tok = metapy.analyzers.listfilter(tok, ""d:/git/text_information_systems/project_files/project/nyt_corpus/data/lemur-stopwords.txt"", metapy.analyzers.listfilter.type.reject) tok = metapy.analyzers.porter2filter(tok) tok = metapy.analyzers.lengthfilter(tok, min=2, max=30) tok.set_content(doc.content()) articles.append("" "".join([token for token in tok if not any(c.isdigit() or c == '.' for c in token)])) date.append(str(year) + '-' + str(month) + '-' + str(day)) tokenized['date'] = date tokenized['articles'] = articles output_table = pd.dataframe.from_dict(tokenized) ```` the following code gets the p-value for the granger causality test ````python from statsmodels.tsa.stattools import grangercausalitytests import pandas as pd gr = grangercausalitytests(input_table[['price', 'topic_sum']], 1, verbose = false) p = gr[1][0]['ssr_ftest'][1] dict = {'p': p} output_table = pd.dataframe(dict, index = [0]) ```` team contributions for our collaboration process during this project, we did pair programming with all three members present on a video call. ramin did the majority of the coding on his machine while chris and francis viewed the screen and gave input and ideas."	['untitled', 'december', 'project', 'cs', 'text', 'information', 'retrieval', 'university', 'illinois', 'urbanachampaign', 'fall', 'ramin', 'melikov', 'chris', 'zhu', 'francis', 'alloba', 'due', 'pm', 'cst', 'reproduction', 'mining', 'causal', 'topics', 'data', 'kim', 'h', 'castellanos', 'hsu', 'zhai', 'c', 'x', 'rietz', 'diermeier', 'iterative', 'topic', 'modeling', 'time', 'series', 'feedback', 'cikm', 'proceedings', 'nd', 'acm', 'international', 'conference', 'knowledge', 'man', 'agement', 'pp', 'management', 'httpsdoiorg', 'video', 'introduction', 'httpswwwyoutubecomwatchvraomgmt', 'please', 'watch', 'overview', 'frst', 'repository', 'location', 'httpsgithubcomczhucourseproject', 'knime', 'advanced', 'analytics', 'platform', 'available', 'free', 'httpwwwknimecom', 'downloaded', 'installed', 'import', 'workfow', 'see', 'works', 'named', 'paper_replicationknwf', 'code', 'used', 'get', 'articles', 'tagged', 'bush', 'gore', 'processing', 'produces', 'table', 'columns', 'date', 'column', 'string', 'row', 'represents', 'article', 'lowercased', 'lematized', 'fltered', 'etc', 'exact', 'steps', 'pandas', 'dataframe', 'os', 'bs', 'beautifulsoup', 'metapy', 'pd', 'base_dir', 'dgittext_information_systemsproject_filesprojectnyt_corpusdata', 'def', 'extract_datafilename', 'return', 'beautifulsoupopenfilename', 'encoding', 'utf', 'list_filesdir', 'ospathjoinr', 'n', 'r', '_', 'f', 'oswalkdir', 'blobs', 'file_path', 'list_filesbase_dir', 'blobsappendextract_datafile_path', 'filtered', 'blob', 'personget_text', 'person', 'blobfind_allperson', 'george', 'w', 'gov', 'al', 'vice', 'pres', 'tokenized', 'doc', 'metapyindexdocument', 'year', 'articlefindmeta', 'attrs', 'namepublication_yeargetcontent', 'month', 'namepublication_monthgetcontent', 'day', 'namepublication_day_of_monthgetcontent', 'doccontentarticlebodyget_text', 'tok', 'metapyanalyzersicutokenizersuppress_tagstrue', 'metapyanalyzerslowercasefiltertok', 'metapyanalyzerslistfiltertok', 'dgittext_information_systemsproject_filesprojectnyt_corpusdatalemurstopwordstxt', 'metapyanalyzerslistfiltertypereject', 'metapyanalyzersporterfiltertok', 'metapyanalyzerslengthfiltertok', 'min', 'max', 'tokset_contentdoccontent', 'articlesappend', 'jointoken', 'token', 'anycisdigit', 'dateappendstryear', 'strmonth', 'strday', 'tokenizeddate', 'tokenizedarticles', 'output_table', 'pddataframefrom_dicttokenized', 'following', 'gets', 'pvalue', 'granger', 'causality', 'test', 'statsmodelstsastattools', 'grangercausalitytests', 'gr', 'grangercausalitytestsinput_tableprice', 'topic_sum', 'verbose', 'false', 'p', 'grssr_ftest', 'dict', 'pddataframedict', 'index', 'team', 'contributions', 'collaboration', 'process', 'pair', 'programming', 'three', 'members', 'present', 'call', 'majority', 'coding', 'machine', 'viewed', 'screen', 'gave', 'input', 'ideas', 'alobba', 'falobba', 'cjzhu', 'progress', 'report', 'tasks', 'completed', 'far', 'successfully', 'begun', 'nyt', 'corpus', 'already', 'gotten', 'specific', 'need', 'replicate', 'paper', 'jupyter', 'notebook', 'pending', 'next', 'complete', 'include', 'implementing', 'algorithm', 'course', 'running', 'experiment', 'using', 'said', 'facing', 'challenges', 'thus', 'names', 'netids', 'captain', 'administrative', 'duties', 'net_id', 'name', 'chosen', 'language', 'plan', 'use', 'python', 'obtain', 'datasets', 'evaluation', 'yes', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'na', 'questions', 'going', 'demonstrate', 'reproduced', 'method', 'introduced', 'first', 'workflow']
https://github.com/danco14/CourseProject	progress report 1) progress made thus far so far, i have developed two different text classification models. initially, i created an ipython notebook that is used to run all of the code. two different models are then trained on the datasets the first model is lstm, which is an rnn, and the second model is bert. both of the architectures are implemented and are running in the ipython notebook. currently, i am developing both of these models for the competition, and i will choose which one to submit based on which has the better results. both models have been both pre-trained and trained on the provided training dataset. the model files are imported into the notebook and then run. i am currently using the pytorch data loader to run the datasets. since i do not have a gpu, the models are being run on google colab. 2) remaining tasks i still need to pass the baseline accuracies. each model still has to have its hyperparameters tuned to perform better on the test dataset. the architecture of the models may also have to be modified/developed if the resulting accuracy does not pass the baseline after some grid searching. 3) any challenges/issues being faced a challenge that i am currently facing is having the models not overfit the training data. most overfitting must also be changed by reducing the model architecture, and having to change the provided bert model is tedious. project proposal name: darren anco (captain) netid: danco2 competition * text classification i am prepared to learn state-of-the-art neural network classifiers for this project. neural network classifiers and frameworks some neural network classifiers that i have heard of are: * alexnet * vggnet * googlenet * resnet * resnext * densenet i have used alexnet before in mps for other classes. for the rest, i learned about their structures and features from cs 498dl, but i have not used them in any projects. for frameworks, i have used: * pytorch * tensorflow i have a decent amount of experience with both of these frameworks. i have used them before in cs 440, cs 498dl, and cs 498aml. i have also worked with these frameworks on various projects outside of class. programming language for this project, i plan to use python. text classification competition project team: darren anco (danco2)	['progress', 'report', 'made', 'thus', 'far', 'developed', 'two', 'different', 'text', 'classification', 'models', 'initially', 'created', 'ipython', 'notebook', 'used', 'run', 'code', 'trained', 'datasets', 'first', 'model', 'lstm', 'rnn', 'second', 'bert', 'architectures', 'implemented', 'running', 'currently', 'developing', 'competition', 'choose', 'one', 'submit', 'based', 'better', 'results', 'pretrained', 'provided', 'training', 'dataset', 'files', 'imported', 'using', 'pytorch', 'data', 'loader', 'since', 'gpu', 'google', 'colab', 'remaining', 'tasks', 'still', 'need', 'pass', 'baseline', 'accuracies', 'hyperparameters', 'tuned', 'perform', 'test', 'architecture', 'may', 'also', 'modifieddeveloped', 'resulting', 'accuracy', 'grid', 'searching', 'challengesissues', 'faced', 'challenge', 'facing', 'overfit', 'overfitting', 'must', 'changed', 'reducing', 'change', 'tedious', 'project', 'proposal', 'name', 'darren', 'anco', 'captain', 'netid', 'danco', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'frameworks', 'heard', 'alexnet', 'vggnet', 'googlenet', 'resnet', 'resnext', 'densenet', 'mps', 'classes', 'rest', 'learned', 'structures', 'features', 'cs', 'dl', 'projects', 'tensorflow', 'decent', 'amount', 'experience', 'aml', 'worked', 'various', 'outside', 'class', 'programming', 'language', 'plan', 'use', 'python', 'team']
https://github.com/darrenmuliawan/CourseProject	"project progress report darren muliawan i have been able to get the python script to run forever on the cloud. i am also able to run the expertsearch system on my local machine. i am currently still working on implementing the service to monitor the faculty websites and automatically add new faculty members to the dataset. so far, i have not faced any challenges. project proposal darren muliawan - darrenm2 (captain) for the final project, i choose to work on improving the expertsearch system, focusing on automatically crawling faculty webpages. the expertsearch's data right now is coming from the mp2 submissions of the previous course offering. i am planning to improve the system by creating a service that keeps on monitoring the faculty homepages from the mp2.1 signup sheets to look for a new faculty members that was added after the mp2 submissions of the previous course offering. to show that my implementation works better, i need to show that there are actually new faculty members that is not included in the expertsearch's dataset. this crawler will be a separate system that will update the dataset that expertsearch uses. i am going to use python to complete this project. the main tasks that need to be completed for this project includes, 1. automatic crawling for the faculty homepages 2. ability to detect changes of faculty members 3. updating the dataset that expertsearch uses these tasks should be able to be completed in ~20 hours. project overview this project is made to improve the existing expertsearch system. my goal was to update the dataset used by expertsearch by creating a script that checks the urls in the data/mp2_part1 signup - sheet1.csv if they have new faculty members that wasn't added to the current expertsearch's dataset. implementation in order to find new faculty members, first i get the original email list that the current expertsearch used from data/emails. i used faculty member's email to identify unique faculty member, since each person will most likely only have 1 email, and store it in python dictionary for fast lookup. the next step is to crawl each faculty homepage url from data/mp2_part1 signup - sheet1.csv, and scrape each page to get the list of faculty member's email addresses. if the email address does not exist in the dictionary key, then i assume that this faculty member was new (added after expertsearch was created). for each new faculty member, the crawler will get their bio url, updates the dataset, and update other files which then will be used to create the index. algorithm get the list of faculty homepage urls from data/mp2_part1 signup - sheet1.csv scrape each url and grab the a element that has href mailto: prefix, which is an indicator for an email address. look for their personal page url by recursively check its html structure. the crawler will use the email_element found in step 1, grab its parent, then iterate its children to find another a element with href that starts with either / or http which, possibly, contains the link for their personal page. codeblock for recursively checks html structure, ``` for a in soup.select(""a[href^=\""mailto:\""]""): email = a[""href""].split(""mailto:"")[1] if email not in email_table: # new faculty member found, find its page link element = a.parent while true: a2 = element.find(""a"") # check if the link is (maybe) a faculty member's page if a2.has_attr('href'): href = a2['href'].encode('ascii') if a2 != a and (href.startswith(""/"") or href.startswith(""http"")): new_faculty_bios_url.append(href) emails.append(email) new_unis.append(uni) new_depts.append(dept) found += 1 break element = element.parent if element is none: break 4. scrape the new member's bio page and store it indata/compiled_bios/n.txt, where n is some number. 5. updatedata/email,data/depts,data/location, anddata/uniswith the new member's information 6. use the modifiedextraction/extract_names.pyto updatedata/names.txt7. use the modifiedwrite_file_names.pyto updatedata/compiled_bios/dataset-full-corpus.txtanddata/compiled_bios/metadata.dat8. rebuild the index withmetapy.index.make_inverted_index(searchconfig)``` limitations there are some limitations for this improvement due to the limitation of time since i am working on this project solo, such as, when the crawler looks for the faculty member's bio url, it assumes that the url is located somewhere in other a element's href. if the link is not in the href, then it won't be able to find the bio url. it may also find an incorrect url if the link is not in other element's href. expertsearch's script to get the faculty member's name uses stanford named entity recognizer (ner) tagger, which doesn't 100% correctly detect the faculty member's name expertsearch's script to get the location relies on google maps api which may not be free since we are dealing with thousands of faculty members. so for the new faculty members, i set the location to be unknown, united states there is a mismatch in the number of records for data/urls need to restart the app everytime the crawler finished to view the new faculty members how to run the code note: make sure you have both python 2.7 and python3 since some of expertsearch script does not work on python 2.7 and some of them does not work on python 3. for reference, i am using python 2.7.16 and python 3.7.7 run crawler scripts python crawler.py [max_found] [run_forever] max_found is the maximum number of new faculty members that you want to find before it updates the dataset. run_forever sets to true if you want the crawler to loop forever. for example, python crawler.py 10 true for continuous checking and without limit, either set max_found to be -1 and run_forever to be true or run python crawler.py. run expertsearch app gunicorn server:app -b 127.0.0.1:8095 how to check this project open the original expertsearch http://timan102.cs.illinois.edu/expertsearch// and open the updated expertsearch at localhost:8095. find the name of recently added faculty members by looking at new_bios/trial-n.txt and open the bio url. the new members should only appear in the updated expertsearch. video link https://mediaspace.illinois.edu/media/t/1_ybtlfoxk"	['project', 'progress', 'report', 'darren', 'muliawan', 'able', 'get', 'python', 'script', 'run', 'forever', 'cloud', 'also', 'expertsearch', 'system', 'local', 'machine', 'currently', 'still', 'working', 'implementing', 'service', 'monitor', 'faculty', 'websites', 'automatically', 'add', 'new', 'members', 'dataset', 'far', 'faced', 'challenges', 'proposal', 'darrenm', 'captain', 'final', 'choose', 'work', 'improving', 'focusing', 'crawling', 'webpages', 'expertsearchs', 'data', 'right', 'coming', 'mp', 'submissions', 'previous', 'course', 'offering', 'planning', 'improve', 'creating', 'keeps', 'monitoring', 'homepages', 'signup', 'sheets', 'look', 'added', 'show', 'implementation', 'works', 'better', 'need', 'actually', 'included', 'crawler', 'separate', 'update', 'uses', 'going', 'use', 'complete', 'main', 'tasks', 'completed', 'includes', 'automatic', 'ability', 'detect', 'changes', 'updating', 'hours', 'overview', 'made', 'existing', 'goal', 'used', 'checks', 'urls', 'datamp_part', 'sheetcsv', 'wasnt', 'current', 'order', 'find', 'first', 'original', 'email', 'list', 'dataemails', 'identify', 'unique', 'member', 'since', 'person', 'likely', 'store', 'dictionary', 'fast', 'lookup', 'next', 'step', 'crawl', 'homepage', 'url', 'scrape', 'page', 'addresses', 'address', 'exist', 'key', 'assume', 'created', 'bio', 'updates', 'files', 'create', 'index', 'algorithm', 'grab', 'element', 'href', 'mailto', 'prefix', 'indicator', 'personal', 'recursively', 'check', 'html', 'structure', 'email_element', 'found', 'parent', 'iterate', 'children', 'another', 'starts', 'either', 'http', 'possibly', 'contains', 'link', 'codeblock', 'soupselectahrefmailto', 'ahrefsplitmailto', 'email_table', 'aparent', 'true', 'elementfinda', 'maybe', 'ahas_attrhref', 'ahrefencodeascii', 'hrefstartswith', 'hrefstartswithhttp', 'new_faculty_bios_urlappendhref', 'emailsappendemail', 'new_unisappenduni', 'new_deptsappenddept', 'break', 'elementparent', 'none', 'indatacompiled_biosntxt', 'n', 'number', 'updatedataemaildatadeptsdatalocation', 'anddatauniswith', 'information', 'modifiedextractionextract_namespyto', 'updatedatanamestxt', 'modifiedwrite_file_namespyto', 'updatedatacompiled_biosdatasetfullcorpustxtanddatacompiled_biosmetadatadat', 'rebuild', 'withmetapyindexmake_inverted_indexsearchconfig', 'limitations', 'improvement', 'due', 'limitation', 'time', 'solo', 'looks', 'assumes', 'located', 'somewhere', 'elements', 'wont', 'may', 'incorrect', 'name', 'stanford', 'named', 'entity', 'recognizer', 'ner', 'tagger', 'doesnt', 'correctly', 'location', 'relies', 'google', 'maps', 'api', 'free', 'dealing', 'thousands', 'set', 'unknown', 'united', 'states', 'mismatch', 'records', 'dataurls', 'restart', 'app', 'everytime', 'finished', 'view', 'code', 'note', 'make', 'sure', 'reference', 'using', 'scripts', 'crawlerpy', 'max_found', 'run_forever', 'maximum', 'want', 'sets', 'loop', 'example', 'continuous', 'checking', 'without', 'limit', 'gunicorn', 'serverapp', 'b', 'open', 'httptimancsillinoiseduexpertsearch', 'updated', 'localhost', 'recently', 'looking', 'new_biostrialntxt', 'appear', 'video', 'httpsmediaspaceillinoisedumediat_ybtlfoxk']
https://github.com/davidmg4/CourseProject	"david gutierrez cs410: text information systems final project proposal fall 2020 what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. individual team name: david gutierrez netid: davidmg4 what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic: sentiment analysis based on geography in the united states using twitter. this tweet-based text analysis will break down each geographic region (50 states) into a sentiment analysis based on sub-topics as government (e.g. corruption), weather (e.g. natural disasters), quality of life (e.g. cost of living), pollution (e.g. air quality), lifestyle (e.g. traffic) to help people make informed decisions about where to live without the potential biases and pitfalls present in survey data. i expect that this will line up with publicly available information, but may present some interesting challenges inherent to social media such as the use of irony and sarcasm. i plan to use twitter's built-in api and library along with the nltk library to train the classifier and implement the analysis. once this data is collected, i plan to use numpy's libraries to perform a statistical analysis to measure the significance of each sentiment and create a threshold value above which the positive or negative value will be considered significant on a per-state basis. then they will be compared against other states to generate an interactive grid with which user will be able to sort by state and sub-topic as well as apply filters to narrow down to only specific states that they care about which programming language do you plan to use? python please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. download twitter tweet training database/information retrieval via web-scraping: 5 hours develop codebase to parse both geography and sub-topic information: 10 hours analysis of data : 5 hours presentation in web-based intuitive and interactive data visualization: 5 hours david gutierrez cs410: text information systems final project proposal fall 2020 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. a. individual team i. name: david gutierrez ii. netid: davidmg4 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? a. topic: sentiment analysis based on geography in the united states using twitter. this tweet-based text analysis will break down each geographic region (50 states) into a sentiment analysis based on sub-topics as government (e.g. corruption), weather (e.g. natural disasters), quality of life (e.g. cost of living), pollution (e.g. air quality), lifestyle (e.g. traffic) to help people make informed decisions about where to live without the potential biases and pitfalls present in survey data. i expect that this will line up with publicly available information, but may present some interesting challenges inherent to social media such as the use of irony and sarcasm. i plan to use twitter's built-in api and library along with the nltk library to train the classifier and implement the analysis. once this data is collected, i plan to use numpy's libraries to perform a statistical analysis to measure the significance of each sentiment and create a threshold value above which the positive or negative value will be considered significant on a per-state basis. then they will be compared against other states to generate an interactive grid with which user will be able to sort by state and sub-topic as well as apply filters to narrow down to only specific states that they care about 3. which programming language do you plan to use? a. python 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. a. download twitter tweet training database/information retrieval via web-scraping: 5 hours b. develop codebase to parse both geography and sub-topic information: 10 hours c. analysis of data : 5 hours d. presentation in web-based intuitive and interactive data visualization: 5 hours david gutierrez cs410: text information systems fall 2020 november 29, 2020 course project progress report individual team (netid: davidmg4) 1) progress made thus far: i have successfully applied and been approved for a twitter developer account. this has enabled me to pull all of the most recent tweets in a search for the previous ten days (instead of the prior year as i had hoped). i have been able to implement code to pull the text data into a csv file. the resultant data file is then read into a second script that loads it into pandas data frames and parses the text data using stop-words from nltk and pulling a sentiment analysis for each tweet using textblob. zero values are dropped and then the remaining sentiment scores are averaged together by state and topic to produce the final values, visualized as percentages. this data is then dropped into an html file that features a map of us states as well as a sortable table for each state in addition to a composite score to gauge overall sentiment across the five topics. 2) remaining tasks: a. re-run the twitter scraper to get the full text of tweets (currently truncated at 140 characters) b. fully implement dataviewer.html to pull data automatically from the csv file c. rework the css on the same to enable a visual histogram for each topic when hovering over the map for a particular state and color enhancements for numerical values d. code cleanup and integration into a single workflow 3) any challenges/issues being faced: a. time series data limited to prior 7-10 days b. api limited to 15-minute intervals (takes all day to collect five topic-words for all 50 states) c. spam/bot usage is rampant on twitter d. overlap in states/topics (including a gross over-weighting of political data due to residual election data) e. location data also severely limited and often inaccurate f. limited data for less populated states g. some topic words are insufficiently measurable (quality of life) or inherently biased (e.g. pollution) sentiment analysis of american states by topic natural language processing of tweets from the last 7 days using python david gutierrez university of illinois at urbana-champaign cs410: text information systems overview individual team (netid: davidmg4) goal: conduct a working sentiment analysis based on ""quality of life"" topics for all 50 states using twitter data to get a nearly-real time view of each state's qualities from real users. topics chosen: government weather economy nature lifestyle github repo: https://github.com/davidmg4/courseproject workflow apply for twitter developer account install and implement tweepy api for scraping tweet data in python write each to a csv file with state and topic tags clean tweets to prepare for natural language processing (remove non-text data, stop words, etc.) conduct analysis using pandas dataframe data structures and textblob's sentiment analysis algorithm include mean for each category and average them an 'overall score' for view in summary csv file as well as an interactive html file resources tweepy (twitter api) pandas (dataframes) nltk (stopwords) textblob (sentiment analysis) json/jquery/ajax (web features) bootstrap (web formatting) step 1: setup step 2: tweet scraping step 3: nlp and analysis step 3: nlp and analysis (cont'd) results results good template for folks who are indecisive about where they might want to move or travel allows for ranking and filtering of resultant data novel use of nlp for practical data and a ""finger on the pulse"" of social media users more context information would be useful, but still robust enough for most users limitations most limitations of this project are specific to twitter, subject to further study: free/educational developer account limited to tweet data from the last 7 to 10 days tweepy api rate limits cause lengthy delays in scraping time tweets by and large not geotagged for a specific location so including the state name was next-best-option sentiments only make sense on a relative scale - subject to fluctuation by type of users in the system as well as data availability limitations (e.g. not many tweets in/about north dakota) ideal case is to have a real time stream of twitter data analysis uploaded to the web with histogram data conclusion demonstrates a functional workflow for taking topic and context data to generate non-text data provides useable data interaction to compare and rank states based on topic sentiment as well as overall score easily adapted for other topics and/or geographies potential for even more data visualization and interactivity in the future lessons learned many readily available libraries and packages for nlp in python robust tools for reading and writing to csv files ability to craft and aggregate html code/documents from simple python scripts analysis only limited by quality of data (and processing time) had a lot of fun! cs410 course project documentation file sentiment analysis of american states by topic by david gutierrez individual team (netid: davidmg4) natural language processing of tweets from the last 7 days using python cs410: text information systems university of illinois at urbana-champaign video link to walkthrough: https://youtu.be/3uj9p5maygi note: private api keys for tweepy twitter api withheld. if you would like to run this code on your own machine, please email me at @illinois.edu"	['david', 'gutierrez', 'cs', 'text', 'information', 'systems', 'final', 'project', 'proposal', 'fall', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'individual', 'name', 'netid', 'davidmg', 'free', 'topic', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'sentiment', 'analysis', 'based', 'geography', 'united', 'states', 'using', 'twitter', 'tweetbased', 'break', 'geographic', 'region', 'subtopics', 'government', 'eg', 'corruption', 'weather', 'natural', 'disasters', 'quality', 'life', 'cost', 'living', 'pollution', 'air', 'lifestyle', 'traffic', 'help', 'people', 'make', 'informed', 'decisions', 'live', 'without', 'potential', 'biases', 'pitfalls', 'present', 'survey', 'data', 'expect', 'line', 'publicly', 'available', 'may', 'challenges', 'inherent', 'social', 'media', 'use', 'irony', 'sarcasm', 'plan', 'twitters', 'builtin', 'api', 'library', 'along', 'nltk', 'train', 'classifier', 'implement', 'collected', 'numpys', 'libraries', 'perform', 'statistical', 'measure', 'significance', 'create', 'threshold', 'value', 'positive', 'negative', 'considered', 'significant', 'perstate', 'basis', 'compared', 'generate', 'interactive', 'grid', 'user', 'able', 'sort', 'state', 'subtopic', 'well', 'apply', 'filters', 'narrow', 'specific', 'care', 'programming', 'language', 'python', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'list', 'main', 'tasks', 'completed', 'estimated', 'time', 'download', 'tweet', 'training', 'databaseinformation', 'retrieval', 'via', 'webscraping', 'develop', 'codebase', 'parse', 'presentation', 'webbased', 'intuitive', 'visualization', 'ii', 'b', 'c', 'november', 'course', 'progress', 'report', 'made', 'thus', 'far', 'successfully', 'applied', 'approved', 'developer', 'account', 'enabled', 'pull', 'recent', 'tweets', 'search', 'previous', 'ten', 'days', 'instead', 'prior', 'year', 'hoped', 'code', 'csv', 'file', 'resultant', 'read', 'second', 'script', 'loads', 'pandas', 'frames', 'parses', 'stopwords', 'pulling', 'textblob', 'zero', 'values', 'dropped', 'remaining', 'scores', 'averaged', 'together', 'produce', 'visualized', 'percentages', 'html', 'features', 'map', 'us', 'sortable', 'table', 'addition', 'composite', 'score', 'gauge', 'overall', 'across', 'five', 'topics', 'rerun', 'scraper', 'get', 'full', 'currently', 'truncated', 'characters', 'fully', 'dataviewerhtml', 'automatically', 'rework', 'css', 'enable', 'visual', 'histogram', 'hovering', 'particular', 'color', 'enhancements', 'numerical', 'cleanup', 'integration', 'single', 'workflow', 'challengesissues', 'faced', 'series', 'limited', 'minute', 'intervals', 'takes', 'day', 'collect', 'topicwords', 'spambot', 'usage', 'rampant', 'overlap', 'statestopics', 'including', 'gross', 'overweighting', 'political', 'due', 'residual', 'election', 'e', 'location', 'also', 'severely', 'often', 'inaccurate', 'f', 'less', 'populated', 'g', 'words', 'insufficiently', 'measurable', 'inherently', 'biased', 'american', 'processing', 'last', 'university', 'illinois', 'urbanachampaign', 'overview', 'goal', 'conduct', 'working', 'nearlyreal', 'view', 'qualities', 'real', 'users', 'chosen', 'economy', 'nature', 'github', 'repo', 'httpsgithubcomdavidmgcourseproject', 'install', 'tweepy', 'scraping', 'write', 'tags', 'clean', 'prepare', 'remove', 'nontext', 'stop', 'etc', 'dataframe', 'structures', 'textblobs', 'algorithm', 'include', 'mean', 'category', 'average', 'summary', 'resources', 'dataframes', 'jsonjqueryajax', 'web', 'bootstrap', 'formatting', 'step', 'setup', 'nlp', 'contd', 'results', 'good', 'template', 'folks', 'indecisive', 'might', 'want', 'move', 'travel', 'allows', 'ranking', 'filtering', 'novel', 'practical', 'finger', 'pulse', 'context', 'would', 'useful', 'still', 'robust', 'enough', 'limitations', 'subject', 'study', 'freeeducational', 'rate', 'limits', 'cause', 'lengthy', 'delays', 'large', 'geotagged', 'nextbestoption', 'sentiments', 'sense', 'relative', 'scale', 'fluctuation', 'type', 'system', 'availability', 'many', 'inabout', 'north', 'dakota', 'ideal', 'case', 'stream', 'uploaded', 'conclusion', 'demonstrates', 'functional', 'taking', 'provides', 'useable', 'interaction', 'compare', 'rank', 'easily', 'adapted', 'andor', 'geographies', 'even', 'interactivity', 'future', 'lessons', 'learned', 'readily', 'packages', 'reading', 'writing', 'files', 'ability', 'craft', 'aggregate', 'codedocuments', 'simple', 'scripts', 'lot', 'fun', 'documentation', 'video', 'link', 'walkthrough', 'httpsyoutubeujpmaygi', 'note', 'private', 'keys', 'withheld', 'like', 'run', 'machine', 'email', 'illinoisedu']
https://github.com/davidtt2/CourseProject	"david tran (davidtt2) cs410 fall2020 project final report and documentation 1 cs410 project final report: free topic - topic mining david tan sang tran (davidtt2@illinois.edu) https://github.com/davidtt2/courseproject overview of the function of the code this project uses a text retrieval method through python's pandas & selenium in order to gain information about the top companies in the technology industry. after retrieving that information, the python file will generate a json file within the angular project that will be read and displayed in the user interface. from the user interface, the user can search for technology companies by name. the expected results from this code is that whenever the python file is ran, it will obtain the top technology companies for that year. for example, if this code was run in 2021, it will produce similar results with those top companies without any failure or bugs. software implementation (how to run) 1) clone project (git clone https://github.com/davidtt2/courseproject.git) 2) run ""cs410 project data.py"" (keep file structure unchanged) - requires file to be in same directory as cs410-project - requires chromedriver.exe in same directory as py file (also requires chrome) - different versions can be downloaded at https://chromedriver.chromium.org/downloads - python file will run selenium webdriver scripts - after, it will create a companies.json info file at root and in angular project 3) cd to /cs410-project/src 4) run the angular script (ng serve -o) 5) ui will open in browser documented usages for this project this project relies on python and angular. modules that may need to be imported/installed to run: - npm install @angular/cli - ng add @angular/material - pip install pandas - pip install selenium - others future goals the current future goals are to add a dropdown for each company that shows their career websites and have useful information to prospective students looking for a place to join. besides having this dropdown with extra information, i plan to implement a recommendation system based on the companies that the user has searched for. team member contributions because this was a single member team, i completed all the work on my own. task project hours research and ui mockup 5 hours topic mining to retrieve data in python 15 hours parsing useful information from data retrieved 10 hours developing the ui in angular 10 hours connecting the angular ui with the data 5 hours testing the ui and python 5 hours total: 50 hours david tran (davidtt2) cs410 fall2020 project final report and documentation 2 current user interface video https://youtu.be/mfulodao55q please contact me for any comments or questions. cs410 final project progress report: free topic - topic mining david tan sang tran (davidtt2@illinois.edu) https://github.com/davidtt2/courseproject 1) which tasks have been completed? task 1: created a wireframe mockup of the interface and its interactions - designed mockup for site - decided which data is relevant task 2: basic layout of the user interface in angular and typescript - basic components set up - mock data inputted until python data scrape is finished task 3: basic method of data collection in python - collected data from relevant websites - removed html tags 2) which tasks are pending? task 1: clean up the data retrieved from python data scrape task 2: add more information in a drop-down under each company task 3: add content-based filtering based on user click to generate recommendation. task 4: fix up the user interface 3) are you facing any challenges? challenge 1: figuring out how to transfer data from python scrape to typescript challenge 2: formatting the objects in the user interface screenshot of current ui: (work in progress) cs410 final project proposal: free topic - topic mining david tan sang tran (davidtt2@illinois.edu) https://github.com/davidtt2/courseproject 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. one team member name netid captain david tan sang tran davidtt2 yes 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? free topic/task: i plan to create a website that displays information about top software companies, including technologies used, headquarters information, links to applications, internship opportunities, and other relevant information. (this project would be similar to the expertsearch, but i will build this project from scratch). interesting: this will be interesting because it would be good for computer science students to see a compiled list of all relevant companies that they can apply to after graduation. technologies, tools, systems: i plan to use python with a text mining algorithm to parse links and collect data about all of the top software companies available. selenium and requests will be used to collect the information, and then pandas will be used to transfer the data into csv sheets. after the data is collected, typescript and angular will be used to display the data and ui. datasets will be the internet and various links which would be where the information is collected. expected outcome: the expected outcome is a website that houses all the top technology company information for students to view and use for applications. self-evaluation: i will evaluate my work based on how well i meet my own expectations. i expect a fully functioning website that will have a nice ui and all the needed information about the various companies. 3. which programming language do you plan to use? to collect the data, i will use python, selenium, requests, and pandas. for the website, i will use angular, typescript, ng-charts, and angular material library. 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. task estimated hours research and ui mockup 3 hours topic mining to retrieve data in python 10 hours parsing useful information from data retrieved 5 hours developing the ui in angular 10 hours connecting the angular ui with the data 2 hours testing the ui and python 5 hours total: 35 hours https://www.youtube.com/watch?v=mfulodao55q please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. courseproject cs410fall2020 david tan sang tran (davidtt2) { individual team } david tran project proposal david tran progress report david tran final report and documentation david tran project video how to run 1) clone project (git clone https://github.com/davidtt2/courseproject.git) 2) run ""cs410 project data.py"" (keep file structure unchanged) - requires file to be in same directory as cs410-project - requires chromedriver.exe in same directory as py file (also requires chrome) - different versions can be downloaded at https://chromedriver.chromium.org/downloads - python file will run selenium webdriver scripts - after, it will create a companies.json info file at root and in angular project 3) cd to /cs410-project/src 4) run the angular script (ng serve -o) 5) ui will open in browser modules that may need to be imported/installed to run: - npm install @angular/cli - ng add @angular/material - pip install pandas - pip install selenium - others description this project uses a text retrieval method through python's pandas & selenium in order to gain information about the top companies in the technology industry. after retrieving that information, the python file will generate a json file within the angular project that will be read and displayed in the user interface. from the user interface, the user can search for technology companies by name. please contact me for any assistance or comments. (davidtt2@illinois.edu)"	['david', 'tran', 'davidtt', 'cs', 'fall', 'project', 'final', 'report', 'documentation', 'free', 'topic', 'mining', 'tan', 'sang', 'davidttillinoisedu', 'httpsgithubcomdavidttcourseproject', 'overview', 'function', 'code', 'uses', 'text', 'retrieval', 'method', 'pythons', 'pandas', 'selenium', 'order', 'gain', 'information', 'top', 'companies', 'technology', 'industry', 'retrieving', 'python', 'file', 'generate', 'json', 'within', 'angular', 'read', 'displayed', 'user', 'interface', 'search', 'name', 'expected', 'results', 'whenever', 'ran', 'obtain', 'year', 'example', 'run', 'produce', 'similar', 'without', 'failure', 'bugs', 'software', 'implementation', 'clone', 'git', 'httpsgithubcomdavidttcourseprojectgit', 'datapy', 'keep', 'structure', 'unchanged', 'requires', 'directory', 'csproject', 'chromedriverexe', 'py', 'also', 'chrome', 'different', 'versions', 'downloaded', 'httpschromedriverchromiumorgdownloads', 'webdriver', 'scripts', 'create', 'companiesjson', 'info', 'root', 'cd', 'csprojectsrc', 'script', 'ng', 'serve', 'ui', 'open', 'browser', 'documented', 'usages', 'relies', 'modules', 'may', 'need', 'importedinstalled', 'npm', 'install', 'angularcli', 'add', 'angularmaterial', 'pip', 'others', 'future', 'goals', 'current', 'dropdown', 'company', 'shows', 'career', 'websites', 'useful', 'prospective', 'students', 'looking', 'place', 'join', 'besides', 'extra', 'plan', 'implement', 'recommendation', 'system', 'based', 'searched', 'team', 'member', 'contributions', 'single', 'completed', 'work', 'task', 'hours', 'research', 'mockup', 'retrieve', 'data', 'parsing', 'retrieved', 'developing', 'connecting', 'testing', 'total', 'video', 'httpsyoutubemfulodaoq', 'please', 'contact', 'comments', 'questions', 'progress', 'tasks', 'created', 'wireframe', 'interactions', 'designed', 'site', 'decided', 'relevant', 'basic', 'layout', 'typescript', 'components', 'set', 'mock', 'inputted', 'scrape', 'finished', 'collection', 'collected', 'removed', 'html', 'tags', 'pending', 'clean', 'contentbased', 'filtering', 'click', 'fix', 'facing', 'challenges', 'challenge', 'figuring', 'transfer', 'formatting', 'objects', 'screenshot', 'proposal', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'one', 'netid', 'yes', 'give', 'detailed', 'description', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'outcome', 'going', 'evaluate', 'topictask', 'website', 'displays', 'including', 'technologies', 'used', 'headquarters', 'links', 'applications', 'internship', 'opportunities', 'would', 'expertsearch', 'build', 'scratch', 'good', 'computer', 'science', 'see', 'compiled', 'list', 'apply', 'graduation', 'use', 'algorithm', 'parse', 'collect', 'available', 'requests', 'csv', 'sheets', 'display', 'internet', 'various', 'houses', 'view', 'selfevaluation', 'well', 'meet', 'expectations', 'expect', 'fully', 'functioning', 'nice', 'needed', 'programming', 'language', 'ngcharts', 'material', 'library', 'justify', 'workload', 'least', 'n', 'number', 'main', 'estimated', 'time', 'cost', 'httpswwwyoutubecomwatchvmfulodaoq', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'courseproject', 'csfall', 'individual', 'assistance']
https://github.com/difangu/CourseProject	"12/10/2020 cs 410 - text information system difan gu, yanyue wang, wen long team aplus final documentation overview: oftentimes, users found it's hard to fathom the information that they barely learnt before. for example, how are we able to answer the question, ""what is data science?"", especially to an outsider? how are we able to clarify the definition of ""data science"" or ""computer science"" by borrowing more basic or common words or terms to further help our users to understand? our implementation of a semantic annotation algorithm based on the paper, ""generating semantic annotations for frequent patterns with context analysis"", can achieve the goal. the final goal is to automatically decipher certain words, terms, and even sentences by providing its highly-associated while distinct frequent patterns in semantic text form. in our case, to be more specific, we used the algorithm to summarize what specialty each college published in major computer science conferences. the digital bibliography & library project (dblp) computer science bibliography acts as good study material for our project. it contains the metadata of more than 1.8 million publications in thousands of journals and conferences proceeding series written by over 1 million authors. it first started to be a bibliography on database systems and logic programming but has since expanded to all fields of computer science. from this well-structured dataset, we selected three top u.s.-based universities including massachusetts institute of technology (mit), georgia institute of technology (gt), and the university of maryland (umd) as our use case. by implementing the algorithm, we can extract a series of words or terms to differentiate their academic focus based on thousands of paper titles published throughout the years: some colleges will be more inclined to data analysis, the others will more concentrate on wireless systems. in the real world, the utilization of automatic annotation can also be universal: users can use the algorithm to understand not-well-defined text information such as ""nlp"", ""machine learning"" and ""deep learning"" that is not defined in the dictionary such as merriam webster. step 1: load, clean raw data, and tokenization as can be seen in figure 1, the software first converts the xml file downloaded from dblp into a string format and output a table. every publication was saved as a single string. then all the elements inside the xml schema were saved as an item inside a dictionary, with the key being the name of the element and the value being the content. another list has been created for every single publication as an element, describing the affiliated university as well as the publication title. we then ranked these universities by their number of publications and printed the top 50. every title of the publication was then tokenized word by word. each token was assigned an integer for further mining. figure 1. workflow of step 1. step 2: selecting sample titles from target schools step 2 serves as a pre-processing step for pattern mining. we ranked top 10 universities around the world based on their publication and saved their titles in a long single string, but only those publications from us universities were used for pattern mining simply because english titles are easier to understand. the universities chosen are mit, gt, and umd. step 3: pattern mining in this step, we loaded publication titles by the above universities and loaded the frequent patterns mined by clospan, a software package of mining closed sequential patterns in a sequence database. step 4. feature pattern selection redundancy removal was performed so that duplicate items are removed from the mined frequent patterns. the resulting patterns from each university were ranked based on mutual information. the integrated patterns were finally converted to words via a built-in dictionary. technical details: a) load, clean raw data, and tokenization -input: -dblp.xml is the source file downloaded from the dblp computer science bibliography figure 2. dblp xml file - implementation of the software - script file: dblp_1.ipynb - language: pyspark - environment: azure synapse(spark) - output - dblp_school.txt is the text documents that contain all school names that are in the same order as dblp_title.txt figure 3. school names in dblp - dblp_title.txt is the text document that contains all titles of papers published by varieties of colleges across the world. it shares the same order as dblp_school.txt. most importantly, all of the words have been converted into integers where the mapping can be found in dblp_word.txt figure 4. integerized publication titles. - dblp_word.txt is the dictionary that has the mapping between integers to words. figure 5. the word-to-integer dictionary b) selecting sample titles from target schools: - input: - dblp_school.txt is the text documents that contain all school names that are in the same order as dblp_title.txt - dblp_title.txt is the text document that contains all titles of papers published by varieties of colleges across the world. it shares the same order as dblp_school.txt. most importantly, all of the words have been converted into integers where the mapping can be found in dblp_word.txt - dblp_word.txt is the dictionary that has the mapping between integers to words. - process: - school_pattern_creator.ipynb is the pre-processing step that achieves the goal of selecting the sample school that users want to make the comparison. in our case, we select all of the titles published by 3 major u.s colleges. - - output: the output is a series of titles grouped by each college. for example, in the picture below where you can find 0 is mapped to university of satilde, therefore output0.txt includes all titles belonging to university of satilde. however, in order to improve interpretability, we choose output3.txt, output5.txt, and output8.txt as our samples. however, we encourage our users to explore more colleges. - school0.txt - school1.txt - school2.txt - school3.txt - school4.txt - school5.txt - school6.txt - school7.txt - school8.txt - school9.txt c) pattern mining: - input: - school2.txt contains all titles from mit - school8.txt contains all titles from gt - school9.txt contains all titles from uom - process: - clospan is a closed pattern mining algorithm that is able to find a series of highly associated patterns in the sequence database. it was proposed by yan et al. (2003). we use clospan to extract ""most common"" word or term patterns in each title grouped by each college. - spmf.jar is required to run clospan in the same directory. the following java code is to generate the closed frequent patterns for each college. there is only 1 main parameter, called support. it defines pattern commonality. users can adjust the parameters to explore. - java -jar spmf.jar run clospan school3.txt output3.txt 1% - java -jar spmf.jar run clospan school5.txt output5.txt 0.5% - java -jar spmf.jar run clospan school8.txt output8.txt 3% - output: - output2.txt is the frequent pattern from university of maryland - output8.txt is the frequent pattern from mit - output9.txt is the frequent pattern from georgia institute of technology d) feature pattern selection: - input: - school2.txt - school8.txt - school9.txt - output2.txt - output8.txt - output9.txt i - dblp_word.txt - process: - remove redundancy is to mitigate redundancy issues in the frequent pattern. for example, in the picture shown below, there are a lot of redundant words in a single transaction due to the way we pre-process the terms. and we found simply taking unique items in the pattern while keeping the word/term orders will be effective. for example, [1,-1,1,1,1, -1, 2, -2] will be reduced to [1, -1, 2, -2] where all positive integers represent a unique word while -1 separates two itemsets and -2 imply the end of the sentence. - feature pattern selection by mutual information is to extract the most distinct pattern among all of the schools with high frequency. two schools might have shared the same focus, for example, both mit and gt might focus on ""system"" while mit might pay more attention to ""design"" while gt might give more weight to ""architecture"". therefore, ""system"" is not the best candidate to define the difference between mit and gt, while ""design"" and ""architecture"" are. we want to give more weight to ""design"" and ""architecture"" however not losing the importance of ""system"" as well. - word conversion is the last step. till the previous step, we worked on a series of numbers for each transaction that represents a unique word. now we convert back to words based on the dictionary so that we are able to understand the meaning. - output: - each college with its most distinct and representative words or terms to demonstrate their academic focus in computer science conferences. all of the words/terms have been ranked descendingly. we will get the top 5 terms/words for demonstration. conclusion: we may sense a different focus for each school. for example, mit focuses a lot on system control and power/energy-related topics; gt focuses more on programming and framework; uom puts a lot of attention on wireless networks as well as object recognition, which might be in the computer vision area. * mit: ""system control"", ""power, energy"", ""control, analysis"", ""power, applications"", ""systems, large"" * gt: ""programming"", ""framework"", ""management"", ""problems"", ""approach"" * uom: ""resource, wireless"", ""embedded, systems"", ""networks, resource"", ""recognition, object"", ""social"" demo steps: we've shared voiced video here 1. download file annotation from our github 2. open terminal and cd to the directory annotation 3. python school_pattern_creator.py 4. java -jar spmf.jar run clospan ./school_output/school9.txt ./pattern_output/output9.txt 1% 5. java -jar spmf.jar run clospan ./school_output/school2.txt ./pattern_output/output2.txt 0.5% 6. java -jar spmf.jar run clospan ./school_output/school8.txt ./pattern_output/output8.txt 3% 7. python pattern_decipher.py 8. you can find the final output in ./annotation/outcome team responsibilities: * difan gu is responsible for the core algorithm development including mutual information, data preprocessing, pattern mining and frequent pattern selection, also contributed to the final report, documentation and presentation. * wen long is responsible for data preprocessing from xml, association mining. he also contributed to the final report and documentation. * yanyue wang has brainstormed and researched publications concerning frequent pattern mining. she also documented the pattern mining process. reference: kdd '06: proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining august 2006 pages 337-346 https://doi.org/10.1145/1150402.1150441 clospan: mining closed sequential patterns in large datasets, by x. yan, j. han, and r. afshar. proc. of 2003 siam int. conf. data mining (sdm'03), 2003 11/28/2020 cs 410 - text information system difan gu, yanyue wang, wen long team aplus progress report 1) which tasks have been completed? - researched pattern mining and generated ideas on how to demonstrate the significance of analyzing frequent patterns with context units. - understood the main steps and algorithms (hierarchical and one-step microclustering, etc.) mentioned in the paper. - loaded and cleaned source data from https://dblp.uni-trier.de/xml - implemented vector space modeling on the dblp dataset mentioned in the paper, constructed a set of frequent models. - selected context units as patterns (minimal units that carry semantic information in a dataset). - in summary, we completed about 30% of the paper. 2) which tasks are pending? - redundancy removing - strength weighting for context units - extracting strongest context indicator - extracting representative transactions - extracting semantically similar patterns 3) are you facing any challenges? - some parts of algorithms are too complicated to implement within a short period of time. we may need simplification in order to deliver a reasonable outcome. - dataset is large and we may need some time to perform more detailed data cleaning and manipulation - collaboration of the project development generating semantic annotations for frequent patterns with context analysis click here for voiced presentation & demo for grader oftentimes, users found it's hard to fathom the information that they barely learnt before. for example, how are we able to answer the question, ""what is data science?"", especially to an outsider? how are we able to clarify the definition of ""data science"" or ""computer science"" by borrowing more basic or common words or terms to further help our users to understand? our implementation of a semantic annotation algorithm based on the paper, ""generating semantic annotations for frequent patterns with context analysis"", can achieve the goal. the final goal is to automatically decipher certain words, terms, and even sentences by providing its highly-associated while distinct frequent patterns in semantic text form. in our case, to be more specific, we used the algorithm to summarize what specialty each college published in major computer science conferences. the digital bibliography & library project (dblp) computer science bibliography acts as good study material for our project. it contains the metadata of more than 1.8 million publications in thousands of journals and conferences proceeding series written by over 1 million authors. it first started to be a bibliography on database systems and logic programming but has since expanded to all fields of computer science. from this well-structured dataset, we selected three top u.s.-based universities including massachusetts institute of technology (mit), georgia institute of technology (gt), and the university of maryland as our user case. by implementing the algorithm, we can extract a series of words or terms to differentiate their academic focus based on thousands of paper titles published throughout the years: some colleges will be more inclined to data analysis, the others will more concentrate on wireless systems. in the real world, the utilization of automatic annotation can also be universal: users can use the algorithm to understand not-well-defined text information such as ""nlp"", ""machine learning"" and ""deep learning"" that is not defined in the dictionary such as merriam webster. reference: kdd '06: proceedings of the 12th acm sigkdd international conference on knowledge discovery and data miningaugust 2006 pages 337-346https://doi.org/10.1145/1150402.1150441"	['cs', 'text', 'information', 'system', 'difan', 'gu', 'yanyue', 'wang', 'wen', 'long', 'team', 'aplus', 'final', 'documentation', 'overview', 'oftentimes', 'users', 'found', 'hard', 'fathom', 'barely', 'learnt', 'example', 'able', 'answer', 'question', 'data', 'science', 'especially', 'outsider', 'clarify', 'definition', 'computer', 'borrowing', 'basic', 'common', 'words', 'terms', 'help', 'understand', 'implementation', 'semantic', 'annotation', 'algorithm', 'based', 'paper', 'generating', 'annotations', 'frequent', 'patterns', 'context', 'analysis', 'achieve', 'goal', 'automatically', 'decipher', 'certain', 'even', 'sentences', 'providing', 'highlyassociated', 'distinct', 'form', 'case', 'specific', 'used', 'summarize', 'specialty', 'college', 'published', 'major', 'conferences', 'digital', 'bibliography', 'library', 'project', 'dblp', 'acts', 'good', 'study', 'material', 'contains', 'metadata', 'million', 'publications', 'thousands', 'journals', 'proceeding', 'series', 'written', 'authors', 'first', 'started', 'database', 'systems', 'logic', 'programming', 'since', 'expanded', 'fields', 'wellstructured', 'dataset', 'selected', 'three', 'top', 'usbased', 'universities', 'including', 'massachusetts', 'institute', 'technology', 'mit', 'georgia', 'gt', 'university', 'maryland', 'umd', 'use', 'implementing', 'extract', 'differentiate', 'academic', 'focus', 'titles', 'throughout', 'years', 'colleges', 'inclined', 'others', 'concentrate', 'wireless', 'real', 'world', 'utilization', 'automatic', 'also', 'universal', 'notwelldefined', 'nlp', 'machine', 'learning', 'deep', 'defined', 'dictionary', 'merriam', 'webster', 'step', 'load', 'clean', 'raw', 'tokenization', 'seen', 'figure', 'software', 'converts', 'xml', 'file', 'downloaded', 'string', 'format', 'output', 'table', 'every', 'publication', 'saved', 'single', 'elements', 'inside', 'schema', 'item', 'key', 'name', 'element', 'value', 'content', 'another', 'list', 'created', 'describing', 'affiliated', 'well', 'title', 'ranked', 'number', 'printed', 'tokenized', 'word', 'token', 'assigned', 'integer', 'mining', 'workflow', 'selecting', 'sample', 'target', 'schools', 'serves', 'preprocessing', 'pattern', 'around', 'us', 'simply', 'english', 'easier', 'chosen', 'loaded', 'mined', 'clospan', 'package', 'closed', 'sequential', 'sequence', 'feature', 'selection', 'redundancy', 'removal', 'performed', 'duplicate', 'items', 'removed', 'resulting', 'mutual', 'integrated', 'finally', 'converted', 'via', 'builtin', 'technical', 'details', 'input', 'dblpxml', 'source', 'script', 'dblp_ipynb', 'language', 'pyspark', 'environment', 'azure', 'synapsespark', 'dblp_schooltxt', 'documents', 'contain', 'school', 'names', 'order', 'dblp_titletxt', 'document', 'papers', 'varieties', 'across', 'shares', 'importantly', 'integers', 'mapping', 'dblp_wordtxt', 'integerized', 'wordtointeger', 'b', 'process', 'school_pattern_creatoripynb', 'achieves', 'want', 'make', 'comparison', 'select', 'grouped', 'picture', 'find', 'mapped', 'satilde', 'therefore', 'outputtxt', 'includes', 'belonging', 'however', 'improve', 'interpretability', 'choose', 'samples', 'encourage', 'explore', 'schooltxt', 'c', 'uom', 'highly', 'associated', 'proposed', 'yan', 'et', 'al', 'term', 'spmfjar', 'required', 'run', 'directory', 'following', 'java', 'code', 'generate', 'main', 'parameter', 'called', 'support', 'defines', 'commonality', 'adjust', 'parameters', 'jar', 'remove', 'mitigate', 'issues', 'shown', 'lot', 'redundant', 'transaction', 'due', 'way', 'preprocess', 'taking', 'unique', 'keeping', 'wordterm', 'orders', 'effective', 'reduced', 'positive', 'represent', 'separates', 'two', 'itemsets', 'imply', 'end', 'sentence', 'among', 'high', 'frequency', 'might', 'shared', 'pay', 'attention', 'design', 'give', 'weight', 'architecture', 'best', 'candidate', 'define', 'difference', 'losing', 'importance', 'conversion', 'last', 'till', 'previous', 'worked', 'numbers', 'represents', 'convert', 'back', 'meaning', 'representative', 'demonstrate', 'wordsterms', 'descendingly', 'get', 'termswords', 'demonstration', 'conclusion', 'may', 'sense', 'different', 'focuses', 'control', 'powerenergyrelated', 'topics', 'framework', 'puts', 'networks', 'object', 'recognition', 'vision', 'area', 'power', 'energy', 'applications', 'large', 'management', 'problems', 'approach', 'resource', 'embedded', 'social', 'demo', 'steps', 'weve', 'voiced', 'video', 'download', 'github', 'open', 'terminal', 'cd', 'python', 'school_pattern_creatorpy', 'school_outputschooltxt', 'pattern_outputoutputtxt', 'pattern_decipherpy', 'annotationoutcome', 'responsibilities', 'responsible', 'core', 'development', 'contributed', 'report', 'presentation', 'association', 'brainstormed', 'researched', 'concerning', 'documented', 'reference', 'kdd', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'august', 'pages', 'httpsdoiorg', 'datasets', 'x', 'j', 'han', 'r', 'afshar', 'proc', 'siam', 'int', 'conf', 'sdm', 'progress', 'tasks', 'completed', 'generated', 'ideas', 'significance', 'analyzing', 'units', 'understood', 'algorithms', 'hierarchical', 'onestep', 'microclustering', 'etc', 'mentioned', 'cleaned', 'httpsdblpunitrierdexml', 'implemented', 'vector', 'space', 'modeling', 'constructed', 'set', 'models', 'minimal', 'carry', 'summary', 'pending', 'removing', 'strength', 'weighting', 'extracting', 'strongest', 'indicator', 'transactions', 'semantically', 'similar', 'facing', 'challenges', 'parts', 'complicated', 'implement', 'within', 'short', 'period', 'time', 'need', 'simplification', 'deliver', 'reasonable', 'outcome', 'perform', 'detailed', 'cleaning', 'manipulation', 'collaboration', 'click', 'grader', 'user', 'miningaugust']
https://github.com/dilipis/CourseProject	project proposal document 1. this will be an individual project. name: dilip ravindran netid: dilipr2 2. text classification competition 3. i am prepared to learn state-of-the-art neural network classifiers. i have heard of deep learning frameworks like tensorflow and pytorch. i am also aware of classifiers like lstm, gru, bert etc. however, i do not have any working experience in any of these tools/ frameworks. i hope to use this as an opportunity to get familiar with these frameworks and get some hands-on experience. 4. python progress made * figuring out how bert can be used for text classification * setting up google colab and running some sample text classifications remaining tasks * implement the solution * documentation * creating presentation challenges * figuring out an optimal model * need to devote a lot of time in the coming days as progress has been slow. sarcasm detection using bert this project uses nlp techniques to classify if tweets are sarcastic or not. bert is used to train the model and arrive at the predictions. how to run the code the executable code resides in the file sentiment_analysis_with_bert.ipynb. this code needs to be directly executed from google colab. click on the button below to open the file in colab. once in colab, the code needs to run on a gpu. from colab, navigate to edit> notebook settings. select gpu from the hardware accelerator dropdown the notebook can be executed by executing all the code blocks in order by clicking on the black 'play' button at the top of each block. in the end, all the predictions are stored in answer.txt in the output folder in the workspace. a video tutorial is available here how the code works this project uses bert (bidirectional encoder representations from transformers) which is a state-of-the-art machine learning model used for nlp tasks. bert is a pre-trained nlp model which can be further trained to solve several text classification problems. bert makes use of transformer, an attention mechanism that learns contextual relations between words (or sub-words) in a text. the huggingface transformers library is used to get the bert model that works with tensorflow. this is how the code works at the high level copy the testing and training data from github to the colab workspace read the testing and training data from jsonl file and convert them into a csv file clean the input data by removing url and user tags from the tweets split the training dataset into training and validation. this will be used to train the model. extract only the required columns for further processing. create the bert model and tokenizer convert the training and validation data into the bert format using the helper functions defined above use model.compile to set the optimizer, loss function that bert will use to train the model call model.fit to actually train the model based on the training and validation data make predictions on the test data based on the trained model. write the resuts to answer.txt in the output folder in the workspace. dependencies python tensorflow transformers pandas sklearn os urllib jsonlines csv references sentiment analysis in 10 minutes with bert and tensorflow by orhan g. yalcin figlang2020-sarcasm-detection github	['project', 'proposal', 'document', 'individual', 'name', 'dilip', 'ravindran', 'netid', 'dilipr', 'text', 'classification', 'competition', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'heard', 'deep', 'learning', 'frameworks', 'like', 'tensorflow', 'pytorch', 'also', 'aware', 'lstm', 'gru', 'bert', 'etc', 'however', 'working', 'experience', 'tools', 'hope', 'use', 'opportunity', 'get', 'familiar', 'handson', 'python', 'progress', 'made', 'figuring', 'used', 'setting', 'google', 'colab', 'running', 'sample', 'classifications', 'remaining', 'tasks', 'implement', 'solution', 'documentation', 'creating', 'presentation', 'challenges', 'optimal', 'model', 'need', 'devote', 'lot', 'time', 'coming', 'days', 'slow', 'sarcasm', 'detection', 'using', 'uses', 'nlp', 'techniques', 'classify', 'tweets', 'sarcastic', 'train', 'arrive', 'predictions', 'run', 'code', 'executable', 'resides', 'file', 'sentiment_analysis_with_bertipynb', 'needs', 'directly', 'executed', 'click', 'button', 'open', 'gpu', 'navigate', 'edit', 'notebook', 'settings', 'select', 'hardware', 'accelerator', 'dropdown', 'executing', 'blocks', 'order', 'clicking', 'black', 'play', 'top', 'block', 'end', 'stored', 'answertxt', 'output', 'folder', 'workspace', 'video', 'tutorial', 'available', 'works', 'bidirectional', 'encoder', 'representations', 'transformers', 'machine', 'pretrained', 'trained', 'solve', 'several', 'problems', 'makes', 'transformer', 'attention', 'mechanism', 'learns', 'contextual', 'relations', 'words', 'subwords', 'huggingface', 'library', 'high', 'level', 'copy', 'testing', 'training', 'data', 'github', 'read', 'jsonl', 'convert', 'csv', 'clean', 'input', 'removing', 'url', 'user', 'tags', 'split', 'dataset', 'validation', 'extract', 'required', 'columns', 'processing', 'create', 'tokenizer', 'format', 'helper', 'functions', 'defined', 'modelcompile', 'set', 'optimizer', 'loss', 'function', 'call', 'modelfit', 'actually', 'based', 'make', 'test', 'write', 'resuts', 'dependencies', 'pandas', 'sklearn', 'os', 'urllib', 'jsonlines', 'references', 'sentiment', 'analysis', 'minutes', 'orhan', 'g', 'yalcin', 'figlangsarcasmdetection']
https://github.com/dinghuaminghui/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/dixonliang/CS410CourseProject	"sentiment analysis of soccer games natural language processing of twitter in python using tweepy, textblob, and bm25okapi dixon liang university of illinois urbana-champaign mcs - cs 410 general information example game: chelsea vs. leeds united (12/5/2020), chelsea won 3-1. ziyech and koch went off injured player ratings consensus: entire chelsea team played well several players could have been motm entire leeds team was ok two parts sentiment analysis using textblob ranking using bm25okapi everything can be found on my github (https://github.com/dixonliang) file used: ""12_5_20_chelsealeeds_demo.ipynb"" empty demo: ""demo.ipynb"" open to collaboration  setting game parameters sentiment algorithm parameters number of tweets to be retrieved for each player (limited by api) threshold for subjectivity date range sentiment algorithm: part 1 sentiment algorithm: part 2 sentiment results chelsea example tweets kante (cm): [['rt @statmandave: n'golo kante vs. leeds united [chelsea rank]:\n\n12 ball recoveries [1st]\n3 tackles won [=1st]\n2 interceptions [=1st]\n\ndoing...', -0.8] ['rt @marshyleeds: kante was the best player on the field and made the difference for chelsea. has that change of pace in midfield we sometim...', 1.0]] the negative sentiment tweet does not appear to be accurate... we can use bm25okapi to further investigate... mendy (gk): [@goal our starting 11 have all scored\nremains mendy\nhold on a second, he is keeping goals from entering, win win for chelsea', 0.4], ['the presence of mendy and thiago have given chelsea a huge impact at defensive line https://t.co/cd93qjlylc', 0.4]"" did not have any negative sentiment tweets leeds example tweets philips (cm): [kevin phillips deserves to play for a top 5 team, the guy is so good. he literally runs this leeds team.', 0.6] some negative tweets, but not particularly focused on him likely best player on the field for leeds based on this - seemed to be agreed by other match ratings cooper (cb): [['@leeds_lord cooper was terrible. hideously exposed.', -1.0], ['@kennybrown1964 @maz7555 llorente was class. it's cooper who is and always has been the weak link. hopefully that's... https://t.co/68jwj2rx0w', -0.375] [""@laurencewegner i thought he was good cooper did well, yeah but for me have to credit chelsea's movement in the box... https://t.co/jjwhyfbfgw"", 0.7] some very negative tweets, some positive tweets implies wasn't great, but wasn't terrible as some suggest bm25okapi for context chelsea bm25okapi results kante matching most of the positive terms giroud, werner, chilwell all had decent games as well werner seems to have had a great game taking the two into consideration ziyech injury, chilwell foul (var) leeds bm25okapi results for most part matches the sentiment rating bamford was the goal scorer for leeds phillips confirmed best player for leeds based on the two koch injury dallas matches the most ""bad terms"", was one of the lowest ranked players in sentiment conclusion and improvements provides accurate idea of what happened in each game bm25okapi is flexible, will provided needed context in the cases where sentiment analysis might not make sense can easily be adapted to other sports can be extended for multiple games or even an entire season algorithm likely needs to be improved efficiency poor and api limitations best to be used with statistical analysis open to work with others!  11/30/20 which tasks have been completed? pretty much all the source code has all been finished. the remaining coding work will be if i want to make any additional improvements. i have also implemented all the code into a jupyter notebook which i will use for a demo. most of the tutorial and description in that has been finished. i have broken the code down into two parts: basic sentiment analysis and implementation of bm25okapi to give some more context of the contents of score. the first part of the code uses tweepy to source tweets and then textblob's sentiment analysis to classify. every starting player from each team will receive an average sentiment score based on the classification of these tweets. there is also code that outputs the results visually. the second part of the code uses bm25okapi ranking to find specific tweets that might have contributed to the sentiment analysis. these findings are also visualized. which tasks are pending? the two main tasks that are pending are the demo run in video and documentation. if i have some more time, perhaps more can be done to improve the overall implementation / clean up of the code for efficiency in the future. i am currently working through the documentation on my github page which is part of the readme. the documentation will provide further detail as to what exactly each part of the code does as well as my thought process. i have also chosen to use a jupyter notebook to provide a step by step on how to run through my code. i have written most of the instructions and tutorial in that but will likely refine it some more. given the limitations of the twitter api access (more below), i will likely wait to run the demo along with the video closer to the due date. i will likely provide one notebook with the results of my run through so others can follow along with the results and then a notebook with a blank implementation for free use. are you facing any challenges? there are a few challenges that either fall into the category of text retrieval regarding the api or further improvement of the algorithm. the twitter api access is an issue as the free version only retrieves a limited number of tweets over only the past 7 days. this makes it a bit difficult to set a demo of the code, but i will likely just have to set a game that i want to use for the demo run in the coming week to not cut it too close to the deadline. the other challenge is that tweepy is slow in retrieving many tweets, especially given the twitter api limitations of how many times i can call it. for speed purposes, i will likely have to set the number of tweets per player at 100 for my demo. as for the algorithm, there are some areas that could be improved beyond the basic implementation. teams and players can go by a handful of names so it would be useful to be able to count all occasions. however, for the most part, there is usually a more popular name that each team or player is referred to. as for most nlp, more work can be done in finding deeper meaning in words especially when the tweets are more contextually complex. if multiple players are mentioned in a tweet or previous references are made, it can be difficult to classify if a tweet is positive or negative for a particular player. 11/30/20 which tasks have been completed? pretty much all the source code has all been finished. the remaining coding work will be if i want to make any additional improvements. i have also implemented all the code into a jupyter notebook which i will use for a demo. most of the tutorial and description in that has been finished. i have broken the code down into two parts: basic sentiment analysis and implementation of bm25okapi to give some more context of the contents of score. the first part of the code uses tweepy to source tweets and then textblob's sentiment analysis to classify. every starting player from each team will receive an average sentiment score based on the classification of these tweets. there is also code that outputs the results visually. the second part of the code uses bm25okapi ranking to find specific tweets that might have contributed to the sentiment analysis. these findings are also visualized. which tasks are pending? the two main tasks that are pending are the demo run in video and documentation. if i have some more time, perhaps more can be done to improve the overall implementation / clean up of the code for efficiency in the future. i am currently working through the documentation on my github page which is part of the readme. the documentation will provide further detail as to what exactly each part of the code does as well as my thought process. i have also chosen to use a jupyter notebook to provide a step by step on how to run through my code. i have written most of the instructions and tutorial in that but will likely refine it some more. given the limitations of the twitter api access (more below), i will likely wait to run the demo along with the video closer to the due date. i will likely provide one notebook with the results of my run through so others can follow along with the results and then a notebook with a blank implementation for free use. are you facing any challenges? there are a few challenges that either fall into the category of text retrieval regarding the api or further improvement of the algorithm. the twitter api access is an issue as the free version only retrieves a limited number of tweets over only the past 7 days. this makes it a bit difficult to set a demo of the code, but i will likely just have to set a game that i want to use for the demo run in the coming week to not cut it too close to the deadline. the other challenge is that tweepy is slow in retrieving many tweets, especially given the twitter api limitations of how many times i can call it. for speed purposes, i will likely have to set the number of tweets per player at 100 for my demo. as for the algorithm, there are some areas that could be improved beyond the basic implementation. teams and players can go by a handful of names so it would be useful to be able to count all occasions. however, for the most part, there is usually a more popular name that each team or player is referred to. as for most nlp, more work can be done in finding deeper meaning in words especially when the tweets are more contextually complex. if multiple players are mentioned in a tweet or previous references are made, it can be difficult to classify if a tweet is positive or negative for a particular player. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. dixon liang dixonl2@illinois.edu what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? my free topic is to create a sentiment analysis of soccer games from the english premier league using twitter. specifically, i am interested in discovering which players from either team had a good or poor game based on sentiment of tweets. this is important or interesting because based on this analysis, we can use it to come up with a detailed ""form"" analysis to see which players have been playing well over an extended period. although specific individuals from twitter might not be the best pundits of games, i will be using a ""wisdom of the crowd"" type approach on the quality of the data gathered. the main task i will be doing is taking tweets from a sample game in the past and categorizing the words in tweets related to certain players for a positive or negative sentiment. after this categorization, i will be able to aggregate and determine which players had a good or poor game. my planned approach is to use a particular game in the past few weeks as a demo. i would text mine all the tweets related to the game using a filter of the time period around / during the game and then those using a hashtag related to the game. i would then further analyze the tweets that have mentions of specific players and the words in context. based on the context of the tweets, i would categorize the tweets related to players as either ""positive', ""neutral"", or ""negative"". totaling the sentiments for each player during the game should give me a classification for each individual player determining their performance. i will likely to be able to further quantify based on some measure on how many ""positive"" or ""negative"" tweets each player has been categorized. the main tool i will be using is ""tweepy"" which is a python package to read tweets from the twitter api. the main dataset will be the tweets from the time period around the games that i have chosen, and that i have categorized as relevant. if i have the time, i would also like to incorporate one of the functions from the course into my project. i will have a better idea through the planning process, but as of now, i would likely treat each tweet as a ""document"". the most likely adaptation will be to create a likelihood model using the game tweets as the primary data set. an interesting application would be to try to categorize tweets relating to players to specific parts of the game which would be the ""topics"". my expected outcome is to produce a report detailing the findings from one or several games. i should have enough data per game to show all the players' performances who were involved in the game. in this report, i will show which players were categorized as having good games or poor games based on the categorizing of tweets. in a further breakdown, by using a likelihood model, i will be also be able to show the topics where a player performed well or poor. as an example, a positive tweet might be relating to a specific player's passes during the game. i will evaluate my work based on reviewing some ""match ratings"" by pundit type publications to see if my reviews based on sentiment are in line. although i anticipate some differences, if this works successfully, there should not be big differences in the way each player performance is viewed against the experts. i will also try to watch the games that i use to review myself if my ratings make basic sense. which programming language do you plan to use? python please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. i will be working alone on this project. i anticipate the breakdown of time spent on the project as follows: initial research and outline (2-4 hours) familiarity of tweepy and other tools (2-4 hours) text retrieval and data cleaning (2-4 hours) initial implementation of algorithm (10-20 hours) testing and improvements (10-20 hours) final reports, documentation, and demo (5-10 hours) 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. * dixon liang o dixonl2@illinois.edu 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? my free topic is to create a sentiment analysis of soccer games from the english premier league using twitter. specifically, i am interested in discovering which players from either team had a good or poor game based on sentiment of tweets. this is important or interesting because based on this analysis, we can use it to come up with a detailed ""form"" analysis to see which players have been playing well over an extended period. although specific individuals from twitter might not be the best pundits of games, i will be using a ""wisdom of the crowd"" type approach on the quality of the data gathered. the main task i will be doing is taking tweets from a sample game in the past and categorizing the words in tweets related to certain players for a positive or negative sentiment. after this categorization, i will be able to aggregate and determine which players had a good or poor game. my planned approach is to use a particular game in the past few weeks as a demo. i would text mine all the tweets related to the game using a filter of the time period around / during the game and then those using a hashtag related to the game. i would then further analyze the tweets that have mentions of specific players and the words in context. based on the context of the tweets, i would categorize the tweets related to players as either ""positive', ""neutral"", or ""negative"". totaling the sentiments for each player during the game should give me a classification for each individual player determining their performance. i will likely to be able to further quantify based on some measure on how many ""positive"" or ""negative"" tweets each player has been categorized. the main tool i will be using is ""tweepy"" which is a python package to read tweets from the twitter api. the main dataset will be the tweets from the time period around the games that i have chosen, and that i have categorized as relevant. if i have the time, i would also like to incorporate one of the functions from the course into my project. i will have a better idea through the planning process, but as of now, i would likely treat each tweet as a ""document"". the most likely adaptation will be to create a likelihood model using the game tweets as the primary data set. an interesting application would be to try to categorize tweets relating to players to specific parts of the game which would be the ""topics"". my expected outcome is to produce a report detailing the findings from one or several games. i should have enough data per game to show all the players' performances who were involved in the game. in this report, i will show which players were categorized as having good games or poor games based on the categorizing of tweets. in a further breakdown, by using a likelihood model, i will be also be able to show the topics where a player performed well or poor. as an example, a positive tweet might be relating to a specific player's passes during the game. i will evaluate my work based on reviewing some ""match ratings"" by pundit type publications to see if my reviews based on sentiment are in line. although i anticipate some differences, if this works successfully, there should not be big differences in the way each player performance is viewed against the experts. i will also try to watch the games that i use to review myself if my ratings make basic sense. 3. which programming language do you plan to use? * python 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. i will be working alone on this project. i anticipate the breakdown of time spent on the project as follows: i. initial research and outline (2-4 hours) ii. familiarity of tweepy and other tools (2-4 hours) iii. text retrieval and data cleaning (2-4 hours) iv. initial implementation of algorithm (10-20 hours) v. testing and improvements (10-20 hours) vi. final reports, documentation, and demo (5-10 hours) sentiment analysis for soccer games (cs 410 course project) and documentation note: you will need to provide your own twitter api keys if you want to run the blank demo file. i have provided a notebook with already run code in file ""12_5_20_chelsealeeds_demo.ipynb"" which goes along with the demo materials (video and presentation) for grading purposes to avoid having to go through the process. introduction this is the repo for my course project for cs 410 text information systems for my masters in computer science at university of illinois urbana-champaign. the main idea of this repo is to provide the code, documentaion, and demo for a basic sentiment analysis for soccer games using python, tweepy, textblob, and bm25okapi. the easiest way to use this code is to use the jupyter notebook demo in this repo. a video tutorial on youtube is also provided. the source code is available as well. please feel free to reach out to me if you would like to collaborate :) . files youtube demo link: https://www.youtube.com/watch?v=uuy7do8bq0m&ab_channel=dixonliang chelsealeeds_presentation.pptx - the powerpoint presentation used in the video tutorial 12_5_20_chelsealeeds_demo.ipynb - demo file that goes along with the presentation and video link project proposal.pdf - the initial project proposal. progress report.pdf - progress report as of 11/30/20. maincode.py - the main source code demo.ipynb - empty demo code in jupyter notebook for free use tweepy review.docx - review done on the tweepy package for the course team1_sentiment.png - example sentiment bar chart for team 1 (new file will be saved down if main code is run) team1_bm25positive.png - example positive bm25 average ranking for team 1 (new file will be saved down if main code is run) team1_bm25negative.png - example negative bm25 average ranking for team 1 (new file will be saved down if main code is run) team2_sentiment.png - example sentiment bar chart for team 2 (new file will be saved down if main code is run) team2_bm25positive.png - example positive bm25 average ranking for team 2 (new file will be saved down if main code is run) team2_bm25negative.png - example negative bm25 average ranking for team 2 (new file will be saved down if main code is run) background we will be using tweepy to source tweets from the twitter api and textblob to provide a framework for natural language processing to provide sentiment analysis. in addition, we will use pypi's implementation of bm25okapi to provide context of the sentiment analysis. ideally, the result of this code will show the relative sentiment of a player's performance during a recent game. by using wisdom of the crowds, we hope to gain an idea of how the player performed. using bm25okapi, we will also be able to use relevant terms to see what might have caused sentiment to go way or another (ex. player scored a goal or provided an assist, etc.) using pyplot, we will also be able to visualize the results. technically, this code can be used for any soccer game, but given the popularity and language barrier, epl games are likely to provide the most meaningful results. adjustments could be made for la liga or serie a using spanish or italian nlp. please feel free to reach out as i welcome any collaboration as the code can be improved and applied to different sports or different applications all together :) . a run through of the source code is provided below. code documentation introduction packages needed: to begin, we need several packages installed and imported. these are: tweepy, textblob, numpy, rank_bm25, and matplotlib.pyplot. documentation and links are found here: http://docs.tweepy.org/en/latest/api.html https://textblob.readthedocs.io/en/dev/api_reference.html https://numpy.org/doc/ https://pypi.org/project/rank-bm25/ https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.html most importantly, we will need access to the twitter api, which can be gained by having a twitter profile. you will be provided four keys of strings of letters and numbers which you will need to enter in the box below: consumer key, consumer secret, access token, access token secret. these will be used in the below code area. ```shell consumer_key = """" consumer_secret = """" access_token = """" access_token_secret = """" auth = tweepy.oauthhandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.api(auth,wait_on_rate_limit=true) ``` game parameters we will need to set the parameters for the game we are interested in; this includes the two teams names and the starting 11 for each team. ```shell team1 = """" team2 = """" team1 team1_player1 = """" team1_player2 = """" team1_player3 = """" team1_player4 = """" team1_player5 = """" team1_player6 = """" team1_player7 = """" team1_player8 = """" team1_player9 = """" team1_player10 = """" team1_player11 = """" team2 team2_player1 = """" team2_player2 = """" team2_player3 = """" team2_player4 = """" team2_player5 = """" team2_player6 = """" team2_player7 = """" team2_player8 = """" team2_player9 = """" team2_player10 = """" team2_player11 = """" ``` after setting the game parameters, there are a few algorithm paramters we will need to set. to begin, the number of tweets that we want to retrieve is set as a parameter for the algorithm. this may also affect how quickly the algorithm runs because of limitations in the package and the free version of the twitter api. the threshold for objectivity/subjectivity is also set. 0 is defined as purely objective and 1 is defined as subjective. ideally for the most results, we want a low threshold, 0.10 has been suggested, but any threshold can be set. the date periods for when we want to retrieve tweets from is also se; for best results, it is suggested to only use the day of the game and the day after the game. the free version of the twitter api limits searches to within the 7 days. sentiment analysis: ```shell define the number of tweets we want to sort for and subjective threshold number_of_tweets = 100 # how many tweets we want to search for threshold = 0.10 # threshold for subjectivity [0,1] setting date range, ideally run day after the game date_since = ""2020-11-21"" date_until = ""2020-11-22"" ``` for the bm25okapi algorithm, there are just two sets of parameters we must set. the first is the set positive terms we want to use for context. some suggestions are in the default query already. similarily, for the second set of parameters, it is a set of negative terms. bm25okapi: shell positive_terms = ""assist good excellent great"" # search queries, positive terms negative_terms = ""poor bad miss own awful"" # negative terms the bm25okapi portion of the code will combine all of the tweets for every player together which will they treat each tweet as a document as part of a corpus. then using the positive array, it will then go through each document ranking it based on how many of the positive terms each tweet matches. the higher ranked the tweet is, the more relevant it is to that query. given we are using positive terms, the idea is that the tweet is more reflective of positive results in relation to those terms during the game for the respective player. the same will be done with the negative query. once the rankings are done, each players average ranking for each query is provided, similarily to the sentiment array above. these two arrays will then be used for charting. bm25 incorporates search ranking concepts such as idf (inverse document frequency), which is a filter for commonly used terms as well as tf (term frequency), which gives higher ranking for more matching of terms. a brief summary of how exactly the formula ranks can be found here: https://nlp.stanford.edu/ir-book/html/htmledition/okapi-bm25-a-non-binary-model-1.html running the code after setting the above parameters, the entire ""maincode.py"" can be run which will then output the relevant visualizations for this task. the code will retrieve the set number of tweets for each player and then use textblob's sentiment analysis tool to rate the sentiment of each tweet. if the tweet crosses the set threshold, the senitment for that tweet will be used for an average of all of the sentiment for that respective player. this array of sentiments of players will then be used for our graphs below. the functions that are used for the generation of these visualizations are listed below. visual output functions plot_bar_team1_sentiment(): using pyplot, this function will chart team 1's senitment by player in the form of a horizontal bar chart. the function will take the sentiment array as mentioned above and plot the respective average for each player. if the sentiment is more towards the right, the player's sentiment for that game will be more positive. if the senitment is more towards the left, the player's sentiment for that game will be more negative. plot_bar_team2_sentiment(): same as the above but with the players for team 2. plot_bar_team1_bm25positive(): using pyplot again, this function will chart team 1's bm25okapi rankings in the form of a horizontal bar chart. plot_bar_team2_bm25positive(): same as above but for team 2. plot_bar_team1_bm25negative(): same as above but for the negative query and team 1. plot_bar_team2_bm25negative(): same as above but for the negative query and team 2. text output functions display_tweets(team, player_number): this function will take in two arguments, the team name and the player number (which can be referenced above on the parameters). the function will then display the ten highest and ten lowest sentiment tweets for that player. shell ['rt @siphillipssport: chelsea keep the ball for about 5 minutes, thennnnn rudiger.', 'rt @goal: thiago silva \nhavertz \npulisic \n\nrudiger \nchilwell \nwerner \n\nchelsea reveal their team to play newcastle \n\n#newche https:/...', '@chelseafc chelsea had a clean with rudiger and zouma playing together.  we are winning this league', 'rt @siphillipssport: chelsea keep the ball for about 5 minutes, thennnnn rudiger.', 'newcastle 0-2 chelsea: godfrey  ""the only player wey dun improve chelsea na mendy, zouma and rudiger still no get... https://t.co/tyzod3mz9x', 'rt @kingmali_: @chelseafc motm kante\nlovely clean sheet mendy\nwell done tammy\nrudiger is not fit to be a chelsea player period!\nemerson is...', 'rt @siphillipssport: chelsea keep the ball for about 5 minutes, thennnnn rudiger.', 'rt @absolutechelsea: frank lampard says antonio rudiger was brilliant on his first premier league start of the season for #chelsea against...', ""are you more confident about chelsea's defensive options and depth than at the start of the season?\n\nhttps://t.co/enussursmj""] rank_top(corpus,terms): this function is in relation to the bm25okapi rankings. it takes in two arguments, a corpus (in this case, will be a series of tweets) and then a search query (in this case, positive or negative term array). this function will display the top ten ranked tweets in the corpus given the query. an example would be if we wanted to see the top ranked tweets for a specific player. shell ['@chelsea_era @ebl2017 werner was playing bumdesliga, i don't doubt he's got a good scoring record in that league. h... https://t.co/vebdvrxnxq', ""https://t.co/ctxtoa9fgf\nmendy &amp; chilwell both had their 'worst' game in a chelsea shirt today, and were still excel... https://t.co/gmjf62mtx3"", '@alexgoldberg_ kovacic done ok today but gives the ball away too much in dangerous areas, against a better team che... https://t.co/d0y3hpdjgx', '@afcjxmes kovacic was chelsea's worst midfielder today, gave the ball away in dangerous areas too many times, kante... https://t.co/rplqctpkjc', ""timo werner is 'undroppable'.\n\nn'golo kante is back doing what he does best.\n\nfrank lampard is about to settle on a... https://t.co/oxxsmrxkh7"", ""timo werner is 'undroppable'.\n\nn'golo kante is back doing what he does best.\n\nfrank lampard is about to settle on a... https://t.co/oxxsmrxkh7"", 'rt @football__tweet: edouard mendy has kept 7 clean sheets in his first 9 chelsea games.\n\ntalk about an upgrade on the most expensive goalk...', '@tessderry1 ths international break suckssss...timo chilwell mount grealish theirlegs lookd tired.....\n\nnext match... https://t.co/l57jzk0dyo', 'frank lampard expressed his delight as chelsea kept another clean sheet in their 0-2 win against newcastle at st ja... https://t.co/d3hmlpywox', 'saturdays added assist:\nmount (chelsea v newcastle) pass leading to own goal. https://t.co/xtidujxhlq'] helper functions sentiment_element(element): this is a simple function that will be used for python's sort implementation for an array. in this case, we are interested in sorting be the second element (for each entry in the serntiment array is the sentiment score) which is what this function does. rank_scores(corpus,terms): this function is in relation to the bm25okapi rankings. it takes in two arguments, a corpus (in this case, will be a series of tweets) and then a search query (in this case, positive or negative term array). it is the function that will actually use pypi's implementation of bm25okapi to give each tweet a rank in relation the entire corpus. before passing into the implementation, both the corpus and term query will be tokenized. intro tweepy is a python library to access the twitter api. the tweepy library provides functions to easily retrieve text from twitter in addition to other useful methods to interact with the application. given the extensive use of social media and social media's increasing relevance in today's world for all kinds of data, tweepy can be used in instrumental ways for text retrieval for all kinds of analysis. getting started and api authentication is done through your own twitter profile using tokens. authentication is easy as it uses oauth 1a with the tokens simply given to you in your account and then can be applied directly with the following two lines of code. auth = tweepy.oauthhandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) this is straight forward as a user just needs a twitter account and ""apply"" for a developer account which just consists of some basic questions as to what you want to do with the api. tweepy provides several interesting features including being able to interact through a user profile such as posting tweets, retweeting, interacting with other users, etc. the most basic feature seems to be interacting with your own timeline. the first example that the documentation uses is to print the first 20 tweets from your home timeline. however, given the context of this class, we are most interested in the ""search"" features. search features an important note to keep in mind is that the search methods of tweepy are limited based on what type of api account you have - ranging from a free account to enterprise / premium account. for a full historical search, an enterprise / premium account is needed which allows a user to search through the entirety of the history of twitter from 2006. unfortunately, in a free search, not all tweets will be made available - however, for most general purposes in analyzing trends or sentiment, this should be good enough. the search function takes in a total of ten arguments which the user can declare. api.search(q[, geocode][, lang][, locale][, result_type][, count][, until][, since_id][, max_id][, include_entities]) the query can be up 500 characters maximum. for example, we can use an array of search terms if interested in several queries. the rest of the arguments act as filters. we can filter for things such as location or language or a time interval. unless using a premium account, tweet history is limited to just the past seven days. upon completing a search, tweepy returns what is called a searchresults object. the best way to interact with this object is through calling the search function in tweepy's pagination method. pagination tweepy also provides an easy to iterate through different objects in twitter using something called a cursor object. for status in tweepy.cursor(api.user_timeline).items(): by using a cursor object, we can treat each tweet as an ""item"" which allows us to specify exactly how many tweets we want to use for analysis per search. this makes iterating a lot easier. this feature can also be used for other features of tweepy that requires iteration. for example if we wanted the last 100 tweets about 'cars"", we would query ""cars"" in the search method and enter ""100"" in the items() field. additional features streaming may be of interest for users that want to interact or analyze in real time. everything real time related is done through streamlistenter. through this instance, we can then filter out exactly which tweets we might be interested; we can filter for certain users or certain keywords. mystreamlistener = mystreamlistener() mystream = tweepy.stream(auth = api.auth, listener=mystreamlistener) for those who want to interact with twitter using ""bot"" like control, tweepy also provides many methods that are useful. we can interact with our own profile without ever using the twitter site from posting our own updates to adding followers. there are also methods that allow us to interact with our direct messages. conclusion tweepy provides a very easy to use package for those interested in mining tweets from twitter. with regards to text retrieval, tweepy makes it quite easy especially with the cursor method which helps with pagination. if combined with another type of text package such as textblob, there are a lot of possibilities in what we can do such as conducting sentiment analysis of events or subjects."	['sentiment', 'analysis', 'soccer', 'games', 'natural', 'language', 'processing', 'twitter', 'python', 'using', 'tweepy', 'textblob', 'bmokapi', 'dixon', 'liang', 'university', 'illinois', 'urbanachampaign', 'mcs', 'cs', 'general', 'information', 'example', 'game', 'chelsea', 'vs', 'leeds', 'united', 'ziyech', 'koch', 'went', 'injured', 'player', 'ratings', 'consensus', 'entire', 'team', 'played', 'well', 'several', 'players', 'could', 'motm', 'ok', 'two', 'parts', 'ranking', 'everything', 'found', 'github', 'httpsgithubcomdixonliang', 'file', 'used', '___chelsealeeds_demoipynb', 'empty', 'demo', 'demoipynb', 'open', 'collaboration', 'setting', 'parameters', 'algorithm', 'number', 'tweets', 'retrieved', 'limited', 'api', 'threshold', 'subjectivity', 'date', 'range', 'part', 'results', 'kante', 'cm', 'rt', 'statmandave', 'ngolo', 'ranknn', 'ball', 'recoveries', 'stn', 'tackles', 'interceptions', 'stnndoing', 'marshyleeds', 'best', 'field', 'made', 'difference', 'change', 'pace', 'midfield', 'sometim', 'negative', 'tweet', 'appear', 'accurate', 'use', 'investigate', 'mendy', 'gk', 'goal', 'starting', 'scorednremains', 'mendynhold', 'second', 'keeping', 'goals', 'entering', 'win', 'presence', 'thiago', 'given', 'huge', 'impact', 'defensive', 'line', 'httpstcocdqjlylc', 'philips', 'kevin', 'phillips', 'deserves', 'play', 'top', 'guy', 'good', 'literally', 'runs', 'particularly', 'focused', 'likely', 'based', 'seemed', 'agreed', 'match', 'cooper', 'cb', 'leeds_lord', 'terrible', 'hideously', 'exposed', 'kennybrown', 'maz', 'llorente', 'class', 'always', 'weak', 'link', 'hopefully', 'thats', 'httpstcojwjrxw', 'laurencewegner', 'thought', 'yeah', 'credit', 'chelseas', 'movement', 'box', 'httpstcojjwhyfbfgw', 'positive', 'implies', 'wasnt', 'great', 'suggest', 'context', 'matching', 'terms', 'giroud', 'werner', 'chilwell', 'decent', 'seems', 'taking', 'consideration', 'injury', 'foul', 'var', 'matches', 'rating', 'bamford', 'scorer', 'confirmed', 'dallas', 'bad', 'one', 'lowest', 'ranked', 'conclusion', 'improvements', 'provides', 'idea', 'happened', 'flexible', 'provided', 'needed', 'cases', 'might', 'make', 'sense', 'easily', 'adapted', 'sports', 'extended', 'multiple', 'even', 'season', 'needs', 'improved', 'efficiency', 'poor', 'limitations', 'statistical', 'work', 'others', 'tasks', 'completed', 'pretty', 'much', 'source', 'code', 'finished', 'remaining', 'coding', 'want', 'additional', 'also', 'implemented', 'jupyter', 'notebook', 'tutorial', 'description', 'broken', 'basic', 'implementation', 'give', 'contents', 'score', 'first', 'uses', 'textblobs', 'classify', 'every', 'receive', 'average', 'classification', 'outputs', 'visually', 'find', 'specific', 'contributed', 'findings', 'visualized', 'pending', 'main', 'run', 'video', 'documentation', 'time', 'perhaps', 'done', 'improve', 'overall', 'clean', 'future', 'currently', 'working', 'page', 'readme', 'provide', 'detail', 'exactly', 'process', 'chosen', 'step', 'written', 'instructions', 'refine', 'access', 'wait', 'along', 'closer', 'due', 'follow', 'blank', 'free', 'facing', 'challenges', 'either', 'fall', 'category', 'text', 'retrieval', 'regarding', 'improvement', 'issue', 'version', 'retrieves', 'past', 'days', 'makes', 'bit', 'difficult', 'set', 'coming', 'week', 'cut', 'close', 'deadline', 'challenge', 'slow', 'retrieving', 'many', 'especially', 'times', 'call', 'speed', 'purposes', 'per', 'areas', 'beyond', 'teams', 'go', 'handful', 'names', 'would', 'useful', 'able', 'count', 'occasions', 'however', 'usually', 'popular', 'name', 'referred', 'nlp', 'finding', 'deeper', 'meaning', 'words', 'contextually', 'complex', 'mentioned', 'previous', 'references', 'particular', 'netids', 'members', 'captain', 'administrative', 'duties', 'dixonlillinoisedu', 'topic', 'please', 'detailed', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'create', 'english', 'premier', 'league', 'specifically', 'interested', 'discovering', 'come', 'form', 'see', 'playing', 'period', 'although', 'individuals', 'pundits', 'wisdom', 'crowd', 'type', 'quality', 'data', 'gathered', 'sample', 'categorizing', 'related', 'certain', 'categorization', 'aggregate', 'determine', 'weeks', 'mine', 'filter', 'around', 'hashtag', 'analyze', 'mentions', 'categorize', 'neutral', 'totaling', 'sentiments', 'individual', 'determining', 'performance', 'quantify', 'measure', 'categorized', 'tool', 'package', 'read', 'dataset', 'relevant', 'like', 'incorporate', 'functions', 'course', 'project', 'better', 'planning', 'treat', 'document', 'adaptation', 'likelihood', 'model', 'primary', 'application', 'try', 'relating', 'topics', 'produce', 'report', 'detailing', 'enough', 'show', 'performances', 'breakdown', 'performed', 'passes', 'reviewing', 'pundit', 'publications', 'reviews', 'anticipate', 'differences', 'works', 'successfully', 'big', 'way', 'viewed', 'experts', 'watch', 'review', 'programming', 'plan', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'students', 'may', 'list', 'estimated', 'cost', 'alone', 'spent', 'follows', 'initial', 'research', 'outline', 'familiarity', 'cleaning', 'testing', 'final', 'reports', 'ii', 'iii', 'iv', 'v', 'vi', 'note', 'need', 'keys', 'already', 'goes', 'materials', 'presentation', 'grading', 'avoid', 'introduction', 'repo', 'masters', 'computer', 'science', 'documentaion', 'easiest', 'youtube', 'available', 'feel', 'reach', 'collaborate', 'files', 'httpswwwyoutubecomwatchvuuydobqmab_channeldixonliang', 'chelsealeeds_presentationpptx', 'powerpoint', 'proposalpdf', 'proposal', 'progress', 'reportpdf', 'maincodepy', 'reviewdocx', 'team_sentimentpng', 'bar', 'chart', 'new', 'saved', 'team_bmpositivepng', 'bm', 'team_bmnegativepng', 'background', 'framework', 'addition', 'pypis', 'ideally', 'result', 'relative', 'recent', 'crowds', 'hope', 'gain', 'caused', 'another', 'ex', 'scored', 'assist', 'etc', 'pyplot', 'visualize', 'technically', 'popularity', 'barrier', 'epl', 'meaningful', 'adjustments', 'la', 'liga', 'serie', 'spanish', 'italian', 'welcome', 'applied', 'different', 'applications', 'together', 'packages', 'begin', 'installed', 'imported', 'numpy', 'rank_bm', 'matplotlibpyplot', 'links', 'httpdocstweepyorgenlatestapihtml', 'httpstextblobreadthedocsioendevapi_referencehtml', 'httpsnumpyorgdoc', 'httpspypiorgprojectrankbm', 'httpsmatplotliborgapi_as_genmatplotlibpyplothtml', 'importantly', 'gained', 'profile', 'four', 'strings', 'letters', 'numbers', 'enter', 'consumer', 'key', 'secret', 'token', 'area', 'shell', 'consumer_key', 'consumer_secret', 'access_token', 'access_token_secret', 'auth', 'tweepyoauthhandlerconsumer_key', 'authset_access_tokenaccess_token', 'tweepyapiauthwait_on_rate_limittrue', 'includes', 'team_player', 'paramters', 'retrieve', 'parameter', 'affect', 'quickly', 'objectivitysubjectivity', 'defined', 'purely', 'objective', 'subjective', 'low', 'suggested', 'periods', 'se', 'day', 'limits', 'searches', 'within', 'define', 'sort', 'number_of_tweets', 'search', 'date_since', 'date_until', 'sets', 'must', 'suggestions', 'default', 'query', 'similarily', 'positive_terms', 'excellent', 'queries', 'negative_terms', 'miss', 'awful', 'portion', 'combine', 'corpus', 'array', 'higher', 'reflective', 'relation', 'respective', 'rankings', 'arrays', 'charting', 'incorporates', 'concepts', 'idf', 'inverse', 'frequency', 'commonly', 'tf', 'term', 'gives', 'brief', 'summary', 'formula', 'ranks', 'httpsnlpstanfordeduirbookhtmlhtmleditionokapibmanonbinarymodelhtml', 'running', 'output', 'visualizations', 'rate', 'crosses', 'senitment', 'graphs', 'generation', 'listed', 'visual', 'plot_bar_team_sentiment', 'function', 'horizontal', 'take', 'plot', 'towards', 'right', 'left', 'plot_bar_team_bmpositive', 'plot_bar_team_bmnegative', 'display_tweetsteam', 'player_number', 'arguments', 'referenced', 'display', 'ten', 'highest', 'siphillipssport', 'keep', 'minutes', 'thennnnn', 'rudiger', 'silva', 'nhavertz', 'npulisic', 'nnrudiger', 'nchilwell', 'nwerner', 'nnchelsea', 'reveal', 'newcastle', 'nnnewche', 'https', 'chelseafc', 'zouma', 'winning', 'godfrey', 'wey', 'dun', 'na', 'still', 'get', 'httpstcotyzodmzx', 'kingmali_', 'kantenlovely', 'sheet', 'mendynwell', 'tammynrudiger', 'fit', 'periodnemerson', 'absolutechelsea', 'frank', 'lampard', 'says', 'antonio', 'brilliant', 'start', 'confident', 'options', 'depth', 'seasonnnhttpstcoenussursmj', 'rank_topcorpusterms', 'takes', 'case', 'series', 'wanted', 'chelsea_era', 'ebl', 'bumdesliga', 'dont', 'doubt', 'hes', 'got', 'scoring', 'record', 'h', 'httpstcovebdvrxnxq', 'httpstcoctxtoafgfnmendy', 'amp', 'worst', 'shirt', 'today', 'excel', 'httpstcogmjfmtx', 'alexgoldberg_', 'kovacic', 'away', 'dangerous', 'che', 'httpstcodyhpdjgx', 'afcjxmes', 'midfielder', 'gave', 'httpstcorplqctpkjc', 'timo', 'undroppablennngolo', 'back', 'bestnnfrank', 'settle', 'httpstcooxxsmrxkh', 'football__tweet', 'edouard', 'kept', 'sheets', 'gamesnntalk', 'upgrade', 'expensive', 'goalk', 'tessderry', 'ths', 'international', 'break', 'sucksssstimo', 'mount', 'grealish', 'theirlegs', 'lookd', 'tirednnnext', 'httpstcoljzkdyo', 'expressed', 'delight', 'st', 'ja', 'httpstcodhmlpywox', 'saturdays', 'added', 'assistnmount', 'pass', 'leading', 'httpstcoxtidujxhlq', 'helper', 'sentiment_elementelement', 'simple', 'pythons', 'sorting', 'element', 'entry', 'serntiment', 'rank_scorescorpusterms', 'actually', 'rank', 'passing', 'tokenized', 'intro', 'library', 'methods', 'interact', 'extensive', 'social', 'media', 'medias', 'increasing', 'relevance', 'todays', 'world', 'kinds', 'instrumental', 'ways', 'getting', 'started', 'authentication', 'tokens', 'easy', 'oauth', 'simply', 'account', 'directly', 'following', 'lines', 'straight', 'forward', 'user', 'apply', 'developer', 'consists', 'questions', 'features', 'including', 'posting', 'retweeting', 'interacting', 'users', 'feature', 'timeline', 'print', 'home', 'mind', 'ranging', 'enterprise', 'premium', 'full', 'historical', 'allows', 'entirety', 'history', 'unfortunately', 'analyzing', 'trends', 'declare', 'apisearchq', 'geocode', 'lang', 'locale', 'result_type', 'since_id', 'max_id', 'include_entities', 'characters', 'maximum', 'rest', 'act', 'filters', 'things', 'location', 'interval', 'unless', 'seven', 'upon', 'completing', 'returns', 'called', 'searchresults', 'object', 'calling', 'tweepys', 'pagination', 'method', 'iterate', 'objects', 'something', 'cursor', 'status', 'tweepycursorapiuser_timelineitems', 'item', 'us', 'specify', 'iterating', 'lot', 'easier', 'requires', 'iteration', 'last', 'cars', 'items', 'streaming', 'interest', 'real', 'streamlistenter', 'instance', 'keywords', 'mystreamlistener', 'mystream', 'tweepystreamauth', 'apiauth', 'listenermystreamlistener', 'bot', 'control', 'without', 'ever', 'site', 'updates', 'adding', 'followers', 'allow', 'direct', 'messages', 'mining', 'regards', 'quite', 'helps', 'combined', 'possibilities', 'conducting', 'events', 'subjects']
https://github.com/duadua9/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/dvillevald/CourseProject	using md&a of company's sec filing to predict future stock price cs410 project progress report by dmitry villevald (dmitryv2@illinois.edu) project progress report: q: which tasks have been completed? a: the following tasks have been completed: * i completed the code which pulls the index files from the sec edgar database for each quarter and extracts q-10 and k-10 filings for the selected companies. * from every filing i built a dictionary including all words references in the document with their frequencies (i.e. bag of words representation.) * finally, these term frequencies were compared with loughran and mcdonald sentiment word lists and four sentiment scores were calculated for each filing - positive, negative, uncertain and litigious. q: which tasks are pending? a: pending tasks: * upload the stock returns data for the selected companies (forward from the date of filing) and estimate performance of several sentiment-based investment strategies. q: are you facing any challenges? a: not really. it turned out that extracting only the md&a section from the filing is difficult because in many filings this section is a placeholder containing a list of links to the other sections of the document where the related topics are discussed. because of this i chose to build the bag of words for the entire filing. this, in my opinion, would be a better option (compared to selecting only the filings where md&a is a well-structured separate section) because it will ensure that the sentiment words are captured regardless where in the document they appear. using md&a of company's sec filing to predict future stock price cs410 final project proposal (individual project) project coordinator/author: dmitry villevald (dmitryv2@illinois.edu) for my final course project i would like to choose a free topic (option 5) and explore the impact of the information extracted from the management's discussion and analysis (md&a) section of the company's sec filing on the future stock price. q: what are the names and netids of all your team members? who is the captain? a: this is individual project by dmitry villevald (dmitryv2) q: what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? a: i would like to explore how the changes in a sentiment of the company's management's discussion and analysis (md&a) impact the future stock prices. md&a section is an unaudited section of quarterly and annual sec filings where the company's management discusses the current status of a company and, more importantly, the future risks and opportunities. i want to explore if investors overreact to changes in management sentiment in the long run. this knowledge would be important for investors trying to decide what to do with a company stock when management sentiment changes. my plan is, first, to pull 10q and 10k sec filings of the companies - members of sp&500 or dow jones index - over a few recent years from sec edgar database, parse the data and extract md&a sections. then, i plan to determine a sentiment score of each md&a document using the vocabulary of positive and negative words (for example, loughran and mcdonald sentiment word lists). third, i plan to select the events with significant changes in sentiment scores and see how these changes are correlated with the changes in company's stock price in a quarter following the filing and its announcement (using yahoo finance data stock price data or similar sources) adjusted for market or sector/industry returns. if the stock markets are efficient then one would not expect a significant investors' over- or under-reaction to changes in sentiment which i want to confirm. the performance metric could be the confusion matrix showing the relationships between the significant (i.e. higher, in absolute value, than a certain threshold value) changes in md&a sentiment score - positive or negative - and the significant - positive or negative - next-quarter company's stock returns. q: which programming language do you plan to use? a: python q: please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. a: i plan to spend about 3 hours to write and test the script which will download, parse and clean md&a data. then it would take another 7-10 hours to actually perform these tasks (i.e. downloading, parsing and cleaning the data.) another 2-5 hours would be spent on extracting the sentiment from md&a sections and identifying the cases when sentiment score experiences significant changes. about 2 hours will be spent on exploring the relationships between the stock prices and sentiment scores and drawing the conclusions. finally, i expect to spend about 5-6 hours to document my process/findings and to create a demo/presentation. cs 410 course final project report using the sentiment analysis of company's sec filings to predict future stock returns author: dmitry villevald (dmitryv2@illinois.edu) goal for my final project i chose a free topic (option 5) and explored the impact of the sentiment extracted from company's 10-q and 10-k sec filings on the company's stock price. my expectation was that while there could be a minor impact from the sentiment changes in the filings on the stock price for some companies, this impact is likely too small and statistically insignificant for building stock investment strategy based on the sentiment only. project proposal file project proposal dmitryv2.pdf contains the project proposal. project progress report file project progress report dmitryv2.pdf is a project progress report. self-evaluation i completed most of what i planned. i was able to download from the sec edgar database the index files with the titles and types of the public companies' filings and then extract the quarterly (10-q) and annual (10-k) report for the selected companies. originally i planned to extract only management analysis and discussion (md&a) section of 10-q and 10-k filings for the sentiment analysis. however, after i learned that in many reports the md&a is a list of links to the other sections of the document, i decided that a better approach would be to use the entire sec filing for the sentiment analysis. i managed to parse those filings and build a bad-of-words (unigram) representation of each filing with the term frequencies. then, by comparing these representations with loughranmcdonald sentiment lists i was able to calculate four sentiment scores (positive, negative, uncertain and litigious) for each company's filing. finally, after i loaded historical stock prices from yahoo finance, i calculated the forward returns (which include the dividents and are adjusted for stock splits) and joined them with the sentiment data. finally, i was able to estimate expected returns for a few sentiment-based investment strategies. main results although i only explored a few years (2016-2020) of filings for about 30 large us companies, i was able to observe some interesting results. for example, i found that negative, uncertain and litigious sentiments are strongly correlated which suggests that if we use one of there three sentiments in out investment strategy, the incremental impact from including the other two will probably be marginal if any. regarding the correlation between the future returns and changes in the sentiment scores of sec filings, i observed some positive correlation between 1-month-forward returns from the date of filing and the quarterly changes in negative, uncertain and litigious sentiment scores. for example, as the chart below shows, for mcd and appl stocks the increase in negative/uncertain/litigious sentiment scores was followed by larger positive stock returns over the following month which is probably contrary to what most would expect. in conclusion, while the changes in the sentiment of company's filings seem to have some impact on the future stock returns, this impact is not large and, given a small data sample, is likely statistically insignificant. additional research with more companies and longer time period is needed to build a viable stock investment strategy based on a sentiment of companies' sec filings. note that the charts above were built from the output of python script demo.py - file sentiment scores of sec filings with forward stock returns.csv - referenced below in subsection outputs. demo (video) the video with demonstration of how to run script demo.py and produce the output can be found here documented source code (folder demo) the python script demo.py 1) downloads 10-q and 10-k sec filings for selected companies. ticker, cik and company (company name) should be provided (for each companies one is interested in) in the input file /investment_universe/tickers_and_ciks.csv (note that the input file for the demo contains this data for two companies - mcdonalds corp. and apple inc.) ticker is used to load the historical company's stock prices to backtest investment strategy while cik (the central index key) is required to download company's filings from sec's edgar database. 2) build a bag-of-words representation and calculates term frequency for each sec filing. 3) calculates sentiment scores (positive, negative, uncertain and litigious) for each report. 4) downloads historical company's stock prices and calculates weekly, quarterly and yearly forward returns, starting from the filing date (+ execution_lag_days to mitigate a look-ahead bias via simulation of a more realistic and conservative scenario where the stocks are purchased/sold on the next business day after the filing date). 5) combines together sentiment scores and foward returns, calculates returns of a few simple investment strategies and saves the results in folder /results. in addition to the instructions below, the python script demo.py has detailed comments on each step. also, this video shows how to run the script. instructions 1) before running the script demo.py, please assign to variable base_path the location of (path to) the project folder. example: base_path = '/users/dmitryvillevald/documents/uiuc/cs 410 text information systems/final project/demo' 2) the following packages have to be installed to run the script: requests, beautifulsoup, json, urllib, yfinance, pandas, and csv inputs the script demo.py takes the following inputs: 1) input file /investment_universe/tickers_and_ciks.csv with a list of companies (stocks) you want to test the investment strategy on. for each company one has to provide: - ticker - the exchange ticker of a company's stock. ticker is used to load the historical company's stock prices to backtest the investment strategy - cik - the central index key of a company in sec edgar database. cik is used to download the company's filings from sec's edgar database for sentiment analysis - company - the company's name which is used for reference only note that the input file for the demo contains this data for two companies - mcdonalds corp. and apple inc. 2) four files with loughranmcdonald sentiment lists (positive.csv, negative.csv, uncertain.csv and litigious.csv) which are located in folder /sentiment_word_lists outputs the script demo.py outputs two files and places them in folder /results: 1) file sentiment scores of sec filings with forward stock returns.csv contains (1) a history of the sentiment scores extracted from sec filings of the selected companies, (2) the changes (quarterly and yearly) of those sentiment scores and (3) one-week, one-month and one-quarter forward total stock returns (including dividends and adjusted for stock splits and spinoffs) starting from the date of sec filing. 2) file investment strategies results.csv contains the results of testing simple investment strategy where one takes a long position in a stock (i.e buys it) when the sentiment percent change value exceeds the long threshold and takes a short position in a stock (i.e. sells it short) when the sentiment percent change falls below the short threshold. credits 1) https://gist.github.com/madewitt/29bceb51c494ef9ea1d34f9474aa4b3c 2) https://github.com/weiwangchun/cs410 3) https://www.sec.gov/edgar/searchedgar/accessing-edgar-data.htm 4) https://sraf.nd.edu/textual-analysis/resources/#lm%20sentiment%20word%20lists	['using', 'mda', 'companys', 'sec', 'filing', 'predict', 'future', 'stock', 'price', 'cs', 'project', 'progress', 'report', 'dmitry', 'villevald', 'dmitryvillinoisedu', 'q', 'tasks', 'completed', 'following', 'code', 'pulls', 'index', 'files', 'edgar', 'database', 'quarter', 'extracts', 'k', 'filings', 'selected', 'companies', 'every', 'built', 'dictionary', 'including', 'words', 'references', 'document', 'frequencies', 'ie', 'bag', 'representation', 'finally', 'term', 'compared', 'loughran', 'mcdonald', 'sentiment', 'word', 'lists', 'four', 'scores', 'calculated', 'positive', 'negative', 'uncertain', 'litigious', 'pending', 'upload', 'returns', 'data', 'forward', 'date', 'estimate', 'performance', 'several', 'sentimentbased', 'investment', 'strategies', 'facing', 'challenges', 'really', 'turned', 'extracting', 'section', 'difficult', 'many', 'placeholder', 'containing', 'list', 'links', 'sections', 'related', 'topics', 'discussed', 'chose', 'build', 'entire', 'opinion', 'would', 'better', 'option', 'selecting', 'wellstructured', 'separate', 'ensure', 'captured', 'regardless', 'appear', 'final', 'proposal', 'individual', 'coordinatorauthor', 'course', 'like', 'choose', 'free', 'topic', 'explore', 'impact', 'information', 'extracted', 'managements', 'discussion', 'analysis', 'names', 'netids', 'team', 'members', 'captain', 'dmitryv', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'changes', 'prices', 'unaudited', 'quarterly', 'annual', 'management', 'discusses', 'current', 'status', 'company', 'importantly', 'risks', 'opportunities', 'want', 'investors', 'overreact', 'long', 'run', 'knowledge', 'trying', 'decide', 'plan', 'first', 'pull', 'sp', 'dow', 'jones', 'recent', 'years', 'parse', 'extract', 'determine', 'score', 'vocabulary', 'example', 'third', 'select', 'events', 'significant', 'see', 'correlated', 'announcement', 'yahoo', 'finance', 'similar', 'sources', 'adjusted', 'market', 'sectorindustry', 'markets', 'efficient', 'one', 'expect', 'underreaction', 'confirm', 'metric', 'could', 'confusion', 'matrix', 'showing', 'relationships', 'higher', 'absolute', 'value', 'certain', 'threshold', 'nextquarter', 'programming', 'language', 'use', 'python', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'main', 'estimated', 'time', 'cost', 'spend', 'write', 'test', 'script', 'download', 'clean', 'take', 'another', 'actually', 'perform', 'downloading', 'parsing', 'cleaning', 'spent', 'identifying', 'cases', 'experiences', 'exploring', 'drawing', 'conclusions', 'processfindings', 'create', 'demopresentation', 'author', 'goal', 'explored', 'expectation', 'minor', 'likely', 'small', 'statistically', 'insignificant', 'building', 'strategy', 'based', 'file', 'dmitryvpdf', 'contains', 'selfevaluation', 'able', 'titles', 'types', 'public', 'originally', 'however', 'learned', 'reports', 'decided', 'managed', 'badofwords', 'unigram', 'comparing', 'representations', 'loughranmcdonald', 'calculate', 'loaded', 'historical', 'include', 'dividents', 'splits', 'joined', 'results', 'although', 'large', 'us', 'observe', 'found', 'sentiments', 'strongly', 'suggests', 'three', 'incremental', 'two', 'probably', 'marginal', 'regarding', 'correlation', 'observed', 'monthforward', 'chart', 'shows', 'mcd', 'appl', 'stocks', 'increase', 'negativeuncertainlitigious', 'followed', 'larger', 'month', 'contrary', 'conclusion', 'seem', 'given', 'sample', 'additional', 'research', 'longer', 'period', 'needed', 'viable', 'note', 'charts', 'output', 'demopy', 'returnscsv', 'referenced', 'subsection', 'outputs', 'demo', 'video', 'demonstration', 'produce', 'documented', 'source', 'folder', 'downloads', 'ticker', 'cik', 'name', 'provided', 'interested', 'input', 'investment_universetickers_and_cikscsv', 'mcdonalds', 'corp', 'apple', 'inc', 'used', 'load', 'backtest', 'central', 'key', 'required', 'secs', 'bagofwords', 'calculates', 'frequency', 'weekly', 'yearly', 'starting', 'execution_lag_days', 'mitigate', 'lookahead', 'bias', 'via', 'simulation', 'realistic', 'conservative', 'scenario', 'purchasedsold', 'next', 'business', 'day', 'combines', 'together', 'foward', 'simple', 'saves', 'addition', 'instructions', 'comments', 'step', 'also', 'running', 'assign', 'variable', 'base_path', 'location', 'path', 'usersdmitryvillevalddocumentsuiuccs', 'text', 'systemsfinal', 'projectdemo', 'packages', 'installed', 'requests', 'beautifulsoup', 'json', 'urllib', 'yfinance', 'pandas', 'csv', 'inputs', 'takes', 'provide', 'exchange', 'reference', 'positivecsv', 'negativecsv', 'uncertaincsv', 'litigiouscsv', 'located', 'sentiment_word_lists', 'places', 'history', 'oneweek', 'onemonth', 'onequarter', 'dividends', 'spinoffs', 'resultscsv', 'testing', 'position', 'buys', 'percent', 'change', 'exceeds', 'short', 'sells', 'falls', 'credits', 'httpsgistgithubcommadewittbcebcefeadfaabc', 'httpsgithubcomweiwangchuncs', 'httpswwwsecgovedgarsearchedgaraccessingedgardatahtm', 'httpssrafndedutextualanalysisresourceslmsentimentwordlists']
https://github.com/enaena633/CourseProject	"mining causal topics in text data: iterative topic modeling with time series feedback hyun duk kim dept. of computer science university of illinois at urbana-champaign hkim277@illinois.edu malu castellanos information analytics lab hp laboratories malu.castellanos@hp.com meichun hsu information analytics lab hp laboratories meichun.hsu@hp.com chengxiang zhai dept. of computer science university of illinois at urbana-champaign czhai@illinois.edu thomas rietz dept. of finance the university of iowa thomas-rietz@uiowa.edu daniel diermeier kellogg school of management northwestern university d-diermeier @kellogg.northwestern.edu abstract many applications require analyzing textual topics in conjunction with external time series variables such as stock prices. we de- velop a novel general text mining framework for discovering such causal topics from text. our framework naturally combines any given probabilistic topic model with time-series causal analysis to discover topics that are both coherent semantically and correlated with time series data. we iteratively refine topics, increasing the correlation of discovered topics with the time series. time series data provides feedback at each iteration by imposing prior distribu- tions on parameters. experimental results show that the proposed framework is effective. categories and subject descriptors i.2.7 [artificial intelligence]: natural language processing--text analysis; h.3.1 [information storage and retrieval]: content analysis and indexing--linguistic processing; h.3 [information storage and retrieval]: information search and retrieval keywords causal topic mining, iterative topic mining, time series 1. introduction analyzing and understanding text data can provide useful infor- mation. probabilistic topic models [4, 8] have proven very useful for mining text data in a range of areas including opinion analysis [11, 17], text information retrieval [19], image retrieval [9], natural language processing [6], and social network analysis [12]. most existing topic modeling techniques focus on text alone. however, text topics often occur in conjunction with other vari- ables through time. such data calls for integrated analysis of text and non-text time series data. the causal relationships between the two may be of particular interest. for example, news about permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. copyrights for components of this work owned by others than the author(s) must be honored. abstracting with credit is permitted. to copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. request permissions from permissions@acm.org. cikm'13, oct. 27-nov. 1, 2013, san francisco, ca, usa. copyright is held by the owner/author(s). publication rights licensed to acm. acm 978-1-4503-2263-8/13/10 ...$15.00. http://dx.doi.org/10.1145/2505515.2505612. companies can affect stock prices. how do particular topics lead to increasing or decreasing prices? can topics help forecast future price changes? similar examples occur in many domains. how do a company's product sales rise and fall in response to text in adver- tising or reviews? understanding the causal relationships can im- prove future sales strategies. in election campaigns, news analysis news may explain why a candidate's support changes significantly in the polls. understanding the causal relationships can improve future campaign strategies. while there are many variants of topic models [2, 3, 18], no existing model incorporates jointly text and associated ""external"" time series variables to find causal topics. a precise, conceptual definition of ""causal topics"" is beyond our scope here. we make a computational definition: a causal topic is a semantically coherent topic from text data that has strong, possibly lagged, associations with a non-textual time series variable. this allows for two-way relationships: topics may affect the time series and/or vice versa. thus, we identify potential causal relationship. interpretation will vary with the exact application and modeling or knowledge specific to the application. our method can help an analyst quickly identify a small set of possibly causal topics for further analysis.1 a basic approach to identifying causal topics is to: (1) find top- ics with topic modeling techniques then (2) identify causal topics using correlations and causality tests. however, because the topic modeling step ignores the time series data, it does not focus ex ante on topics that are particularly closely related to it. even if two time series variables are completely different (e.g., stock prices for an airline vs. national election polls), the candidate topic set would not change. some topics from this single set may happen to be cor- related with any given time series, but the modeling stage does not seek particularly relavent information in any way. we propose a novel general text mining framework: iterative topic modeling with time series feedback (itmtf), for discover- ing causal topics from text. itmtf naturally combines probabilis- tic topic modeling with time series causal analysis to uncover topics that are both coherent semantically and correlated with time series data. itmtf can accommodate any topic modeling technique and any causality measure. this generality is a significant advantage and which enables users to easily adapt different topic models and causality measures as needed for specific applications. thus, the framework can support many different applications. itmtf iter- atively refines a topic model, gradually increasing the correlation of discovered topics with the time series data through a feedback 1our definition allows using ""correlation"" and ""cause"" inter- changeably as convenient. mechanism. in each iteration, the time series data informs a prior distribution of parameters that feeds back into the topic model. thus, the discovered topics are dynamically adapted to fit the pat- terns of different time series data. we evaluate itmtf on a news data set with multiple stock price time series, including stock prices from the iowa electronic mar- kets and those of two large us companies (american airlines and apple). the results show that itmtf can effectively discover causal topics from text data and the iterative process improves the quality of the discovered causal topics. the main contributions of this paper include: 1) we introduce a novel problem setup for discovering causal topics from text data with supervision by time series data, which has many applications in multiple domains. 2) our general framework for solving this new problem naturally combines any probabilistic topic model with any correlation or causal analysis method for time series data. this novel iterative feedback algorithm uses time series data to influence topic discovery from text by iteratively imposing a time-series- based prior on topic model parameters. 3) we evaluate the pro- posed framework and algorithms on real application data sets and show that the proposed framework can effectively exploit time se- ries data to supervise and improve topic discovery from text data. 2. related work there are two basic topic models: probabilistic latent seman- tic analysis (plsa) [8] and latent dirichlet analysis (lda) [4]. both focus on word co-occurrences. recent advanced techniques analyze the dynamics of topics on a time line [2, 18]. however, they do not conduct integrated analyses of topics and external vari- ables; the topic analysis is separate from the external time series. there is also some effort to incorporate external knowledge in modeling: supervised topic models [3] and labeled lda [16]. the former uses supervised lda which incorporates a reference value (e.g. movie review article with movie rating) in the modeling pro- cess. the modeled topic shows better prediction power on the ref- erence value than simple lda. the latter extends supervised lda associate categorical labels and even text labels for topics. another way of incorporating external knowledge is to use conjugate prior probabilities in the topic modeling process [13]. topic sentiment mixture (tsm) modeles positive and negative sentiment topics us- ing seed sentiment words such as ""good"" or ""bad."" while these methods show that topic mining can be guided by external vari- ables, none achive our objective of capturing the correlation struc- ture between text topics and external time series variables. more- over, while these models are specialized for supervision with spe- cific external data, our general approach can flexibly combine any reasonable topic model with any causal analysis method. research on stock prediction using financial news content also relates to our work [14]. such research typically identifies the most predictive words and labels news according its effect on stock prices on a specific day using a supervised regression or a classi- fication problem setup. in contrast, we search for general causal topics with unsupervised methods. granger testing [7] is popular for testing causality in economics using lead/lag relationships across multiple time series. recent ev- idence shows that granger tests can be used in an opinion mining context: predicting stock price movements with a sentiment curve [5]. however, granger testing has not been used directly in text mining and topic analysis. [10] provides a very brief description of a demo system based on our framework. this focuses on describing the system components and sample results. here, we describe the general problem and framework in detail and evaluate the algorithms rigorously. 3. mining causal topics in text with supervision of time series data we formulate a new research problem: causal topic mining. con- sider time series data x1, ..., xn, with time stamps t1, ..., tn, and a collection of time stamped documents from the same period, d = {(d1,td1), ..., (dm, tdm)}. the goal is to discover a set of causal topics t1, ..., tk with associated time lags l1, ..., lk. a causal topic ti with time lag li is a topic that is semantically coherent and has a strong correlation with the time series data with time lag li. note that li can be positive or negative, corresponding to top- ics that might cause, or might be caused by, time series data. a natural first step is to use existing work on topic modeling to identify generally coherent topics and then find topics that correlate highly with the external time series variables. however, this has a drawback: topic formation is completely independent of the time series data. regardless of how much two time series differ, our candidate set of topics to choose from remains exactly the same. this is clearly non-optimal and leads us to our iterative solution. 4. iterative topic modeling with time series feedback we have two criteria to optimize: topic coherence and topic cor- relation. we want to retain the generality of the topic modeling framework while extending it allow the time series variable to influ- ence topic formation so we can optimize both criteria over a more flexible topic space. 4.1 causal analysis with time series data potential ""causal"" relationships between times series are identi- fied through contemporaneous and/or lagged correlation measures (e.g., granger tests). the correlation lag structure suggests direc- tional causality. if current observations in time series a correlated with later observations in b, a is said to ""cause"" b. a simple and very common measure uses pearson correlations, contemporaneously or with leads and lags. correlations range from -1 to +1 with the sign indicating the direction of correlation and can be used as ""impact"" measures here. a correlation significance depends on its value and the number of observations. granger tests are more structured measures of causality, measur- ing statistical significance at different time lags using auto regres- sion to identify causal relationships. let yt and xt be two time series. to see if xt ""granger causes"" yt with maximum p time lag, run the following regression: yt = a0 + a1yt-1 + ... + apyt-p + b1xt-1 + ... + bpxt-p. then, use f-tests to evaluate the significance of the lagged x terms. the coefficients of lagged x terms estimate the impact of x to y. we average the x term coefficients, p i=1 bi |p| , as an impact value. 4.2 an iterative topic modeling framework with time series feedback input: time series data x = x1, ..., xn with time stamp t1, ..., tn, and a a collection of text documents with time stamps from the same period, d = {(d1,td1), ..., (dm, tdm)}, topic modeling method m, causality measure c, a parameter tn (how many topics to model) output: k potentially causal topics (k<=tn): (t1, l1), ..., (tk, lk) topic modeling method m identifies topics. the causality mea- sure c gives significance measures (e.g. p-value) and impact ori- entation. figure 1 illustrates our iterative algorithm. it works as follows: 1. apply m to d to generate tn topics t1, .., ttn 2. use c to find topics with significance values sig(c, x, t) > g (e.g. 95%). let ct be the set of candidate causal topics with lags: ct = {(tc1, l1), ..., (tck, lk)}. 3. for each candidate topic in ct, apply c to find most signif- icant causal words among top words w  t. record the im- pact values of these significant words (e.g., word-level pear- son correlations with time series variable). 4. define a prior on the topic model parameters using signifi- cant terms and their impact values. (a) separate positive impact terms and negative impact terms. if one orientation is very weak (< d%, e.g. 10%), ignore the minor group. (b) assign prior probability proportions according to sig- nificance levels. 5. apply m to d using the prior obtained in step 4 (this injects feedback signals and guides the topic model to form topics that are more likely correlated with the time series) 6. repeat 2-5 until satisfying stopping criteria (e.g. reach topic quality at some point, no more significant topic change). when the process stops, ct is the output causal topic list. figure 1: overview of iterative topic modeling algorithm itmtf considers the non-textual time series data in the text min- ing process to find topics that are more highly correlated to non- textual data than general modeling systems. moreover, itmtf iteratively improves modeling results by considering interactions between the text and time series data at both topic and word levels. after identifying causal topics, itmtf shifts to word level corre- lations between the text and external time series data. it also im- proves the topic modeling process by splitting positively and neg- atively impacting terms into different topics. because generating and testing all the word time series is inefficient, itmtf focuses only on the words with the highest frequencies in the most highly correlated topics discovered in each iteration. the ideal set of causal topics should have tight relationships with the external time series and high topic quality. traditional topic modeling algorithms form topics based on word coherences in the text data, while causality tests can filter out non-causal topics. fo- cusing exclusively on one criterion sacrifices the other. our itera- tive process is a greedy approximate solution to the two-item max- imization problem. it takes turns optimizing each criterion. the prior formation based on causality attempts to optimize causality while an topic modeling optimizes coherence of topics. 4.2.1 topic-level causality analysis from topic modeling results, we generate a topic curve over time by computing each topic's coverage on each time unit (e.g., one day). consider a weighted coverage count. specifically, compute the coverage of a topic in each document, p(topicj|documentd). this is simply the parameter th(d) j estimated in the modeling pro- cess. estimate the coverage of topic j at ti, tcj i as the sum of th(d) j over all the documents with ti time stamp. call the list of tcj for all the time stamps the topic stream tsj: tcj i =  d with ti th(d) j , tsj = tcj 1, tcj 2, ..., tcj n this creates a topic stream time series that, combined with the non- textual time series data, lends itself to standard time series causality measures c and testing. selecting lag values is important. one possibility is to use the most significant lag within a given maximum. for example, if we want to find causal topics within 5 days, we can choose the lag within 5 days with the highest significance. if we want to focus on yesterday's effect, we can choose a fixed lag of 1. the specific choice depends on the specific aims of an application. 4.2.2 word-level causality and prior generation based on topic causality scores, we choose a subset of promis- ing topics with the highest causality scores and further analyze the words within each topic to provide feedback for the next iteration by generating topic priors. specifically, for each significant topic, we check whether the top words in the topic are also significantly correlated with the external time series. for each word, we gener- ate a word count stream wsw by counting frequencies in the input document collection for each day: wci =  d with ti c(w, d) , wsw = wc1, wc2, ..., wcn where c(w, d) is the count of word w in document d. then we measure correlations and significance between word streams and the external non-textdual time series. this identifys words that are significantly correlated and their impact values. intuitively, we want to emphasize significant topics and words in our next topic modeling iteration to focus in more promising topic space. to do this, we generate topic priors for significant words in significant topics. a topic prior is a dirichlet distribution that fa- vors topics assigning high probabilities to the identified significant words in significant topics. we assign prior word probabilities in proportion to the significance value of the words. this prior helps ""steer"" the topic modeling process to form/discover topics similar to the prior topics [13]. in the next topic modeling iteration, the dis- covered topics are likely to be close to the prior, which is based on the feedback from the time series variable through causality scores. in addition to keeping significant topics and words, we also want to improve topic quality. a ""good"" correlated topic has a consistent impact relative to the external time series. we want relatively con- sistent topics, those containing words that have mostly ""positive"" or mostly ""negative"" impacts on the external time series. therefore, if one topic has both positive and negative impact words, we separate the positive and negative impact words into two topics in the prior for the next topic modeling iteration. if one of the word impact groups is much smaller than the other (e.g. the number of positive impact words < 0.1 * the number of negative impact words), we keep only one topic and set the probability of words in the smaller group zero. this ""tells"" the topic model not to include such words in the refinement of the topic. table 1: example of topic and word correlation analysis re- sult (left) and prior generated (right) (sig: significance, prob: probability word impact sig (%) word prob social + 99 social 0.8 security + 96 security 0.2 gun - 99 gun 0.75 control - 97 control 0.25 september - 99 = september 0.1 terrorism - 97 terrorism 0.075 ... ... attack - 96 attack 0.05 good + 96 good 0.0 suppose, among n total topics, we identify 2 topics as signifi- cantly correlated with the external time series (left of table 1). we check correlations of the top words in these two topics. suppose 4 and 10 words were significant for the two topics respectively. be- cause there are both positive and negative word groups with similar sizes, we would split the first topic into two topics and assign word probabilities based on significance values. for the second topic, only one word has a different impact orientation from the others making the negative group much smaller than the positive group. therefore, instead of making a separate negative word group topic, we exclude it from the positive word group topic by assigning it zero weight. right side of table 1 shows the example prior gener- ated. another challenging is selecting a cutoff for ""top"" words in the correlation list. the simplest solution is to set a fixed cutoff, say k, and use the top k words. however, rank alone does not determine the importance of words. importance is determined by word prob- abilities as well. for example, suppose the top three words in topic 1, a, b, and c have probabilities 0.3, 0.25 and 0.2, respectively, and the top three words in topic 2, d, e, and f have probabilities 0.002, 0.001 and 0.0001. in this case, a, b and c are very impor- tant in topic 1. however, d, e, and f combined only represent a small part of topic 2. hence, topic 2 may require more words to be considered. we address this by using a cumulative probability mass cutoff, probm. we use all words whose accumulated probabilities are within a cutoff. formally, for each topic tj = (w1, ph(j) w1), ..., (w|v |, ph(j) w|v |) (|v | is the number of words in the input data set vocabulary), when items are sorted by ph(j) wi , we can add the top ranked word to the top word list tw without violating the constraint  wt w ph(j) w <= probm where tw = (w1, ..., wm). that is,  wt w ph(j) w + ph(j) wm+1 > probm. with top word tw = (w1, ..., wm) and significance value of each word sig(c, x, w) , the topic prior ph' w can be com- puted by the following formula: ph' w = sig(c, x, w) - g m j=1(sig(c, x, wj) - g) where g is a significance cutoff (e.g. 95%). 4.2.3 iterative modeling with feedback using the new prior, we remodel topics. new topics will be guided by priors, which depend on correlations with the external data. high probability words in the prior have a greater impact in the modeling results and words with zero probability are not in- cluded in the topic. by repeating the process of topic modeling, correlation analysis, and prior generation, the resulting topics are likely more highly correlated with the external time-series. the strength of the prior in each iteration is set by a parameter u in the modeling process [13]. with u = 0, modeling would not consider the prior information at all (making it the same as independent modeling). with a very high u, words in the prior are very likely to appear in the topic modeling results. (we study this parameter's influence in our experiments.) while we observe correlations between non-textual series and both word streams and topic streams, we do not compute correla- tions for all word streams. word level analysis would give us finer grain signals. however, generating all the word frequency time series and testing correlations would be very inefficient. by nar- rowing down to significant topics first, we can prune the number of words to test. this increases efficiency and effectiveness. 5. evaluation 5.1 experiment design we evaluate the proposed algorithms on the new york times data set 2 with multiple stock time series data. in one experiment, we examine the 2000 u.s. presidential elec- tion campaign. the input text data comes from new york times 2http://www.ldc.upenn.edu/catalog/ catalogentry.jsp?catalogid=ldc2008t19 articles from may through october of 2000. we filter them for key words ""bush"" and ""gore,"" and use paragraphs mentioning one or both words. the idea is to find specific topics which caused sup- port for bush or gore to change and not simply election related topics. as a non-textual time series input, we use prices from the iowa electronic markets (iem)3 2000 presidential winner-takes- all market [1]. in this on-line futures market, prices forecast the probabilities of candidates winning4 the election. we follow stan- dard practice in the field and use the ""normalized"" price of one candidate as a forecast probability of the election outcome: (gore price)/(gore price + bush price). in another experiment, we use stock prices of american airlines and apple and the same new york times text data set with longer time period, but without keyword filtering, to examine the influence of having different time series variables for supervision. while the framework is general, comparing different topic mod- els is not the focus of our paper. so, we only used one topic model: plsa implemented based on the lemur information re- trieval toolkit.5 for correlation measures, we use both contem- poraneous pearson correlation coefficients and granger tests. for granger tests, we use the r statistical package6 implementation. granger tests require stationary time series as inputs. to make the input series stationary, we smooth with a moving average filter with window size 3 (average with adjacent values) and use first differ- ences (xt) - (xt-1) of each series. we test causality with up to 5 day lags and pick the lag which shows highest significance. 5.1.1 measures of quality we report two measure the quality for mined topics: causality confidence and topic purity. for causality confidence, we use the significance value (i.e. p-value) of the granger test between the text stream and external variable. for topic purity, we use the impact orientation distribution of significant words. if all the significant words in one topic have the same orientation, it has 100% purity. if significant words are evenly split by positive and negative impact, it has 0% purity. we calculate the entropy of significant word dis- tributions and normalize it to the [0, 100] range. thus, the purity of topic t is defined as: pprob = the number of positive impact words the number of significant words nprob = the number of negative impact words the number of significant words entropy(t) = pprob * log(pprob) + nprob * log(nprob) purity(t) = 100 + 100 * entropy(t). we report average causality confidence and purity for topics with more than 95% significance. thus, when there are more significant topics, this measure may be penalized. however, because measur- ing general utility of significant topics is meaningful from a user perspective, we do not adjust this measure. 5.1.2 baseline the first iteration of our method is based on topic modeling with- out guidance from the time series and, thus, is a natural baseline. comparing iterations and final results to this shows the benefit of iterative topic mining. 5.1.3 parameter tests we test two parameters for effects on performance. the first is the number of topics modeled (tn). a large number of topics may 3http://tippie.uiowa.edu/iem/ 4""winning"" as defined by the iem is taking the majority of the two-party popular vote 5http://www.lemurproject.org/ 6http://www.r-project.org/ help identify more specific topics and more coherent (higher purity) topics. however, topics that are too specific result in data sparse- ness that reduces the power of significance testing. a small number of topics gives the opposite effects: topics are likely to have higher statistical significance, but would have lower purity. also, because many meaningful topics may be merged into a single topic, topics may be too coarse to interpret easily. the second parameter is the strength of the prior (u). a stronger topic prior would guarantee prior information is reflected in the next topic modeling iteration. however, if the initial topic modeling (which uses random initiation without a prior) ends up at a poor local optimum, a strong prior may keep the process there, resulting in poor topics. strong priors may also exacerbate spurious correlation resulting from noise in the first round. in contrast, weaker priors allow a less restricted iteration of topic modeling, reducing these negative effects. however, positive signals would also have weak impact. because prior research gives no guidance for selecting these parameters, we examine how they affect the performance of our algorithm. 5.2 experiment results 5.2.1 sample results 2000 presidential election: table 2 shows sample results from the 2000 u.s. presidential election. it shows the top three words of sig- nificant causal topics mined (pearson correlation, tn=30, u=50, 5th iteration). the result reveals several important issues from the cam- paigns, e.g. tax cuts, abortion, gun control and energy. such topics are also cited in political science literature [15] and wikipedia7 as important election issues. this shows that our iterative topic min- ing process can converge to issues expected to affect the election. table 2: significant topic list of 2000 presidential election (each line is a topic. top three probability words are dis- played.) top three words in significan topics tax cut 1 screen pataki giuliani enthusiasm door symbolic oil energy prices pres al vice love tucker presented partial abortion privatization court supreme abortion gun control nra news w top stock time series, aamrq vs. aapl: to study how different time series affect the topics discovered, we compare the topics dis- covered from the same text data set using two different time series. we use new york times articles from july 2000 through decem- ber 2001 as the text input. we use american airlines (aamrq) and apple (appl) stock prices as external time series. american airlines' stock (travel industry) dropped significantly in september 2001 because of the 9/11 terrorist attack, while apple stock (it in- dustry) was less affected. we start with the same modeled topic list at the first iteration. thus, any differences in modeled topics are from feedback of the external time series. table 3 shows the top three words of significant topics mined us- ing the two different external time series after three rounds (tn=30 and u=1000). topics associated with american airlines include clearly relevant words such as ""airlines airport air"" and ""united trade terrorism."" one topic is clearly about the terrorist attack. topics associated with apple differ dramatically. revelant refer- ence such as ""computer technology software"" and ""internet com web"" reference apple's it industry. 7http://en.wikipedia.org/wiki/united_ states_presidential_election,_2000#general_ election_campaign table 3: significant topic list of two different external time se- ries: aamrq and aapl (each line is a topic. top three prob- ability words are displayed.) aamrq aapl russia russian putin paid notice st europe european germany russia russian europe bush gore presidential olympic games olympics police court judge she her ms airlines airport air oil ford prices united trade terrorism black fashion blacks food foods cheese computer technology software nets scott basketball internet com web tennis williams open football giants jets awards gay boy japan japanese plane moss minnesota chechnya ... this example also shows a limitation of our algorithm. in ad- dition to clearly relevant topics, there appear other general topics (e.g., sports). this task presents more challenges than the 2000 u.s. presidential election example because of the diversity in text data and long time period. while we use text articles which are related to candidates for the presidential election case, we use all articles in the time period for this example. greater topic diversity can lead to more spurious correlation independent of real causality. moreover, our analysis is over 18 months and the algorithm mea- sures correlation over the entire time period. therefore, if an event is only locally correlated, it may not be selected in the final output topic list. how to measure and deliver local correlation feedback remains for future work. despite these difficulties, our algorithm shows how different time series inputs select different topics relevant to themselves using the same text data and initially modeled topics. thus, our algorithm can effectively guide topic modeling. pre-filtering relevant articles and shorter time periods may yield better results. moreover, while some topics seem seem unrelated to stock prices at first blush, they may reveal unexpected, but meaningful, relationships. 5.2.2 quantative evaluation results we ask two questions: 1) is our joint mining algorithm more effective than simply combining an existing topic model with a time series analysis method in a straightforward way? 2) is the feedback mechanism in the proposed framework beneficial? to answer both, we study how results change between the baseline method (with no feedback) through multiple iterations. figure 2a shows performance evaluation results with different us using granger tests. average causality confidence increases over iterations regardless of the strength of feedback, u. the perfor- mance improvement is particularly notable between the first itera- tion (baseline with no feedback) and the second iteration (with one feedback round). clearly, feedback is beneficial. after the second iteration, performance shows slower improvement. later rounds appear to fine tune topics resulting from the first feedback round. the average purity graph shows mixed results. for small u values (u=10, 50, 100), iterations do not always improve purity. with higher u values (u=500, 1000), average purity improved from the first iteration to the second. furthermore, for the highest u value (u=1000), it showed a steady increase. weak us would al- low topic modeling more room to explore variations regardless of prior. therefore, the purity improvement may not be guaranteed in each iteration. thus, high u values lead to higher increases in pu- rity. further, reported purity is the averaged purity value of all the significant topics found. the number of significant topics increases dramatically between the first and second iteration. thus, the drop in average purity may not be a negative sign. still, higher us ensure purity improvement. figure 2b shows performance evaluation results with different topic numbers (tn) using granger tests. initially, small topic num- bers (tn=10, 20) had higher confidence levels than large topic num- bers (tn=30, 40). intuitively, the statistical signal is stronger with (a) with different u (b) with different tn figure 2: causality confidence (left) and purity (right) with dif- ferent parameter settings over iteration (presidential election data, granger tests) small topic numbers, while sparseness associated with large topic numbers reduces statistical strength. however, with more itera- tions, relative order changes. thus, the feedback process helps overcome sparseness problem. significantly correlated topics and words are kept by iterations of priors and topic modeling iterations add coherence to them. thus, in the end, the number of topics has little effect on average confidence. in general, modeled topics with larger tn show higher purity than with small tn. as expected, each topic would is specific and the chance of combining multiple real topics in one is smaller. there- fore, topics likely have better purity.8 to show that the improvement not an artifact of noise in topic modeling, we test significance of the performance improvement between the first and second iteration. we execute 20 separate tri- als with random initiation and applied itmtf (tn=30, u=1000). paired t-test between the first and second iterations showed >99% significance for each measure (t-value: 3.87 for average confidence, 14.34 for average purity). thus, feedback significantly improves average correlation and topic quality over simple topic modeling. beyond the first feedback round, causality improvements are rela- tively small. thus, in practice, one feedback round may be suffi- cient. overall high u values clearly improve topic quality. results on tn values are less clear. next, we describe an approach and experi- ment results for finding the optimal tn. 5.2.3 optimal number of topics in practice, selecting the appropriate number of topics (tn) presents challenges. we propose a ""variable topic number"" approach. our algorithm naturally splits topics by word impacts in each iteration. therefore, we can start with an small tn, let the algorithm split top- ics in each prior and use the increased number of topics in the next iteration. we can also add some buffer topics in some or all rounds to give topic modeling room to explore more topics. for example, 7 out of 10 initial topics may be deemed causal in a round and 5 out 8we performed the same series of tests using pearson correlation coefficients. in general, the results are similar, but not reported because of space limitations. of 7 may be split. the next prior will include 12 topics. adding 5 more buffer would result in 17 topics for the next iteration. topics tend to have high causality with small tn. likely, many will be retained as causal from the beginning. with iteration, top- ics are split. while the number of topics rises, the proportion of causal topic will likely fall. we suggest stopping when the number of causal topics starts fall relative to the previous iteration, which means topic splitting hurts more than iterative modeling improves causal topic identification. when we actually apply this starting with tn = 10, and the number of significant causal topics starts to decrease after 30 total topics, so we set tn=30. we test this variable topic number algorithm against fixed topic numbers in our topic number analysis. tnvar in figure 2(b) shows average confidence and purity compared to the fixed tn methods. in both average confidence and purity, the variable topic number approach performs well, proving its efficacy. 6. conclusions here, we present a novel general text mining framework: it- erative topic modeling with time series feedback (itmtf) for causal topic mining. itmtf uses text data and a non-text exter- nal time series as inputs and iteratively models topics related to changes in the external time series. experimental results show that itmtf finds topics that are both more pure and more highly cor- related with the external time series than typical topic modeling, especially with a strong feedback loop. the general problem of mining causal topics opens new direc- tions for future research, both theoretical and applied. itmtf can be generalized using any topic modeling techniques and causal- ity/correlation measures desired. our examples illustrate one of many ways to implement the framework, which can certainly be implemented in other ways. in future work, we hope to extend itmtf's ability to identify locally correlated events. in addition, the proposed alternating optimization strategy is only a heuristic without theoretical guarantees of convergence. while, empirically, this strategy works well on tested data sets, an obvious and interest- ing extension would be to integrate topic models with time series data more tightly using a single unified objective function for opti- mization. acknowledgments this material is based upon work supported in part by the national science foundation under grant number cns-1027965 and by an hp innovation research award. 7. references [1] j. berg, r. forsythe, f. nelson, and t. rietz. results from a dozen years of election futures markets research, volume 1 of handbook of experimental economics results, chapter 80, pages 742-751. elsevier, 2008. [2] d. m. blei and j. d. lafferty. dynamic topic models. in proceedings of the 23rd international conference on machine learning, pages 113-120, new york, ny, usa, 2006. acm. [3] d. m. blei and j. d. mcauliffe. supervised topic models. 2007. [4] d. m. blei, a. y. ng, and m. i. jordan. latent dirichlet allocation. journal of machine learning research, 3:993-1022, 2003. [5] j. bollen, h. mao, and x.-j. zeng. twitter mood predicts the stock market. corr, abs/1010.3003, 2010. [6] j. boyd-graber, d. m. blei, and x. zhu. a topic model for word sense disambiguation. in emnlp '07: proceedings of the 2007 conference on empirical methods in natural language processing, 2007. [7] c. w. j. granger. essays in econometrics. chapter investigating causal relations by econometric models and cross-spectral methods, pages 31-47. harvard university press, cambridge, ma, usa, 2001. [8] t. hofmann. probabilistic latent semantic indexing. in sigir '99: proceedings of the 1999 international acm sigir conference on research and development in information retrieval, pages 50-57, new york, ny, usa, 1999. acm. [9] e. horster, r. lienhart, and m. slaney. image retrieval on large-scale image databases. in civr '07: proceedings of the 2007 acm international conference on image and video retrieval, pages 17-24, new york, ny, usa, 2007. acm. [10] h. d. kim, c. zhai, t. a. rietz, d. diermeier, m. hsu, m. castellanos, and c. ceja. incatomi: integrative causal topic miner between textual and non-textual time series data. in cikm '12: proceedings of the 2012 acm international conference on information and knowledge management, pages 2689-2691, new york, ny, usa, 2012. acm. [11] c. lin and y. he. joint sentiment/topic model for sentiment analysis. in cikm '09: proceedings of the 2009 acm international conference on information and knowledge management, pages 375-384, new york, ny, usa, 2009. acm. [12] y. liu, a. niculescu-mizil, and w. gryc. topic-link lda: joint models of topic and author community. in icml '09: proceedings of the 2009 annual international conference on machine learning, pages 665-672, new york, ny, usa, 2009. acm. [13] q. mei, x. ling, m. wondra, h. su, and c. zhai. topic sentiment mixture: modeling facets and opinions in weblogs. in proceedings of the 16th international conference on world wide web, pages 171-180, new york, ny, usa, 2007. acm. [14] g. mitra and l. mitra. the handbook of news analytics in finance /. wiley ;, hoboken, n.j. :, 2011. [15] g. pomper. the election of 2000: reports and interpretations. election of. chatham house publishers, 2001. [16] d. ramage, d. hall, r. nallapati, and c. d. manning. labeled lda: a supervised topic model for credit attribution in multi-labeled corpora. in proceedings of the 2009 conference on empirical methods in natural language processing: volume 1 - volume 1, emnlp '09, pages 248-256, stroudsburg, pa, usa, 2009. association for computational linguistics. [17] i. titov and r. mcdonald. a joint model of text and aspect ratings for sentiment summarization. in acl '08: proceedings of the 2008 annual meeting on association for computational linguistics, pages 308-316, columbus, ohio, 2008. association for computational linguistics. [18] x. wang and a. mccallum. topics over time: a non-markov continuous-time model of topical trends. in proceedings of the 12th acm sigkdd international conference, pages 424-433, new york, ny, usa, 2006. acm. [19] x. wei and w. b. croft. lda-based document models for ad-hoc retrieval. in sigir '06: proceedings of the 2006 international acm sigir conference on research and development in information retrieval, pages 178-185, new york, ny, usa, 2006. acm. cs410 course project team jem: reproducing paper on casual topic mining zhangzhou yu (leader) matthew mccarty jack ma presentation/demo a presentation and demonstration of installing and running the application is available at https://mediaspace.illinois.edu/media/t/1_yra0qvjp . overview this repository contains code to replicate an experiment done in a paper regarding causal topic mining with time series feedback: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 the intent of this paper is to develop a method to consider additional contextual data (specifically, in the form of a time series) to supplement topic mining. the paper discusses two scenarios (presidential elections and stock prices); we chose to replicate the former. the specific experiment that was replicated involves determining topics from new york times (nyt) articles from may-october 2000, with the additional context of betting odds for bush and gore winning the 2000 presidential election. there are two files which are used as input for the python code. one is the time series data for the betting odds, which is located in time_series.csv (iowa2000presidentodds.csv is the raw data). the second input file, consolidated_nyt.tsv, is a list of nyt articles between may and october 2000. the nyt articles were filtered by 'bush' and 'gore' keywords to ensure that non-relevant documents were not considered for topic generation. the article date is also included with the article content, so that the time context of the article's publication can be considered with the presidential odds time series. the output of the program will be a list of topics, and the top three words within each topics. unlike the plain vanilla psla algorithm, these topics highlight words that are highly correlated with the change of betting odds for bush or gore winning the election. the number of topics is determined by a parameter tn, and the paper discusses the performance of the algorithm with varying values of tn. for the purposes of our experiment reproduction, we chose tn=10. software implementation the experiment was reproduced in python (version 3.8.6) with the help of several libraries, which are listed below: numpy - for general linear algebra operations gensim - for generating a mapping between a token id and the normalized words which they represent statsmodels - for the time-series causality test the algorithm itself is a modified version of the plsa algorithm, which was initially implemented for a homework assignment (mp3) in cs410 at uiuc. the plsawithprior.py file contains a plsa class which contains many variables of use, some of which are highlighted below: term_doc_matrix - word count of terms in a given document document_topic_prob - the probability of p(z | d) where z represents a specific topic and d represents a specific document mu - the strength of the prior probability (when mu=0, the result would match plsa with no prior) prior - the prior probability of p(w | z) where w represents a word and z represents a specific topic topic_word_prob = the posterior probability of p(w | z) additional descriptions of software programs are illustrated below: * granger_casuality_test.py- first clean the presidential betting odds time series raw data iowa2000presidentodds.csv and output the cleaned data time_series.csv; implemented the granger casuality test function ready for use in main.py * calc_prior.py - calculate the prior of significant words within significant topics from the granger casuality test significance level output * sanitize_nyt.py - text data extraction, filtering and cleaning on the nyt articles from may-october 2000; output consolidated_nyt.tsv where each line contains documents with 'bush' and 'gore' keywords from one day (the number of lines in this clean text data matches with the number of rows in the clean time series data; readily available for use in the granger casuality test) * main.py - include all the functions discussed above; consolidated main program future modifications could be made to the algorithm to change how the prior is generated (based on other time-series/non-document data source). software usage run git clone https://github.com/enaena633/courseproject.git to clone the code repository. install python 3. install the following python libraries (via pip, etc.): numpy gensim statsmodels run python main.py in the repository directory. results the following list is the top 3 words in the ten topics that were mined from the new york times documents: ad win ralli night lehrer trillion econom recent try support governor alaska state governor alaska governor clarenc right night win tuesdai wetston abm recent offic men try win ralli church these results are different from the paper's results, which are included below: tax cut 1 screen pataki giuliani enthusiasm door symbolic oil energy prices pres al vice love tucker presented partial abortion privatization court supreme abortion gun control nra news w top this can be explained by the following: the implementation of several elements of the algorithm (granger causality test, plsa, etc.) were implemented in python, whereas the paper used r. we used the gensim package to perform stemming of words (which would cause words like econom to appear instead of economy or economic). gensim was also used to remove stop words. the paper does not specify whether a background language model was used in its implementation of plsa or if any stop word removal was done. the em algorithm is guaranteed to converge to a local (but not necessarily global) maximum, which causes output to be different even with the same implementation when different random starting values are used. certain parameters in the paper are not specified (e.g., the threshold value gamma for the significance cutoff for words at the topic level, we used 90%). team member contributions all team members were engaged and involved in reproducing the experiment from the paper sourced above. in addition to weekly meetings where everyone contributed, individual team members were responsible for the following: zhangzhou yu (leader) - time series data retrieval/cleaning, granger causality test, administrative/organizational tasks matthew mccarty - text data retrieval/cleaning, library research, documentation, presentation/demo recording jack ma - plsa augmentation to include use of contextual time series data, prior implementation, consolidate/structure software programs 1) progress made thus far * we have obtained the data, cleaned and filtered only articles containing ""gore"" or ""bush"" to start with * we have mostly understood the whole paper and identified the approach to implement the plsa with dirichlet prior * we have split up the remaining work 2) remaining tasks * further clean the data into only paragraphs containing ""gore"" and ""bush"" and remove all non- alphanumerical characters * work on the granger causality test combining the time series data with the word counts of document data * calculated the prior according the formula specified in the paper and update the maximization step of plsa with the given mu and prior previously calculated 3) any challenges/issues being faced * for now we are not running into any execution issues yet project proposal for team jem 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. team jem is made up of the following three members. the team coordinator/leader is zhangzhou yu (zy37@illinois.edu). o zhangzhou yu (zy37@illinois.edu), o matthew mccarty (mdm12@illinois.edu), o jack ma (jma46@illinois.edu) 2. which paper have you chosen? causal topic modeling o hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 3. which programming language do you plan to use? python (as we found a package to do granger causality test). 4. can you obtain the datasets used in the paper for evaluation? we are in the process of gaining access to the text datasets on linguistic data consortium for the new york times corpus from may through october 2000. the access is pending upon approval by the uiuc admin access, where the professor is actively engaged on this issue. currently, we are able to access prices from the iowa electronic markets (iem) 2000 presidential winner-takes-all market as well as the stock prices of apple and american airlines during that time period. 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? if we are unable to access the text data on the linguistic data consortium for the new york times corpus for the 2000 presidential election, we will investigate using the online new york times archives (or some other accessible newspaper archive) for the 2016 presidential election articles along with stock prices of american airlines and apple of the same time period. 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? to demonstrate that we have successfully reproduced the method introduced in the paper, we will output significant topic lists that affected the 2016 presidential election and stock prices of american airlines and apple in 2016 respectively. we will check the results of the top topic lists against what truly happened in that time frame."	['mining', 'causal', 'topics', 'text', 'data', 'iterative', 'topic', 'modeling', 'time', 'series', 'feedback', 'hyun', 'duk', 'kim', 'dept', 'computer', 'science', 'university', 'illinois', 'urbanachampaign', 'hkimillinoisedu', 'malu', 'castellanos', 'information', 'analytics', 'lab', 'hp', 'laboratories', 'malucastellanoshpcom', 'meichun', 'hsu', 'meichunhsuhpcom', 'chengxiang', 'zhai', 'czhaiillinoisedu', 'thomas', 'rietz', 'finance', 'iowa', 'thomasrietzuiowaedu', 'daniel', 'diermeier', 'kellogg', 'school', 'management', 'northwestern', 'ddiermeier', 'kelloggnorthwesternedu', 'abstract', 'many', 'applications', 'require', 'analyzing', 'textual', 'conjunction', 'external', 'variables', 'stock', 'prices', 'de', 'velop', 'novel', 'general', 'framework', 'discovering', 'naturally', 'combines', 'given', 'probabilistic', 'model', 'timeseries', 'analysis', 'discover', 'coherent', 'semantically', 'correlated', 'iteratively', 'refine', 'increasing', 'correlation', 'discovered', 'provides', 'iteration', 'imposing', 'prior', 'distribu', 'tions', 'parameters', 'experimental', 'results', 'show', 'proposed', 'effective', 'categories', 'subject', 'descriptors', 'artificial', 'intelligence', 'natural', 'language', 'processingtext', 'h', 'storage', 'retrieval', 'content', 'indexinglinguistic', 'processing', 'search', 'keywords', 'introduction', 'understanding', 'provide', 'useful', 'infor', 'mation', 'models', 'proven', 'range', 'areas', 'including', 'opinion', 'image', 'social', 'network', 'existing', 'techniques', 'focus', 'alone', 'however', 'often', 'occur', 'vari', 'ables', 'calls', 'integrated', 'nontext', 'relationships', 'two', 'may', 'particular', 'interest', 'example', 'news', 'permission', 'make', 'digital', 'hard', 'copies', 'part', 'work', 'personal', 'classroom', 'use', 'granted', 'without', 'fee', 'provided', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'full', 'citation', 'first', 'page', 'copyrights', 'components', 'owned', 'others', 'authors', 'must', 'honored', 'abstracting', 'credit', 'permitted', 'copy', 'otherwise', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'specific', 'andor', 'request', 'permissions', 'permissionsacmorg', 'cikm', 'oct', 'nov', 'san', 'francisco', 'ca', 'usa', 'copyright', 'held', 'ownerauthors', 'publication', 'rights', 'licensed', 'acm', 'httpdxdoiorg', 'companies', 'affect', 'lead', 'decreasing', 'help', 'forecast', 'future', 'price', 'changes', 'similar', 'examples', 'domains', 'companys', 'product', 'sales', 'rise', 'fall', 'response', 'adver', 'tising', 'reviews', 'im', 'prove', 'strategies', 'election', 'campaigns', 'explain', 'candidates', 'support', 'significantly', 'polls', 'improve', 'campaign', 'variants', 'incorporates', 'jointly', 'associated', 'find', 'precise', 'conceptual', 'definition', 'beyond', 'scope', 'computational', 'strong', 'possibly', 'lagged', 'associations', 'nontextual', 'variable', 'allows', 'twoway', 'vice', 'versa', 'thus', 'identify', 'potential', 'relationship', 'interpretation', 'vary', 'exact', 'application', 'knowledge', 'method', 'analyst', 'quickly', 'small', 'set', 'basic', 'approach', 'identifying', 'top', 'ics', 'using', 'correlations', 'causality', 'tests', 'step', 'ignores', 'ex', 'ante', 'particularly', 'closely', 'related', 'even', 'completely', 'different', 'eg', 'airline', 'vs', 'national', 'candidate', 'would', 'change', 'single', 'happen', 'cor', 'stage', 'seek', 'relavent', 'way', 'propose', 'itmtf', 'ing', 'probabilis', 'tic', 'uncover', 'accommodate', 'technique', 'measure', 'generality', 'significant', 'enables', 'users', 'easily', 'adapt', 'measures', 'needed', 'iter', 'atively', 'refines', 'gradually', 'cause', 'inter', 'changeably', 'convenient', 'mechanism', 'informs', 'distribution', 'feeds', 'back', 'dynamically', 'adapted', 'fit', 'pat', 'terns', 'evaluate', 'multiple', 'electronic', 'mar', 'kets', 'large', 'us', 'american', 'airlines', 'apple', 'effectively', 'process', 'improves', 'quality', 'main', 'contributions', 'paper', 'include', 'introduce', 'problem', 'setup', 'supervision', 'solving', 'new', 'algorithm', 'uses', 'influence', 'discovery', 'based', 'pro', 'posed', 'algorithms', 'real', 'sets', 'exploit', 'se', 'ries', 'supervise', 'latent', 'seman', 'plsa', 'dirichlet', 'lda', 'word', 'cooccurrences', 'recent', 'advanced', 'analyze', 'dynamics', 'line', 'conduct', 'analyses', 'separate', 'also', 'effort', 'incorporate', 'supervised', 'labeled', 'former', 'reference', 'value', 'movie', 'review', 'article', 'rating', 'cess', 'modeled', 'shows', 'better', 'prediction', 'power', 'ref', 'erence', 'simple', 'latter', 'extends', 'associate', 'categorical', 'labels', 'another', 'incorporating', 'conjugate', 'probabilities', 'sentiment', 'mixture', 'tsm', 'modeles', 'positive', 'negative', 'seed', 'words', 'good', 'bad', 'methods', 'guided', 'none', 'achive', 'objective', 'capturing', 'struc', 'ture', 'specialized', 'spe', 'cific', 'flexibly', 'combine', 'reasonable', 'research', 'financial', 'relates', 'typically', 'identifies', 'predictive', 'according', 'effect', 'day', 'regression', 'classi', 'fication', 'contrast', 'unsupervised', 'granger', 'testing', 'popular', 'economics', 'leadlag', 'across', 'ev', 'idence', 'used', 'context', 'predicting', 'movements', 'curve', 'directly', 'brief', 'description', 'demo', 'system', 'focuses', 'describing', 'sample', 'describe', 'detail', 'rigorously', 'formulate', 'con', 'sider', 'x', 'xn', 'stamps', 'tn', 'collection', 'stamped', 'documents', 'period', 'dtd', 'dm', 'tdm', 'goal', 'tk', 'lags', 'l', 'lk', 'ti', 'lag', 'li', 'note', 'corresponding', 'might', 'caused', 'generally', 'correlate', 'highly', 'drawback', 'formation', 'independent', 'regardless', 'much', 'differ', 'choose', 'remains', 'exactly', 'clearly', 'nonoptimal', 'leads', 'solution', 'criteria', 'optimize', 'coherence', 'relation', 'want', 'retain', 'extending', 'allow', 'influ', 'ence', 'flexible', 'space', 'times', 'identi', 'fied', 'contemporaneous', 'structure', 'suggests', 'direc', 'tional', 'current', 'observations', 'later', 'b', 'said', 'common', 'pearson', 'contemporaneously', 'sign', 'indicating', 'direction', 'impact', 'significance', 'depends', 'number', 'structured', 'measur', 'statistical', 'auto', 'regres', 'sion', 'let', 'yt', 'xt', 'see', 'causes', 'maximum', 'p', 'run', 'following', 'ayt', 'apytp', 'bxt', 'bpxtp', 'ftests', 'terms', 'coefficients', 'estimate', 'average', 'term', 'bi', 'input', 'stamp', 'c', 'parameter', 'output', 'k', 'potentially', 'ktn', 'mea', 'sure', 'gives', 'pvalue', 'ori', 'entation', 'figure', 'illustrates', 'works', 'follows', 'apply', 'generate', 'ttn', 'values', 'sigc', 'g', 'ct', 'tc', 'tck', 'signif', 'icant', 'among', 'w', 'record', 'pact', 'wordlevel', 'pear', 'son', 'define', 'signifi', 'cant', 'one', 'orientation', 'weak', 'ignore', 'minor', 'group', 'assign', 'probability', 'proportions', 'sig', 'nificance', 'levels', 'obtained', 'injects', 'signals', 'guides', 'form', 'likely', 'repeat', 'satisfying', 'stopping', 'reach', 'point', 'stops', 'list', 'overview', 'considers', 'min', 'non', 'systems', 'moreover', 'considering', 'interactions', 'shifts', 'level', 'corre', 'lations', 'proves', 'splitting', 'positively', 'neg', 'impacting', 'generating', 'inefficient', 'highest', 'frequencies', 'ideal', 'tight', 'high', 'traditional', 'coherences', 'filter', 'noncausal', 'fo', 'cusing', 'exclusively', 'criterion', 'sacrifices', 'itera', 'tive', 'greedy', 'approximate', 'twoitem', 'max', 'imization', 'takes', 'turns', 'optimizing', 'attempts', 'optimizes', 'topiclevel', 'computing', 'coverage', 'unit', 'consider', 'weighted', 'count', 'specifically', 'compute', 'document', 'ptopicjdocumentd', 'simply', 'thd', 'j', 'estimated', 'tcj', 'sum', 'call', 'stream', 'tsj', 'n', 'creates', 'combined', 'lends', 'standard', 'selecting', 'important', 'possibility', 'within', 'days', 'yesterdays', 'fixed', 'choice', 'aims', 'generation', 'scores', 'subset', 'promis', 'next', 'priors', 'check', 'whether', 'gener', 'ate', 'wsw', 'counting', 'wci', 'cw', 'wc', 'wcn', 'streams', 'nontextdual', 'identifys', 'intuitively', 'emphasize', 'promising', 'fa', 'vors', 'assigning', 'identified', 'proportion', 'helps', 'steer', 'formdiscover', 'dis', 'covered', 'close', 'addition', 'keeping', 'consistent', 'relative', 'relatively', 'sistent', 'containing', 'mostly', 'impacts', 'therefore', 'groups', 'smaller', 'keep', 'zero', 'tells', 'refinement', 'table', 'sult', 'left', 'generated', 'right', 'prob', 'security', 'gun', 'control', 'september', 'terrorism', 'attack', 'suppose', 'total', 'cantly', 'respectively', 'sizes', 'split', 'second', 'making', 'instead', 'exclude', 'weight', 'side', 'ated', 'challenging', 'cutoff', 'simplest', 'say', 'rank', 'determine', 'importance', 'determined', 'abilities', 'well', 'three', 'e', 'f', 'case', 'impor', 'tant', 'represent', 'hence', 'considered', 'address', 'cumulative', 'mass', 'probm', 'whose', 'accumulated', 'formally', 'tj', 'phj', 'wv', 'v', 'vocabulary', 'items', 'sorted', 'wi', 'add', 'ranked', 'tw', 'violating', 'constraint', 'wt', 'wm', 'ph', 'com', 'puted', 'formula', 'jsigc', 'wj', 'remodel', 'depend', 'greater', 'cluded', 'repeating', 'resulting', 'strength', 'u', 'appear', 'study', 'experiments', 'observe', 'correla', 'give', 'finer', 'grain', 'frequency', 'nar', 'rowing', 'prune', 'test', 'increases', 'efficiency', 'effectiveness', 'evaluation', 'experiment', 'design', 'york', 'examine', 'presidential', 'elec', 'tion', 'comes', 'httpwwwldcupenneducatalog', 'catalogentryjspcatalogidldct', 'articles', 'october', 'key', 'bush', 'gore', 'paragraphs', 'mentioning', 'idea', 'sup', 'port', 'markets', 'iem', 'winnertakes', 'market', 'online', 'futures', 'winning', 'follow', 'stan', 'dard', 'practice', 'field', 'normalized', 'outcome', 'pricegore', 'longer', 'keyword', 'filtering', 'comparing', 'mod', 'els', 'implemented', 'lemur', 'trieval', 'toolkit', 'contem', 'poraneous', 'r', 'package', 'implementation', 'stationary', 'inputs', 'smooth', 'moving', 'window', 'size', 'adjacent', 'ences', 'pick', 'report', 'mined', 'confidence', 'purity', 'ie', 'evenly', 'calculate', 'entropy', 'tributions', 'normalize', 'defined', 'pprob', 'nprob', 'entropyt', 'logpprob', 'lognprob', 'purityt', 'penalized', 'utility', 'meaningful', 'user', 'perspective', 'adjust', 'baseline', 'guidance', 'iterations', 'final', 'benefit', 'effects', 'performance', 'httptippieuiowaeduiem', 'taking', 'majority', 'twoparty', 'vote', 'httpwwwlemurprojectorg', 'httpwwwrprojectorg', 'higher', 'result', 'sparse', 'ness', 'reduces', 'opposite', 'lower', 'merged', 'coarse', 'interpret', 'stronger', 'guarantee', 'reflected', 'initial', 'random', 'initiation', 'ends', 'poor', 'local', 'optimum', 'exacerbate', 'spurious', 'noise', 'round', 'weaker', 'less', 'restricted', 'reducing', 'nificant', 'th', 'reveals', 'several', 'issues', 'cam', 'paigns', 'tax', 'cuts', 'abortion', 'energy', 'cited', 'political', 'literature', 'wikipedia', 'converge', 'expected', 'played', 'significan', 'cut', 'screen', 'pataki', 'giuliani', 'enthusiasm', 'door', 'symbolic', 'oil', 'pres', 'al', 'love', 'tucker', 'presented', 'partial', 'privatization', 'court', 'supreme', 'nra', 'aamrq', 'aapl', 'compare', 'july', 'decem', 'ber', 'appl', 'travel', 'industry', 'dropped', 'terrorist', 'dustry', 'affected', 'start', 'differences', 'rounds', 'relevant', 'airport', 'air', 'united', 'trade', 'dramatically', 'revelant', 'refer', 'technology', 'software', 'internet', 'web', 'apples', 'httpenwikipediaorgwikiunited_', 'states_presidential_election_general_', 'election_campaign', 'ability', 'displayed', 'russia', 'russian', 'putin', 'paid', 'st', 'europe', 'european', 'germany', 'olympic', 'games', 'olympics', 'police', 'judge', 'ms', 'ford', 'black', 'fashion', 'blacks', 'food', 'foods', 'cheese', 'nets', 'scott', 'basketball', 'tennis', 'williams', 'open', 'football', 'giants', 'jets', 'awards', 'gay', 'boy', 'japan', 'japanese', 'plane', 'moss', 'minnesota', 'chechnya', 'limitation', 'ad', 'dition', 'sports', 'task', 'presents', 'challenges', 'diversity', 'long', 'months', 'sures', 'entire', 'event', 'locally', 'selected', 'deliver', 'despite', 'difficulties', 'select', 'initially', 'guide', 'prefiltering', 'shorter', 'periods', 'yield', 'seem', 'unrelated', 'blush', 'reveal', 'unexpected', 'quantative', 'ask', 'questions', 'joint', 'combining', 'straightforward', 'beneficial', 'answer', 'perfor', 'mance', 'improvement', 'notable', 'slower', 'fine', 'tune', 'graph', 'mixed', 'always', 'improved', 'furthermore', 'showed', 'steady', 'increase', 'low', 'room', 'explore', 'variations', 'guaranteed', 'pu', 'rity', 'reported', 'averaged', 'found', 'drop', 'still', 'ensure', 'numbers', 'num', 'bers', 'signal', 'dif', 'ferent', 'settings', 'sparseness', 'order', 'overcome', 'kept', 'end', 'little', 'larger', 'chance', 'fore', 'artifact', 'execute', 'tri', 'als', 'applied', 'paired', 'ttest', 'tvalue', 'improvements', 'rela', 'tively', 'suffi', 'cient', 'overall', 'clear', 'experi', 'ment', 'finding', 'optimal', 'appropriate', 'splits', 'increased', 'buffer', 'deemed', 'performed', 'limitations', 'adding', 'tend', 'retained', 'beginning', 'rises', 'suggest', 'starts', 'previous', 'means', 'hurts', 'identification', 'actually', 'starting', 'decrease', 'tnvar', 'compared', 'performs', 'proving', 'efficacy', 'conclusions', 'present', 'erative', 'exter', 'nal', 'finds', 'pure', 'typical', 'especially', 'loop', 'opens', 'theoretical', 'generalized', 'itycorrelation', 'desired', 'illustrate', 'ways', 'implement', 'certainly', 'hope', 'extend', 'itmtfs', 'events', 'alternating', 'optimization', 'strategy', 'heuristic', 'guarantees', 'convergence', 'empirically', 'tested', 'obvious', 'extension', 'integrate', 'tightly', 'unified', 'function', 'opti', 'mization', 'acknowledgments', 'material', 'upon', 'supported', 'foundation', 'grant', 'cns', 'innovation', 'award', 'references', 'berg', 'forsythe', 'nelson', 'dozen', 'years', 'volume', 'handbook', 'chapter', 'pages', 'elsevier', 'blei', 'lafferty', 'dynamic', 'proceedings', 'rd', 'international', 'conference', 'machine', 'learning', 'ny', 'mcauliffe', 'ng', 'jordan', 'allocation', 'journal', 'bollen', 'mao', 'xj', 'zeng', 'twitter', 'mood', 'predicts', 'corr', 'abs', 'boydgraber', 'zhu', 'sense', 'disambiguation', 'emnlp', 'empirical', 'essays', 'econometrics', 'investigating', 'relations', 'econometric', 'crossspectral', 'harvard', 'press', 'cambridge', 'hofmann', 'semantic', 'indexing', 'sigir', 'development', 'horster', 'lienhart', 'slaney', 'largescale', 'databases', 'civr', 'video', 'ceja', 'incatomi', 'integrative', 'miner', 'lin', 'sentimenttopic', 'liu', 'niculescumizil', 'gryc', 'topiclink', 'author', 'community', 'icml', 'annual', 'q', 'mei', 'ling', 'wondra', 'su', 'facets', 'opinions', 'weblogs', 'world', 'wide', 'mitra', 'wiley', 'hoboken', 'nj', 'pomper', 'reports', 'interpretations', 'chatham', 'house', 'publishers', 'ramage', 'hall', 'nallapati', 'manning', 'attribution', 'multilabeled', 'corpora', 'stroudsburg', 'pa', 'association', 'linguistics', 'titov', 'mcdonald', 'aspect', 'ratings', 'summarization', 'acl', 'meeting', 'columbus', 'ohio', 'wang', 'mccallum', 'nonmarkov', 'continuoustime', 'topical', 'trends', 'sigkdd', 'wei', 'croft', 'ldabased', 'adhoc', 'cs', 'course', 'project', 'team', 'jem', 'reproducing', 'casual', 'zhangzhou', 'yu', 'leader', 'matthew', 'mccarty', 'jack', 'presentationdemo', 'presentation', 'demonstration', 'installing', 'running', 'available', 'httpsmediaspaceillinoisedumediat_yraqvjp', 'repository', 'contains', 'code', 'replicate', 'done', 'regarding', 'nd', 'doi', 'intent', 'develop', 'additional', 'contextual', 'supplement', 'discusses', 'scenarios', 'elections', 'chose', 'replicated', 'involves', 'determining', 'nyt', 'mayoctober', 'betting', 'odds', 'files', 'python', 'located', 'time_seriescsv', 'iowapresidentoddscsv', 'raw', 'file', 'consolidated_nyttsv', 'filtered', 'nonrelevant', 'date', 'included', 'program', 'unlike', 'plain', 'vanilla', 'psla', 'highlight', 'varying', 'purposes', 'reproduction', 'reproduced', 'version', 'libraries', 'listed', 'numpy', 'linear', 'algebra', 'operations', 'gensim', 'mapping', 'token', 'id', 'statsmodels', 'modified', 'homework', 'assignment', 'mp', 'uiuc', 'plsawithpriorpy', 'class', 'highlighted', 'term_doc_matrix', 'document_topic_prob', 'pz', 'z', 'represents', 'mu', 'match', 'pw', 'topic_word_prob', 'posterior', 'descriptions', 'programs', 'illustrated', 'granger_casuality_testpy', 'clean', 'cleaned', 'casuality', 'ready', 'mainpy', 'calc_priorpy', 'sanitize_nytpy', 'extraction', 'cleaning', 'lines', 'matches', 'rows', 'readily', 'functions', 'discussed', 'consolidated', 'modifications', 'could', 'timeseriesnondocument', 'source', 'usage', 'git', 'clone', 'httpsgithubcomenaenacourseprojectgit', 'install', 'via', 'pip', 'etc', 'directory', 'ten', 'win', 'ralli', 'night', 'lehrer', 'trillion', 'econom', 'try', 'governor', 'alaska', 'state', 'clarenc', 'tuesdai', 'wetston', 'abm', 'offic', 'men', 'church', 'papers', 'explained', 'elements', 'whereas', 'perform', 'stemming', 'like', 'economy', 'economic', 'remove', 'stop', 'specify', 'background', 'removal', 'em', 'necessarily', 'global', 'certain', 'specified', 'threshold', 'gamma', 'member', 'members', 'engaged', 'involved', 'sourced', 'weekly', 'meetings', 'everyone', 'contributed', 'individual', 'responsible', 'retrievalcleaning', 'administrativeorganizational', 'tasks', 'library', 'documentation', 'recording', 'augmentation', 'consolidatestructure', 'progress', 'far', 'understood', 'whole', 'remaining', 'alphanumerical', 'characters', 'counts', 'calculated', 'update', 'maximization', 'previously', 'challengesissues', 'faced', 'execution', 'yet', 'proposal', 'names', 'netids', 'captain', 'administrative', 'duties', 'coordinatorleader', 'zyillinoisedu', 'mdmillinoisedu', 'jmaillinoisedu', 'chosen', 'programming', 'plan', 'obtain', 'datasets', 'gaining', 'access', 'linguistic', 'consortium', 'corpus', 'pending', 'approval', 'admin', 'professor', 'actively', 'issue', 'currently', 'able', 'winnertakesall', 'question', 'dataset', 'nature', 'unable', 'investigate', 'archives', 'accessible', 'newspaper', 'archive', 'along', 'going', 'demonstrate', 'successfully', 'introduced', 'truly', 'happened', 'frame']
https://github.com/everbrightw/CourseProject	cs410 progress report netids: td2 (tianli ding) yimengh2 (yimeng han) yusenw2 (yusen wang) progress made: we were setting up the environment to make educationalweb work on our end and reading the source code and project structures. we have also proposed a file to parse a whole pdf file into single files. we are planning to write a scraping script to automatically download slides from several course websites and auto integrate those slides with the current system. remaining task: we are planning to use beautifulsoup and simple url requests to auto download slides from several uiuc courses' websites to scale up the current system challenges faced: this is a huge system with lots of folders and files. therefore we still need more time to understand and make more improvements. cs411 report by yusen wang, yimeng han, tianli ding video introduction: https://youtu.be/rsyhiecatli 1) an overview of the function of the code (i.e., what it does and what it can be used for). first, our implementation has a general crawler that can automatically scrape lecture slides in different courses from the uiuc cs courses platform (https://courses.grainger.illinois.edu). we were scraping all links from course websites and filtering them by finding potential links that could lead us to a lecture slide. then, we split the slides crawled from those websites and split them into 1 page pdfs stored in folders corresponding to course names. after that, we implement a jaccard similarity function to select related slides of each page, record the result in a csv file. then based on the relationships of the slides, we render the final result on the website. 2) documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. in crawling/scraper.py & crawling/utils.py: for the crawler, we choose the https://courses.grainger.illinois.edu as our start page to scrape our courses' url that are listed on this website. for this final project, we are only scraping courses that have 'cs' as a prefix. after we have all the course urls, we will iterate all of them and step into every course website to find where could the lecture slides/notes be located using keywords(['slides', 'slide', 'lecture','lectures','note','notes','resources','resource']). then we start to scrape all the tags <a href=true and determine whether the links are a potential lecture slide by simply checking whether the url ends with .pdf and .pptx (since we have already filtered those links with the keyword, this constraint could very likely be the lecture slides that we want to scrape). and we parse those links to a formal format and download them into the corresponding folder. all the tasks are automated and we can expect to see a system with a large scale of lecture slides using this crawler. in pdf.js/static/getrelatedfiles.py: we first extract text in pdf pages, tokenize the content and select key words after eliminating punctuations, stopwords. then compare jaccard similarities of the keywords from one pdf with all other pdfs, when the similarity is greater than 0.3, we mark these two pdfs as related. furthermore, we limit the size of the related slides as 12, so that when rendering them on the website, the list won't be too long. then, we record them in ranking.csv after changing the format according to the original format in the platform educationalweb; and record all slide names in slide_names.txt. in pdf.js/parsepdf.py: we put the results of the scraped folders under raw_slides. we filtered out those corrupted slides.then we first followed the naming convention to change the course and slides name, then split each of the slides each long pdf into a folder containing single slides for rendering. in model.py: we modified the model.py file so that other than cs410, other courses can also be rendered in the webpage. moreover, we changed the path related_slides_path, slides_path,so that the related files are derived from our own algorithm and include all slides from different courses. 3) documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. the following instructions have been tested with python2.7 on linux and macos 1. you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html 2. create the index in elasticsearch by running python create_es_index.py from educationalweb/ 3. download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static =========== newly added features ========= 4. run python scraper.py from courseproject/crawling/ to scrape lecture slides from the website 5. then run python parsepdf under educationalweb/pdf.js to normalize the slides name and save one pdf into a folder with single slides. 6. run python getrelatedfiles.py in educationalweb/pdf.js/static to get every single slide's related slides with ranking scores 7. from educationalweb/pdf.js/build/generic/web, run the following command: gulp server 8. in another terminal window, run python app.py from educationalweb/ 9. the site should be available at http://localhost:8096/ 4) brief description of contribution of each team member in case of a multi-person team. we reviewed the original code on the educationalweb, analyzed the structures and functions in their repository, then ran code based on the instructions together. then we had meetings discussing the structures and functions that we aim to implement. yusen is mainly responsible for implementing the crawling part, tianli normalizes the slides name and saves one pdf into a folder with single slides, yimeng takes charge of implementing the 'related slides' algorithm. after one finished his/her part, other team members did code review and added comments for improvements. we wrote documentations and recorded demo videos together. educationalweb video introduction https://youtu.be/rsyhiecatli how to run the following instructions have been tested with python2.7 on linux and macos you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html create the index in elasticsearch by running python create_es_index.py from educationalweb/ download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under educationalweb/pdf.js/static/slides/ run python scraper.py from courseproject/crawling/ to scrape lecture slides from the website then run python parsepdf under educationalweb/pdf.js/ to normalize the slides name and save one pdf into a folder with single slides. run python getrelatedfiles.py in educationalweb/pdf.js/static to get every single slide's related slides with ranking scores from educationalweb/pdf.js/build/generic/web , run the following command: gulp server in another terminal window, run python app.py from educationalweb/ the site should be available at http://localhost:8096/	['cs', 'progress', 'report', 'netids', 'td', 'tianli', 'ding', 'yimengh', 'yimeng', 'han', 'yusenw', 'yusen', 'wang', 'made', 'setting', 'environment', 'make', 'educationalweb', 'work', 'end', 'reading', 'source', 'code', 'project', 'structures', 'also', 'proposed', 'file', 'parse', 'whole', 'pdf', 'single', 'files', 'planning', 'write', 'scraping', 'script', 'automatically', 'download', 'slides', 'several', 'course', 'websites', 'auto', 'integrate', 'current', 'system', 'remaining', 'task', 'use', 'beautifulsoup', 'simple', 'url', 'requests', 'uiuc', 'courses', 'scale', 'challenges', 'faced', 'huge', 'lots', 'folders', 'therefore', 'still', 'need', 'time', 'understand', 'improvements', 'video', 'introduction', 'httpsyoutubersyhiecatli', 'overview', 'function', 'ie', 'used', 'first', 'implementation', 'general', 'crawler', 'scrape', 'lecture', 'different', 'platform', 'httpscoursesgraingerillinoisedu', 'links', 'filtering', 'finding', 'potential', 'could', 'lead', 'us', 'slide', 'split', 'crawled', 'page', 'pdfs', 'stored', 'corresponding', 'names', 'implement', 'jaccard', 'similarity', 'select', 'related', 'record', 'result', 'csv', 'based', 'relationships', 'render', 'final', 'website', 'documentation', 'software', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'future', 'extension', 'improvement', 'crawlingscraperpy', 'crawlingutilspy', 'choose', 'start', 'listed', 'prefix', 'urls', 'iterate', 'step', 'every', 'find', 'slidesnotes', 'located', 'using', 'keywordsslides', 'lecturelecturesnotenotesresourcesresource', 'tags', 'hreftrue', 'determine', 'whether', 'simply', 'checking', 'ends', 'pptx', 'since', 'already', 'filtered', 'keyword', 'constraint', 'likely', 'want', 'formal', 'format', 'folder', 'tasks', 'automated', 'expect', 'see', 'large', 'pdfjsstaticgetrelatedfilespy', 'extract', 'text', 'pages', 'tokenize', 'content', 'key', 'words', 'eliminating', 'punctuations', 'stopwords', 'compare', 'similarities', 'keywords', 'one', 'greater', 'mark', 'two', 'furthermore', 'limit', 'size', 'rendering', 'list', 'wont', 'long', 'rankingcsv', 'changing', 'according', 'original', 'slide_namestxt', 'pdfjsparsepdfpy', 'put', 'results', 'scraped', 'raw_slides', 'corrupted', 'slidesthen', 'followed', 'naming', 'convention', 'change', 'name', 'containing', 'modelpy', 'modified', 'rendered', 'webpage', 'moreover', 'changed', 'path', 'related_slides_path', 'slides_pathso', 'derived', 'algorithm', 'include', 'usage', 'including', 'either', 'usages', 'apis', 'detailed', 'instructions', 'install', 'run', 'whichever', 'applicable', 'following', 'tested', 'python', 'linux', 'macos', 'elasticsearch', 'installed', 'running', 'httpswwwelasticcoguideenelasticsearchreferencecurrenttargzhtml', 'create', 'index', 'create_es_indexpy', 'tfidf_outputszip', 'httpsdrivegooglecomfilediacqahnwkkxasbnfsclqrigdtfiwviewuspsharing', 'unzip', 'place', 'educationalwebstatic', 'newly', 'added', 'features', 'scraperpy', 'courseprojectcrawling', 'parsepdf', 'educationalwebpdfjs', 'normalize', 'save', 'getrelatedfilespy', 'educationalwebpdfjsstatic', 'get', 'ranking', 'scores', 'educationalwebpdfjsbuildgenericweb', 'command', 'gulp', 'server', 'another', 'terminal', 'window', 'apppy', 'site', 'available', 'httplocalhost', 'brief', 'description', 'contribution', 'team', 'member', 'case', 'multiperson', 'reviewed', 'analyzed', 'functions', 'repository', 'ran', 'together', 'meetings', 'discussing', 'aim', 'mainly', 'responsible', 'implementing', 'crawling', 'part', 'normalizes', 'saves', 'takes', 'charge', 'finished', 'hisher', 'members', 'review', 'comments', 'wrote', 'documentations', 'recorded', 'demo', 'videos', 'cszip', 'httpsdrivegooglecomfiledxiwosavooejsy_siiixpfaqsuyuuhviewuspsharing', 'educationalwebpdfjsstaticslides']
https://github.com/falobba2/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/garciadiazjaime/CourseProject	progress report cs-410 / fall 2020 which tasks have been completed? the following tasks marked with an x are in progress; they haven't been completed yet but a good progress has been made. [x] instagram crawler [x] food classifier which tasks are pending? the following task are pending, not much progress has been made here. [ ] food api [ ] web application (demo) [ ] documentation are you facing any challenges? instagram crawler it took some time to build the instagram crawler but a stable version is not in place. food classifier giving a supervised approached is been used, it has been time consuming traning the classifier, but good progress has been made so far. project proposal cs-410 / fall 2020 what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. jaimeg4 (individual) what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic (free): chicago food instagram crawler. description: provide an easy way to find up-to-date food options for the chicago area using instagram as the source. task: instagram has a public api that provides access to recent the posts, and with the help of the hashtags we can determine if it's a post related to food; if that's the case a crawler will extract the coordinates used for the location and a classifier will try to guess the food category, finally the information will be saved into a database and exposed throught a rest api. important: at the moment there are a couple of alternatives like ubereats or yelp, however sometimes their data is outdated or their pictures are of poor quality; so the importance of the project is to provide up-to-date information and quality pictures using the instagram community. approach & tools: to mention some of the components needed: a) instagram crawler (nodejs script). b) food classifier (tensorflow.js). c) food api (express nodejs). d) web application (svelte javascript framework). outcome: an interactive web application that will show chicago food options and a way to filter them by categories (classifiers). evaluation: the project will be evaluated by the progress of the web application, which will be a proof-of-concept. demo what to eat in chicago? courseproject chicago food instagram crawler. proposal progress report documentation presentation demo contact details twitter @jaumint	['progress', 'report', 'cs', 'fall', 'tasks', 'completed', 'following', 'marked', 'x', 'havent', 'yet', 'good', 'made', 'instagram', 'crawler', 'food', 'classifier', 'pending', 'task', 'much', 'api', 'web', 'application', 'demo', 'documentation', 'facing', 'challenges', 'took', 'time', 'build', 'stable', 'version', 'place', 'giving', 'supervised', 'approached', 'used', 'consuming', 'traning', 'far', 'project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'jaimeg', 'individual', 'free', 'topic', 'please', 'give', 'detailed', 'description', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'chicago', 'provide', 'easy', 'way', 'find', 'uptodate', 'options', 'area', 'using', 'source', 'public', 'provides', 'access', 'recent', 'posts', 'help', 'hashtags', 'determine', 'post', 'related', 'thats', 'case', 'extract', 'coordinates', 'location', 'try', 'guess', 'category', 'finally', 'information', 'saved', 'database', 'exposed', 'throught', 'rest', 'moment', 'couple', 'alternatives', 'like', 'ubereats', 'yelp', 'however', 'sometimes', 'data', 'outdated', 'pictures', 'poor', 'quality', 'importance', 'community', 'mention', 'components', 'needed', 'nodejs', 'script', 'b', 'tensorflowjs', 'c', 'express', 'svelte', 'javascript', 'framework', 'interactive', 'show', 'filter', 'categories', 'classifiers', 'evaluation', 'evaluated', 'proofofconcept', 'eat', 'courseproject', 'presentation', 'contact', 'details', 'twitter', 'jaumint']
https://github.com/gnsandeep/CourseProject	"courseproject cs410fall2020 course project : text classification team members: 1. sandeep nanjegowda ( sgn3@illinois.edu) 2. sunitha vijayanarayan 3. valentina mondal video presentation : https://web.microsoftstream.com/video/4436fc73-53d1-4dc4-a386-29e7c8e20eca leaderboard results : https://web.microsoftstream.com/video/7ae237ae-9c20-4a19-b4b7-b1b43508023f live lab data linked git hub account : gnsandeep public domain public domain cs-410 text information systems project documentation sandeep nanjegowda - sgn3 (captain) sunitha vijayanarayan - sunitha3 valentina mondal - vmondal2 index an overview of the function of the code ---------------------------------------------------------------------------3 implementation of models for tweet classification -------------------------------------------------------------4 2.1 bert ----------------------------------------------------------------------------------------------------------------------4 2.2 svm -----------------------------------------------------------------------------------------------------------------------5 2.3 cnn -----------------------------------------------------------------------------------------------------------------------6 2.4 lstm ----------------------------------------------------------------------------------------------------------------------8 2.5 gru -----------------------------------------------------------------------------------------------------------------------9 2.6 naive bayes and linear regression ------------------------------------------------------------------------------10 2.7 bi-directional models (gru & lstm) ----------------------------------------------------------------------------11 tweet classification model usage ------------------------------------------------------------------------------------13 3.1 bert ---------------------------------------------------------------------------------------------------------------------13 3.2 svm ---------------------------------------------------------------------------------------------------------------------14 3.3 cnn ----------------------------------------------------------------------------------------------------------------------15 3.4 lstm --------------------------------------------------------------------------------------------------------------------15 3.5 gru ----------------------------------------------------------------------------------------------------------------------16 3.6 naive bayes and linear regression ------------------------------------------------------------------------------17 3.7 bi-directional lstm and gru -------------------------------------------------------------------------------------18 results -----------------------------------------------------------------------------------------------------------------------19 collaboration ---------------------------------------------------------------------------------------------------------------20 presentation ----------------------------------------------------------------------------------------------------------------21 references ------------------------------------------------------------------------------------------------------------------21 overview our goal is to classify the given test set data of twitter responses as ""sarcasm"" or ""not sarcasm"" by using various classification methods. have classified the test data using linear regression, naive bayes, gru, cnn, lstm, svm, bidirectional and bert models. while predicting the label of the ""response"" based on the ""context"". context which is an ordered list of dialogue for which response is a reply to the last dialogue in the context. test data has unique ids along with tweet ""responses"" to be classified. we build, train several different models using given trained data and predict the test data using the trained model and generate an ""answer.txt"" file that has unique ids along with the predicted label. since there are 1800 ids in test dataset, our generated ""answer.txt"" file has exactly 1800 rows. at a high level, we perform the below steps: preprocess both the training and test data by removing the html tags, converting the tweets to lower case, removing punctuations and numbers, removing stop words, converting emojis and emoticons, removing single character and multiple spaces, removing left over special characters. split the test dataset into train and test data. create the embedding matrix using glove or word2vec embeddings. create the model using embedding layer, adding layers such as lstm, cnn etc. fit the model on train data predict the model on test data and generating predicted labels once the answer.txt file is generated and uploaded to git hub, predicted label values are compared with the actual result set to obtain the precision, recall and f-score value. precision indicates fraction of relevant instances among the retrieved instances. precision is the number of correctly identified positive results divided by the number of all positive results, including those not identified correctly. recall indicates fraction of the total amount of relevant instances that were retrieved. recall is the number of correctly identified positive results divided by the number of all samples that should have been identified as positive. f-score is the harmonic mean of the precision and recall. the highest possible value of an f-score is 1. our baseline to be achieved is 0.723 we were successfully able to beat the baseline using logistic regression and bert model. we will be walking through further in below points regarding implementation and usage for all the models we tried. the models that we tried can be used to classify any tweets that has response and context attributes. the models can be leveraged for other applications with appropriate changes such as classification of tags in news headline, sentiment analysis for movie reviews etc. implementation of models for tweet classification this section describes implementation of different tweet classification models 2.1 bert we have used bert (bidirectional encoder representations from transformers) model bertforsequenceclassification for tweet classification. model is built using jupyter notebook. jupyter notebook has following sections in same order. chris mccormick blogs and code about bert were very helpful for using bert for classification. we have used certain sections of this code from (mccormick) in our model. 2.1.1 preprocessing of data two data files were provided - train.jsonl and test.jsonl . training and test data are read into pandas data frame. python functions load_training_data_to_pandas and load_test_data_to_pandas load training and test data to panda's data frame. urls, @, non-ascii characters, extra space, &, <, > are removed, space is inserted between punctuation marks. all characters are converted to lower case for both training and test dataset. labels in training are converted to 1 and 0 (1 for sarcasm and 0 for not sarcasm). 2.1.2 model we have used transformers package from hugging face which will give us a pytorch interface for working with bert. we have installed transformers package. 2.1.3 tokenizing input and creating dataloaders to feed our text to bert, it must be split into tokens, we need to add special tokens to start and end, pad and truncate all sentences to a single constant length (we have used max length as 256), differentiate real tokens from padding tokens with attention mask. and then these tokens must be mapped to their index in the tokenizer vocabulary. the tokenization must be performed by the tokenizer included with bert. we have used ""uncased"" version - ""bert-base-uncased"". training dataset is split for training and validation. we will also create an iterator for our training, validation and test dataset using the torch dataloader class. this helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory. note: we have used sequentialsampler for validation and test datasets. 2.1.4 pre-trained bert model after this we have loaded pre-trained bert model - bertforsequenceclassification with a single linear classification layer on top. 2.1.5 model parameters and learning rate scheduler we have used adamw optimizer with learning rate of 2e-5 and eps of 1e-8 and get_linear_schedule_with_warmup is created out of the optimizer. 2.1.6 utility functions utility function format_time is created for formatting time and utility function flat_accuracy is created for calculating accuracy. 2.1.7 training loop each pass in our loop we have a training phase and a validation phase training: unpack our data inputs and labels load data onto the gpu for acceleration clear out the gradients calculated in the previous pass. in pytorch the gradients accumulate by default (useful for things like rnns) unless you explicitly clear them out. forward pass (feed input data through the network) backward pass (backpropagation) tell the network to update parameters with optimizer.step() track variables for monitoring progress evalution: unpack our data inputs and labels load data onto the gpu for acceleration forward pass (feed input data through the network) compute loss on our validation data and track variables for monitoring progress 2.1.8 evaluating test data prediction is done on test dataset. test dataset is read in batches and prediction is appended to list, which is then added to test panda's data frame and answer_bert.txt is created. 2.2 svm we have used support vector machines model for tweet classification. code is written in python language. we have used certain sections of code from (bronchal) in our model: 2.2.1 preprocessing of data two data files were provided - train.jsonl and test.jsonl . training and test data are read into pandas data frame. python functions load_training_data_to_pandas and load_test_data_to_pandas load training and test data to panda's data frame. html tags, punctuation, numbers, single character, multiple spaces, stop words, left over special characters are removed. all characters are converted to lower case for both training and test dataset. labels in training are converted to 1 and 0 (1 for sarcasm and 0 for not sarcasm). 2.2.2 tokenizing input twitter-aware tokenizer designed to be flexible and easy to adapt to new domains and tasks. tuple regex_strings define a list of regular expression strings. regex_strings strings are put, in order, into a compiled regular expression object called word_re. the tokenization is done by word_re.findall(s), where s is the user-supplied string, inside the tokenize() method of the class tokenizer. when instantiating tokenizer objects, there is a single option: preserve_case. by default, it is set to true. if it is set to false, then the tokenizer will downcase everything except for emoticons. 2.2.3 vectorize countvectorizer converts a collection of text documents to a matrix of token counts. this implementation produces a sparse representation of the counts using scipy.sparse.csr_matrix. the following parameters are used: analyzer: feature is made of word n-grams. tokenizer: override the string tokenization step while preserving the preprocessing and n-grams generation steps lowercase: convert all characters to lowercase before tokenizing. ngram_range: the lower and upper boundary of the range of n-values for different word n-grams to be extracted i.e. (1,1) stop_words: a built-in stop word list for english is used 2.2.4 cross validation and grid search we use cross validation and grid search to find good hyperparameters for our svm model. we build a pipeline to get features from the validation folds when building each training model. gridsearchcv implements a ""fit"" and ""predict"" method. snapshot of code below for reference. it exhaustively searches over specified parameter values for an estimator. param_grid enables searching over any sequence of parameter settings. cv determines the cross-validation splitting strategy. n_jobs as -1 means to use all processors in parallel. verbose controls the verbosity of messages. scoring is to evaluate the predictions on the test set. 2.2.5 evaluating test data model with the best hyperparameters works on test data and basis the prediction, labels generated with value greater than 0.5 as ""sarcasm"" else ""not_sarcasm"" is appended to test panda's data frame and answer_svm.txt is created. 2.3 cnn we have used convolutional neural network model for tweet classification. code is written in python language. we have used certain sections of this code from (celeni) in our model: 2.3.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for cnn model. 2.3.2 word embedding word embedding is vector representation of a particular word. weight matrix is created from word2vec gensim model. and then embedding vectors are obtained from word2vec and using it as weights of non-trainable keras embedding layer. corpus for twitter data for word2vec named as ""3000tweets_notbinary"" was referred from (celeni) we also build the embeddings using global vectors for word representation. glove is an unsupervised learning algorithm for obtaining vector representations for words. training is performed on aggregated global word-word co-occurrence statistics from a corpus, and the resulting representations showcase interesting linear substructures of the word vector space. corpus can be downloaded from the link (paletto) that we used as embedding file in our code to build the weight matrix. 2.3.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding non trainable embedding layer followed by the addition of cnn layer that creates a convolution kernel that is convoluted with the layer input over a single spatial dimension to produce a tensor of outputs. the action relu is applied to outputs as well. we set the number of filters to the dimensionality of the output space. kernel_size is to specify the length of the 1d convolution window. further we maxpool that summarize the most activated presence of a feature. pooling is required to down sample the detection of features in feature maps. we also use global pooling that that down sample the entire feature map to a single value. this is same as setting the pool_size to the size of the input feature map. we then use regularization method ""dropout"" that approximates training many neural networks with different architectures in parallel. during training, some number of layer outputs are randomly ignored or ""dropped out."" this has the effect of making the layer look-like and be treated-like a layer with a different number of nodes and connectivity to the prior layer. also, we then add dense layer to perform a linear operation on the layer's input vector. code snippet below: 2.3.4 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.3.5 evaluating test data once the model is created, model.predict() is run to predict for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_cnn.txt is created. 2.4 lstm we have used long short-term memory network model for tweet classification. code is written in python language. we have used certain sections of this code in our model from (nana). 2.4.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for lstm model. 2.4.2 word embedding same functional code as discussed in section 2.3.2 is used for lstm model. 2.4.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding non trainable embedding layer followed by the addition of lstm layers with units specifying the dimensionality of the output space. we use regularization method ""dropout"" that approximates training many neural networks with different architectures in parallel. during training, some number of layer outputs are randomly ignored or ""dropped out."" this has the effect of making the layer look-like and be treated-like a layer with a different number of nodes and connectivity to the prior layer. also, we then add dense layer to perform a linear operation on the layer's input vector. we compile the model using the binary cross-entropy loss function since it predicts a binary value and opt optimizer. the hyperparameters were tuned experimentally over several runs. code snippet below: 2.4.4 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.4.5 evaluating test data once the model is created, model.predict() is done to do the prediction for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_lstm.txt is created. 2.5 gru we have tried gru (gated recurrent unit) model for tweet classification. code is written in python language. gru is a special type of recurrent neural network. this type of sequence model can retain information from long ago, without washing it through time or remove information which is irrelevant to the prediction. some of the code & hyper-parameter values specifically those related to reducelronplateau were decided based on the blog by (kohli) 2.5.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for gru model. 2.5.2 word embedding same functional code as discussed in section 2.3.2 is used for gru model. 2.5.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding a trainable embedding layer followed by the addition of gru layers with units specifying the dimensionality of the output space. we use regularization method ""dropout"" that approximates training many neural networks with different architectures in parallel. during training, some number of layer outputs are randomly ignored or ""dropped out."" this has the effect of making the layer look-like and be treated-like a layer with a different number of nodes and connectivity to the prior layer. also, we then add dense layer to perform a linear operation on the layer's input vector. we compile the model using the binary cross-entropy loss function since it predicts a binary value and opt optimizer. the hyperparameters were tuned experimentally over several runs. code snippet below: 2.5.4 reducelronplateau this option was used so that the learning rate to be reduced when training is not progressing. 2.5.5 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.5.5 model checkpointing model checkpointing was used so that the best training model based on hold-out set validation would be saved and the saved model used to evaluate test data. 2.5.6 evaluating test data once the model is created, model.predict() is done to do the prediction for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_gru.txt is created. 2.6 naive bayes and linear regression naive bayes and logistic regression models are built using jupyter notebook for tweet classification. jupyter notebook has following sections in same order. bert carremans blog and code about naive bayes and linear regression were very helpful. we have used certain sections of code in our model from the reference (carremans) 2.6.1 preprocessing of data two data files were provided - train.jsonl and test.jsonl . training and test data are read into pandas data frame. python functions load_training_data_to_pandas and load_test_data_to_pandas load training and test data to panda's data frame. we have python class textcounts , it extends sklearn.base.baseestimator and sklearn.base.transformermixin , this class extracts additional features like word counts, hash tags, mentions, capital words, question marks, urls and emojis. we have python class cleantext it extends sklearn.base.baseestimator and sklearn.base.transformermixin , this class removes mentions, urls, oneword, punctuations, digits, stopwords , performs stemming and converts to lower case. test and training data is passed through this classes fit methods. extra features extracted for training data is combined with cleaned data for both training and test data. steps for test data is done after training. we have python class columnextractor it extends sklearn.base.baseestimator and sklearn.base.transformermixin , this class is used for selecting columns in test and training dataset. 2.6.2 hyperparameter tuning and cross-validation we first declare parameters for grid search. we have set parameters_vect , parameters_mnb and parameters_logreg parameters. we have parameters for tf-idf like max_df , min_df , ngram_range , parameters for linear regression like clf_c and clf_penality , parameters for naiive bayes like alpha. we have function grid_vect1 which does grid search. this function uses skilearn pipeline and it is based on below code from the reference (scikit learn) . 2.6.3 model training and prediction naiive bayes and logistic regression models are created and passed to grid_vect1 which vectorizes the data using tf-idf in ski learn pipeline and does grid search for best hyper parameters. once we find the best hyperparameters, we fit both naive bayes and logistic regression models with best parameters and perform prediction on test data. predicted data is added to pandas data frame as new column and answer.txt is created for both models. 2.7 bi-directional models (gru & lstm) we have tried bi-directional versions of both gru (gated recurrent unit) model & lstm model for tweet classification. code is written in python language. bidirectional models are an extension of traditional lstm & gru models that can improve model performance on sequence classification problems. in problems where all timesteps of the input sequence are available, bidirectional models train two instead of one lstms on the input sequence. some of the code was referenced from (lillysimeonova) 2.7.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for these models as well. in addition, we also combined the additional text counts features calculated in the logisticregression model and combined them with the text features in a bid to improve model performance on the test set. 2.7.2 word embedding same functional code as discussed in section 2.3.2 is used for bidirectional lstm model & bidirectional gru. 2.7.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding a trainable embedding layer followed by the addition of gru/lstm layers with units specifying the dimensionality of the output space. we are then combining text features with count features using multiple input models. all the other layers are added exactly like gru/lstm models already discussed in section 2.5 & 2.4. combining of text features with non-text was coded by referring (freischlag) we compile the model using the binary cross-entropy loss function since it predicts a binary value and adam optimizer. the hyperparameters were tuned experimentally over several runs. code snippet below: 2.7.4 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.7.5 model checkpointing model checkpointing was used so that the best training model based on hold-out set validation would be saved and the saved model used to evaluate test data. 2.7.6 evaluating test data once the model is created, model.predict() is done to do the prediction for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_bidirectional.txt is created. tweet classification models usage this section describes steps for running different tweet classification models which are described in section 2. 3.1 bert google colab is preferred for running bert model. we have used colab for training and evaluating test dataset. 3.1.1 google colab open colab in browser (mozilla, chrome) https://colab.research.google.com , choose github and use our project github url and chose bertseq.ipynb 3.1.2 load training and test data to google colab click on files and click on upload button and upload both test and train jsonl files. 3.1.3 run click on runtime and click on run all to run all the cells. 3.1.4 result predicted values are stored in answer_bertseq.txt, we can see the file in files section colab. 3.2 svm svm model can be run locally. we have used python language. 3.2.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/cs410fall2020/classificationcompetition/tree/main/data to your local path under data folder. 3.2.2 svm code load the svm.py code in your local path 3.2.3 prerequisites ensure to download and install the below libraries and modules to run the code to not throw any errors 3.2.4 run run svm.py code in your local. 3.2.5 result predicted values are stored in your local path as 'answer_svm.txt' 3.3 cnn cnn model can be run locally. we have python language. 3.3.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.3.2 cnn code load the cnn.py code in your local path 3.3.3 prerequisites ensure to download and install the below libraries and modules to run the code without throwing any errors 3.3.4 run run cnn.py code in your local. 3.3.5 result predicted values are stored in your local path as 'answer_cnn.txt' 3.4 lstm lstm model can be run locally. we have used python language. 3.4.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.4.2 lstm code jupyter notebook lstm.ipynb . 3.4.3 prerequisites please download glove embedding file glove.6b.100d.txt ( it is available under glove.6b.zip) and place it in data folder. we can download glove embedding file from https://nlp.stanford.edu/projects/glove/ wikipedia 2014 + gigaword 5 (6b tokens, 400k vocab, uncased, 50d, 100d, 200d, & 300d vectors, 822 mb download): glove.6b.zip 3.4.4 run open the jupyter notebook lstm.ipynb and click kernel restart and run all. 3.4.5 result predicted values are stored in your local path as 'answer_lstm.txt' 3.5 gru gru model can be run locally. we have used python language. 3.5.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.5.2 gru code load the gru.py code in your local path 3.5.3 prerequisites ensure to download and install the below libraries and modules to run the code without throwing any errors 3.5.4 run run gru.py code in your local. 3.5.5 result predicted values are stored in your local path as 'answer_gru.txt' 3.6 naive bayes and logistic regression google colab is preferred for running naive bayes and logistic regression model. we have used colab for training and evaluating test dataset. 3.6.1 google colab open colab in browser (mozilla, chrome) https://colab.research.google.com , choose github and use our project github url and chose lgnb_cv.ipynb 3.6.2 load training and test data to google colab click on files and click on upload button and upload both test and train jsonl files from https://github.com/gnsandeep/courseproject/tree/main/data. 3.6.3 run click on runtime and click on run all to run all the cells. 3.6.4 result predicted values are stored in answernb.txt and answercvlg.txt, we can see the file in files section colab. 3.7 bi-directional models (gru & lstm) bi-directional models can be run locally. we have used python language. 3.7.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.7.2 bi-directional model code load the bidirectionalmodels.py code in your local path 3.7.3 prerequisites ensure to download and install the below libraries and modules to run the code without throwing any errors 3.7.4 run run bidirectionalmodels.py code in your local. 3.7.5 result predicted values are stored in your local path as 'answer_blstm.txt' & answer_bgru.txt results below are some of the results that were captured in leaderboard live data lab for individual model: model precision recall f1 base line 0.723 0.723 0.723 bert 0.7181913774973712 0.7588888888888888 0.7379794705564559 logistic regression 0.6593406593406593 0.8 0.7228915662650602 naive bayes 0.6177215189873417 0.8133333333333334 0.702158273381295 svm 0.6225716928769658 0.7477777777777778 0.6794548207975769 cnn 0.6376811594202898 0.6844444444444444 0.660235798499464 lstm 0.620242214532872 0.7966666666666666 0.6974708171206226 gru 0.5968109339407744 0.8733333333333333 0.7090663058186738 bidirectional- gru 0.6535819430814525 0.74 0.69411151641479 bidirectional -lstm 0.639927073837739 0.78 0.703054581872809 screen shot for bert collaboration brief description of contribution of each team member in case of a multi-person team. we had frequent meetings, we discussed about the models we had learnt, built, tested and results. we also did code reviews, incorporated suggestions. sandeep: build and test of lstm on word embeddings using glove. build and test of naive bayes and logistic regression. build and test of bert. documentation for bert, naive bayes and logistic regression models. bidirectional lstm along with combining text & non-text features. voice over project presentation and demo. investigation & test of bi-directional lstm model with multiple input features. sunitha: build and test of gru on word embeddings using word2vec and glove. investigation & test of bi-directional gru model with multiple input features. implementation for additional preprocessing steps to convert emojis and emoticons to text. implementation of modelcheckpoint ,reducelronplateau. test effects of additional emoji pre-processing, earlystopping, modelcheckpointing & reducelronplateau on gru, lstm & cnn models. documentation for gru & bi-directional models. valentina: creating word vectors by word2vec method, create weight matrix from word2vec gensim model, getting embedding vectors from word2vec and using it as weights of non-trainable keras embedding layer. build and test of svm model using cross validation and grid search to find good hyperparameters by building a pipeline. implementation of early stopping - build network and train it until validation loss reduces. build and test of cnn on word embeddings using word2vec and glove. convert test and train features to inputfeatures that bert understands, create model using pooled output, layer for tuning, dropout, labels conversion to one hot encoding; and get predictions. investigation & test of lstm model with word2vec, glove and different parameters. documentation for project report, documentation overview, svm, cnn and lstm models. presentation video presentation : https://web.microsoftstream.com/video/4436fc73-53d1-4dc4-a386-29e7c8e20eca leaderboard results : https://web.microsoftstream.com/video/7ae237ae-9c20-4a19-b4b7-b1b43508023f references [online] / auth. scikit learn. - http://scikit-learn.org/stable/auto_examples/model_selection/grid_search_text_feature_extraction.html. https://mccormickml.com/2019/07/22/bert-fine-tuning/ [online] / auth. mccormick. combining numerical and text features in deep neural networks [online] / auth. freischlag christian. - https://towardsdatascience.com/combining-numerical-and-text-features-in-deep-neural-networks-e91f0237eea4. https://github.com/ibrahimcelenli/cnn-word2vec-tweets-classification / auth. celeni ibrahim. https://www.kaggle.com/jdpaletto/glove-global-vectors-for-word-representation [online] / auth. paletto j.d.. https://www.kaggle.com/lbronchal/sentiment-analysis-with-svm [online] / auth. bronchal luis. sarcasm detection using lstm, gru, (85% accuracy) [online] / auth. kohli nikhil. - https://www.kaggle.com/nikhilkohli/sarcasm-detection-using-lstm-gru-85-accuracy. sentiment analysis in python with keras and lstm [online] / auth. nana roblex. - https://www.kaggle.com/roblexnana/sentiment-analysis-with-keras-and-lstm. sentiment analysis with bidirectional lstm [online] / auth. lillysimeonova. - https://www.kaggle.com/liliasimeonova/sentiment-analysis-with-bidirectional-lstm. sentiment analysis with text mining [online] / auth. carremans bert. - https://towardsdatascience.com/sentiment-analysis-with-text-mining-13dd2b33de27. public domain cs-410 text information systems project documentation sandeep nanjegowda - sgn3 (captain) sunitha vijayanarayan - sunitha3 valentina mondal - vmondal2 public domain index 1. an overview of the function of the code ---------------------------------------------------------------------------3 2. implementation of models for tweet classification -------------------------------------------------------------4 2.1 bert ----------------------------------------------------------------------------------------------------------------------4 2.2 svm -----------------------------------------------------------------------------------------------------------------------5 2.3 cnn -----------------------------------------------------------------------------------------------------------------------6 2.4 lstm ----------------------------------------------------------------------------------------------------------------------8 2.5 gru -----------------------------------------------------------------------------------------------------------------------9 2.6 naive bayes and linear regression ------------------------------------------------------------------------------10 2.7 bi-directional models (gru & lstm) ----------------------------------------------------------------------------11 3. tweet classification model usage ------------------------------------------------------------------------------------13 3.1 bert ---------------------------------------------------------------------------------------------------------------------13 3.2 svm ---------------------------------------------------------------------------------------------------------------------14 3.3 cnn ----------------------------------------------------------------------------------------------------------------------15 3.4 lstm --------------------------------------------------------------------------------------------------------------------15 3.5 gru ----------------------------------------------------------------------------------------------------------------------16 3.6 naive bayes and linear regression ------------------------------------------------------------------------------17 3.7 bi-directional lstm and gru -------------------------------------------------------------------------------------18 4. results -----------------------------------------------------------------------------------------------------------------------19 5. collaboration ---------------------------------------------------------------------------------------------------------------20 6. presentation ----------------------------------------------------------------------------------------------------------------21 references ------------------------------------------------------------------------------------------------------------------21 public domain 1. overview our goal is to classify the given test set data of twitter responses as ""sarcasm"" or ""not sarcasm"" by using various classification methods. have classified the test data using linear regression, naive bayes, gru, cnn, lstm, svm, bidirectional and bert models. while predicting the label of the ""response"" based on the ""context"". context which is an ordered list of dialogue for which response is a reply to the last dialogue in the context. test data has unique ids along with tweet ""responses"" to be classified. we build, train several different models using given trained data and predict the test data using the trained model and generate an ""answer.txt"" file that has unique ids along with the predicted label. since there are 1800 ids in test dataset, our generated ""answer.txt"" file has exactly 1800 rows. at a high level, we perform the below steps: * preprocess both the training and test data by removing the html tags, converting the tweets to lower case, removing punctuations and numbers, removing stop words, converting emojis and emoticons, removing single character and multiple spaces, removing left over special characters. * split the test dataset into train and test data. * create the embedding matrix using glove or word2vec embeddings. * create the model using embedding layer, adding layers such as lstm, cnn etc. * fit the model on train data * predict the model on test data and generating predicted labels once the answer.txt file is generated and uploaded to git hub, predicted label values are compared with the actual result set to obtain the precision, recall and f-score value. precision indicates fraction of relevant instances among the retrieved instances. precision is the number of correctly identified positive results divided by the number of all positive results, including those not identified correctly. recall indicates fraction of the total amount of relevant instances that were retrieved. recall is the number of correctly identified positive results divided by the number of all samples that should have been identified as positive. f-score is the harmonic mean of the precision and recall. the highest possible value of an f-score is 1. our baseline to be achieved is 0.723 we were successfully able to beat the baseline using logistic regression and bert model. we will be walking through further in below points regarding implementation and usage for all the models we tried. the models that we tried can be used to classify any tweets that has response and context attributes. the models can be leveraged for other applications with appropriate changes such as classification of tags in news headline, sentiment analysis for movie reviews etc. public domain 2. implementation of models for tweet classification this section describes implementation of different tweet classification models 2.1 bert we have used bert (bidirectional encoder representations from transformers) model bertforsequenceclassification for tweet classification. model is built using jupyter notebook. jupyter notebook has following sections in same order. chris mccormick blogs and code about bert were very helpful for using bert for classification. we have used certain sections of this code from (mccormick) in our model. 2.1.1 preprocessing of data two data files were provided - train.jsonl and test.jsonl . training and test data are read into pandas data frame. python functions load_training_data_to_pandas and load_test_data_to_pandas load training and test data to panda's data frame. urls, @, non-ascii characters, extra space, &, <, > are removed, space is inserted between punctuation marks. all characters are converted to lower case for both training and test dataset. labels in training are converted to 1 and 0 (1 for sarcasm and 0 for not sarcasm). 2.1.2 model we have used transformers package from hugging face which will give us a pytorch interface for working with bert. we have installed transformers package. 2.1.3 tokenizing input and creating dataloaders to feed our text to bert, it must be split into tokens, we need to add special tokens to start and end, pad and truncate all sentences to a single constant length (we have used max length as 256), differentiate real tokens from padding tokens with attention mask. and then these tokens must be mapped to their index in the tokenizer vocabulary. the tokenization must be performed by the tokenizer included with bert. we have used ""uncased"" version - ""bert-base-uncased"". training dataset is split for training and validation. we will also create an iterator for our training, validation and test dataset using the torch dataloader class. this helps save on memory during training because, unlike a for loop, with an iterator the entire dataset does not need to be loaded into memory. note: we have used sequentialsampler for validation and test datasets. 2.1.4 pre-trained bert model after this we have loaded pre-trained bert model - bertforsequenceclassification with a single linear classification layer on top. 2.1.5 model parameters and learning rate scheduler public domain we have used adamw optimizer with learning rate of 2e-5 and eps of 1e-8 and get_linear_schedule_with_warmup is created out of the optimizer. 2.1.6 utility functions utility function format_time is created for formatting time and utility function flat_accuracy is created for calculating accuracy. 2.1.7 training loop each pass in our loop we have a training phase and a validation phase training: * unpack our data inputs and labels * load data onto the gpu for acceleration * clear out the gradients calculated in the previous pass. o in pytorch the gradients accumulate by default (useful for things like rnns) unless you explicitly clear them out. * forward pass (feed input data through the network) * backward pass (backpropagation) * tell the network to update parameters with optimizer.step() * track variables for monitoring progress evalution: * unpack our data inputs and labels * load data onto the gpu for acceleration * forward pass (feed input data through the network) * compute loss on our validation data and track variables for monitoring progress 2.1.8 evaluating test data prediction is done on test dataset. test dataset is read in batches and prediction is appended to list, which is then added to test panda's data frame and answer_bert.txt is created. 2.2 svm we have used support vector machines model for tweet classification. code is written in python language. we have used certain sections of code from (bronchal) in our model: 2.2.1 preprocessing of data public domain two data files were provided - train.jsonl and test.jsonl . training and test data are read into pandas data frame. python functions load_training_data_to_pandas and load_test_data_to_pandas load training and test data to panda's data frame. html tags, punctuation, numbers, single character, multiple spaces, stop words, left over special characters are removed. all characters are converted to lower case for both training and test dataset. labels in training are converted to 1 and 0 (1 for sarcasm and 0 for not sarcasm). 2.2.2 tokenizing input twitter-aware tokenizer designed to be flexible and easy to adapt to new domains and tasks. tuple regex_strings define a list of regular expression strings. regex_strings strings are put, in order, into a compiled regular expression object called word_re. the tokenization is done by word_re.findall(s), where s is the user-supplied string, inside the tokenize() method of the class tokenizer. when instantiating tokenizer objects, there is a single option: preserve_case. by default, it is set to true. if it is set to false, then the tokenizer will downcase everything except for emoticons. 2.2.3 vectorize countvectorizer converts a collection of text documents to a matrix of token counts. this implementation produces a sparse representation of the counts using scipy.sparse.csr_matrix. the following parameters are used: analyzer: feature is made of word n-grams. tokenizer: override the string tokenization step while preserving the preprocessing and n-grams generation steps lowercase: convert all characters to lowercase before tokenizing. ngram_range: the lower and upper boundary of the range of n-values for different word n-grams to be extracted i.e. (1,1) stop_words: a built-in stop word list for english is used 2.2.4 cross validation and grid search we use cross validation and grid search to find good hyperparameters for our svm model. we build a pipeline to get features from the validation folds when building each training model. gridsearchcv implements a ""fit"" and ""predict"" method. snapshot of code below for reference. it exhaustively searches over specified parameter values for an estimator. param_grid enables searching over any sequence of parameter settings. cv determines the cross-validation splitting strategy. n_jobs as -1 means to use all processors in parallel. verbose controls the verbosity of messages. scoring is to evaluate the predictions on the test set. public domain 2.2.5 evaluating test data model with the best hyperparameters works on test data and basis the prediction, labels generated with value greater than 0.5 as ""sarcasm"" else ""not_sarcasm"" is appended to test panda's data frame and answer_svm.txt is created. 2.3 cnn we have used convolutional neural network model for tweet classification. code is written in python language. we have used certain sections of this code from (celeni) in our model: 2.3.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for cnn model. 2.3.2 word embedding word embedding is vector representation of a particular word. weight matrix is created from word2vec gensim model. and then embedding vectors are obtained from word2vec and using it as weights of non- trainable keras embedding layer. corpus for twitter data for word2vec named as ""3000tweets_notbinary"" was referred from (celeni) we also build the embeddings using global vectors for word representation. glove is an unsupervised learning algorithm for obtaining vector representations for words. training is performed on aggregated global word-word co-occurrence statistics from a corpus, and the resulting representations showcase interesting linear substructures of the word vector space. corpus can be downloaded from the link (paletto) that we used as embedding file in our code to build the weight matrix. 2.3.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding non trainable embedding layer followed by the addition of cnn layer that creates a convolution kernel that is convoluted with the layer input over a single spatial dimension to produce a tensor of outputs. the action relu is applied to outputs as well. we set the number of filters to the dimensionality of the output space. kernel_size is to specify the length of the 1d convolution window. further we maxpool that summarize the most activated presence of a feature. pooling is required to down sample the detection of features in feature maps. we also use global pooling that that down sample the entire feature map to a single value. this is same as setting the pool_size to the size of the input feature map. we then use regularization method ""dropout"" that approximates training many neural networks with different architectures in parallel. during training, some number of layer outputs are randomly ignored or ""dropped out."" this has the effect of making the layer look-like and be treated-like a layer with a different number of nodes and connectivity to the prior layer. also, we then add dense layer to perform a linear operation on the layer's input vector. public domain code snippet below: 2.3.4 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.3.5 evaluating test data once the model is created, model.predict() is run to predict for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_cnn.txt is created. 2.4 lstm we have used long short-term memory network model for tweet classification. code is written in python language. we have used certain sections of this code in our model from (nana). 2.4.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for lstm model. 2.4.2 word embedding same functional code as discussed in section 2.3.2 is used for lstm model. 2.4.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding non trainable embedding layer followed by the addition of lstm layers with units specifying the dimensionality of the output space. we use regularization method ""dropout"" that approximates training many neural networks with different architectures in parallel. during training, some number of layer outputs are randomly ignored or ""dropped out."" this has the effect of making the layer look-like and be treated-like a layer with a different number of nodes and connectivity to the prior layer. also, we then add dense layer to perform a linear operation on the layer's input vector. we compile the model using the binary cross-entropy loss function since it predicts a binary value and opt optimizer. the hyperparameters were tuned experimentally over several runs. public domain code snippet below: 2.4.4 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.4.5 evaluating test data once the model is created, model.predict() is done to do the prediction for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_lstm.txt is created. 2.5 gru we have tried gru (gated recurrent unit) model for tweet classification. code is written in python language. gru is a special type of recurrent neural network. this type of sequence model can retain information from long ago, without washing it through time or remove information which is irrelevant to the prediction. some of the code & hyper-parameter values specifically those related to reducelronplateau were decided based on the blog by (kohli) 2.5.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for gru model. 2.5.2 word embedding same functional code as discussed in section 2.3.2 is used for gru model. 2.5.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding a trainable embedding layer followed by the addition of gru layers with units specifying the dimensionality of the output space. we use regularization method ""dropout"" that approximates training many neural networks with different architectures in parallel. during training, some number of layer outputs are randomly ignored or ""dropped out."" this has the effect of making the layer look-like and be treated-like a layer with a different number of nodes and connectivity to the prior layer. also, we then add dense layer to perform public domain a linear operation on the layer's input vector. we compile the model using the binary cross-entropy loss function since it predicts a binary value and opt optimizer. the hyperparameters were tuned experimentally over several runs. code snippet below: 2.5.4 reducelronplateau this option was used so that the learning rate to be reduced when training is not progressing. 2.5.5 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.5.5 model checkpointing model checkpointing was used so that the best training model based on hold-out set validation would be saved and the saved model used to evaluate test data. 2.5.6 evaluating test data once the model is created, model.predict() is done to do the prediction for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_gru.txt is created. 2.6 naive bayes and linear regression naive bayes and logistic regression models are built using jupyter notebook for tweet classification. jupyter notebook has following sections in same order. bert carremans blog and code about naive bayes and linear regression were very helpful. we have used certain sections of code in our model from the reference (carremans) 2.6.1 preprocessing of data public domain two data files were provided - train.jsonl and test.jsonl . training and test data are read into pandas data frame. python functions load_training_data_to_pandas and load_test_data_to_pandas load training and test data to panda's data frame. we have python class textcounts , it extends sklearn.base.baseestimator and sklearn.base.transformermixin , this class extracts additional features like word counts, hash tags, mentions, capital words, question marks, urls and emojis. we have python class cleantext it extends sklearn.base.baseestimator and sklearn.base.transformermixin , this class removes mentions, urls, oneword, punctuations, digits, stopwords , performs stemming and converts to lower case. test and training data is passed through this classes fit methods. extra features extracted for training data is combined with cleaned data for both training and test data. steps for test data is done after training. we have python class columnextractor it extends sklearn.base.baseestimator and sklearn.base.transformermixin , this class is used for selecting columns in test and training dataset. 2.6.2 hyperparameter tuning and cross-validation we first declare parameters for grid search. we have set parameters_vect , parameters_mnb and parameters_logreg parameters. we have parameters for tf-idf like max_df , min_df , ngram_range , parameters for linear regression like clf_c and clf_penality , parameters for naiive bayes like alpha. we have function grid_vect1 which does grid search. this function uses skilearn pipeline and it is based on below code from the reference (scikit learn) . 2.6.3 model training and prediction naiive bayes and logistic regression models are created and passed to grid_vect1 which vectorizes the data using tf-idf in ski learn pipeline and does grid search for best hyper parameters. once we find the best hyperparameters, we fit both naive bayes and logistic regression models with best parameters and perform prediction on test data. predicted data is added to pandas data frame as new column and answer.txt is created for both models. 2.7 bi-directional models (gru & lstm) we have tried bi-directional versions of both gru (gated recurrent unit) model & lstm model for tweet classification. code is written in python language. bidirectional models are an extension of traditional lstm & gru models that can improve model performance on sequence classification problems. in problems where all timesteps of the input sequence are available, bidirectional models train two instead of one lstms on the input sequence. some of the code was referenced from (lillysimeonova) public domain 2.7.1 preprocessing of data for preprocessing of twitter test and train data, same function that was used in bert model as described in section 2.2.1 has been also used for these models as well. in addition, we also combined the additional text counts features calculated in the logisticregression model and combined them with the text features in a bid to improve model performance on the test set. 2.7.2 word embedding same functional code as discussed in section 2.3.2 is used for bidirectional lstm model & bidirectional gru. 2.7.3 train embedding model depending upon whichever embedding - word2vec or glove, we are using we train the model by adding a trainable embedding layer followed by the addition of gru/lstm layers with units specifying the dimensionality of the output space. we are then combining text features with count features using multiple input models. all the other layers are added exactly like gru/lstm models already discussed in section 2.5 & 2.4. combining of text features with non-text was coded by referring (freischlag) we compile the model using the binary cross-entropy loss function since it predicts a binary value and adam optimizer. the hyperparameters were tuned experimentally over several runs. code snippet below: 2.7.4 early stopping too many epochs can lead to overfitting of the training dataset, whereas too few may result in an underfit model. early stopping is a method that allows you to specify an arbitrary large number of training epochs and stop training once the model performance stops improving on a hold-out validation dataset. 2.7.5 model checkpointing public domain model checkpointing was used so that the best training model based on hold-out set validation would be saved and the saved model used to evaluate test data. 2.7.6 evaluating test data once the model is created, model.predict() is done to do the prediction for test data where prediction with value greater than 0.5 is labelled as ""sarcasm"" else ""not_sarcasm"". label is appended to the test panda's data frame and answer_bidirectional.txt is created. 3. tweet classification models usage this section describes steps for running different tweet classification models which are described in section 2. 3.1 bert google colab is preferred for running bert model. we have used colab for training and evaluating test dataset. 3.1.1 google colab open colab in browser (mozilla, chrome) https://colab.research.google.com , choose github and use our project github url and chose bertseq.ipynb 3.1.2 load training and test data to google colab click on files and click on upload button and upload both test and train jsonl files. 3.1.3 run click on runtime and click on run all to run all the cells. 3.1.4 result predicted values are stored in answer_bertseq.txt, we can see the file in files section colab. public domain 3.2 svm svm model can be run locally. we have used python language. 3.2.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/cs410fall2020/classificationcompetition/tree/main/data to your local path under data folder. 3.2.2 svm code load the svm.py code in your local path 3.2.3 prerequisites ensure to download and install the below libraries and modules to run the code to not throw any errors 3.2.4 run run svm.py code in your local. 3.2.5 result predicted values are stored in your local path as 'answer_svm.txt' 3.3 cnn cnn model can be run locally. we have python language. 3.3.1 load training and test data public domain first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.3.2 cnn code load the cnn.py code in your local path 3.3.3 prerequisites ensure to download and install the below libraries and modules to run the code without throwing any errors 3.3.4 run run cnn.py code in your local. 3.3.5 result predicted values are stored in your local path as 'answer_cnn.txt' 3.4 lstm lstm model can be run locally. we have used python language. 3.4.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.4.2 lstm code jupyter notebook lstm.ipynb . 3.4.3 prerequisites public domain please download glove embedding file glove.6b.100d.txt ( it is available under glove.6b.zip) and place it in data folder. we can download glove embedding file from https://nlp.stanford.edu/projects/glove/ wikipedia 2014 + gigaword 5 (6b tokens, 400k vocab, uncased, 50d, 100d, 200d, & 300d vectors, 822 mb download): glove.6b.zip 3.4.4 run open the jupyter notebook lstm.ipynb and click kernel restart and run all. 3.4.5 result predicted values are stored in your local path as 'answer_lstm.txt' 3.5 gru gru model can be run locally. we have used python language. 3.5.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.5.2 gru code load the gru.py code in your local path 3.5.3 prerequisites ensure to download and install the below libraries and modules to run the code without throwing any errors public domain 3.5.4 run run gru.py code in your local. 3.5.5 result predicted values are stored in your local path as 'answer_gru.txt' 3.6 naive bayes and logistic regression google colab is preferred for running naive bayes and logistic regression model. we have used colab for training and evaluating test dataset. 3.6.1 google colab open colab in browser (mozilla, chrome) https://colab.research.google.com , choose github and use our project github url and chose lgnb_cv.ipynb 3.6.2 load training and test data to google colab click on files and click on upload button and upload both test and train jsonl files from https://github.com/gnsandeep/courseproject/tree/main/data. public domain 3.6.3 run click on runtime and click on run all to run all the cells. 3.6.4 result predicted values are stored in answernb.txt and answercvlg.txt, we can see the file in files section colab. 3.7 bi-directional models (gru & lstm) bi-directional models can be run locally. we have used python language. 3.7.1 load training and test data first place the test.json and train.json data files as provided in github link https://github.com/gnsandeep/courseproject/tree/main/data to your local path under data folder. 3.7.2 bi-directional model code load the bidirectionalmodels.py code in your local path 3.7.3 prerequisites ensure to download and install the below libraries and modules to run the code without throwing any errors public domain 3.7.4 run run bidirectionalmodels.py code in your local. 3.7.5 result predicted values are stored in your local path as 'answer_blstm.txt' & answer_bgru.txt 4. results below are some of the results that were captured in leaderboard live data lab for individual model: public domain model precision recall f1 base line 0.723 0.723 0.723 bert 0.7181913774973712 0.7588888888888888 0.7379794705564559 logistic regression 0.6593406593406593 0.8 0.7228915662650602 naive bayes 0.6177215189873417 0.8133333333333334 0.702158273381295 svm 0.6225716928769658 0.7477777777777778 0.6794548207975769 cnn 0.6376811594202898 0.6844444444444444 0.660235798499464 lstm 0.620242214532872 0.7966666666666666 0.6974708171206226 gru 0.5968109339407744 0.8733333333333333 0.7090663058186738 bidirectional- gru 0.6535819430814525 0.74 0.69411151641479 bidirectional -lstm 0.639927073837739 0.78 0.703054581872809 screen shot for bert 5. collaboration brief description of contribution of each team member in case of a multi-person team. we had frequent meetings, we discussed about the models we had learnt, built, tested and results. we also did code reviews, incorporated suggestions. sandeep: 1. build and test of lstm on word embeddings using glove. 2. build and test of naive bayes and logistic regression. 3. build and test of bert. 4. documentation for bert, naive bayes and logistic regression models. 5. bidirectional lstm along with combining text & non-text features. 6. voice over project presentation and demo. 7. investigation & test of bi-directional lstm model with multiple input features. sunitha: 1. build and test of gru on word embeddings using word2vec and glove. 2. investigation & test of bi-directional gru model with multiple input features. 3. implementation for additional preprocessing steps to convert emojis and emoticons to text. 4. implementation of modelcheckpoint ,reducelronplateau. public domain 5. test effects of additional emoji pre-processing, earlystopping, modelcheckpointing & reducelronplateau on gru, lstm & cnn models. 6. documentation for gru & bi-directional models. valentina: 1. creating word vectors by word2vec method, create weight matrix from word2vec gensim model, getting embedding vectors from word2vec and using it as weights of non-trainable keras embedding layer. 2. build and test of svm model using cross validation and grid search to find good hyperparameters by building a pipeline. 3. implementation of early stopping - build network and train it until validation loss reduces. 4. build and test of cnn on word embeddings using word2vec and glove. 5. convert test and train features to inputfeatures that bert understands, create model using pooled output, layer for tuning, dropout, labels conversion to one hot encoding; and get predictions. 6. investigation & test of lstm model with word2vec, glove and different parameters. 7. documentation for project report, documentation overview, svm, cnn and lstm models. 6. presentation video presentation : https://web.microsoftstream.com/video/4436fc73-53d1-4dc4-a386-29e7c8e20eca leaderboard results : https://web.microsoftstream.com/video/7ae237ae-9c20-4a19-b4b7- b1b43508023f references [online] / auth. scikit learn. - http://scikit- learn.org/stable/auto_examples/model_selection/grid_search_text_feature_extraction.html. https://mccormickml.com/2019/07/22/bert-fine-tuning/ [online] / auth. mccormick. combining numerical and text features in deep neural networks [online] / auth. freischlag christian. - https://towardsdatascience.com/combining-numerical-and-text-features-in-deep-neural-networks- e91f0237eea4. https://github.com/ibrahimcelenli/cnn-word2vec-tweets-classification / auth. celeni ibrahim. https://www.kaggle.com/jdpaletto/glove-global-vectors-for-word-representation [online] / auth. paletto j.d.. https://www.kaggle.com/lbronchal/sentiment-analysis-with-svm [online] / auth. bronchal luis. public domain sarcasm detection using lstm, gru, (85% accuracy) [online] / auth. kohli nikhil. - https://www.kaggle.com/nikhilkohli/sarcasm-detection-using-lstm-gru-85-accuracy. sentiment analysis in python with keras and lstm [online] / auth. nana roblex. - https://www.kaggle.com/roblexnana/sentiment-analysis-with-keras-and-lstm. sentiment analysis with bidirectional lstm [online] / auth. lillysimeonova. - https://www.kaggle.com/liliasimeonova/sentiment-analysis-with-bidirectional-lstm. sentiment analysis with text mining [online] / auth. carremans bert. - https://towardsdatascience.com/sentiment-analysis-with-text-mining-13dd2b33de27. project progress report sandeep nanjegowda - sgn3 (captain) sunitha vijayanarayan - sunitha3 valentina mondal - vmondal2 1. progress made so far models tried: * logistic regression * naive bayes * lstm (long-short term memory) * gru (gated recurring units) * cnn (convolutional neural network) * svm (support vector machine) pre-processing & feature extraction: * have tried word embeddings like glove and word2vector on the models: lstm, gru and cnn. * new features like word counts, emojis, hash tags were extracted and using for logistic regression and naive bayes. * both test and training set data was initially processed to remove html tags, punctuations, numbers, single characters, multiple spaces. * models were trained and fitted using the given twitter trained set data by splitting it into training and test set. further the model was applied on the test data set to find out the precision, recall and f-score. more details about models tried: * logistic regression: logistic regression model performed well on the test set data and gave precision of 0.658, recall of 0.808 and f-score of 0.725. were able to beat the baseline using the lr model. * naive bayes: naive bayes did well on test data and gave f-score of 0.702 * neural network models - lstm, gru & cnn: we tried 3 neural network models lstm, gru, cnn with different combinations of hyper parameters. the maximum f- score obtained in all these neural network methods with different combinations of hyper parameters was 0.69. we tried word embedding with glove and word2vec but got almost the same results and not able to beat the baseline. also tried without glove and word2vec by training on all the words, but that model performed well only in local tests and did poorly in live data lab. * svm: for svm, after using cross validation and grid search to find the good hyperparameter for svm model, still the model could not beat the baseline with the test set data. got an f-score of around 0.68. 2. remaining tasks * we have extracted additional features such as word counts, number of has tags, number of emojis in each of the tweet and used them in logistic regression. we are planning to use these features in neural network models. * project documentation and presentation. * we are looking at adding additional pre-processing steps like converting emojis and emoticons to text. 3. any challenges/issues being faced * unable to beat the baseline (i.e., f-score of 0.723) in live lab leaderboard using lstm, gru and cnn. * for neural network models like lstm and gru, overfitting is a problem as we get very good results on the graded test set in some cases but are not able to replicate the results on the leaderboard. * some models took very long time to train based on the hyper-parameters chosen."	['courseproject', 'csfall', 'course', 'project', 'text', 'classification', 'team', 'members', 'sandeep', 'nanjegowda', 'sgnillinoisedu', 'sunitha', 'vijayanarayan', 'valentina', 'mondal', 'video', 'presentation', 'httpswebmicrosoftstreamcomvideofcddcaeceeca', 'leaderboard', 'results', 'httpswebmicrosoftstreamcomvideoaeaecabbbbf', 'live', 'lab', 'data', 'linked', 'git', 'hub', 'account', 'gnsandeep', 'public', 'domain', 'cs', 'information', 'systems', 'documentation', 'sgn', 'captain', 'vmondal', 'index', 'overview', 'function', 'code', 'implementation', 'models', 'tweet', 'bert', 'svm', 'cnn', 'lstm', 'gru', 'naive', 'bayes', 'linear', 'regression', 'bidirectional', 'model', 'usage', 'collaboration', 'references', 'goal', 'classify', 'given', 'test', 'set', 'twitter', 'responses', 'sarcasm', 'using', 'various', 'methods', 'classified', 'predicting', 'label', 'response', 'based', 'context', 'ordered', 'list', 'dialogue', 'reply', 'last', 'unique', 'ids', 'along', 'build', 'train', 'several', 'different', 'trained', 'predict', 'generate', 'answertxt', 'file', 'predicted', 'since', 'dataset', 'generated', 'exactly', 'rows', 'high', 'level', 'perform', 'steps', 'preprocess', 'training', 'removing', 'html', 'tags', 'converting', 'tweets', 'lower', 'case', 'punctuations', 'numbers', 'stop', 'words', 'emojis', 'emoticons', 'single', 'character', 'multiple', 'spaces', 'left', 'special', 'characters', 'split', 'create', 'embedding', 'matrix', 'glove', 'wordvec', 'embeddings', 'layer', 'adding', 'layers', 'etc', 'fit', 'generating', 'labels', 'uploaded', 'values', 'compared', 'actual', 'result', 'obtain', 'precision', 'recall', 'fscore', 'value', 'indicates', 'fraction', 'relevant', 'instances', 'among', 'retrieved', 'number', 'correctly', 'identified', 'positive', 'divided', 'including', 'total', 'amount', 'samples', 'harmonic', 'mean', 'highest', 'possible', 'baseline', 'achieved', 'successfully', 'able', 'beat', 'logistic', 'walking', 'points', 'regarding', 'tried', 'used', 'attributes', 'leveraged', 'applications', 'appropriate', 'changes', 'news', 'headline', 'sentiment', 'analysis', 'movie', 'reviews', 'section', 'describes', 'encoder', 'representations', 'transformers', 'bertforsequenceclassification', 'built', 'jupyter', 'notebook', 'following', 'sections', 'order', 'chris', 'mccormick', 'blogs', 'helpful', 'certain', 'preprocessing', 'two', 'files', 'provided', 'trainjsonl', 'testjsonl', 'read', 'pandas', 'frame', 'python', 'functions', 'load_training_data_to_pandas', 'load_test_data_to_pandas', 'load', 'urls', 'nonascii', 'extra', 'space', 'removed', 'inserted', 'punctuation', 'marks', 'converted', 'package', 'hugging', 'face', 'give', 'us', 'pytorch', 'interface', 'working', 'installed', 'tokenizing', 'input', 'creating', 'dataloaders', 'feed', 'must', 'tokens', 'need', 'add', 'start', 'end', 'pad', 'truncate', 'sentences', 'constant', 'length', 'max', 'differentiate', 'real', 'padding', 'attention', 'mask', 'mapped', 'tokenizer', 'vocabulary', 'tokenization', 'performed', 'included', 'uncased', 'version', 'bertbaseuncased', 'validation', 'also', 'iterator', 'torch', 'dataloader', 'class', 'helps', 'save', 'memory', 'unlike', 'loop', 'entire', 'loaded', 'note', 'sequentialsampler', 'datasets', 'pretrained', 'top', 'parameters', 'learning', 'rate', 'scheduler', 'adamw', 'optimizer', 'e', 'eps', 'get_linear_schedule_with_warmup', 'created', 'utility', 'format_time', 'formatting', 'time', 'flat_accuracy', 'calculating', 'accuracy', 'pass', 'phase', 'unpack', 'inputs', 'onto', 'gpu', 'acceleration', 'clear', 'gradients', 'calculated', 'previous', 'accumulate', 'default', 'useful', 'things', 'like', 'rnns', 'unless', 'explicitly', 'forward', 'network', 'backward', 'backpropagation', 'tell', 'update', 'optimizerstep', 'track', 'variables', 'monitoring', 'progress', 'evalution', 'compute', 'loss', 'evaluating', 'prediction', 'done', 'batches', 'appended', 'added', 'answer_berttxt', 'support', 'vector', 'machines', 'written', 'language', 'bronchal', 'twitteraware', 'designed', 'flexible', 'easy', 'adapt', 'new', 'domains', 'tasks', 'tuple', 'regex_strings', 'define', 'regular', 'expression', 'strings', 'put', 'compiled', 'object', 'called', 'word_re', 'word_refindalls', 'usersupplied', 'string', 'inside', 'tokenize', 'method', 'instantiating', 'objects', 'option', 'preserve_case', 'true', 'false', 'downcase', 'everything', 'except', 'vectorize', 'countvectorizer', 'converts', 'collection', 'documents', 'token', 'counts', 'produces', 'sparse', 'representation', 'scipysparsecsr_matrix', 'analyzer', 'feature', 'made', 'word', 'ngrams', 'override', 'step', 'preserving', 'generation', 'lowercase', 'convert', 'ngram_range', 'upper', 'boundary', 'range', 'nvalues', 'extracted', 'ie', 'stop_words', 'builtin', 'english', 'cross', 'grid', 'search', 'use', 'find', 'good', 'hyperparameters', 'pipeline', 'get', 'features', 'folds', 'building', 'gridsearchcv', 'implements', 'snapshot', 'reference', 'exhaustively', 'searches', 'specified', 'parameter', 'estimator', 'param_grid', 'enables', 'searching', 'sequence', 'settings', 'cv', 'determines', 'crossvalidation', 'splitting', 'strategy', 'n_jobs', 'means', 'processors', 'parallel', 'verbose', 'controls', 'verbosity', 'messages', 'scoring', 'evaluate', 'predictions', 'best', 'works', 'basis', 'greater', 'else', 'not_sarcasm', 'answer_svmtxt', 'convolutional', 'neural', 'celeni', 'described', 'particular', 'weight', 'gensim', 'vectors', 'obtained', 'weights', 'nontrainable', 'keras', 'corpus', 'named', 'tweets_notbinary', 'referred', 'global', 'unsupervised', 'algorithm', 'obtaining', 'aggregated', 'wordword', 'cooccurrence', 'statistics', 'resulting', 'showcase', 'interesting', 'substructures', 'downloaded', 'link', 'paletto', 'depending', 'upon', 'whichever', 'non', 'trainable', 'followed', 'addition', 'creates', 'convolution', 'kernel', 'convoluted', 'spatial', 'dimension', 'produce', 'tensor', 'outputs', 'action', 'relu', 'applied', 'well', 'filters', 'dimensionality', 'output', 'kernel_size', 'specify', 'window', 'maxpool', 'summarize', 'activated', 'presence', 'pooling', 'required', 'sample', 'detection', 'maps', 'map', 'setting', 'pool_size', 'size', 'regularization', 'dropout', 'approximates', 'many', 'networks', 'architectures', 'randomly', 'ignored', 'dropped', 'effect', 'making', 'looklike', 'treatedlike', 'nodes', 'connectivity', 'prior', 'dense', 'operation', 'snippet', 'early', 'stopping', 'epochs', 'lead', 'overfitting', 'whereas', 'may', 'underfit', 'allows', 'arbitrary', 'large', 'performance', 'stops', 'improving', 'holdout', 'modelpredict', 'run', 'labelled', 'answer_cnntxt', 'long', 'shortterm', 'nana', 'functional', 'discussed', 'units', 'specifying', 'compile', 'binary', 'crossentropy', 'predicts', 'opt', 'tuned', 'experimentally', 'runs', 'answer_lstmtxt', 'gated', 'recurrent', 'unit', 'type', 'retain', 'ago', 'without', 'washing', 'remove', 'irrelevant', 'hyperparameter', 'specifically', 'related', 'reducelronplateau', 'decided', 'blog', 'kohli', 'reduced', 'progressing', 'checkpointing', 'would', 'saved', 'answer_grutxt', 'carremans', 'textcounts', 'extends', 'sklearnbasebaseestimator', 'sklearnbasetransformermixin', 'extracts', 'additional', 'hash', 'mentions', 'capital', 'question', 'cleantext', 'removes', 'oneword', 'digits', 'stopwords', 'performs', 'stemming', 'passed', 'classes', 'combined', 'cleaned', 'columnextractor', 'selecting', 'columns', 'tuning', 'first', 'declare', 'parameters_vect', 'parameters_mnb', 'parameters_logreg', 'tfidf', 'max_df', 'min_df', 'clf_c', 'clf_penality', 'naiive', 'alpha', 'grid_vect', 'uses', 'skilearn', 'scikit', 'learn', 'vectorizes', 'ski', 'hyper', 'column', 'versions', 'extension', 'traditional', 'improve', 'problems', 'timesteps', 'available', 'instead', 'one', 'lstms', 'referenced', 'lillysimeonova', 'logisticregression', 'bid', 'grulstm', 'combining', 'count', 'already', 'nontext', 'coded', 'referring', 'freischlag', 'adam', 'answer_bidirectionaltxt', 'running', 'google', 'colab', 'preferred', 'open', 'browser', 'mozilla', 'chrome', 'httpscolabresearchgooglecom', 'choose', 'github', 'url', 'chose', 'bertseqipynb', 'click', 'upload', 'button', 'jsonl', 'runtime', 'cells', 'stored', 'answer_bertseqtxt', 'see', 'locally', 'place', 'testjson', 'trainjson', 'httpsgithubcomcsfallclassificationcompetitiontreemaindata', 'local', 'path', 'folder', 'svmpy', 'prerequisites', 'ensure', 'download', 'install', 'libraries', 'modules', 'throw', 'errors', 'httpsgithubcomgnsandeepcourseprojecttreemaindata', 'cnnpy', 'throwing', 'lstmipynb', 'please', 'glovebdtxt', 'glovebzip', 'httpsnlpstanfordeduprojectsglove', 'wikipedia', 'gigaword', 'b', 'k', 'vocab', 'mb', 'restart', 'grupy', 'lgnb_cvipynb', 'answernbtxt', 'answercvlgtxt', 'bidirectionalmodelspy', 'answer_blstmtxt', 'answer_bgrutxt', 'captured', 'individual', 'f', 'base', 'line', 'screen', 'shot', 'brief', 'description', 'contribution', 'member', 'multiperson', 'frequent', 'meetings', 'learnt', 'tested', 'incorporated', 'suggestions', 'voice', 'demo', 'investigation', 'modelcheckpoint', 'effects', 'emoji', 'earlystopping', 'modelcheckpointing', 'getting', 'reduces', 'inputfeatures', 'understands', 'pooled', 'conversion', 'hot', 'encoding', 'report', 'online', 'auth', 'httpscikitlearnorgstableauto_examplesmodel_selectiongrid_search_text_feature_extractionhtml', 'httpsmccormickmlcombertfinetuning', 'numerical', 'deep', 'christian', 'httpstowardsdatasciencecomcombiningnumericalandtextfeaturesindeepneuralnetworksefeea', 'httpsgithubcomibrahimcelenlicnnwordvectweetsclassification', 'ibrahim', 'httpswwwkagglecomjdpalettogloveglobalvectorsforwordrepresentation', 'jd', 'httpswwwkagglecomlbronchalsentimentanalysiswithsvm', 'luis', 'nikhil', 'httpswwwkagglecomnikhilkohlisarcasmdetectionusinglstmgruaccuracy', 'roblex', 'httpswwwkagglecomroblexnanasentimentanalysiswithkerasandlstm', 'httpswwwkagglecomliliasimeonovasentimentanalysiswithbidirectionallstm', 'mining', 'httpstowardsdatasciencecomsentimentanalysiswithtextminingddbde', 'httpswebmicrosoftstreamcomvideoaeaecabb', 'bbf', 'httpscikit', 'learnorgstableauto_examplesmodel_selectiongrid_search_text_feature_extractionhtml', 'httpstowardsdatasciencecomcombiningnumericalandtextfeaturesindeepneuralnetworks', 'efeea', 'far', 'longshort', 'term', 'recurring', 'machine', 'extraction', 'wordvector', 'initially', 'processed', 'fitted', 'details', 'gave', 'lr', 'combinations', 'maximum', 'score', 'got', 'almost', 'tests', 'poorly', 'still', 'could', 'around', 'remaining', 'planning', 'looking', 'challengesissues', 'faced', 'unable', 'problem', 'graded', 'cases', 'replicate', 'took', 'chosen']
https://github.com/gotplt/CourseProject	"manbearpig: final report spiros thanasoulas st19@illinois.edu december 15, 2020 description the manbearpig project is an attempt to understand parts of the mandoc system and to lay the foundations for full text search in it. mandoc is a set of tools that display and index man or mdoc files to users of unix systems. the main purpose of these files are to provide documentation for commands, apis, system components etc in a consistent way to the users. the mdoc language and its history unix manual pages originally were written in a language called roff which itself was a descendant of an even earlier system called runoff originally written by jerry saltzer for the compatible time sharing system around 1964. that language provided macros that controlled the typesetting of text, like .center for centering or .br for line breaking. around 1970 it was rewritten as roff by doug mcillroy and bob morris , and then it was ported to the unix system by ken thompson. there it was first used for documenting the aspects of the system and since then it has remained the preferred way for performing these tasks. the gnu system has also brought forward the info system which is similar, but it hasn't gained widespread adoption. mdoc originally appeared as a troff macro package in 4.4bsd. it was then significantly updated by werner lemberg and ruslan ermilov in groff-1.17. the standalone implementation that is part of the mandoc utility we use for this project written by kristaps dzonsons and it appeared in openbsd 4.6. mdoc allows the semantic annotation of words and phrases , and also supports document hyperlinking. in an mdoc document, lines beginning with the control character '.' are called ""macro lines"". the first word is the macro name. it consists of two or three letters. most macro names begin with a capital letter. the words following the macro name are arguments to the macro, optionally including the names of other, callable macros. lines not beginning with the control character are called ""text lines"". they provide free- form text to be printed the formatting of the text depends on the respective processing context which is controlled by the parent macro. an example some mdoc test for a fictional utlity called ""progname"" could be as follows .dd mdocdate .dt progname section .os .sh name .nm progname .nd one line about what it does ."".sh library .""for sections 2, 3, and 9 only. .""not used in openbsd. .sh synopsis .nm progname .op fl options .ar .sh description the .nm utility processes files ... searching mdocs traditionally the manual pages can be searched with a command names apropos (originating from the french expression `a propos, which means ""about""). also to make things even more confusing, another way to search manual pages has been invoking the man command with a -k (keyword) flag. in the mandoc system although this syntax exists for compatibility, it just invokes the apropos command on the backend. this is a point where across unix systems, things can begin to diverge greatly. in the mandoc system that we are examining the apropos and whatis utilities query manual page databases generated by the makewhatis 1 command, by default, apropos searches for makewhatis databases using case-insensitive extended regular expression matching over manual names and descriptions (the .nm and .nd macro keys). in the mandoc system these databases are basically hashtables based on the ohash open hashing helper functions written originally by marc espie for openbsd. on other implementations though like the gnu ones in some linux distributions (again, this means not mandoc, but completely different manual page systems, which are presented here just for reference) the databases are implemented differently. below are the options for the system shipped with debian linux of the mandb database formats and how it compares with mandoc in terms of async access, database naming and backend. name type async filename mandoc db hashed (ohash) yes section/$arch/title.secion debian man/berkeley db binary tree yes index.bt debian man/gnu gdbm hashed yes index.db debian man/unix ndbm hashed no index.(dir--pag) as we have seen the current search functionality for all systems allows the query of very specific keywords in very specific parts of the document. mandoc greatly improved the state of the art when it appeared because it also allowed certain semantic search capabilities. for example you could perform and/or operations on different macros to refine your search result. but still the result would be just the manual page name and section, and the keyword would have to be in an easily indexable part of the mdoc, because as it can be seen from the example above, the free text is intermixed with typesetting information. small steps forward extracting text one good addition to the system would be to enable full text search. to do so we first have to extract the text in as a pure form as we can, and then somehow index it. for this task a small utlity was written (which borrows heavily from the demandoc command) to extract relevant text from an mdoc page. the current result is far from perfect as it needs to make decisions about , spaces, linebrakes , capitalization etc, but it still achieves the goal for the most part. it is able to extract text without formatting macros. the relevant code for this lives under code/extract text.c, and it works by recursively parsing the mdoc structures (they can be embedded) in order to output only the words that are not language tokens. matching using trigrams since the makewhatis database is already in a hashtable format, it would make sense to choose a represen- tation that maps well to that backend if it is to ever be merged in the main codebase. we want the user to be able to enter a small set of words and to fetch the results of the manual page this text sequence exists in. also we would like for the user to have the ability to find a matching line of text midsentence. consider for example a part of a manual page stating that ""a manual page consists of several sections."". if we only kept an inverted index of words and our user wanted to look for the string ""age consist"", our system could lead him quite astray since none of the words page and consists match the query properly. therefore as discussed before in the proposal documents, we will follow the approach that russ cox used while imple- menting the backend for google code search, which consists of splitting the text in tri-grams and storing their occurences. under the trigram transformation the word ""word"" creates the set of the following trigrams w, wo, wor, ord, rd , d . an example program that perfors this transformation on its arguments can be found in code/words to trigrams.c. running the example code under the directory code/ there is a makefile that builds the two binaries. under the directory code/input/ exist some sample files for input to the test programs. for the code to be compiled the mandoc source code 2 should be compiled and existing at the same level of directory as the courseproject code. below are some sample runs of the two provided binaries. >cd code ; >make ; cc =c =i . . / . . / mandoc/ e x t r a c t t e x t . c cc e x t r a c t t e x t . o =l . . / . . / mandoc/ =l / l i b /x86 64=linux=gnu/ =lmandoc =l z =o e x t r a c t t e x t cc =o words to trigrams words to trigrams . c >./ e x t r a c t t e x t input / apropos . 1 ; operating on f i l e input /apropos .1 october apropos name apropos whatis search manual page databases synopsis apropos afk f i l e path path outkey arch sect ion expression description the apropos and whatis u t i l i t i e s query manual page databases generated by makewhatis evaluating expression f o r each f i l e in each database by default they display the names sect ion numbers and d e s c r i p t i o n l i n e s of a l l matching manuals by default apropos searches f o r makewhatis databases in the default paths s t i p u l a t e d by man and uses case=i n s e n s i t i v e extended regular expression matching over manual names and d e s c r i p t i o n s the and macro keys multiple terms imply pairwise whatis i s synonym f or apropos the options are as f o l l o w s : instead of showing only the t i t l e l i n e s show the complete manual pages j u s t l i k e man would i f the standard output i s terminal device and i s not $\ ldots$ \\ >./ words to trigrams the quick brown fox jumped over the lazy dog arg : the trigrams [ t ] [ t h ] [ t h e ] [ h e ] [ e ] arg : quick trigrams [ q ] [ q u ] [ q u i ] [ u i c ] [ i c k ] [ c k ] [ k ] arg : brown trigrams [ b ] [ b r ] [ b r o ] [ r o w] [ o w n ] [w n ] [ n ] arg : fox trigrams [ f ] [ f o ] [ f o x ] [ o x ] [ x ] arg : jumped trigrams [ j ] [ j u ] [ j u m] [ u m p ] [m p e ] [ p e d ] [ e d ] [ d ] arg : over trigrams [ o ] [ o v ] [ o v e ] [ v e r ] [ e r ] [ r ] arg : the trigrams [ t ] [ t h ] [ t h e ] [ h e ] [ e ] arg : lazy trigrams [ l ] [ l a ] [ l a z ] [ a z y ] [ z y ] [ y ] arg : dog trigrams [ d ] [ d o ] [ d o g ] [ o g ] [ g ] next steps since we now have seen that we can succesfully extract words from the mdoc format and generate trigrams for words we would need to create a hashtable using the ohash functions that will resemble the existing makewhatis databases. currently the values of these hashes are just the name and the section of the manual page, but since we can give the ability to match anywhere in a page , it would also make sense to at least provide a file pointer to beginning of the actual text. this would be a very hard problem since we can not correlate where something is going to be rendered as a position , to where the text is on the mdoc document. therefore it would make more sense to just give the name of the page back and then use our system's pager (less/more etc) to navigate to that exact string. 3 progress report for manbearpig spiros thanasoulas st19@illinois.edu november 28, 2020 status as outlined in the project proposal the goal of this project is to document the current status and lay the foundation for providing full text search capabilities to the mandoc system. mandoc is a modern implementation of a manual page system https://mandoc.bsd.lv and part of the project is to identify its current search capabilities (how the command apropos / man -k with a keyword works) and provide a design and parts of an implementation for a full text search option on it. progress made so far i have analyzed the current way that apropos accepts search terms and passes them to the current database implementation. also i have designed an initial algorithm based on n-grams and a matching database format that could replace (or go side by side) with the current database in order to provide some basic full text search capabilities. i have also written a scraper which can consume the mandoc language and extract the words that are to be fed to the database builder. remaining tasks actually implement a database format that conforms to the apropos search api. connect it to the apropos code and issue queries. write tests to make sure that the words that have been inputed have matching n-grams in the correct format in the binary database. write the report that describes the work done challenges faced being a large codebase it requires many hours of familiriazing with a part of it before you can start making sense of how to interface with it. also being a pure c project , always requires treading carefully with things like memory management, io etc so the progress done is slower than it would be in a completely dynamic/scripting language working with a smaller framework. members st19 / solo project 1 manbearpig. an attempt at providing native full text search to the mandoc system. spiros thanasoulas st19@illinois.edu november 2, 2020 description the goal of this project would be to create a report and possibly code improvements towards providing a backend that supports full text search capabilities for the mandoc project (https://mandoc.bsd.lv/). background unix system provide their documentation to the user through a set of tools collectively referred to as the manual page system. the well known man(1) command exists today on all unix systems but even on other platforms like macosx and android. searching efficiently keywords and semantics has been of paramount importance for the user to quickly get to the relevant manual page and the command apropos(1) traditionally served that purpose, meaning doing database lookups. the databases are built with the makewhatis(1) tool. project proposal we will investigate the c source code of the mandoc project, targeted on the modules of searching and database creation. the goal of this project would be to lay a path for full text search capabilities from the apropos command. currently only certain words of a manual page are indexed and their semantic information stored with them, in a persisted to a file database that on the outerlevel is implemented as a hash map. to allow for the full text search capabilities we will implement a database based on trigrams keying an inverted index of the full text being contained in a manual page, after it has been parsed from the mdoc parsers and only the content remains. in detail the goal of the project would be to create the equivalent database of the makewhatis(1) db that is currently created, but which stores the trigrams. due to lack of time no optimizations for very large databases are going to be implemented and the testing input will be constrained enough to make sure the datastructures will be able to fit in memory. the generated database will be evaluated by dumping the contents and making sure all the trigrams that should be produced and only those are contained within it. a test harness to ensure that will be provided. if time permits the search capabilities will be attempted to connect to the database through the apropos command and query for a text string. note to the reviewer: although i would love to finish the whole thing but it might be unfeasable in around 25hrs that i have budgeted it for it. my intention though is to lay the foundation so that a patch will be eventually merged in the mandoc codebase, not to demo something that noone will ever user proposed workflow we propose that the analysis and development will be split across 5 6hr man - days of work day 1 code and documentation analysis. reviewing the makewhatis utility and the resulting databases it creates examine the relevant code flow and find where to plugin the new functionality. day 2 design of the binary file format that will store to the trigrams data structure, as well as the parsing functions to extract them. day 3 development and documentation day 4 development, documentation and test harness day 5 final report 1 members st19 / solo project 2 courseproject for st19 manbearpig. an attempt at providing full text search to mandoc the goal of this project would be to attempt an implementation of a trigram based full text search database for the mandoc project (https://mandoc.bsd.lv/) background unix system provide their documentation to the user through a set of tools collectively referred to as the manual page system. the well known man(1) command exists today on all unix systems but even on other platforms like macosx and android. searching efficiently keywords and semantics has been of paramount importance for the user to quickly get to the relevant manual page and the command apropos(1) traditionally served that purpose, meaning doing database lookups. the database are built with the makewhatis(1) tool. project proposal we will investigate the c source code of the mandoc project, targeted on the modules of searching and database building. we will understand how it works and how to extract manual page text using the mdoc library functions. then we shall create a simplified trigram database of an an inverted index with the goal to connect it to the search capabilities. final report and code you can read the final report in the pdf , and see the provided final-presentation.mp4 to compile the mandoc source code you can fetch it from https://mandoc.bsd.lv/ and compile it at the same directory level as this project. members st19 / solo project"	['manbearpig', 'final', 'report', 'spiros', 'thanasoulas', 'stillinoisedu', 'december', 'description', 'project', 'attempt', 'understand', 'parts', 'mandoc', 'system', 'lay', 'foundations', 'full', 'text', 'search', 'set', 'tools', 'display', 'index', 'man', 'mdoc', 'files', 'users', 'unix', 'systems', 'main', 'purpose', 'provide', 'documentation', 'commands', 'apis', 'components', 'etc', 'consistent', 'way', 'language', 'history', 'manual', 'pages', 'originally', 'written', 'called', 'roff', 'descendant', 'even', 'earlier', 'runoff', 'jerry', 'saltzer', 'compatible', 'time', 'sharing', 'around', 'provided', 'macros', 'controlled', 'typesetting', 'like', 'center', 'centering', 'br', 'line', 'breaking', 'rewritten', 'doug', 'mcillroy', 'bob', 'morris', 'ported', 'ken', 'thompson', 'first', 'used', 'documenting', 'aspects', 'since', 'remained', 'preferred', 'performing', 'tasks', 'gnu', 'also', 'brought', 'forward', 'info', 'similar', 'hasnt', 'gained', 'widespread', 'adoption', 'appeared', 'troff', 'macro', 'package', 'bsd', 'significantly', 'updated', 'werner', 'lemberg', 'ruslan', 'ermilov', 'groff', 'standalone', 'implementation', 'part', 'utility', 'use', 'kristaps', 'dzonsons', 'openbsd', 'allows', 'semantic', 'annotation', 'words', 'phrases', 'supports', 'document', 'hyperlinking', 'lines', 'beginning', 'control', 'character', 'word', 'name', 'consists', 'two', 'three', 'letters', 'names', 'begin', 'capital', 'letter', 'following', 'arguments', 'optionally', 'including', 'callable', 'free', 'form', 'printed', 'formatting', 'depends', 'respective', 'processing', 'context', 'parent', 'example', 'test', 'fictional', 'utlity', 'progname', 'could', 'follows', 'dd', 'mdocdate', 'dt', 'section', 'os', 'sh', 'nm', 'nd', 'one', 'library', 'sections', 'synopsis', 'op', 'fl', 'options', 'ar', 'processes', 'searching', 'mdocs', 'traditionally', 'searched', 'command', 'apropos', 'originating', 'french', 'expression', 'propos', 'means', 'make', 'things', 'confusing', 'another', 'invoking', 'k', 'keyword', 'flag', 'although', 'syntax', 'exists', 'compatibility', 'invokes', 'backend', 'point', 'across', 'diverge', 'greatly', 'examining', 'whatis', 'utilities', 'query', 'page', 'databases', 'generated', 'makewhatis', 'default', 'searches', 'using', 'caseinsensitive', 'extended', 'regular', 'matching', 'descriptions', 'keys', 'basically', 'hashtables', 'based', 'ohash', 'open', 'hashing', 'helper', 'functions', 'marc', 'espie', 'implementations', 'though', 'ones', 'linux', 'distributions', 'completely', 'different', 'presented', 'reference', 'implemented', 'differently', 'shipped', 'debian', 'mandb', 'database', 'formats', 'compares', 'terms', 'async', 'access', 'naming', 'type', 'filename', 'db', 'hashed', 'yes', 'sectionarchtitlesecion', 'manberkeley', 'binary', 'tree', 'indexbt', 'mangnu', 'gdbm', 'indexdb', 'manunix', 'ndbm', 'indexdirpag', 'seen', 'current', 'functionality', 'specific', 'keywords', 'improved', 'state', 'art', 'allowed', 'certain', 'capabilities', 'perform', 'andor', 'operations', 'refine', 'result', 'still', 'would', 'easily', 'indexable', 'intermixed', 'information', 'small', 'steps', 'extracting', 'good', 'addition', 'enable', 'extract', 'pure', 'somehow', 'task', 'borrows', 'heavily', 'demandoc', 'relevant', 'far', 'perfect', 'needs', 'decisions', 'spaces', 'linebrakes', 'capitalization', 'achieves', 'goal', 'able', 'without', 'code', 'lives', 'codeextract', 'textc', 'works', 'recursively', 'parsing', 'structures', 'embedded', 'order', 'output', 'tokens', 'trigrams', 'already', 'hashtable', 'format', 'sense', 'choose', 'represen', 'tation', 'maps', 'well', 'ever', 'merged', 'codebase', 'want', 'user', 'enter', 'fetch', 'results', 'sequence', 'ability', 'find', 'midsentence', 'consider', 'stating', 'several', 'kept', 'inverted', 'wanted', 'look', 'string', 'age', 'consist', 'lead', 'quite', 'astray', 'none', 'match', 'properly', 'therefore', 'discussed', 'proposal', 'documents', 'follow', 'approach', 'russ', 'cox', 'imple', 'menting', 'google', 'splitting', 'storing', 'occurences', 'trigram', 'transformation', 'creates', 'w', 'wo', 'wor', 'ord', 'rd', 'program', 'perfors', 'found', 'codewords', 'trigramsc', 'running', 'directory', 'makefile', 'builds', 'binaries', 'codeinput', 'exist', 'sample', 'input', 'programs', 'compiled', 'source', 'existing', 'level', 'courseproject', 'runs', 'cd', 'cc', 'c', 'e', 'x', 'r', 'l', 'b', 'linuxgnu', 'lmandoc', 'z', 'operating', 'f', 'october', 'afk', 'path', 'outkey', 'arch', 'sect', 'ion', 'u', 'evaluating', 'numbers', 'p', 'n', 'manuals', 'paths', 'uses', 'casei', 'v', 'multiple', 'imply', 'pairwise', 'synonym', 'instead', 'showing', 'show', 'complete', 'j', 'standard', 'terminal', 'device', 'ldots', 'quick', 'brown', 'fox', 'jumped', 'lazy', 'dog', 'arg', 'h', 'q', 'g', 'next', 'succesfully', 'generate', 'need', 'create', 'resemble', 'currently', 'values', 'hashes', 'give', 'anywhere', 'least', 'file', 'pointer', 'actual', 'hard', 'problem', 'correlate', 'something', 'going', 'rendered', 'position', 'back', 'pager', 'lessmore', 'navigate', 'exact', 'progress', 'november', 'status', 'outlined', 'foundation', 'providing', 'modern', 'httpsmandocbsdlv', 'identify', 'design', 'option', 'made', 'analyzed', 'accepts', 'passes', 'designed', 'initial', 'algorithm', 'ngrams', 'replace', 'go', 'side', 'basic', 'scraper', 'consume', 'fed', 'builder', 'remaining', 'actually', 'implement', 'conforms', 'api', 'connect', 'issue', 'queries', 'write', 'tests', 'sure', 'inputed', 'correct', 'describes', 'work', 'done', 'challenges', 'faced', 'large', 'requires', 'many', 'hours', 'familiriazing', 'start', 'making', 'interface', 'always', 'treading', 'carefully', 'memory', 'management', 'io', 'slower', 'dynamicscripting', 'working', 'smaller', 'framework', 'members', 'st', 'solo', 'native', 'possibly', 'improvements', 'towards', 'background', 'collectively', 'referred', 'known', 'today', 'platforms', 'macosx', 'android', 'efficiently', 'semantics', 'paramount', 'importance', 'quickly', 'get', 'served', 'meaning', 'lookups', 'built', 'tool', 'investigate', 'targeted', 'modules', 'creation', 'indexed', 'stored', 'persisted', 'outerlevel', 'hash', 'map', 'allow', 'keying', 'contained', 'parsed', 'parsers', 'content', 'remains', 'detail', 'equivalent', 'created', 'stores', 'due', 'lack', 'optimizations', 'testing', 'constrained', 'enough', 'datastructures', 'fit', 'evaluated', 'dumping', 'contents', 'produced', 'within', 'harness', 'ensure', 'permits', 'attempted', 'note', 'reviewer', 'love', 'finish', 'whole', 'thing', 'might', 'unfeasable', 'hrs', 'budgeted', 'intention', 'patch', 'eventually', 'demo', 'noone', 'proposed', 'workflow', 'propose', 'analysis', 'development', 'split', 'hr', 'days', 'day', 'reviewing', 'resulting', 'examine', 'flow', 'plugin', 'new', 'store', 'data', 'structure', 'building', 'shall', 'simplified', 'read', 'pdf', 'see', 'finalpresentationmp', 'compile']
https://github.com/hc2111/CourseProject	progress report: 1. progress made thus far a. implementation of classifier and training on google cloud. 2. remaining tasks, a. improve model b. complete submission documentation c. complete project demo vid 3. any challenges/issues being faced. a. n/a 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. a. harry chen => netid: hchen223 => captain 2. which competition do you plan to join? a. text classification 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods a. yes, i am prepared to learn state of the art neural network classifiers. some classifiers and frameworks i have heard of include svm, perceptron network, logistic regression classifiers, deep neutral neural network classifier. i've has experiences with svm's in the past and look forward to learning more about other classifiers. 4. which programming language do you plan to use? a. i plan to use python courseproject explain your model for the competition i used the bert(bidirectional encoder representations from transformers) model. this model is a cutting edge model for classification. bert's main innovation is applying the bidirectional training of transformer, a popular attention model, to language modeling. how i performed the training: since bert training on cpu was incredably slow, i utilized a google cloud vm to train the model on the gpu, this enabled much faster training speeds and more experimentation with parameters and tuning. experiments with other methods: prior to using bert, i tried to create my own model and tunings, however they failed to come close to the baseline, so i expanded my options and opted to utilize bert. how to run: download the data folder from this link: https://drive.google.com/file/d/1oqltj9btnob45huosfn_fmn23hl_wrgi/view?usp=sharing and the jupyter notebook, and then run all the cells. demo video: https://drive.google.com/file/d/1likjrzylrykk2romzf5cp208hlj24ehw/view?usp=sharing	['progress', 'report', 'made', 'thus', 'far', 'implementation', 'classifier', 'training', 'google', 'cloud', 'remaining', 'tasks', 'improve', 'model', 'b', 'complete', 'submission', 'documentation', 'c', 'project', 'demo', 'vid', 'challengesissues', 'faced', 'na', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'harry', 'chen', 'netid', 'hchen', 'competition', 'plan', 'join', 'text', 'classification', 'choose', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'name', 'deep', 'learning', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'yes', 'state', 'art', 'include', 'svm', 'perceptron', 'logistic', 'regression', 'neutral', 'ive', 'experiences', 'svms', 'past', 'look', 'forward', 'programming', 'language', 'use', 'python', 'courseproject', 'explain', 'used', 'bertbidirectional', 'encoder', 'representations', 'transformers', 'cutting', 'edge', 'berts', 'main', 'innovation', 'applying', 'bidirectional', 'transformer', 'popular', 'attention', 'modeling', 'performed', 'since', 'bert', 'cpu', 'incredably', 'slow', 'utilized', 'vm', 'train', 'gpu', 'enabled', 'much', 'faster', 'speeds', 'experimentation', 'parameters', 'tuning', 'experiments', 'using', 'tried', 'create', 'tunings', 'however', 'failed', 'come', 'close', 'baseline', 'expanded', 'options', 'opted', 'utilize', 'run', 'download', 'data', 'folder', 'link', 'httpsdrivegooglecomfiledoqltjbtnobhuosfn_fmnhl_wrgiviewuspsharing', 'jupyter', 'notebook', 'cells', 'video', 'httpsdrivegooglecomfiledlikjrzylrykkromzfcphljehwviewuspsharing']
https://github.com/henryg3/CourseProject	henry guan (henryg3), kevin yu (yuey8) cs 410 project progress report - improving a system (educationalweb) 11/29/2020 1. so far, we have made some progress on our project itself; we believe we are close to finishing the bulk slide downloader. 2. remaining tasks we have to complete are finishing the bulk downloader, scaling up the system, and improving the ui where necessary. 3. challenges we are currently facing are that although the bulk downloader works, it only downloads the first 10 slides of each weekly course lecture. additionally, there is a lot of code to navigate (220,000+ lines of code in one of the files), so it takes a while to figure out where we can implement what we proposed in our project proposal. in order to run and test our code: please read the readme for our codebase. video link: https://www.youtube.com/watch?v=bv4k16nsyqy&feature=youtu.be scaling up the system: this allows for more courses to be added to educationalweb, and this is done by modifying model.py within the codebase, specifically, modifying the functions that take in the list of courses that are passed into educationalweb, as well as being able to correctly parse and sort slides. bulk-download: this utility allows the user to download up to five pdf slides at a time compared to one pdf slide before. we implemented additional functions on top of the original download in pdf.js. we first connected our function and button correctly onto the event bus, and for each time the bulk-download button is clicked, the current lecture page index is parsed as a parameter, and we are able to download the next few slides using that index. since the pdf data is loaded one at a time, the bulk-download feature uses downloadbyurl instead of regular download by data. multiple-pages skip: this utility allows the user to skip five pages at a time(next or prev), and makes the process of bulk-downloading much easier. the frontend of this utility is implemented in slide.html, and includes simply two buttons and their on-click events. the backend is implemented in model.py and is built on top of the original next and prev functionalities. educationalweb system project proposal questions 1. yuey8, henryg3; the captain is henryg3 2. the system we have chosen is the educationalweb system. the subtopic(s) we have chosen under the system is to allow downloading slides in bulk and scaling up the current system. 3. for bulk downloading, we plan to implement a web bulk downloader on the current website. and to scale up the system, we plan to obtain datas from platforms such as coursera or uiuc courses using web crawling techniques. 4. we will demonstrate that our function works as expected by showing how the base system will perform without this function, versus the functionality of the system after the functions are implemented. 5. our code will utilize the system by adding more contents from different sources and enables bulk downloading. 6. we are planning to use python and javascript. 7. the workload of our topic is at least 40 hours (2 people in our team). a. understanding the educationalweb system: approximately 1~2 hours b. researching about our techniques 3~4 hours c. bulk downloading: approximately 12~15 hours d. implementing web crawling techniques to scale up the system: 24~27 hours video link: https://www.youtube.com/watch?v=bv4k16nsyqy&feature=youtu.be how to run our code: please git clone this repository to whichever directory you'd like. you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html create the index in elasticsearch by running python create_es_index.py from educationalweb/ download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under educationalweb/pdf.js/static/slides/ from educationalweb/pdf.js/build/generic/web , run the following command: gulp server in another terminal window, run python app.py from educationalweb/ the site should be available at http://localhost:8096/	['henry', 'guan', 'henryg', 'kevin', 'yu', 'yuey', 'cs', 'project', 'progress', 'report', 'improving', 'system', 'educationalweb', 'far', 'made', 'believe', 'close', 'finishing', 'bulk', 'slide', 'downloader', 'remaining', 'tasks', 'complete', 'scaling', 'ui', 'necessary', 'challenges', 'currently', 'facing', 'although', 'works', 'downloads', 'first', 'slides', 'weekly', 'course', 'lecture', 'additionally', 'lot', 'code', 'navigate', 'lines', 'one', 'files', 'takes', 'figure', 'implement', 'proposed', 'proposal', 'order', 'run', 'test', 'please', 'read', 'readme', 'codebase', 'video', 'link', 'httpswwwyoutubecomwatchvbvknsyqyfeatureyoutube', 'allows', 'courses', 'added', 'done', 'modifying', 'modelpy', 'within', 'specifically', 'functions', 'take', 'list', 'passed', 'well', 'able', 'correctly', 'parse', 'sort', 'bulkdownload', 'utility', 'user', 'download', 'five', 'pdf', 'time', 'compared', 'implemented', 'additional', 'top', 'original', 'pdfjs', 'connected', 'function', 'button', 'onto', 'event', 'bus', 'clicked', 'current', 'page', 'index', 'parsed', 'parameter', 'next', 'using', 'since', 'data', 'loaded', 'feature', 'uses', 'downloadbyurl', 'instead', 'regular', 'multiplepages', 'skip', 'pages', 'timenext', 'prev', 'makes', 'process', 'bulkdownloading', 'much', 'easier', 'frontend', 'slidehtml', 'includes', 'simply', 'two', 'buttons', 'onclick', 'events', 'backend', 'built', 'functionalities', 'questions', 'captain', 'chosen', 'subtopics', 'allow', 'downloading', 'plan', 'web', 'website', 'scale', 'obtain', 'datas', 'platforms', 'coursera', 'uiuc', 'crawling', 'techniques', 'demonstrate', 'expected', 'showing', 'base', 'perform', 'without', 'versus', 'functionality', 'utilize', 'adding', 'contents', 'different', 'sources', 'enables', 'planning', 'use', 'python', 'javascript', 'workload', 'topic', 'least', 'hours', 'people', 'team', 'understanding', 'approximately', 'b', 'researching', 'c', 'implementing', 'git', 'clone', 'repository', 'whichever', 'directory', 'youd', 'like', 'elasticsearch', 'installed', 'running', 'httpswwwelasticcoguideenelasticsearchreferencecurrenttargzhtml', 'create', 'create_es_indexpy', 'tfidf_outputszip', 'httpsdrivegooglecomfilediacqahnwkkxasbnfsclqrigdtfiwviewuspsharing', 'unzip', 'file', 'place', 'folder', 'educationalwebstatic', 'cszip', 'httpsdrivegooglecomfiledxiwosavooejsy_siiixpfaqsuyuuhviewuspsharing', 'educationalwebpdfjsstaticslides', 'educationalwebpdfjsbuildgenericweb', 'following', 'command', 'gulp', 'server', 'another', 'terminal', 'window', 'apppy', 'site', 'available', 'httplocalhost']
https://github.com/hernang2/CourseProject	"documentation overview this crawler is used to mine faculty university faculties and generate a ""json"" file with an entry per professor. this entry will have the following fields: faculty, url, location, email, name, top_terms and bio. the purpose of this was to feed the expert search app with structured text that had additional information but couldn't fit the data to work with the meta corpus types. it can be used to gather info on professors, including the top five terms related to their bios. implementation the code borrows from mp2.1 to crawl through faculties' professor profiles. we give an array of faculty home pages and from there the script tries to infer what links to professor profiles we have in it. then using nltk's word_tokenize we determine the words with the highest frequencies in the bios text, by counting frequency of words and normalizing by max frequency. after that we use a ""heuristic"" with the aid of beautifulsoup and regex to try to gather the email, facultie and name of the professor. i couldn't implement location as i didn't setup the maps api that was used in the expert search's get_location.py script. at the end, it dumps a json with the faculties data in a file called ""bios_json.txt"" under the sample folder, alongside the main.py usage we assume a machine running python 3.5 using the pip installer the script that needs to run is main to run this script you need to install the following packages: * bs4: pip install beautifulsoup4 * selenium: pip install -u selenium * nltk: pip install nltk for selenium we assume you're testing with the firefox dirver. if not, get the driver for your browser and use it in the constructor on main.py line 181. some browsers might get tricky. to specify which university faculties you want to crawl, modify dir_url in main.py line 185 expertsearch - extracting relevant information as stated by the project topics document, the goal of this project is to enhance the expertsearch app (https://github.com/cs410fall2020/expertsearch/) to convert the unstructured text in faculty webpages into more structured text, so that we can more accurately extract email and faculty names from the faculty member bios crawled data. progress -setup a vm running a linux distro and set it up with python 2.7 -get code from git repo -run up with gunicorn and necessary packages on localhost -started modifying the code around the ranker for the structured text update remaining tasks -determine best text structure -update results structure in server.py's search method to use this new structure -push code to this repo -host website on the cloud challenges -this app is made to run using python 2.7 on linux. had some issues setting up the vm i'm using to work on and getting sure python, pip, gunicorn and other packages were installed and running using the correct version -i can see potential issues related to python 2.7 when deploying to the cloud, but python 2.7 still has support until next year, enough to deliver the project. expertsearch - extracting relevant information this is the final project for the uiuc text information systems course. for a visual walkthrough you can use the following links: you can find the video about how to instal and run: https://mediaspace.illinois.edu/media/1_sktdzqnu you can find the video about how the code works: https://mediaspace.illinois.edu/media/1_ht2q1bdw to view presentation go to: https://1drv.ms/u/s!asauk2isocrzkkroebv6q6xlc0_rbw?e=8fbitd # overview the puropose of this project is to be able to crawl through faculty pages and gather info on professors that gets stored in a structured data format. this structured that would have the fields that the expert search system currently has, like email, name and faculty, but additionally i'm trying to gather top terms that can be used to give a better idea of the bio's expertise. # implementation to gather the top terms i used the nltk library to tokenize the professor's bio. then i calculate the maximum frequency and normalize the counts of all the terms using this figure. after giltering for stopwords and single characters, i order by frequency and take the first five elements. bio = visible_text.strip() stopwords = nltk.corpus.stopwords.words('english') word_frequencies = {} for word in nltk.word_tokenize(bio): if word not in stopwords: if word not in word_frequencies.keys(): word_frequencies[word] = 1 else: word_frequencies[word] += 1 max_frequency = max(word_frequencies.values()) for word in word_frequencies.keys(): word_frequencies[word] = (word_frequencies[word] / max_frequency) word_frequencies = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=true) top_terms = list(k[0] for k in word_frequencies if len(k[0]) > 1)[:5] to generate the json, i crawled through faculty pages from mp2.1's sheet looking for hyperlinks. if the hyperlink has content that resembles a name and a valid href it starts the mining. it asumes the name is nearby. it browses to the url, gathers all non-html text and does a little format as the bio. it looks for some types of tags and looks top see if they match an email regex, or departments after tokenizing and filtering for small sentences that include at least one word related to the description of a department. after that it collects everything in a json (for this code look at crawler/sample/main.py line 113) # limitations the professor gathering algorithm is a hit and miss, because it has many false positives, like student info, academic resources, etc. i didn't compare it against a database of common names (and i guess someone could be named academic resources). maybe main failure was connecting it with the expert search app, as it depends of some certain valid formats that the corpus that gets fed to metapy. i couldn't make it work of json, or strip metapy entirely an replce the ranking code with a different library, like nltk."	['documentation', 'overview', 'crawler', 'used', 'mine', 'faculty', 'university', 'faculties', 'generate', 'json', 'file', 'entry', 'per', 'professor', 'following', 'fields', 'url', 'location', 'email', 'name', 'top_terms', 'bio', 'purpose', 'feed', 'expert', 'search', 'app', 'structured', 'text', 'additional', 'information', 'couldnt', 'fit', 'data', 'work', 'meta', 'corpus', 'types', 'gather', 'info', 'professors', 'including', 'top', 'five', 'terms', 'related', 'bios', 'implementation', 'code', 'borrows', 'mp', 'crawl', 'profiles', 'give', 'array', 'home', 'pages', 'script', 'tries', 'infer', 'links', 'using', 'nltks', 'word_tokenize', 'determine', 'words', 'highest', 'frequencies', 'counting', 'frequency', 'normalizing', 'max', 'use', 'heuristic', 'aid', 'beautifulsoup', 'regex', 'try', 'facultie', 'implement', 'didnt', 'setup', 'maps', 'api', 'searchs', 'get_locationpy', 'end', 'dumps', 'called', 'bios_jsontxt', 'sample', 'folder', 'alongside', 'mainpy', 'usage', 'assume', 'machine', 'running', 'python', 'pip', 'installer', 'needs', 'run', 'main', 'need', 'install', 'packages', 'bs', 'selenium', 'u', 'nltk', 'youre', 'testing', 'firefox', 'dirver', 'get', 'driver', 'browser', 'constructor', 'line', 'browsers', 'might', 'tricky', 'specify', 'want', 'modify', 'dir_url', 'expertsearch', 'extracting', 'relevant', 'stated', 'project', 'topics', 'document', 'goal', 'enhance', 'httpsgithubcomcsfallexpertsearch', 'convert', 'unstructured', 'webpages', 'accurately', 'extract', 'names', 'member', 'crawled', 'progress', 'vm', 'linux', 'distro', 'set', 'git', 'repo', 'gunicorn', 'necessary', 'localhost', 'started', 'modifying', 'around', 'ranker', 'update', 'remaining', 'tasks', 'best', 'structure', 'results', 'serverpys', 'method', 'new', 'push', 'host', 'website', 'cloud', 'challenges', 'made', 'issues', 'setting', 'im', 'getting', 'sure', 'installed', 'correct', 'version', 'see', 'potential', 'deploying', 'still', 'support', 'next', 'year', 'enough', 'deliver', 'final', 'uiuc', 'systems', 'course', 'visual', 'walkthrough', 'find', 'video', 'instal', 'httpsmediaspaceillinoisedumedia_sktdzqnu', 'works', 'httpsmediaspaceillinoisedumedia_htqbdw', 'view', 'presentation', 'go', 'httpsdrvmsusasaukisocrzkkroebvqxlc_rbwefbitd', 'puropose', 'able', 'gets', 'stored', 'format', 'would', 'system', 'currently', 'like', 'additionally', 'trying', 'better', 'idea', 'expertise', 'library', 'tokenize', 'calculate', 'maximum', 'normalize', 'counts', 'figure', 'giltering', 'stopwords', 'single', 'characters', 'order', 'take', 'first', 'elements', 'visible_textstrip', 'nltkcorpusstopwordswordsenglish', 'word_frequencies', 'word', 'nltkword_tokenizebio', 'word_frequencieskeys', 'word_frequenciesword', 'else', 'max_frequency', 'maxword_frequenciesvalues', 'sortedword_frequenciesitems', 'keylambda', 'x', 'reversetrue', 'listk', 'k', 'lenk', 'mps', 'sheet', 'looking', 'hyperlinks', 'hyperlink', 'content', 'resembles', 'valid', 'href', 'starts', 'mining', 'asumes', 'nearby', 'browses', 'gathers', 'nonhtml', 'little', 'looks', 'tags', 'match', 'departments', 'tokenizing', 'filtering', 'small', 'sentences', 'include', 'least', 'one', 'description', 'department', 'collects', 'everything', 'look', 'crawlersamplemainpy', 'limitations', 'gathering', 'algorithm', 'hit', 'miss', 'many', 'false', 'positives', 'student', 'academic', 'resources', 'etc', 'compare', 'database', 'common', 'guess', 'someone', 'could', 'named', 'maybe', 'failure', 'connecting', 'depends', 'certain', 'formats', 'fed', 'metapy', 'make', 'strip', 'entirely', 'replce', 'ranking', 'different']
https://github.com/hetadesai26/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/houyuan2/CS410CourseProject	"if you choose this option, please answer the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. yuechen liu yuechen7 houyuan sha houyuan2 ruobin wang ruobinw2 tianren zhou tianren2 captain 2. what system have you chosen? which subtopic(s) under the system? improving a system: expert search system 3. briefly describe the datasets, algorithms or techniques you plan to use for the dataset, we can obtain the current collection of faculty pages dataset from the course ta. we plan to use elasticsearch to implement our search engine. https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html we will import the dataset to elasticsearch and implement corresponding unstructured queries to obtain the relevant result. we will implement a python backend and html frontend, which should provide an accessible interface for the user. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? we attempt to provide an alternative method to query the existing expert dataset using elastic search. in doing so, we attempt to achieve better accuracy and speed. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly we plan to implement apis in the python server. the frontend will communicate with backend using the api. 6. which programming language do you plan to use? python, reactjs, js 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. total 20*4 = 80 hours * frontend (30 hours) * backend - api (20 hours) * backend - db, search engine (30 hours) at the final stage of your project, you need to deliver the following: * your documented source code. * a demo that shows your implementation actually works. if you are improving a function, compare your results to the previously available function. if your implementation works better, show it off. if not, discuss why. progress thus far: 1. deployed elastic search api and the visualization tool kibana in docker containers 2. extracted email address from bios using regex 3. populated the elastic search database with url, bio, and email data 4. built the basic front end that is able for api and backend to test queries including search bars and outputs remaining tasks: 1. build a clear front end that is enough to show results properly 2. extend more sophisticated search using elasticsearch 3. filter unrelated information given certain keywords 4. enhance performance of original ranking system of expertsearch challenges: 1. extracting faculty names from bios is challenging. plan to resolve this via python spacy library 2. query in elasticsearch is new to us. we need to learn more about how to write queries in this engine. video presentation https://www.youtube.com/watch?v=tlylflthigk setup install docker (https://www.docker.com/get-started, install docker desktop) install python3 (at least 3.7) in project folder, run the following in terminal: pip3 install flask\ pip3 install regex\ pip3 install elasticsearch\ pip3 install spacy\ python3 -m spacy download en\ docker-compose up -d wait 3 minutes for docker containers to be set up in terminal: python3 setup.py wait for all index to be created, this could take up to 3 hours, due to nlp and indexing server in terminal: python3 server.py navigate to http://127.0.0.1:5000/ goal our project aims to develop a search tool for experts in different fields. an user can enter a search phrase(e.g data mining) in the search bar and our application will return the likely results according to similarity between the bios of the expert and the search phrase. the user can inspect the validity of the result by accessing the homepage of the expert using returned url. furthermore, the user can contact the expert via the returned email. overview our project is based on elastic search, a document-orientated database that provides unstructured search functionality. the code base is divided to 3 parts. in ""setup.py"", the application would read the input text files to obtain faculty bios and the corresponding homepage url. the application would then attempt to extract the faculty name and email from the bios using spacy, a nlp package. these information would be stored into the elastic search database. in ""server.py"", the application would query the database with the input typed in search bar, and return the corresponding results. comparison original project: https://github.com/cs410fall2020/expertsearch/ \ compared to the original project, which used the stanford model, our project took a different route. we used elastic search as text tokenization and ranking tool. we also used python3 spacy to extract email and name from faculty bios. we attempt to extract more names and emails from the input bios. we had more success with email, but name extact is less successful due to the limitation of nlp. another difference is our search engine is key word based, which is more relaxed compared to the original project. moreover, our project allows user to specify how many results to be returned. finally, our front end is more fine-tuned. contributions houyuan sha: set up the docker container for elastic search; extract name and email from faculty bios; store faculty information to elastic search database yuechen liu: set up flask; write api connecting database and frontend tianren zhou: write query and comments for future extension ruobin wang: designed user interfaces; set up front-end"	['choose', 'option', 'please', 'answer', 'following', 'questions', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'yuechen', 'liu', 'houyuan', 'sha', 'ruobin', 'wang', 'ruobinw', 'tianren', 'zhou', 'system', 'chosen', 'subtopics', 'improving', 'expert', 'search', 'briefly', 'describe', 'datasets', 'algorithms', 'techniques', 'plan', 'use', 'dataset', 'obtain', 'current', 'collection', 'faculty', 'pages', 'course', 'ta', 'elasticsearch', 'implement', 'engine', 'httpswwwelasticcoguideenelasticsearchreferencecurrentanalysishtml', 'import', 'corresponding', 'unstructured', 'queries', 'relevant', 'result', 'python', 'backend', 'html', 'frontend', 'provide', 'accessible', 'interface', 'user', 'adding', 'function', 'demonstrate', 'works', 'expected', 'show', 'implementation', 'actually', 'better', 'attempt', 'alternative', 'method', 'query', 'existing', 'using', 'elastic', 'achieve', 'accuracy', 'speed', 'code', 'communicate', 'utilize', 'also', 'fine', 'build', 'systems', 'state', 'clearly', 'apis', 'server', 'api', 'programming', 'language', 'reactjs', 'js', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'tasks', 'completed', 'estimated', 'time', 'cost', 'task', 'db', 'final', 'stage', 'project', 'need', 'deliver', 'documented', 'source', 'demo', 'shows', 'compare', 'results', 'previously', 'available', 'discuss', 'progress', 'thus', 'far', 'deployed', 'visualization', 'tool', 'kibana', 'docker', 'containers', 'extracted', 'email', 'address', 'bios', 'regex', 'populated', 'database', 'url', 'bio', 'data', 'built', 'basic', 'front', 'end', 'able', 'test', 'including', 'bars', 'outputs', 'remaining', 'clear', 'enough', 'properly', 'extend', 'sophisticated', 'filter', 'unrelated', 'information', 'given', 'certain', 'keywords', 'enhance', 'performance', 'original', 'ranking', 'expertsearch', 'challenges', 'extracting', 'challenging', 'resolve', 'via', 'spacy', 'library', 'new', 'us', 'learn', 'write', 'video', 'presentation', 'httpswwwyoutubecomwatchvtlylflthigk', 'setup', 'install', 'httpswwwdockercomgetstarted', 'desktop', 'folder', 'run', 'terminal', 'pip', 'flask', 'download', 'en', 'dockercompose', 'wait', 'minutes', 'set', 'setuppy', 'index', 'created', 'could', 'take', 'due', 'nlp', 'indexing', 'serverpy', 'navigate', 'http', 'goal', 'aims', 'develop', 'experts', 'different', 'fields', 'enter', 'phraseeg', 'mining', 'bar', 'application', 'return', 'likely', 'according', 'similarity', 'phrase', 'inspect', 'validity', 'accessing', 'homepage', 'returned', 'furthermore', 'contact', 'overview', 'based', 'documentorientated', 'provides', 'functionality', 'base', 'divided', 'parts', 'would', 'read', 'input', 'text', 'files', 'extract', 'name', 'package', 'stored', 'typed', 'comparison', 'httpsgithubcomcsfallexpertsearch', 'compared', 'used', 'stanford', 'model', 'took', 'route', 'tokenization', 'emails', 'success', 'extact', 'less', 'successful', 'limitation', 'another', 'difference', 'key', 'word', 'relaxed', 'moreover', 'allows', 'specify', 'many', 'finally', 'finetuned', 'contributions', 'container', 'store', 'connecting', 'comments', 'future', 'extension', 'designed', 'interfaces']
https://github.com/hpandeycodeit/CourseProject	"project proposal: cs 410 topic: sentiment analysis team canyon what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. - amrutha gujjar agujjar2@illinois.edu - balakumar balasubramaniam bbalasub@illinois.edu - himanshu pandey hpandey3@illinois.edu himanshu pandey is the captain what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic name: sentiment analysis the task is to capture the sentiments on the data. for eg: in current presidential campaign, we read the news through different channels including social media. streaming the social media data like twitter, can give a dataset on the topic ""presidential campaign"" and then we will process the data to find and evaluate the sentiments of the users on both the presidential campaign. dataset: we will be using the twitter data for this project. tools: scrapping/streaming the twitter data can be done through r or python in real time. evaluation: precision/recall measures which programming language do you plan to use? python please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. the task is divided into following sub tasks: - data streaming and cleaning. we are planning on stream the data at different times from the twitter and once we have 30-40k rows, we can start cleaning the data. 8 hours - data cleaning and analysis 6 - 8 hours - writing the code to train the data 20 hours - test and refine 8 - 10 hours - improving the model accuracy 6 - 8 hours - evaluation of the test results 6 - 8 hours - generating charts 6 - 8 hours columns = [author, date, tweet] filename nrows start_time end_time isroworderreversed twitter.csv 17720 2020-11-04 06:02:56 2020-11-04 06:24:23 yes twitter_2.csv 2655 2020-11-04 06:38:39 2020-11-04 06:38:40 yes realtime.csv 186323 2020-11-04 07:54:55 2020-11-04 08:26:11 no realtime2.csv 658280 2020-11-04 08:32:26 2020-11-04 10:16:56 no project progress report: cs 410 topic: sentiment analysis team canyon which tasks have been completed? following tasks have been completed: - data streaming/scrapping - data cleaning and - analysis data streaming/scrapping: we used the twitter to stream real time data during the presidential elections 2020. the raw data contains following three columns ""author,date,tweet"" tweets with hashtags ""'elections2020', 'electionnight', 'elections', 'trump', 'biden'"" to real time stream data from twitter, we have created an app in twitter. using ""tweepy"" library in python and using the ""consumer_key"", ""consumer_secret"", ""access_token"", and ""access_token_secret"" from the app created in twitter, we have streamed the live data during the event to fetch around 658280 tweets. data cleaning: we used the meta analysis toolkit to clean the raw data that was scraped from twitter. this involved using 'stemming' to treat base words as the same, in order to reduce the amount of noise in the analysis. analysis: current data is analyzed to create time-series of n-gram counts charts are plotted and embedded into html files. these plots contain the top-20 most popular n- grams. we have computed for 2,3,4 and 5-grams. as per the proposal we have created the initial sentiment analysis for presidential elections 2020. which tasks are pending? - evaluation of the test results using precision/recall measures are pending. - need to test the generation of charts on a different dataset to test the streamline working of the project. are you facing/faced any challenges? there is no cap on the amount of data that needs to be collected to generate the correct sentiments. in other words, when should we stop scrapping the data from twitter? this was one of the challenges we faced while scrapping the data from twitter. in addition to the above, the limitations from twitter to the number of calls that can be made to collect the data. data cleaning is an issue as all the data from twitter is not text. it includes images/gifs/smiles and videos too. cleaning such data was not straight forward. still need to integrate the evaluation of results using precision and recall measures. we are hoping to complete this in time. about the project this project provides a general framework for capturing sentiment trends from streamed twitter data. we demonstrate our software by capturing the us 2020 election related tweets, in the morning after the election, and applying n-gram frequency trends, and plsa. the framework is written to be such that it is easy to add new modules, and perform new analytics. using this dataset, we show that n-gram analysis captures many of the prominent characteristics of the election -- including ""biden win"", ""claim victory"", and ""trump premature claim"". we then apply a sentiment analysis, and show that the positive sentiment towards trump decreases between 840-1000 am, while biden's positive sentiment marginally increases. finally, we do a plsa analysis on the data to identify the top-10 topics that are of the greatest importance. we show that the plsa analysis captures biden's win in georgia, importance of swing states pennsylvania, and wisconsin, and vote count stop related messages. interestingly, the top topic turned out to be ""claims of a premature result"". this package can be used as a template for processing any other twitter data stream. data collection data was collected using the twitter api and python code. the code ""twitter_data.py"" was run during the presidential election night 2020 to collect the most relevant tweets that covered hashtags such as 'elections2020', 'electionnight', 'elections', 'trump', 'biden'. in all, we collected approximately 650k tweets. data cleaning we used metapy for initial clean up of the data. we used the meta analysis toolkit to clean the raw data that was scraped from twitter. this involved using 'stemming' to treat base words as the same, in order to reduce the amount of noise in the analysis. one important aspect of this work is the necessity to remove ""emojis"". these contaminate the data, and create biases in the results. so, we removed any emojis with the text. data analysis current data is analyzed to create time-series of n-gram counts at 5 minute intervals. clickable/zoomable charts are automatically generated, and embedded into html files. these plots contain the top-20 most popular n-grams (for n=2,3,4,5). as per the proposal we have created the sentiment trend analysis results for the us presidential elections in 2020. finally, plsa analysis picks up the most salient topics. requirements check our requirements file for the required libraries and run pip install requirements.txt. following are the required libraries for this project. metapy emoji pandas plotly textblob run the project clone the project and follow the steps below: run python driver_twitter.py only. this python file does the following tasks: it takes the input ""realtime2.csv"" file cleans the data by running ""data_cleaner.py"" after, cleaning runs ""ngram_analyzer.py"" to analyze ngram frequencies calculates the sentiments by running ""aggregate_sentiment_analyzer.py"" stores the charts/graphs in ""./figures/html/"" directory tools/languages python twitter api ## team amrutha\ bala\ himanshu ## video link presentation"	['project', 'proposal', 'cs', 'topic', 'sentiment', 'analysis', 'team', 'canyon', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'amrutha', 'gujjar', 'agujjarillinoisedu', 'balakumar', 'balasubramaniam', 'bbalasubillinoisedu', 'himanshu', 'pandey', 'hpandeyillinoisedu', 'free', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'name', 'capture', 'sentiments', 'data', 'eg', 'current', 'presidential', 'campaign', 'read', 'news', 'different', 'channels', 'including', 'social', 'media', 'streaming', 'like', 'twitter', 'dataset', 'process', 'find', 'users', 'using', 'scrappingstreaming', 'done', 'r', 'python', 'real', 'time', 'evaluation', 'precisionrecall', 'measures', 'programming', 'language', 'plan', 'use', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'tasks', 'completed', 'estimated', 'cost', 'divided', 'following', 'sub', 'cleaning', 'planning', 'stream', 'times', 'k', 'rows', 'start', 'writing', 'code', 'train', 'test', 'refine', 'improving', 'model', 'accuracy', 'results', 'generating', 'charts', 'columns', 'author', 'date', 'tweet', 'filename', 'nrows', 'start_time', 'end_time', 'isroworderreversed', 'twittercsv', 'yes', 'twitter_csv', 'realtimecsv', 'progress', 'report', 'streamingscrapping', 'used', 'elections', 'raw', 'contains', 'three', 'authordatetweet', 'tweets', 'hashtags', 'electionnight', 'trump', 'biden', 'created', 'app', 'tweepy', 'library', 'consumer_key', 'consumer_secret', 'access_token', 'access_token_secret', 'streamed', 'live', 'event', 'fetch', 'around', 'meta', 'toolkit', 'clean', 'scraped', 'stemming', 'treat', 'base', 'words', 'order', 'reduce', 'amount', 'noise', 'analyzed', 'create', 'timeseries', 'ngram', 'counts', 'plotted', 'embedded', 'html', 'files', 'plots', 'contain', 'top', 'popular', 'grams', 'computed', 'per', 'initial', 'pending', 'need', 'generation', 'streamline', 'working', 'facingfaced', 'challenges', 'cap', 'needs', 'collected', 'generate', 'correct', 'stop', 'scrapping', 'one', 'faced', 'addition', 'limitations', 'calls', 'made', 'collect', 'issue', 'text', 'includes', 'imagesgifssmiles', 'videos', 'straight', 'forward', 'still', 'integrate', 'precision', 'recall', 'hoping', 'complete', 'provides', 'general', 'framework', 'capturing', 'trends', 'demonstrate', 'software', 'us', 'election', 'related', 'morning', 'applying', 'frequency', 'plsa', 'written', 'easy', 'add', 'new', 'modules', 'perform', 'analytics', 'show', 'captures', 'many', 'prominent', 'characteristics', 'win', 'claim', 'victory', 'premature', 'apply', 'positive', 'towards', 'decreases', 'bidens', 'marginally', 'increases', 'finally', 'identify', 'topics', 'greatest', 'importance', 'georgia', 'swing', 'states', 'pennsylvania', 'wisconsin', 'vote', 'count', 'messages', 'interestingly', 'turned', 'claims', 'result', 'package', 'template', 'processing', 'collection', 'api', 'twitter_datapy', 'run', 'night', 'relevant', 'covered', 'approximately', 'metapy', 'aspect', 'necessity', 'remove', 'emojis', 'contaminate', 'biases', 'removed', 'minute', 'intervals', 'clickablezoomable', 'automatically', 'generated', 'ngrams', 'trend', 'picks', 'salient', 'requirements', 'check', 'file', 'required', 'libraries', 'pip', 'install', 'requirementstxt', 'emoji', 'pandas', 'plotly', 'textblob', 'clone', 'follow', 'steps', 'driver_twitterpy', 'takes', 'input', 'cleans', 'running', 'data_cleanerpy', 'runs', 'ngram_analyzerpy', 'analyze', 'frequencies', 'calculates', 'aggregate_sentiment_analyzerpy', 'stores', 'chartsgraphs', 'figureshtml', 'directory', 'toolslanguages', 'bala', 'video', 'link', 'presentation']
https://github.com/icyguy64/CourseProject	"text classification competition: sarcasm detection final report chua yeow long, ylchua2@illinois.edu introduction in this competition, we are required to perform sarcasm detection/classification of twitter tweets. the dataset consists of a response which is the tweet to be classified, context which is the conversation context of the response and the label as well as the id for identification of tweets when making submissions. the goal is to predict the label of the tweet ""response"" while optionally using context (i.e., the immediate or the full context). from the size of the dataset which is 5,000 for training and 1,800 for testing, transfer learning models will need to be used instead of building neural network models from scratch. installation of libraries i'll use jupyter notebooks to illustrate the workflow and we'll need nltk for text pre-processing, keras/tensorflow to build our neural networks and standard sklearn libraries. to install the libraries, just do a pip install or conda install (in the case of anaconda). overall plan i'll first preprocess the text data by removing stop-words using nltk's stop-words and non-alphabetic characters such as symbols before feeding the data into 3 different models. the first is to use a simple word occurrence/count model and the model did not work out very well as the model predicted not-sarcasm for all the test dataset. the second is to use glove embedding and adding some lstm and dropout layers and training just the newly added layers. a 85% train and 15% validation split was performed to obtain the validation dataset. for the input text data, i have tried with and without context and there was not much a difference in the results. the last and third method is to use bert and re-train the entire bert layers using the dataset on a pretty, i would say beefy machine. the best f1-score i have obtained is 0.7378 with context information and 0.716 without context which is pretty significant. i have explored using additional feature engineering and gpt-2/xlm models but given the time constraints, i was not able to obtain a better f1-score. pip install tensorflow-gpu pip install nltk pip install sklearn code walkthrough for this section, you can just refer to the accompanied jupyter notebook or the video presentation. results i have not included the results for the countvectorizer model as it predicted all 0's/not-sarcasm. the best f1-score i have obtained using glove embedding together with lstm layers was 0.661 both with and without context. the best f1-score i have obtained using bert is 0.7378 with context information and 0.716 without context. the baseline required is 0.723. conclusion it was a fun journey to be playing with the state-of-the-art in nlp, playing with bert and glove embeddings as well as gpt-2/xlm. although i was able to surpass the baseline only using bert, i believe with more feature engineering and tinkering with the models, the baseline should be achievable. description f1-score glove embedding with lstm layers without context 0.661 glove embedding with lstm layers 0.661 bert without context 0.716 bert with context 0.7378 notebook_fnal december 12, 2020 1 text classifcation competition: sarcasm detection chua yeow long, ylchua2@illinois.edu in this notebook, i'll frst try using a simple word count model using sklearn's countvectorizer to perform sarcasm detection. next, i'll use glove embedding and add neural network layers towards the end, training just the added layers using the provided dataset. finally, i'll fne tune bert layers, just fne-tuning the entire bert model which consists of hundreds of millions of parameters using the training dataset with a pretty beefy machine. we'll frst need to import the necessary libraries. [2]: import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import numpy as np from nltk.corpus import stopwords from nltk.util import ngrams from sklearn.feature_extraction.text import countvectorizer from collections import defaultdict from collections import counter plt.style.use('ggplot') stop=set(stopwords.words('english')) import re from nltk.tokenize import word_tokenize import gensim import string from keras.preprocessing.text import tokenizer from keras.preprocessing.sequence import pad_sequences from tqdm import tqdm from keras.models import sequential from keras.layers import embedding,lstm,dense,spatialdropout1d from keras.initializers import constant from sklearn.model_selection import train_test_split from keras.optimizers import adam we'll make use of pandas' read_json module to load the data into a pandas dataframe where we'll perform our work 1 [3]: df = pd.read_json('data/train.jsonl', lines=true) [4]: df.head() [4]: label response \ 0 sarcasm @user @user @user i don't get this .. obviousl... 1 sarcasm @user @user trying to protest about . talking ... 2 sarcasm @user @user @user he makes an insane about of ... 3 sarcasm @user @user meanwhile trump won't even release... 4 sarcasm @user @user pretty sure the anti-lincoln crowd... context 0 [a minor child deserves privacy and should be ... 1 [@user @user why is he a loser ? he's just a p... 2 [donald j . trump is guilty as charged . the e... 3 [jamie raskin tanked doug collins . collins lo... 4 [man ... y ' all gone "" both sides "" the apoca... 1.1 data-preprocessing we'll just do a bit of preprocessing by removing non-alphabets and removing stopwords [6]: from nltk.corpus import stopwords import re [7]: def refinewords(s): letters_only = re.sub(""[^a-za-z]"", "" "", str(s)) words = letters_only.lower().split() stops = set(stopwords.words(""english"")) meaningful_words = [w for w in words if not w in stops] return( "" "".join( meaningful_words )) 1.2 with or without context we'll just combine the context into the response. i suppose having extra information/context is always good. [8]: df['response'] = df['response'].apply(refinewords) df['context'] = df['context'].apply(refinewords) df['response'] = df['context'] + ' ' + df['response'] we'll need to change the predictor variable which consists of 'sarcasm' and 'non_sarcasm' to '1's and '0's so that we can feed them into the model 2 [9]: def sarcasm_mapping(input): if input == 'sarcasm': return 1 else: return 0 df['label'] = df['label'].apply(sarcasm_mapping) we initialize a simple countvectorizer from sklearn for our frst model. [10]: from sklearn.feature_extraction.text import countvectorizer vectorizer = countvectorizer(analyzer = ""word"", \ tokenizer = none, \ preprocessor = none, \ stop_words = none, \ max_features = 5000) we duplicated copies of the training dataset so we have individual copies to work on for each model. [ ]: df_tmp = df.copy() df_tmp_bert = df.copy() df_tmp_xlm = df.copy() 1.3 data-preprocessing we'll need to ensure our training data is in the correct format for further analysis [ ]: df[""response""] = vectorizer.fit_transform(df[""response""]).toarray() df[""context""] = vectorizer.fit_transform(df[""context""]).toarray() 1.4 modelling we'll train our frst model which is a simple word count model. [11]: from sklearn.ensemble import randomforestclassifier forest = randomforestclassifier(n_estimators = 100) features_forest = df[[""response"",""context""]].values my_forest = forest.fit(features_forest, df['label']) we check the distribution of the target variable to see and indeed, the dataset is perfectly balanced. [12]: df['label'].value_counts() [12]: 1 2500 0 2500 name: label, dtype: int64 3 1.5 data-preprocessing for test set we do a similar preprocessing for the test set as well. [13]: test_df = pd.read_json('data/test.jsonl', lines=true) [14]: test_df.head() [14]: id response \ 0 twitter_1 @user @user @user my 3 year old , that just fi... 1 twitter_2 @user @user how many verifiable lies has he to... 2 twitter_3 @user @user @user maybe docs just a scrub of a... 3 twitter_4 @user @user is just a cover up for the real ha... 4 twitter_5 @user @user @user the irony being that he even... context 0 [well now that ' s problematic af <url>, @user... 1 [last week the fake news said that a section o... 2 [@user let ' s aplaud brett when he deserves i... 3 [women generally hate this president . what's ... 4 [dear media remoaners , you excitedly sharing ... we simply combine the context into the response. [15]: test_df['response'] = test_df['response'].apply(refinewords) test_df['context'] = test_df['context'].apply(refinewords) test_df['response'] = test_df['context'] + ' ' + test_df['response'] we duplicate the test dataset so that we have individual copies to work on [16]: test_df_tmp = test_df.copy() test_df_tmp_bert = test_df.copy() test_df_tmp_xlm = test_df.copy() we need to make sure that the test data is in the same format as the train data so we do essentially the same analysis [ ]: test_df[""response""] = vectorizer.fit_transform(test_df[""response""]).toarray() test_df[""context""] = vectorizer.fit_transform(test_df[""context""]).toarray() the input format needs to be in a form of an array [17]: features_forest_test = test_df[[""response"",""context""]].values we perform predictions of the test features using the trained countvectorizer model [18]: my_prediction = my_forest.predict(features_forest_test) 4 we convert the predictions into a pandas dataframe so we can use to_csv to easily output our predictions in the right format [20]: test_df['label'] = pd.dataframe(my_prediction) we do a value_count on the predictions to check how well the model worked. well the model predicted 100% no sarcasm which is clearly problematic. [21]: test_df['label'].value_counts() [21]: 0 1800 name: label, dtype: int64 [22]: test_df.describe() [22]: response context label count 1800.000000 1800.000000 1800.0 mean 0.002778 0.002222 0.0 std 0.097170 0.074523 0.0 min 0.000000 0.000000 0.0 25% 0.000000 0.000000 0.0 50% 0.000000 0.000000 0.0 75% 0.000000 0.000000 0.0 max 4.000000 3.000000 0.0 after we are done making predictions using the trained model we'll need to change the 1's and 0's of the label column back to sarcasm and non-sarcasm. [23]: def sarcasm_reverse_mapping(input): if input == 1: return 'sarcasm' else: return 'not_sarcasm' test_df['label'] = test_df['label'].apply(sarcasm_reverse_mapping) we make use of to_csv of the pandas library to create our answer.txt [24]: #test_df[['id','label']].to_csv('answer.txt', index=false, header=none) 1.6 modelling using glove embedding and some neural network layers first, we'll need to create the corpus. we'll need the tqdm module and nltk's word tokenize as well as stopwords to preprocess our data. [25]: def create_corpus(df): corpus=[] for tweet in tqdm(df['response']): 5 words=[word.lower() for word in word_tokenize(tweet) if((word. -isalpha()==1) & (word not in stop))] corpus.append(words) return corpus we concat/combine the training and test dataset so create a corpus of both the train and test datasets. [26]: df_tmp['response'] = df_tmp['response'].astype('string') test_df_tmp['response'] = test_df_tmp['response'].astype('string') df_new = df_tmp.append(test_df_tmp) corpus=create_corpus(df_new) 100%| | 6800/6800 [00:01<00:00, 3772.90it/s] we'll frst need to download the glove embedding and load it ensuring the correct formats, [27]: embedding_dict={} with open('data/glove.6b.200d.txt','r', encoding=""utf8"") as f: for line in f: values=line.split() word=values[0] vectors=np.asarray(values[1:],'float32') embedding_dict[word]=vectors f.close() we frst start by initializing a keras tokenizer and train it with the corpus we obtained earlier. we perform truncating and padding to get sequences of the same length. [28]: max_len=50 tokenizer_obj=tokenizer() tokenizer_obj.fit_on_texts(corpus) sequences=tokenizer_obj.texts_to_sequences(corpus) tweet_pad=pad_sequences(sequences,maxlen=max_len,truncating='post',padding='post') our tokenizer has a word number count in the form of word_index. we'll need it later. [29]: word_index=tokenizer_obj.word_index we'll need to make sure of tqdm module and glove embedding to obtain the embedding matrix to be used to create an embedding layer using keras. [30]: num_words=len(word_index)+1 embedding_matrix=np.zeros((num_words,200)) 6 for word,i in tqdm(word_index.items()): if i > num_words: continue emb_vec=embedding_dict.get(word) if emb_vec is not none: embedding_matrix[i]=emb_vec 100%|| 34445/34445 [00:00<00:00, 569822.52it/s] we'll build our neural network sequentially. we frst add the embedding layer and add lstm layers of decreasing nodes with dropout to reduce overftting. [31]: model=sequential() embedding=embedding(num_words,200,embeddings_initializer=constant(embedding_matrix), input_length=max_len,trainable=false) model.add(embedding) model.add(spatialdropout1d(0.10)) model.add(lstm(128*2, dropout=0.10, recurrent_dropout=0.10, -return_sequences=true)) model.add(dense(64*2, activation='relu')) model.add(lstm(128, dropout=0.10, recurrent_dropout=0.10, -return_sequences=true)) model.add(dense(64, activation='relu')) model.add(lstm(64, dropout=0.10, recurrent_dropout=0.10, return_sequences=true)) model.add(dense(32, activation='relu')) model.add(lstm(32, dropout=0.10, recurrent_dropout=0.10, return_sequences=true)) model.add(dense(16, activation='relu')) model.add(lstm(16, dropout=0.10, recurrent_dropout=0.10)) model.add(dense(1, activation='sigmoid')) we'll make use of the adam optimizer with a small learning rate. we'll compile the model specifying the loss, optimizer and metrics to optimize our model for. [ ]: optimzer=adam(learning_rate=1e-5*10) model. -compile(loss='binary_crossentropy',optimizer=optimzer,metrics=['accuracy']) we split our data back into train and test datasets. the frst 5000 is our training data the rest is test. [32]: train=tweet_pad[:5000] test=tweet_pad[5000:] 7 we'll perform a train-validation split to obtain validation data. [33]: x_train,x_test,y_train,y_test=train_test_split(train,df_tmp['label']. -values,test_size=0.15) we can now start training our model specifying the batch size, epochs and validation datasets. [34]: history=model. -fit(x_train,y_train,batch_size=4*16,epochs=1,validation_data=(x_test,y_test),verbose=2) train on 4250 samples, validate on 750 samples epoch 1/1 - 11s - loss: 0.6914 - accuracy: 0.5214 - val_loss: 0.6810 - val_accuracy: 0.6293 we perform predictions using our trained model. as the predictions are not strictly 1's and 0's we'll just simply round them to the nearest integer. [35]: y_pre=model.predict(test) test_df['label'] = np.round(y_pre).astype(int) we'll need to do a mapping of 0's and 1's to 'not_sarcasm' and 'sarcasm' [36]: def sarcasm_reverse_mapping(input): if input == 1: return 'sarcasm' else: return 'not_sarcasm' test_df['label'] = test_df['label'].apply(sarcasm_reverse_mapping) we convert our predictions into a csv fle with the right format with the following. [37]: #test_df[['id','label']].to_csv('answer.txt', index=false, header=none) 2 modelling using bert, retraining the entire bert architecture to the data. we'll use the offcial tokenization script from tensorfow. you can download the tokenization.py by using wget or downloading it manually. [38]: !wget --quiet https://raw.githubusercontent.com/tensorflow/models/master/ -official/nlp/bert/tokenization.py system_wgetrc = c:/progra~1/wget/etc/wgetrc syswgetrc = c:\program files (x86)\gnuwin32/etc/wgetrc we'll import the necessary libraries needed for this section. 8 [39]: import tensorflow as tf from tensorflow.keras.layers import dense, input from tensorflow.keras.optimizers import adam from tensorflow.keras.models import model from tensorflow.keras.callbacks import modelcheckpoint import tensorflow_hub as hub import tokenization we'll need to encode the input texts to bert's input format. for each row of the training data, we frst tokenize the text using nltk tokenizer before proceeding to convert the obtained tokens into ids. [40]: def bert_encode(texts, tokenizer, max_len=512): all_tokens = [] all_masks = [] all_segments = [] for text in texts: text = tokenizer.tokenize(text) text = text[:max_len-2] input_sequence = [""[cls]""] + text + [""[sep]""] pad_len = max_len - len(input_sequence) tokens = tokenizer.convert_tokens_to_ids(input_sequence) tokens += [0] * pad_len pad_masks = [1] * len(input_sequence) + [0] * pad_len segment_ids = [0] * max_len all_tokens.append(tokens) all_masks.append(pad_masks) all_segments.append(segment_ids) return np.array(all_tokens), np.array(all_masks), np.array(all_segments) we'll create the bert layer specifying the inputs and creation of the bert layer using the inputs to obtain the output sequence. since we are re-training the entire bert architecture to the dataset, we'll just add a sigmoid dense layer to perform classifcation. we specify the bert model and the adam optimizer, optimization loss and accuracy metrics. [41]: def build_model(bert_layer, max_len=512): input_word_ids = input(shape=(max_len,), dtype=tf.int32, -name=""input_word_ids"") input_mask = input(shape=(max_len,), dtype=tf.int32, name=""input_mask"") segment_ids = input(shape=(max_len,), dtype=tf.int32, name=""segment_ids"") _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids]) 9 clf_output = sequence_output[:, 0, :] # without dropout out = dense(1, activation='sigmoid')(clf_output) model = model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out) model.compile(adam(lr=learning_rate), loss='binary_crossentropy', -metrics=['accuracy']) return model we load bert from tensorflow hub. tensorflow hub provides pre-trained models for us to use and we load the model using tensorflow hub module. [42]: module_url = ""https://tfhub.dev/tensorflow/bert_en_uncased_l-24_h-1024_a-16/1"" bert_layer = hub.keraslayer(module_url, trainable=true) we'll need to load the tokenizer from the bert layer. [43]: vocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy() do_lower_case = bert_layer.resolved_object.do_lower_case.numpy() tokenizer = tokenization.fulltokenizer(vocab_file, do_lower_case) next, we process the text into bert required formats such as tokens, masks and segment fags. [44]: train_input = bert_encode(df_tmp_bert.response.values, tokenizer, max_len=160) test_input = bert_encode(test_df_tmp_bert.response.values, tokenizer, -max_len=160) train_labels = df_tmp_bert.label.values this are the parameters we'll need for our bert model. due to limited processing capacity, there aint much room for me to play with. [45]: max_length = 42 dropout_num = 0 learning_rate = 6e-6 valid = 0.15 epochs_num = 5 batch_size_num = 4 ids_error_corrected = true we build our bert model and note that we have 335 million traininable parameters. [46]: model_bert = build_model(bert_layer, max_len=160) model_bert.summary() model: ""model"" ________________________________________________________________________________ 10 __________________ layer (type) output shape param # connected to ================================================================================ ================== input_word_ids (inputlayer) [(none, 160)] 0 ________________________________________________________________________________ __________________ input_mask (inputlayer) [(none, 160)] 0 ________________________________________________________________________________ __________________ segment_ids (inputlayer) [(none, 160)] 0 ________________________________________________________________________________ __________________ keras_layer (keraslayer) [(none, 1024), (none 335141889 input_word_ids[0][0] input_mask[0][0] segment_ids[0][0] ________________________________________________________________________________ __________________ tf_op_layer_strided_slice (tens [(none, 1024)] 0 keras_layer[0][1] ________________________________________________________________________________ __________________ dense (dense) (none, 1) 1025 tf_op_layer_strided_slice[0][0] ================================================================================ ================== total params: 335,142,914 trainable params: 335,142,913 non-trainable params: 1 ________________________________________________________________________________ __________________ we'll train the bert model, serializing the best model to a fle for later predictions. finally, we get to train our bert model. [47]: checkpoint = modelcheckpoint('model_bert.h5', monitor='val_loss', -save_best_only=true) train_history = model_bert.fit( train_input, train_labels, validation_split = valid, epochs = epochs_num, callbacks=[checkpoint], batch_size = batch_size_num ) train on 4250 samples, validate on 750 samples 11 epoch 1/5 4250/4250 [==============================] - 303s 71ms/sample - loss: 0.5174 - accuracy: 0.7588 - val_loss: 0.5598 - val_accuracy: 0.6080 epoch 2/5 4250/4250 [==============================] - 278s 65ms/sample - loss: 0.4388 - accuracy: 0.8024 - val_loss: 0.4221 - val_accuracy: 0.7653 epoch 3/5 4250/4250 [==============================] - 265s 62ms/sample - loss: 0.3094 - accuracy: 0.8727 - val_loss: 1.3605 - val_accuracy: 0.4267 epoch 4/5 4250/4250 [==============================] - 265s 62ms/sample - loss: 0.1140 - accuracy: 0.9614 - val_loss: 2.7396 - val_accuracy: 0.3747 epoch 5/5 4250/4250 [==============================] - 265s 62ms/sample - loss: 0.0422 - accuracy: 0.9861 - val_loss: 2.8826 - val_accuracy: 0.4853 we perform predictions by loading weights from the fle we serialized the model earlier. [48]: model_bert.load_weights('model_bert.h5') test_pred_bert = model_bert.predict(test_input) test_pred_bert_int = test_pred_bert.round().astype('int') we'll need to perform a mapping of the 1's and 0's back to 'sarcasm' and 'not_sarcasm' for submission. [49]: test_df['label'] = test_pred_bert_int def sarcasm_reverse_mapping(input): if input == 1: return 'sarcasm' else: return 'not_sarcasm' test_df['label'] = test_df['label'].apply(sarcasm_reverse_mapping) we generate the 'answer.txt' in the format required for submission. [ ]: #test_df[['id','label']].to_csv('answer.txt', index=false, header=none) 12 course project progress report chua yeow long, ylchua2@illinois.edu text classification competition introduction for the text classification competition on sarcasm detection, i'll utilise transfer learning using embeddings such as glove and bert which are both major milestones in modern nlp rather than training a machine learning model from scratch. glove embeddings is one of the first applications of transfer learning in nlp and with the introduction of bert by google in 2018, it addresses the shortcomings of lstms and other modern nlp techniques and also more recently with huge models such as xlm and gpt-2 achieved state-of-the-art performance. methodology & results i'll first preprocess the text data by removing stop-words and non-alphabetic characters such as symbols before feeding the data into 3 different models. the first is to use an glove embedding and adding some lstm and dropout layers and start training the model. a 85% train and 15% validation split is performed to obtain the validation data. for the input text data, i have tried with and without context and only for the bert case the f1-score is pretty significant. i have tried different lstm layers and nodes as well as dropout layers and the best f1-score i have obtained is around 0.661. the second method is to use bert and re-train the entire bert layers using the dataset on a pretty beefy machine. the best f1-score i have obtained is 0.7378 with context information and 0.716 without context. the baseline f1-score is 0.723 and the top f1-score is by awe with 0.7653. future-works i'll try and see if i can get a better score by exploring two different approaches: feature engineering and/or gpt-2/xlm transfer learning based methods when there is time to spare. i have included the references for bert as well as gpt-2 in the references section below. references language models are unsupervised multitask learners alec radford, jeffrey wu, rewon child, david luan, dario amodei, iiya sutskever attention is all you need ashish vaswani, noam shazeer, niki parmar, jakob uszkoreit, llion jones, aidan n. gomez, lukasz kaiser, illia polosukhin description f1-score glove embedding with lstm layers without context 0.661 glove embedding with lstm layers 0.661 bert without context 0.716 bert 0.7378 project proposal in your project proposal, please answer the following questions: what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. chua yeow long, ylchua2@illinois.edu which competition do you plan to join? text classification competition if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? yes, i'm prepared to learn state-of-the-art neural network classifiers. name some neural classifiers and deep learning frameworks that you may have heard of. deep learning frameworks such as pytorch and tensorflow. artificial neural networks(ann), lstms, cnn, rnn, transformers, transfer learning describe any relevant prior experience with such methods built machine learning models using sklearn libraries xgboost, svm to perform classification not limited to nlp built deep learning neural networks using keras/tensorflow and pytorch text pre-processing using spacy and nltk transfer learning using simplerepresentations or huggingface which programming language do you plan to use? python text classification competition: sarcasm detection ylchua2@illinois.edu project proposal - proposal_ylchua2.pdf project progress report - progress_report.pdf project code - notebook.ipynb (working copy), notebook_final.ipynb (notebook with outputs kept), notebook_final.pdf (pdf version), answer_1p0_0p7378 (predictions that achieved 100% accuracy and f1-score of 0.7378), glove.6b.200d.txt(https://www.kaggle.com/rtatman/glove-global-vectors-for-word-representation) documentation - final_report.pdf (simple writeup of the final project, installation, overall plan) presentation - https://youtu.be/de7jiio5qam"	['text', 'classification', 'competition', 'sarcasm', 'detection', 'final', 'report', 'chua', 'yeow', 'long', 'ylchuaillinoisedu', 'introduction', 'required', 'perform', 'detectionclassification', 'twitter', 'tweets', 'dataset', 'consists', 'response', 'tweet', 'classified', 'context', 'conversation', 'label', 'well', 'id', 'identification', 'making', 'submissions', 'goal', 'predict', 'optionally', 'using', 'ie', 'immediate', 'full', 'size', 'training', 'testing', 'transfer', 'learning', 'models', 'need', 'used', 'instead', 'building', 'neural', 'network', 'scratch', 'installation', 'libraries', 'ill', 'use', 'jupyter', 'notebooks', 'illustrate', 'workflow', 'nltk', 'preprocessing', 'kerastensorflow', 'build', 'networks', 'standard', 'sklearn', 'install', 'pip', 'conda', 'case', 'anaconda', 'overall', 'plan', 'first', 'preprocess', 'data', 'removing', 'stopwords', 'nltks', 'nonalphabetic', 'characters', 'symbols', 'feeding', 'different', 'simple', 'word', 'occurrencecount', 'model', 'work', 'predicted', 'notsarcasm', 'test', 'second', 'glove', 'embedding', 'adding', 'lstm', 'dropout', 'layers', 'newly', 'added', 'train', 'validation', 'split', 'performed', 'obtain', 'input', 'tried', 'without', 'much', 'difference', 'results', 'last', 'third', 'method', 'bert', 'retrain', 'entire', 'pretty', 'would', 'say', 'beefy', 'machine', 'best', 'fscore', 'obtained', 'information', 'significant', 'explored', 'additional', 'feature', 'engineering', 'gptxlm', 'given', 'time', 'constraints', 'able', 'better', 'tensorflowgpu', 'code', 'walkthrough', 'section', 'refer', 'accompanied', 'notebook', 'video', 'presentation', 'included', 'countvectorizer', 'snotsarcasm', 'together', 'baseline', 'conclusion', 'fun', 'journey', 'playing', 'stateoftheart', 'nlp', 'embeddings', 'although', 'surpass', 'believe', 'tinkering', 'achievable', 'description', 'notebook_fnal', 'december', 'classifcation', 'frst', 'try', 'count', 'sklearns', 'next', 'add', 'towards', 'end', 'provided', 'finally', 'fne', 'tune', 'fnetuning', 'hundreds', 'millions', 'parameters', 'import', 'necessary', 'pandas', 'pd', 'matplotlibpyplot', 'plt', 'seaborn', 'sns', 'numpy', 'np', 'nltkcorpus', 'nltkutil', 'ngrams', 'sklearnfeature_extractiontext', 'collections', 'defaultdict', 'counter', 'pltstyleuseggplot', 'stopsetstopwordswordsenglish', 'nltktokenize', 'word_tokenize', 'gensim', 'string', 'keraspreprocessingtext', 'tokenizer', 'keraspreprocessingsequence', 'pad_sequences', 'tqdm', 'kerasmodels', 'sequential', 'keraslayers', 'embeddinglstmdensespatialdropoutd', 'kerasinitializers', 'constant', 'sklearnmodel_selection', 'train_test_split', 'kerasoptimizers', 'adam', 'make', 'read_json', 'module', 'load', 'dataframe', 'df', 'pdread_jsondatatrainjsonl', 'linestrue', 'dfhead', 'user', 'dont', 'get', 'obviousl', 'trying', 'protest', 'talking', 'makes', 'insane', 'meanwhile', 'trump', 'wont', 'even', 'release', 'sure', 'antilincoln', 'crowd', 'minor', 'child', 'deserves', 'privacy', 'loser', 'hes', 'p', 'donald', 'j', 'guilty', 'charged', 'e', 'jamie', 'raskin', 'tanked', 'doug', 'collins', 'lo', 'man', 'gone', 'sides', 'apoca', 'datapreprocessing', 'bit', 'nonalphabets', 'def', 'refinewordss', 'letters_only', 'resubazaz', 'strs', 'words', 'letters_onlylowersplit', 'stops', 'setstopwordswordsenglish', 'meaningful_words', 'w', 'return', 'join', 'combine', 'suppose', 'extra', 'informationcontext', 'always', 'good', 'dfresponse', 'dfresponseapplyrefinewords', 'dfcontext', 'dfcontextapplyrefinewords', 'change', 'predictor', 'variable', 'non_sarcasm', 'feed', 'sarcasm_mappinginput', 'else', 'dflabel', 'dflabelapplysarcasm_mapping', 'initialize', 'vectorizer', 'countvectorizeranalyzer', 'none', 'preprocessor', 'stop_words', 'max_features', 'duplicated', 'copies', 'individual', 'df_tmp', 'dfcopy', 'df_tmp_bert', 'df_tmp_xlm', 'ensure', 'correct', 'format', 'analysis', 'vectorizerfit_transformdfresponsetoarray', 'vectorizerfit_transformdfcontexttoarray', 'modelling', 'sklearnensemble', 'randomforestclassifier', 'forest', 'randomforestclassifiern_estimators', 'features_forest', 'dfresponsecontextvalues', 'my_forest', 'forestfitfeatures_forest', 'check', 'distribution', 'target', 'see', 'indeed', 'perfectly', 'balanced', 'dflabelvalue_counts', 'name', 'dtype', 'int', 'set', 'similar', 'test_df', 'pdread_jsondatatestjsonl', 'test_dfhead', 'twitter_', 'year', 'old', 'fi', 'many', 'verifiable', 'lies', 'maybe', 'docs', 'scrub', 'cover', 'real', 'ha', 'irony', 'problematic', 'af', 'url', 'week', 'fake', 'news', 'said', 'let', 'aplaud', 'brett', 'women', 'generally', 'hate', 'president', 'whats', 'dear', 'media', 'remoaners', 'excitedly', 'sharing', 'simply', 'test_dfresponse', 'test_dfresponseapplyrefinewords', 'test_dfcontext', 'test_dfcontextapplyrefinewords', 'duplicate', 'test_df_tmp', 'test_dfcopy', 'test_df_tmp_bert', 'test_df_tmp_xlm', 'essentially', 'vectorizerfit_transformtest_dfresponsetoarray', 'vectorizerfit_transformtest_dfcontexttoarray', 'needs', 'form', 'array', 'features_forest_test', 'test_dfresponsecontextvalues', 'predictions', 'features', 'trained', 'my_prediction', 'my_forestpredictfeatures_forest_test', 'convert', 'to_csv', 'easily', 'output', 'right', 'test_dflabel', 'pddataframemy_prediction', 'value_count', 'worked', 'clearly', 'test_dflabelvalue_counts', 'test_dfdescribe', 'mean', 'std', 'min', 'max', 'done', 'column', 'back', 'nonsarcasm', 'sarcasm_reverse_mappinginput', 'not_sarcasm', 'test_dflabelapplysarcasm_reverse_mapping', 'library', 'create', 'answertxt', 'test_dfidlabelto_csvanswertxt', 'indexfalse', 'headernone', 'corpus', 'tokenize', 'create_corpusdf', 'tqdmdfresponse', 'wordswordlower', 'word_tokenizetweet', 'ifword', 'isalpha', 'stop', 'corpusappendwords', 'concatcombine', 'datasets', 'df_tmpresponse', 'df_tmpresponseastypestring', 'test_df_tmpresponse', 'test_df_tmpresponseastypestring', 'df_new', 'df_tmpappendtest_df_tmp', 'corpuscreate_corpusdf_new', 'download', 'ensuring', 'formats', 'embedding_dict', 'opendataglovebdtxtr', 'encodingutf', 'f', 'line', 'valueslinesplit', 'wordvalues', 'vectorsnpasarrayvaluesfloat', 'embedding_dictwordvectors', 'fclose', 'start', 'initializing', 'keras', 'earlier', 'truncating', 'padding', 'sequences', 'length', 'max_len', 'tokenizer_objtokenizer', 'tokenizer_objfit_on_textscorpus', 'sequencestokenizer_objtexts_to_sequencescorpus', 'tweet_padpad_sequencessequencesmaxlenmax_lentruncatingpostpaddingpost', 'number', 'word_index', 'later', 'word_indextokenizer_objword_index', 'matrix', 'layer', 'num_wordslenword_index', 'embedding_matrixnpzerosnum_words', 'wordi', 'tqdmword_indexitems', 'num_words', 'continue', 'emb_vecembedding_dictgetword', 'emb_vec', 'embedding_matrixiemb_vec', 'sequentially', 'decreasing', 'nodes', 'reduce', 'overftting', 'modelsequential', 'embeddingembeddingnum_wordsembeddings_initializerconstantembedding_matrix', 'input_lengthmax_lentrainablefalse', 'modeladdembedding', 'modeladdspatialdropoutd', 'modeladdlstm', 'recurrent_dropout', 'return_sequencestrue', 'modeladddense', 'activationrelu', 'activationsigmoid', 'optimizer', 'small', 'rate', 'compile', 'specifying', 'loss', 'metrics', 'optimize', 'optimzeradamlearning_ratee', 'compilelossbinary_crossentropyoptimizeroptimzermetricsaccuracy', 'rest', 'traintweet_pad', 'testtweet_pad', 'trainvalidation', 'x_trainx_testy_trainy_testtrain_test_splittraindf_tmplabel', 'valuestest_size', 'batch', 'epochs', 'historymodel', 'fitx_trainy_trainbatch_sizeepochsvalidation_datax_testy_testverbose', 'samples', 'validate', 'epoch', 'accuracy', 'val_loss', 'val_accuracy', 'strictly', 'round', 'nearest', 'integer', 'y_premodelpredicttest', 'nproundy_preastypeint', 'mapping', 'csv', 'fle', 'following', 'retraining', 'architecture', 'offcial', 'tokenization', 'script', 'tensorfow', 'tokenizationpy', 'wget', 'downloading', 'manually', 'quiet', 'httpsrawgithubusercontentcomtensorflowmodelsmaster', 'officialnlpberttokenizationpy', 'system_wgetrc', 'cprograwgetetcwgetrc', 'syswgetrc', 'cprogram', 'files', 'xgnuwinetcwgetrc', 'needed', 'tensorflow', 'tf', 'tensorflowkeraslayers', 'dense', 'tensorflowkerasoptimizers', 'tensorflowkerasmodels', 'tensorflowkerascallbacks', 'modelcheckpoint', 'tensorflow_hub', 'hub', 'encode', 'texts', 'berts', 'row', 'proceeding', 'tokens', 'ids', 'bert_encodetexts', 'all_tokens', 'all_masks', 'all_segments', 'tokenizertokenizetext', 'textmax_len', 'input_sequence', 'cls', 'sep', 'pad_len', 'leninput_sequence', 'tokenizerconvert_tokens_to_idsinput_sequence', 'pad_masks', 'segment_ids', 'all_tokensappendtokens', 'all_masksappendpad_masks', 'all_segmentsappendsegment_ids', 'nparrayall_tokens', 'nparrayall_masks', 'nparrayall_segments', 'inputs', 'creation', 'sequence', 'since', 'sigmoid', 'specify', 'optimization', 'build_modelbert_layer', 'input_word_ids', 'inputshapemax_len', 'dtypetfint', 'nameinput_word_ids', 'input_mask', 'nameinput_mask', 'namesegment_ids', '_', 'sequence_output', 'bert_layerinput_word_ids', 'clf_output', 'activationsigmoidclf_output', 'modelinputsinput_word_ids', 'outputsout', 'modelcompileadamlrlearning_rate', 'lossbinary_crossentropy', 'metricsaccuracy', 'provides', 'pretrained', 'us', 'module_url', 'httpstfhubdevtensorflowbert_en_uncased_l_h_a', 'bert_layer', 'hubkeraslayermodule_url', 'trainabletrue', 'vocab_file', 'bert_layerresolved_objectvocab_fileasset_pathnumpy', 'do_lower_case', 'bert_layerresolved_objectdo_lower_casenumpy', 'tokenizationfulltokenizervocab_file', 'process', 'masks', 'segment', 'fags', 'train_input', 'bert_encodedf_tmp_bertresponsevalues', 'test_input', 'bert_encodetest_df_tmp_bertresponsevalues', 'train_labels', 'df_tmp_bertlabelvalues', 'due', 'limited', 'processing', 'capacity', 'aint', 'room', 'play', 'max_length', 'dropout_num', 'learning_rate', 'valid', 'epochs_num', 'batch_size_num', 'ids_error_corrected', 'true', 'note', 'million', 'traininable', 'model_bert', 'model_bertsummary', '________________________________________________________________________________', '__________________', 'type', 'shape', 'param', 'connected', 'inputlayer', 'keras_layer', 'keraslayer', 'tf_op_layer_strided_slice', 'tens', 'total', 'params', 'trainable', 'nontrainable', 'serializing', 'checkpoint', 'modelcheckpointmodel_berth', 'monitorval_loss', 'save_best_onlytrue', 'train_history', 'model_bertfit', 'validation_split', 'callbackscheckpoint', 'batch_size', 'mssample', 'loading', 'weights', 'serialized', 'model_bertload_weightsmodel_berth', 'test_pred_bert', 'model_bertpredicttest_input', 'test_pred_bert_int', 'test_pred_bertroundastypeint', 'submission', 'generate', 'course', 'project', 'progress', 'utilise', 'major', 'milestones', 'modern', 'rather', 'one', 'applications', 'google', 'addresses', 'shortcomings', 'lstms', 'techniques', 'also', 'recently', 'huge', 'xlm', 'gpt', 'achieved', 'performance', 'methodology', 'around', 'top', 'awe', 'futureworks', 'score', 'exploring', 'two', 'approaches', 'andor', 'based', 'methods', 'spare', 'references', 'language', 'unsupervised', 'multitask', 'learners', 'alec', 'radford', 'jeffrey', 'wu', 'rewon', 'david', 'luan', 'dario', 'amodei', 'iiya', 'sutskever', 'attention', 'ashish', 'vaswani', 'noam', 'shazeer', 'niki', 'parmar', 'jakob', 'uszkoreit', 'llion', 'jones', 'aidan', 'n', 'gomez', 'lukasz', 'kaiser', 'illia', 'polosukhin', 'proposal', 'please', 'answer', 'questions', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'choose', 'prepared', 'learn', 'classifiers', 'yes', 'im', 'deep', 'frameworks', 'may', 'heard', 'pytorch', 'artificial', 'networksann', 'cnn', 'rnn', 'transformers', 'describe', 'relevant', 'prior', 'experience', 'built', 'xgboost', 'svm', 'spacy', 'simplerepresentations', 'huggingface', 'programming', 'python', 'proposal_ylchuapdf', 'progress_reportpdf', 'notebookipynb', 'working', 'copy', 'notebook_finalipynb', 'outputs', 'kept', 'notebook_finalpdf', 'pdf', 'version', 'answer_p_p', 'glovebdtxthttpswwwkagglecomrtatmangloveglobalvectorsforwordrepresentation', 'documentation', 'final_reportpdf', 'writeup', 'httpsyoutubedejiioqam']
https://github.com/j5un/CourseProject	"documentation: bert fine-tuning for twitter sarcasm detection name: junzhe sun netid: junzhes2 team: junzhe sun (individual) competition: text classification competition overview this project aims to detect sarcasm from twitter posts. this is a text classification task related to sentiment analysis. the training data set includes text-label pairs, therefore constituting a supervised machine learning problem. i experimented with two different methods, including fasttext and bert. i found bert with fine-tuning to have the better performance, which achieved a higher f1 score than the baseline. the code is implemented in python under the google colab environment. two jupyter notebooks are available, one using fasttext and the other using bert in pytorch. both notebooks are self-contained, in that data loading, data cleaning/processing, training and prediction are available in each notebook. the input to both notebooks are a training data set with text-label pairs, and a test data set without labels for prediction. the notebook outputs predicted labels after training the respective neural network using the input data. they can be used for general text classification tasks beyond the binary classification task in this project. implementation details model two models were tested for the text classification competition. i first tried fasttext, a shallow-learning library that can be used for both word embedding and text classification. fasttext is a close sibling to word2vec, and was introduced by bojanowski et al. (2017) from facebook ai research. fasttext is a method that aims to extend word vectors to capture subword information using character n-grams, instead of representing each word in the vocabulary as distinct vectors. this concept can be extended to the bag of word (bow) representation of texts using latent vectors of words and word n-grams, which leads to a simple yet efficient baseline method for text classification (joulin et al., 2016). the second model is a transformer network known as bert, which stands for bidirectional encoder representations from transformers and is introduced by devlin et al. (2018) from google ai language. the transformers is a type of deep neural network that's based on attention mechanism (vaswani et al., 2017), and has recently gained a lot of popularity in the nlp community. the bert model is designed to pre-train deep bidirectional representations of language models using unlabeled text. bidirectional training means that representations are trained by jointly conditioning on both left and right context in all layers of the deep network. consequently, a pre-trained bert model, available from a variety of sources, can be very conveniently obtained and fine-tuned with just one additional output layer for a wide range of tasks, such as text classification. the transformers library from hugging face provides a wide selection of pre-trained, general-purpose architectures for nlp tasks, including bert. in particular, they provide the bertforsequenceclassificaiton model which attaches a pooling layer and a linear layer after the bert network. it can be used for the twitter sarcasm detection task. training data loading and data cleaning are performed using pandas. consecutive spaces were replaced by a single whitespace, and leading and trailing spaces were removed. some special characters, such as ""@user"", were removed, while emoji's were kept as they capture emotions. emoji needs to be converted to known tokens for the network, and the emoji library provides a convenient function to do so. for example, emoji.demojize('')returns ':thinking_face:'. cases were also kept because in my tests they tend to improve the f1 score (for both models). punctuations are treated differently depending on the model. they were removed in the case of fasttext, while for bert, they were kept since bert has embedding for most of the punctuations. the data cleaning steps are the same for both the training and test data sets. the training data (after data cleaning) is first shuffled randomly in order to mix sarcasm and not_sarcasm entries. then a total of 5000 examples in the training data are split into a training set of 4500 examples and a validation set of 500 examples (10% split). the validation set is used for periodically evaluating the current model for tuning the model's hyperparameters and preventing overfitting. a minor challenge is that, since the training data set is not very big, splitting it into training and validation sets can be tricky. my solution is to first use the validation to find the optimal hyper parameters, and then retrain the model using the entire training set. for fasttext, the most important hyperparameters include learning rate, number of epochs and wordngrams. for bert, some of the hyperparameters include learning rate, number of epochs, drop out rate and maximum length of text that can be handled by the tokenizer. result and deliverables for fasttext using the tri-gram model, it is unable to beat the baseline, having an f1 score of 0.6642. bert with fine tuning is able to reach an f1 score of 0.7362 within a few rounds to hyperparameter tuning. all model parameters allowed to be updated during the training process. i found four epochs is enough for the fine turning, while running more epochs tends to overfit the training data set and leads to a lower f1 score on the test data set. the code/deliverables include two jupyter notebooks. more detailed comments are available in the notebooks about the specific functions of each cell. * 01_fasttext4twitter.ipynb: this notebook contains implementation using the fasttext library. the data loading and data cleaning steps use pandas. the preprocessed training data set is written to disk in a format that's compatible with fasttext. training and prediction follows the steps of the text classification example in fasttext's documentation ([5]), and only involves a few lines of code. to obtain additional metrics, the scikit-learn library is used to compute precision, recall and f1 score. finally, both the trained model and the predicted labels are written to disk. * 02_bert4twitter_pytorch.ipynb: this notebook contains implementation using pytorch and the transformers library from hugging face. pre-trained bertforsequenceclassification and berttokenizer is downloaded from hugging face, and additional fine tuning of bert network weights is performed using the training data. similar to fasttext, data is preprocessed using pandas. to convert from pandas data frame to pytorch compatible data format, the datasets library from hugging face is used. to obtain additional metrics, the scikit-learn library is used to compute precision, recall and f1 score. hugging face also provides a simple but feature-complete trainer class for training/fine-tuning the network ([6]). trained model is then set to evaluation mode, and test data is transferred to gpu for prediction. finally, both the trained model and the predicted labels are written to disk. usage of software this project is implemented using google colab. therefore, the most convenient way to reproduce and verify the results is through google colab and using a gpu runtime environment. google colab provides a free nvidia tesla t4 gpu for 12 hours for continuous usage for free. open the jupyter notebooks in google colab, map the correct google drive that contains the data and trained model, then modify the ""filepath"" variable to reflect the correct path. the notebook can be executed block by block, or select run all under runtime. for 01_fasttext4twitter.ipynb, since the training is so efficient, there is no need to load the trained model. on the other hand, for 02_bert4twitter_pytorch.ipynb, the deep neural network can take a while to train. if one would like to avoid re-training the model, skip the training block and execute the demo part instead (but don't skip the data loading blocks). team contribution this is a one-person team. tutorial a software tutorial presentation is uploaded to a box drive accessible with the link: https://uofi.box.com/s/wedyjqpel0rw2uxprax10mh2rnwxhu7t note that although the tutorial is 15 mins long, the review can feel free to watch only the first 10 mins, which is about the bert approach. the last 5 mins talks about fasttext, which is optional to watch. finally, to avoid re-training the bert model, a trained model is available with the link: https://uofi.box.com/s/t64lnt83ck2m3khtrk4s3r46fjhd5gsk references [1] bojanowski, p., grave, e., joulin, a., & mikolov, t. (2017). enriching word vectors with subword information. transactions of the association for computational linguistics, 5, 135-146. [2] devlin, j., chang, m. w., lee, k., & toutanova, k. (2018). bert: pre-training of deep bidirectional transformers for language understanding. arxiv preprint arxiv:1810.04805. [3] joulin, a., grave, e., bojanowski, p., & mikolov, t. (2016). bag of tricks for efficient text classification. arxiv preprint arxiv:1607.01759. [4] vaswani, a., shazeer, n., parmar, n., uszkoreit, j., jones, l., gomez, a. n., kaiser, l., & polosukhin, i. (2017). attention is all you need. advances in neural information processing systems, 30, 5998-6008. [5] https://fasttext.cc/docs/en/supervised-tutorial.html [6] https://huggingface.co/transformers/training.html [7] https://medium.com/atheros/text-classification-with-transformers-in-tensorflow-2-bert-2f4f16eff5ad [8] https://curiousily.com/posts/sentiment-analysis-with-bert-and-hugging-face-using-pytorch-and-python/ final project progress report - text classification competition name: junzhe sun netid: junzhes2 captain: junzhe sun (individual) competition: text classification competition progress: for the text classification competition, i looked at a few different options and decided to use a pre-trained bert model with fine tuning. 1) which tasks have been completed? a: i looked at different shallow/deep learning methods, including fasttext, lstm and transformer neural networks. i first trained a fasttext model, a shallow neural network, using the training data set, but wasn't able to beat the baseline. then i used a pre-trained bert model from huggingface using pytorch and fine tuned it using the training data set. the prediction using the bert model was able to beat the baseline. 2) which tasks are pending? a: (1) further fine-tuning the bert model to improve f1 score. (2) source code documentation. (3) software code submission with documentation/report. (4) record software usage tutorial presentation. 3) are you facing any challenges? a: no big challenge remains. a minor challenge is that, since the training data set is not very big, splitting it into training and validation sets can be tricky. in addition, i will probably need a more automated and systematic way for hyperparameter tuning (train-test split, number of epochs, rate for drop-out layer, etc.). final project proposal - text classification competition name: junzhe sun netid: junzhes2 captain: junzhe sun (individual) competition: text classification competition method: i have learned about deep neural networks on the coursera platform before (deep learning specialization). i understand the theory behind cnns and rnns (e.g. lstm and gru). i am interested in learning more about transformer networks such as bert as well as cnns for natural language processing (nlp). i have used tensorflow before in course projects, and i know about pytorch from reading publications. programming language: python. in particular, i will be using pandas and tensorflow 2. cs410 text information systems course project author: name: junzhe sun team: individual netid: junzhes2 content: ./documentation.pdf: software documentation ./notebooks: jupyter notebooks for twitter sarcasm detection ./data: training and test data ./proposal.pdf: project proposal ./progressreport: project progress report tutorial: link to software tutorial note that although the tutorial is 15 mins long, the review can feel free to watch only the first 10 mins, which is about the bert approach. the last 5 mins talks about fasttext, which is optional to watch."	['documentation', 'bert', 'finetuning', 'twitter', 'sarcasm', 'detection', 'name', 'junzhe', 'sun', 'netid', 'junzhes', 'team', 'individual', 'competition', 'text', 'classification', 'overview', 'project', 'aims', 'detect', 'posts', 'task', 'related', 'sentiment', 'analysis', 'training', 'data', 'set', 'includes', 'textlabel', 'pairs', 'therefore', 'constituting', 'supervised', 'machine', 'learning', 'problem', 'experimented', 'two', 'different', 'methods', 'including', 'fasttext', 'found', 'better', 'performance', 'achieved', 'higher', 'f', 'score', 'baseline', 'code', 'implemented', 'python', 'google', 'colab', 'environment', 'jupyter', 'notebooks', 'available', 'one', 'using', 'pytorch', 'selfcontained', 'loading', 'cleaningprocessing', 'prediction', 'notebook', 'input', 'test', 'without', 'labels', 'outputs', 'predicted', 'respective', 'neural', 'network', 'used', 'general', 'tasks', 'beyond', 'binary', 'implementation', 'details', 'model', 'models', 'tested', 'first', 'tried', 'shallowlearning', 'library', 'word', 'embedding', 'close', 'sibling', 'wordvec', 'introduced', 'bojanowski', 'et', 'al', 'facebook', 'ai', 'research', 'method', 'extend', 'vectors', 'capture', 'subword', 'information', 'character', 'ngrams', 'instead', 'representing', 'vocabulary', 'distinct', 'concept', 'extended', 'bag', 'bow', 'representation', 'texts', 'latent', 'words', 'leads', 'simple', 'yet', 'efficient', 'joulin', 'second', 'transformer', 'known', 'stands', 'bidirectional', 'encoder', 'representations', 'transformers', 'devlin', 'language', 'type', 'deep', 'thats', 'based', 'attention', 'mechanism', 'vaswani', 'recently', 'gained', 'lot', 'popularity', 'nlp', 'community', 'designed', 'pretrain', 'unlabeled', 'means', 'trained', 'jointly', 'conditioning', 'left', 'right', 'context', 'layers', 'consequently', 'pretrained', 'variety', 'sources', 'conveniently', 'obtained', 'finetuned', 'additional', 'output', 'layer', 'wide', 'range', 'hugging', 'face', 'provides', 'selection', 'generalpurpose', 'architectures', 'particular', 'provide', 'bertforsequenceclassificaiton', 'attaches', 'pooling', 'linear', 'cleaning', 'performed', 'pandas', 'consecutive', 'spaces', 'replaced', 'single', 'whitespace', 'leading', 'trailing', 'removed', 'special', 'characters', 'user', 'emojis', 'kept', 'emotions', 'emoji', 'needs', 'converted', 'tokens', 'convenient', 'function', 'example', 'emojidemojizereturns', 'thinking_face', 'cases', 'also', 'tests', 'tend', 'improve', 'punctuations', 'treated', 'differently', 'depending', 'case', 'since', 'steps', 'sets', 'shuffled', 'randomly', 'order', 'mix', 'not_sarcasm', 'entries', 'total', 'examples', 'split', 'validation', 'periodically', 'evaluating', 'current', 'tuning', 'hyperparameters', 'preventing', 'overfitting', 'minor', 'challenge', 'big', 'splitting', 'tricky', 'solution', 'use', 'find', 'optimal', 'hyper', 'parameters', 'retrain', 'entire', 'important', 'include', 'rate', 'number', 'epochs', 'wordngrams', 'drop', 'maximum', 'length', 'handled', 'tokenizer', 'result', 'deliverables', 'trigram', 'unable', 'beat', 'fine', 'able', 'reach', 'within', 'rounds', 'hyperparameter', 'allowed', 'updated', 'process', 'four', 'enough', 'turning', 'running', 'tends', 'overfit', 'lower', 'codedeliverables', 'detailed', 'comments', 'specific', 'functions', 'cell', '_fasttexttwitteripynb', 'contains', 'preprocessed', 'written', 'disk', 'format', 'compatible', 'follows', 'fasttexts', 'involves', 'lines', 'obtain', 'metrics', 'scikitlearn', 'compute', 'precision', 'recall', 'finally', '_berttwitter_pytorchipynb', 'bertforsequenceclassification', 'berttokenizer', 'downloaded', 'weights', 'similar', 'convert', 'frame', 'datasets', 'featurecomplete', 'trainer', 'class', 'trainingfinetuning', 'evaluation', 'mode', 'transferred', 'gpu', 'usage', 'software', 'way', 'reproduce', 'verify', 'results', 'runtime', 'free', 'nvidia', 'tesla', 'hours', 'continuous', 'open', 'map', 'correct', 'drive', 'modify', 'filepath', 'variable', 'reflect', 'path', 'executed', 'block', 'select', 'run', 'need', 'load', 'hand', 'take', 'train', 'would', 'like', 'avoid', 'retraining', 'skip', 'execute', 'demo', 'part', 'dont', 'blocks', 'contribution', 'oneperson', 'tutorial', 'presentation', 'uploaded', 'box', 'accessible', 'link', 'httpsuofiboxcomswedyjqpelrwuxpraxmhrnwxhut', 'note', 'although', 'mins', 'long', 'review', 'feel', 'watch', 'approach', 'last', 'talks', 'optional', 'httpsuofiboxcomstlntckmkhtrksrfjhdgsk', 'references', 'p', 'grave', 'e', 'mikolov', 'enriching', 'transactions', 'association', 'computational', 'linguistics', 'j', 'chang', 'w', 'lee', 'k', 'toutanova', 'pretraining', 'understanding', 'arxiv', 'preprint', 'tricks', 'shazeer', 'n', 'parmar', 'uszkoreit', 'jones', 'l', 'gomez', 'kaiser', 'polosukhin', 'advances', 'processing', 'systems', 'httpsfasttextccdocsensupervisedtutorialhtml', 'httpshuggingfacecotransformerstraininghtml', 'httpsmediumcomatherostextclassificationwithtransformersintensorflowbertffeffad', 'httpscuriousilycompostssentimentanalysiswithbertandhuggingfaceusingpytorchandpython', 'final', 'progress', 'report', 'captain', 'looked', 'options', 'decided', 'completed', 'shallowdeep', 'lstm', 'networks', 'shallow', 'wasnt', 'huggingface', 'tuned', 'pending', 'source', 'submission', 'documentationreport', 'record', 'facing', 'challenges', 'remains', 'addition', 'probably', 'automated', 'systematic', 'traintest', 'dropout', 'etc', 'proposal', 'learned', 'coursera', 'platform', 'specialization', 'understand', 'theory', 'behind', 'cnns', 'rnns', 'eg', 'gru', 'interested', 'well', 'natural', 'tensorflow', 'course', 'projects', 'know', 'reading', 'publications', 'programming', 'cs', 'author', 'content', 'documentationpdf', 'proposalpdf', 'progressreport']
https://github.com/jacobvp2/CourseProject	"see discussions, stats, and author profiles for this publication at: https://www.researchgate.net/publication/221653786 a cross-collection mixture model for comparative text mining conference paper * january 2004 doi: 10.1145/1014052.1014150 * source: dblp citations 247 reads 208 3 authors, including: some of the authors of this publication are also working on these related projects: health news quality view project atulya velivelli 15 publications 370 citations see profile bei yu syracuse university 40 publications 1,103 citations see profile all content following this page was uploaded by bei yu on 31 july 2016. the user has requested enhancement of the downloaded file. a cross-collection mixture model for comparative text mining chengxiang zhai department of computer science university of illinois at urbana champaign atulya velivelli department of electrical and computer engineering university of illinois at urbana champaign bei yu graduate school of library and information science university of illinois at urbana champaign abstract in this paper, we define and study a novel text mining problem, which we refer to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent com- mon themes across all collections as well as summarize the similarity and differences of these collections along each com- mon theme. this general problem subsumes many interest- ing applications, including business intelligence and opinion summarization. we propose a generative probabilistic mix- ture model for comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the model can be estimated efficiently using the expectation-maximization (em) algo- rithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. categories and subject descriptors: h.3.3 [informa- tion search and retrieval]: text mining general terms: algorithms keywords: comparative text mining, mixture models, clus- tering 1. introduction text mining is concerned with extracting knowledge and patterns from text [5, 6]. while there has been much re- search in text mining, most existing research is focused on one single collection of text. the goals are often to extract basic semantic units such as named entities, to extract rela- tions between information units, or to extract topic themes. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. kdd'04, august 22-25, 2004, seattle, washington, usa. copyright 2004 acm 1-58113-888-1/04/0008 ...$5.00. in this paper, we study a novel problem of text mining re- ferred to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent common themes across all collections as well as summarize the similarity and differ- ences of these collections along each common theme. specif- ically, the task involves: (1) discovering the different com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. the need for comparative text mining exists in many different applica- tions, including business intelligence, summarizing reviews of similar products, and comparing different opinions about a common topic in general. in this paper, we study the ctm problem and propose a generative probabilistic mixture model for ctm. the model simultaneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the mixture model is based on component multinomial distribution models, each characterizing a different theme. the common themes and collection-specific themes are explicitly modeled. the pro- posed model can be estimated efficiently using the expectation- maximization (em) algorithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. the rest of the paper is organized as follows. in section 2, we briefly introduce the problem of ctm. we then present a baseline simple mixture model and a new cross-collection mixture model in section 3 and section 4. we discuss the experiment results in section 5. 2. comparative text mining 2.1 a motivating example with the popularity of e-commerce, online customer eval- uations are becoming widely provided by online stores and third-party websites. pioneers like amazon.com and epin- ions.com have accumulated large amounts of customer input including reviews, comments, recommendations and advice, etc. for example, the number of reviews in epinions.com is more than one million[4]. given a product, there could be up to hundreds of reviews, which is impossible for the readers to go through. it is thus desirable to summarize a collection of reviews for a certain type of products in order to provide the readers the most salient feedbacks from the peers. for review summarization, the most important task is to identify different semantic aspects of a product that the reviewers mentioned and to group the opinions accord- ing to these aspects to show similarities and differences in the opinions. for example, suppose we have reviews of three different brands of laptops (dell, ibm, and apple), and we want to summarize the reviews. a useful summary would be a tab- ular representation of the opinions as shown in table 1, in which each row represents one aspect (subtopic) and differ- ent columns correspond to different opinions. table 1: a tabular summary subtopics dell ibm apple battery life long enough short short memory good bad good speed slow fast fast it is, of course, very difficult, if not impossible to pro- duce such a table completely automatically. however, we can achieve a less ambitious goal - identifying the semantic aspects and identifying the common and specific character- istics of each product in an unsupervised way. this is a concrete example of comparative text mining. 2.2 the general problem the example above is only one of the many possible appli- cations of comparative text mining. in general, the task of comparative text mining involves: (1) discovering the com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. it is very hard to precisely define what a theme is, but it corresponds roughly to a topic or subtopic. the granularity of themes is application-specific. ctm is a fundamental task in ex- ploratory text analysis. in addition to opinion comparison and summarization, it has many other applications, such as business intelligence (comparing different companies), cus- tomer relationship management (comparing different groups of customers), and semantic integration of text (comparing component text collections). ctm is challenging in several ways: (1) it is a completely unsupervised learning task; no training data is available. (it is for the same reason that ctm can be very useful for many different purposes - it makes minimum assumptions about the collections and in principle we can compare any arbitrary partition of text.) (2) we need to identify themes across different collections, which is more challenging than identifying topic themes in one single collection. (3) the task involves a discrimination component - for each discov- ered theme, we also want to identify the unique information specific to each collection. such a discrimination task is dif- ficult given that we do not have training data. in a way, ctm goes beyond the regular one-collection text mining by requiring an ""alignment"" of multiple collections based on common themes. since no training data is available, in general, we must rely on unsupervised learning methods, such as clustering, to perform ctm. in this paper, we study how to use prob- abilistic mixture models to perform ctm. below we first describe a simple mixture model for clustering, which repre- sents a straightforward application of an existing text min- ing method, and then present a more sophisticated mixture model specifically designed for ctm. 3. clustering with a simple mixture model   th  th  th "" $ % th ' th figure 1: the simple mixture model a naive solution to ctm is to treat the multiple collec- tions as one single collection and perform clustering. our hope is that some clusters would represent the common themes across the collections, while some others would rep- resent themes specific to one collection (see figure 1). we now present a simple multinomial mixture model for clus- tering an arbitrary collection of documents, in which we assume there are k latent common themes in all collections, and each is characterized by a multinomial word distribu- tion (also called a unigram language model). a document is regarded as a sample of a mixture model with these theme models as components. we fit such a mixture model to the union of all the text collections we have, and the obtained component multinomial models can be used to analyze the common themes and differences among the collections. formally, let c = {c1, c2, ..., cm} be m comparable col- lections of documents. let th1, ..., thk be k theme unigram language models and thb be the background model for all the collections. a document d is regarded as a sample of the following mixture model (based on word generation). pd(w) = lbp(w|thb) + (1 - lb) k j=1 [pd,jp(w|thj)] where w is a word, pd,j is a document-specific mixing weight for the j-th aspect theme, and k j=1 pd,j = 1. lb is the mix- ing weight of the background model thb. the log-likelihood of all the collections c is log p(c|l) = m i=1 dci wv [c(w, d) x log(lbp(w|thb) + (1 - lb) k j=1 (pd,jp(w|thj)))] where v is the set of all the words (i.e., vocabulary), c(w, d) is the count of word w in document d, and l = ({thj, pd,j}k j=1 is the set of all the theme model parameters. the purpose of using a background model is to ""force"" clustering to be done based on more discriminative words, leading to more informative and more discriminative component models. we control this effect through thb. the model can be estimated using any estimator. for example, the expectation-maximization (em) algorithm [3] can be used to compute a maximum likelihood estimate with the following updating formulas: p(zd,w = j) = p(n) d,j p(n)(w|thj) k j'=1 p(n) d,j'p(n)(w|thj') p(zd,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j p(n)(w|thj) p(n+1) d,j = wv c(w, d)p(zd,w = j) j' wv c(w, d)p(zd,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,w = b))p(zd,w = j) w'v m i=1 dci c(w', d)(1 - p(zd,w' = b))p(zd,w' = j) this mixture model is closely related to the probabilis- tic latent semantic indexing model (plsi) proposed in [7] and treats ctm as a single-collection text mining problem. however, such a simple model is inadequate for ctm for two reasons: (1) we have completely ignored the structure of collections. as a result, we may have clusters that repre- sent only some, not all of the collections. (2) there is no easy way to identify which theme cluster represents the common information across collections and which represents specific information to a particular collection. below we present a more sophisticated coordinated mixture model, which is specifically designed for ctm and addresses these two defi- ciencies. 4. clustering with a cross- collection mixture model  th th    th     th    th    th    th    th    th figure 2: the cross-collection mixture model 4.1 the model our main idea for improving the simple mixture model for comparative text mining is to explicitly distinguish com- mon theme clusters that characterize common information across all collections from special theme clusters that char- acterize collection-specific information. thus we now con- sider k latent common themes as well as a potentially dif- ferent set of k collection-specific themes for each collection (illustrated in figure 2). these component models directly correspond to all the information we are interested in discov- ering. the sampling distribution of a word in document d (from collection ci) is now collection-specific. specifically, it involves the background model (thb), k common theme models (th1, ..., thk), and k collection-specific theme models (th1,i, ..., thk,i), which are to capture the unique information about the k themes in collection ci. that is, pd(w|ci) = (1 - lb) k j=1 [pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))] +lbp(w|thb) where lb is the weight on the background model thb and lc is the weight on the common theme model thj (as opposed to the collection-specific theme model thj,i). intuitively, when we ""generate"" a word, we first decide whether to use the background model thb according to lb; the larger lb is, the more likely we will use thb. if we decide not to use thb, then we need to decide which theme to use; this is controlled by pd,j, the probability of using theme j when generating words in d. finally, once we decide which theme to use, we still need to decide whether we should use the common theme model or the collection-specific theme model, and this is con- trolled by lc, the probability of using the common model. the weighting parameters lb and lc are intentionally to be set by the user, and their interpretation is as follows. lb reflects our knowledge about how noisy the collections are. if we believe the text is verbose, then lb should be set to a larger value. in our experiments, a value of 0.9 - 0.95 often works well. lc indicates our emphasis on the commonality, as opposed to the speciality in comparative text mining. a larger lc would allow us to learn a richer common theme model, whereas a smaller one would learn a weaker com- mon theme model, but stronger special models. the optimal value depends on the specific applications. according to this generative model, the log-likelihood of the whole set of collections is log p(c) = m i=1 dci wv [c(w, d) log[lbp(w|thb) +(1 - lb) k j=1 pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))]] 4.2 parameter estimation we estimate the background model thb using all the avail- able text in the m text collections. that is, ^p(w|thb) = m i=1 dci c(w, d) m i=1 dci w'v c(w', d) since lb and lc are set manually, this leaves us with the following parameters to estimate: (1) the common theme models, th = {th1, ..., thk}; (2) the special theme models for each collection ci, thci = {th1,i, ..., thk,i}; and (3) the theme mixing weights for each document d: pd = {pd,1, ..., pd,k}. p(zd,ci,w = j) = p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) k j'=1 p(n) d,j'(lcp(n)(w|thj') + (1 - lc)p(n)(w|thj',i)) p(zd,ci,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) p(zd,ci,j,w = c) = lcp(n)(w|thj) lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i) p(n+1) d,j = wv c(w, d)p(zd,ci,w = j) j' wv c(w, d)p(zd,ci,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)p(zd,ci,j,w = c) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)p(zd,ci,j,w' = c) p(n+1)(w|thj,i) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)(1 - p(zd,ci,j,w = c)) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)(1 - p(zd,ci,j,w' = c)) figure 3: em updating formulas for the cross-collection mixture model as in the simple mixture model, we can also use the em algorithm to compute a maximum likelihood estimate. the updating formulas are shown in figure 3. each em iteration involves scanning all the text once, so the algorithm is quite scalable. 4.3 using the model once the model is estimated, we will have k collection- specific models for each of the m collections and k common theme models across all collections. each of these mod- els is a word distribution or unigram language model. the high probability words can characterize the theme/cluster extracted. such words can often be used directly as a sum- mary or indirectly (e.g., through a hidden markov model) to extract relevant sentences to form a summary of the cor- responding theme. the extracted word distributions can also be used in many other ways, e.g., to classify other text documents or to link the related passages in the text collec- tions so that a user can navigate the information space for comparative analysis. we can input our bias for ctm through setting lb and lc manually. specifically, lb allows us to input our knowledge about the noise (stop words) in the data - if we know the text data is verbose, then we should set lb to a high value, whereas if the data is concise and mostly content-bearing keywords, then we need to set lb to a smaller value. sim- ilarly, lc allows us to input a trade-off between extracting common theme models (setting lc to a higher value) vs. ex- tracting collection-specific models (setting lc to a smaller value). such biases cannot be learned by the maximum like- lihood estimator. indeed, maximizing the data likelihood is only a means to achieve our ultimate goal, which is why we want to regularize our model in a meaningful way so that we can impose certain preferences while maximizing the data likelihood. the flexibility and control provided by lb and lc make it possible for a user to control the focus of the results of comparative text mining. 5. experiments and result analysis we evaluated the simple mixture model (simpmix) and the cross-collection mixture model (ccmix) on two do- mains - war news and laptop reviews. 5.1 war news the war news data consists of news excerpts on two com- parable events: (1) iraq war and (2) afghanistan war, both of which occurred in the last two years. the iraq war news excerpts were a combination of 30 articles from the cnn and bbc web sites over the last one year span. the afghanistan war data consists of 26 news articles downloaded from the cnn and bbc web sites for one year starting from nov. 2001. our goal is to compare these two wars and find out their common and specific characteristics. the results of using either the simple mixture model or the cross-collection mixture model are shown in table 2, where the top words of each theme model are listed along with their probabilities. we set lb = 0.95 for simpmix and set lb = 0.9, lc = 0.25 for ccmix; in both cases, the number of clusters is fixed to 5. variations of these parameters are discussed later. we see that although there are some interesting themes in the results of simpmix (e.g., cluster3 and cluster4 appear to be about american and british inquiry into the pres- ence of weapons in iraq, respectively, while cluster2 suggests the presence of british soldier in basra, a town in southern iraq), they are all about iraq war. we do not see any obvi- ous theme common to both iraq war and afghanistan war. this is expected given that simpmix pools all documents together without exploiting the collection structure. in contrast, the results of ccmix explicitly suggest the common themes and the corresponding collection-specific themes. for example, cluster3 clearly suggests that in both wars, there has been loss of lives. furthermore, the top words in the corresponding iraq theme include names of some key defense people that are involved in the iraq war (e.g., ""hoon"" is the last name of the british defense secre- tary and ""sanchez"" is the last name of the u.s general in iraq). in comparison, the top words in the corresponding afghanistan theme includes the name of the u.s defense secretary who had an important role in the afghan war. cluster4 and cluster5 are also meaningful themes. the common theme captured in cluster4 is the monday briefings by an official spokesman of a political administration during both wars; the corresponding special themes indicate the dif- ference in the topics discussed in the briefings (e.g., weapon inquiry for iraq war and bin laden for afghanistan war). the common theme of cluster5 is about the diplomatic role table 2: war news results using simpmix model (top) vs. ccmix model (bottom) cluster1 cluster2 cluster3 cluster4 cluster5 common will 0.019 british 0.017 weapons 0.022 inquiry 0.052 countries 0.026 theme let 0.012 soldiers 0.015 kay 0.021 intelligence 0.036 contracts 0.023 words united 0.012 baghdad 0.015 rumsfeld 0.017 dossier 0.024 allawi 0.012 god 0.011 air 0.011 commission 0.014 hutton 0.021 hoon 0.012 inspectors 0.011 basra 0.011 group 0.014 claim 0.019 russian 0.010 your 0.010 mosque 0.010 senate 0.011 wmd 0.019 international 0.010 nation 0.010 southern 0.01 survey 0.010 mps 0.018 russia 0.009 n 0.010 fired 0.010 paper 0.010 committee 0.017 reconstruction 0.009 cluster1 cluster2 cluster3 cluster4 cluster5 common us 0.042 mr 0.029 killed 0.036 monday 0.036 united 0.042 theme nation 0.030 marines 0.025 month 0.032 official 0.032 nations 0.04 words will 0.024 dead 0.023 deaths 0.023 i 0.029 with 0.03 action 0.022 general 0.022 one 0.023 would 0.028 is 0.025 re 0.022 defense 0.019 died 0.022 where 0.025 it 0.024 border 0.019 key 0.018 been 0.022 do 0.025 they 0.023 its 0.017 since 0.018 drive 0.018 spokesman 0.022 diplomatic 0.023 ve 0.016 first 0.016 according 0.015 political 0.021 blair 0.022 iraq god 0.022 iraq 0.022 troops 0.016 intelligence 0.049 n 0.03 theme saddam 0.016 us 0.021 hoon 0.015 weapons 0.034 weapons 0.024 words baghdad 0.013 baghdad 0.017 sanchez 0.012 inquiry 0.028 inspectors 0.023 your 0.012 nato 0.015 billion 0.01 commission 0.017 council 0.016 live 0.01 iraqi 0.013 spokeswoman 0.008 independent 0.016 declaration 0.015 afghan paper 0.021 story 0.028 taleban 0.026 bin 0.031 northern 0.040 theme afghan 0.019 full 0.026 rumsfeld 0.020 laden 0.031 alliance 0.040 words meeting 0.014 saturday 0.016 hotel 0.012 steinberg 0.027 kabul 0.030 euro 0.012 e 0.015 front 0.011 taliban 0.023 taleban 0.025 highway 0.012 rabbani 0.012 dropped 0.010 chat 0.019 aid 0.020 played by the united nations (un). the corresponding spe- cial themes again suggest the difference between the two wars. the iraq theme indicates the role of un in sending weapon inspectors to iraq; the afghanistan theme refers to northern alliance that received aid from the un and came to power in afghanistan after the defeat of taliban. 5.2 laptop customer reviews this data set was constructed to test our models for com- paring opinions of customers on different laptops. we man- ually downloaded the following 3 review sets from epin- ions.com [4], filtering out the misplaced ones: apple ibook (m8598ll/a) mac notebook (34 reviews), dell inspiron 8200 (8tworh) pc notebook (22 reviews), ibm thinkpad t20 2647 (264744u) pc notebook (42 reviews). the results on this data set are generally similar to those on war news. due to the limit of space, we only show the ccmix results in table 3, which are obtained by setting lc=.7 and lb=.96 and fixing the number of clusters to 8. here we again see many very interesting common themes; in- deed, the top two words in the common themes can provide a very good summary of the themes (e.g., ""sound and speak- ers"" for cluster1, ""battery hours"" for cluster5, and ""mi- crosoft office"" for cluster8). however, the special themes, although suggesting some differences among the three lap- tops, are much harder to interpret. this may be because there is a great deal of variation in product-specific opin- ions in the data, which makes the data extremely sparse for learning a coherent collection-specific theme for each of the eight themes. 5.3 parameter tuning when we vary lb and lc in ccmix, the results are gen- erally different. specifically, when lb is set to a small value, non-informative stop words tend to show up in common themes. a reasonable value for lb is generally higher than 0.9 - in that case, the model automatically eliminates the non-informative words from the theme clusters, allowing for more discriminative clustering. indeed, in all our experi- ments, we have intentionally retained all the stop words, and the model is clearly able to filter out non-informative words, though in some cases, they still show up as top words in the common themes of the news data. they can be ""eliminated"" by using an even higher lb, but then we may end up having insufficient information to learn a common theme reliably. lc affects the vocabulary allocation between the common and collection-specific themes. in the news data experiments, when we change lc to a value above 0.4, the collection-specific terms would dominate the common theme models. in the laptop data experiments, when lc is less than 0.7, we lose many content keywords of the com- mon themes to the corresponding collection-specific themes. both lb and lc are intentionally left for a user to tune so that we can incorporate application-specific bias into the model. 6. related work the most related work to our work is the coupled clus- tering method presented in [8], which appears to be one of the very few studies considering the clustering problem in multiple collections. they extend the information bottle- neck approach to discover common clusters across different collections. comparative text mining goes beyond this by analyzing both the similarities and collection-specific differ- ences. we also use a completely different approach based on probabilistic mixture models. another related work is [10], where cross-training is used for learning classifiers from mul- tiple document sets. our work differs from it in that we per- form unsupervised learning. the aspect models studied in [7, 2] are also related to our work but they are closer to our baseline model and are not designed for comparing multiple collections. there are many studies in document clustering [1]. again, the difference lies in that they consider only one collection and thus are similar to the baseline model. our work is also related to document summarization, es- pecially multiple document summarization (e.g.,[9, 12]). in- deed, we can the results of ctm as a special form of sum- mary of multiple text collections. however, an important difference is that while a summary intends to retain the ex- plicit information in text (to maintain fidelity), ctm aims at extracting non-obvious implicit patterns. 7. conclusions and future work in this paper, we define and study a novel text mining problem referred to as comparative text mining. it is con- table 3: laptop review results using ccmix model cluster1 cluster2 cluster3 cluster4 cluster5 cluster6 cluster7 cluster8 c sound 0.035 port 0.023 ram 0.105 m 0.027 battery 0.129 t 0.039 cd 0.095 office 0.037 o speakers 0.035 jack 0.021 mb 0.037 trackpad 0.018 hours 0.080 modem 0.017 drive 0.076 microsoft 0.021 m playback 0.034 ports 0.018 memory 0.034 chip 0.013 life 0.060 internet 0.017 rw 0.055 little 0.018 m feel 0.019 will 0.018 256mb 0.027 improved 0.012 5 0.038 later 0.014 dvd 0.049 basic 0.015 o pros 0.017 your 0.017 128mb 0.021 volume 0.012 end 0.016 configuration 0.014 combo 0.025 6 0.014 n cons 0.017 warm 0.013 tech 0.020 did 0.011 3 0.016 free 0.013 drives 0.023 under 0.013 market 0.017 keep 0.012 128 0.020 latch 0.011 high 0.015 vga 0.012 rom 0.020 mhz 0.012 size 0.014 down 0.012 support 0.018 make 0.010 processor 0.014 were 0.012 floppy 0.017 word 0.011 d rests 0.026 banias 0.019 options 0.039 inspiron 0.061 dells 0.032 fans 0.019 apoint 0.017 0 0.046 e palm 0.022 svga 0.014 sodimm 0.025 pentium 0.052 ran 0.017 shipping 0.017 blah 0.015 angle 0.018 l 9000 0.020 record 0.014 eraser 0.021 8200 0.03 prong 0.015 2nd 0.016 hook 0.011 portion 0.0154 l smart 0.018 supposedly 0.013 crucial 0.018 toshiba 0.027 requiring 0.014 tracking 0.015 tug 0.011 usb 0.0153 reader 0.018 rebate 0.013 sdram 0.018 440 0.026 second 0.011 spoke 0.015 2499 0.011 specials 0.014 a magazine 0.011 osx 0.040 macos 0.019 macos0.016 g4 0.016 iphoto 0.031 airport 0.075 appleworks 0.060 p ipod 0.010 quartz 0.015 personal 0.018 netscape 0.013 interlaced 0.016 itunes 0.027 burn 0.035 word 0.021 p strong 0.01 instance 0.014 shield 0.016 apache 0.009 mac 0.016 import 0.021 4x 0.018 result 0.016 l icon 0.009 underneath 0.012 airport 0.016 ie5 0.008 imac 0.014 book 0.018 reads 0.014 spreadsheet 0.013 e choppy 0.008 cooling 0.012 installation 0.015 ll 0.008 powermac 0.012 quicktime 0.016 schools 0.013 excel 0.012 i technology 0.023 rj 0.033 exchange 0.023 company 0.021 thinkpad 0.077 thinkpads 0.020 t20 0.04 list 0.015 b outdated 0.020 chik 0.018 hassle 0.016 570 0.017 ibm 0.047 connector 0.018 ultrabay 0.030 factor 0.013 m surprisingly 0.018 dsl 0.017 disc 0.015 turn 0.017 covers 0.029 connectors 0.018 tells 0.021 months 0.013 trackpoint 0.014 45 0.015 t23 0.012 buttons 0.015 lightest 0.028 bluetoot 0.018 device 0.021 cap 0.013 recommend 0.013 pacbell 0.012 cdrw 0.015 numlock 0.012 3000 0.027 sturdy 0.011 number 0.020 helpdesk 0.0128 cerned with discovering any latent common themes across a set of comparable collections of text as well as summariz- ing the similarities and differences of these collections along each theme. we propose a generative cross-collection mixture model for performing comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. we define the model and present the em algorithm that can estimate the model ef- ficiently. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method based on a simple mixture model. experiment results show that the cross-collection mixture model is quite effective in dis- covering the latent common themes across collections and performs significantly better than the baseline simple mix- ture model. the proposed model has many obvious applica- tions in opinion summarization and business intelligence. it also has many other less obvious applications in the general area of text mining and semantic integration of text. for example, our model can be used to compare the course web pages from the major computer science department web sites to discover core computer science topics. it can also be used to compare literature collections in different communities to support concept switching [11]. the work reported in this paper is just an initial step toward a promising new direction. there are many interest- ing future research directions. first, it may be interesting to explore how we can further improve the ccmix model and its estimation. one interesting direction is to explore the maximum a posterior (map) estimator, which would allow us to incorporate more prior knowledge in a princi- pled way. for example, a user may already have certain thematic aspects in mind. with map estimation, we can easily add that bias to the component models. second, we can generalize our model to model semi-structured data to perform more general comparative data mining. one way to achieve this goal is to introduce additional random variables in each component model so that we can model any struc- tured data. finally, it would be very interesting to explore how we could exploit the learned theme models to provide additional help to a user who wants to perform comparative analysis. for example, the learned common theme models can be used to construct a hidden markov model (hmm) to identify the parts in the text collections about the common themes, and to connect them through automatically gener- ated hyperlinks. this would allow a user to easily navigate through the common themes. 8. references [1] d. baker and a. mccallum. distributional clustering of words for text classification. in proceedings of acm sigir 1998, 1998. [2] d. blei, a. ng, and m. jordan. latent dirichlet allocation. journal of machine learning research, 3:993-1022, 2003. [3] a. p. dempster, n. m. laird, and d. b. rubin. maximum likelihood from incomplete data via the em algorithm. journal of royal statist. soc. b, 39:1-38, 1977. [4] epinions.com, 2003. http://www.epinions.com/. [5] r. feldman and i. dagan. knowledge discovery in textual databases. in proceedings of the international conference on knowledge discovery and data mining, 1995. [6] m. a. hearst. untangling text data mining. in proceedings of acl'99, 1999. [7] t. hofmann. probabilistic latent semantic indexing. in proceedings of acm sigir'99, pages 50-57, 1999. [8] z. marx, i. dagan, j. buhmann, and e. shamir. coupled clustering: a method for detecting structural correspondence. journal of machine learning research, 3:747-780, 2002. [9] k. mckeown, j. l. klavans, v. hatzivassiloglou, r. barzilay, and e. e. towards multidocument summarization by reformulation: progress and prospects. in proceedings of aaai-99. [10] s. sarawagi, s. chakrabarti, and s. godbole. cross-training: learning probabilistic mappings between topics. in proceedings of acm sigkdd 2003. [11] b. r. schatz. the interspace: concept navigation across distributed communities. computer, 35(1):54-62, 2002. [12] h. zha. generic summarization and keyphrase extraction using mutual reinforcement principle and sentence clustering. in proceedings of acm sigir 2002. view publication stats view publication stats team goat! (getting our act together) reproducing paper: a cross-collection mixture model for comparative text mining 1: progress as a group we have decided to choose a rather large dataset from the new york times regarding the presidential election. our paper that we are modeling also used the expectation- maximization (em) algorithm to evaluate a model on two different text data sets one being a news article data set. we are currently doing more research on the em algorithm as this was a rather recent lesson in our class. obviously, we have a github repository to collaborate on for our coding portions. also using google docs for the paper creation. 2: remaining tasks we have to implement our algorithm and then use an experiment to verify our implementation. 3: challenges/issues faced unfortunately, one of our group members lost a family member over the break, so we had to reallocate some of the workload recently. other than that, we are having issues figuring out helpful libraries and strategies so that our em algorithm can work on large datasets. cs410 course project team goat background ## reproducing a paper. for our final project, we attempted to reproduce results from the (contexual text mining) research paper listed below: chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 the actual paper has been included in our repository for your own reference. setup/dependencies ## this repo assumes that the user has python3 as well as pip. if not, they can be found here. our project has two package dependencies, newsapi and numpy. using the command ""pip install -r requirements.txt"" the user should be able to install the correct versions of both packages. at this point, cd into directory /courseproject/, run mixture.py, and follow the prompts in order to run our implementation of the collective text mining comparison model. data ## our data is rather fluid in this case. we have an example of our demonstration video in a youtube link here. in an attempt to keep the data as similar as possible to the original paper, please use terms ""iraq"" and ""afghanistan"" when prompted. team goat: project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. *captain bolded 2. which paper have you chosen? chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? yes"	['see', 'discussions', 'stats', 'author', 'profiles', 'publication', 'httpswwwresearchgatenetpublication', 'crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'conference', 'paper', 'january', 'doi', 'source', 'dblp', 'citations', 'reads', 'authors', 'including', 'also', 'working', 'related', 'projects', 'health', 'news', 'quality', 'view', 'project', 'atulya', 'velivelli', 'publications', 'profile', 'bei', 'yu', 'syracuse', 'university', 'content', 'following', 'page', 'uploaded', 'july', 'user', 'requested', 'enhancement', 'downloaded', 'file', 'chengxiang', 'zhai', 'department', 'computer', 'science', 'illinois', 'urbana', 'champaign', 'electrical', 'engineering', 'graduate', 'school', 'library', 'information', 'abstract', 'define', 'study', 'novel', 'problem', 'refer', 'ctm', 'given', 'set', 'comparable', 'collections', 'task', 'discover', 'latent', 'com', 'mon', 'themes', 'across', 'well', 'summarize', 'similarity', 'differences', 'along', 'theme', 'general', 'subsumes', 'many', 'interest', 'ing', 'applications', 'business', 'intelligence', 'opinion', 'summarization', 'propose', 'generative', 'probabilistic', 'mix', 'ture', 'simul', 'taneously', 'performs', 'clustering', 'within', 'collection', 'applied', 'arbitrary', 'estimated', 'efficiently', 'using', 'expectationmaximization', 'em', 'algo', 'rithm', 'evaluate', 'two', 'different', 'data', 'sets', 'ie', 'article', 'laptop', 'review', 'compare', 'baseline', 'method', 'based', 'experiment', 'results', 'show', 'quite', 'effective', 'discovering', 'common', 'significantly', 'better', 'categories', 'subject', 'descriptors', 'h', 'informa', 'tion', 'search', 'retrieval', 'terms', 'algorithms', 'keywords', 'models', 'clus', 'tering', 'introduction', 'concerned', 'extracting', 'knowledge', 'patterns', 'much', 'existing', 'research', 'focused', 'one', 'single', 'goals', 'often', 'extract', 'basic', 'semantic', 'units', 'named', 'entities', 'rela', 'tions', 'topic', 'permission', 'make', 'digital', 'hard', 'copies', 'part', 'work', 'personal', 'classroom', 'use', 'granted', 'without', 'fee', 'provided', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'full', 'citation', 'first', 'copy', 'otherwise', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'prior', 'specific', 'andor', 'kdd', 'august', 'seattle', 'washington', 'usa', 'copyright', 'acm', 'ferred', 'differ', 'ences', 'specif', 'ically', 'involves', 'discovered', 'characterize', 'among', 'col', 'lections', 'unique', 'need', 'exists', 'applica', 'summarizing', 'reviews', 'similar', 'products', 'comparing', 'opinions', 'simultaneously', 'component', 'multinomial', 'distribution', 'characterizing', 'collectionspecific', 'explicitly', 'modeled', 'pro', 'posed', 'expectation', 'maximization', 'algorithm', 'rest', 'organized', 'follows', 'section', 'briefly', 'introduce', 'present', 'simple', 'new', 'discuss', 'motivating', 'example', 'popularity', 'ecommerce', 'online', 'customer', 'eval', 'uations', 'becoming', 'widely', 'stores', 'thirdparty', 'websites', 'pioneers', 'like', 'amazoncom', 'epin', 'ionscom', 'accumulated', 'large', 'amounts', 'input', 'comments', 'recommendations', 'advice', 'etc', 'number', 'epinionscom', 'million', 'product', 'could', 'hundreds', 'impossible', 'readers', 'go', 'thus', 'desirable', 'certain', 'type', 'order', 'provide', 'salient', 'feedbacks', 'peers', 'important', 'identify', 'aspects', 'reviewers', 'mentioned', 'group', 'accord', 'similarities', 'suppose', 'three', 'brands', 'laptops', 'dell', 'ibm', 'apple', 'want', 'useful', 'summary', 'would', 'tab', 'ular', 'representation', 'shown', 'table', 'row', 'represents', 'aspect', 'subtopic', 'ent', 'columns', 'correspond', 'tabular', 'subtopics', 'battery', 'life', 'long', 'enough', 'short', 'memory', 'good', 'bad', 'speed', 'slow', 'fast', 'course', 'difficult', 'duce', 'completely', 'automatically', 'however', 'achieve', 'less', 'ambitious', 'goal', 'identifying', 'character', 'istics', 'unsupervised', 'way', 'concrete', 'possible', 'appli', 'cations', 'precisely', 'corresponds', 'roughly', 'granularity', 'applicationspecific', 'fundamental', 'ex', 'ploratory', 'analysis', 'addition', 'comparison', 'companies', 'cus', 'tomer', 'relationship', 'management', 'groups', 'customers', 'integration', 'challenging', 'several', 'ways', 'learning', 'training', 'available', 'reason', 'purposes', 'makes', 'minimum', 'assumptions', 'principle', 'partition', 'discrimination', 'discov', 'ered', 'dif', 'ficult', 'goes', 'beyond', 'regular', 'onecollection', 'requiring', 'alignment', 'multiple', 'since', 'must', 'rely', 'methods', 'perform', 'prob', 'abilistic', 'describe', 'repre', 'sents', 'straightforward', 'application', 'min', 'sophisticated', 'specifically', 'designed', 'th', 'figure', 'naive', 'solution', 'treat', 'collec', 'hope', 'clusters', 'represent', 'others', 'rep', 'resent', 'documents', 'assume', 'k', 'characterized', 'word', 'distribu', 'called', 'unigram', 'language', 'document', 'regarded', 'sample', 'components', 'fit', 'union', 'obtained', 'used', 'analyze', 'formally', 'let', 'c', 'cm', 'thk', 'thb', 'background', 'generation', 'pdw', 'lbpwthb', 'lb', 'j', 'pdjpwthj', 'w', 'pdj', 'documentspecific', 'mixing', 'weight', 'jth', 'loglikelihood', 'log', 'pcl', 'dci', 'wv', 'cw', 'x', 'loglbpwthb', 'v', 'words', 'vocabulary', 'count', 'l', 'thj', 'pdjk', 'parameters', 'purpose', 'force', 'done', 'discriminative', 'leading', 'informative', 'control', 'effect', 'estimator', 'compute', 'maximum', 'likelihood', 'estimate', 'updating', 'formulas', 'pzdw', 'pn', 'dj', 'pnwthj', 'djpnwthj', 'b', 'dpzdw', 'bpzdw', 'closely', 'probabilis', 'tic', 'indexing', 'plsi', 'proposed', 'treats', 'singlecollection', 'inadequate', 'reasons', 'ignored', 'structure', 'result', 'may', 'sent', 'easy', 'cluster', 'particular', 'coordinated', 'addresses', 'defi', 'ciencies', 'cross', 'main', 'idea', 'improving', 'distinguish', 'special', 'char', 'acterize', 'con', 'sider', 'potentially', 'ferent', 'illustrated', 'directly', 'interested', 'ering', 'sampling', 'ci', 'thi', 'thki', 'capture', 'pdwci', 'pdjlcpwthj', 'lcpwthji', 'lc', 'opposed', 'thji', 'intuitively', 'generate', 'decide', 'whether', 'according', 'larger', 'likely', 'controlled', 'probability', 'generating', 'finally', 'still', 'trolled', 'weighting', 'intentionally', 'interpretation', 'reflects', 'noisy', 'believe', 'verbose', 'value', 'experiments', 'works', 'indicates', 'emphasis', 'commonality', 'speciality', 'allow', 'us', 'learn', 'richer', 'whereas', 'smaller', 'weaker', 'stronger', 'optimal', 'depends', 'whole', 'pc', 'parameter', 'estimation', 'avail', 'able', 'pwthb', 'manually', 'leaves', 'thci', 'weights', 'pd', 'pdk', 'pzdciw', 'lcpnwthj', 'lcpnwthji', 'djlcpnwthj', 'pzdcijw', 'dpzdciw', 'bpzdciw', 'jpzdcijw', 'pnwthji', 'iteration', 'scanning', 'scalable', 'mod', 'els', 'high', 'themecluster', 'extracted', 'sum', 'mary', 'indirectly', 'eg', 'hidden', 'markov', 'relevant', 'sentences', 'form', 'cor', 'responding', 'distributions', 'classify', 'link', 'passages', 'navigate', 'space', 'bias', 'setting', 'allows', 'noise', 'stop', 'know', 'concise', 'mostly', 'contentbearing', 'sim', 'ilarly', 'tradeoff', 'higher', 'vs', 'tracting', 'biases', 'cannot', 'learned', 'lihood', 'indeed', 'maximizing', 'means', 'ultimate', 'regularize', 'meaningful', 'impose', 'preferences', 'flexibility', 'focus', 'evaluated', 'simpmix', 'ccmix', 'mains', 'war', 'consists', 'excerpts', 'parable', 'events', 'iraq', 'afghanistan', 'occurred', 'last', 'years', 'combination', 'articles', 'cnn', 'bbc', 'web', 'sites', 'year', 'span', 'starting', 'nov', 'wars', 'find', 'characteristics', 'either', 'top', 'listed', 'probabilities', 'cases', 'fixed', 'variations', 'discussed', 'later', 'although', 'interesting', 'appear', 'american', 'british', 'inquiry', 'pres', 'ence', 'weapons', 'respectively', 'suggests', 'presence', 'soldier', 'basra', 'town', 'southern', 'obvi', 'ous', 'expected', 'pools', 'together', 'exploiting', 'contrast', 'suggest', 'corresponding', 'clearly', 'loss', 'lives', 'furthermore', 'include', 'names', 'key', 'defense', 'people', 'involved', 'hoon', 'name', 'secre', 'tary', 'sanchez', 'includes', 'secretary', 'role', 'afghan', 'captured', 'monday', 'briefings', 'official', 'spokesman', 'political', 'administration', 'indicate', 'ference', 'topics', 'weapon', 'bin', 'laden', 'diplomatic', 'bottom', 'countries', 'soldiers', 'kay', 'contracts', 'united', 'baghdad', 'rumsfeld', 'dossier', 'allawi', 'god', 'air', 'commission', 'hutton', 'inspectors', 'claim', 'russian', 'mosque', 'senate', 'wmd', 'international', 'nation', 'survey', 'mps', 'russia', 'n', 'fired', 'committee', 'reconstruction', 'mr', 'killed', 'marines', 'month', 'nations', 'dead', 'deaths', 'action', 'died', 'border', 'drive', 'blair', 'troops', 'saddam', 'nato', 'billion', 'council', 'live', 'iraqi', 'spokeswoman', 'independent', 'declaration', 'story', 'taleban', 'northern', 'alliance', 'meeting', 'saturday', 'hotel', 'steinberg', 'kabul', 'euro', 'e', 'front', 'taliban', 'highway', 'rabbani', 'dropped', 'chat', 'aid', 'played', 'un', 'spe', 'cial', 'difference', 'sending', 'refers', 'received', 'came', 'power', 'defeat', 'constructed', 'test', 'paring', 'man', 'ually', 'filtering', 'misplaced', 'ones', 'ibook', 'mlla', 'mac', 'notebook', 'inspiron', 'tworh', 'thinkpad', 'u', 'generally', 'due', 'limit', 'fixing', 'deed', 'sound', 'speak', 'ers', 'hours', 'mi', 'crosoft', 'office', 'suggesting', 'lap', 'tops', 'harder', 'interpret', 'great', 'deal', 'variation', 'productspecific', 'opin', 'ions', 'extremely', 'sparse', 'coherent', 'eight', 'tuning', 'vary', 'gen', 'erally', 'small', 'noninformative', 'tend', 'reasonable', 'case', 'eliminates', 'allowing', 'experi', 'ments', 'retained', 'filter', 'though', 'eliminated', 'even', 'end', 'insufficient', 'reliably', 'affects', 'allocation', 'change', 'dominate', 'lose', 'left', 'tune', 'incorporate', 'coupled', 'presented', 'appears', 'studies', 'considering', 'extend', 'bottle', 'neck', 'approach', 'analyzing', 'another', 'crosstraining', 'classifiers', 'mul', 'tiple', 'differs', 'per', 'studied', 'closer', 'lies', 'consider', 'es', 'pecially', 'intends', 'retain', 'plicit', 'maintain', 'fidelity', 'aims', 'nonobvious', 'implicit', 'conclusions', 'future', 'referred', 'port', 'ram', 'cd', 'speakers', 'jack', 'mb', 'trackpad', 'modem', 'microsoft', 'playback', 'ports', 'chip', 'internet', 'rw', 'little', 'feel', 'improved', 'dvd', 'pros', 'volume', 'configuration', 'combo', 'cons', 'warm', 'tech', 'free', 'drives', 'market', 'keep', 'latch', 'vga', 'rom', 'mhz', 'size', 'support', 'processor', 'floppy', 'rests', 'banias', 'options', 'dells', 'fans', 'apoint', 'palm', 'svga', 'sodimm', 'pentium', 'ran', 'shipping', 'blah', 'angle', 'record', 'eraser', 'prong', 'nd', 'hook', 'portion', 'smart', 'supposedly', 'crucial', 'toshiba', 'tracking', 'tug', 'usb', 'reader', 'rebate', 'sdram', 'second', 'spoke', 'specials', 'magazine', 'osx', 'macos', 'g', 'iphoto', 'airport', 'appleworks', 'p', 'ipod', 'quartz', 'netscape', 'interlaced', 'itunes', 'burn', 'strong', 'instance', 'shield', 'apache', 'import', 'icon', 'underneath', 'imac', 'book', 'spreadsheet', 'choppy', 'cooling', 'installation', 'powermac', 'quicktime', 'schools', 'excel', 'technology', 'rj', 'exchange', 'company', 'thinkpads', 'list', 'outdated', 'chik', 'hassle', 'connector', 'ultrabay', 'factor', 'surprisingly', 'dsl', 'disc', 'turn', 'covers', 'connectors', 'tells', 'months', 'trackpoint', 'buttons', 'lightest', 'bluetoot', 'device', 'cap', 'recommend', 'pacbell', 'cdrw', 'numlock', 'sturdy', 'helpdesk', 'cerned', 'summariz', 'performing', 'ef', 'ficiently', 'dis', 'covering', 'obvious', 'area', 'pages', 'major', 'core', 'literature', 'communities', 'concept', 'switching', 'reported', 'initial', 'step', 'toward', 'promising', 'direction', 'directions', 'explore', 'improve', 'posterior', 'map', 'princi', 'pled', 'already', 'thematic', 'mind', 'easily', 'add', 'generalize', 'semistructured', 'additional', 'random', 'variables', 'struc', 'tured', 'exploit', 'help', 'wants', 'construct', 'hmm', 'parts', 'connect', 'gener', 'ated', 'hyperlinks', 'references', 'baker', 'mccallum', 'distributional', 'classification', 'proceedings', 'sigir', 'blei', 'ng', 'jordan', 'dirichlet', 'journal', 'machine', 'dempster', 'laird', 'rubin', 'incomplete', 'via', 'royal', 'statist', 'soc', 'httpwwwepinionscom', 'r', 'feldman', 'dagan', 'discovery', 'textual', 'databases', 'hearst', 'untangling', 'acl', 'hofmann', 'z', 'marx', 'buhmann', 'shamir', 'detecting', 'structural', 'correspondence', 'mckeown', 'klavans', 'hatzivassiloglou', 'barzilay', 'towards', 'multidocument', 'reformulation', 'progress', 'prospects', 'aaai', 'sarawagi', 'chakrabarti', 'godbole', 'mappings', 'sigkdd', 'schatz', 'interspace', 'navigation', 'zha', 'generic', 'keyphrase', 'extraction', 'mutual', 'reinforcement', 'sentence', 'team', 'goat', 'getting', 'act', 'reproducing', 'decided', 'choose', 'rather', 'dataset', 'york', 'times', 'regarding', 'presidential', 'election', 'modeling', 'currently', 'recent', 'lesson', 'class', 'obviously', 'github', 'repository', 'collaborate', 'coding', 'portions', 'google', 'docs', 'creation', 'remaining', 'tasks', 'implement', 'verify', 'implementation', 'challengesissues', 'faced', 'unfortunately', 'members', 'lost', 'family', 'member', 'break', 'reallocate', 'workload', 'recently', 'issues', 'figuring', 'helpful', 'libraries', 'strategies', 'datasets', 'cs', 'final', 'attempted', 'reproduce', 'contexual', 'ny', 'actual', 'included', 'reference', 'setupdependencies', 'repo', 'assumes', 'python', 'pip', 'found', 'package', 'dependencies', 'newsapi', 'numpy', 'command', 'install', 'requirementstxt', 'correct', 'versions', 'packages', 'point', 'directory', 'courseproject', 'run', 'mixturepy', 'follow', 'prompts', 'collective', 'fluid', 'demonstration', 'video', 'youtube', 'attempt', 'original', 'please', 'prompted', 'proposal', 'netids', 'captain', 'administrative', 'duties', 'bolded', 'chosen', 'programming', 'plan', 'obtain', 'evaluation', 'yes']
https://github.com/jaeroong/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/jasonzhang929/CourseProject	"progress report siyuan zhang (siyuan3) 1. task completed: for this project, i have already downloaded the dataset, wrote a couple of manually engineered features and trained basic models( linear regression, logistic regression, svm) using these features as inputs on the training dataset. 2. pending tasks: the performance not yet reaching the baseline but close. i'm planning on adding more features and using more advanced models such as deep neural networks for classification. im confident that i will be able to outperform the baseline by a fair amount of margins. 3. challenges: not really at this point, everything is ok and progress being made matches my plan. project proposal 1 names: siyuan zhang siyuan3 2 competition: text classification 3 detail i'm planning on trying a mixture of models for this text. this includes classical models such as regression models and svms to train a set of engineered features. i'm also planning on using more advanced models such as deep neural networks to achieve better performance. 4. language python3 text classification competition: twitter sarcasm detection dataset format: each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | for test, we've provided you the response and the context. we also provide the id (i.e., identifier) to report the results. submission instructions : follow the same instructions as for the mps -- create a private copy of this repo and add a webhook to connect to livedatalab.please add a comma separated file named answer.txt containing the predictions on the test dataset. the file should have no headers and have exactly 1800 rows. each row must have the sample id and the predicted label. for example: twitter_1,sarcasm twitter_2,not_sarcasm ... text classification competition - twitter sarcasm detection cs410 fall 2020 siyuan zhang(siyuan3@illinois.edu) introduction the goal of our project is to design implement and test models that can classify the existence of sarcasm in twitter messages. since this is a competition that focuses on the performance of the model we built, there is a baseline requirement of a f1 score greater than 0.723. proposed methods our methods mainly focusing on using machine learning techniques since the problem we try to tackle here is mainly a text classification problem. a large part of applied machine learning is about feature engineering so a large part of our project is about discovering and experimenting different feature extraction methodologies. after the features are generated from the dataset, we then deployed different machine learning algorithms to train and classify the data set provided. we compare the performance of all the classifiers we experimented. preprocessing we implemented couple standard text preprocessing functions to clean our data. methods we used includes special character processing, upper/lower case process, punctuation signs, stemming and lemmatization, as well as stop words. we apply these data cleaning process before the data is fed into the classifiers for training. however, later we determined that such data cleaning actually degraded the test time performance by couple percent so we took this part out in the final version of our testing code. the reason for this is that we suspect in twitter message there are lots of special words and characters that actually play an important role in expressing the message and data cleaning takes a lot of these important information out which makes it harder to classify the sarcasm in the messages. feature engineering we considered different features to use in this project. since the context data is provided in the dataset in addition to the responses, we leverage both to extract useful features. we considered word count vectors, tf-idf vectors, word embeddings and nlp features for this task. among those features, we found the tf-idf vectors to be great features that can achieve good classification performance on the test set so it was selected as out feature. we extract tf-idf weights from both the response string as well as the concatenated context string across the data. we adopted these weights for both the unigram model and the bigram model. machine learning classifiers the classifiers we considered here includes support vector machines, random forests, boosting from the classical machine learning techniques as well as multilayer perception model from the deep learning models. for all models we believe since they were used extensively in many applications and were able to achieve good performance, they should deliver promising results on the task as well. for each of the models, we performed random searches and grid searches on all the model hyper-parameters to select the best parameters for the actual training and testing process. implementation details thanks to the extensive amount of research and development done in this area in the past decades, we were able to make good use of many standard packages and libraries to achieve a lot of functionalities that we require in this project. we mainly used pandas data frame to load the dataset for easier processing. the tf-idf vectors are extracted using tfidfvectorizer from the scikit learn library. we set it to use both the unigram and bigram from the data and extracts features from both the response and the context column. after both vectors are calculated, we concatenate them for each data point and use as the features for the machine learning classifiers. we also leveraged different classifiers mainly from the eras, sklearn and xgboost library. there are very well written versions of these algorithms in these libraries and we use them to train and test these classsifiers. after picking the best model, we then producing the test time output using the test dataset as input and saved the result into the answer text file for benchmarking. experiments detail since the test set is reserved for grading, we split the train set into a 4 1 split and leave 20% of our training data as validation set during out model selection and tuning process. we first perform random search on hyper parameters of each of out models to narrow down the search range of the parameters. then we performed grid search over the parameters to determine the best performing hyper parameters for all the models. afterwards, all models are trained on the train set and their accuracy were compared to determine the best model. although some model tested very well during the training phase, their test time performance is not as good due to potential overfitting so we had to do models selection manually by uploading to github and compare the test set performance on the livedatalab server. below is the detailed performance of all out models on different metrics. from the experiment data above, we can see that the random forest classifier not only have a very high training time performance, but also a very good test time f1 score and training accuracy test precision test recall test f1 svm 0.8272 0.658 0.688 0.6725 random forest 0.9998 0.615 0.894 0.7288 boosting 0.9216 0.621 0.718 0.6656 multilayer percep 0.9182 0.520 0.923 0.6612 is above the 0.723 baseline f1 performance. other 3 models especially the boosting and the multilayer perception model perform well during training time put didn't achieve similar performance on the test and the reason can be potential overfitting. the final parameter we used on the random forest is 1000 estimator with a decision threshold of 0.465. conclusion in this project we experimented many techniques on text classification including feature engineering and machine learning classifiers. the final performance of our best model using tf-idf feature vectors combined with random forest classifier together is able to achieve a good f1 score of 0.7288 which is beyond the baseline. we are happy with the result and this project has been an amazing learning experience for me. software used installation guide the following software packages needs to be installed in order to run our code: python pandas nltk tensorflow keras numpy scipy scikit_learn xgboost these dependencies can be downloaded and installed automatically by first cloning our repo to local and then run the following line in the terminal: install -r requirements.txt our code is located in the sarcasm_detection.py, simply run the code and generated prediction result of the test set will be saved in answer.txt all of out code is fully documented, please refer to our code for more implementation details. reference https://www.analyticsvidhya.com/blog/2018/04/a-comprehensive-guide-to- understand-and-implement-text-classification-in-python/ https://www.mfz.es/machine-learning/an-end-to-end-machine-learning-project- part-i-text-classification-in-python/ siyuan zhang(siyuan3@illinois.edu) cs410 project text classification competition team siyuan text classification twitter sarcasm detection our approach text classification preprocessing feature engineering machine learning techniques experiment results how to install requirements in command line: git clone https://github.com/jasonzhang929/courseproject.git install -r requirements.txt how to run our code all of our code are located at sarcasm_detection.py # define svm model svm = svm.svc(random_state=8, kernel='linear', c=0.1, probability=true) # define random forest model rf_model = randomforestclassifier(n_estimators=1000, random_state=17, warm_start=true, verbose=1) # specify which model to use model = rf_model # run svm model # run_svm() # run mlp model # run_mlp() # run xgboost boosting model # run_boost() # run random forest or svm model here run_model(model) code demo thank you!"	['progress', 'report', 'siyuan', 'zhang', 'task', 'completed', 'project', 'already', 'downloaded', 'dataset', 'wrote', 'couple', 'manually', 'engineered', 'features', 'trained', 'basic', 'models', 'linear', 'regression', 'logistic', 'svm', 'using', 'inputs', 'training', 'pending', 'tasks', 'performance', 'yet', 'reaching', 'baseline', 'close', 'im', 'planning', 'adding', 'advanced', 'deep', 'neural', 'networks', 'classification', 'confident', 'able', 'outperform', 'fair', 'amount', 'margins', 'challenges', 'really', 'point', 'everything', 'ok', 'made', 'matches', 'plan', 'proposal', 'names', 'competition', 'text', 'detail', 'trying', 'mixture', 'includes', 'classical', 'svms', 'train', 'set', 'also', 'achieve', 'better', 'language', 'python', 'twitter', 'sarcasm', 'detection', 'format', 'line', 'contains', 'json', 'object', 'following', 'fields', 'response', 'tweet', 'classified', 'context', 'conversation', 'note', 'ordered', 'list', 'dialogue', 'ie', 'three', 'elements', 'c', 'order', 'reply', 'label', 'not_sarcasm', 'id', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'test', 'data', 'instance', 'example', 'user', 'dont', 'get', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'instead', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'immediate', 'goal', 'predict', 'optionally', 'full', 'size', 'statistics', 'weve', 'provided', 'provide', 'results', 'submission', 'instructions', 'follow', 'mps', 'create', 'private', 'copy', 'repo', 'add', 'webhook', 'connect', 'livedatalabplease', 'comma', 'separated', 'file', 'answertxt', 'containing', 'predictions', 'headers', 'exactly', 'rows', 'row', 'must', 'predicted', 'twitter_sarcasm', 'twitter_not_sarcasm', 'cs', 'fall', 'zhangsiyuanillinoisedu', 'introduction', 'design', 'implement', 'classify', 'existence', 'messages', 'since', 'focuses', 'model', 'built', 'requirement', 'f', 'score', 'greater', 'proposed', 'methods', 'mainly', 'focusing', 'machine', 'learning', 'techniques', 'problem', 'try', 'tackle', 'large', 'part', 'applied', 'feature', 'engineering', 'discovering', 'experimenting', 'different', 'extraction', 'methodologies', 'generated', 'deployed', 'algorithms', 'compare', 'classifiers', 'experimented', 'preprocessing', 'implemented', 'standard', 'functions', 'clean', 'used', 'special', 'character', 'processing', 'upperlower', 'case', 'process', 'punctuation', 'signs', 'stemming', 'lemmatization', 'well', 'stop', 'words', 'apply', 'cleaning', 'fed', 'however', 'later', 'determined', 'actually', 'degraded', 'time', 'percent', 'took', 'final', 'version', 'testing', 'code', 'reason', 'suspect', 'message', 'lots', 'characters', 'play', 'important', 'role', 'expressing', 'takes', 'lot', 'information', 'makes', 'harder', 'considered', 'use', 'addition', 'responses', 'leverage', 'extract', 'useful', 'word', 'count', 'vectors', 'tfidf', 'embeddings', 'nlp', 'among', 'found', 'great', 'good', 'selected', 'weights', 'concatenated', 'across', 'adopted', 'unigram', 'bigram', 'support', 'vector', 'machines', 'random', 'forests', 'boosting', 'multilayer', 'perception', 'believe', 'extensively', 'many', 'applications', 'deliver', 'promising', 'performed', 'searches', 'grid', 'hyperparameters', 'select', 'best', 'parameters', 'actual', 'implementation', 'details', 'thanks', 'extensive', 'research', 'development', 'done', 'area', 'past', 'decades', 'make', 'packages', 'libraries', 'functionalities', 'require', 'pandas', 'frame', 'load', 'easier', 'extracted', 'tfidfvectorizer', 'scikit', 'learn', 'library', 'extracts', 'column', 'calculated', 'concatenate', 'leveraged', 'eras', 'sklearn', 'xgboost', 'written', 'versions', 'classsifiers', 'picking', 'producing', 'output', 'input', 'saved', 'result', 'answer', 'benchmarking', 'experiments', 'reserved', 'grading', 'split', 'leave', 'validation', 'selection', 'tuning', 'first', 'perform', 'search', 'hyper', 'narrow', 'range', 'determine', 'performing', 'afterwards', 'accuracy', 'compared', 'although', 'tested', 'phase', 'due', 'potential', 'overfitting', 'uploading', 'github', 'livedatalab', 'server', 'detailed', 'metrics', 'experiment', 'see', 'forest', 'classifier', 'high', 'precision', 'recall', 'percep', 'especially', 'put', 'didnt', 'similar', 'parameter', 'estimator', 'decision', 'threshold', 'conclusion', 'including', 'combined', 'together', 'beyond', 'happy', 'amazing', 'experience', 'software', 'installation', 'guide', 'needs', 'installed', 'run', 'nltk', 'tensorflow', 'keras', 'numpy', 'scipy', 'scikit_learn', 'dependencies', 'automatically', 'cloning', 'local', 'terminal', 'install', 'r', 'requirementstxt', 'located', 'sarcasm_detectionpy', 'simply', 'prediction', 'fully', 'documented', 'please', 'refer', 'reference', 'httpswwwanalyticsvidhyacomblogacomprehensiveguideto', 'understandandimplementtextclassificationinpython', 'httpswwwmfzesmachinelearninganendtoendmachinelearningproject', 'partitextclassificationinpython', 'team', 'approach', 'requirements', 'command', 'git', 'clone', 'httpsgithubcomjasonzhangcourseprojectgit', 'define', 'svmsvcrandom_state', 'kernellinear', 'probabilitytrue', 'rf_model', 'randomforestclassifiern_estimators', 'random_state', 'warm_starttrue', 'verbose', 'specify', 'run_svm', 'mlp', 'run_mlp', 'run_boost', 'run_modelmodel', 'demo', 'thank']
https://github.com/jennz0/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/jessehenn/CourseProject	courseproject overview team: piazzaed topic: integrating piazza with educational web project proposal project proposal project progress report project progress report final artifacts written documentation source code repository demo video* implementation details overview video* survey overview video survey results in csv *note:the onedrive movie viewer may show the video as blurry. download it and view it locally for best results.	['courseproject', 'overview', 'team', 'piazzaed', 'topic', 'integrating', 'piazza', 'educational', 'web', 'project', 'proposal', 'progress', 'report', 'final', 'artifacts', 'written', 'documentation', 'source', 'code', 'repository', 'demo', 'video', 'implementation', 'details', 'survey', 'results', 'csv', 'notethe', 'onedrive', 'movie', 'viewer', 'may', 'show', 'blurry', 'download', 'view', 'locally', 'best']
https://github.com/jhinukb/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/jiezheng5/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/jinningli/CourseProject	"cs410 final project report text classification competition: twitter sarcasm detection our team: team name: salty fish team captain: name: jinning li netid: jinning4 team member 1: name: jialong yin netid: jialong2 team member 2: name: jianzhe sun netid: jianzhe2 introduction the final project we choose is the text classification competition. the main task of the competition is to do the sentiment analysis of a given tweet to determine whether it is sarcasm or not. we first built a model using pre-trained lstm to do the classification. we only used the response data to train the model and we did not beat the baseline. we did not make use of the context data, and we also did some research on the state-of-art network models of the sentiment analysis. we then built a bert model using a pre-trained bert. we used bceloss to finetune the parameters during training and added a fully connected layer to output the classification result. with this method we beat the baseline, and the best result we achieved is (0.6832, 0.8433, 0.7549), precision, recall and f1 score respectively. lstm baseline introduction of lstm lstm is the abbreviation of long short-term memory. lstm is a special kind of rnn, which solves the deficiency of gradient vanishing and exploding during long-term training that rnns have. lstm consists of three gate structures:forget gate, input gate and output gate. fig. overall structure of the lstm the forget gate layer is implemented by a sigmoid layer. it looks at and ,and outputs a ht-1 xt value, denoted as , between 0 and 1 for each number in the cell state , where is f t ct-1 ht-1 the output at timestamp t-1 and is the input at timestamp t. xt the input gate layer is used to update the information in cell state. this process has two steps. the first step is to use a sigmoid layer to decide which value to get updated, denoted as , and the second step is to use a tanh layer to create a vector of new candidate values, it . then we can update the cell state using the previous output from the forget gate and c't the input gate. the new cell state is calculated as: ct f i ct = t * ct-1 + t * c't the output gate layer is to decide the output value. first, we use a sigmoid layer to decide what parts of the cell state will be output. then, we put the cell state through tanh and multiply by the output of the sigmoid layer, denoted as , and then we can get the final ot output . ht result of using lstm we first tried to use the pre-trained lstm from pytorch and we added two fully connected layers to make the classification given the output of the lstm. in this case we get two classifications, 'sarcasm' and 'not_sarcasm'. the best result we get using this method is: from the result we can see that the pre-trained lstm model without fine-tuning can not beat the baseline, this is probably because lstm does not perform well when dealing with long term dependency problems. so we decide to try another model, bert, to get better performances. the lstm model is implemented by python 3.7.0, pytorch 1.2.0 and trained on intel x86 cpu devices with 8 cores. the code can be found in https://github.com/jinningli/courseproject. please refer to the code manual section for the usage of our code. precision recall f1 score 0.6109979633401222 0.6666666666666666 0.6376195536663125 bert model and logits ensemble bert model bert is a language representation model, which is pre-trained on unlabeled text data at first and fine-tuned with an additional output layer for different nlp tasks. bert can learn a bidirectional representation for each word on both left and right context, compared to the static word embedding learned in word2vec. bert's model architecture is a multi-layer bidirectional transformer encoder based on the original implementation described in vaswani et al. (2017) as shown in fig. fig. bert architecture based on transformer encoder. two unsupervised tasks are used to pre-train bert. the first task is masked language model (mlm) where some percentage of the input tokens are masked at random, and the final hidden vectors corresponding to the mask tokens are fed into an output softmax over the vocabulary for prediction. the second task is next sentence prediction (nsp) where the hidden vector at [cls] token is used to classify whether the given two sentences are continuous sentences or not. both tasks can be trained jointly as in fig. fig. two unsupervised tasks for bert pre-training. during fine-tuning, the bert model is first initialized with the pre-trained parameters, and a fully connected layer is added as the output layer. all of the parameters are tuned using labeled data from the downstream tasks as shown in fig. fig. procedure of bert fine-tuning. since bert obtained the state of the art result in eleven nlp tasks once published, variants of work are proposed based on the bert model and push the performance of nlp tasks a big step forward such as xlnet and albert. our method is based on the bert model. we load the weights of bert from pytorch-transformers which is pre-trained on bookscorpus (800m words) and english wikipedia (2,500m words). a fully connected layer is added as the output layer to classify twitter response into ""sarcasm"" or not. all the parameters are tuned in the training process with bceloss. the twitter dataset is splitted into training dataset with 4000 samples and validation dataset with 1000 samples. validation dataset is used to tune the hyperparameters during training and find 2 epochs is the best since the validation loss starts to grow up after it probably due to the limited dataset. finally, the model is trained on the whole dataset including both training dataset and validation dataset. the model is implemented by python 3.7.0, pytorch 1.2.0. we train the model on nvidia titan v gpu, 16 cores intel x86 cpu machine. the code can be found in https://github.com/jinningli/courseproject. please refer to the code manual section for the usage of our code. fig. train loss and validation loss from the figure above, we can see that the validation loss is relatively low around epoch 2-4. then after epoch 4 the validation loss is high due to overfitting. this is mainly because the size of the training dataset is small, so in this case the model tries to overfit the data in the training dataset rather than generalize from patterns observed from the dataset. this results in the low training loss and high validation loss after epoch 4. therefore, we only take the result of 2-4 epochs for further ensemble. in our final submission, we used all the 5000 samples (without validation) in the training dataset to train the model to get better performances. logits ensemble in order to further improve the performance of our model on the testset, we tried to submit several results to the livedatalab onlinejudge system and collect the precision, recall, and f1 score response. the scores are shown in the figure below. we find that our epoch 3 model and epoch 4 model have the similar highest f1 score. in addition, their precisions and recalls are varied. the ensemble method should be effective by taking the average of logits values (the output of neural network). fig. precision, recall, and f1 score on testset (response after submission) we ensemble the logits by taking the average vglogit ogit / n a =  n i l i the prediction is the argmax of the average logits red argmax(avglogit) p = the ensemble method further improves our f1 score from 0.7519 to 0.7549 table 1: ensemble improvement conclusion in conclusion, we built two models, an lstm model and a bert model to accomplish the twitter sarcasm detection. the lstm model with a pre-trained lstm and two fully connected layers did not beat the baseline. the bert model with a pre-trained bert and a fully connected layer using bceloss beats the baseline. code manual evaluate model and ensemble download pre-trained model for our method download checkpoint.zip from https://drive.google.com/file/d/1nrucz1ydqyoyr8jlep6fkzt8fpqjbbua/view?usp=s haring unzip checkpoint.zip mkdir checkpoint; mkdir checkpoint/run0 mv checkpoint checkpoint/run0/checkpoint evaluate and generating predictions python3 evaluate.py --run run0 --use_bert --device 3 model precision recall f1 score bert epoch 3 0.6667 0.8622 0.7519 bert epoch 4 0.6876 0.8267 0.7508 bert epoch 3&4 ensemble 0.6832 0.8433 0.7549 ensemble # modify ensemble_paths in ensemble.py python3 ensemble.py all parameters --run evaluating on runx. e.g. --run=run1 --use_bert use bert model. if not, using lstm model. --device gpu device to use train model start training with validation and evaluation python3 main.py --use_bert --device 2 --lr 2e-5 --epochs 20 --use_valid --eval start training without validation python3 main.py --use_bert --device 2 --lr 2e-5 --epochs 20 start training using lstm model python3 main.py --device 2 --lr 2e-5 --epochs 20 all parameters --epochs number of epochs for training --batch_size batch size --lr learning rate for optimizer --run continue training on runx. eg. --run=run1 --eval evaluate on training set --use_valid use valid dataset. if not, using the whole dataset for training --use_bert use bert model. if not, using the lstm model --split_ratio when using validation, percentage of trainset --device gpu device to use appendix screenshot of our scores and rank: progress report team: salty fish members: jinning li (jinning4) jialong yin (jialong2) jianzhe sun (jianzhe2) task: text classification competition (sarcasm detection) 1) which tasks have been completed? 1. we have surveyed related background knowledge and previous researches about the sarcasm detection task and sentiment analysis. 2. we have implemented the code to process the tweet data. 3. we have a quick implementation on our basic lstm model with pytorch. the network architecture of this model includes one lstm layers and two dense layers. we only use the response data to train the model. we currently achieve (precision: 0.61 recall:0.67 f1: 0.64) on the testset. 2) which tasks are pending? 1. we are trying to develop a more complex framework which can help make use of the context data. 2. we try to make use of some popular network architectures which were proved to be effective on the sentiment analysis task. 3. final hyper-parameter adjusting and model ensemble. 3) are you facing any challenges? 1. the most challenge part is how to make use of the context data provided in the dataset. every piece of tweet in the dataset is a reply to another tweet. however, sometimes they agree with each other while sometimes they are not. 2. overfitting. our basic model performs much better on the trainset than the testset. we have tried using regularization and reducing the parameters but the improvement is limited. cs410 project proposal team members: team captain: name: jinning li netid: jinning4 team member 1: name: jialong yin netid: jialong2 team member 2: name: jianzhe sun netid: jianzhe2 competition to join: text classification competition additional questions to answer: q: are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods a: the state-of-the-art neural network classifiers include multi-layer perceptron (mlp), support vector machine (svm), naive bayes, decision tree, logistic regression, etc. i have heard of some deep learning frameworks for text classification including rnn, gru, cnn, lstm, bi-lstm, word2vec, conv-rnn, bert, etc. my relevant prior experience includes training a word2vec model to transform the words into vectors and apply random forest and logistic regression after the embedding to classify text. programming language: python cs410 course project - text classification competition: twitter sarcasm detection team name: salty fish team captain: name: jinning li netid: jinning4 team member 1: name: jialong yin netid: jialong2 team member 2: name: jianzhe sun netid: jianzhe2 video the video to introduce our method and the usage of code can be found in youtube https://youtu.be/esr7b8tynjy it's not uploaded to github because it exceeds 100 mb. code manual source code can be found in ./code evaluate model and ensemble download pre-trained model download checkpoint.zip from https://drive.google.com/file/d/1nrucz1ydqyoyr8jlep6fkzt8fpqjbbua/view?usp=sharing unzip checkpoint.zip mkdir checkpoint mkdir checkpoint/run0 mv checkpoint checkpoint/run0/checkpoint evaluate and generating predictions python3 evaluate.py --run run0 --use_bert --device 3 ensemble ``` modify ensemble_paths in ensemble.py python3 ensemble.py ``` all parameters --run evaluating on runx. e.g. --run=run1 --use_bert use bert model. if not, using lstm model. --device gpu device to use train model start training with validation and evaluation python3 main.py --use_bert --device 2 --lr 2e-5 --epochs 20 --use_valid --eval start training without validation python3 main.py --use_bert --device 2 --lr 2e-5 --epochs 20 start training using lstm model python3 main.py --device 2 --lr 2e-5 --epochs 20 all parameters --epochs number of epochs for training --batch_size batch size --lr learning rate for optimizer --run continue training on runx. eg. --run=run1 --eval evaluate on training set --use_valid use valid dataset. if not, using the whole dataset for training --use_bert use bert model. if not, using the lstm model --split_ratio when using validation, percentage of trainset --device gpu device to use appendix: competetion data format each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | for test, we've provided you the response and the context. we also provide the id (i.e., identifier) to report the results. submission instructions : follow the same instructions as for the mps -- create a private copy of this repo and add a webhook to connect to livedatalab.please add a comma separated file named answer.txt containing the predictions on the test dataset. the file should have no headers and have exactly 1800 rows. each row must have the sample id and the predicted label. for example: twitter_1,sarcasm twitter_2,not_sarcasm ..."	['cs', 'final', 'project', 'report', 'text', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'team', 'name', 'salty', 'fish', 'captain', 'jinning', 'li', 'netid', 'member', 'jialong', 'yin', 'jianzhe', 'sun', 'introduction', 'choose', 'main', 'task', 'sentiment', 'analysis', 'given', 'tweet', 'determine', 'whether', 'first', 'built', 'model', 'using', 'pretrained', 'lstm', 'used', 'response', 'data', 'train', 'beat', 'baseline', 'make', 'use', 'context', 'also', 'research', 'stateofart', 'network', 'models', 'bert', 'bceloss', 'finetune', 'parameters', 'training', 'added', 'fully', 'connected', 'layer', 'output', 'result', 'method', 'best', 'achieved', 'precision', 'recall', 'f', 'score', 'respectively', 'abbreviation', 'long', 'shortterm', 'memory', 'special', 'kind', 'rnn', 'solves', 'deficiency', 'gradient', 'vanishing', 'exploding', 'longterm', 'rnns', 'consists', 'three', 'gate', 'structuresforget', 'input', 'fig', 'overall', 'structure', 'forget', 'implemented', 'sigmoid', 'looks', 'outputs', 'ht', 'xt', 'value', 'denoted', 'number', 'cell', 'state', 'ct', 'timestamp', 'update', 'information', 'process', 'two', 'steps', 'step', 'decide', 'get', 'updated', 'second', 'tanh', 'create', 'vector', 'new', 'candidate', 'values', 'previous', 'calculated', 'parts', 'put', 'multiply', 'ot', 'tried', 'pytorch', 'layers', 'case', 'classifications', 'not_sarcasm', 'see', 'without', 'finetuning', 'probably', 'perform', 'well', 'dealing', 'term', 'dependency', 'problems', 'try', 'another', 'better', 'performances', 'python', 'trained', 'intel', 'x', 'cpu', 'devices', 'cores', 'code', 'found', 'httpsgithubcomjinninglicourseproject', 'please', 'refer', 'manual', 'section', 'usage', 'logits', 'ensemble', 'language', 'representation', 'unlabeled', 'finetuned', 'additional', 'different', 'nlp', 'tasks', 'learn', 'bidirectional', 'word', 'left', 'right', 'compared', 'static', 'embedding', 'learned', 'wordvec', 'berts', 'architecture', 'multilayer', 'transformer', 'encoder', 'based', 'original', 'implementation', 'described', 'vaswani', 'et', 'al', 'shown', 'unsupervised', 'pretrain', 'masked', 'mlm', 'percentage', 'tokens', 'random', 'hidden', 'vectors', 'corresponding', 'mask', 'fed', 'softmax', 'vocabulary', 'prediction', 'next', 'sentence', 'nsp', 'cls', 'token', 'classify', 'sentences', 'continuous', 'jointly', 'pretraining', 'initialized', 'tuned', 'labeled', 'downstream', 'procedure', 'since', 'obtained', 'art', 'eleven', 'published', 'variants', 'work', 'proposed', 'push', 'performance', 'big', 'forward', 'xlnet', 'albert', 'load', 'weights', 'pytorchtransformers', 'bookscorpus', 'words', 'english', 'wikipedia', 'dataset', 'splitted', 'samples', 'validation', 'tune', 'hyperparameters', 'find', 'epochs', 'loss', 'starts', 'grow', 'due', 'limited', 'finally', 'whole', 'including', 'nvidia', 'titan', 'v', 'gpu', 'machine', 'figure', 'relatively', 'low', 'around', 'epoch', 'high', 'overfitting', 'mainly', 'size', 'small', 'tries', 'overfit', 'rather', 'generalize', 'patterns', 'observed', 'results', 'therefore', 'take', 'submission', 'order', 'improve', 'testset', 'submit', 'several', 'livedatalab', 'onlinejudge', 'system', 'collect', 'scores', 'similar', 'highest', 'addition', 'precisions', 'recalls', 'varied', 'effective', 'taking', 'average', 'neural', 'vglogit', 'ogit', 'n', 'l', 'argmax', 'red', 'argmaxavglogit', 'p', 'improves', 'table', 'improvement', 'conclusion', 'accomplish', 'beats', 'evaluate', 'download', 'checkpointzip', 'httpsdrivegooglecomfilednruczydqyoyrjlepfkztfpqjbbuaviewusps', 'haring', 'unzip', 'mkdir', 'checkpoint', 'checkpointrun', 'mv', 'checkpointruncheckpoint', 'generating', 'predictions', 'evaluatepy', 'run', 'use_bert', 'device', 'modify', 'ensemble_paths', 'ensemblepy', 'evaluating', 'runx', 'eg', 'runrun', 'start', 'evaluation', 'mainpy', 'lr', 'e', 'use_valid', 'eval', 'batch_size', 'batch', 'learning', 'rate', 'optimizer', 'continue', 'set', 'valid', 'split_ratio', 'trainset', 'appendix', 'screenshot', 'rank', 'progress', 'members', 'completed', 'surveyed', 'related', 'background', 'knowledge', 'researches', 'quick', 'basic', 'includes', 'one', 'dense', 'currently', 'achieve', 'pending', 'trying', 'develop', 'complex', 'framework', 'help', 'popular', 'architectures', 'proved', 'hyperparameter', 'adjusting', 'facing', 'challenges', 'challenge', 'part', 'provided', 'every', 'piece', 'reply', 'however', 'sometimes', 'agree', 'performs', 'much', 'regularization', 'reducing', 'proposal', 'join', 'questions', 'answer', 'q', 'prepared', 'stateoftheart', 'classifiers', 'deep', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'include', 'perceptron', 'mlp', 'support', 'svm', 'naive', 'bayes', 'decision', 'tree', 'logistic', 'regression', 'etc', 'gru', 'cnn', 'bilstm', 'convrnn', 'transform', 'apply', 'forest', 'programming', 'course', 'video', 'introduce', 'youtube', 'httpsyoutubeesrbtynjy', 'uploaded', 'github', 'exceeds', 'mb', 'source', 'httpsdrivegooglecomfilednruczydqyoyrjlepfkztfpqjbbuaviewuspsharing', 'competetion', 'format', 'line', 'contains', 'json', 'object', 'following', 'fields', 'classified', 'conversation', 'note', 'ordered', 'list', 'dialogue', 'ie', 'elements', 'c', 'label', 'id', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'test', 'instance', 'example', 'user', 'dont', 'obviously', 'care', 'wouldve', 'moved', 'along', 'instead', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'immediate', 'goal', 'predict', 'optionally', 'full', 'statistics', 'weve', 'provide', 'instructions', 'follow', 'mps', 'private', 'copy', 'repo', 'add', 'webhook', 'connect', 'livedatalabplease', 'comma', 'separated', 'file', 'answertxt', 'containing', 'headers', 'exactly', 'rows', 'row', 'must', 'predicted', 'twitter_sarcasm', 'twitter_not_sarcasm']
https://github.com/jkghub/CourseProject	"what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. captain: jeffrey kuhn (kuhn9) i plan to complete the project on my own. which paper have you chosen? chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 which programming language do you plan to use? python can you obtain the datasets used in the paper for evaluation? no, not the identical dataset. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? yes, it's possible to get a very similar dataset. i can retrieve articles and reviews from bbc / cnn. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'jeffrey', 'kuhn', 'plan', 'complete', 'project', 'paper', 'chosen', 'chengxiang', 'zhai', 'atulya', 'velivelli', 'bei', 'yu', 'crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'data', 'kdd', 'new', 'york', 'ny', 'usa', 'doi', 'programming', 'language', 'use', 'python', 'obtain', 'datasets', 'used', 'evaluation', 'identical', 'dataset', 'answer', 'question', 'similar', 'eg', 'recent', 'version', 'another', 'nature', 'yes', 'possible', 'get', 'retrieve', 'articles', 'reviews', 'bbc', 'cnn', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/joel515/CourseProject	"joel kopp (joelk2) cs 410 - fall 2020 final project progress report 1. completed: abstracts have been scraped from the acm digital library for two prominent data mining researchers: jiawei han (uiuc) and philip s. yu (uic). to match the temporal time frame, abstracts were only obtained up until the end of 2005. it is likely that han's abstracts were used in the actual paper, but i am not so sure about yu. label author school link author a jiawei han uiuc acm dl author b philip s. yu uic acm dl an initial plsa model was repurposed using the model created in mp3. a ""frequent pattern mining"" topic was found withing han's abstracts, including a good match of coverage, but not for yu's. i will attempt to contact the author to determine see if i can find the name of the second author. otherwise, i will proceed with the two authors named above. (the scraper and initial data can be found here.) 2. pending: i need to implement the fixed coverage cplsa model described in the paper. at this point i feel i understand the mechanics behind it, it is just a matter of coding it. following that, i will compile the documentation and compose the video tutorial. 3. challenges: the main challenge is duplicating the data set used by the authors. while this is not entirely necessary, i feel that it would provide a good sanity check for my work if the data sets match. joel kopp (joelk2) cs 410 - fall 2020 final project proposal 1) team members joel kopp (joelk2) 2) chosen paper subtopic - contextual text mining paper - ""a mixture model for contextual text mining"" experiment - temporal-author-topic analysis 3) programming language python 4) datasets the dataset will be comprised of abstracts from 2 authors with substantial works that span a large-enough time frame. the abstracts will be scraped from profiles in the acm digital library, similar to the experiment in the paper itself. a sample abstract can be found here: https://dl.acm.org/doi/10.1145/3410992.3410995. a mixture model for contextual text mining qiaozhu mei department of computer science university of illinois at urbana-champaign urbana,il 61801 qmei2@uiuc.edu chengxiang zhai department of computer science university of illinois at urbana-champaign urbana,il 61801 czhai@cs.uiuc.edu abstract contextual text mining is concerned with extracting topical themes from a text collection with context information (e.g., time and location) and comparing/analyzing the variations of themes over different contexts. since the topics covered in a document are usually related to the context of the doc- ument, analyzing topical themes within context can poten- tially reveal many interesting theme patterns. in this paper, we propose a new general probabilistic model for contextual text mining that can cover several existing models as special cases. specifically, we extend the probabilistic latent seman- tic analysis (plsa) model by introducing context variables to model the context of a document. the proposed mixture model, called contextual probabilistic latent semantic anal- ysis (cplsa) model, can be applied to many interesting mining tasks, such as temporal text mining, spatiotempo- ral text mining, author-topic analysis, and cross-collection comparative analysis. empirical experiments show that the proposed mixture model can discover themes and their con- textual variations effectively. categories and subject descriptors: h.3.3 [informa- tion search and retrieval]: text mining general terms: algorithms keywords: contextual text mining, context, mixture model, em algorithm, theme pattern, clustering 1. introduction a text document is often associated with various kinds of context information, such as the time and location at which the document was produced, the author(s) who wrote the document, and its publisher. the contents of text doc- uments with the same or similar context are often corre- lated in some way. for example, news articles written in the period of some major event all tend to be influenced by the event in some way, and papers written by the same researcher tend to share similar topics. in order to reveal in- teresting content patterns in such contextualized text data, it is necessary to consider context information when ana- permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. kdd'06, august 20-23, 2006, philadelphia, pennsylvania, usa. copyright 2006 acm 1-59593-339-5/06/0008 ...$5.00. lyzing the topics covered in such data. indeed, there have been several recent studies in this direction. for example, the time stamps of text documents have been considered in some recent work on temporal text mining [9, 16, 14, 4]. also, author-topic analysis is studied in [17], and cross- collection comparative text mining is studied in [18]. all these studies consider some kinds of context information, i.e., time, authorship, and subcollection. time, authorship, and subcollection are by no means the only possible context information of a document. in fact, any metadata entry of a document can indicate a context and all documents with the same value of this metadata en- try can be considered as in the same context. for example, the source of a news article, the author's age group, occu- pation, and location of a weblog article, and the citation frequency of a research paper, are all reasonable context information. moreover, a document may belong to multi- ple contexts, and any combination of its metadata entries makes a ""complex"" context. by analyzing the variations of topics over these contexts, a lot of interesting text mining tasks can be addressed, such as spatiotemporal text mining, author-topic evolutionary analysis over time, and opinion comparison over different age groups and occupations. however, existing techniques are usually tuned for some specific tasks, and are not applicable to consider other kinds of contexts. for example, one cannot directly use the tem- poral text mining techniques to model the occupation of authors. this indicates a serious limitation of existing con- textual analysis of themes: every time when a new combina- tion of context information is to be considered, people have to seek for solutions in an ad hoc way. therefore, it is highly desirable to introduce a general text mining problem, contextual text mining, which is abstracted from a family of text mining tasks with various types of contextual analysis. it is desirable to derive a model that is highly general to conduct the common tasks of these specific contextual text mining problems, and easy to be applied to each of them with appropriate regularization. in this work, we define the general problem of contex- tual text mining (ctxtm) and its common tasks, which is abstracted from a family of specific text mining problems. we extend the probabilistic latent semantic analysis (plsa) model to incorporate context information, and develop a contextual probabilistic latent semantic analysis (cplsa) model to facilitate contextual text mining in a general way. by fitting the model to the text data to mine, we can (1) discover the global salient themes from the collection of doc- uments; (2) analyze the content variation of the themes in 649 research track poster any given view of context; and (3) analyze the coverage of themes associated with any given context. these tasks are general and can be easily applied to differ- ent specific contextual text mining problems. in this paper, we show that many existing contextual theme analysis prob- lems can be defined as special cases of ctxtm, and can be solved with regularized versions of the mixture model we proposed, corresponding to the context information and the mining tasks it involves. although it may not be the only possible model for contextual text mining, the model is quite flexible to adapt different assumptions. 2. contextual text mining given a collection of documents with context information, we assume that there is a set of topics, or themes in the col- lection which vary over different contexts. our goal is gen- erally to conduct context-sensitive analysis of these themes. as stressed in previous work [14], a theme in a contextual- ized text collection d is a probabilistic distribution of words that characterizes a semantically coherent topic or subtopic. without loss of generality, we will assume that there are al- together k major themes in our collection, th = {th1,..., thk}. to model the context of a document, we introduce a con- cept called context feature, which is defined as any meta-data of a document (e.g., the time stamp in temporal text mining or authorship in author-topic analysis). the context that a document belongs to can be indicated by the context fea- tures of this document, which is formally defined as follows: definition 1 (context) let f = {f1, f2, ..., f|f |} be a set of context features. a context c in a document collection is decided by any combination of context fea- tures in f, formally c  2|f|. the whole set of possi- ble contexts is denoted as c = {c1, ..., cn}. suppose d = {(d1, c1), ..., (d|d|, c|d|)} is a collection of documents, each document di is a sequence of words from a vocabulary set v = {w1, ..., w|v |}, and ci  f is a set of context features which are associated with the document di. a document di belongs to a context c iff. ci  c. this tells us that a document can belong to multiple contexts. in another word, the contexts are possible to overlap. in contextual text mining, our goal is to analyze the top- ics/subtopics in such a text collection in a context-sensitive way. specifically, we would like to model the k major themes and how they vary according to different contexts, and would also like to model the coverage of different themes in a doc- ument or documents that share certain kinds of context. to accommodate context-sensitive theme analysis, we con- sider variations of these k themes over different contexts. for example, if the context we are interested in is time, we will assume that there is a potentially distinct ""version"" of the k themes in each different time period; different such ""ver- sions"" model the variations of themes across time stamps. we formally define such a variation as a view of themes. definition 2 (view) a view of themes in a contextu- alized text collection d is a sequence of themes thi1, ..., thik, where thil is the variation of theme thl according to view vi. we will assume that there are n views in our collection, v1, ..., vn, each corresponds to a context ci. therefore, a doc- ument is assumed to potentially have multiple views; pre- cisely which views are taken depends on the document and its context. each view vi is assumed to be taken in any doc- uments in the context ci, which can also be overlapping. definition 3(context support) the support of a con- text ci, s(ci) is the set of documents in context ci, i.e., s(ci) = {dj|cj  ci}. since each context is associated with a view, we also call s(ci) as the support of the view vi. to analyze the strength of themes, we further model the variable coverage of different themes in a document. for ex- ample, some documents would favor some particular themes and thus would have a larger coverage of them. definition 4 (coverage) a coverage of themes in a document (kj) is a distribution over the themes p(l|ki). clearly, k l=1 p(l|kj) = 1. we will assume that there are m distinct theme coverages in our collection, k1, ..., km. for example, if we assume that each document has a potentially distinct theme coverage, then m = |d|. in general, however, a document can cover themes according to multiple coverages. for example, if we are interested in modeling theme coverage associated with time stamps, we may assume that the actual theme coverage in a document would be a mixture of the document-specific theme coverage and another theme coverage associated with the time context of the document. we use c(kj) to denote the contexts where the coverage kj is applicable, and we also define the support of a coverage in the same way as we define that of a context. definition 5 (coverage support) the support of a coverage kj, s(kj) is the set of documents in which the cov- erage kj is taken, i.e., s(kj) = {di|c  c(kj) s.t. ci  c}. the latent structure of themes, views and coverages in a contextualized document collection is illustrated in figure 1. view0: th01, th02, .... , th0k view1: th11, th12, .... , th1k viewn: thn1, thn2, .... , thnk .... theme: 1, 2, .... , k coverage0: coverage1: coveragem: .... .... .... .... c0 c1 cn c2 collection document contexts figure 1: the theme-view-coverage structure in a text collection with these definitions, the task of contextual text mining (ctxtm) can be defined as to recover the n views, vi = (thi1, ..., thik), i = 1, ..., n, and the m theme coverages k1, ..., km from the collection d, and to analyze them in a context-sensitive way. there are many different ways to an- alyze the views and theme coverages. below we discuss a few interesting cases. 1. theme extraction: we may extract the global salient themes. although each theme thl varies in different contexts, it is also beneficial to have an explicit model for thl in a global view. basically, this will give us the common information that is shared by all the variations of thl in all dif- ferent contexts. in practice, we always include a global view v0, which corresponds to a global context c0 = f. clearly, all documents di  d belong to c0 since ci  c0. 2. view comparison: we may compare the n views. the comparison of a theme thl from different views usually represents the content variation of thl corresponding to dif- 650 research track poster ferent contexts. by comparing thil for each view vi which corresponds to context ci, we can analyze the influence of the context ci on the contents of thl. 3. coverage comparison: we may compare the m cov- erages. the variations of p(l|kj) can tell us how likely thl is covered by the documents in the coverage support s(kj). by associating p(l|kj) within contexts c(kj) that kj is applica- ble, we can analyze how closely a theme is associated to a context, or how context-sensitive a theme is. 4. others: with contextual text mining, we can also analyze other problems such as the influence of an individ- ual context feature on the theme coverage, e.g., the theme- location distribution in spatiotemporal theme analysis. among these cases, 2 and 3 are the most important, which distinguish contextual text mining from the traditional theme extraction work, and the application of them facilitate other types of analysis. with the definition of the general problem of contextual text mining (ctxtm), we can show that some specific con- textual text mining problems are special cases of ctxtm. for example, in temporal text mining, each context feature is a time stamp. therefore, a context is either a time stamp or a set of consecutive time stamps, or time period. a view of themes is taken in all the documents in the corresponding time. the goal of temporal text mining is mainly to compare the coverage variation over different contexts (e.g., theme life cycles in [14]), and sometimes also the content variation of themes over different views, (e.g., evolutionary theme pat- tern in [14]). in author-topic analysis, each context feature is an author, and each context is either an author or a set of authors. each view is then taken in the document with the same author or authors. we are interested in comparing the content variations over different views (authors) [17]. 3. a contextual mixture model in this section, we propose an extension of the probabilis- tic latent semantic analysis (plsa) model [7, 8], called contextual probabilistic latent semantic analysis (cplsa) model, for contextual text mining. our main idea is to al- low a document to be generated using multiple views and multiple coverages. the views and coverages actually used in a document usually depend on its context, which could be the time or location where the document is written, the source from which the document comes, or any other meta- data. we first propose the general cplsa model, and then introduce two simplified versions of this model that are es- pecially suitable for two representative tasks of contextual text mining. 3.1 the cplsa model in cplsa, we assume that document d (with context c) is generated by generating each word in it as follows: (1) choose a view vi according to the view distribution p(vi|d, c). (2) choose a coverage kj according to the cov- erage distribution p(kj|d, c). (3) generate a word using thil. formally, the log-likelihood of the whole collection is log p(d) =  (d,c)d  wv c(w, d) log( n  i=1 p(vi|d, c) x m  j=1 p(kj|d, c) k  l=1 p(l|kj)p(w|thil)) the parameters are the view selection probability p(vi|d, c), the coverage distribution selection probability p(kj|d, c), the coverage distribution p(l|kj), and the theme distribu- tion p(w|thil). as a mixture model, we have a total of n x k multino- mial distribution component models. each set of k multino- mial distributions, thi1, ..., thik, represents a potentially dis- tinct view of the topics that we are interested in. how- ever, while we can potentially use all the views to generate a document, often the generation of a particular document d in a particular context c only involves a subset of these views. this is because in any interesting context mining scenario, different views generally have different supporting documents, though it is also common for the views to over- lap in some supporting documents. more specifically, the view selection distribution p(vi|d, c) determines which views will actually be used when generat- ing words in document d. this distribution would assign zero probabilities to those views that are not selected. for example, if the views that we are to model correspond to the temporal context of a document and we have one global view spanning in the entire time period, then a document at time point ti would be generated using two different views - the view corresponding to time point ti and the global view, which is applied to all the documents. orthogonal to the choice of views, we also assume that we have choices of theme coverage distributions. the differ- ent coverage distributions are to reflect the uneven coverage of topics in different context and to capture the common coverage patterns. for example, if we suspect that the cov- erage may vary depending on the location of the authors, we can associate a particular coverage distribution to each location, which will be shared by all the documents in the location. after we learn such coverage distributions, we can then compare them across different locations. once again, exactly which coverage distributions to use would depend on the context of the document to be generated. the mixture model can be fit to a contextualized collec- tion d using a maximum likelihood estimator. the em al- gorithm [5] can be used in a straightforward way to estimate the parameters; the updating formulas are as follows: p(zw,i,j,l = 1) = p(t)(vi|d,c)p(t)(kj |d,c)p(t)(l|kj)p(t)(w|thil)  n i'=1 p(t)(vi' |d,c)  m j'=1 p(t)(kj' |d,c)  k l'=1 p(t)(l'|kj' )p(t)(w|thi'l' ) p(t+1)(vi|d, c) =  wv c(w,d)  m j=1  k l=1 p(zw,i,j,l=1)  n i'=1  wv c(w,d)  m j=1  k l=1 p(zw,i',j,l=1) p(t+1)(kj|d, c) =  wv c(w,d)  n i=1  k l=1 p(zw,i,j,l=1)  m j'=1  wv c(w,d)  n i=1  k l=1 p(zw,i,j',l=1) p(t+1)(l|kj) =  (d,c)d  wv c(w,d)  n i=1 p(zw,i,j,l=1)  k l'=1  (d,c)d  wv c(w,d)  n i=1 p(zw,i,j,l' =1) p(t+1)(w|thil) =  (d,c)d c(w,d)  m j=1 p(zw,i,j,l=1)  w'v  (d,c)d c(w',d)  m j=1 p(zw',i,j,l=1) however, since the model has many parameters and has a high-degree of freedom, fitting it with a maximum like- lihood estimator, in general, would face a serious problem of multiple local maxima. fortunately, in contextual text mining, we almost always associate them with appropriate partitions of context. as a result, the model is often highly constrained. for example, if all we are interested in is to compare non-overlapping views across different time, then p(kj|d, c) becomes a delta function, i.e., p(kj|d, c) = 1 if and only if kj is the coverage distribution for the time context of d, and p(kj|d, c) = 0 for all other kj's. unfortunately, even with such constraints, the model may 651 research track poster still have many free parameters to estimate. one possibil- ity is to add some parametric constraint such as assuming all coverage distributions are from the same dirichlet distri- bution as done in lda [2], which would clearly reduce the number of free parameters; indeed, we can easily generalize our model in the same way as lda generalizes plsa [8]. however, one concern with such a strategy is that the para- metric constraint is artificial and may restrict the capacity of the model to extract discriminative themes, which is our goal in contextual text mining. another approach is to fur- ther regularize the estimation of the model by heuristically searching for a good initial point in em; specific heuristics would depend on the particular contextual text mining task. this approach is adopted in our experiments and will be fur- ther discussed in section 3.2. in order to model the noise (e.g., common english words) in the text, we could designate the first theme as modeling such noise. that is, all th1j's will be set to model the noise. we may further tie all of them so that we have just one common background unigram language model th1. this can also be regarded as applying an infinitely strong prior on the first theme in all views. 3.2 special versions of cplsa considering that the most important tasks of contextual text mining are view comparison and theme coverage com- parison across contexts, as discussed in section 2, we in- troduce two special cases of cplsa, which are particularly useful to do these two tasks. we first introduce the special version of cplsa to facili- tate view comparison. in some cases, we are only interested to model the content variation of themes across contexts, e.g., when we are analyzing the theme evolutions over time [14], or comparing the common themes and corresponding specific themes across subcollections [18]. in these cases, we can fairly assume that the theme coverage over contexts is fixed, thus does not depend on the contexts that a docu- ment is in. under this assumption, the m j=1 p(kj|d, c) in the model will be simplified as m j=1 p(kj|d). if we further assume that there is only one coverage k applicable to each document, the log-likelihood function can be written as  (d,c)d  wv c(w, d) log( n  i=1 p(vi|d, c) k  l=1 p(l|kd)p(w|thil)) where kd is the coverage associated with the document d. we call this simplified version of model as fixed-coverage contextual mixture model (fc-cplsa). if we have three views, where one is the global view and the other two correspond to subcollections, it will allow us to compare the common themes and specific themes in the two views, as discussed in [18]. if each view corresponds to a time stamp, this model will allow us to analyze the content evolutions of themes over time, as discussed in [14]. in some other cases, we are only interested to model the variation of theme coverage over contexts, e.g., when we are analyzing the life cycles (i.e., strength variations over time) of themes. in these cases, we are not interested in the content variation of local themes, and thus make the assumption that different views of themes are stable. with this assumption, we can simplify the model likelihood as  (d,c)d  wv c(w, d) log( m  j=1 p(kj|d, c) k  l=1 p(l|kj)p(w|thl)) where p(w|thl) is the global word distribution of theme l, which does not vary across contexts. we call this simplified model as fixed-view contextual mixture model (fv- cplsa). if the only context feature is time, we have two types of coverage distributions kd and kt , where kd is the coverage distribution corresponding to each document and kt is the theme coverage for each time period. this will allow us to model the theme life cycles, as introduced in [14]. if we have two context features, time and location, and each context is a combination of time stamp and location, we also have two groups of theme coverage distributions, kd and kt l. this will allow us to analyze the spatiotemporal theme distributions in a spatiotemporal text mining framework. with these two special simplified versions, the cplsa model can be applied to solve a broad family of text mining problems with contextual analysis. 4. experiments we apply the general cplsa model presented in section 3 to three different datasets and text mining tasks. empirical results show that this model can model the themes and their variations across different contexts effectively. 4.1 temporal-author-topic analysis in this experiment, we evaluate the performance of the cplsa models on author-topic comparative analysis. if two authors have similar research interest, we assume that there is a set of common themes which can be found in their publications. since different author has different preferences and focuses, the content of these themes will also vary cor- responding to each author. previous work on author-topic analysis only consider the authorship of documents as the context [17]. intuitively, however, the topics that an au- thor favors also evolute over time. we add another type of context information, i.e., publication time, to test the effec- tiveness of our model on handling multiple types of contexts. we collect the abstracts of 282 papers published by two famous data mining researchers from acm digital library. we split the whole time line into three spans: before the year 1993, from 1993 to 1999, and after the year 1999. this will give us 12 possible views as in table 1. since we are not interested in analyzing the coverage variations across contexts (i.e. time and authors), we assume the coverage of themes only depends on documents but not on the contexts. #context views features (a and b are two authors) 0 global view 1 a; b; < 92; 93 ~ 99; 00 ~ 05 a, < 92; a, 93 ~ 99; a, 00 ~ 05 2 b, < 92; b, 93 ~ 99; b, 00 ~ 05 table 1: possible views in author-topic analysis therefore, we use the fc-cplsa model presented in sec- tion 3.2 to model the themes and their views corresponding to different contexts. our goal is thus to estimate all the parameters in the regularized model, and compare p(w|thjl) over different view vj. to avoid the em algorithm being trapped in suboptimal local maximums, we need to make associations between each thjl to its corresponding global view thl. we achieve this by selecting a good starting point for the em algorithm. specif- ically, we begin with a prior of a large p(v0|d, c) to view 0, which is the global view. this ensures us to get the strong signal of global themes instead of local biased themes. in the following iterations, we gradually decay this prior and 652 research track poster vews: global author a author b author a: 2000~ 1993~1999 2000~ pattern 0.110689 project 0.0444375 research 0.0550772 close 0.0805878 rule 0.0616733 index 0.0430914 frequent 0.040613 itemset 0.0432976 next 0.0308254 pattern 0.072078 distribute 0.0567852 graph 0.0343051 frequent-pattern 0.0393 intertransaction 0.03072 transition 0.0308254 sequential 0.0462879 researcher 0.0324659 web 0.0306886 author sequential 0.0359059 support 0.0264818 panel 0.0275384 min support 0.03526 algorithm 0.0217309 gspan 0.0273849 topic method 0.0214187 associate 0.0258175 technical 0.0275384 length 0.0315721 over 0.0162951 substructure 0.02005 analysis pattern-growth 0.02035 frequent 0.0181942 technology 0.0258949 threshold 0.0296533 fdm 0.0227141 gindex 0.016431 condense 0.0184008 closet 0.0176081 article 0.0154127 frequent 0.0196054 study 0.0116576 bide 0.016431 increment 0.0138457 apriori 0.0170468 revolution 0.0154127 top-k 0.0176324 scable 0011357. magnitude 0.0151909 constraint 0.0130636 prefixspan 0.0130272 tremendous 0.0154127 without 0.0175662 pass 0.011357 size 0.0114699 push 0.0103159 pseudo 0.0109016 innovate 0.0154127 fp-tree 0.0102471 disclose 0.011357 xml 0.010954 table 2: comparison of the content of theme ""frequent pattern mining"" over different views terminate the em algorithm early when the average view distribution for view 0 (i.e.,  dd p(v0|d, c)/|d|) drops under a threshold, say 0.1. this gives us a good starting point for the em algorithm. then, we do this procedure again for multiple trials and select the best start point (i.e., the one with the highest likelihood). finally, we run the em algorithm beginning with this selected start point until it converges. the results for this experiment are selectively presented in the following table. in table 2, we see that the content of this selected theme varies over different views. from the global view, in which all documents are included, we can tell that this theme is talking about frequent pattern mining. from the view of au- thor a, we see specific frequent pattern mining techniques such as database projection, apriori, prefixspan, and closet. from the view of author b, we see that he is not as deep into techniques of mining frequent patterns, but rather more as- sociated with introductional and innovated work of frequent pattern mining. from the view of the years before 1993, the corresponding theme barely has any connection to fre- quent pattern mining. this is reasonable however, since the first and most influential paper of frequent pattern mining was published in 1993. from the view of year 1993 to 1999, we see that this theme evolutes to talk about association rules, which is perhaps the most important application of frequent pattern mining at that time. specific techniques, such as fdm (fast distributed mining of associate rules) ap- pears high in the word distribution. from the view of the years after 1999, it is interesting to see the appearance of more new applications of frequent pattern mining, such as graphs and web. the terms corresponding to specific tech- niques of mining graph patterns and sequential patterns, e.g., gspan and bide, are with high probabilities in the theme word distribution. in the view corresponding to a combined context (author a and after 1999), the top terms include ""close"", ""top-k"", and ""fp-tree"", which well reveal the pref- erences of author a in frequent pattern mining. the view specific theme for the combined context ""author b after 1999"" is not well associated with the global theme again, which is consistent to the fact that author b is not activate in frequent pattern mining any more after 2000. this experiment shows that the cplsa model can ex- tract and compare the theme variations over different views effectively. 4.2 spatiotemporal theme analysis in this experiments, we show the effectiveness of cplsa models on spatiotemporal analysis of themes. the context features we consider in this experiment is time stamps and location information of documents. the tasks of this spe- cific contextual text mining problem are: (1) extract global themes from the collection, which are shared by different time and locations; (2) for each time stamp, compute the distribution of theme and locations, from which we can draw the theme distribution snapshots over locations; and (3) compare the views of themes across contexts. it is interesting to see that the second task is not a com- mon task of ctxtm. let a context c be denoted as (t, l) where t and l refer to time and location, the task is to esti- mate p(k|d, (t, l)) for each k, and p(th, l|t) for any t: p(th, l|t) =  k:(t,l)c(k) p(th|k)p(k|t, l)p(l|t) we collect 9377 msn space documents with a time-bounded query submitted to google blogsearch, with the keywords ""hurricane katrina"". in this dataset, 7118 documents pro- vide explicit location information, and the locations of oth- ers are tagged as ""unknown"". we segment the time stamps into six weeks, extract and compare the common themes over different locations in united states. each combination of the 50 states and six week consists a unique ""context"", which gives us 50*6 = 300 contexts. since there are many contexts, it is difficult to estimate all the views precisely. since we are only interested in the strength variations of global themes over all the contexts, it is reason- able to simplify the model by assuming that the content of the global themes does not vary over contexts. therefore, we use the fv-cplsa model presented in section 3.2 to model the global themes and their coverage variations over time and locations. we further assume that p(kc|d, c) is a constant that controls the impact of the context on selecting the coverage of themes. by estimating the free parameters, our goal is to compute the theme-location coverage: p(th, l|t) = p(th, l, t)  th'  l' p(th', l', t) = p(th|kt,l)p(t, l)  th'  l' p(th'|kt,l')p(t, l') where p(kt,l|t, l) = 1, p(t, l) can be computed from the word count in time period t at location l divided by the total word count in the collection. with p(th, l|t) computed, we can visualize the theme-location coverage by fulfill p(th, l|t) in a snapshot map. in figure 2, we show one of the 10 global themes we extracted from the blog dataset and its theme-location coverage at different time. from the top terms in this theme, we can infer that this theme is talking about aid and donations that were made to the hurricane affected areas. figure 2 well demonstrates the evolution of theme-location coverage over different time periods. a detailed description of theme variation over time and location can be found in [13]. the next task is similar to the experiment in section 4.1, which is to compare the views of themes across contexts. specifically, we partition the states into four groups: af- fected states; peripheral states; coast states; and inland states. we partition the time line into spans with the length of two weeks. then we use the fc-cplsa model to com- pare the views of themes corresponding to different contexts. the results are selectively shown in table 3. it is easy to see that from the view of ""periphery states"", the content of the theme ""donation"" is quite similar to the common theme extracted in figure 2. people tend to talk about donations and supplies with food. however, from the view of ""affected areas"", which corresponds to the hur- 653 research track poster (a) week1: 08/23-08/29 (b) week three:09/06-09/12 (c) week five: 09/20-09/26 figure 2: selected snapshots for theme ""aid and donation"" of hurricane katrina. affected states peripheral states week1-2 week5-6 medical 0.0192 donate 0.0238 donate 0.0351 their 0.0142 comfort 0.0141 relief 0.0204 help 0.0296 help 0.0120 health 0.0137 red 0.0132 relief 0.0181 family 0.0091 ship 0.0133 cross 0.0105 red 0.0151 rebuild 0.0088 volunteer 0.0129 link 0.0086 please 0.0143 school 0.0080 hospital 0.0090 food 0.0078 cross 0.0142 children 0.0068 team 0.0081 medical 0.0074 need 0.0134 need 0.0061 assist 0.0081 supply 0.0069 volunteer 0.0120 health 0.0059 care 0.0072 charity 0.0067 victim 0.0084 evacuee 0.0057 service 0.0053 volunteer 0.0060 blood 0.0057 parish 0.0051 table 3: comparison of the content of the theme ""aid and donation"" over different views ricane affected states such as louisiana, people care more about medical aid and hospital cares. in the first two weeks, the view of this theme is still quite similar to the common theme. however in the last two weeks, we can notice that the ""helps"" become more about rebuilding and helping the returning evacuees. this group of experiments show that our general model is effective to analyze spatiotemporal theme patterns. 4.3 event impact analysis in many scenarios, a collection of documents are usually associated with a series of events. for example, weblogs usually reflect people's opinions about the events happen- ing. the research topics covered by scientific literatures are also likely to be affected by the influential related events, such as the invention of www, and the proposing of a new research direction. the impact of such event can usually be analyzed by comparing the themes in the documents pub- lished before versus after the event. in this experiment, we apply cplsa on the problem of event impact analysis. since each event gives a possible segmentation of the time line, this analysis also provides an evaluation of cplsa on modeling overlapping views that are not orthogonal to each other. although the experiments in previous sections also covers some overlapping views (e.g., a view corresponding to a location and a view corresponding to a time stamp), these overlaps are caused by different types of, or orthog- onal context features (e.g., time and location). in reality however, the overlapping views with the same type of con- text feature is desirable. for example, a business analyzer may need to analyze and compare the customers' opinions in the first week, in the first month, in the first season, or in the first year after a new product is released. one strength of our model is that we allow the analysis views that overlap with each other. in this experiment, we evaluate our model on event impact analysis and overlapping view analysis. we collect the abstracts of 1472 papers published in 28 years' sigir conferences from acm digital library. we select two influential events to the information retrieval community in the 90s. one is the beginning of text re- trieval conferences (trec) in 1992, which provide large- scale standard text datasets and judgements for many re- trieval problems. the other is the introduction of language model into information retrieval in 1998, which began a genre of research and led to a lot of publications. our goal is to use the cplsa model to reveal the impact of these two events in ir research, i.e., how the content of research topics change after the two events. to achieve this, we assign the abstracts in sigir proceed- ings into four contexts, each corresponds to a time span. the first context includes all the documents were published be- fore 1993, in which is the first sigir conference after the start of trec. the second context contains documents pub- lished on or after that. the third context includes abstracts before the year 1998, in which the first paper of language model in information retrieval was published. the fourth context contains all abstracts published on or after 1998. it is clear that there are overlaps between these contexts. we also include a global view, which corresponds to all the abstracts in sigir proceedings. we use the same strategy as presented in section 4.1 to avoid the em algorithm to be trapped in unexpected local maximums. we extract 10 salient global themes from this collection and present the most interesting one. from the global view in table 4, we see that this theme is talking about retrieval models, especially term weight- ing and relevance feedback. the content of this common theme varies from different views. from the pre-trec view, which corresponds to the time before 1993, we see that vec- tor space model dominates, and boolean queries are men- tioned frequently. in the post-trec view, however, we no- tice that xml retrieval model has been paid more attention to. also, we see specific types of data (email) and other terms related to the nature of trec (e.g., collect, judge- ment, rank). it is more interesting when comparing the view ""pre-language model"" and ""post-language model"". we see that before 1998, the retrieval models are dominated by probabilistic models. after 1998, however, it is very clear that language model dominates the theme. the top ranked terms have changed to indicate language models, parame- ter estimations, likelihood and probability distributions, and language model smoothing. this is consistent with our prior knowledge. the overlapping views, for example pre-lm and pre-trec, do share some content but clearly with different focuses. pre-trec, which is more faraway, emphasizes vector space model while pre-lm emphasizes probabilistic models. this experiment shows that our method is effective to ana- lyze event impact and model the overlapping views. 5. related work the most relevant work is the probabilistic latent se- mantic analysis model (plsa) proposed by hofmann [7, 8], which models a document as a mixture of aspects, where each aspect is represented by a multinomial distribution over the whole vocabulary. our cplsa model is a natural ex- tension of plsa to incorporate context. to avoid overfitting in plsa, blei and co-authors proposed a generative aspect model called latent dirichlet allocation (lda), which could 654 research track poster views: global pre-trec post-trec pre-language model post-language model term 0.159983 vector 0.0514067 xml 0.0677684 probabilist 0.0777954 model 0.16867 relevance 0.0751814 concept 0.0297583 element 0.0212121 model 0.0431573 language 0.0752643 weight 0.0659849 extend 0.0297405 email 0.0197383 logic 0.0403557 estimate 0.0520434 feedback 0.0372254 model 0.0291697 collect 0.0191258 ir 0.0337741 parameter 0.0281169 sigir independence 0.031063 space 0.0236088 locate 0.0187425 boolean 0.028073 distribution 0.0268227 model 0.0309212 boolean 0.0151455 judgment 0.0140086 fuzzy 0.0201544 probable 0.0205655 frequent 0.0233021 function 0.0123171 rank 0.010205 algebra 0.0199632 smooth 0.0197662 probabilist 0.018762 u 0.00898533 overlap 0.00975133 probable 0.0124902 score 0.0166799 document 0.0173198 feedback 0.00860945 contextual 0.00936265 estimate 0.0119202 retrieval 0.0137085 assume 0.0172082 specify 0.0083182 solution 0.00913 weight 0.0111257 markov 0.0118979 dependency 0.0157547 correlate 0.00779721 subtopic 0.00791172 rank 0.0107045 likelihood 0.00585364 table 4: comparison of theme content over different views in sigir collection also extract a set of themes from a document collection [2]. lda, however, does not model context either. although we have not explored it, one can also make lda contextualized in the same way as we have done to plsa in this paper. re- cently, some extensions of this work have considered some specific types of context. for example, temporal context is considered in [6, 16, 4, 14]. multi-collection context is an- alyzed in [18]. author-topic analysis is proposed in [17]. li et al. proposed a probabilistic model to detect retrospec- tive news events by explaining the generation of ""four ws1"" from each news article [11]. our work is a generalization of these studies of specific context and provides a general prob- abilistic model which can be applied to all kinds of context. temporal context is also addressed in kleinberg's work on discovering bursty and hierarchical structures in streams [9] and some work on topic/event/trend detection and tracking (e.g., [1, 3, 12, 10, 15]). however, most of this work assumes one document only belongs to one topic and cannot be easily generalized to analyze other contexts. 6. conclusions in this paper, we present a study of the general problem of contextual text mining. we formally defined the basic tasks of contextual theme analysis, and proposed a novel prob- abilistic mixture model to extract themes and model their content and coverage variations over different, possibly over- lapping contexts. the problem definition and the proposed model are quite general and cover a family of specific contex- tual theme analysis problems and methods as special cases. empirical experiments on three different datasets show that the proposed model is effective for extracting the themes and comparing the views and coverages of themes across quite different contexts. our work is an initial step toward a general model for con- textual text mining. an important future research direction is to further study how to better estimate the proposed mix- ture model as discussed in section 3.1. another important future research direction is to create evaluation criteria and judgements so that we can quantitatively evaluate different contextual text mining approaches. 7. acknowledgments this work was in part supported by the national science foundation under award numbers 0425852, 0347933, and 0428472. 8. references [1] j. allan, j. carbonell, g. doddington, j. yamron, and y. yang. topic detection and tracking pilot study: final report. in proceedings of darpa broadcast news transcription and understanding workshop, 1998. 1who, when, where and what (keywords) [2] d. m. blei, a. y. ng, and m. i. jordan. latent dirichlet allocation. j. mach. learn. res., 3:993-1022, 2003. [3] s. boykin and a. merlino. machine learning of event segmentation for news on demand. commun. acm, 43(2):35-41, 2000. [4] c. c. chen, m. c. chen, and m.-s. chen. liped: hmm-based life profiles for adaptive event detection. in proceeding of kdd '05, pages 556-561, 2005. [5] a. p. dempster, n. m. laird, and d. b. rubin. maximum likelihood from incomplete data via the em algorithm. journal of royal statist. soc. b, 39:1-38, 1977. [6] t. l. griffiths and m. steyvers. fiding scientific topics. proceedings of the national academy of sciences, 101(suppl.1):5228-5235, 2004. [7] t. hofmann. probabilistic latent semantic analysis. in proceedings of uai'99. [8] t. hofmann. probabilistic latent semantic indexing. in proceedings of acm sigir'99. [9] j. kleinberg. bursty and hierarchical structure in streams. in proceedings of kdd '02, pages 91-101. [10] a. kontostathis, l. galitsky, w. m. pottenger, s. roy, and d. j. phelps. a survey of emerging trend detection in textual data mining. survey of text mining, pages 185-224, 2003. [11] z. li, b. wang, m. li, and w.-y. ma. a probabilistic model for retrospective news event detection. in proceedings of sigir'05, pages 106-113, 2005. [12] j. ma and s. perkins. online novelty detection on temporal sequences. in proceedings of kdd'03, pages 613-618, 2003. [13] q. mei, c. liu, h. su, and c. zhai. a probabilistic approach to spatiotemporal theme pattern mining on weblogs. in proceedings of www '06, pages 533-542, 2006. [14] q. mei and c. zhai. discovering evolutionary theme patterns from text: an exploration of temporal text mining. in proceeding of kdd'05, pages 198-207, 2005. [15] r. nallapati, a. feng, f. peng, and j. allan. event threading within news topics. in proceedings of cikm'04, pages 446-453, 2004. [16] j. perkio, w. buntine, and s. perttu. exploring independent trends in a topic-based search engine. in proceedings of wi '04, pages 664-668, 2004. [17] m. steyvers, p. smyth, m. rosen-zvi, and t. griffiths. probabilistic author-topic models for information discovery. in proceedings of kdd'04, pages 306-315, 2004. [18] c. zhai, a. velivelli, and b. yu. a cross-collection mixture model for comparative text mining. in proceedings of kdd'04, pages 743-748, 2004. 655 research track poster cs410 course project - fc-cplsa background this project attempts to duplicate the temporal-author-topic analysis in section 4.1 of the paper a mixture model for contextual text mining (kdd 2006) by qiaozhu mei and chengxiang zhai. this model replicates the fixed-coverage contextual mixture model (fc-cplsa) covered in section 3.2 of the research paper. the fc-cplsa model is a specialized version of the cplsa mixture model where the coverage over different contexts remains fixed. the experiment attempts to perform an author-topic comparitive analysis on reasearch paper abstracts between two different authors over three different time periods. the context features here are the author of the paper and the time which it was written. in this case, each context featre, and combinations thereof, are evaluated as different ""views"". the combination of all context features together form a global topic view. the mixture model is constructed such that each subview is then related to the global view, but specific to one of the two authors, one of the three timeframes, or one of the six combinations of author and timeframe. the following table from the reasearch paper illustrates the 12 applicable views more clearly: | # context features | views | | --------------------- | ------------------------------------------ | | 0 | global view | | 1 | author a; author b; < 1992; 1993 to 1999; 2000 to 2005 | | 2 | a and < 1992; a and 1993 to 1999; a and 2000 to 2005; b and < 1992; b and 1993 to 1999; b and 2000 to 2005 | the code works by essentially adding a ""view"" matrix to the vanilla plsa algorithm. this matrix holds the probability of a document/context belonging to a specific view. since a document and context has zero probability of belonging to a view that does not pertain to that context, the corresponding location of that document/view on the matrix is initially zeroed out. this is how the contextual features were incorporated as additional features to the mixture model. data an attempt was made to replicate the data used in the temporal-author-topic experiment of section 4.1, which originally consisted of the abstracts from ""two famous data mining researchers"" from the acm digital library prior to the papers publication in 2006. since the names of the two authors was not provided, an guess was made using the listing found here. abstracts were then scraped for jiawei han (uiuc) and philip s. yu (uic) published prior to 2006. the processed csv file containing the associated metadata can be found here. setup this setup assumes that the user has git and python >= 3.7 installed. clone this repository on a local workstation: git clone https://github.com/joel515/courseproject.git one the package is cloned, cd into the courseproject directory and run the setup.py installation script: python setup.py install this should pull the necessary dependencies to run the mixture model. if this fails, or if you prefer to install libraries manually, the list of dependencies is as follows: numpy pandas nltk the latest versions of each should suffice. test usage to use, you will either need to cd into the courseproject/cplsa folder, or use the relative or absolute path to the courseproject/cplsa/cplsa.py script. the output from either command will be a file titled ""cplsa-<timestamp>.out"" containing run metadata and a full list of topic/view coverages. quick and dirty to run the script using the data provided and achieve the optimal coverage results, at least the best results that i had achieved, run the following command: python cplsa.py ../data/all_abstracts.csv ""author==1:author==2"" ""year<=1992:year>=1993 and year<=1999:year>=2000"" -t 20 -p 100 -wi 50 -th 0.3 --nostem note that this will take some time to run on a normal workstation (roughly an hour). it will find an optimal solution for the 12 views with 20 different topics. word stemming is omitted from the vocabulary preprocessing. by default, it will run 50 different ""warmup"" runs to find the optimal starting point (up to 50 iterations each) with an artificially large prior of 100 set on the global view to ""ensure a strong signal from global themes"", as per the original research paper. each warmup run will iterate until the mean global view probability reaches 0.3 (slightly modified from the paper, which suggests 0.1), or until it hits 50 iterations. the optimal starting point (the one with the largest mle) is ""pickled"" and then restarted for the full, 1000 iteration analysis. convergence is reached when the difference between the previous log-likelihood and the current one is less than 0.001 (around 380 iterations or so for this dataset). quicker and dirtier you can also run a less optimal set of iterations to simply check that the package is running correctly: python cplsa.py ../data/all_abstracts.csv ""author==1:author==2"" ""year<=1992:year>=1993 and year<=1999:year>=2000"" -t 5 -w 2 -th 0.15 -e 0.1 --nostem this should run in much less time, but will give less than optimal, but decent, results. this time we are only asking to evaluate 5 topics with only 2 warm up runs, iterating until the mean global view probability reaches 0.15. the convergence criterion (i.e., the difference between the previous and current log-likelihood) is now only 0.1, so it should converge much quicker. general usage what follows is a description of the inputs and arguments of the fc-cplsa package for a general analysis. inputs there are 3 required inputs to run this context mixture model: a csv file containing the documents and associated metadata, and two strings containing boolean operations to categorize two columns of the metadata, separated by colons. csv file the csv file can contain any amount of information, as long as there is one column labeled text containing the documents to be evaluated, and two additional labeled columns containing metadata to use as context. for instance, the data associated with this project looks like the following: | id | author | year | text | | --- | -- | -------- | -------------------- | | 1 | 1 | 2005 | graphs have become ... | | ... | ... | ... | ... | | 363 | 2 | 1985 | the performance of ... | the text column contains the abstracts from either author 1 or 2. it is important to note the spelling and case of the column titles for the contextual metadata (author and year in this case), as they will be used in the following inputs to generate the views. note that the id column is ancillary in this case and hence ignored. view specification the next two inputs are used to generate the various contextual views to use in the mixture model. the format for the inputs should be strings enclosed in double quotes. each input will refer to only one of the metadata columns and contain multiple python-formatted boolean operations to perform on that column's metadata, with each operation separated by a colon. each boolean operation in the string is used to extract a one-feature view. the code will then combine the different combinations of boolean operations from the two inputs to extract two-feature views. in our example, the second input is ""author==1:author==2"", which consists of two valid python boolean operations to perform on the author column of metadata. the input will create two views, one consisting of the text from the author labeled 1, and the other consisting of the text from the author labeled 2. likewise, the third input performs similar boolean operations, this time on the year column (""year<=1992:year>=1993 and year<=1999:year>=2000""). this input contains three valid python boolean operations which will result in three one-feature views. specifically, one view containing text from years prior to 1993 (year<=1992), one view containing text from the period between 1993 and 1999 (year>=1993 and year<=1999), and one view containing text after 1999 (year>=2000). the code will automatically create two-feature views through merging each combination of boolean operations with a logical ""and"". so in our example, the code will create the following six additional operations: author==1 and year<=1992, author==1 and year>=1993 and year<=1999, author==1 and year>=2000, author==2 and year<=1992, author==2 and year>=1993 and year<=1999, and author==2 and year>=2000 in total, if there are n operations specified in the first input string, and m operations specified in the second string, we will end up with n + m + nm + 1 views. in our example, we will have one global view, five one-feature views, and six two-feature views, for a total of 12 views. numerical arguments -w, --warmup [integer, default=20] the number of warm-up e-m runs to perform to discover the best starting point. the mixture model will initialize the probability matrices randomly, leading to potentially local maxima. to find the optimal result, the code starts at different random points and uses the initial run that gives the maximum log-likelihood. -p, --prior [float, default=1.0] prior to assign to the global view probabilities. according to mei et. al., to ensure a strong signal from the global themes, we need to assign an artificially large prior to the global view probabilities. -th, --threshold [float, default=0.1] mean global view probability threshold for warm-up convergence. the warm-up iterations will run until the mean probability for all of the global views falls below this value. -wi, --warmup_iter [integer, default=25] maximum number of warm-up e-m iterations per run. it is possible for the mean global view probability to converge higher than the supplied threshold. in this case, a maximum number of iterations is specified to kill that warm-up run. this starting point will be discarded. -t, --topics [integer, default=10] number of global topics/themes to extract. -i, --iterations [integer, default=1000] maximum number of e-m iterations if mixture model convergence cannot be obtained. -e, --epsilon [float, default=0.001] minimum log-likelihood estimate error for convergence. e-m convergence occurs when the difference between the prior log-likelihood estimate and the current log-likelihood estimate falls below this value. flag arguments -s, --save if specified, will save out the corpus object containing the vocabulary and final matrix values as a pickled file upon e-m completion. this pickled file can be extracted later for further examination. preprocessor flags by default, the code will preprocess the vocabulary by performing a lower-case transformation, stopword removal, and porter word stemming. the code will also automatically remove any non-ascii characters, numbers, and any punctuation except -. the following flags can be used to override this automation. -noascii, --noascii switch off non-ascii character removal. -nolc, --nolc switch off lower-case transformation. -nopunc, --nopunc switch off punctuation removal. -nonum, --nonum switch off number removal. -nostem, --nostem switch off porter word stemming (uses the porterstemmer functionality from the nltk.stem library). -nostop, --nostop switch off stopword removal (uses the english stopwords list from the nltk.corpus library). results at a glance, the code seems to do a good job at finding general themes throughout the abstracts. with enough topics specified (in this case 20), it will capture a global ""frequent pattern mining"" theme similar to what was presented in the paper by mei, et. al. | topic: 15 | view: global | | --------- | ------------ | | mining | 0.06549781470307586 | | patterns | 0.04130088878399839 | | pattern | 0.031002929953296773 | | sequential | 0.017802974506818257 | | frequent | 0.015000041355054937 | | structures | 0.01246208861695447 | | algorithms | 0.010986754324057484 | | approach | 0.0106817830308471 | | efficient | 0.010681189139252758 | | information | 0.008901491869253191 | it also captures themes that are representative of their context - temporal and author context is captured by the view coverage. in this case, coverages for the ""frequent pattern mining"" global topic for author 1 published after 2000 matched up decently with the paper. indeed, author 1 does seem to spend more time covering frequent pattern mining during this timeframe. | topic: 15 | view: author==1 and year>=2000 | | --------- | ------------ | | mining | 0.0597014953071478 | | pattern | 0.03731343384903124 | | frequent | 0.029850750414016154 | | patterns | 0.029850745701384865 | | frequent-pattern | 0.022388049893103487 | | databases | 0.018656738476720114 | | examine | 0.018656723360443182 | | effectiveness | 0.018656708244252907 | | sequential | 0.01492538594417156 | | study | 0.014925382719363917 | there are instances that the linkage between views and global themes is not always fully captured, however. many of the views also seem to be very localized - only giving coverages of 1 or 2 abstracts - albeit within the proper context. for instance, it seems that the author 2 view captures some themes of frequent pattern mining (""segmentation"" does appear in frequent pattern mining abstracts for author 2), but a closer look shows that the overall theme for this view seems to be leaning toward segmentation approaches to proxy caching. the following coverage seems to be very specific to one particular abstract: | topic: 15 | view: author==2 | | --------- | ------------ | | media | 0.07857142857142857 | | caching | 0.06428571428571428 | | segmentation | 0.02857142857142857 | | large | 0.02857142857142857 | | cache | 0.02142857142857143 | | segments | 0.02142857142857143 | | size | 0.02142857142857143 | | whole | 0.02142857142857143 | | proxy | 0.02142857142857143 | | objects | 0.02142857142857143 | the reason for this may be my application of the global view prior. the prior is applied by replacing the values for each document for the global view in the view probability matrix with the specified prior. the view probability matrix is subsequently normalized. it is possible that this is not the best way to do this, or, my priors were too high, giving too strong of a signal to the global view. multiple priors were tried, and it did seem that the higher priors performed slightly better, however. another issue may be my implementation of the maximization step, or specifically how i formulated the coverage distribution. in general, any summations over coverages were removed, since we are using a fixed coverage approximation. additionally, the coverage distrubtion under this assumption becomes the probability of a topic given a document's coverage. therefore, for the formulation for p(l\|kd), i removed the summation over all documents/contexts, leaving a matrix of size number_of_topics by number_of_documents. this essentially gives us the document coverage probability from the vanilla plsa formulation. i am not 100% sure that this would be the correct formulation."	['joel', 'kopp', 'joelk', 'cs', 'fall', 'final', 'project', 'progress', 'report', 'completed', 'abstracts', 'scraped', 'acm', 'digital', 'library', 'two', 'prominent', 'data', 'mining', 'researchers', 'jiawei', 'han', 'uiuc', 'philip', 'yu', 'uic', 'match', 'temporal', 'time', 'frame', 'obtained', 'end', 'likely', 'hans', 'used', 'actual', 'paper', 'sure', 'label', 'author', 'school', 'link', 'dl', 'b', 'initial', 'plsa', 'model', 'repurposed', 'using', 'created', 'mp', 'frequent', 'pattern', 'topic', 'found', 'withing', 'including', 'good', 'coverage', 'yus', 'attempt', 'contact', 'determine', 'see', 'find', 'name', 'second', 'otherwise', 'proceed', 'authors', 'named', 'scraper', 'pending', 'need', 'implement', 'fixed', 'cplsa', 'described', 'point', 'feel', 'understand', 'mechanics', 'behind', 'matter', 'coding', 'following', 'compile', 'documentation', 'compose', 'video', 'tutorial', 'challenges', 'main', 'challenge', 'duplicating', 'set', 'entirely', 'necessary', 'would', 'provide', 'sanity', 'check', 'work', 'sets', 'proposal', 'team', 'members', 'chosen', 'subtopic', 'contextual', 'text', 'mixture', 'experiment', 'temporalauthortopic', 'analysis', 'programming', 'language', 'python', 'datasets', 'dataset', 'comprised', 'substantial', 'works', 'span', 'largeenough', 'profiles', 'similar', 'sample', 'abstract', 'httpsdlacmorgdoi', 'qiaozhu', 'mei', 'department', 'computer', 'science', 'university', 'illinois', 'urbanachampaign', 'urbanail', 'qmeiuiucedu', 'chengxiang', 'zhai', 'czhaicsuiucedu', 'concerned', 'extracting', 'topical', 'themes', 'collection', 'context', 'information', 'eg', 'location', 'comparinganalyzing', 'variations', 'different', 'contexts', 'since', 'topics', 'covered', 'document', 'usually', 'related', 'doc', 'ument', 'analyzing', 'within', 'poten', 'tially', 'reveal', 'many', 'interesting', 'theme', 'patterns', 'propose', 'new', 'general', 'probabilistic', 'cover', 'several', 'existing', 'models', 'special', 'cases', 'specifically', 'extend', 'latent', 'seman', 'tic', 'introducing', 'variables', 'proposed', 'called', 'semantic', 'anal', 'ysis', 'applied', 'tasks', 'spatiotempo', 'ral', 'authortopic', 'crosscollection', 'comparative', 'empirical', 'experiments', 'show', 'discover', 'con', 'textual', 'effectively', 'categories', 'subject', 'descriptors', 'h', 'informa', 'tion', 'search', 'retrieval', 'terms', 'algorithms', 'keywords', 'em', 'algorithm', 'clustering', 'introduction', 'often', 'associated', 'various', 'kinds', 'produced', 'wrote', 'publisher', 'contents', 'uments', 'corre', 'lated', 'way', 'example', 'news', 'articles', 'written', 'period', 'major', 'event', 'tend', 'influenced', 'papers', 'researcher', 'share', 'order', 'teresting', 'content', 'contextualized', 'consider', 'ana', 'permission', 'make', 'hard', 'copies', 'part', 'personal', 'classroom', 'use', 'granted', 'without', 'fee', 'provided', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'full', 'citation', 'first', 'page', 'copy', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'prior', 'specific', 'andor', 'kdd', 'august', 'philadelphia', 'pennsylvania', 'usa', 'copyright', 'lyzing', 'indeed', 'recent', 'studies', 'direction', 'stamps', 'documents', 'considered', 'also', 'studied', 'cross', 'ie', 'authorship', 'subcollection', 'means', 'possible', 'fact', 'metadata', 'entry', 'indicate', 'value', 'en', 'try', 'source', 'article', 'age', 'group', 'occu', 'pation', 'weblog', 'frequency', 'research', 'reasonable', 'moreover', 'may', 'belong', 'multi', 'ple', 'combination', 'entries', 'makes', 'complex', 'lot', 'addressed', 'spatiotemporal', 'evolutionary', 'opinion', 'comparison', 'groups', 'occupations', 'however', 'techniques', 'tuned', 'applicable', 'one', 'cannot', 'directly', 'tem', 'poral', 'occupation', 'indicates', 'serious', 'limitation', 'every', 'combina', 'people', 'seek', 'solutions', 'ad', 'hoc', 'therefore', 'highly', 'desirable', 'introduce', 'problem', 'abstracted', 'family', 'types', 'derive', 'conduct', 'common', 'problems', 'easy', 'appropriate', 'regularization', 'define', 'contex', 'tual', 'ctxtm', 'incorporate', 'develop', 'facilitate', 'fitting', 'mine', 'global', 'salient', 'analyze', 'variation', 'track', 'poster', 'given', 'view', 'easily', 'differ', 'ent', 'prob', 'lems', 'defined', 'solved', 'regularized', 'versions', 'corresponding', 'involves', 'although', 'quite', 'flexible', 'adapt', 'assumptions', 'assume', 'col', 'lection', 'vary', 'goal', 'gen', 'erally', 'contextsensitive', 'stressed', 'previous', 'ized', 'distribution', 'words', 'characterizes', 'semantically', 'coherent', 'loss', 'generality', 'al', 'together', 'k', 'th', 'thk', 'cept', 'feature', 'stamp', 'belongs', 'indicated', 'fea', 'tures', 'formally', 'follows', 'definition', 'let', 'f', 'ff', 'features', 'c', 'decided', 'whole', 'possi', 'ble', 'denoted', 'cn', 'suppose', 'dd', 'cd', 'di', 'sequence', 'vocabulary', 'v', 'w', 'wv', 'ci', 'iff', 'tells', 'us', 'multiple', 'another', 'word', 'overlap', 'top', 'icssubtopics', 'like', 'according', 'certain', 'accommodate', 'sider', 'interested', 'potentially', 'distinct', 'version', 'ver', 'sions', 'across', 'contextu', 'alized', 'thi', 'thik', 'thil', 'thl', 'vi', 'n', 'views', 'vn', 'corresponds', 'assumed', 'pre', 'cisely', 'taken', 'depends', 'overlapping', 'support', 'sci', 'djcj', 'call', 'strength', 'variable', 'ex', 'ample', 'favor', 'particular', 'thus', 'larger', 'kj', 'plki', 'clearly', 'l', 'plkj', 'coverages', 'km', 'modeling', 'documentspecific', 'ckj', 'denote', 'skj', 'cov', 'erage', 'dic', 'st', 'structure', 'illustrated', 'figure', 'viewn', 'thn', 'thnk', 'coveragem', 'themeviewcoverage', 'definitions', 'task', 'recover', 'ways', 'alyze', 'discuss', 'extraction', 'extract', 'varies', 'beneficial', 'explicit', 'basically', 'give', 'shared', 'dif', 'ferent', 'practice', 'always', 'include', 'compare', 'represents', 'comparing', 'influence', 'erages', 'tell', 'associating', 'applica', 'closely', 'others', 'individ', 'ual', 'among', 'important', 'distinguish', 'traditional', 'application', 'either', 'consecutive', 'mainly', 'life', 'cycles', 'sometimes', 'pat', 'tern', 'section', 'extension', 'probabilis', 'idea', 'low', 'generated', 'actually', 'depend', 'could', 'comes', 'meta', 'simplified', 'es', 'pecially', 'suitable', 'representative', 'generating', 'choose', 'pvid', 'pkjd', 'generate', 'loglikelihood', 'log', 'pd', 'dcd', 'cw', 'x', 'j', 'plkjpwthil', 'parameters', 'selection', 'probability', 'distribu', 'pwthil', 'total', 'multino', 'mial', 'component', 'distributions', 'dis', 'tinct', 'ever', 'generation', 'subset', 'scenario', 'generally', 'supporting', 'though', 'lap', 'determines', 'generat', 'ing', 'assign', 'zero', 'probabilities', 'selected', 'correspond', 'spanning', 'entire', 'ti', 'orthogonal', 'choice', 'choices', 'reflect', 'uneven', 'capture', 'suspect', 'depending', 'associate', 'learn', 'locations', 'exactly', 'fit', 'collec', 'maximum', 'likelihood', 'estimator', 'gorithm', 'straightforward', 'estimate', 'updating', 'formulas', 'pzwijl', 'ptvidcptkj', 'dcptlkjptwthil', 'ptvi', 'dc', 'ptkj', 'ptlkj', 'ptwthil', 'ptvid', 'cwd', 'ptkjd', 'highdegree', 'freedom', 'lihood', 'face', 'local', 'maxima', 'fortunately', 'almost', 'partitions', 'result', 'constrained', 'nonoverlapping', 'becomes', 'delta', 'function', 'kjs', 'unfortunately', 'even', 'constraints', 'still', 'free', 'possibil', 'ity', 'add', 'parametric', 'constraint', 'assuming', 'dirichlet', 'distri', 'bution', 'done', 'lda', 'reduce', 'number', 'generalize', 'generalizes', 'concern', 'strategy', 'para', 'metric', 'artificial', 'restrict', 'capacity', 'discriminative', 'approach', 'fur', 'ther', 'regularize', 'estimation', 'heuristically', 'searching', 'heuristics', 'adopted', 'discussed', 'noise', 'english', 'designate', 'thjs', 'tie', 'background', 'unigram', 'regarded', 'applying', 'infinitely', 'strong', 'considering', 'com', 'parison', 'troduce', 'particularly', 'useful', 'facili', 'tate', 'evolutions', 'subcollections', 'fairly', 'docu', 'ment', 'assumption', 'plkdpwthil', 'kd', 'fixedcoverage', 'fccplsa', 'three', 'allow', 'stable', 'simplify', 'plkjpwthl', 'pwthl', 'fixedview', 'fv', 'kt', 'introduced', 'framework', 'solve', 'broad', 'apply', 'presented', 'results', 'evaluate', 'performance', 'interest', 'publications', 'preferences', 'focuses', 'cor', 'responding', 'intuitively', 'au', 'thor', 'favors', 'evolute', 'type', 'publication', 'test', 'effec', 'tiveness', 'handling', 'collect', 'published', 'famous', 'split', 'line', 'spans', 'year', 'table', 'sec', 'pwthjl', 'vj', 'avoid', 'trapped', 'suboptimal', 'maximums', 'associations', 'thjl', 'achieve', 'selecting', 'starting', 'specif', 'ically', 'begin', 'large', 'pvd', 'ensures', 'get', 'signal', 'instead', 'biased', 'iterations', 'gradually', 'decay', 'vews', 'close', 'rule', 'index', 'itemset', 'next', 'distribute', 'graph', 'frequentpattern', 'intertransaction', 'transition', 'sequential', 'web', 'panel', 'min', 'gspan', 'method', 'technical', 'length', 'substructure', 'patterngrowth', 'technology', 'threshold', 'fdm', 'gindex', 'condense', 'closet', 'study', 'bide', 'increment', 'apriori', 'revolution', 'topk', 'scable', 'magnitude', 'prefixspan', 'tremendous', 'pass', 'size', 'push', 'pseudo', 'innovate', 'fptree', 'disclose', 'xml', 'terminate', 'early', 'average', 'drops', 'say', 'gives', 'procedure', 'trials', 'select', 'best', 'start', 'highest', 'finally', 'run', 'beginning', 'converges', 'selectively', 'included', 'talking', 'database', 'projection', 'deep', 'rather', 'sociated', 'introductional', 'innovated', 'years', 'barely', 'connection', 'fre', 'quent', 'influential', 'evolutes', 'talk', 'association', 'rules', 'perhaps', 'fast', 'ap', 'pears', 'high', 'appearance', 'applications', 'graphs', 'tech', 'niques', 'combined', 'well', 'pref', 'erences', 'consistent', 'activate', 'shows', 'tract', 'effectiveness', 'spe', 'cific', 'compute', 'draw', 'snapshots', 'mon', 'refer', 'esti', 'mate', 'pkd', 'pth', 'lt', 'ktlck', 'pthkpkt', 'lplt', 'msn', 'space', 'timebounded', 'query', 'submitted', 'google', 'blogsearch', 'hurricane', 'katrina', 'pro', 'vide', 'oth', 'ers', 'tagged', 'unknown', 'segment', 'six', 'weeks', 'united', 'states', 'week', 'consists', 'unique', 'difficult', 'precisely', 'reason', 'able', 'fvcplsa', 'pkcd', 'constant', 'controls', 'impact', 'estimating', 'themelocation', 'pthktlpt', 'pktlt', 'pt', 'computed', 'count', 'divided', 'visualize', 'fulfill', 'snapshot', 'map', 'extracted', 'blog', 'infer', 'aid', 'donations', 'affected', 'areas', 'demonstrates', 'evolution', 'periods', 'detailed', 'description', 'partition', 'four', 'af', 'fected', 'peripheral', 'coast', 'inland', 'pare', 'shown', 'periphery', 'donation', 'supplies', 'food', 'hur', 'five', 'medical', 'donate', 'comfort', 'relief', 'help', 'health', 'red', 'ship', 'rebuild', 'volunteer', 'please', 'hospital', 'children', 'assist', 'supply', 'care', 'charity', 'victim', 'evacuee', 'service', 'blood', 'parish', 'ricane', 'louisiana', 'cares', 'last', 'helps', 'become', 'rebuilding', 'helping', 'returning', 'evacuees', 'effective', 'scenarios', 'series', 'events', 'weblogs', 'peoples', 'opinions', 'happen', 'scientific', 'literatures', 'invention', 'www', 'proposing', 'analyzed', 'pub', 'lished', 'versus', 'segmentation', 'provides', 'evaluation', 'sections', 'covers', 'overlaps', 'caused', 'orthog', 'onal', 'reality', 'business', 'analyzer', 'customers', 'month', 'season', 'product', 'released', 'sigir', 'conferences', 'community', 'trieval', 'trec', 'scale', 'standard', 'judgements', 'began', 'genre', 'led', 'ir', 'change', 'ings', 'includes', 'fore', 'conference', 'contains', 'third', 'fourth', 'clear', 'proceedings', 'unexpected', 'present', 'especially', 'term', 'weight', 'relevance', 'feedback', 'pretrec', 'vec', 'tor', 'dominates', 'boolean', 'queries', 'men', 'tioned', 'frequently', 'posttrec', 'tice', 'paid', 'attention', 'email', 'nature', 'judge', 'rank', 'prelanguage', 'postlanguage', 'dominated', 'ranked', 'changed', 'parame', 'ter', 'estimations', 'smoothing', 'knowledge', 'prelm', 'faraway', 'emphasizes', 'vector', 'lyze', 'relevant', 'se', 'mantic', 'hofmann', 'aspects', 'aspect', 'represented', 'multinomial', 'natural', 'tension', 'overfitting', 'blei', 'coauthors', 'generative', 'allocation', 'probabilist', 'concept', 'element', 'logic', 'parameter', 'independence', 'locate', 'judgment', 'fuzzy', 'probable', 'algebra', 'smooth', 'u', 'score', 'specify', 'solution', 'markov', 'dependency', 'correlate', 'explored', 'cently', 'extensions', 'multicollection', 'alyzed', 'li', 'et', 'detect', 'retrospec', 'tive', 'explaining', 'ws', 'generalization', 'abilistic', 'kleinbergs', 'discovering', 'bursty', 'hierarchical', 'structures', 'streams', 'topiceventtrend', 'detection', 'tracking', 'assumes', 'generalized', 'conclusions', 'basic', 'novel', 'possibly', 'lapping', 'methods', 'step', 'toward', 'future', 'better', 'mix', 'ture', 'create', 'criteria', 'quantitatively', 'approaches', 'acknowledgments', 'supported', 'national', 'foundation', 'award', 'numbers', 'references', 'allan', 'carbonell', 'g', 'doddington', 'yamron', 'yang', 'pilot', 'darpa', 'broadcast', 'transcription', 'understanding', 'workshop', 'ng', 'jordan', 'mach', 'res', 'boykin', 'merlino', 'machine', 'learning', 'demand', 'commun', 'chen', 'ms', 'liped', 'hmmbased', 'adaptive', 'proceeding', 'pages', 'p', 'dempster', 'laird', 'rubin', 'incomplete', 'via', 'journal', 'royal', 'statist', 'soc', 'griffiths', 'steyvers', 'fiding', 'academy', 'sciences', 'suppl', 'uai', 'indexing', 'kleinberg', 'kontostathis', 'galitsky', 'pottenger', 'roy', 'phelps', 'survey', 'emerging', 'trend', 'z', 'wang', 'wy', 'retrospective', 'perkins', 'online', 'novelty', 'sequences', 'q', 'liu', 'su', 'exploration', 'r', 'nallapati', 'feng', 'peng', 'threading', 'cikm', 'perkio', 'buntine', 'perttu', 'exploring', 'independent', 'trends', 'topicbased', 'engine', 'wi', 'smyth', 'rosenzvi', 'discovery', 'velivelli', 'course', 'attempts', 'duplicate', 'replicates', 'specialized', 'remains', 'perform', 'comparitive', 'reasearch', 'case', 'featre', 'combinations', 'thereof', 'evaluated', 'form', 'constructed', 'subview', 'timeframes', 'timeframe', 'illustrates', 'code', 'essentially', 'adding', 'matrix', 'vanilla', 'holds', 'documentcontext', 'belonging', 'pertain', 'documentview', 'initially', 'zeroed', 'incorporated', 'additional', 'replicate', 'originally', 'consisted', 'names', 'guess', 'listing', 'processed', 'csv', 'file', 'containing', 'setup', 'user', 'git', 'installed', 'clone', 'repository', 'workstation', 'httpsgithubcomjoelcourseprojectgit', 'package', 'cloned', 'courseproject', 'directory', 'setuppy', 'installation', 'script', 'install', 'pull', 'dependencies', 'fails', 'prefer', 'libraries', 'manually', 'list', 'numpy', 'pandas', 'nltk', 'latest', 'suffice', 'usage', 'courseprojectcplsa', 'folder', 'relative', 'absolute', 'path', 'courseprojectcplsacplsapy', 'output', 'command', 'titled', 'cplsatimestampout', 'topicview', 'quick', 'dirty', 'optimal', 'least', 'achieved', 'cplsapy', 'dataall_abstractscsv', 'authorauthor', 'yearyear', 'nostem', 'note', 'take', 'normal', 'roughly', 'hour', 'stemming', 'omitted', 'preprocessing', 'default', 'warmup', 'runs', 'artificially', 'ensure', 'per', 'original', 'iterate', 'mean', 'reaches', 'slightly', 'modified', 'suggests', 'hits', 'largest', 'mle', 'pickled', 'restarted', 'iteration', 'convergence', 'reached', 'difference', 'current', 'less', 'around', 'quicker', 'dirtier', 'simply', 'running', 'correctly', 'e', 'much', 'decent', 'asking', 'warm', 'iterating', 'criterion', 'converge', 'inputs', 'arguments', 'required', 'strings', 'operations', 'categorize', 'columns', 'separated', 'colons', 'contain', 'amount', 'long', 'column', 'labeled', 'instance', 'looks', 'id', 'spelling', 'titles', 'ancillary', 'hence', 'ignored', 'specification', 'format', 'enclosed', 'double', 'quotes', 'input', 'pythonformatted', 'operation', 'colon', 'string', 'onefeature', 'combine', 'twofeature', 'valid', 'consisting', 'likewise', 'performs', 'automatically', 'merging', 'logical', 'specified', 'nm', 'numerical', 'integer', 'initialize', 'matrices', 'randomly', 'leading', 'starts', 'random', 'points', 'uses', 'float', 'falls', 'warmup_iter', 'higher', 'supplied', 'kill', 'discarded', 'topicsthemes', 'epsilon', 'minimum', 'error', 'occurs', 'flag', 'save', 'corpus', 'object', 'values', 'upon', 'completion', 'later', 'examination', 'preprocessor', 'flags', 'preprocess', 'performing', 'lowercase', 'transformation', 'stopword', 'removal', 'porter', 'remove', 'nonascii', 'characters', 'punctuation', 'except', 'override', 'automation', 'noascii', 'switch', 'character', 'nolc', 'nopunc', 'nonum', 'porterstemmer', 'functionality', 'nltkstem', 'nostop', 'stopwords', 'nltkcorpus', 'glance', 'seems', 'job', 'finding', 'throughout', 'enough', 'efficient', 'captures', 'captured', 'matched', 'decently', 'seem', 'spend', 'covering', 'databases', 'examine', 'instances', 'linkage', 'fully', 'localized', 'giving', 'albeit', 'proper', 'appear', 'closer', 'look', 'overall', 'leaning', 'proxy', 'caching', 'media', 'cache', 'segments', 'objects', 'replacing', 'subsequently', 'normalized', 'priors', 'tried', 'performed', 'issue', 'implementation', 'maximization', 'formulated', 'summations', 'removed', 'approximation', 'additionally', 'distrubtion', 'formulation', 'plkd', 'summation', 'documentscontexts', 'leaving', 'number_of_topics', 'number_of_documents', 'correct']
https://github.com/john-james-sf/CourseProject	ir competition project proposal john james jtjames2 this project aims to leverage the information retrieval competition to explore state-of-the-art learn to rank system configuration document retrieval models. learn to rank document retrieval system configuration is an area of active research that seeks to improve document retrieval performance by predicting system configuration parameters for a query that maximizes the likelihood of relevant documents. approach the proposed approach is adapted from deveaud et. al [1] and is comprised of the following four phases:  pre-processing: given a collection, the first step is to determine all feasible system configurations c and conduct document indexing. next, the documents are ranked and the effectiveness of each query/system configuration pair is stored to file. the query and system configuration features serve as the feature set and the effectiveness scores represent the labels of the training set.  training: this step makes use of the training examples constructed from the query features, system configuration features, and relevance labels measured by the respective evaluation metric. the learning to rank algorithm trains a model to maximize the effectiveness metric (e.g. ndcg), once the training is completed, a learned model is generated.  document ranking: taking as input, an unseen test set of queries, the trained model produces a ranked list of system configurations for each query.  evaluation: finally, the top ranked system configuration for each query is applied and the overall system performance is computed. features the learn to rank features include:  retrieval model features such as: o absolute discount smoothing o dirichlet prior smoothing o jelinek-mercer smoothing o okapi bm25 o pivoted length normalization  query features including: o query statistics e.g., mean and standard deviation variants of idf o linquistic features: synonyms hyponyms, meronyms, etc... i look forward to exploring these techniques in the ir competition! courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['ir', 'competition', 'project', 'proposal', 'john', 'james', 'jtjames', 'aims', 'leverage', 'information', 'retrieval', 'explore', 'stateoftheart', 'learn', 'rank', 'system', 'configuration', 'document', 'models', 'area', 'active', 'research', 'seeks', 'improve', 'performance', 'predicting', 'parameters', 'query', 'maximizes', 'likelihood', 'relevant', 'documents', 'approach', 'proposed', 'adapted', 'deveaud', 'et', 'al', 'comprised', 'following', 'four', 'phases', 'preprocessing', 'given', 'collection', 'first', 'step', 'determine', 'feasible', 'configurations', 'c', 'conduct', 'indexing', 'next', 'ranked', 'effectiveness', 'querysystem', 'pair', 'stored', 'file', 'features', 'serve', 'feature', 'set', 'scores', 'represent', 'labels', 'training', 'makes', 'use', 'examples', 'constructed', 'relevance', 'measured', 'respective', 'evaluation', 'metric', 'learning', 'algorithm', 'trains', 'model', 'maximize', 'eg', 'ndcg', 'completed', 'learned', 'generated', 'ranking', 'taking', 'input', 'unseen', 'test', 'queries', 'trained', 'produces', 'list', 'finally', 'top', 'applied', 'overall', 'computed', 'include', 'absolute', 'discount', 'smoothing', 'dirichlet', 'prior', 'jelinekmercer', 'okapi', 'bm', 'pivoted', 'length', 'normalization', 'including', 'statistics', 'mean', 'standard', 'deviation', 'variants', 'idf', 'linquistic', 'synonyms', 'hyponyms', 'meronyms', 'etc', 'look', 'forward', 'exploring', 'techniques', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/juan4bit/CourseProject	"pattern annotation table of contents vim-markdown-toc gfm introduction prerequisites installation implementation selecting dblp inproceedings (conferences) pattern extraction and compression semantic annotation tutorial selecting dblp inproceedings (conferences) pattern extraction and compression semantic annotation presentation vim-markdown-toc introduction in this project i will try to reproduce the results of the following paper: * qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 this paper proposes using paradigmatic and syntagmatic relationships from text data in order to annotate non-text data with semantic context in the same way a dictionary would define a word with synonyms (paradigmatic patterns) and examples of the word being used in a context (syntagmatic context). in this particular implementation, the non-text data represents items from a transactional database, instantiated as authors from major computer conferences, and the text data represents the titles from such conferences. prerequisites you will need a unix machine to run this tool, i used ubuntu 20.04 at the time of developing and testing. you will also need to install python 3 and the latest java runtime environment. installation clone the project from the code repository: sh git clone https://github.com/juan4bit/courseproject.git cd courseproject once in the project folder, install the following python dependencies: sh python -m pip install -u pip wheel optional: you may additionally want to setup a virtual environment for this project by running: sh python -m venv ~/.envs/courseproject source ~/.envs/courseproject/bin/activate finally, install the following python dependencies: sh pip install -r requirements.txt and download the spmf tool and place the jar file in the ./lib folder of the project directory. you may also need to give this file executable permissions: sh chmod +x spmf.jar implementation i decided to implement this paper in three stages that i describe in detail below. selecting dblp inproceedings (conferences) the original paper tests the algorithm by selecting a subset of conferences from the dblp dataset, a 3gb+ xml file with bibliographic entries on major computer science journals, theses and proceedings. for the purpose of this paper, we are only interested on the proceedings (conferences). furthermore, because the amount of conferences is too large, i also decided to select only those falling in a given date range (determined by year). there are existing tools to manipulate and filter xml files, namely xsl templates, but because of the large size of the original dblp dataset, i was not able to get any of them working so instead i decided to implement my own script which incrementally reads the dblp file and selects only the items and fields i'm interested in, that is, the conference titles and its authors. additionally, i also preprocess the title text through stemming and removal of stop words as described in the original paper. this stage can be run via the python main.py scrape command which i will explain how to use in the next section. pattern extraction and compression before extracting paradigmatic and syntagmatic relationships, we first need to mine patterns from the non-text data (authors) and text data (titles). the paper suggests using fp-close algorithm for the former and clospan for the latter which instead of implementing them myself i decided to use a third party tool, spmf, that i call internally from my script code, please make sure the dependency is installed as described in the previous section. after the closed frequent patterns are extracted, the paper suggests two compression algorithms to reduce the overall number of entries for future stages in the pipeline, aiming to reduce redundancy among the patterns in each dataset. i decided to implement one of the algorithms, one-pass microclustering, where you calculate the jaccardian distance between each pair of patterns in a given dataset and one by one, it starts to either append a pattern to an existing cluster if the jaccardian distance to the farthest item in the group falls below a threshold or creates a brand new cluster for the pattern. from each cluster then i select the pattern that is, on average, closer to the other patterns in the group, that is, the medoid pattern. this stage can be run via the python main.py mine command which i will explain how to use in the next section. semantic annotation given a preprocessed dblp dataset and a list of frequent patterns for conference authors and titles, the last stage of the pipeline is a script that expects a query pattern as input (either an author, a list of authors or a text phrase) and returns its: syntagmatic context. given the definition of mutual information , where x and y are binary variables that represent each whether a pattern shows up in the database or not and p represents either the single or joint probability of these events happening, the algorithm scores each pattern from the list against the query and selects the top n as its context. mutual information can be understood as the reduction of uncertainty from a pattern once another one (e.g. the query) is given, the more reduction, the more likely these two patterns are related. paradigmatic patterns. given the set of patterns determined in the previous step, the algorithm calculates vectors of mutual information scores from each pattern in the original list against the patterns from the query context. then it computes the cosine similarity between these vectors and the one from the query context and selects the top n patterns as paradigmatic relations. the rationale is that if the context patterns from the query reduce uncertainty in a similar way for another pattern, then it's likely that these two patterns are similar given a context. paradigmatic transactions. the last step is similar to the previous one except in how the context of a transaction is calculated. for each pattern of the query context, the algorithm checks whether it appears in a transaction or not, if it does then it scores 1, otherwise -1. the original paper assigns 0 for a non-match but in practice i found out this value didn't yield good results. this stage can be run via the python main.py annotate command which i will explain how to use in the next section. tutorial as mentioned in the previous section, there are three stages in the pipeline that can be run as individual commands. the tool provides help messages when running python main.py --help or python main.py cmd --help, where cmd can be either scrape, mine or annotate. in this section, i'll explain in detail these help messages and provide examples but before you start, make sure to download the dblp dataset and unzip the xml file together with its dtd definition file. selecting dblp inproceedings (conferences) running python main.py scrape --help yields the following output: ```sh usage: main.py scrape [-h] --dblp_file dblp_file --article_file article_file [--from_year from_year] optional arguments: -h, --help show this help message and exit --dblp_file dblp_file required: the path to the dblp input file --article_file article_file required: the path where the selected articles will be printed in xml format --from_year from_year selects articles from no earlier than the provided year ``` so you can select conferences from the dblp dataset by running a command similar to this one: sh python main.py scrape --dblp_file dblp.xml --article_file articles.xml --from_year 2010 this will read dblp.xml, select all inproceedings (conferences) no earlier than 2010 and print the preprocessed items in articles.xml in the following format: ```xml xml version=""1.0"" encoding=""utf-8"" standalone=""yes""? fast multipoint evaluation and interpolation of polynomials in the lch-basi s over f 2020 fast multipoint evaluate interpolation polynomial lch-basis f axel mathieu-mahias michael quisquater ... ``` the title field stores the original title of the conference while label stores its preprocessed version (after stemming and then removing stop words). pattern extraction and compression running python main.py mine --help yields the following output: ```sh usage: main.py mine [-h] --dblp_file dblp_file --title_file title_file --author_file author_file --title_support title_support --author_support author_support --title_distance title_distance --author_distance author_distance optional arguments: -h, --help show this help message and exit --dblp_file dblp_file required: the path to the dblp input file --title_file title_file required: the path where the title patterns will be printed --author_file author_file required: the path where the author patterns will be printed --title_support title_support required: the minimum support [0, 1] for title patterns. --author_support author_support required: the minimum support [0, 1] for author patterns. --title_distance title_distance required: the jaccard threshold [0, 1] to use when compressing title patterns --author_distance author_distance required: the jaccard threshold [0, 1] to use when compressing author patterns ``` so you can mine and compress patterns by running a command similar to this one: sh python main.py mine --dblp_file articles.xml --title_file titles.txt --author_file authors.txt --title_support 0.003 --author_support 0.001 --title_distance 0.9 --author_distance 0.9 this will read a preprocessed dblp dataset (it assumes a label field exists for each inproceedings element which is not the case in the original dblp file) and print to titles.txt and authors.txt the list of titles and authors respectively that were mined as frequent patterns. title subsequences (that's what clospan generates) will be space separated while author itemsets will be semicolon separated. title and author support represent the coverage percentage that a pattern needs to exhibit to be considered frequent, in this case, a title subsequence needs to show up in 0.3% of the transactions and an author itemset 0.1%. title and author distances are the jaccardian threshold described in the previous section, used to compress the pattern list by removing redundancy, the larger the threshold, the more agressive the compression is. semantic annotation running python main.py annotate --help yields the following output: ```sh usage: main.py annotate [-h] --db_file db_file --title_file title_file --author_file author_file -q query --type {author,title} -n1 n_context -n2 n_synonyms -n3 n_examples optional arguments: -h, --help show this help message and exit --db_file db_file required: the xml input file with all the transactions --title_file title_file required: the input file that stores the patterns for titles --author_file author_file required: the input file that stores the patterns for authors -q query, --query query required: the query pattern to enrich with semantic annotations --type {author,title} required: the type of the query pattern -n1 n_context, --n_context n_context required: the number of context indicators to select -n2 n_synonyms, --n_synonyms n_synonyms required: the number of semantically similar patterns to select -n3 n_examples, --n_examples n_examples required: the number of representative transactions to select ``` so you can find the semantic annotations of a given query pattern by running a command similar to this one: sh python main.py annotate --dblp_file articles.xml --title_file titles.txt --author_file authors.txt -q ""network"" --type title -n1 7 -n2 5 -n3 3 dblp file, title file and author file paths point to the preprocessed dblp dataset and the list of title and author patterns respectively. the query type can be either title or author, for the former just write any phrase surrounded by double quotes and for the latter write a semicolon-separated list of authors (casing doesn't matter but letter matching has to be identical so beware typos) also surrounded by quotes. n1, n2 and n3 represent the number of syntagmatic patterns and the number of paradigmatic patterns and transactions to retrieve respectively. the output will look something like the xml below: xml <definition> <pattern> <title>network</title> </pattern> <context> <pattern> <title>deep neural</title> </pattern> <pattern> <title>convolution neural</title> </pattern> <pattern> <title>network image</title> </pattern> <pattern> <title>graph neural</title> </pattern> <pattern> <title>generative adversarial</title> </pattern> <pattern> <title>graph convolution</title> </pattern> <pattern> <title>network 3d</title> </pattern> </context> <synonyms> <pattern> <title>method</title> </pattern> <pattern> <title>optimize</title> </pattern> <pattern> <title>deep learning</title> </pattern> <pattern> <title>explore</title> </pattern> <pattern> <title>evaluate</title> </pattern> </synonyms> <examples> <transaction> <title>dual-domain deep convolutional neural networks for image demoireing.</title> <author>vien gia an</author> <author>hyunkook park</author> <author>chul lee</author> </transaction> <transaction> <title>a topological encoding convolutional neural network for segmentation of 3d mu ltiphoton images of brain vasculature using persistent homology.</title> <author>mohammad haft-javaherian</author> <author>martin villiger</author> <author>chris b. schaffer</author> <author>nozomi nishimura</author> <author>polina golland</author> <author>brett e. bouma</author> </transaction> <transaction> <title>fsnet: compression of deep convolutional neural networks by filter summary.</ title> <author>yingzhen yang</author> <author>jiahui yu</author> <author>nebojsa jojic</author> <author>jun huan</author> <author>thomas s. huang</author> </transaction> </examples> </definition> presentation you can find a recorded version of the tutorial here."	['pattern', 'annotation', 'table', 'contents', 'vimmarkdowntoc', 'gfm', 'introduction', 'prerequisites', 'installation', 'implementation', 'selecting', 'dblp', 'inproceedings', 'conferences', 'extraction', 'compression', 'semantic', 'tutorial', 'presentation', 'project', 'try', 'reproduce', 'results', 'following', 'paper', 'qiaozhu', 'mei', 'dong', 'xin', 'hong', 'cheng', 'jiawei', 'han', 'chengxiang', 'zhai', 'generating', 'annotations', 'frequent', 'patterns', 'context', 'analysis', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'data', 'mining', 'kdd', 'new', 'york', 'ny', 'usa', 'doi', 'proposes', 'using', 'paradigmatic', 'syntagmatic', 'relationships', 'text', 'order', 'annotate', 'nontext', 'way', 'dictionary', 'would', 'define', 'word', 'synonyms', 'examples', 'used', 'particular', 'represents', 'items', 'transactional', 'database', 'instantiated', 'authors', 'major', 'computer', 'titles', 'need', 'unix', 'machine', 'run', 'tool', 'ubuntu', 'time', 'developing', 'testing', 'also', 'install', 'python', 'latest', 'java', 'runtime', 'environment', 'clone', 'code', 'repository', 'sh', 'git', 'httpsgithubcomjuanbitcourseprojectgit', 'cd', 'courseproject', 'folder', 'dependencies', 'pip', 'u', 'wheel', 'optional', 'may', 'additionally', 'want', 'setup', 'virtual', 'running', 'venv', 'envscourseproject', 'source', 'envscourseprojectbinactivate', 'finally', 'r', 'requirementstxt', 'download', 'spmf', 'place', 'jar', 'file', 'lib', 'directory', 'give', 'executable', 'permissions', 'chmod', 'x', 'spmfjar', 'decided', 'implement', 'three', 'stages', 'describe', 'detail', 'original', 'tests', 'algorithm', 'subset', 'dataset', 'gb', 'xml', 'bibliographic', 'entries', 'science', 'journals', 'theses', 'purpose', 'interested', 'furthermore', 'amount', 'large', 'select', 'falling', 'given', 'date', 'range', 'determined', 'year', 'existing', 'tools', 'manipulate', 'filter', 'files', 'namely', 'xsl', 'templates', 'size', 'able', 'get', 'working', 'instead', 'script', 'incrementally', 'reads', 'selects', 'fields', 'im', 'preprocess', 'title', 'stemming', 'removal', 'stop', 'words', 'described', 'stage', 'via', 'mainpy', 'scrape', 'command', 'explain', 'use', 'next', 'section', 'extracting', 'first', 'mine', 'suggests', 'fpclose', 'former', 'clospan', 'latter', 'implementing', 'third', 'party', 'call', 'internally', 'please', 'make', 'sure', 'dependency', 'installed', 'previous', 'closed', 'extracted', 'two', 'algorithms', 'reduce', 'overall', 'number', 'future', 'pipeline', 'aiming', 'redundancy', 'among', 'one', 'onepass', 'microclustering', 'calculate', 'jaccardian', 'distance', 'pair', 'starts', 'either', 'append', 'cluster', 'farthest', 'item', 'group', 'falls', 'threshold', 'creates', 'brand', 'average', 'closer', 'medoid', 'preprocessed', 'list', 'last', 'expects', 'query', 'input', 'author', 'phrase', 'returns', 'definition', 'mutual', 'information', 'binary', 'variables', 'represent', 'whether', 'shows', 'p', 'single', 'joint', 'probability', 'events', 'happening', 'scores', 'top', 'n', 'understood', 'reduction', 'uncertainty', 'another', 'eg', 'likely', 'related', 'set', 'step', 'calculates', 'vectors', 'computes', 'cosine', 'similarity', 'relations', 'rationale', 'similar', 'transactions', 'except', 'transaction', 'calculated', 'checks', 'appears', 'otherwise', 'assigns', 'nonmatch', 'practice', 'found', 'value', 'didnt', 'yield', 'good', 'mentioned', 'individual', 'commands', 'provides', 'help', 'messages', 'cmd', 'ill', 'provide', 'start', 'unzip', 'together', 'dtd', 'yields', 'output', 'usage', 'h', 'dblp_file', 'article_file', 'from_year', 'arguments', 'show', 'message', 'exit', 'required', 'path', 'selected', 'articles', 'printed', 'format', 'earlier', 'provided', 'dblpxml', 'articlesxml', 'read', 'print', 'version', 'encodingutf', 'standaloneyes', 'fast', 'multipoint', 'evaluation', 'interpolation', 'polynomials', 'lchbasi', 'f', 'evaluate', 'polynomial', 'lchbasis', 'axel', 'mathieumahias', 'michael', 'quisquater', 'field', 'stores', 'label', 'removing', 'title_file', 'author_file', 'title_support', 'author_support', 'title_distance', 'author_distance', 'minimum', 'support', 'jaccard', 'compressing', 'compress', 'titlestxt', 'authorstxt', 'assumes', 'exists', 'element', 'case', 'respectively', 'mined', 'subsequences', 'thats', 'generates', 'space', 'separated', 'itemsets', 'semicolon', 'coverage', 'percentage', 'needs', 'exhibit', 'considered', 'subsequence', 'itemset', 'distances', 'larger', 'agressive', 'db_file', 'q', 'type', 'authortitle', 'n_context', 'n_synonyms', 'n_examples', 'enrich', 'indicators', 'semantically', 'representative', 'find', 'network', 'paths', 'point', 'write', 'surrounded', 'double', 'quotes', 'semicolonseparated', 'casing', 'doesnt', 'matter', 'letter', 'matching', 'identical', 'beware', 'typos', 'retrieve', 'look', 'something', 'like', 'titlenetworktitle', 'titledeep', 'neuraltitle', 'titleconvolution', 'titlenetwork', 'imagetitle', 'titlegraph', 'titlegenerative', 'adversarialtitle', 'convolutiontitle', 'dtitle', 'titlemethodtitle', 'titleoptimizetitle', 'learningtitle', 'titleexploretitle', 'titleevaluatetitle', 'titledualdomain', 'deep', 'convolutional', 'neural', 'networks', 'image', 'demoireingtitle', 'authorvien', 'gia', 'anauthor', 'authorhyunkook', 'parkauthor', 'authorchul', 'leeauthor', 'titlea', 'topological', 'encoding', 'segmentation', 'mu', 'ltiphoton', 'images', 'brain', 'vasculature', 'persistent', 'homologytitle', 'authormohammad', 'haftjavaherianauthor', 'authormartin', 'villigerauthor', 'authorchris', 'b', 'schafferauthor', 'authornozomi', 'nishimuraauthor', 'authorpolina', 'gollandauthor', 'authorbrett', 'e', 'boumaauthor', 'titlefsnet', 'summary', 'authoryingzhen', 'yangauthor', 'authorjiahui', 'yuauthor', 'authornebojsa', 'jojicauthor', 'authorjun', 'huanauthor', 'authorthomas', 'huangauthor', 'recorded']
https://github.com/kaipak/CourseProject	team kayak karlin dye and kai pak cs 410 text information systems, fall 2020 december 13, 2020 bert for 100% accuracy (sarcasm) 13th december, 2020 introduction in this paper, we discuss the implementation of a pre-trained bert nn model to a binary classification problem based on nlp characteristics to detect sarcasm in a dataset consisting of a series of twitter messages (tweets). we find that the bert model performs exceedingly well with minimal data processing and hyperparameter tuning. through repeated experiments, the team consistently scored .71-.75 on f1 with a final f1 score on the leaderboard of 0.745 and beating the baseline. the following sections provide some information on the bert language model, the infrastructure, language, and libraries for this project, the code, a discussion about the training process and results, and instructions on how to reproduce our final output. introduction to bert language models are key components for applications ranging from speech recognition to information retrieval. in the realm of information retrieval, often a unigram model or bag of words representation is employed. however, there are much more advanced language models that employ deep neural networks that can take word context into account and output embeddings of words in a continuous space. bert, or bidirectional encoder representations from transformers, is one of these deep learning language models that is able to include context from both the left and right sides of words. bert was developed by researchers at google ai language. more specifically the bert language model is a pre-trained neural network that through transfer learning can be refined for a particular corpus of new documents. since the output of word embeddings from the bert language model includes contextual understanding the embeddings perform well in the realm of text classification. the bert neural network architecture consists of 24 layers of transformer blocks, 16 attention heads, and 340 million parameters. the bert model employs a preprocessing step for input text that can take into account a pair of sequential sentences and includes information about the word positions, sentence positions, and the words themselves. this preprocessing step for text input is an important component of the model training process. once input is properly preprocessed the bert model uses some novel techniques as part of the training process. one challenge involved is how to include both left and right context in a final output embedding. the bert researchers solved this problem by utilizing a technique called masked lm (mlm) which masks 15% of input tokens at random and then uses a classification layer to predict the masked token. an additional strategy that the bert model uses to help encode context is a technique called next sentence prediction (nsp). the process involves an additional classification layer that is given pairs of sentences and is trained to predict whether one of the sentences in the pair is subsequent from the first. this technique is reliant on the preprocessing of text input that provides information about sentence positions. during training a random sentence from the corpus is paired with an input sentence 50% of the time and the other 50% of the time is paired with the actual subsequent sentence pair from the input. bert has been pre-trained on an extremely large corpus of text and is often fine-tuned for a specific application. bert can be used in a wide range of applications including sentiment analysis, next sentence classification, question answering tasks, named entity recognition (ner), and many more. the use of bert for many of these tasks have achieved state-of-the-art results. there are many options for using bert for text classification tasks. one common approach is the use of the pytorch transformers library from huggingface. this library contains pre-trained bert models of different sizes and for different languages and use-cases. the full documentation for how to use the library is available at: https://huggingface.co/transformers/model_doc/bert.html model code two classes were written to handle data processing and the model. utilizing huggingface package with python and pytorch as deep learning framework, we wrote the following classes: dataprep the dataprep class is used to process the train.jsonl and test.jsonl files and write out three csv files that are used for training the classification model and one csv file that will be used for getting predictions for submission. the response_only  argument can be used when instantiating the class to either write out the tweet response by itself or both the response and context tweets concatenated together. the train_test_split  method is used to split the train.jsonl data into a training, validation, and test set to be used for model training. when training the neural network the validation set is used to monitor progress. after training is complete the test set is used to do a final evaluation of the models performance. the write_data  method writes out three csv files for the training, validation, and testing along with a file that will be used to generate the predictions for submission. sarcasmdetector the sarcasmdetector class is used to instantiate, train, evaluate, and perform predictions with the bert based neural network model. for the sake of brevity not all methods and attributes will be described in this paper. a sample notebook in the repository will provide additional detail on how to properly use this class. the primary usage of the class for model training, evaluation, and prediction uses the following sequence of methods: 1. instantiate the class with arguments indicating the directories where the csv data resides, the model weights should be saved, and the training tensorboard logs should be saved. 2. use the tokenize_data  method to tokenize the training, validation, and test text data appropriately for use in the bert pre-trained model. the names of each file will need to be passed along with an appropriate batch size for training (if you are running out of memory when attempting to train reduce this value). 3. the tune  method is then utilized to perform a gridsearch for the optimal learning rate hyperparameter. a list of learning rates and a list of the number of epochs to train for must be supplied as arguments when using this method. 4. the evaluate  method can then be used to provide precision, recall, and f1 metrics for the trained model using the test set. 5. lastly, the predict  method uses the trained model to create predictions on the tweets supplied for submission. the output of this method is a dataframe that can then be written to disk for submission. infrastructure we trained our models on the collab google environment which is a virtualized jupyter notebook utilizing tesla gpus for training. results tensorboard was used to log training and validation loss during the hyperparameter tuning process. the screenshot below shows the results from a number of training runs utilizing different learning rates and number of epochs. it turned out that using the tweet responses concatenated with context and a learning rate of 8e-7 was the best performing model. below are the precision, recall, and f1 scores for this model on the held out test data. courseproject - bert for 100% accuracy (sarcasm) this readme serves as technical documentation and overview of the project code. please review the pdf included in this repository for more detailed information on the bert model, results, and technical details. technical requirements the code has been tested on python 3.8.x and requires the following core packages. torch >= 1.5 transformers >= 3.5.1 tensorflow >= 2.3.1 pandas >= 1.1.4 numpy >= 1.18.5 scikit-learn matplotlib seaborn it is highly recommended to use virtual environments for running this code, or on a dedicated cloud environment such as google colab. running in google colab this is probably the easiest way to get things going. the teamkayak_sarcasmdetectordemo.ipynb notebook located in this repo gives a good overview of the environment set up steps you'll need to run this repo. install required packages you will want to be able to sync to google drive so you can check out this repo and have it available to colab. running the cell below will install the google package and mount your gdrive. then, run the sample git clone command replacing my_directory to a location of your convenience. from google.colab import drive drive.mount('/content/drive', force_remount=true) !git clone https://github.com/kaipak/courseproject.git my_directory !pip install transformer set up environment you will need to set up some directories in your gdrive to hold the input datasets and so the code can also output processed data, model checkpoints, metrics, etc. you can use the following cell as a template. ``` set paths for google drive source_folder = '/content/drive/my drive/data' destination_folder = '/content/drive/my drive/model/response' code_folder = '/content/drive/my drive/courseproject/src' train_log_dir = '/content/drive/my drive/logs/tensorboard/train/' ``` then, import needed packages to your notebook: ``` import sys, os from pathlib import path import random import pandas as pd import matplotlib.pyplot as plt import seaborn as sns sys.path.append(code_folder) from model import sarcasmdetector from data_prep import dataprep ``` prepare data the input data for the model can be processed using our data_prep class: ``` prepare data data_prepper = dataprep(train_path=source_folder + '/train.jsonl', sub_path=source_folder + '/test.jsonl', response_only=false) data_prepper.train_test_split() data_prepper.write_data(datapath=source_folder) ``` most of the parameters have sane default values, but you can see the docstrings to alter if you like. train a model the model should be ready to train now. ``` instantiate model sarcmodel = sarcasmdetector(input_dir=source_folder, output_dir=destination_folder train_log_dir = train_log_dir ``` tokenize text then, tokenize the input data: ``` sarcmodel.tokenize_data(train_fname = 'train.csv', validate_fname = 'validate.csv', test_fname = 'test.csv', batch_size = 8 ``` start up tensorboard this will give you feedback on how training is going. run the magic command. %tensorboard --logdir train! there's a tune() method that does grid search to find best set of hyperparameters but just running on lists of singletons is essesntially as running train(). ``` learning rate list lr_list = [5e-7] number epochs list num_epochs_list = [15] tune hyperparameters sarcmodel.tune(lr_list=lr_list, num_epochs_list=num_epochs_list ``` evaluate you can then run the trained model against the test set to get some metrics on how well it does on unseen observations. sarcmodel.evaluate(model_name = 'lr_5e-07_epochs_15_') kai pak and karlin dye november 29, 2020 cs410 team kayak project progress report progress made thus far we have implemented a bert based pretrained model using huggingface transformers on pytorch framework. we have already beat baseline and our score is currently #18 on the leaderboard (kaipak) model has been deployed on google collab as well as on local workstation with gpu. remaining tasks we plan on continuing fine tuning the model including experimenting with combinations of context and response. develop systematic way of searching for optimal hyperparameter tuning including finding optimal learning rate clean code write documentation create short presentation any challenges/issues faced investigate variances in performance when no parameters are modified could use better gpu cs 410 team kayak course project proposal project topic: text classification competition - twitter sarcasm detection what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. team kayak names netids kai pak - captain kaipak2 karlin dye karlind2 which competition do you plan to join? text classification competition: twitter sarcasm detection if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. neural network architectures: rnn, cnn, lstm, bi-lstm, c-lstm, bert deep learning frameworks experience: tensorflow, pytorch, keras, fastai platforms: google colab, aws sagemaker and ai/ml tools past experience: have used neural networks for image classification, segmentation, and entity detection and classification. which programming language do you plan to use? python	['team', 'kayak', 'karlin', 'dye', 'kai', 'pak', 'cs', 'text', 'information', 'systems', 'fall', 'december', 'bert', 'accuracy', 'sarcasm', 'th', 'introduction', 'paper', 'discuss', 'implementation', 'pretrained', 'nn', 'model', 'binary', 'classification', 'problem', 'based', 'nlp', 'characteristics', 'detect', 'dataset', 'consisting', 'series', 'twitter', 'messages', 'tweets', 'find', 'performs', 'exceedingly', 'well', 'minimal', 'data', 'processing', 'hyperparameter', 'tuning', 'repeated', 'experiments', 'consistently', 'scored', 'f', 'final', 'score', 'leaderboard', 'beating', 'baseline', 'following', 'sections', 'provide', 'language', 'infrastructure', 'libraries', 'project', 'code', 'discussion', 'training', 'process', 'results', 'instructions', 'reproduce', 'output', 'models', 'key', 'components', 'applications', 'ranging', 'speech', 'recognition', 'retrieval', 'realm', 'often', 'unigram', 'bag', 'words', 'representation', 'employed', 'however', 'much', 'advanced', 'employ', 'deep', 'neural', 'networks', 'take', 'word', 'context', 'account', 'embeddings', 'continuous', 'space', 'bidirectional', 'encoder', 'representations', 'transformers', 'one', 'learning', 'able', 'include', 'left', 'right', 'sides', 'developed', 'researchers', 'google', 'ai', 'specifically', 'network', 'transfer', 'refined', 'particular', 'corpus', 'new', 'documents', 'since', 'includes', 'contextual', 'understanding', 'perform', 'architecture', 'consists', 'layers', 'transformer', 'blocks', 'attention', 'heads', 'million', 'parameters', 'employs', 'preprocessing', 'step', 'input', 'pair', 'sequential', 'sentences', 'positions', 'sentence', 'important', 'component', 'properly', 'preprocessed', 'uses', 'novel', 'techniques', 'part', 'challenge', 'involved', 'embedding', 'solved', 'utilizing', 'technique', 'called', 'masked', 'lm', 'mlm', 'masks', 'tokens', 'random', 'layer', 'predict', 'token', 'additional', 'strategy', 'help', 'encode', 'next', 'prediction', 'nsp', 'involves', 'given', 'pairs', 'trained', 'whether', 'subsequent', 'first', 'reliant', 'provides', 'paired', 'time', 'actual', 'extremely', 'large', 'finetuned', 'specific', 'application', 'used', 'wide', 'range', 'including', 'sentiment', 'analysis', 'question', 'answering', 'tasks', 'named', 'entity', 'ner', 'many', 'use', 'achieved', 'stateoftheart', 'options', 'using', 'common', 'approach', 'pytorch', 'library', 'huggingface', 'contains', 'different', 'sizes', 'languages', 'usecases', 'full', 'documentation', 'available', 'httpshuggingfacecotransformersmodel_docberthtml', 'two', 'classes', 'written', 'handle', 'package', 'python', 'framework', 'wrote', 'dataprep', 'class', 'trainjsonl', 'testjsonl', 'files', 'write', 'three', 'csv', 'file', 'getting', 'predictions', 'submission', 'response_only', 'argument', 'instantiating', 'either', 'tweet', 'response', 'concatenated', 'together', 'train_test_split', 'method', 'split', 'validation', 'test', 'set', 'monitor', 'progress', 'complete', 'evaluation', 'performance', 'write_data', 'writes', 'testing', 'along', 'generate', 'sarcasmdetector', 'instantiate', 'train', 'evaluate', 'sake', 'brevity', 'methods', 'attributes', 'described', 'sample', 'notebook', 'repository', 'detail', 'primary', 'usage', 'sequence', 'arguments', 'indicating', 'directories', 'resides', 'weights', 'saved', 'tensorboard', 'logs', 'tokenize_data', 'tokenize', 'appropriately', 'names', 'need', 'passed', 'appropriate', 'batch', 'size', 'running', 'memory', 'attempting', 'reduce', 'value', 'tune', 'utilized', 'gridsearch', 'optimal', 'rate', 'list', 'rates', 'number', 'epochs', 'must', 'supplied', 'precision', 'recall', 'metrics', 'lastly', 'create', 'dataframe', 'disk', 'collab', 'environment', 'virtualized', 'jupyter', 'tesla', 'gpus', 'log', 'loss', 'screenshot', 'shows', 'runs', 'turned', 'responses', 'e', 'best', 'performing', 'scores', 'held', 'courseproject', 'readme', 'serves', 'technical', 'overview', 'please', 'review', 'pdf', 'included', 'detailed', 'details', 'requirements', 'tested', 'x', 'requires', 'core', 'packages', 'torch', 'tensorflow', 'pandas', 'numpy', 'scikitlearn', 'matplotlib', 'seaborn', 'highly', 'recommended', 'virtual', 'environments', 'dedicated', 'cloud', 'colab', 'probably', 'easiest', 'way', 'get', 'things', 'going', 'teamkayak_sarcasmdetectordemoipynb', 'located', 'repo', 'gives', 'good', 'steps', 'youll', 'run', 'install', 'required', 'want', 'sync', 'drive', 'check', 'cell', 'mount', 'gdrive', 'git', 'clone', 'command', 'replacing', 'my_directory', 'location', 'convenience', 'googlecolab', 'import', 'drivemountcontentdrive', 'force_remounttrue', 'httpsgithubcomkaipakcourseprojectgit', 'pip', 'hold', 'datasets', 'also', 'processed', 'checkpoints', 'etc', 'template', 'paths', 'source_folder', 'contentdrivemy', 'drivedata', 'destination_folder', 'drivemodelresponse', 'code_folder', 'drivecourseprojectsrc', 'train_log_dir', 'drivelogstensorboardtrain', 'needed', 'sys', 'os', 'pathlib', 'path', 'pd', 'matplotlibpyplot', 'plt', 'sns', 'syspathappendcode_folder', 'data_prep', 'prepare', 'data_prepper', 'datapreptrain_pathsource_folder', 'sub_pathsource_folder', 'response_onlyfalse', 'data_preppertrain_test_split', 'data_prepperwrite_datadatapathsource_folder', 'sane', 'default', 'values', 'see', 'docstrings', 'alter', 'like', 'ready', 'sarcmodel', 'sarcasmdetectorinput_dirsource_folder', 'output_dirdestination_folder', 'sarcmodeltokenize_datatrain_fname', 'traincsv', 'validate_fname', 'validatecsv', 'test_fname', 'testcsv', 'batch_size', 'start', 'give', 'feedback', 'magic', 'logdir', 'theres', 'grid', 'search', 'hyperparameters', 'lists', 'singletons', 'essesntially', 'lr_list', 'num_epochs_list', 'sarcmodeltunelr_listlr_list', 'num_epochs_listnum_epochs_list', 'unseen', 'observations', 'sarcmodelevaluatemodel_name', 'lr_e_epochs__', 'november', 'report', 'made', 'thus', 'far', 'implemented', 'already', 'beat', 'currently', 'kaipak', 'deployed', 'local', 'workstation', 'gpu', 'remaining', 'plan', 'continuing', 'fine', 'experimenting', 'combinations', 'develop', 'systematic', 'searching', 'finding', 'clean', 'short', 'presentation', 'challengesissues', 'faced', 'investigate', 'variances', 'modified', 'could', 'better', 'course', 'proposal', 'topic', 'competition', 'detection', 'netids', 'members', 'captain', 'administrative', 'duties', 'karlind', 'join', 'choose', 'prepared', 'learn', 'classifiers', 'name', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'architectures', 'rnn', 'cnn', 'lstm', 'bilstm', 'clstm', 'keras', 'fastai', 'platforms', 'aws', 'sagemaker', 'aiml', 'tools', 'past', 'image', 'segmentation', 'programming']
https://github.com/kaiyuandou/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/kn13-kiran/CourseProject	restaurant menu crawler & classifier kiranmayee nimashakavi (cs410 course project) project overview context & objective a restaurant review company would like to provide recommendation on menu items across the world. to accomplish this goal, the first stage of the pipeline is to identify the urls that relevant (i.e. find the urls that contain menu information) this tool crawls the urls, classifies the pages that contain menu. components scrapy an open source and collaborative framework (python based) for extracting the data you need from websites. beautifulsoup beautiful soup is a python library for pulling data out of html and xml file metapy python bindings for meta toolkit that tokenizes documents, creates indexes, inverted indexes, classifies, creates topic models etc., scrapy architecture project design 1. list of urls main.py duplink remover pagedataoutput scrapy engine pipelines menu spider spiders meta py menu classifier 2b. downloaded content 4. classify using page data 6. uses pre-indexed training data set 5. uses metapy to classify training dataset + indexes beautiful soup 3. extract text data from page 7. save menu links, processed links down loader 2a. download pages final results 8. save menu links, processed links design/code level overview contains all scrapy plug-ins contains custom spider code stores log files contains the pre-classified seed data contains all urls that were crawled urls classified as menupages demo webcrawler for restaurant menus: from a given list of urls, this crawler looks for pages that are relevant to restaurants, pages that contain restaurant menu and downloads the menus and drops the remaining pages. the high-level process can be summarized as: from a base url, crawl the home page. using title, head, page tags identify whether that site will contain restaurant menu or not? only for restaurant menu related sites, find all links classify the pages that contain the menu and keep the menu pages. what is completed: architecture design finalized tools and technologies. design of base classes key components: classifier: classifier uses title, head and page tags to classify relevance of the page to find out whether a page is a restaurant page or not. if it is a restaurants page, then further crawling is performed. webcrawler: webcrawler is used to crawl main pages, links under that page etc. it stops crawling page if relevance score goes to zero or lesser (i.e., that site doesn't contain menu). web crawler takes inputs seed data and classifier instance which has to inherit from web classifier. using seed urls, it starts extracting title, head, page tags identify whether that category is restaurant, or the page contains menu etc., which tasks are pending? training - manually create training data set by using existing known restaurant sites, sites containing menu information, non-restaurant pages and converting them to metapy format. code, integration testing - developing the scraping code, classifier code and integrate them and test it end2end. are you facing any challenges? integrating classifier with scrapy. identifying pages that contains menus from other pages in a site. restaurant menu crawler & classifier a restaurant review company would like to provide recommendation on menu items across the world. to accomplish this goal, the first stage of the pipeline is to identify the urls that relevant (i.e. find the urls that contain menu information). this project focuses on the first stage. the summary of the video can be found herehere components there are two major components of this project: menu classifier - which uses anchor text, page title head>title, and body>p data to classify relevance of the page. this uses naivebayes classification and provides score either 0 or 1. menu spider - web crawler that downloads, parses and extract the data from the links. training data set for classifier - i've manually created, curated and labelled menu data from menupages.com dataset/sample/menu.txt - contains menu data from different types of restaurants in different cities. dataset/sample/other.txt - contains non menu relevant data. functional flow main.py: the driver code that triggers the crawling process. this component takes target urls (url that needs to be checked for menu information) as an input. first, menuclassifer is initialized using the training dataset, creates indexes and inverted indexes using meta. on target urls, driver code starts crawling using scrapy engine. scrapy engine has a call back mechanism that calls two main components menu spider and pipelines for every page that is downloaded. menuspider: responsible for extracting, parsing page content and holds them in the plain text fields. this plain content is passed to the menuclassifier and score is calculated. based on the score, further processing of the links with in that page is determined. if the score is <=0 further parsing of the links is abandoned. crawling ends when all the links are exhaused or when the score reaches 0. pipelines: duplicatelinkremover: tracks already processed urls and removes circular links so that they don't get processed again. pagedataoutput : stores the pageurl, scores to finalresults directory. project dependencies this projects uses some third party components, you have to install these components first to run this project * conda - to create python 3.5 virtual environment * python 3.5+ * scrapy 2.3.0 * metapy * beautiful soup version 4+ install scrapy crawler depends scrapy. before running this project, install scrapy using following commands. pip install scrapy install metapy we are using metapy---python bindings for meta. install metapy using the following commands. pip install metapy install beautiful soup pip install beautifulsoup4 running the project there is main.py file which needs to be invoked by passing target_urls (comma separated urls). python main.py url1,url2,...,urln for example - python main.py https://papillonrestaurant.com,http://www.cnn.com this command will generate output to finalresults folder. restaurant_menu_crawler_all_links.txt - holds all the urls that were crawled. restaurant_menu_crawler_menu_links.txt - holds the urls that contain menu informaiton. menucrawler/log -> contains log file. termination this project will keep crawling until resources is exhausted or no more relevant url to crawl.if you want to stop crawling immediately then press [ctrl^c] which unsafely stop crawler immediately. future work improving sample data - i could add additional data to include different types of cuisines. improving classification - current classification is binary , it can be further improved to include type of cuisine. tracking zipcodes - the next part of this pipeline requires us to store the zipcode information associated with the restaurant. currently, zipcode information is not saved, but, it can also be added to the output. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. this is a solo project. my name is kiranmayee nimashakavi. my netid is kn13@illinois.edu. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? webcrawler and classifier for menupages.com or some site that offers restaurant menus. the objective is to crawl the entire site and collect all pages and then classify the pages that has menu information. this information can be used to create a dish specific search on the restaurant menu. my approach is to build a non-recursive crawler that extracts all pages from a given list of sites and use some classifier as (naive bayes) to classify the pages. i've not decided on the tools to use on this project yet. the specific set of systems that are used are the list of websites that will be given as an input to the program. expected outcome is to store the menu pages to a specific directory. i will manually test the output data by supplying some random collection of urls. if time permits, i will implement the dish search on the dataset that was classified as a menu page. which programming language do you plan to use? python please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. the following activities has to be performed to accomplish this project. design and implementation of the non-recursive crawler. - 5 hours design and implementation of the classifier - 3 hours unit and manual testing of the crawler and classifier - 5 hours performance tuning of crawler and classifier - 3 hours documentation of the project - 4 hours presentation of the project -2 hours	['restaurant', 'menu', 'crawler', 'classifier', 'kiranmayee', 'nimashakavi', 'cs', 'course', 'project', 'overview', 'context', 'objective', 'review', 'company', 'would', 'like', 'provide', 'recommendation', 'items', 'across', 'world', 'accomplish', 'goal', 'first', 'stage', 'pipeline', 'identify', 'urls', 'relevant', 'ie', 'find', 'contain', 'information', 'tool', 'crawls', 'classifies', 'pages', 'components', 'scrapy', 'open', 'source', 'collaborative', 'framework', 'python', 'based', 'extracting', 'data', 'need', 'websites', 'beautifulsoup', 'beautiful', 'soup', 'library', 'pulling', 'html', 'xml', 'file', 'metapy', 'bindings', 'meta', 'toolkit', 'tokenizes', 'documents', 'creates', 'indexes', 'inverted', 'topic', 'models', 'etc', 'architecture', 'design', 'list', 'mainpy', 'duplink', 'remover', 'pagedataoutput', 'engine', 'pipelines', 'spider', 'spiders', 'py', 'b', 'downloaded', 'content', 'classify', 'using', 'page', 'uses', 'preindexed', 'training', 'set', 'dataset', 'extract', 'text', 'save', 'links', 'processed', 'loader', 'download', 'final', 'results', 'designcode', 'level', 'contains', 'plugins', 'custom', 'code', 'stores', 'log', 'files', 'preclassified', 'seed', 'crawled', 'classified', 'menupages', 'demo', 'webcrawler', 'menus', 'given', 'looks', 'restaurants', 'downloads', 'drops', 'remaining', 'highlevel', 'process', 'summarized', 'base', 'url', 'crawl', 'home', 'title', 'head', 'tags', 'whether', 'site', 'related', 'sites', 'keep', 'completed', 'finalized', 'tools', 'technologies', 'classes', 'key', 'relevance', 'crawling', 'performed', 'used', 'main', 'stops', 'score', 'goes', 'zero', 'lesser', 'doesnt', 'web', 'takes', 'inputs', 'instance', 'inherit', 'starts', 'category', 'tasks', 'pending', 'manually', 'create', 'existing', 'known', 'containing', 'nonrestaurant', 'converting', 'format', 'integration', 'testing', 'developing', 'scraping', 'integrate', 'test', 'endend', 'facing', 'challenges', 'integrating', 'identifying', 'focuses', 'summary', 'video', 'found', 'herehere', 'two', 'major', 'anchor', 'headtitle', 'bodyp', 'naivebayes', 'classification', 'provides', 'either', 'parses', 'ive', 'created', 'curated', 'labelled', 'menupagescom', 'datasetsamplemenutxt', 'different', 'types', 'cities', 'datasetsampleothertxt', 'non', 'functional', 'flow', 'driver', 'triggers', 'component', 'target', 'needs', 'checked', 'input', 'menuclassifer', 'initialized', 'call', 'back', 'mechanism', 'calls', 'every', 'menuspider', 'responsible', 'parsing', 'holds', 'plain', 'fields', 'passed', 'menuclassifier', 'calculated', 'processing', 'determined', 'abandoned', 'ends', 'exhaused', 'reaches', 'duplicatelinkremover', 'tracks', 'already', 'removes', 'circular', 'dont', 'get', 'pageurl', 'scores', 'finalresults', 'directory', 'dependencies', 'projects', 'third', 'party', 'install', 'run', 'conda', 'virtual', 'environment', 'version', 'depends', 'running', 'following', 'commands', 'pip', 'metapypython', 'invoked', 'passing', 'target_urls', 'comma', 'separated', 'urlurlurln', 'example', 'httpspapillonrestaurantcomhttpwwwcnncom', 'command', 'generate', 'output', 'folder', 'restaurant_menu_crawler_all_linkstxt', 'restaurant_menu_crawler_menu_linkstxt', 'informaiton', 'menucrawlerlog', 'termination', 'resources', 'exhausted', 'crawlif', 'want', 'stop', 'immediately', 'press', 'ctrlc', 'unsafely', 'future', 'work', 'improving', 'sample', 'could', 'add', 'additional', 'include', 'cuisines', 'current', 'binary', 'improved', 'type', 'cuisine', 'tracking', 'zipcodes', 'next', 'part', 'requires', 'us', 'store', 'zipcode', 'associated', 'currently', 'saved', 'also', 'added', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'solo', 'name', 'netid', 'knillinoisedu', 'free', 'please', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'offers', 'entire', 'collect', 'dish', 'specific', 'search', 'build', 'nonrecursive', 'extracts', 'use', 'naive', 'bayes', 'decided', 'yet', 'program', 'supplying', 'random', 'collection', 'time', 'permits', 'implement', 'programming', 'language', 'plan', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'estimated', 'cost', 'activities', 'implementation', 'unit', 'manual', 'performance', 'tuning', 'documentation', 'presentation']
https://github.com/kplhung/CourseProject	"hung 1 pei lun hung cs 410 professor chengxiang zhai december 13th, 2020 documentation 1. code functionality overview this code parses a large data set1 and extracts a set of documents consisting of paragraphs related to the 2000 united states presidential election, contested between republican george w. bush and democrat al gore. it then goes on to apply latent dirichlet allocation (lda), a generative statistical model, to this document set, thus identifying candidate topics in the set. normalized prices based on the democratic candidate, al gore, are then extracted from the iowa electronic markets (iem) 2000 presidential winner-takes-all market2, and granger testing is performed to determine possible causality of the candidate topics, indicating which topical key words are most likely to impact the candidate's iem price positively or negatively--that is, their likelihood of being elected. this can be taken as a prior for future iterations of causal topic mining. in terms of future applications, the code can be modified to identify target paragraphs of any nature from the new york times corpus. various external time series data can also be used in conjunction--physical data comes to mind as a useful application. or, public opinion polling on issues like climate change or social problems could be coupled with data from the new york times corpus in order to find any sort of causal relationship between media coverage and public opinion surrounding those issues. 1 namely, the new york times corpus, from may to october 2000 2 a prediction market allowing traders to buy and sell contracts based on that year's presidential election. hung 2 2. software implementation note: mining_causal_topics.ipynb combines code and results from identify_candidate_topics.py, iowa_electronic_markets.py, and granger_testing.py into one coherent file; this notebook is the easiest place to see code and results past the election paragraph parsing stage, though documentation has been organized based on the subfiles for ease. find_election_paragraphs.py: filters may through october 2000 new york times articles for election-related paragraphs - find_election_paragraphs(directory): given a directory containing xml article data, walks through all subdirectories and parses all files. writes all election-related paragraphs (those containing ""gore"" or ""bush"") to a file called ""election_paragraphs.csv"" o helper functions: # parse_xml(xml, election_paragraphs): checks xml article for person tag, then parses relevant articles' full text for relevant paragraphs # contains_election_words(text): returns true if and only if ""bush"" or ""gore"" is a substring of the input text # format_date(file_path): returns formatted date from directory path identify_candidate_topics.py: applies lda to the document set to identify candidate topics - data wrangling o wrangle and clean paragraph data by removing punctuation and lowercasing text o remove stop words from the paragraph data and vectorize the text using scikit- learn, then learn the vocabulary dictionary, deriving a document-term matrix over the paragraph set - topic modeling with lda o using lda, learn the documents as bags of words and identify candidate topics in the paragraph set o transform the document-term matrix according to the fitted lda model, and index on date (dates range from may 1st, 2000 to october 31st, 2000) hung 3 iowa_electronic_markets.py: wrangles, cleans, and normalizes iem 2000 presidential winner- takes-all market data - data wrangling o format_date(date): given iem-style date (mm/dd/yy), returns nyt-style date (yyyy-mm-dd) o read from ""iem_2000.txt""--candidate price data from may to october 2000-- and drop irrelevant columns (namely: units, volume, low price, high price, and average price), keeping only date, contract, and last price data; index on date o derive lists of democratic and republican candidate prices based on the ""contract"" field (""dem"" indicates democrat; ""rep"" indicates republican) o compute normalized prices based on the democratic candidate # for each date index, normalized price = dem price / (dem price + rep price) - election coverage vs. election forecast o concatenate the normalized price data to the topic coverage data from identify_candidate_topics.py; this brings together topic words and price data, indexed by date granger_testing.py: perform granger tests to determine significant causal words and their impact - granger testing o perform granger tests3 to test causality with max lags up to 3 - significant causal words o compute average p-values across time lags (from 1 up to 3) for each candidate topic term, based on parameter f tests 3 granger tests compute lagged correlation measures to find potential causal relationships between time series-- here, they look for potential causal relationships between new york times coverage and candidate electability hung 4 o sort candidate topic terms by causality probability, where a smaller p-value corresponds to a larger probability that there exists some type of causal relationship between the two time-indexed data - prior influence o determine positive impact terms and negative impact terms, where positive impact terms are the ones with p-values in the lower half, and negative impact terms are the ones with p-values in the upper half 3. usage - install jupyter using the documentation provided here - open terminal and run the following command: o git clone https://github.com/kplhung/courseproject.git - launch jupyter notebook and navigate to the courseproject directory - open and run find_election_paragraphs.ipynb o [kernel] - [restart & run all] - open and run mining_causal_topics.ipynb o [kernel] - [restart and run all] 4. team member contributions this was an individual project. hung 1 pei lun hung cs 410 professor chengxiang zhai november 29th, 2020 progress report 1. completed tasks - filter the new york times corpus for articles from may 2000 to october 2000 that mention ""bush"" or ""gore."" - apply latent dirichlet allocation (lda) to the cleaned new york times corpus to identify possible topics. - use granger testing to test causality and to derive the set of candidate causal topics with time lags. 2. pending tasks - apply granger testing to find the most significant causal words among top words for each candidate topic, and track these words' impact values. - define a prior on the parameters of the topic model using these significant terms and their corresponding impact values, and apply lda to the new york times corpus using this prior. - iterate, and replicate one set of experimental results by using prices from the iowa electronic markets 2000 presidential winner-takes-all market. 3. challenges - fully understanding how to set the strength of the prior in each iteration by using m. hung 1 pei lun hung cs 410 professor chengxiang zhai october 25th, 2020 project proposal project topic: reproducing a paper on causal topic modeling 1. team name: pei lun hung (project coordinator/leader) netid: prhung2 email address: prhung2@illinois.edu 2. paper i plan to reproduce the results from hyun duk kim et al.'s paper, ""mining causal topics in text data: iterative topic modeling with time series feedback.""1 3. implementation language i plan to implement the project in python. 4. data set the paper uses the new york times annotated corpus. as such, i have registered for an account with the linguistic data consortium and am awaiting acceptance from admin. 5 backup data set there is a digital archive2 of the new york times, with articles from the 1850s to the present day. as backup, i can scrape articles from january 1st, 1987 to june 19th, 2007 from this digital archive in order to obtain a similar data set to the aforementioned corpus, sans annotations. 1 hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 2 https://spiderbites.nytimes.com/ courseproject topic: reproducing a paper on causal topic modeling reference: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 video: https://www.screencast.com/t/yidq5orjqwj documentation documentation is reproduced below. however, for better formatting and reading, please see the pdf version. 1. code functionality overview this code parses a large data set and extracts a set of documents consisting of paragraphs related to the 2000 united states presidential election, contested between republican george w. bush and democrat al gore. it then goes on to apply latent dirichlet allocation (lda), a generative statistical model, to this document set, thus identifying candidate topics in the set. normalized prices based on the democratic candidate, al gore, are then extracted from the iowa electronic markets (iem) 2000 presidential winner-takes-all market , and granger testing is performed to determine possible causality of the candidate topics, indicating which topical key words are most likely to impact the candidate's iem price positively or negatively--that is, their likelihood of being elected. this can be taken as a prior for future iterations of causal topic mining. in terms of future applications, the code can be modified to identify target paragraphs of any nature from the new york times corpus. various external time series data can also be used in conjunction--physical data comes to mind as a useful application. or, public opinion polling on issues like climate change or social problems could be coupled with data from the new york times corpus in order to find any sort of causal relationship between media coverage and public opinion surrounding those issues. 2. software implementation note: mining_causal_topics.ipynb combines code and results from identify_candidate_topics.py, iowa_electronic_markets.py, and granger_testing.py into one coherent file; this notebook is the easiest place to see code and results past the election paragraph parsing stage, though documentation has been organized based on the subfiles for ease. find_election_paragraphs.py: filters may through october 2000 new york times articles for election-related paragraphs * find_election_paragraphs(directory): given a directory containing xml article data, walks through all subdirectories and parses all files. writes all election-related paragraphs (those containing ""gore"" or ""bush"") to a file called ""election_paragraphs.csv"" helper functions: parse_xml(xml, election_paragraphs): checks xml article for person tag, then parses relevant articles' full text for relevant paragraphs contains_election_words(text): returns true if and only if ""bush"" or ""gore"" is a substring of the input text * format_date(file_path): returns formatted date from directory path identify_candidate_topics.py: applies lda to the document set to identify candidate topics * data wrangling wrangle and clean paragraph data by removing punctuation and lowercasing text remove stop words from the paragraph data and vectorize the text using scikit-learn, then learn the vocabulary dictionary, deriving a document-term matrix over the paragraph set * topic modeling with lda using lda, learn the documents as bags of words and identify candidate topics in the paragraph set transform the document-term matrix according to the fitted lda model, and index on date (dates range from may 1st, 2000 to october 31st, 2000) iowa_electronic_markets.py: wrangles, cleans, and normalizes iem 2000 presidential winner-takes-all market data * data wrangling format_date(date): given iem-style date (mm/dd/yy), returns nyt-style date (yyyy-mm-dd) read from ""iem_2000.txt""--candidate price data from may to october 2000-- and drop irrelevant columns (namely: units, volume, low price, high price, and average price), keeping only date, contract, and last price data; index on date derive lists of democratic and republican candidate prices based on the ""contract"" field (""dem"" indicates democrat; ""rep"" indicates republican) compute normalized prices based on the democratic candidate * for each date index, normalized price = dem price / (dem price + rep price) * election coverage vs. election forecast concatenate the normalized price data to the topic coverage data from identify_candidate_topics.py; this brings together topic words and price data, indexed by date granger_testing.py: perform granger tests to determine significant causal words and their impact * granger testing perform granger tests to test causality with max lags up to 3 * significant causal words compute average p-values across time lags (from 1 up to 3) for each candidate topic term, based on parameter f tests sort candidate topic terms by causality probability, where a smaller p-value corresponds to a larger probability that there exists some type of causal relationship between the two time-indexed data * prior influence determine positive impact terms and negative impact terms, where positive impact terms are the ones with p-values in the lower half, and negative impact terms are the ones with p-values in the upper half 3. usage install jupyter using the documentation provided here open terminal and run the following command: git clone https://github.com/kplhung/courseproject.git launch jupyter notebook and navigate to the courseproject directory open and run find_election_paragraphs.ipynb: [kernel] -> [restart & run all] once find_election_paragraphs.ipynb is finished running, open and run mining_causal_topics.ipynb: [kernel] -> [restart and run all] 4. team member contributions this was an individual project."	['hung', 'pei', 'lun', 'cs', 'professor', 'chengxiang', 'zhai', 'december', 'th', 'documentation', 'code', 'functionality', 'overview', 'parses', 'large', 'data', 'set', 'extracts', 'documents', 'consisting', 'paragraphs', 'related', 'united', 'states', 'presidential', 'election', 'contested', 'republican', 'george', 'w', 'bush', 'democrat', 'al', 'gore', 'goes', 'apply', 'latent', 'dirichlet', 'allocation', 'lda', 'generative', 'statistical', 'model', 'document', 'thus', 'identifying', 'candidate', 'topics', 'normalized', 'prices', 'based', 'democratic', 'extracted', 'iowa', 'electronic', 'markets', 'iem', 'winnertakesall', 'market', 'granger', 'testing', 'performed', 'determine', 'possible', 'causality', 'indicating', 'topical', 'key', 'words', 'likely', 'impact', 'candidates', 'price', 'positively', 'negativelythat', 'likelihood', 'elected', 'taken', 'prior', 'future', 'iterations', 'causal', 'topic', 'mining', 'terms', 'applications', 'modified', 'identify', 'target', 'nature', 'new', 'york', 'times', 'corpus', 'various', 'external', 'time', 'series', 'also', 'used', 'conjunctionphysical', 'comes', 'mind', 'useful', 'application', 'public', 'opinion', 'polling', 'issues', 'like', 'climate', 'change', 'social', 'problems', 'could', 'coupled', 'order', 'find', 'sort', 'relationship', 'media', 'coverage', 'surrounding', 'namely', 'may', 'october', 'prediction', 'allowing', 'traders', 'buy', 'sell', 'contracts', 'years', 'software', 'implementation', 'note', 'mining_causal_topicsipynb', 'combines', 'results', 'identify_candidate_topicspy', 'iowa_electronic_marketspy', 'granger_testingpy', 'one', 'coherent', 'file', 'notebook', 'easiest', 'place', 'see', 'past', 'paragraph', 'parsing', 'stage', 'though', 'organized', 'subfiles', 'ease', 'find_election_paragraphspy', 'filters', 'articles', 'electionrelated', 'find_election_paragraphsdirectory', 'given', 'directory', 'containing', 'xml', 'article', 'walks', 'subdirectories', 'files', 'writes', 'called', 'election_paragraphscsv', 'helper', 'functions', 'parse_xmlxml', 'election_paragraphs', 'checks', 'person', 'tag', 'relevant', 'full', 'text', 'contains_election_wordstext', 'returns', 'true', 'substring', 'input', 'format_datefile_path', 'formatted', 'date', 'path', 'applies', 'wrangling', 'wrangle', 'clean', 'removing', 'punctuation', 'lowercasing', 'remove', 'stop', 'vectorize', 'using', 'scikit', 'learn', 'vocabulary', 'dictionary', 'deriving', 'documentterm', 'matrix', 'modeling', 'bags', 'transform', 'according', 'fitted', 'index', 'dates', 'range', 'st', 'wrangles', 'cleans', 'normalizes', 'winner', 'takesall', 'format_datedate', 'iemstyle', 'mmddyy', 'nytstyle', 'yyyymmdd', 'read', 'iem_txtcandidate', 'drop', 'irrelevant', 'columns', 'units', 'volume', 'low', 'high', 'average', 'keeping', 'contract', 'last', 'derive', 'lists', 'field', 'dem', 'indicates', 'rep', 'compute', 'vs', 'forecast', 'concatenate', 'brings', 'together', 'indexed', 'perform', 'tests', 'significant', 'test', 'max', 'lags', 'pvalues', 'across', 'term', 'parameter', 'f', 'lagged', 'correlation', 'measures', 'potential', 'relationships', 'look', 'electability', 'probability', 'smaller', 'pvalue', 'corresponds', 'larger', 'exists', 'type', 'two', 'timeindexed', 'influence', 'positive', 'negative', 'ones', 'lower', 'half', 'upper', 'usage', 'install', 'jupyter', 'provided', 'open', 'terminal', 'run', 'following', 'command', 'git', 'clone', 'httpsgithubcomkplhungcourseprojectgit', 'launch', 'navigate', 'courseproject', 'find_election_paragraphsipynb', 'kernel', 'restart', 'team', 'member', 'contributions', 'individual', 'project', 'november', 'progress', 'report', 'completed', 'tasks', 'filter', 'mention', 'cleaned', 'use', 'pending', 'among', 'top', 'track', 'values', 'define', 'parameters', 'corresponding', 'iterate', 'replicate', 'experimental', 'challenges', 'fully', 'understanding', 'strength', 'iteration', 'proposal', 'reproducing', 'paper', 'name', 'coordinatorleader', 'netid', 'prhung', 'email', 'address', 'prhungillinoisedu', 'plan', 'reproduce', 'hyun', 'duk', 'kim', 'et', 'als', 'iterative', 'feedback', 'language', 'implement', 'python', 'uses', 'annotated', 'registered', 'account', 'linguistic', 'consortium', 'awaiting', 'acceptance', 'admin', 'backup', 'digital', 'archive', 'present', 'day', 'scrape', 'january', 'june', 'obtain', 'similar', 'aforementioned', 'sans', 'annotations', 'malu', 'castellanos', 'meichun', 'hsu', 'thomas', 'rietz', 'daniel', 'diermeier', 'proceedings', 'nd', 'acm', 'international', 'conference', 'information', 'knowledge', 'management', 'cikm', 'ny', 'usa', 'doi', 'httpsspiderbitesnytimescom', 'reference', 'video', 'httpswwwscreencastcomtyidqorjqwj', 'reproduced', 'however', 'better', 'formatting', 'reading', 'please', 'pdf', 'version', 'scikitlearn', 'finished', 'running']
https://github.com/lipingxie/CourseProject	"cs410 project code demo team name: team commonwealth team members: 1. zuliang weng / zwe 2. zijing chen / zijingc3 3. liping xie / lipingx2 (captain) demo link: cs410 course project demo - youtube we recorded our demo and uploaded the video onto youtube, please click on the above link to watch the video. if you experience any issues running our code or you have any questions regarding to our project details, please send us an email to organize a zoom meeting. thanks. contact emails: liping xie: lipingx2@illinois.edu zijing chen: zijingc3@illinois.edu zuliang weng: zwe@illinois.edu 1 cs410 project detail 1. team information team name: team commonwealth team members: 1. zuliang weng / zwe 2. zijing chen / zijingc3 3. liping xie / lipingx2 (captain) 2. project overview 2.1 project topic text classification competition: twitter sarcasm detection. the classification task is to classify the list of tweets into two categories: ""sarcasm"" or ""not_sarcasm"". there are 2 datasets: training set which with 5000 tweets and test set which with 1800 tweets. we researched and tried many cutting-edge models that are suitable for classifying ""sarcasm"" or ""not_sarcasm"" in this project. there are two files provided: train.jsonl and test.jsonl. the model is trained with the data provided in train.jsonl , and test.jsonl contains the tweets that we need to classify with the trained model. the classification result is reported with the provided id. all the results are stored in the answer.txt file. 2.2 overview of the function of the code for this classification task, we used pytorch as the deep learning framework, python(version 3.6.9) as the programming language and pre-trained bert as the state-of-the-art neural network classifier. the main function of the code is to classify the list of tweets into two categories: ""sarcasm"" or ""not_sarcasm"". to be more specific, we applied the pre-trained twitter-specific bert model, roberta-base model on the training data to fine-tune the model and then predicted on the testing data to generate final results. this code can only be used to analyze or classify tweets data due to the twitter-specific bert model we used. 2 our code is in file ""final bert twitter sarcasm classification.ipynb"", here is the detail mappings of the code section and the content: code section no. content 1 how to use google colab for training the model and perform the test under python 3.6.9 environment and install the hugging face library 2 how to load data from the provided jsonl files and parse the data 3 how to use the pre-trained bert model. how to formatting the data, tokenize dataset and split the training data into training set and validation set for the use of bert 4 how to train and fine-tune the model with different batch size, learning rate and epochs, and how to evaluate the result 5 how to use the trained model to predict the tweets provided in the test.jsonl. how to save the prediction result. 3. software implementation details 3.1 classifier selection and introduction we have investigated different types of classifiers which include word2vec, fasttext and bert. we found bert (bidirectional encoder representations from transformers) is the state-of-the-art neural network classifier. according to wikipeda, bert is a transformer-based machine learning technique for natural language processing (nlp) pre-training developed by google. bert is a model that broke several records for how well models can handle language-based tasks(jay alammar, 2018). this model would look like this: (above information and image from:http://jalammar.github.io/illustrated-bert/) to train such a model, we mainly have to train the classifier, with minimal changes happening to the bert model during the training phase. this training process is called fine- tuning (jay alammar, 2018). bert makes use of the encoder mechanism of transformer, 3 an attention mechanism that learns contextual relations between words (or sub-words) in a text. at the moment, the transformers package from hugging face pytorch library is regarded as the most widely accepted and powerful pytorch interface for working with bert. (above information and image from:http://jalammar.github.io/illustrated-bert/) bert's clever language modeling task masks 15% of words in the input and asks the model to predict the missing word (jay alammar, 2018). (above information and image from:http://jalammar.github.io/illustrated-bert/) 3.1.1 model selection 4 training a bert model takes huge time, we can use the pre-trained model, and fine-tune it with our training data. with the consideration of classifying twitter text, we used the pre- trained twitter-specific bert model - roberta-base model. the reason why we choose twitter-specific bert model is that the characteristics of tweets are significantly different from traditional text such as research papers or articles. tweets are generally short, and include frequent use of informal grammar as well as irregular vocabulary such as abbreviations. thus, it would be inappropriate to apply language models such as bert-base- uncased, bert-large-uncased that are pre-trained on traditional text with formal grammar and regular vocabulary to analyze tweets data (nguyen et al., n.d.). our testing result confirmed that the roberta-base model outperforms bert-base-uncased and bert-large-uncased in this classification task. the architecture for bertweet is very similar to bertbase, which is trained with a masked language modeling objective (devlin, 2019). bertweet pre-training procedure is based on roberta which optimizes the bert pre-training approach for more robust performance (liu, 2019). for pre-training data, bertweet uses an 80gb pre-training dataset of uncompressed texts, which contain 850m tweets (nguyen et al., n.d.). this is very similar to the training and testing dataset since our data is also tweets data. under https://huggingface.co/models, we can find there are different sub models, we compared the performance between twitter-roberta-base and twitter-roberta-base-irony, we found twitter-roberta-base performs a little bit better on the prediction task (we have provided the detail test result in section 3.7.2 ), we decided to select twitter-roberta-base in our final version code. 3.2 environment setup 3.2.1 setup colab since we need to train a large neural network, google colab offers free gpus and tpus, we used colab to train our model to shorten our training time. steps for setting up colab: 1. add google colab as an app to google drive. 2. set the runtime type to gpu. to be more specific, we went to ""edit"" -> ""'notebook settings"" -> ""hardware accelerator"" -> ""gpu"". if you want to check if the gpu is detected, execute code in section 1.1 to confirm 3. we need to identify and specify the gpu as the device in order for torch to use the gpu. as a user, you need to install the package torch if you have not installed it before. after importing the package torch, you can run the second section of code in 1.1 to specify the gpu as the device. 3.2.2 install the hugging face library we have selected the transformers package from hugging face pytorch library, so we need to install the transformers package from hugging face which gives us a pytorch interface for working with bert. you can run the code in section 1.2 to install the hugging face library. 5 3.3 data analysis and preparation there are 2 json format datasets provided: * train.jsonl: 5000 tweets * test.jsonl: 1800 tweets in each tweet in test.jsonl, it contains ""id"", ""response"" and ""context"": * id: string identifier for sample. this id will be required when making submissions. * response: the tweet to be classified * context: the conversation context of the response. the context is an ordered list of dialogue in each tweet in train.jsonl, it contains ""label"", ""response"" and ""context"": * label: sarcasm or not_sarcasm * response: the tweet to be classified * context: the conversation context of the response. the context is an ordered list of dialogue the length of all responses are less than 150 words, but for the context, some tweets with very long context and exceed the maximum supported input size (512) of bert, that means we cannot use the full content of context for classification. so, we have tried two strategies: 1. classify based on responses only 2. classify based on responses and part of context for strategy 2, according to our test, we only can include two dialogues (we have tried the last two items in each context), if we selected 3 dialogues, it reports ""cuda out of memory"" error. so, we just use the last two items in each context as part of the content for classification, then compare the f1 result (we are intended to compare the result of two strategies, and we will detail how to get the f1 value in later sections). from above, we can see that adding the content for classification doesn't improve the prediction. so, we have decided not to include the ""content"" in each tweet for our classification task. 6 please refer to code section 2.1 for how to load the data into colab for test, and section 2.2 for how to read and parse the data for later use. 3.4 tokenization 3.4.1 bert tokenizer there are many different pre-trained bert models available. each model comes with its own tokenizer. we need to make sure we use the correct tokenizer as we experiment with different models. we defined which pre-trained bert model we will use in this step and if we need to change the model, we just need to simply update the model name. please refer to code section 3.1 for more details. 3.4.2 required formatting bert requires tokens to fit certain format: 1. add special tokens to the start and end of each sentence. o for classification tasks, we must prepend the special [cls] token to the beginning of every sentence. this token has special significance. bert consists of 12 transformer layers. each transformer takes in a list of token embeddings, and produces the same number of embeddings on the output. o at the end of every sentence, we need to append the special [sep] token. 2. pad & truncate all sentences to a single constant length. 3. explicitly differentiate real tokens from padding tokens with the ""attention mask"". bert has two constraints: 1. all sentences must be padded or truncated to a single, fixed length. o for any sentences that are less than the fixed length, we need to pad with the same special token. o for any sentences that are more than the fixed length, we need to truncate them to the fixed length, otherwise the system will report the errors. 2. the maximum sentence length is 512 tokens. 3.4.3 tokenize dataset for saving the memory in the model training, we set the max_length of the input token based on the max length of all the input sentences. we used encode_plus methods for token padding and attention masking, it automatically adds ""special tokens"" which are special ids the model uses. we need to convert the lists into tensors in order to use the pytorch properly. please refer to the code section 3.3 for the detailed implementation. 3.4.4 training & validation split and batch size before training our data using bert, data must be split into tokens, and then these tokens must be mapped to their index in the tokenizer vocabulary. the tokenization must be performed by the tokenizer included with bert. 7 for the provided training data, we split them into training set and validation set, the proportion of the training set will impact the prediction accuracy of the model. we have tried the training:validation ratio as 9:1, 99:1 and 8:2. we observed when the training:validation ratio is 9:1 provides the best prediction result. please refer to section 3.7.2 for the detail test result. we used dataloader to help us save memory, and we define the batch size for this step. please refer to the code section 3.4 for the detailed implementation of data split, the usage of dataloader and the setting of batch size. 3.5 fine-tune bert models first we load the defined pre-trained bert model, examine the result, then we set the key values for training the model: * batch size (set when creating our dataloaders) * learning rate * epochs then we train the model with the training loop and provide the training result statistic (accuracy and validation lost). we use the output of the fine-turn model to predict the tweets in the test.jsonl. after that we update the parameters and train the model again. when we have a satisfied result for the pre-trained model under test, we change to other models with the same parameters. here is the a list that we have experimented: * bert models: o bert-base-uncased o bert-large-uncased * twitter-roberta models: o cardiffnlp/twitter-roberta-base o cardiffnlp/twitter-roberta-base-irony o cardiffnlp/twitter-roberta-base-offensive based on our test result, twitter-roberta models outperforms bert models on this task, we have decided not to use this model in early stage, so our testing is mainly focused on the twitter-roberta related models. comparing the performance of three twitter-roberta models, cardiffnlp/twitter-roberta-base provides the best performance with the following settings: * batch size: 32/64 in training, and 32 in prediction * learning rate: 2e-5 * epochs: 4/6 3.5.1 download the model please refer to the code section 4.1. 3.5.2 optimizer & learning rate scheduler we use adamw optimizer and define the epochs in the scheduler. 8 impact analysis on the parameters: * batch size: the batch size is the number of words to be used for calculation and updating the weight once, it impacts the training time, memory usage and model's prediction accuracy. the larger the batch size is, the more memory it will consume. when the batch size is too small, the result may not converge, and when the batch size is too big, it will cause over fitting or out of memory. based on our test, the batch_size = 32/64 provides the best performance. * learning rate: we have tried three learning rates: 2e-5, 1e-4, 1e-6. we noticed that when the learning rate is large, it cannot converge, and when the learning rate is small, it overfits. learning rate = 2e-5 provides the best prediction result. * epochs: epochs value need to be set correctly, if the value is too small, the gradient descent will not converge, if the epochs value is bigger than required, we will overfit the model and decrease the accuracy of the prediction result. we use the accuracy and validation lost in each epoch's validation result. when we notice when the epochs number increases, the accuracy increases, we increase the epoch value to test again. if the accuracy decreases or there is not much change, we decrease the epochs to the point when accuracy is not increased. based on our test, the epochs = 4/6 provides the best performance. please refer to the code section 4.2 for the implementation. please refer to section 3.7.3 for the detail test result. 3.5.3 training loop we define and create the training loop based on the contribution of stas bekman. the training loop has a training phase and a validation phase. it also detects over-fitting by using validation loss. after defining the training loop, we start to fine-tune the model. please refer to the code section 4.3. 3.6 predict on the test data 3.6.1 data preparation prepare the test data just as how we prepare the training data. please refer to the code section 5.1. 3.6.2 predict on the test set generate the final prediction based on the score, and download the result as answer.txt. submit answer.txt to livelab for the result. when the f1 result is not good, we change the parameters or pre-trained model as mentioned in 3.5. please refer to the code section 5.2. 9 3.7 results 3.7.1 final result chosen model: cardiffnlp/twitter-roberta-base parameters setting: * batch size: 32 in training, and 32 in prediction * learning rate: 2e-5 * epochs: 4 model training result: the best prediction result with the above parameters: * precision: 0.7577319587628866 * recall: 0.8166666666666667 * f1: 0.7860962566844919 3.7.2 result discussion we observed that when using the same parameters to fine-tune the pre-trained model, the prediction result is not the same for each time. we have confirmed that even we set seed for the random sampling and using sequentialsampler in dataloader, we cannot make the prediction consistent. based on the information provided in paperswithcode, the issue is caused by the attention dropout and dropout: * attention dropout: it is a type of dropout used in attention-based architectures, where elements are randomly dropped out of the softmax in the attention equation. * dropout: it is a regularization technique for neural networks that drops a unit (along with connections) at training time with a specified probability (a common value is ). at test time, all units are present, but with weights scaled by (i.e. becomes ). the idea is to prevent co-adaptation, where the neural network becomes too reliant on particular connections, as this could be symptomatic of overfitting. intuitively, dropout can be thought of as creating an implicit ensemble of neural networks. according to huggingface bertconfig, the default dropout rate is set to 0.1: * hidden_dropout_prob (float, optional, defaults to 0.1) - the dropout probability for all fully connected layers in the embeddings, encoder, and pooler. * attention_probs_dropout_prob (float, optional, defaults to 0.1) - the dropout ratio for the attention probabilities. 10 considering the above factors and the test result, we observe the following parameters' settings ensures we can get the f1 > 0.75 which is well above the baseline: * batch size: 32/64 in training, and 32 in prediction * learning rate: 2e-5 * epochs: 4/6 here is the test result for these settings: epoch training split precision recall f1 comments 4 0.9-0.1 0.71468927 0.843333333 0.773700306 batch_size=64 sentences=response 4 0.9-0.1 0.69802867 0.865555556 0.77281746 batch_size=80 sentences=response 6 0.9-0.1 0.72380952 0.844444444 0.77948718 batch_size=64 sentences=response 8 0.9-0.1 0.73635427 0.794444444 0.764297167 batch_size=64 sentences=response 8 0.8-0.2 0.73236515 0.784444444 0.75751073 batch_size=64 sentences=response 4 0.8-0.2 0.70119157 0.85 0.768458061 batch_size=64 sentences=response 6 0.9-0.1 0.74476987 0.79111 0.767241379 batch_size=100 sentences=response 8 0.9-0.1 0.747288 0.76555 0.75631174 batch_size=100 sentences=response 5 0.9-0.1 0.72727272 0.80888 0.7659 batch_size=100 sentences=response 6 0.9-0.1 0.7391304 0.79333 0.76527 batch_size=80 sentences=response 6 0.9-0.1 0.74545454 0.77444 0.759673024 batch_size=64 sentences=r learning rate=5e-5 6 0.9-0.1 0.73473 0.77555 0.75459 batch_size=64 sentences=r learning rate=1e-5 6 0.9-0.1 0.7433264 0.80444 0.77267 learning rate=2e-5, batch_size=32,200 sentences=response 6 0.9-0.1 0.73313783 0.833333333 0.780031201 learning rate=2e-5, batch_size=64,32 sentences=response 4 0.9-0.1 0.74543611 0.816666667 0.77942736 learning rate=2e-5, batch_size=32,32 sentences=response 6 0.9-0.1 0.73615307 0.812222222 0.77231907 learning rate=2e-5, batch_size=32,32 sentences=response 4 0.9-0.1 0.75773196 0.816666667 0.786096257 learning rate=2e-5, batch_size=32,32 sentences=response 3.7.3 testing records below is the table that listed all the models we've tried with some parameters and statistics. the thirteenth line achieved the best result, which ranked the second in the leadership board. epoch training split precision recall f1 comments 0.591836735 0.805555556 0.682352941 no fine-tuning 4 0.9-0.1 0.74522293 0.78 0.762214984 11 4 0.99- 0.01 predict all tweets as sarcasm. results not usable 4 0.95- 0.05 0.722109534 0.791111111 0.755037116 4 0.9-0.1 0.74522293 0.78 0.762214984 4 0.9-0.1 0.691049086 0.797777778 0.740587932 sentences=response + context[- 2:] 4 0.9-0.1 0.648626817 0.892222222 0.751169317 sentences=response + context[- 2:] 4 0.9-0.1 n/a n/a n/a sentences=response + context[- 3:],cuda out of memory. 4 0.9-0.1 n/a n/a n/a batch_size=64 sentences=response + context[- 2:], cuda out of memory 4 0.9-0.1 0.714689266 0.843333333 0.773700306 batch_size=64 sentences=response 4 0.9-0.1 n/a n/a n/a batch_size=100 sentences=response,cuda out of memory. 4 0.9-0.1 0.698028674 0.865555556 0.77281746 batch_size=80 sentences=response 6 0.9-0.1 0.723809524 0.844444444 0.77948718 batch_size=64 sentences=response 8 0.9-0.1 0.736354274 0.794444444 0.764297167 batch_size=64 sentences=response 8 0.8-0.2 0.732365145 0.784444444 0.75751073 batch_size=64 sentences=response 4 0.8-0.2 0.701191567 0.85 0.768458061 batch_size=64 sentences=response 6 0.9-0.1 0.768564356 0.69 0.727166276 batch_size=64 sentences=response 6 0.9-0.1 0.732291667 0.78111 0.7559 batch_size=64 sentences=response 2 0.9-0.1 0.5 1 0.6667 batch_size=64 sentences=response 6 0.9-0.1 0.74476987 0.79111 0.767241379 batch_size=100 sentences=response 8 0.9-0.1 0.747288 0.76555 0.75631174 batch_size=100 sentences=response 5 0.9-0.1 0.72727272 0.80888 0.7659 batch_size=100 sentences=response 6 0.9-0.1 0.7391304 0.79333 0.76527 batch_size=80 sentences=response 6 0.9-0.1 0.74545454 0.77444 0.759673024 batch_size=64 sentences=r learning rate=5e-5 6 0.9-0.1 0.73473 0.77555 0.75459 batch_size=64 sentences=r learning rate=1e-5 6 0.9-0.1 0.5 1 0.6667 learning rate = 4e-4 batch_size=64 sentences=response 6 0.9-0.1 0.665354331 0.563333333 0.610108303 learning rate = 1e-6 batch_size=64 sentences=response 6 0.9-0.1 0.73193 0.7766 0.7536 learning rate=2e-5, batch_size=64 sentences=response 6 0.9-0.1 0.751054852 0.791111111 0.770562771 learning rate=2e-5, batch_size=64,200 sentences=response 12 6 0.9-0.1 0.7433264 0.80444 0.77267 learning rate=2e-5, batch_size=32,200 sentences=response 6 0.9-0.1 0.73313783 0.833333333 0.780031201 learning rate=2e-5, batch_size=64,32 sentences=response 4 0.9-0.1 0.745436106 0.816666667 0.77942736 learning rate=2e-5, batch_size=32,32 sentences=response 6 0.9-0.1 0.736153072 0.812222222 0.77231907 learning rate=2e-5, batch_size=32,32 sentences=response 4 0.9-0.1 0.757732 0.81666667 0.7860963 learning rate=2e-5, batch_size=32,32 sentences=response 4. instructions for using the software 4.1 setup and installation for this classification task, we used pytorch as the deep learning framework, python as the programming language and pre-trained twitter-specific bert model, roberta-base model as the state-of-the-art neural network classifier. here are the steps to execute the classifier: 1. download these files from https://github.com/lipingxie/courseproject : a. final bert twitter sarcasm classification.ipynb b. test.jsonl c. train.jsonl 2. add google colab as an app to google drive. 3. upload ""final bert twitter sarcasm classification.ipynb"" into google colab and open the file in colab. our code includes all the required commands to setup the environment, colab provides the default python(version 3.6.9)environment. 4. in colab, in the top menu, select ""runtime"" -> ""change runtime type"" -> in ""hardware accelerator"", select ""gpu"" -> click ""save"" 5. you can run all the code in sequence via the top menu, select ""runtime"" -> ""run all"". when the code in section 2.1 is being executed, you need to upload the file manually. the upload button will be enabled once this code is being executed. upload test.jsonl and train.jsonl at the same time. once the files are uploaded successfully, the remaining code will continue to be executed automatically. 6. wait for the code to be finished, it may take a long time around 15-60 minutes which depends on colab performance on that time period. 7. the answer.txt file will be downloaded automatically (if the download action is permitted in your machine.). sometimes the answer.txt file cannot be automatically downloaded due to your local environment issue. you can click on the folder button on the left-side bar, the file will be displayed there and you can download it manually. 8. if you would like to verify the prediction result, you need to upload the file to livelab- classificationcompetition project with your own account with the similar process of mp2.4. as mentioned in section 3.7.2, due to the bert default dropout, you may not 13 get the same result as our report or on the board, but we guarantee the result can pass the baseline. 9. you can check our best prediction result of our fine-tuned model in livelab -> classificationcompetition project -> leaderboard -> record uploaded by ""liping xie"" 4.2 troubleshooting if you would like to execute the code from the beginning again or load the model again, it may fail or you will have memory issues during the training stage. it seems it is caused by the colab. the following steps can help to solve the problem: 1. refresh the page 2. click on the ""additional connection options"" button (displayed as a small triangle icon that is next to ""ram"" and ""disk"" and located on top right corner. 3. select ""manage sessions"" 4. select the active section and click ""terminate"" 5. execute the code from the beginning again due to the dependency of the code, it may generate unexpected results if you re-execute part of the code. please terminate the session and run from the beginning again. 5. team member contribution in this project, we all contributed a lot to each of the tasks, including writing the project proposal, researching cutting-edge pre-trained models, implementing the models on training and testing data, writing the progress report, finalizing the source code, and writing the documentation. 6. reference * nguyen, dat quoc. bertweet: a pre-trained language model for english tweets. retrieved from: https://www.aclweb.org/anthology/2020.emnlp-demos.2.pdf * jay alammar, 2018. bert: http://jalammar.github.io/illustrated-bert/ * yinhan liu, 2019. roberta: a robustly optimized bert pretraining approach. arxiv preprint, arxiv:1907.11692 * jacob devlin, 2019. bert: pre-training of deep bidirectional transformers for language understanding. in proceedings of naacl, page 4186. * paperswithcode bert: https://paperswithcode.com/method/bert * huggingface bertconfig: https://huggingface.co/transformers/model_doc/bert.html * model reference: https://huggingface.co/models * transformer coding reference: https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813 037968a9e58/examples/run_glue.py#l109 * model training reference: https://mccormickml.com/ 14 * pytorch coding reference: https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#sphx-glr-beginner- blitz-cifar10-tutorial-py * stas bekman: https://github.com/stas00?tab=repositories cs410 progress report team information team name: team commonwealth team members: 1. zuliang weng / zwe 2. zijing chen / zijingc3 3. liping xie / lipingx2 (captain) project topic competition - text classification project progress tasks have been completed: 1. made decisions based on the options in our proposal: * state-of-the-art neural network classifier: bert * deep learning frameworks: pytorch * programming language: python 2. our testing result has passed the baseline: o precision =0.7333333333333333 o recall = 0.7211111111111111 o f1 = 0.727170868347339 3. draft version code is ready, here is what we have done related to coding: we modified and fine-tuned bert to train the text classifier. to be more specific, we tried some pre-trained bert models. the reason why we chose a pre-trained bert model is that the pre-trained bert model weights already encode a lot of information about our language. as a result, it takes less time to train our fine-tuned mode. first of all, we installed the transformers package from hugging face which gave us a pytorch interface for working with bert. next, in order to apply the pre-trained bert, we used the tokenizer provided by the model, and we tried ""bert-base- uncased"" and ""bert-base-cased"". since bert has very specific formatting requirements, we loaded the data from the file and formatted it to match its requirements, such as added special tokens to the start and end of each sentence; truncated all sentences to the same length, etc. then we used ""bertforsequenceclassification"" to train the model. this is the normal bert model with an added single linear layer on top for classification that we used as a sentence classifier. then we applied our model to generate predictions on the test set. tasks are pending: 1. use google colab to train and fine-tuned our model. training a large neural network in google colab can save some training time. 2. try some other pre-trained model such as bert-large-uncased. 3. fine-tuning the model, try different batch size, learning rate, and number of epochs. 4. discuss how much context data will be used in training, since if we use all the context data, it will take a long time to train. challenges we are facing: 1. it takes too long to train the model locally since the context is very long. 2. the testing result is still not good enough, we need another way to improve the result. execution result: result: result: team name: team commonwealth team members: 1. zuliang weng / zwe 2. zijing chen / zijingc3 3. liping xie / lipingx2 (captain) project topic: competition - text classification since it is a text classification competition project, as the instruction provided by ta, the project details will be provided in ""cs410 project detail.pdf"" instead of the readme.md file. please refer to ""cs410 project detail.pdf"" under https://github.com/lipingxie/courseproject . thanks. for all other information, please refer to the following documents in https://github.com/lipingxie/courseproject: 1.demo and contact information: cs410 project code demo video and contact info.pdf project code: final_bert_twitter_sarcasm_classification.ipynb project related datat files: result file: answer.txt input data: train.jsonl, test.jsonl if you experience any issues running our code or you have any questions regarding to our project details, please send us an email to organize a zoom meeting. thanks. contact emails: liping xie: lipingx2@illinois.edu zijing chen: zijingc3@illinois.edu zuliang weng: zwe@illinois.edu ==========updated on 15th december ========= some reviewers reported the code will fail in the upload file step, it seems it is related to the broswer settings or broswer limitations. to ensure the code can be executed correctly in colab, please use chrome normal window. if execute the code in chrome incognito window, the file upload button will not be enabled and just fail the step. ""execution reslut"" file is attached to confirm the code can be executed correctly. cs410 course project proposal october 25th 2020 team information team name: team commonwealth team members: zuliang weng / zwe zijing chen / zijingc3 liping xie / lipingx2 (captain) project topic competition - text classification learning and investigation plan we are planning to learn the following state-of-the-art neural network classifier: bert we do not have relevant prior project experience with this classifier. we are planning to learn the following deep learning frameworks: tensorflow pytorch we have basic knowledge with pytorch, and we have used it in our self-study exercises. we will try pytorch in our project first, if there is any issue that can only be resolved in tensorflow, we will switch to tensorflow. programming language we plan to use python for this project."	['cs', 'project', 'code', 'demo', 'team', 'name', 'commonwealth', 'members', 'zuliang', 'weng', 'zwe', 'zijing', 'chen', 'zijingc', 'liping', 'xie', 'lipingx', 'captain', 'link', 'course', 'youtube', 'recorded', 'uploaded', 'video', 'onto', 'please', 'click', 'watch', 'experience', 'issues', 'running', 'questions', 'regarding', 'details', 'send', 'us', 'email', 'organize', 'zoom', 'meeting', 'thanks', 'contact', 'emails', 'lipingxillinoisedu', 'zijingcillinoisedu', 'zweillinoisedu', 'detail', 'information', 'overview', 'topic', 'text', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'task', 'classify', 'list', 'tweets', 'two', 'categories', 'not_sarcasm', 'datasets', 'training', 'set', 'test', 'researched', 'tried', 'many', 'cuttingedge', 'models', 'suitable', 'classifying', 'files', 'provided', 'trainjsonl', 'testjsonl', 'model', 'trained', 'data', 'contains', 'need', 'result', 'reported', 'id', 'results', 'stored', 'answertxt', 'file', 'function', 'used', 'pytorch', 'deep', 'learning', 'framework', 'pythonversion', 'programming', 'language', 'pretrained', 'bert', 'stateoftheart', 'neural', 'network', 'classifier', 'main', 'specific', 'applied', 'twitterspecific', 'robertabase', 'finetune', 'predicted', 'testing', 'generate', 'final', 'analyze', 'due', 'classificationipynb', 'mappings', 'section', 'content', 'use', 'google', 'colab', 'perform', 'python', 'environment', 'install', 'hugging', 'face', 'library', 'load', 'jsonl', 'parse', 'formatting', 'tokenize', 'dataset', 'split', 'validation', 'train', 'different', 'batch', 'size', 'rate', 'epochs', 'evaluate', 'predict', 'save', 'prediction', 'software', 'implementation', 'selection', 'introduction', 'investigated', 'types', 'classifiers', 'include', 'wordvec', 'fasttext', 'found', 'bidirectional', 'encoder', 'representations', 'transformers', 'according', 'wikipeda', 'transformerbased', 'machine', 'technique', 'natural', 'processing', 'nlp', 'pretraining', 'developed', 'broke', 'several', 'records', 'well', 'handle', 'languagebased', 'tasksjay', 'alammar', 'would', 'look', 'like', 'image', 'fromhttpjalammargithubioillustratedbert', 'mainly', 'minimal', 'changes', 'happening', 'phase', 'process', 'called', 'fine', 'tuning', 'jay', 'makes', 'mechanism', 'transformer', 'attention', 'learns', 'contextual', 'relations', 'words', 'subwords', 'moment', 'package', 'regarded', 'widely', 'accepted', 'powerful', 'interface', 'working', 'berts', 'clever', 'modeling', 'masks', 'input', 'asks', 'missing', 'word', 'takes', 'huge', 'time', 'consideration', 'pre', 'reason', 'choose', 'characteristics', 'significantly', 'traditional', 'research', 'papers', 'articles', 'generally', 'short', 'frequent', 'informal', 'grammar', 'irregular', 'vocabulary', 'abbreviations', 'thus', 'inappropriate', 'apply', 'bertbase', 'uncased', 'bertlargeuncased', 'formal', 'regular', 'nguyen', 'et', 'al', 'nd', 'confirmed', 'outperforms', 'bertbaseuncased', 'architecture', 'bertweet', 'similar', 'masked', 'objective', 'devlin', 'procedure', 'based', 'roberta', 'optimizes', 'approach', 'robust', 'performance', 'liu', 'uses', 'gb', 'uncompressed', 'texts', 'contain', 'since', 'also', 'httpshuggingfacecomodels', 'find', 'sub', 'compared', 'twitterrobertabase', 'twitterrobertabaseirony', 'performs', 'little', 'bit', 'better', 'decided', 'select', 'version', 'setup', 'large', 'offers', 'free', 'gpus', 'tpus', 'shorten', 'steps', 'setting', 'add', 'app', 'drive', 'runtime', 'type', 'gpu', 'went', 'edit', 'notebook', 'settings', 'hardware', 'accelerator', 'want', 'check', 'detected', 'execute', 'confirm', 'identify', 'specify', 'device', 'order', 'torch', 'user', 'installed', 'importing', 'run', 'second', 'selected', 'gives', 'analysis', 'preparation', 'json', 'format', 'tweet', 'response', 'context', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'classified', 'conversation', 'ordered', 'dialogue', 'label', 'length', 'responses', 'less', 'long', 'exceed', 'maximum', 'supported', 'means', 'cannot', 'full', 'strategies', 'part', 'strategy', 'dialogues', 'last', 'items', 'reports', 'cuda', 'memory', 'error', 'compare', 'f', 'intended', 'get', 'value', 'later', 'sections', 'see', 'adding', 'doesnt', 'improve', 'refer', 'read', 'tokenization', 'tokenizer', 'available', 'comes', 'make', 'sure', 'correct', 'experiment', 'defined', 'step', 'change', 'simply', 'update', 'requires', 'tokens', 'fit', 'certain', 'special', 'start', 'end', 'sentence', 'tasks', 'must', 'prepend', 'cls', 'token', 'beginning', 'every', 'significance', 'consists', 'layers', 'embeddings', 'produces', 'number', 'output', 'append', 'sep', 'pad', 'truncate', 'sentences', 'single', 'constant', 'explicitly', 'differentiate', 'real', 'padding', 'mask', 'constraints', 'padded', 'truncated', 'fixed', 'otherwise', 'system', 'report', 'errors', 'saving', 'max_length', 'max', 'encode_plus', 'methods', 'masking', 'automatically', 'adds', 'ids', 'convert', 'lists', 'tensors', 'properly', 'detailed', 'using', 'mapped', 'index', 'performed', 'included', 'proportion', 'impact', 'accuracy', 'trainingvalidation', 'ratio', 'observed', 'provides', 'best', 'dataloader', 'help', 'define', 'usage', 'first', 'examine', 'key', 'values', 'creating', 'dataloaders', 'loop', 'provide', 'statistic', 'lost', 'fineturn', 'parameters', 'satisfied', 'experimented', 'twitterroberta', 'cardiffnlptwitterrobertabase', 'cardiffnlptwitterrobertabaseirony', 'cardiffnlptwitterrobertabaseoffensive', 'early', 'stage', 'focused', 'related', 'comparing', 'three', 'following', 'e', 'download', 'optimizer', 'scheduler', 'adamw', 'calculation', 'updating', 'weight', 'impacts', 'larger', 'consume', 'small', 'may', 'converge', 'big', 'cause', 'fitting', 'batch_size', 'rates', 'noticed', 'overfits', 'correctly', 'gradient', 'descent', 'bigger', 'overfit', 'decrease', 'notice', 'increases', 'increase', 'epoch', 'decreases', 'much', 'point', 'increased', 'create', 'contribution', 'stas', 'bekman', 'detects', 'overfitting', 'loss', 'defining', 'prepare', 'score', 'submit', 'livelab', 'good', 'mentioned', 'chosen', 'precision', 'recall', 'discussion', 'even', 'seed', 'random', 'sampling', 'sequentialsampler', 'consistent', 'paperswithcode', 'issue', 'caused', 'dropout', 'attentionbased', 'architectures', 'elements', 'randomly', 'dropped', 'softmax', 'equation', 'regularization', 'networks', 'drops', 'unit', 'along', 'connections', 'specified', 'probability', 'common', 'units', 'present', 'weights', 'scaled', 'ie', 'becomes', 'idea', 'prevent', 'coadaptation', 'reliant', 'particular', 'could', 'symptomatic', 'intuitively', 'thought', 'implicit', 'ensemble', 'huggingface', 'bertconfig', 'default', 'hidden_dropout_prob', 'float', 'optional', 'defaults', 'fully', 'connected', 'pooler', 'attention_probs_dropout_prob', 'probabilities', 'considering', 'factors', 'observe', 'ensures', 'baseline', 'comments', 'sentencesresponse', 'sentencesr', 'ratee', 'table', 'listed', 'weve', 'statistics', 'thirteenth', 'line', 'achieved', 'ranked', 'leadership', 'board', 'finetuning', 'usable', 'na', 'sentencesresponsecuda', 'instructions', 'installation', 'httpsgithubcomlipingxiecourseproject', 'b', 'c', 'upload', 'open', 'includes', 'commands', 'top', 'menu', 'sequence', 'via', 'executed', 'manually', 'button', 'enabled', 'successfully', 'remaining', 'continue', 'wait', 'finished', 'take', 'around', 'minutes', 'depends', 'period', 'downloaded', 'action', 'permitted', 'sometimes', 'local', 'folder', 'leftside', 'bar', 'displayed', 'verify', 'classificationcompetition', 'account', 'mp', 'guarantee', 'pass', 'finetuned', 'leaderboard', 'record', 'troubleshooting', 'fail', 'seems', 'solve', 'problem', 'refresh', 'page', 'additional', 'connection', 'options', 'triangle', 'icon', 'next', 'ram', 'disk', 'located', 'right', 'corner', 'manage', 'sessions', 'active', 'terminate', 'dependency', 'unexpected', 'reexecute', 'session', 'member', 'contributed', 'lot', 'including', 'writing', 'proposal', 'researching', 'implementing', 'progress', 'finalizing', 'source', 'documentation', 'reference', 'dat', 'quoc', 'english', 'retrieved', 'httpswwwaclweborganthologyemnlpdemospdf', 'httpjalammargithubioillustratedbert', 'yinhan', 'robustly', 'optimized', 'arxiv', 'preprint', 'jacob', 'understanding', 'proceedings', 'naacl', 'httpspaperswithcodecommethodbert', 'httpshuggingfacecotransformersmodel_docberthtml', 'coding', 'httpsgithubcomhuggingfacetransformersblobbfcdeceebcbedd', 'aeexamplesrun_gluepyl', 'httpsmccormickmlcom', 'httpspytorchorgtutorialsbeginnerblitzcifar_tutorialhtmlsphxglrbeginner', 'blitzcifartutorialpy', 'httpsgithubcomstastabrepositories', 'completed', 'made', 'decisions', 'frameworks', 'passed', 'draft', 'ready', 'done', 'modified', 'chose', 'already', 'encode', 'mode', 'gave', 'bertbasecased', 'requirements', 'loaded', 'formatted', 'match', 'added', 'etc', 'bertforsequenceclassification', 'normal', 'linear', 'layer', 'predictions', 'pending', 'try', 'discuss', 'challenges', 'facing', 'locally', 'still', 'enough', 'another', 'way', 'execution', 'instruction', 'ta', 'detailpdf', 'instead', 'readmemd', 'documents', 'infopdf', 'final_bert_twitter_sarcasm_classificationipynb', 'datat', 'updated', 'th', 'december', 'reviewers', 'broswer', 'limitations', 'ensure', 'chrome', 'window', 'incognito', 'reslut', 'attached', 'october', 'investigation', 'plan', 'planning', 'learn', 'relevant', 'prior', 'tensorflow', 'basic', 'knowledge', 'selfstudy', 'exercises', 'resolved', 'switch']
https://github.com/liuyuxiang512/CourseProject	"cs410 progress report dancing text: yuxiang liu (yuxiang@illinois.edu, leader), hongfei ma (hongfei7@illinois.edu) 1. progress for the task of identifying in-demand skills, we have written an auto-crawler to crawl tweets related to a given subject ""computer science"" from a social media, twitter, and saved attributes of tweets to a file. due to the rules of twitter, there is a rate limit with the crawling so we cannot get as many data as we want. however, we can obtain the most-recent tweets related to the cs subject, which helps to discover emerging keywords or topics. we have also processed the crawled tweets, and analyzed the hashtags, which represent the themes of corresponding tweets, to preliminarily extract top-rank topics of these tweets. for the task of displaying relative documents of each topic, we have finished crawling pdf slides of several courses in uiuc. however, due to the difference of course websites, crawlers are running independently in different python scripts. we have also investigated some common ranking algorithms, including bm25, jaccard index, cosine similarity and some provided algorithms in meta toolkit. 2. challenges since there are many tweets without hashtags, we cannot extract topics from such tweets, but it helps to utilize hashtags in extracting topics. hence, instead of designing a topic discovery algorithm for general texts, we need to propose an algorithm which can extract topics from both tweets with and without hashtags, and combine these topics to get the final top-rank topics among these tweets. another challenge is how to demonstrate that the extracted topics are truly popular in these tweets, or how to evaluate the performance of our algorithm. even if we have crawled tweets from twitter, we do not know what topics are popular in these tweets. evaluation of different ranking algorithms seems time-consuming because it is hard to get all-round training dataset. in addition, the form of displaying our ranking results is still undecided. 3. remaining work to identify in-demand skills, the remaining work is to propose a topic discovery algorithm specifically for tweets, and design an evaluation method to demonstrate the performance of this algorithm. to display relative documents of each topic, the remaining work is to design a workflow that can automatically crawl documents from various course websites, and evaluate the existing ranking algorithms' performance in our dataset. cs410 project proposal dancing text: yuxiang liu (yuxiang@illinois.edu, leader), hongfei ma (hongfei7@illinois.edu) 1. proposed study we plan to improve the educationalweb system through automatically creating teaching materials for in-demand skills, which is an extended version of the existing system. to satisfy the increasing demands from people who are looking for high-quality education but cannot get access to it whenever necessary, we aim to identify in-demand skills and create lectures and tutorials for these skills. to identify in-demand skills, we will crawl data from social media and identify emerging keywords or topics through topic extraction. to create lectures and tutorials for skills, we will recommend most relevant slides given specific topics. in this project, we plan to mainly use python and javascript languages. 2. impacts of the proposed work through this project, we would enable emerging topic identification and slides recommendation for topics, which will help users who are interested in getting high-quality education materials at any time. 3. project description 3.1 identifying in-demand skills we plan to crawl tweets from twitter. a hashtag is a type of tag that people usually treat as the theme of the corresponding tweet, so we would directly consider hashtags as the topic of tweets. then, we would use features of tweets such as retweets, replies, or likes to identify which hashtags are emerging or popular keywords/topics. in particular, we may limit our topics within computer science or stem disciplines to reduce/avoid skill-irrelevant topics. after we obtain these skill-related topics, we would use them in the next part of creating corresponding lectures and tutorials. 3.2 creating lectures and tutorials for skills in this part, we will first crawl slides of other courses in uiuc. for these slides, we will identify the topics and generate training data. next, we will propose an efficient ranking algorithm to automatically select relevant slides for each specific topic. once a user selects a topic from those obtained in the first part, the system will present relevant slides to the user on the webpage. to demonstrate the performance of our algorithm, we will separate our crawled slides, together with existing slides, into positive samples and negative samples, and compare our algorithm with classical algorithms such as bm25 with this generated dataset. 4. timeline task estimated time cost expected completion time social media crawling 5h week 11 paper survey 5h week 11 emerging topic identification 15h week 14 slides crawling 5h week 11 rank algorithm design 15h week 13 integration with existing system 20h week 15 courseproject final project for cs410 of uiuc. project proposal proposal.pdf project progress report progress_report.pdf project presentation video presentation documentation 1. overview this project consists of two major tasks. the first one is to identify emerging topics in twitter within computer science field, and the second one is to recommend relevant slides of the given topics. 1.1 identify emerging topics in this task, we first crawled 680k tweets from twitter with query ""computer science"", which limited our scale of topics. then, in order to mine topics from these tweets, we found the optimal number of topics w.r.t. coherence value and trained the lda topic model with the optimal number of topics. finally, we visualized topics with word cloud by analyzing hashtags. besides, we support identifying emerging topics by crawling the latest tweets and predicting their topics with pre-trained lda model, while these newly crawled data is used to update our lda model. all related files are in identify_topics/ directory. - crawling/: keep crawling tweets and form training data. - data/: store raw data (sorted_tweets.json), processed data (pre-processed.pkl), stopwords (stopwords.txt), and pictures of topics (topic_desc_fig/). - model: store pre-trained lda model files. - topic_discovery.py: extract topics from crawled tweets, evaluate models with different number of topics to find the optimal, get topics and draw pictures for them with word cloud, and predict emerging topics based on pre-trained model. - topics.json: word distributions of topics, which will feed into next part. 1.2 recommend slides for topics in this task, we first crawled 100+ course slides in uiuc. then, taking the above word distributions of different topics as input, we used bm25 to find relevant slides. all related files are in recommend_slides/ directory. - pdf_download.py: scrapes slides from four fixed uiuc course websites which are cs225, cs240, cs425 and cs447. it will download all the pdf documents to a local directory ""slides"". - pdf_miner.py: read the slides under the ""slides"" folder and use pdfminer tool to extract text from the slides. then, write the raw text to a ""txt"" file under the folder ""raw"". for example, if it read a pdf file ""slides/lecture1.pdf"", there will be a text file ""raw/lecture1.txt"" which contains the text data of the original pdf file. - filter_raw.py: read the raw text files under the ""raw"" folder and filter these texts so that they can be used in the following ranking algorithm. it removes the stop words, meaningless numbers and some other useless words. then, it lemmatizes and stems the words so that derivative words can be treated equally. the results are saved under the ""corpus"" folder. each file under this folder represents the abstract of a pdf file from ""slides"" folder. for example, if it read a text file ""raw/lecture1.txt"", there will be a filtered text file ""corpus/lecture1.txt"" which contains the cleaned text data. - bm25.py: read the topic file ""topics.json"" and generate queries with the distributions of keywords in each topic. each topic generates one query. then, for each query, run the bm25 ranking algorithm to calculate the scores of this query to each documents in the ""corpus"" folder. finally, get the top 10 documents and write the result to the target file ""result/bm25.txt"". - doc_sim.py: similar as ""bm25.py"". the only difference is the ranking algorithm. it calculates the cosine similarity with tf-idf weights with each pair of query and document. then, get the top 10 documents and write the result to the target file ""result/sim.txt"". 2. implementation 2.1 identify emerging topics tweets crawling this part serves to generate dataset containing recent tweets from twitter. due to the rate limit of twitter, we can only crawl a small amount of tweets every 15 min. therefore, in crawling/ directory, we implemented a crawler which can crawl tweets automatically. twitter_crawler.py: crawl recent tweets that don't overlap with pre-crawled tweets. utils.py: sort crawled tweets in terms of create time, which aims to optimize crawling and saving process. twitter_crawler.sh: auto-crawling bash file that runs twitter_crawler.py and utils.py repeatedly every 15 min. topic mining this part is to generate topics with crawled tweets. here we applied lda algorithm for topic mining. all related files are in topiccdiscovery/ directory. implementation of topic_discovery.py is as follows: preprocess: for each tweet, we perform 1) lower; 2) remove username, hashtag, url, number, punctuation, special character, and short word; 3) tokenization; 4) remove stopwords; 5) lemmatization; and 6) stemming. then, we save processed data data/pre-processed.pkl for training. find optimal number of topics: we applied lda model with different numbers of topics from 2 to 14, and found that 10 is the optimal. training: we set number of topics as 10, trained an lda model on 662k processed tweets, and saved model files in model/ directory. saving topics: we loaded pre-trained files, saved word distributions for topics, and drew word cloud figures by analyzing hashtags for all topics. predict: with pre-trained model, we can crawl latest tweets about computer science and make predictions to find out emerging topics among all topics. meanwhile, we use these newly crawled tweets to update the lda model. 2.2 recommend slides pdf_download.py this module does the following: given the course website page, use soup to extract all the elements with tag ""a"". judge the elements whether it is a link which is end with "".txt"". if yes, concatenate the prefix and the link to get the complete url. download the pdf file with its original name and put it into the ""slides"" folder. functions are: gettaga(root_url): obtain all the elements with tag ""a"" and return a list of string. downpdf(root_url, prefix, list_a): download all the pdf files in the root_url. the argument ""prefix"" is used to complete the pdf links. it varies with different course websites. getfile(url): get the url file to the ""slides"" folder. pdf_miner.py this module does the following: read each pdf file under the ""slides"" folder. create a pdf parser for each pdf file. then parse the pdf file and extract the text data from each page. write the raw text data to a target file under the folder ""raw"". functions are: parse(filename): extract text data from a pdf file and write it to a target text file (different pdf files write into different text files). filter_raw.py this module does the following: read each raw text file under the ""raw"" folder. tokenlize the text data and remove short words, numbers and stop words from the text. lemmatize and stem words. then, write it to a text file under the ""corpus"" folder (different raw text files write into different target files). functions are: get_raw_data(filepath): read a raw text file and return a list of string. each element in this list represents a line of data in the raw text file. pre_process(data, filename): first, use ""re"" (regular expression) to remove unwanted words. second, use ""spacy"" to lemmatize words and ""nltk.stem"" to stem words. finally, write these stemmed words to the target file under the ""corpus"" folder. bm25.py this module does the following: read the topic file ""topics.json"" and generate a query based on the distributions of keywords in each topic. for example, if the topic is ""{""topic1"" : {kewords1 : 0.5, keyword2 : 0.5}}"", it will generate a query like ""keyword1 keyword1 keyword2 keyword2"" which keeps to the distributions. treat this query as a document and compute the scores of this query to each document in our corpus with the bm25 model implemented by gensim library. get the top 10 score document names and write the result to the result file ""result/bm25.txt"". functions are: tokenization(filename): read the document under the ""corpus"" folder and return a list of words in this document. read_corpus(dir_path): read all the documents under the dir_path and return a 2-dimensional list of strings. the first dimension represents each document and the second one contains the words included in each document. simulate_query_by_topics(topic_file): generate queries with topics. in this implementation, it generates query with a word base 100. if we have keyword1 and keyword2 with distribution of 0.2 and 0.5. it will generate a query with 20 keyword1 and 50 keyword2. node: each topic only reserves top several keywords. their distributions may not add up to one, but it doesn't affect their relative size. doc_sim.py: this module does the following: read the topic file ""topics.json"" and generate a query based on the distributions of keywords in each topic. for example, if the topic is ""{""topic1"" : {kewords1 : 0.5, keyword2 : 0.5}}"", it will generate a query like ""keyword1 keyword1 keyword2 keyword2"" which keeps to the distributions. treat this query as a document and compute the cosine similarity with tf-idf weights with each documents under ""corpus"" folder. get the top 10 similarity document names and write the result to the result file ""result/sim.txt"". funcrions are the similar to those in ""bm25.py"". 3. usage installation this software requires python 3.5+, and it also requires external libraries that can be installed by: pip install -r requirements.txt after you have installed spacy library, you also need to load en model in spacy through: python -m spacy download en_core_web_sm now you have all the necessary packages! before any later steps, clone this repository: git clone https://github.com/liuyuxiang512/courseproject usage example cd courseproject identify emerging topics directory identify_topics/ serves to identify emerging topics in twitter. cd identify_topics crawl tweets from twitter you could jump this step by downloading our crawled data sorted_tweets.json, which contains 680k tweets, and save the file into data/ directory. in order to crawl tweets, you first need a twitter developer account. then: create a twitter application via https://developer.twitter.com/. create a twitter app to access twitter's api. find the authentication info in the ""keys and access tokens"" tab of the app's properties, including consumer_key, consumer_secret, access_token, and access_token_secret. fill the authentication into authentication.txt in four lines. then, you can keep crawling tweets by cd crawling bash twitter_crawler.sh find optimal number of topics in this step, you can try lda model with different numbers of topics from 2 to 14, and get corresponding coherence values. a higher coherence value means a better model. if you don't want to use our processed data identify_topics/data/pre-processed.pkl, you may first remove it and continue, but it will take some time. to find out the optimal number of topics, run python topic_discovery.py --tune then you will get tuning... number of topics: 2 --- coherence value: 0.49589240555472486 number of topics: 3 --- coherence value: 0.4752864500035534 number of topics: 4 --- coherence value: 0.4844109302488787 number of topics: 5 --- coherence value: 0.5426149238108859 number of topics: 6 --- coherence value: 0.5708485237453553 number of topics: 7 --- coherence value: 0.5514423515877226 number of topics: 8 --- coherence value: 0.5778541035204716 number of topics: 9 --- coherence value: 0.566857492981066 number of topics: 10 --- coherence value: 0.5808911042666589 number of topics: 11 --- coherence value: 0.5561191556402437 number of topics: 12 --- coherence value: 0.5699566981479943 number of topics: 13 --- coherence value: 0.5522769193550581 number of topics: 14 --- coherence value: 0.5433632323040761 ... the optimal number of topics is: 10 therefore, the optimal number of topics is 10, and we will use 10 for our lda model in formal training. train with 10 as number of topics, you can now train an lda model by running python topic_discovery.py --train this step will take a long time, but you can go ahead and directly use our pre-trained model in identify_topics/model/ directory for subsequent steps. display this step is to use pre-trained model to get topics and draw word cloud for these topics. python topic_discovery.py --display or you can see what we have got after this step: word distributions of topics identify_topics/topics.json and word cloud figures of topics in identify_topics/data/topic_desc_fig/. the following are word cloud figures for 2 topics out of 10. predict after the previous steps, you have successfully obtained processed data (identify_topics/data/pre-processed.pkl), word distributions of topics (identify_topics/topics.json), and word cloud pictures of topics in identify_topics/data/topic_desc_fig/. this step is a further extension of our software. you still need a twitter developer account to crawl latest tweets. please refer to how to get authentication info in the above ""crawling tweets from twitter"" section. you can always find out emerging topics in twitter by running python topic_discovery.py --predict it will crawl latest tweets, predict topics for then and figure out popular ones. meanwhile, it also uses these newly crawled data to update the lda model. we got the following results on dec.13th 9am: emerging topics id (ordered): 8 6 0 4 1 3 to see what these topics are, you may go to data/topic_desc_fig/ directory and find corresponding word cloud! command line usage of topic_discovery.py ``` python topic_discovery.py -h usage: topic_discovery.py [-h] [-i input_file] [-n num_topics] [-f field] [-o output_file] [--train] [--display] [--tune] [--predict] identify in-demanding skills optional arguments: -h, --help show this help message and exit -i input_file, --input_file input_file input file contains tweets crawled from twitter - (default: data/sorted_tweets.json). -n num_topics, --num_topics num_topics number of topics - (default: 10). -f field, --field field field of subject to mine - (default: computer science) -o output_file, --output_file output_file output file contains term distribution of topics - (default: topics.json). --train preprocess and train --display save topics and draw pictures --tune find the optimal number of topics --predict predict emerging topics with trained model ``` recommend slides directory recommend_slides is to recommend related slides based on topics. cd recommend_slides download the slides using the pdf_download.py. but it may be slow. you can access the pdf slides with the link: download slides. then, unzip it to the ""slides"" folder. bash python3 pdf_download.py then, we need to extract raw text from pdf files and filter these raw texts. bash python3 pdf_miner.py python3 filter_raw.py finally, using bm25.py or doc_sim.py to calculate the final results. after this step, you can see the result files under the ""result"" folder. bash python3 bm25.py python3 doc_sim.py other usage main.py: users can run this script with python3. it provides 2 kinds of command. (note: this two commands are available after filtering the raw text). bash python3 main.py the first one is ""latest"". it will automatically run the results with existing topics in ""topics.json"". the second one is ""query"". then it will ask you to type in a query and output 10 files that are most relevant to your query. this ranking list is based on bm25 algorithm because after our mannual evaluation, bm25 ranking performs better than cosine similarity ranking. search.py: users can run this script with python3. it provides 2 kinds of command. (note: this two commands are available after filtering the raw text). bash python3 search.py the first one is ""bm25"". it means that the following ranking is based on bm25 algorithm. then it will ask you to type in a query and output 10 filenames that are most relevant to your query. the second one is ""sim"". it means that the following ranking is based on document cosine similaritiy. then it will ask you to type in a query and output 10 filenames that are most relevant to your query."	['cs', 'progress', 'report', 'dancing', 'text', 'yuxiang', 'liu', 'yuxiangillinoisedu', 'leader', 'hongfei', 'hongfeiillinoisedu', 'task', 'identifying', 'indemand', 'skills', 'written', 'autocrawler', 'crawl', 'tweets', 'related', 'given', 'subject', 'computer', 'science', 'social', 'media', 'twitter', 'saved', 'attributes', 'file', 'due', 'rules', 'rate', 'limit', 'crawling', 'cannot', 'get', 'many', 'data', 'want', 'however', 'obtain', 'mostrecent', 'helps', 'discover', 'emerging', 'keywords', 'topics', 'also', 'processed', 'crawled', 'analyzed', 'hashtags', 'represent', 'themes', 'corresponding', 'preliminarily', 'extract', 'toprank', 'displaying', 'relative', 'documents', 'topic', 'finished', 'pdf', 'slides', 'several', 'courses', 'uiuc', 'difference', 'course', 'websites', 'crawlers', 'running', 'independently', 'different', 'python', 'scripts', 'investigated', 'common', 'ranking', 'algorithms', 'including', 'bm', 'jaccard', 'index', 'cosine', 'similarity', 'provided', 'meta', 'toolkit', 'challenges', 'since', 'without', 'utilize', 'extracting', 'hence', 'instead', 'designing', 'discovery', 'algorithm', 'general', 'texts', 'need', 'propose', 'combine', 'final', 'among', 'another', 'challenge', 'demonstrate', 'extracted', 'truly', 'popular', 'evaluate', 'performance', 'even', 'know', 'evaluation', 'seems', 'timeconsuming', 'hard', 'allround', 'training', 'dataset', 'addition', 'form', 'results', 'still', 'undecided', 'remaining', 'work', 'identify', 'specifically', 'design', 'method', 'display', 'workflow', 'automatically', 'various', 'existing', 'project', 'proposal', 'proposed', 'study', 'plan', 'improve', 'educationalweb', 'system', 'creating', 'teaching', 'materials', 'extended', 'version', 'satisfy', 'increasing', 'demands', 'people', 'looking', 'highquality', 'education', 'access', 'whenever', 'necessary', 'aim', 'create', 'lectures', 'tutorials', 'extraction', 'recommend', 'relevant', 'specific', 'mainly', 'use', 'javascript', 'languages', 'impacts', 'would', 'enable', 'identification', 'recommendation', 'help', 'users', 'interested', 'getting', 'time', 'description', 'hashtag', 'type', 'tag', 'usually', 'treat', 'theme', 'tweet', 'directly', 'consider', 'features', 'retweets', 'replies', 'likes', 'keywordstopics', 'particular', 'may', 'within', 'stem', 'disciplines', 'reduceavoid', 'skillirrelevant', 'skillrelated', 'next', 'part', 'first', 'generate', 'efficient', 'select', 'user', 'selects', 'obtained', 'present', 'webpage', 'separate', 'together', 'positive', 'samples', 'negative', 'compare', 'classical', 'generated', 'timeline', 'estimated', 'cost', 'expected', 'completion', 'h', 'week', 'paper', 'survey', 'rank', 'integration', 'courseproject', 'proposalpdf', 'progress_reportpdf', 'presentation', 'video', 'documentation', 'overview', 'consists', 'two', 'major', 'tasks', 'one', 'field', 'second', 'k', 'query', 'limited', 'scale', 'order', 'mine', 'found', 'optimal', 'number', 'wrt', 'coherence', 'value', 'trained', 'lda', 'model', 'finally', 'visualized', 'word', 'cloud', 'analyzing', 'besides', 'support', 'latest', 'predicting', 'pretrained', 'newly', 'used', 'update', 'files', 'identify_topics', 'directory', 'keep', 'store', 'raw', 'sorted_tweetsjson', 'preprocessedpkl', 'stopwords', 'stopwordstxt', 'pictures', 'topic_desc_fig', 'topic_discoverypy', 'models', 'find', 'draw', 'predict', 'based', 'topicsjson', 'distributions', 'feed', 'taking', 'input', 'recommend_slides', 'pdf_downloadpy', 'scrapes', 'four', 'fixed', 'download', 'local', 'pdf_minerpy', 'read', 'folder', 'pdfminer', 'tool', 'write', 'txt', 'example', 'slideslecturepdf', 'rawlecturetxt', 'contains', 'original', 'filter_rawpy', 'filter', 'following', 'removes', 'stop', 'words', 'meaningless', 'numbers', 'useless', 'lemmatizes', 'stems', 'derivative', 'treated', 'equally', 'corpus', 'represents', 'abstract', 'filtered', 'corpuslecturetxt', 'cleaned', 'bmpy', 'queries', 'generates', 'run', 'calculate', 'scores', 'top', 'result', 'target', 'resultbmtxt', 'doc_simpy', 'similar', 'calculates', 'tfidf', 'weights', 'pair', 'document', 'resultsimtxt', 'implementation', 'serves', 'containing', 'recent', 'small', 'amount', 'every', 'min', 'therefore', 'implemented', 'crawler', 'twitter_crawlerpy', 'dont', 'overlap', 'precrawled', 'utilspy', 'sort', 'terms', 'aims', 'optimize', 'saving', 'process', 'twitter_crawlersh', 'autocrawling', 'bash', 'runs', 'repeatedly', 'mining', 'applied', 'topiccdiscovery', 'follows', 'preprocess', 'perform', 'lower', 'remove', 'username', 'url', 'punctuation', 'special', 'character', 'short', 'tokenization', 'lemmatization', 'stemming', 'save', 'datapreprocessedpkl', 'set', 'loaded', 'drew', 'figures', 'make', 'predictions', 'meanwhile', 'module', 'website', 'page', 'soup', 'elements', 'judge', 'whether', 'link', 'end', 'yes', 'concatenate', 'prefix', 'complete', 'name', 'put', 'functions', 'gettagaroot_url', 'return', 'list', 'string', 'downpdfroot_url', 'list_a', 'root_url', 'argument', 'links', 'varies', 'getfileurl', 'parser', 'parse', 'parsefilename', 'tokenlize', 'lemmatize', 'get_raw_datafilepath', 'element', 'line', 'pre_processdata', 'filename', 'regular', 'expression', 'unwanted', 'spacy', 'nltkstem', 'stemmed', 'kewords', 'keyword', 'like', 'keeps', 'compute', 'gensim', 'library', 'score', 'names', 'tokenizationfilename', 'read_corpusdir_path', 'dir_path', 'dimensional', 'strings', 'dimension', 'included', 'simulate_query_by_topicstopic_file', 'base', 'distribution', 'node', 'reserves', 'add', 'doesnt', 'affect', 'size', 'funcrions', 'usage', 'installation', 'software', 'requires', 'external', 'libraries', 'installed', 'pip', 'install', 'r', 'requirementstxt', 'load', 'en', 'en_core_web_sm', 'packages', 'later', 'steps', 'clone', 'repository', 'git', 'httpsgithubcomliuyuxiangcourseproject', 'cd', 'could', 'jump', 'step', 'downloading', 'developer', 'account', 'application', 'via', 'httpsdevelopertwittercom', 'app', 'twitters', 'api', 'authentication', 'info', 'keys', 'tokens', 'tab', 'apps', 'properties', 'consumer_key', 'consumer_secret', 'access_token', 'access_token_secret', 'fill', 'authenticationtxt', 'lines', 'try', 'values', 'higher', 'means', 'better', 'identify_topicsdatapreprocessedpkl', 'continue', 'take', 'tune', 'tuning', 'formal', 'train', 'long', 'go', 'ahead', 'identify_topicsmodel', 'subsequent', 'see', 'got', 'identify_topicstopicsjson', 'identify_topicsdatatopic_desc_fig', 'previous', 'successfully', 'extension', 'please', 'refer', 'section', 'always', 'figure', 'ones', 'uses', 'decth', 'id', 'ordered', 'datatopic_desc_fig', 'command', 'input_file', 'n', 'num_topics', 'f', 'output_file', 'indemanding', 'optional', 'arguments', 'show', 'message', 'exit', 'default', 'datasorted_tweetsjson', 'output', 'term', 'using', 'slow', 'unzip', 'mainpy', 'script', 'provides', 'kinds', 'note', 'commands', 'available', 'filtering', 'ask', 'mannual', 'performs', 'searchpy', 'filenames', 'sim', 'similaritiy']
https://github.com/losaohan/CourseProject	"cs410 project documentation - expertsearch system overview of the function of the code the expertsearch system is a webpage-based search engine that provides search function for faculty information. users can provide a piece of search query that contains name, university, specialization, location, etc. in the text box showing ""enter search query"", and hit ""enter"" on keyboard or click the icon on the right side of the text box. two additional filters ""locations"" and ""universities"" are optional to further filter the desired faculty's geographic information and association name. the search result of faculties will display in the order of relevance below. there are two rows in the header area. in the first row, faculty name will show on the left bald-faced, and area of interest (the new feature added in this project) aligns to the right. there can also be a envelop shape icon if email address is captured, and clicking it will evoke the system-default email application to draft an email to the faculty. the next icon will lead to the faculty bio page. in the second row, department and university name display on the left, while the state and country name show on the right. in the main body of search result, it shows a segment from detailed faculty introduction that contains the query information. code structure and implementation details information extraction the first step of the code is to extract information from the source data. the raw data is saved in the ./data/compiled_bios folder. each file is named by a 0-based index and contains one line of faculty detailed introduction. the existing code has 3 .py files in the ./extraction folder, each has the python code to extract email, names and location from the raw data. this project added a jupyter notebook called ""named-entity-recognition.ipynb"" that can extract the research area of interest from the raw data. below is a brief introduction of the code logic: data preparation the dataset we use is the `faculty dataset` collected from cs 410 class. while there are 6525 numbers of documents in the dataset, we randomly sampled 25 documents for training. then, we tokenized sentences and labeled target tokens into corresponding entities. for example, we labeled 'database systems' as a `research area` in the following sentence: ""his primary research interests are database systems."" ('''his primary research interests are database systems, object-oriented systems and software engineering.''', { 'entities': [(35, 51, 'area'), (53,76, 'area'), (81, 101, 'area'), ] }) language modelling while spacy provides a pre-trained cnn model, we decided to build a new model from scratch with 70 numbers error-free entities. we used 0.5 for the drop rate and default optimizer provided in spacy. rule based matching to maximize the quality of outcome, we also leverage rule-based matcher using regular expressions. since the entities we are looking for are limited to `research interest`, we first searched a sentence that includes `research` or `interest` in the validation dataset. we observed that the entities we aim to extract have a simple structure. for example, they are ""my research interest is ..., research interests are."" testing we obtained qualitative results when performing interpolation in our initial model. we will continue testing our model on the testing dataset for future work. here are a few examples of research area extracted: entities [('distributed computing', 'area'), ('analysis of algorithms', 'area'), ('data structures', 'area'), ('computational geometry', 'area'), ('graph algorithms', 'area')] entities [('computer networking', 'area'), ('computer security', 'area')] entities [('cs education', 'area')] extracted information are saved under ./data folder, each named by the field extracted. for example, in the names.txt file, there are 6525 rows. each row corresponds to the faculty name extracted from the raw data at the same index. ranking function those extracted information from last step are merged into a metadata.dat file under ./data/compiled_bios folder. the existing code already has 8 fields in each row in the metadata, so this project created a ./data/compiled_bios/merge_new_field_to_metadata.py file to append the newly extracted research area to the end of each row. in addition, it' also required to add the name and type to the end of file.toml file under the same folder, so that the code knows how to parse the new field added. the metadata file is then feed into the ranker located as ./data/expertsearch/ranker.py, configed by a config file located at ./data/compiled_bios/config.toml. visualization webpage visualization is handled by the ./templates/index.html file, which designs the layout and format of the expertsearch webpage. it's also controlled by ./static/index.js file to interact with the ranker and user. the new field ""area of interest"" needs to be added in the javascript file, in order to display on the search result. main function the main function is called ./server.py, that is executed when the program launches. it uses flask to drive the ranker and visualization functions, so that a local server is running at http://localhost:8095/. it's also necessary tell the code to get the research interest in metadata and pass it to the javascript. installation and usage it's extremely easy to install and run the code on mac or linux, but needs some tricky settings to execute on windows. this is because the python webserver package gunicorn doesn't support directly on windows system, so docker is required. installation on windows install git (if you haven't) in the folder you want to save the project, right click -> git bash here -> type: git clone https://github.com/losaohan/courseproject.git download and install docker desktop for windows: https://hub.docker.com/editions/community/docker-ce-desktop-windows/ download and install pycharm professional for windows: https://www.jetbrains.com/pycharm/download/#section=windows you need to apply an jetbrains account with your illinois email to have access to the professional version: https://www.jetbrains.com/shop/eform/students. open pycharm, open the courseproject folder as project. on the top-left menu, hit file -> settings -> plugins -> search for docker, and install it -> make sure it's ""enabled"": in the settings -> build, execution, deployment -> docker, create a new docker service as follows -> hit ok. a new docker service will appear on the bottom left menu. make sure the docker desktop you installed in step 1 is running, and hit the green button ""connect"" on the top left: it will show ""connected"" in the middle of the bottom window. in the project directory, open the file docker/mainapp/dockerfile. right click the double green arrow and select ""edit 'mainapp/dockerfile'..."". fill in the same setting as below in the pop up config edit window. you could make your own image tag and container name, but make sure the other settings are the same. hit run: the image will start to build, and the container will launch in a few seconds. in the attached console, you will find the code is running at 0.0.0.0:8095 in the container, which is mapped to 127.0.0.1:8095 in the host machine. if you type localhost:8095 in your browser, the expert search page will show up on mac/linux open pycharm, open the courseproject folder as project. create a new virtual env by choosing your local python 2.7 as base interpreter. in the activated virtual env, install the requirements.txt packages by typing: pip install -r requirements.txt type gunicorn server:app -b 127.0.0.1:8095 in the terminal and the server will launch. type localhost:8095 in your browser, the expert search page will show up: team member contribution bruno seo: focused on the modeling part: analyzed on the source data, identified the pattern of research interest key words, implemented the algorithms of named entity recognition, and trained the extraction model. joseph angulo: focused on the front-end visualization part: figured out how the web server work, designed the appearance of updated webpage, and implemented the changes to show the new field on the page. xiaohan liu (captain): coordinate and focus on the high-level python: solved the installation and execution across windows/mac/linux systems, figured out the structure and workflow of the project, implemented code to prepare training data as well as code to create metadata, drafted the proposal / progress report / final document / presentation. cs410 project documentation - expertsearch system 1 overview of the function of the code the expertsearch system is a webpage-based search engine that provides search function for faculty information. users can provide a piece of search query that contains name, university, specialization, location, etc. in the text box showing ""enter search query"", and hit ""enter"" on keyboard or click the icon on the right side of the text box. two additional filters ""locations"" and ""universities"" are optional to further filter the desired faculty's geographic information and association name. the search result of faculties will display in the order of relevance below. there are two rows in the header area. in the first row, faculty name will show on the left bald-faced, and area of interest (the new feature added in this project) aligns to the right. there can also be a envelop shape icon if email address is captured, and clicking it will evoke the system- default email application to draft an email to the faculty. the next icon will lead to the faculty bio page. in the second row, department and university name display on the left, while the state and country name show on the right. in the main body of search result, it shows a segment from detailed faculty introduction that contains the query information. 2 code structure and implementation details 2.1 information extraction the first step of the code is to extract information from the source data. the raw data is saved in the ./data/compiled_bios folder. each file is named by a 0-based index and contains one line of faculty detailed introduction. the existing code has 3 .py files in the ./extraction folder, each has the python code to extract email, names and location from the raw data. this project added a jupyter notebook called ""named-entity-recognition.ipynb"" that can extract the research area of interest from the raw data. below is a brief introduction of the code logic:  data preparation the dataset we use is the `faculty dataset` collected from cs 410 class. while there are 6525 numbers of documents in the dataset, we randomly sampled 25 documents for training. then, we tokenized sentences and labeled target tokens into corresponding entities. for example, we labeled 'database systems' as a `research area` in the following sentence: ""his primary research interests are database systems."" ('''his primary research interests are database systems, object-oriented systems and software engineering.''', { 'entities': [(35, 51, 'area'), (53,76, 'area'), (81, 101, 'area'), ] })  language modelling while spacy provides a pre-trained cnn model, we decided to build a new model from scratch with 70 numbers error-free entities. we used 0.5 for the drop rate and default optimizer provided in spacy.  rule based matching to maximize the quality of outcome, we also leverage rule-based matcher using regular expressions. since the entities we are looking for are limited to `research interest`, we first searched a sentence that includes `research` or `interest` in the validation dataset. we observed that the entities we aim to extract have a simple structure. for example, they are ""my research interest is ..., research interests are.""  testing we obtained qualitative results when performing interpolation in our initial model. we will continue testing our model on the testing dataset for future work. here are a few examples of research area extracted: entities [('distributed computing', 'area'), ('analysis of algorithms', 'area'), ('data structures', 'area'), ('computational geometry', 'area'), ('graph algorithms', 'area')] entities [('computer networking', 'area'), ('computer security', 'area')] entities [('cs education', 'area')] extracted information are saved under ./data folder, each named by the field extracted. for example, in the names.txt file, there are 6525 rows. each row corresponds to the faculty name extracted from the raw data at the same index. 2.2 ranking function those extracted information from last step are merged into a metadata.dat file under ./data/compiled_bios folder. the existing code already has 8 fields in each row in the metadata, so this project created a ./data/compiled_bios/merge_new_field_to_metadata.py file to append the newly extracted research area to the end of each row. in addition, it' also required to add the name and type to the end of file.toml file under the same folder, so that the code knows how to parse the new field added. the metadata file is then feed into the ranker located as ./data/expertsearch/ranker.py, configed by a config file located at ./data/compiled_bios/config.toml. 2.3 visualization webpage visualization is handled by the ./templates/index.html file, which designs the layout and format of the expertsearch webpage. it's also controlled by ./static/index.js file to interact with the ranker and user. the new field ""area of interest"" needs to be added in the javascript file, in order to display on the search result. 2.4 main function the main function is called ./server.py, that is executed when the program launches. it uses flask to drive the ranker and visualization functions, so that a local server is running at http://localhost:8095/. it's also necessary tell the code to get the research interest in metadata and pass it to the javascript. 3 installation and usage it's extremely easy to install and run the code on mac or linux, but needs some tricky settings to execute on windows. this is because the python webserver package gunicorn doesn't support directly on windows system, so docker is required. 3.1 installation on windows  install git (if you haven't)  in the folder you want to save the project, right click -> git bash here -> type: git clone https://github.com/losaohan/courseproject.git  download and install docker desktop for windows: https://hub.docker.com/editions/community/docker-ce-desktop-windows/  download and install pycharm professional for windows: https://www.jetbrains.com/pycharm/download/#section=windows you need to apply an jetbrains account with your illinois email to have access to the professional version: https://www.jetbrains.com/shop/eform/students.  open pycharm, open the courseproject folder as project. on the top-left menu, hit file -> settings -> plugins -> search for docker, and install it -> make sure it's ""enabled"":  in the settings -> build, execution, deployment -> docker, create a new docker service as follows -> hit ok. a new docker service will appear on the bottom left menu. make sure the docker desktop you installed in step 1 is running, and hit the green button ""connect"" on the top left: it will show ""connected"" in the middle of the bottom window.  in the project directory, open the file docker/mainapp/dockerfile. right click the double green arrow and select ""edit 'mainapp/dockerfile'..."".  fill in the same setting as below in the pop up config edit window. you could make your own image tag and container name, but make sure the other settings are the same. hit run: the image will start to build, and the container will launch in a few seconds.  in the attached console, you will find the code is running at 0.0.0.0:8095 in the container, which is mapped to 127.0.0.1:8095 in the host machine. if you type localhost:8095 in your browser, the expert search page will show up 3.2 on mac/linux  open pycharm, open the courseproject folder as project. create a new virtual env by choosing your local python 2.7 as base interpreter.  in the activated virtual env, install the requirements.txt packages by typing: pip install -r requirements.txt  type gunicorn server:app -b 127.0.0.1:8095 in the terminal and the server will launch. type localhost:8095 in your browser, the expert search page will show up: 4 team member contribution bruno seo: focused on the modeling part: analyzed on the source data, identified the pattern of research interest key words, implemented the algorithms of named entity recognition, and trained the extraction model. joseph angulo: focused on the front-end visualization part: figured out how the web server work, designed the appearance of updated webpage, and implemented the changes to show the new field on the page. xiaohan liu (captain): coordinate and focus on the high-level python: solved the installation and execution across windows/mac/linux systems, figured out the structure and workflow of the project, implemented code to prepare training data as well as code to create metadata, drafted the proposal / progress report / final document / presentation. cs 410 project progress report modification of project scope: in the original project proposal, we planned to extract and show both research interests and top 2/3 keywords in publications. after careful consideration, we think the second part will take tremendous time to download and parse publications from sources (like arxiv or google scholar). therefore, we decided to hold off the publication keywords and first focus on research interests in this project. after we finish the visualization of research interests, we may either come back to the publication keywords, or switch to another field that is contained in the faculty bio data. progress report: the following tasks in the proposal have been finished: digest the existing data + code + visualization and test how they work and connect (10h) analyze the dataset for the pattern of the research of interest and publication keywords, and come up with corresponding algorithms (10h) implement functions to retrieve those fields (15~20h) train the new text retrieval/mining system and make some improvements (10h) the following tasks are pending: adjust the web frontend to display the new fields (5~10h) test the new function as well as the whole system (5~10h) prepare the complete documentation/report (5~10h) challenges: the biggest challenge we faced was to systematically download faculty publications using faculty name/university as the query. after spending some time engineering on this, we decided to hold this off and may either come back to it later or switch to another field that is contained in the faculty bio data. we also had some difficulties at the beginning running and debugging the program on windows, as some of our teammates use windows machine. with the support of docker in pycharm professional version, we were finally able to run it on windows. we are currently struggling with html and javascript to display the new field ""research interests"" on the webpage. we think this should be manageable as it is almost the last ""technical"" part of the project. below is a brief description of our steps to extract area of interests: data preparation the dataset we use is the `faculty dataset` collected from cs 410 class. while there are 6525 numbers of documents in the dataset, we randomly sampled 25 documents for training. then, we tokenized sentences and labeled target tokens into corresponding entities. for example, we labeled 'database systems' as a `research area` in the following sentence ""his primary research interests are database systems."" ('''his primary research interests are database systems, object-oriented systems and software engineering.''', { 'entities': [(35, 51, 'area'), (53,76, 'area'), (81, 101, 'area'), ] }) language modelling while spacy provides a pre-trained cnn model, we decided to build a new model from scratch with 70 numbers error-free entities. we used 0.5 for the drop rate and default optimizer provided in spacy. rule based matching to maximize the quality of outcome, we also leverage rule-based matcher using regular expressions. since the entities we are looking for are limited to `research interest`, we first searched a sentence that includes `research` or `interest` in the validation dataset. we observed that the entities we aim to extract have a simple structure. for example, they are ""my research interest is ..., research interests are."" outcome we obtained qualitative results when performing interpolation in our initial model. we will continue testing our model on the testing dataset for future work. example: entities [('distributed computing', 'area'), ('analysis of algorithms', 'area'), ('data structures', 'area'), ('computational geometry', 'area'), ('graph algorithms', 'area')] entities [('computer networking', 'area'), ('computer security', 'area')] entities [('cs education', 'area')] cs410 project -- expertsearch system b ru n o s e o j o s e p h a n g u lo x i ao h a n l i u introduction the expertsearch system is a webpage-based search engine that provides search function for faculty information. introduction the search result of faculties will display in the order of relevance below. another sample input installation it's extremely easy to install and run the code on mac or linux on windows it requires some tricky settings to execute the code. this is because the python webserver package gunicorn doesn't support directly on windows system, so docker is required to run the code. installation on windows install git (if you haven't) in the folder you want to save the project, right click -> git bash here -> type: git clone https://github.com/losaohan/courseproject.git download and install docker desktop for windows: https://hub.docker.com/editions/community/docker-ce-desktop-windows/ download and install pycharm professional for windows: https://www.jetbrains.com/pycharm/download/#section=windows you need to apply an jetbrains account with your illinois email to have access to the professional version: https://www.jetbrains.com/shop/eform/students. installation on windows open pycharm, open the courseproject folder as project. on the top-left menu, hit file -> settings -> plugins -> search for docker, and install it -> make sure it's ""enabled"": installation on windows in the settings -> build, execution, deployment -> docker, create a new docker service as follows -> hit ok. installation on windows a new docker service will appear on the bottom left menu. make sure the docker desktop you installed in step 1 is running, and hit the green button ""connect"" on the top left: it will show ""connected"" in the middle of the bottom window. installation on windows in the project directory, open the file docker/mainapp/dockerfile. right click the double green arrow and select ""edit 'mainapp/dockerfile'..."". installation on windows fill in the same setting as below in the pop up config edit window. you could make your own image tag and container name, but make sure the other settings are the same. installation on windows hit run: the image will start to build, and the container will launch in a few seconds. installation on windows in the attached console, you will find the code is running at 0.0.0.0:8095 in the container, which is mapped to 127.0.0.1:8095 in the host machine. if you type localhost:8095 in your browser, the expert search page will show up installation on mac/linux open pycharm, open the courseproject folder as project. create a new virtual env by choosing your local python 2.7 as base interpreter. installation on mac/linux in the activated virtual env, install the requirements.txt packages by typing: pip install -r requirements.txt installation on mac/linux type gunicorn server:app -b 127.0.0.1:8095 in the terminal and the server will launch. type localhost:8095 in your browser, the expert search page will show up: thanks! cs410 project -- expertsearch system bruno seo joseph angulo xiaohan liu introduction the expertsearch system is a webpage-based search engine that provides search function for faculty information. introduction the search result of faculties will display in the order of relevance below. another sample input installation it's extremely easy to install and run the code on mac or linux on windows it requires some tricky settings to execute the code. this is because the python webserver package gunicorn doesn't support directly on windows system, so docker is required to run the code. installation on windows install git (if you haven't) in the folder you want to save the project, right click -> git bash here -> type: git clone https://github.com/losaohan/courseproject.git download and install docker desktop for windows: https://hub.docker.com/editions/community/docker-ce-desktop-windows/ download and install pycharm professional for windows: https://www.jetbrains.com/pycharm/download/#section=windows you need to apply an jetbrains account with your illinois email to have access to the professional version: https://www.jetbrains.com/shop/eform/students. installation on windows open pycharm, open the courseproject folder as project. on the top-left menu, hit file -> settings -> plugins -> search for docker, and install it -> make sure it's ""enabled"": installation on windows in the settings -> build, execution, deployment -> docker, create a new docker service as follows -> hit ok. installation on windows a new docker service will appear on the bottom left menu. make sure the docker desktop you installed in step 1 is running, and hit the green button ""connect"" on the top left: it will show ""connected"" in the middle of the bottom window. installation on windows in the project directory, open the file docker/mainapp/dockerfile. right click the double green arrow and select ""edit 'mainapp/dockerfile'..."". installation on windows fill in the same setting as below in the pop up config edit window. you could make your own image tag and container name, but make sure the other settings are the same. installation on windows hit run: the image will start to build, and the container will launch in a few seconds. installation on windows in the attached console, you will find the code is running at 0.0.0.0:8095 in the container, which is mapped to 127.0.0.1:8095 in the host machine. if you type localhost:8095 in your browser, the expert search page will show up installation on mac/linux open pycharm, open the courseproject folder as project. create a new virtual env by choosing your local python 2.7 as base interpreter. installation on mac/linux in the activated virtual env, install the requirements.txt packages by typing: pip install -r requirements.txt installation on mac/linux type gunicorn server:app -b 127.0.0.1:8095 in the terminal and the server will launch. type localhost:8095 in your browser, the expert search page will show up: thanks! cs 410 project proposal team members joseph angulo (jangulo2) bruno seo (sbseo2) xiaohan liu (xliu120) - captain/coordinator project topic improve the expertsearch system: extracting relevant information from faculty bios if you are adding a function, how will you demonstrate that it works as expected? in this project, we are going to add two functions to extract faculty research interests and top 2 (or 3) keywords in publications. in the search result page, the two new fields will be displayed after the name and address items (see highlighted area below). briefly describe the datasets, algorithms or techniques you plan to use we are going to reuse the existing data of the search engine, which is part of the codebase in github. we plan to use named entity recognition (ner) algorithm along with other data mining techniques introduced in this course. how will your code communicate with or utilize the system? we are also going to rely the existing code framework: new functions will be added to the ./extraction folder. new results will be merged together with existing search results and displayed on the webpage. which programming language do you plan to use? python will be the main language for extraction while javascript and html for visualization. main tasks and estimated time cost (60~80hrs) digest the existing data + code + visualization and test how they work and connect (10h) analyze the dataset for the pattern of the research of interest and publication keywords, and come up with corresponding algorithms (10h) implement functions to retrieve those fields (15~20h) train the new text retrieval/mining system and make some improvements (10h) adjust the web frontend to display the new fields (5~10h) test the new function as well as the whole system (5~10h) prepare the complete documentation/report (5~10h) expertsearch to run the code, run the following command from expertsearch (tested with python2.7 on macos and linux): gunicorn server:app -b 127.0.0.1:8095 the site should be available at http://localhost:8095/ for details of installation or running the code on windows, please refer to the project documentation or presentation."	['cs', 'project', 'documentation', 'expertsearch', 'system', 'overview', 'function', 'code', 'webpagebased', 'search', 'engine', 'provides', 'faculty', 'information', 'users', 'provide', 'piece', 'query', 'contains', 'name', 'university', 'specialization', 'location', 'etc', 'text', 'box', 'showing', 'enter', 'hit', 'keyboard', 'click', 'icon', 'right', 'side', 'two', 'additional', 'filters', 'locations', 'universities', 'optional', 'filter', 'desired', 'facultys', 'geographic', 'association', 'result', 'faculties', 'display', 'order', 'relevance', 'rows', 'header', 'area', 'first', 'row', 'show', 'left', 'baldfaced', 'interest', 'new', 'feature', 'added', 'aligns', 'also', 'envelop', 'shape', 'email', 'address', 'captured', 'clicking', 'evoke', 'systemdefault', 'application', 'draft', 'next', 'lead', 'bio', 'page', 'second', 'department', 'state', 'country', 'main', 'body', 'shows', 'segment', 'detailed', 'introduction', 'structure', 'implementation', 'details', 'extraction', 'step', 'extract', 'source', 'data', 'raw', 'saved', 'datacompiled_bios', 'folder', 'file', 'named', 'based', 'index', 'one', 'line', 'existing', 'py', 'files', 'python', 'names', 'jupyter', 'notebook', 'called', 'namedentityrecognitionipynb', 'research', 'brief', 'logic', 'preparation', 'dataset', 'use', 'collected', 'class', 'numbers', 'documents', 'randomly', 'sampled', 'training', 'tokenized', 'sentences', 'labeled', 'target', 'tokens', 'corresponding', 'entities', 'example', 'database', 'systems', 'following', 'sentence', 'primary', 'interests', 'objectoriented', 'software', 'engineering', 'language', 'modelling', 'spacy', 'pretrained', 'cnn', 'model', 'decided', 'build', 'scratch', 'errorfree', 'used', 'drop', 'rate', 'default', 'optimizer', 'provided', 'rule', 'matching', 'maximize', 'quality', 'outcome', 'leverage', 'rulebased', 'matcher', 'using', 'regular', 'expressions', 'since', 'looking', 'limited', 'searched', 'includes', 'validation', 'observed', 'aim', 'simple', 'testing', 'obtained', 'qualitative', 'results', 'performing', 'interpolation', 'initial', 'continue', 'future', 'work', 'examples', 'extracted', 'distributed', 'computing', 'analysis', 'algorithms', 'structures', 'computational', 'geometry', 'graph', 'computer', 'networking', 'security', 'education', 'field', 'namestxt', 'corresponds', 'ranking', 'last', 'merged', 'metadatadat', 'already', 'fields', 'metadata', 'created', 'datacompiled_biosmerge_new_field_to_metadatapy', 'append', 'newly', 'end', 'addition', 'required', 'add', 'type', 'filetoml', 'knows', 'parse', 'feed', 'ranker', 'located', 'dataexpertsearchrankerpy', 'configed', 'config', 'datacompiled_biosconfigtoml', 'visualization', 'webpage', 'handled', 'templatesindexhtml', 'designs', 'layout', 'format', 'controlled', 'staticindexjs', 'interact', 'user', 'needs', 'javascript', 'serverpy', 'executed', 'program', 'launches', 'uses', 'flask', 'drive', 'functions', 'local', 'server', 'running', 'httplocalhost', 'necessary', 'tell', 'get', 'pass', 'installation', 'usage', 'extremely', 'easy', 'install', 'run', 'mac', 'linux', 'tricky', 'settings', 'execute', 'windows', 'webserver', 'package', 'gunicorn', 'doesnt', 'support', 'directly', 'docker', 'git', 'havent', 'want', 'save', 'bash', 'clone', 'httpsgithubcomlosaohancourseprojectgit', 'download', 'desktop', 'httpshubdockercomeditionscommunitydockercedesktopwindows', 'pycharm', 'professional', 'httpswwwjetbrainscompycharmdownloadsectionwindows', 'need', 'apply', 'jetbrains', 'account', 'illinois', 'access', 'version', 'httpswwwjetbrainscomshopeformstudents', 'open', 'courseproject', 'topleft', 'menu', 'plugins', 'make', 'sure', 'enabled', 'execution', 'deployment', 'create', 'service', 'follows', 'ok', 'appear', 'bottom', 'installed', 'green', 'button', 'connect', 'top', 'connected', 'middle', 'window', 'directory', 'dockermainappdockerfile', 'double', 'arrow', 'select', 'edit', 'mainappdockerfile', 'fill', 'setting', 'pop', 'could', 'image', 'tag', 'container', 'start', 'launch', 'seconds', 'attached', 'console', 'find', 'mapped', 'host', 'machine', 'localhost', 'browser', 'expert', 'maclinux', 'virtual', 'env', 'choosing', 'base', 'interpreter', 'activated', 'requirementstxt', 'packages', 'typing', 'pip', 'r', 'serverapp', 'b', 'terminal', 'team', 'member', 'contribution', 'bruno', 'seo', 'focused', 'modeling', 'part', 'analyzed', 'identified', 'pattern', 'key', 'words', 'implemented', 'entity', 'recognition', 'trained', 'joseph', 'angulo', 'frontend', 'figured', 'web', 'designed', 'appearance', 'updated', 'changes', 'xiaohan', 'liu', 'captain', 'coordinate', 'focus', 'highlevel', 'solved', 'across', 'windowsmaclinux', 'workflow', 'prepare', 'well', 'drafted', 'proposal', 'progress', 'report', 'final', 'document', 'presentation', 'modification', 'scope', 'original', 'planned', 'keywords', 'publications', 'careful', 'consideration', 'think', 'take', 'tremendous', 'time', 'sources', 'like', 'arxiv', 'google', 'scholar', 'therefore', 'hold', 'publication', 'finish', 'may', 'either', 'come', 'back', 'switch', 'another', 'contained', 'tasks', 'finished', 'digest', 'test', 'h', 'analyze', 'implement', 'retrieve', 'train', 'retrievalmining', 'improvements', 'pending', 'adjust', 'whole', 'complete', 'documentationreport', 'challenges', 'biggest', 'challenge', 'faced', 'systematically', 'nameuniversity', 'spending', 'later', 'difficulties', 'beginning', 'debugging', 'teammates', 'finally', 'able', 'currently', 'struggling', 'html', 'manageable', 'almost', 'technical', 'description', 'steps', 'ru', 'n', 'e', 'j', 'p', 'g', 'u', 'lo', 'x', 'ao', 'l', 'sample', 'input', 'requires', 'thanks', 'members', 'jangulo', 'sbseo', 'xliu', 'captaincoordinator', 'topic', 'improve', 'extracting', 'relevant', 'bios', 'adding', 'demonstrate', 'works', 'expected', 'going', 'displayed', 'items', 'see', 'highlighted', 'briefly', 'describe', 'datasets', 'techniques', 'plan', 'reuse', 'codebase', 'github', 'ner', 'algorithm', 'along', 'mining', 'introduced', 'course', 'communicate', 'utilize', 'rely', 'framework', 'together', 'programming', 'estimated', 'cost', 'hrs', 'command', 'tested', 'macos', 'site', 'available', 'please', 'refer']
https://github.com/luoxix/CourseProject	"project documentation reproduce a paper: a cross-collection mixture model for comparative text mining overview this code is used to discover latent themes across collections. we provide two models, the simple mixture model (simplemix.py) and the cross-collection mixture model (ccmix.py). the simple mixture model treats multiple collections as one single collection and discovers k latent common themes in it. the cross-collection mixture model explicitly distinguishes themes from different collections. it not only captures k common themes that characterize common information across all collections but also k collection-specific themes for each collection. the value of k is set by users and each theme is characterized by a multinomial word distribution. implementation dataset the paper uses 2 datasets: war news, and laptop reviews. we are not able to obtain exactly the same datasets as those are used in the paper. for the war news, we manually searched and downloaded 30 news articles from bbc or cnn for each of the two wars, published in one-year span (may 2003 - april 2004 for iraq war, nov 2001 to oct 2002 for afghanistan war) to approximate the war news dataset that is used in the paper. (code/data/war_dataset.txt) for the laptop reviews, we chose 3 laptops from the amazon.com best sellers in laptop computers: acer aspire 5 slim laptop, apple macbook air, hp chromebook 14-inch hd laptop, and manually downloaded the top 40 reviews from amazon.com. (code/data/laptop_reviews.txt) each document occupies one line in the .txt file, prepended by an integer that indicates which collection the document is from. preprocessing we preprocessed the data by removing stop words (including punctuation marks), words that contain less than 3 characters, and stemming the documents to map inflected words to their stems. preprocessing is important to ensure that the resulting clusters after applying the mixture model would contain more meaningful words for evaluation. initialization simpmix model (baseline) ccmix model in simpmix model, there are two types of themes: the background theme, and the shared themes (between collections) in the ccmix model, there are three types of themes: the background theme, the common themes throughout all collections, and themes specific to the collections. both simpmix and ccmix models use the em algorithm to find the clusters iteratively. the two models also share the same background theme (topic_word_prob_background, dimension: 1 * vocabulary_size) which is calculated by taking the maximal likelihood of each word in the whole corpus (includes all the collections) before the iterative em steps. the other parameters !!(lambda_b) and !""(lambda_c) which are the probability of selecting the background theme and the common theme respectively. we used 0.95 for !!and 0.25 for !""as the paper suggested. expression name in code initialization function dimension !! lambda_b scalar, 0.95 !"" lambda_c scalar, 0.25 !(#, %) term_doc_matrix build_term_doc_matrix (self) this function counts the term frequency in each document, and computes the background distribution. number_of_collections * number_of_documents * vocabulary_size '(#|)!) topic_word_prob_bac kground 1 * vocabulary_size ""#,% document_topic_prob initialize_randomly (self, number_of_topics) this function randomly initialize number_of_collections * number_of_documents * number_of_topics '(#|)%) topic_word_prob number_of_topics * vocabulary_size '(#|)%,&) topic_word_prob_col lection_specific number_of_collections * number_of_topics * vocabulary_size # epsilon scalar, 0.00001 the em algorithm the implementation of the baseline simpmix model is very similar to mp3 except for introducing a background model. therefore, in this section, we will focus on how to implement the em algorithm for the ccmix model. e step e step is to estimate the hidden variables: probability of selecting a theme in a mixture model. expression name in code calculation function dimension '(*#,""!,' = ,) collection specific theme topic_prob_j expectation_step (self, number_of_topics, verbose) this function performs e step number_of_collections * number_of_documents * vocabulary_size * number_of_topics '(*#,""!,' = -) background theme topic_prob_ b number_of_collections * number_of_documents * vocabulary_size * 1 '(*#,""!,' = .) common theme topic_prob_ c number_of_collections * number_of_documents * vocabulary_size * number_of_topics m step m step is to use the hidden variables to re-estimate the distributions in each theme, maximizing the likelihood. expression name in code calculation function dimension ""#,% ()*+) document_topic_prob maximization_step(self, number_of_topics, verbose) this function performs m step number_of_collections * number_of_documents * number_of_topics '()*+)(#|)%) topic_word_prob number_of_topics * vocabulary_size '()*+)(#|)%,&) topic_word_prob_colle ction_specific number_of_collections * number_of_topics * vocabulary_size /01 '(.) likelihoods calculate_likelihood(self) this function calculates likelihood list of scalars the iteration of e-m steps continues until the difference between likelihood in adjacent iterations is less than #or the maximum iteration number is reached. usage python version python 3.6 download repo git clone https://github.com/luoxix/courseproject.git install dependencies pip install metapy pip install numpy run code to run the simple mixture model: python simplemix.py --input_path ./data/laptop_reviews.txt -- output_path ./result/result_simple_laptop.txt --lambda_b 0.95 --max_iterations 500 -- number_topics 5 --number_top_words 8 --verbose true to run the cross-collection mixture model: python ccmix.py --input_path ./data/laptop_reviews.txt -- output_common_path ./result/common_laptop.txt -- output_specific_path ./result/specific_laptop.txt --lambda_b 0.95 --lambda_c 0.25 -- max_iterations 1000 --number_topics 5 --number_top_words 8 --verbose true python ccmix.py --input_path ./data/war_dataset.txt -- output_common_path ./result/common_war.txt --output_specific_path ./result/specific_war.txt -- lambda_b 0.95 --lambda_c 0.25 --max_iterations 1000 --number_topics 5 --number_top_words 8 --verbose true meaning of each argument input_path: the path of the input file which contains all collections. each line contains a document and the first number denotes which kind of collection it is from. output_path: the path of the output file which contains k themes, for each theme, several top words with highest probability are shown. output_common_path: the path of the output file which contains common themes output_specific_path: the path of the output file which contains specific themes lambda_b: the weight of the background model lambda_c: the weight of common theme max_iterations: the number of iterations for em algorithm number_topics: the number of latent themes number_top_wods: the number of top words which are shown in the output file verbose: whether to output the immediate information results and evaluations run the code with instructions described above until the likelihood value converges. laptop reviews cluster 1 cluster 2 cluster 3 common theme words catalina0.0198 remov 0.0148 harddriv 0.0148 ad 0.0148 new 0.0102 second 0.0102 internet 0.0099 found 0.0099 samsung 0.0169 2400 0.0169 numer 0.0169 tech 0.0169 top 0.0169 edg 0.0169 left 0.0169 hour 0.0148 fan 0.0311 2020 0.0311 temperatur 0.0271 thermal 0.0271 cpu 0.0216 zoom 0.0203 extern 0.0203 bar 0.0203 cluster 1 cluster 2 cluster 3 common air 0.0252 connect 0.024 2020 0.022 thermal 0.0165 pictur 0.0137 poor 0.0125 bar 0.0124 new 0.0124 mode 0.0247 app 0.0179 differ 0.0172 side 0.0169 2400 0.0162 samsung 0.0162 support 0.014 download 0.013 call 0.0304 cpu 0.0162 amazon 0.0156 charg 0.0155 thermal 0.0153 brand 0.015 noth 0.012 bar 0.0115 acer drive 0.0274 ad 0.0201 harddriv 0.0197 remov 0.0194 click 0.0178 pictur 0.0175 new 0.0165 second 0.0142 remov 0.0204 mode 0.0163 harddriv 0.0146 ad 0.0146 wouldn't 0.0129 veri 0.0121 second 0.0121 case 0.0114 call 0.0354 amazon 0.0191 did 0.0166 tech 0.0157 bla 0.0155 brand 0.015 wait 0.0139 minut 0.0135 hp connect 0.0347 amaz 0.0221 pictur 0.0206 love 0.017 unit 0.016 chrome 0.0158 drive 0.0151 nice 0.0151 cuz 0.0413 love 0.028 i'm 0.0207 didn't 0.0207 daughter 0.0207 polici 0.0207 glad 0.0207 aren't 0.0207 call 0.0306 charg 0.0204 brand 0.0197 amazon 0.0163 noth 0.0157 minut 0.0145 did 0.0139 differ 0.0136 macbook air upgrad 0.1062 hard 0.0704 16gb 0.0551 drive 0.0522 probabl 0.0475 beauti 0.0475 instal 0.0452 suppos 0.0448 receiv 0.0258 lock 0.0234 dissapoint 0.0162 possibl 0.0162 owner 0.0162 anazon 0.0162 recoveri 0.0162 immedi 0.0162 call 0.0304 cpu 0.0162 amazon 0.0156 charg 0.0155 thermal 0.0153 brand 0.015 noth 0.012 poor 0.0115 from the result, we can see that simpmix model is only able to find the themes in the whole corpus. the themes are shared among collections. it tells about what topics the overall corpus covers, but it is not able to identify topic differences between different collection. on the other hand, the ccmix model is able to find the common themes throughout the collections, and is also able to identify the different specific themes in each collection. for example, in cluster 2, all three collections share the same common theme. however, there is a high frequency of ""love"" in hp collection, whereas there is a high frequency of ""disappoint"" in the macbook air collection. we may infer these two opposite attitudes maybe towards the same topic in the common theme. probably this hp laptop provides app or support that buyers love, whereas macbook air disappointed buyers in these two aspects. therefore, we can conclude that, in reviews evaluation, the ccmix model is able to identify different performance of similar products on the same aspects. another observation is that not all specific themes are well distinguished from the common theme / other specific themes within the same cluster (e.g., cluster 3). this is probably because we use a uniform !"" for all clusters. however, for some clusters, there are more overlaps in topics among collections and less differences, and !"" should be larger to account for the common topics. the data we use are from amazon, and many of them are expression of feelings, and purchase experience with amazon, instead of technical reviews. therefore, the results are more on customer satisfaction. on the other hand, performing ccmix model on technical reviews will find more about the performance of each laptop. war dataset cluster 1 cluster 2 cluster 3 cluster 4 cluster 5 common theme words khalifa 0.0307 o'neil 0.0199 newsweek0.0174 quran 0.0154 hous 0.0141 dyke 0.0113 cbs 0.0102 kennedi 0.0092 mirror 0.0161 threat 0.0139 palac 0.0134 wmd 0.0122 religi 0.0113 morgan 0.0092 nuclear 0.0087 pictur 0.0076 flag 0.0475 gun 0.0158 design 0.0091 nasratullah0.0088 kit 0.0088 equip 0.0087 zardad 0.0083 leak 0.0072 woodward0.0247 powel 0.0220 kerri 0.0210 marin 0.0201 matti 0.0174 gen 0.0125 clinton 0.0114 bandar 0.0110 draft 0.0237 opium 0.0211 hamdi 0.0202 rape 0.0169 wolfowitz0.0149 farmer 0.0149 poppi 0.0132 erad 0.0114 cluster 1 cluster 2 cluster 3 cluster 4 cluster 5 common theme words flag 0.0450 chang 0.0158 design 0.0131 women0.0096 repres 0.0095 new 0.0086 threat 0.0085 equip 0.0084 gun 0.0332 draft 0.0296 leak 0.0173 kennedi 0.0158 katharin 0.0154 o'neil 0.0143 prosecut 0.0130 secret 0.0128 wolfowitz 0.0403 soro 0.0370 group 0.0304 rumsfeld 0.0277 independ 0.0230 money 0.0220 rais 0.0185 moveon.org 0.0168 mirror 0.0277 religion 0.0218 god 0.0207 zardad 0.0195 koran 0.0164 morgan 0.0164 dearing 0.0158 cramer 0.0135 marin 0.0178 woodward 0.0165 powel 0.0147 coalit 0.0145 matti 0.0123 gen 0.0122 opium 0.0101 sunday 0.0095 iraq theme words flag 0.0450 chang 0.0158 design 0.0133 women 0.0096 repres 0.0095 new 0.0088 threat 0.0085 equip 0.0084 gun 0.0338 draft 0.0295 leak 0.0172 kennedi 0.0158 katharin 0.0153 o'neil 0.0142 prosecut 0.0129 secret 0.0128 wolfowitz 0.0403 soro 0.0370 group 0.0304 rumsfeld 0.0277 independ 0.0230 money 0.0220 rais 0.0185 moveon.org 0.0168 mirror 0.0277 religion 0.0218 god 0.0207 zardad 0.0195 koran 0.0164 morgan 0.0164 dearing 0.0158 cramer 0.0135 zapatero 0.0295 spain 0.0269 spanish 0.0167 coalit 0.0134 sunday 0.0132 marin 0.0124 woodward 0.0115 powel 0.0102 afghan theme words women 0.0326 rape 0.0119 elect 0.0118 soviet 0.0117 khalifa 0.0112 live 0.0099 nasratullah 0.0092 villag 0.0091 kerri 0.0389 hamdi 0.0382 hous 0.0315 clinton 0.0217 cohen 0.0186 wednesday 0.0154 foam 0.0152 polystyren 0.0133 money 0.1082 group 0.1033 rumsfeld 0.0746 million 0.0695 rais 0.0515 candid 0.0456 link 0.0384 campaign 0.0375 mirror 0.0654 zardad 0.0472 morgan 0.0396 daili 0.0285 tortur 0.0244 qlr 0.0216 pictur 0.0212 goldsmith 0.0202 newsweek 0.0554 quran 0.0489 magazin 0.0274 toilet 0.0228 desecr 0.0228 isikoff 0.0196 dirita 0.0196 investig 0.0151 similarly, the result for the war dataset also demonstrates the ability of ccmix in differentiating the specific themes between collections. for example, in cluster 1, we can see that in iraq war news, people are more interested in reporting flag and mental changes, whereas in afghanistan war news, women raped were reported in the highest frequency. in cluster 2, iraq war news reported more on gun and draft, while afghanistan war news reported more on the two persons: kerry and hamdi. another observation with the war dataset is that in cluster 1 to 4, the common theme has high similarity with the iraq theme, and has much smaller overlap with the afghan theme. this is probably because the iraq specific theme is a very tight cluster where the top words have very high frequencies, such that the common theme is only able to account for partial frequencies of the top words. only in cluster 5, both themes are very different from the common theme. conclusion in conclusion, we can see that ccmix model is able to address the task of comparative text mining by its capability to discover the latent common themes across all collections, and to summarize the similarity and differences of the collections along each common theme. however, the performance of ccmix varies on the choice of !! and the characteristics of the dataset that it is applied on. contribution xi luo (xiluo4) yuheng zhang (yuhengz2) algorithm implementation: ccmix documentation: - implementation - results and evaluations - conclusion algorithm implementation: simpmix documentation: - overview - usage tutorial presentation progress report reproduce a paper: a cross-collection mixture model for comparative text mining 1. data collection (partially completed) dataset 1: laptop reviews (completed) dataset 2: war news (not started) this should be done by manually searching and downloading 30 news articles from bbc or cnn for each of the two wars, published in one year span (may 2003 - april 2004 for iraq war, nov 2001 to oct 2002 for afghanistan war). this would be a very close proximation of the war news dataset that is used in the paper. 2. algorithm implementation (completed) implementation of the ccmix model is fully done, and em converges with the laptop reviews dataset. 3. experimental results gathering (partially completed) the experimental results should be collected and summarized in a table of theme clusters as the same way in the paper to facilitate comparison. 4. results comparison and evaluation (not started) baseline model (simpmix) should be implemented, and the results from the ccmix model should be compared with those from the baseline model to evaluate the performance of ccmix model and compare with the conclusions from the paper. 5. preparation of documentation and presentation (not started) a readme file and a video presentation should be prepared for the final submission. project proposal reproduce a paper: a cross-collection mixture model for comparative text mining 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. xi luo (captain): xiluo4 yuheng zhang: yuhengz2 2. which paper have you chosen? chengxiang zhai, atulya velivelli, and bei yu. 2004. a cross-collection mixture model for comparative text mining. in proceedings of the 10th acm sigkdd international conference on knowledge discovery and data mining (kdd 2004). acm, new york, ny, usa, 743-748. doi=10.1145/1014052.1014150 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? the paper uses 2 datasets: war news, and laptop reviews. we are not able to obtain exactly the same datasets as those are used in the paper. 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? for the war news, we will manually search and download 30 news articles from bbc or cnn for each of the two wars, published in one year span (may 2003 - april 2004 for iraq war, nov 2001 to oct 2002 for afghanistan war). this would be a very close proximation of the war news dataset that is used in the paper. for the laptop reviews, we choose 3 laptops from the amazon.com best sellers in laptop computers: acer aspire 5 slim laptop, apple macbook air, hp chromebook 14-inch hd laptop, and will manually download the top 40 reviews from amazon.com. this would be comparable to the laptop reviews dataset that is used in the paper. 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? (not applicable) courseproject project topic reproduce a paper: a cross-collection mixture model for comparative text mining tutorial link https://www.youtube.com/watch?v=qebnvprvisk documentation documentation team members xi luo (xiluo4) yuheng zhang (yuhengz2)"	['project', 'documentation', 'reproduce', 'paper', 'crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'overview', 'code', 'used', 'discover', 'latent', 'themes', 'across', 'collections', 'provide', 'two', 'models', 'simple', 'simplemixpy', 'ccmixpy', 'treats', 'multiple', 'one', 'single', 'collection', 'discovers', 'k', 'common', 'explicitly', 'distinguishes', 'different', 'captures', 'characterize', 'information', 'also', 'collectionspecific', 'value', 'set', 'users', 'theme', 'characterized', 'multinomial', 'word', 'distribution', 'implementation', 'dataset', 'uses', 'datasets', 'war', 'news', 'laptop', 'reviews', 'able', 'obtain', 'exactly', 'manually', 'searched', 'downloaded', 'articles', 'bbc', 'cnn', 'wars', 'published', 'oneyear', 'span', 'may', 'april', 'iraq', 'nov', 'oct', 'afghanistan', 'approximate', 'codedatawar_datasettxt', 'chose', 'laptops', 'amazoncom', 'best', 'sellers', 'computers', 'acer', 'aspire', 'slim', 'apple', 'macbook', 'air', 'hp', 'chromebook', 'inch', 'hd', 'top', 'codedatalaptop_reviewstxt', 'document', 'occupies', 'line', 'txt', 'file', 'prepended', 'integer', 'indicates', 'preprocessing', 'preprocessed', 'data', 'removing', 'stop', 'words', 'including', 'punctuation', 'marks', 'contain', 'less', 'characters', 'stemming', 'documents', 'map', 'inflected', 'stems', 'important', 'ensure', 'resulting', 'clusters', 'applying', 'would', 'meaningful', 'evaluation', 'initialization', 'simpmix', 'baseline', 'ccmix', 'types', 'background', 'shared', 'three', 'throughout', 'specific', 'use', 'em', 'algorithm', 'find', 'iteratively', 'share', 'topic_word_prob_background', 'dimension', 'vocabulary_size', 'calculated', 'taking', 'maximal', 'likelihood', 'whole', 'corpus', 'includes', 'iterative', 'steps', 'parameters', 'lambda_b', 'lambda_c', 'probability', 'selecting', 'respectively', 'suggested', 'expression', 'name', 'function', 'scalar', 'term_doc_matrix', 'build_term_doc_matrix', 'self', 'counts', 'term', 'frequency', 'computes', 'number_of_collections', 'number_of_documents', 'topic_word_prob_bac', 'kground', 'document_topic_prob', 'initialize_randomly', 'number_of_topics', 'randomly', 'initialize', 'topic_word_prob', 'topic_word_prob_col', 'lection_specific', 'epsilon', 'similar', 'mp', 'except', 'introducing', 'therefore', 'section', 'focus', 'implement', 'e', 'step', 'estimate', 'hidden', 'variables', 'calculation', 'topic_prob_j', 'expectation_step', 'verbose', 'performs', 'topic_prob_', 'b', 'c', 'reestimate', 'distributions', 'maximizing', 'maximization_stepself', 'topic_word_prob_colle', 'ction_specific', 'likelihoods', 'calculate_likelihoodself', 'calculates', 'list', 'scalars', 'iteration', 'continues', 'difference', 'adjacent', 'iterations', 'maximum', 'number', 'reached', 'usage', 'python', 'version', 'download', 'repo', 'git', 'clone', 'httpsgithubcomluoxixcourseprojectgit', 'install', 'dependencies', 'pip', 'metapy', 'numpy', 'run', 'input_path', 'datalaptop_reviewstxt', 'output_path', 'resultresult_simple_laptoptxt', 'max_iterations', 'number_topics', 'number_top_words', 'true', 'output_common_path', 'resultcommon_laptoptxt', 'output_specific_path', 'resultspecific_laptoptxt', 'datawar_datasettxt', 'resultcommon_wartxt', 'resultspecific_wartxt', 'meaning', 'argument', 'path', 'input', 'contains', 'first', 'denotes', 'kind', 'output', 'several', 'highest', 'shown', 'weight', 'number_top_wods', 'whether', 'immediate', 'results', 'evaluations', 'instructions', 'described', 'converges', 'cluster', 'catalina', 'remov', 'harddriv', 'ad', 'new', 'second', 'internet', 'found', 'samsung', 'numer', 'tech', 'edg', 'left', 'hour', 'fan', 'temperatur', 'thermal', 'cpu', 'zoom', 'extern', 'bar', 'connect', 'pictur', 'poor', 'mode', 'app', 'differ', 'side', 'support', 'call', 'amazon', 'charg', 'brand', 'noth', 'drive', 'click', 'wouldnt', 'veri', 'case', 'bla', 'wait', 'minut', 'amaz', 'love', 'unit', 'chrome', 'nice', 'cuz', 'im', 'didnt', 'daughter', 'polici', 'glad', 'arent', 'upgrad', 'hard', 'gb', 'probabl', 'beauti', 'instal', 'suppos', 'receiv', 'lock', 'dissapoint', 'possibl', 'owner', 'anazon', 'recoveri', 'immedi', 'result', 'see', 'among', 'tells', 'topics', 'overall', 'covers', 'identify', 'topic', 'differences', 'hand', 'example', 'however', 'high', 'whereas', 'disappoint', 'infer', 'opposite', 'attitudes', 'maybe', 'towards', 'probably', 'provides', 'buyers', 'disappointed', 'aspects', 'conclude', 'performance', 'products', 'another', 'observation', 'well', 'distinguished', 'within', 'eg', 'uniform', 'overlaps', 'larger', 'account', 'many', 'feelings', 'purchase', 'experience', 'instead', 'technical', 'customer', 'satisfaction', 'performing', 'khalifa', 'oneil', 'newsweek', 'quran', 'hous', 'dyke', 'cbs', 'kennedi', 'mirror', 'threat', 'palac', 'wmd', 'religi', 'morgan', 'nuclear', 'flag', 'gun', 'design', 'nasratullah', 'kit', 'equip', 'zardad', 'leak', 'woodward', 'powel', 'kerri', 'marin', 'matti', 'gen', 'clinton', 'bandar', 'draft', 'opium', 'hamdi', 'rape', 'wolfowitz', 'farmer', 'poppi', 'erad', 'chang', 'women', 'repres', 'katharin', 'prosecut', 'secret', 'soro', 'group', 'rumsfeld', 'independ', 'money', 'rais', 'moveonorg', 'religion', 'god', 'koran', 'dearing', 'cramer', 'coalit', 'sunday', 'zapatero', 'spain', 'spanish', 'afghan', 'elect', 'soviet', 'live', 'villag', 'cohen', 'wednesday', 'foam', 'polystyren', 'million', 'candid', 'link', 'campaign', 'daili', 'tortur', 'qlr', 'goldsmith', 'magazin', 'toilet', 'desecr', 'isikoff', 'dirita', 'investig', 'similarly', 'demonstrates', 'ability', 'differentiating', 'people', 'interested', 'reporting', 'mental', 'changes', 'raped', 'reported', 'persons', 'kerry', 'similarity', 'much', 'smaller', 'overlap', 'tight', 'frequencies', 'partial', 'conclusion', 'address', 'task', 'capability', 'summarize', 'along', 'varies', 'choice', 'characteristics', 'applied', 'contribution', 'xi', 'luo', 'xiluo', 'yuheng', 'zhang', 'yuhengz', 'tutorial', 'presentation', 'progress', 'report', 'partially', 'completed', 'started', 'done', 'searching', 'downloading', 'year', 'close', 'proximation', 'fully', 'experimental', 'gathering', 'collected', 'summarized', 'table', 'way', 'facilitate', 'comparison', 'implemented', 'compared', 'evaluate', 'compare', 'conclusions', 'preparation', 'readme', 'video', 'prepared', 'final', 'submission', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'chosen', 'chengxiang', 'zhai', 'atulya', 'velivelli', 'bei', 'yu', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'kdd', 'york', 'ny', 'usa', 'doi', 'programming', 'language', 'plan', 'answer', 'question', 'recent', 'nature', 'search', 'choose', 'comparable', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'applicable', 'courseproject', 'httpswwwyoutubecomwatchvqebnvprvisk']
https://github.com/machilusZ/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/mackteng/CourseProject	cs410 project report cross-collection mixture model for comparative text mining function overview: this software implements the method described in the paper a cross-collection mixture model for comparative text mining. the paper proposes a method for discovering common themes across all the collections and for each theme, discover what is unique to a particular theme for each collection. in other words, for k topics among c collections, k common themes are discovered along with kc special themes for each collection-theme pair. a theme is modeled as probability distribution over words. implementation: the skeleton of the code is similar to that of mp3. models to be learned are randomly initialized, hidden latent variables are declared and the em algorithm is implemented according to the formula listed below (copied from paper): one of the issues we ran into when implementing were underflow errors due to very miniscule probabilities. our workaround was to pad these very small probabilities to a predefined number (we used 1e-600). usage: to run the code: python3 cross.py {collectionname} where collectionname is the name of the folder under data/collections. inside each folder under data/collections, there should be n files that make up the n collections, with each line in each of the n files representing a document. our provided data includes one for wine (pinot noir and chardonnay) and covid-related articles by region (usa, asia, europe). words are tokenized using the nltk tokenizer and any word < 3 characters are discarded to remove too much background noise in the theme models. example output: contribution: mackt2: implementation of cross-collection mixture model - (em algorithm) documentation (progress report) hhc3: debugging of code - research using log-space and padding to avoid underflow errors data scraping - sanitization and manipulation of various datasets found on kaggle (ad-hoc scripting for various formats, so not included in code) presentation (video) progress report captitan: mack teng (mackt2) member: hsin hsien chung (hhc3) progress: * finished parsing and filtering the data sets * finished building the matrice * implementing cross-collection mixture model em algorithm challenges: * originally, we were planning to crawl data from the web, but it took longer than expected. we used existing data sets from kaggle.com instead. * some data are duplicated * for the mobile phone review data set, some of the comparison is not valid. because some mobile phone models are outdated, but we do not have starting sales time or review time to distinguish them, we need to come up with a way to make a valid set for comparison. therefore, we filtered the data with price range. remaining tasks: * might need to compare with filtered data sets or unfiltered data sets * add documentations * create presentation project proposal team name: mbouncy team members: captain: mack teng (mackt2) member: hsinhsien chung (hhc3) paper chosen: a cross-collection mixture model for comparative text mining (http://www.ifp.illinois.edu/~velivell/ctm4.pdf) programming language: python dataset: not exactly the same as the original dataset, but we will crawl for/aggregate document collections in a similar fashion as described in the paper. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['cs', 'project', 'report', 'crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'function', 'overview', 'software', 'implements', 'method', 'described', 'paper', 'proposes', 'discovering', 'common', 'themes', 'across', 'collections', 'theme', 'discover', 'unique', 'particular', 'collection', 'words', 'k', 'topics', 'among', 'c', 'discovered', 'along', 'kc', 'special', 'collectiontheme', 'pair', 'modeled', 'probability', 'distribution', 'implementation', 'skeleton', 'code', 'similar', 'mp', 'models', 'learned', 'randomly', 'initialized', 'hidden', 'latent', 'variables', 'declared', 'em', 'algorithm', 'implemented', 'according', 'formula', 'listed', 'copied', 'one', 'issues', 'ran', 'implementing', 'underflow', 'errors', 'due', 'miniscule', 'probabilities', 'workaround', 'pad', 'small', 'predefined', 'number', 'used', 'e', 'usage', 'run', 'python', 'crosspy', 'collectionname', 'name', 'folder', 'datacollections', 'inside', 'n', 'files', 'make', 'line', 'representing', 'document', 'provided', 'data', 'includes', 'wine', 'pinot', 'noir', 'chardonnay', 'covidrelated', 'articles', 'region', 'usa', 'asia', 'europe', 'tokenized', 'using', 'nltk', 'tokenizer', 'word', 'characters', 'discarded', 'remove', 'much', 'background', 'noise', 'example', 'output', 'contribution', 'mackt', 'documentation', 'progress', 'hhc', 'debugging', 'research', 'logspace', 'padding', 'avoid', 'scraping', 'sanitization', 'manipulation', 'various', 'datasets', 'found', 'kaggle', 'adhoc', 'scripting', 'formats', 'included', 'presentation', 'video', 'captitan', 'mack', 'teng', 'member', 'hsin', 'hsien', 'chung', 'finished', 'parsing', 'filtering', 'sets', 'building', 'matrice', 'challenges', 'originally', 'planning', 'crawl', 'web', 'took', 'longer', 'expected', 'existing', 'kagglecom', 'instead', 'duplicated', 'mobile', 'phone', 'review', 'set', 'comparison', 'valid', 'outdated', 'starting', 'sales', 'time', 'distinguish', 'need', 'come', 'way', 'therefore', 'filtered', 'price', 'range', 'remaining', 'tasks', 'might', 'compare', 'unfiltered', 'add', 'documentations', 'create', 'proposal', 'team', 'mbouncy', 'members', 'captain', 'hsinhsien', 'chosen', 'httpwwwifpillinoiseduvelivellctmpdf', 'programming', 'language', 'dataset', 'exactly', 'original', 'foraggregate', 'fashion', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/mariahuipe/CourseProject	"final project proposal: student name: maria fernandez 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. i will work individually, my netids is: myf2 2. which paper have you chosen? pattern annotation: 1. qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 3. which programming language do you plan to use? java 4. can you obtain the datasets used in the paper for evaluation? yes, i found it here: https://dblp.uni-trier.de/xml/ 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? project progress report: student name: maria fernandez my project is to reproduce the paper: generating semantic annotations for frequent patterns with context analysis the progress i have made: 1. i have read through the paper a few times, making sure i understand the concepts that are used in the paper, like pattern, transactions, context unit, closed frequent pattern, semantically similar patterns, etc. i tried focusing in understanding the section that explains the one-pass microclustering algorithm since this is the part that i will have to work from scratch. 2. i found the dataset that i will be using since the original location is not available in the location anymore, but this is the same data set, just a newer version of it. i made sure it has the data we need. 3. i looked into python libraries to parse xm. 4. i looked into python libraries for frequent patterns and for close patterns. it is allowed to use the libraries to pre-process the data set, and create the input to the microclustering algorithm. i still have to decide what i am using here. remaining tasks: i have to decide what libraries i am using for frequent pattern and close pattern and i need to start coding. any challenges: i am working alone because with work and family responsibilities it would be hard to collaborate with others, so it is challenging to take decisions by myself. so far i am not sure they libraries i found are the best ones to use, so i am planning to ask the question in piazza and see if the other people doing the same paper has found the same libraries or if they have other suggestions. courseproject maria fernandez - final project. project demo video link: https://www.amazon.com/photos/shared/_pfycgafshmihayweztzhw.qkekw7lygk8usmzzd2aqfi pre-requirements: you need java 1.8, i specifically used java version ""1.8.0_271"" if it is not installed in your system, download from: https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html i include the compile versions of the two java programs i developed, but if needed to compile, please do the following: javac -cp mmdb-2019-04-29.jar parsedblp.java javac dblpcalcdistance.java the result will be the parsedblp.class & dblpcalcdistance.class files step #1 clone git repository: https://github.com/mariahuipe/courseproject/ step #2: option a: run the data pre-processing of the source data set. 1. download data set a. go here: https://dblp.org/xml/release/ b. download to the file called: dblp-2020-11-01.xml.gz . download to same directory where you clone my git repository. c. if in unix/os: unzip the gz file: gunzip dblp-2020-11-01.xml.gz this will create the dblp-2020-11-01.xml which is the input of the pre-processing process. d. make sure you have the dblp.dtd which was downloaded from my git repository 2. run the pre-processing process: java -xmx8g -cp mmdb-2019-04-29.jar:. parsedblp > inputfp_100k.txt this step will produced the following files: - authors.txt - inputfp_100k.txt - titles.txt note: the xml file is pretty big. i was not able to process this file from my windows laptop due to lack of memory but i was able to do it from my mac, it still takes a few minutes. this is why i am putting this step as an optional step and i am including option b which is skipping this step and take the files that have been produced by the pre-processing. option b: copy pre-processed files from the back up directory: 1. do the following: cp out_files_bk/authors.txt . cp out_files_bk/inputfp_100k.txt . cp out_files_bk/titles.txt . step #3: run the spmf library to create closed frequent patterns from the inputfp_100k.txt file: 1. run the following: java -jar spmf.jar run fpclose inputfp_100k.txt outputfp.txt 0% results: you should see the file outputfp.txt more information about this library: https://www.philippe-fournier-viger.com/spmf/ step #4: run the one-pass micrcocluster algorithm based in the paper description: 1. do the following: java dblpcalcdistance results: pattern_annotations.txt will be created."	['final', 'project', 'proposal', 'student', 'name', 'maria', 'fernandez', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'work', 'individually', 'myf', 'paper', 'chosen', 'pattern', 'annotation', 'qiaozhu', 'mei', 'dong', 'xin', 'hong', 'cheng', 'jiawei', 'han', 'chengxiang', 'zhai', 'generating', 'semantic', 'annotations', 'frequent', 'patterns', 'context', 'analysis', 'proceedings', 'th', 'acm', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'data', 'mining', 'kdd', 'new', 'york', 'ny', 'usa', 'doi', 'programming', 'language', 'plan', 'use', 'java', 'obtain', 'datasets', 'used', 'evaluation', 'yes', 'found', 'httpsdblpunitrierdexml', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'progress', 'report', 'reproduce', 'made', 'read', 'times', 'making', 'sure', 'understand', 'concepts', 'like', 'transactions', 'unit', 'closed', 'semantically', 'etc', 'tried', 'focusing', 'understanding', 'section', 'explains', 'onepass', 'microclustering', 'algorithm', 'since', 'part', 'scratch', 'using', 'original', 'location', 'available', 'anymore', 'set', 'newer', 'need', 'looked', 'python', 'libraries', 'parse', 'xm', 'close', 'allowed', 'preprocess', 'create', 'input', 'still', 'decide', 'remaining', 'tasks', 'start', 'coding', 'challenges', 'working', 'alone', 'family', 'responsibilities', 'would', 'hard', 'collaborate', 'others', 'challenging', 'take', 'decisions', 'far', 'best', 'ones', 'planning', 'ask', 'piazza', 'see', 'people', 'suggestions', 'courseproject', 'demo', 'video', 'link', 'httpswwwamazoncomphotosshared_pfycgafshmihayweztzhwqkekwlygkusmzzdaqfi', 'prerequirements', 'specifically', '_', 'installed', 'system', 'download', 'httpswwworaclecomjavatechnologiesjavasejavasejdkdownloadshtml', 'include', 'compile', 'versions', 'two', 'programs', 'developed', 'needed', 'please', 'following', 'javac', 'cp', 'mmdbjar', 'parsedblpjava', 'dblpcalcdistancejava', 'result', 'parsedblpclass', 'dblpcalcdistanceclass', 'files', 'step', 'clone', 'git', 'repository', 'httpsgithubcommariahuipecourseproject', 'option', 'run', 'preprocessing', 'source', 'go', 'httpsdblporgxmlrelease', 'b', 'file', 'called', 'dblpxmlgz', 'directory', 'c', 'unixos', 'unzip', 'gz', 'gunzip', 'dblpxml', 'process', 'make', 'dblpdtd', 'downloaded', 'xmxg', 'parsedblp', 'inputfp_ktxt', 'produced', 'authorstxt', 'titlestxt', 'note', 'xml', 'pretty', 'big', 'able', 'windows', 'laptop', 'due', 'lack', 'memory', 'mac', 'takes', 'minutes', 'putting', 'optional', 'including', 'skipping', 'copy', 'preprocessed', 'back', 'out_files_bkauthorstxt', 'out_files_bkinputfp_ktxt', 'out_files_bktitlestxt', 'spmf', 'library', 'jar', 'spmfjar', 'fpclose', 'outputfptxt', 'results', 'information', 'httpswwwphilippefourniervigercomspmf', 'micrcocluster', 'based', 'description', 'dblpcalcdistance', 'pattern_annotationstxt', 'created']
https://github.com/mattzeeee/TextInformationSystemsCourseProject	"cs 410: text information systems final project - final report project type: classification competition team: the classifiers november 27, 2020 praveen pathri (ppathri2@illinois.edu) steven piquito (piquito2@illinois.edu) mattias rumpf (mrumpf2@illinois.eu) references and web-sites used in this code extensively: https://towardsdatascience.com/sarcasm-detection-step-towards-sentiment-analysis-84cb013bb6db https://simpletransformers.ai/docs/usage/ key libraries used in this project to date: as part of our project certain libraries are being used extensively. for the core traditional ml models as well as feature vector transformations: sklearn library for the implementation of the roberta pre-trained neural network architecture, the following libaries are used: huggingface transformer library simpletransformer.ai library description of work in this notebook: this code notebook explains the next steps we followed post the completion of the project progress report notebook and should be seen (or read) as a follow on to that piece of work. our total project documentation is covered by both notebooks as well additional descriptions of further testing we performed/optimisation as part of the project. this notebook focuses on the final implementation of the chosen roberta transformer model implementation designated by the project team for investigation and use in the classification competition and leaderboard. optimisation and experimentation is described in another document, however this code focuses on the following: 1. the creation and learning of an existing roberta model widely used and available in the simpletransformers.ai library 2. some feature engineering in the form of stemming, stop word removal and general cleaning of text input data 3. the inclusion of context in the model to enhance the model performance additional commentary and description can be found in the document below code snippets as to what the project team found to be working or not working. import key python libraries for this project the below cell installs all necessary key libraries used in this notebook first should they not already be installed: the below cell imports all necessary libraries used in this notebook : in [ ]: !pip install jsonlines !pip install pandas !pip install transformers !pip install nltk !pip install torch in [1]: import os import jsonlines import numpy as np import pandas as pd from sklearn.feature_extraction.text import tfidfvectorizer from sklearn.metrics import precision_recall_fscore_support from sklearn.model_selection import train_test_split from sklearn.metrics import confusion_matrix import simpletransformers import torch #libraries for roberta importing of training and test data the following code reads both the train and test json files and imports the data into a python dictionary format: count of training data entries: 5000 count of test data entries: 1800 the following code converts the training and test data dictionaries into a pandas dataframe format for use later in the roberta model training and test datasets converted to pandas dataframes... from simpletransformers.classification import classificationmodel,classificationargs from sklearn.metrics import f1_score from sklearn.metrics import accuracy_score from sklearn.metrics import precision_score from sklearn.metrics import recall_score in [2]: test_file = 'data/test.jsonl' train_file = 'data/train.jsonl' data_train = [] iter = 1 with jsonlines.open(train_file) as f: for line in f.iter(): iter +=1 data_train.append(line) data_test = [] iter = 1 with jsonlines.open(test_file) as f: for line in f.iter(): iter +=1 data_test.append(line) print(""count of training data entries:"") print(len(data_train)) print(""count of test data entries:"") print(len(data_test)) in [3]: train_data_pd = pd.dataframe.from_dict(data_train) test_data_pd = pd.dataframe.from_dict(data_test) print(""training and test datasets converted to pandas dataframes..."") adding context to training and test datasets as well as basic nlp processing this code will append the context data to the response/text data linearly so as to add context information to the various model input feature vectors and capture the additional information therein. additionally, some basic processing such is performed on the raw data such as stemming, removal of stop words [nltk_data] downloading package stopwords to c:\users\user- [nltk_data] pc\appdata\roaming\nltk_data... [nltk_data] package stopwords is already up-to-date! [nltk_data] downloading package punkt to c:\users\user- [nltk_data] pc\appdata\roaming\nltk_data... [nltk_data] package punkt is already up-to-date! the next code snippet performs the addition of context information which you should note only includes the addition of the preceding context sentence to the response and not the sentence before that as well (i.e. the model uses only one of the two additional context sentences): in [4]: import nltk nltk.download('stopwords') nltk.download('punkt') from nltk.corpus import stopwords from nltk.tokenize import word_tokenize, spacetokenizer from nltk.stem import porterstemmer in [5]: all_stopwords = stopwords.words('english') tk = spacetokenizer() ps = porterstemmer() for i in range(len(train_data_pd)): train_data_pd['response'][i]=train_data_pd['response'][i]+train_data_pd['context'][i][1] train_data_pd['response'][i]=train_data_pd['response'][i].replace('@user', '').strip().lower() text_tokens = tk.tokenize(train_data_pd['response'][i]) tokens_without_sw = [word for word in text_tokens if not word in all_stopwords] test4="""" for i in tokens_without_sw: test4 = test4 + "" ""+ps.stem(i) test4.strip() train_data_pd['response'][i]=test4 for i in range(len(test_data_pd)): test_data_pd['response'][i]=test_data_pd['response'][i]+test_data_pd['context'][i][1] test_data_pd['response'][i]=test_data_pd['response'][i].replace('@user', '').strip().lower() converted response pd data to include context data converted response to lowercase and removed stop words as well as @user converted response to stem words using portstemmer perform a random test print of the constructed response+context after nlp pre-processing to see if all is ok: define this way : 1 . desiring the good of the other ; wanting them to thrive / flourish , which means they'd get free from the at titudes you mention ; 2 . doing whatever's in your control / power to advance their good ; at least * not * wishing them ill , * n ot * hating them . ok , you ' re right , but how do you love someone who hates you , and wants you to not exist ? how do you love someone doesn ' t share basic morals ? here we turn the labelled training data text format 'sarcasm' or 'not sarcasm' into a binary 1/0 list to for easier input into the models: splitting of the project training dataset randomly the code below splits the training dataset into a random (new) training and test dataset (i.e. only using the course project training data to train and test locally so far): note that random_state is set to zero to provide a fixed seed to the random generator for consistent results text_tokens = tk.tokenize(test_data_pd['response'][i]) tokens_without_sw = [word for word in text_tokens if not word in all_stopwords] test4="""" for i in tokens_without_sw: test4 = test4 + "" ""+ps.stem(i) test4.strip() test_data_pd['response'][i]=test4 print(""converted response pd data to include context data"") print(""converted response to lowercase and removed stop words as well as @user"") print(""converted response to stem words using portstemmer"") in [6]: print(test_data_pd['response'][10]) in [7]: #define the vector of actual results: actual_results = [] for l in data_train: if l['label'] == 'sarcasm': actual_results.append(1) else: actual_results.append(0) training dataset split into this many train samples: 4750 training dataset split into this many test/validation samples: 250 final model : roberta the below code implements the simpletransformers.ai implementation of roberta and calculates a number of metrics including: 1. accuracy on both train and test sets 2. the precision, recall and f1 score on the training data 3. the precision, recall and f1 score on the test data in [8]: #getting training dataset features and labels features = train_data_pd['response'] labels = train_data_pd['label'] labels = actual_results # splitting of training data into train and test data rawdata_train, rawdata_test, rawlabels_train, rawlabels_test = train_test_split(features, labels, test_size = .05, random_state = print(""training dataset split into this many train samples:"") print(len(rawdata_train)) print(""training dataset split into this many test/validation samples:"") print(len(rawdata_test)) in [9]: #import the simpletransformers model library from simpletransformers.classification import classificationmodel,classificationargs in [10]: #create a training dataset in a panda dataframe format ready for the model train_df = pd.dataframe({ 'text': rawdata_train.str.replace('@user', '', regex=false).str.strip(), 'labels': rawlabels_train }) in [11]: #create a test dataset in a panda dataframe format ready for the model test_df = pd.dataframe({ 'text': rawdata_test.str.replace('@user', '', regex=false).str.strip(), 'labels': rawlabels_test }) set up roberta transformer model the below code establishes and imports the roberta transformer model. there are two possible options here, one including cuda support (if you have this available) and one excluding cuda support. the difference is primarily the speed of model training/estimation. the code has been set up to use or not use cuda depending on the machine where the code is being executed (this is done through the torch.cuda.is_available() function which returns true if cuda is an option). does system have cuda support? true some weights of the model checkpoint at roberta-base were not used when initializing robertaforsequenceclassification: ['lm_head.b ias', 'lm_head.dense.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.weight', 'lm_head.layer_norm.bias', 'lm_head.decoder.weigh t'] - this is expected if you are initializing robertaforsequenceclassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a bertforsequenceclassification model from a bertforpretraining model). - this is not expected if you are initializing robertaforsequenceclassification from the checkpoint of a model that you expect to be exactly identical (initializing a bertforsequenceclassification model from a bertforsequenceclassification model). some weights of robertaforsequenceclassification were not initialized from the model checkpoint at roberta-base and are newly init ialized: ['classifier.dense.weight', 'classifier.dense.bias', 'classifier.out_proj.weight', 'classifier.out_proj.bias'] you should probably train this model on a down-stream task to be able to use it for predictions and inference. perform model training (this may take some time if non cuda support): in [12]: # create a classificationmodel # for training from scratch import torch cuda_available = torch.cuda.is_available() print(""does system have cuda support?"") print(cuda_available) model = classificationmodel('roberta', 'roberta-base', use_cuda=cuda_available) # you can set class weights by using the optional # for loading my pre-trained model #model = classificationmodel('roberta', 'outputs/checkpoint-594-epoch-1', use_cuda=false) in [13]: model_args = { ""reprocess_input_data"": true, ""overwrite_output_dir"": true, ""num_train_epochs"": 1, ""model_args.lazy_loading"" : true } c:\users\user-pc\anaconda3_sp2\envs\sp 36\lib\site-packages\torch\optim\lr_scheduler.py:216: userwarning: please also save or load the state of the optimizer when saving or loading the scheduler. warnings.warn(save_state_warning, userwarning) (594, 0.5382462045936672) evaluate the model performance on the training dataset: through printing of the below output of result_train, we can see relevant accuracy, precisionm, recall and f1 scores for the model based on predictions on the training dataset. a resulting f1 score of 0.84 is observed indicating a high degree of accuracy on the training dataset for the model priediction. {'mcc': 0.6909803679892279, 'tp': 2196, 'tn': 1798, 'fp': 573, 'fn': 183, 'f1': 0.8531468531468531, 'acc': 0.840842105263158, 'prec': 0.7930660888407367, 'rec': 0.9230769230769231, 'eval_loss': 0.3543026091762966} next we need to evaluate the model performance on the test dataset (the test set randomly sampled from the trainign data...not the course test set # train the model model.train_model(train_df,args=model_args) out[13]: in [14]: # evaluate the model - training result_train, model_outputs_train, wrong_predictions_train = model.eval_model(train_df, f1=f1_score, acc=accuracy_score, prec= precision_score, rec= recall_score) in [15]: #print training result metrics result_train out[15]: for the leaderboard): from printing the below result_test metrics, we can see that the model appears to perform relatively well with an f1 score 0f 0.81...slightly lower than training set but still relatively good. this is a good result and indicative of a model that hopefully was not overfit to the training data {'mcc': 0.602253199474844, 'tp': 106, 'tn': 93, 'fp': 36, 'fn': 15, 'f1': 0.8060836501901141, 'acc': 0.796, 'prec': 0.7464788732394366, 'rec': 0.8760330578512396, 'eval_loss': 0.4268150741700083} performing predictions on project test data for livedatalab perform predictions on the project test data for the competition for upload to livedatalab for grading perform roberta predictions for project test set in [16]: # evaluate the model - testing result_test, model_outputs_test, wrong_predictions_test = model.eval_model(test_df, f1=f1_score, acc=accuracy_score, prec= precision_score, rec= recall_score) in [17]: #print out the model performance metrics on the test set result_test out[17]: in [18]: # getting training dataset features and labels features_test = test_data_pd['response'] predictions_test, raw_outputs_test = model.predict(features_test) write the predictions from the roberta model to an output text file called 'roberta_answers.txt' for storage and uploading the the course competition leaderboard: by taking the resulting output file generated above and submission to the project livedatalab scoreboard, a resulting model score of f1 = 0.737 was achieved (beating the baseline score of 0.723). a sample screenshot of the model is included below and can be seen under the username piquito2 at rank 28 in [20]: #writing the roberta classifier predictions to the output file: roberta_answers.txt y_pred = predictions_test f = open(""roberta_answers.txt"", ""w"") id_final_test = test_data_pd['id'] for i in range(len(id_final_test)): i_result = y_pred[i] pred_id = id_final_test[i] if i_result == 1: f.write(pred_id + ',' + ""sarcasm"" +""\n"") else: f.write(pred_id + ',' + ""not_sarcasm"" +""\n"") f.close() in [ ]: cs 410: text information systems final project - progress report project type: classification competition team: the classifiers november 27, 2020 praveen pathri (ppathri2@illinois.edu) steven piquito (piquito2@illinois.edu) mattias rumpf (mrumpf2@illinois.eu) references and web-sites used in this code extensively: https://towardsdatascience.com/sarcasm-detection-step-towards-sentiment-analysis- 84cb013bb6db https://simpletransformers.ai/docs/usage/ key libraries used in this project to date: as part of our project certain libraries are being used extensively. for the core traditional ml models as well as feature vector transformations: sklearn library for the implementation of the roberta pre-trained neural network architecture, the following libaries are used: huggingface transformer library simpletransformer.ai library description of work to date: to start our project off, we first performed research into the various machine learning model types that existing literature appeared to favour when it came to binary classification tasks such as sarcasm or not sarcasm detection. post this review, we decided to focus our investigation to a limited set of models which included a range of descriminitive, generative as well as neural network based options in order to cover a spectrum of the different types. for this, we implemented four models using the sklearn library being linear support vector machine, gussian naive bayes, logistic regression and random forest models. as inputs/feature vectors to these models, we utilised tfidf non-linear transformation on the training dataset from which our vocabulary was derived. some cleaning of the source text data was performed, however this was not the focus of our project at the progress report stage (this will likely be investigated under the next stops of the project to improve model performance). to compliment the traditional ml models we used from sklearn, we investigated and also implemented a first attempt at a bert/roberta model using transfer learning. it should also be noted that, for the above models, we have only used the target tweet text as a model input. we have purposely left the inclusion of the context data towards the later part of our project in order to compare and contrast model performance at this interim step. the intention is to use the performance metrics observed in our results below as a base line against which further feature engineering, model changes and the incorporation of context data will be measured. in the code below we develop the baseline ml models out of the sklearn library to test and compare to the target bert model that will be fully investigated as part of the project. models considered are: 1. learn svm 2. naive bayes 3. logistic regression 4. random forest 5. roberta progress dade - results so far as we show in the charts below, roberta, without context, pre-processing, or hypterparameter tuning, considerably outperforms the base line models. please note that the model performance measures shown in the graphs below are based currently on a split of the provided training dataset only and are not reflective of the project test set results (which may certainly differ). when measuring accuracy of predictions, the clear preferred model of the five implemented shows that roberta appears to take clearly take the lead relative to the other discriminative/generative models. certain literature sources research suggest that this may be due to the model's pre-learning of general language and syntactical structure on a large data source and stored in the neural network model structure. this however is still an area of research with no definitive answers as yet. out of the remaining models, linear svm appears to be the preferred traditional model relative to its peer models in the sklearn library. this again is consistent with the observations found in our research on the topic (i.e. lsvm appears to be the strongest discriminative model). in order to more accurately measure model performance, the precision, recall and f1 scores of the respective models are calculated and shown on the second graph. the results yield a fairly similar estimation of model performance to that of accuracy above with roberta the clear winner out of the model set. next steps given that roberta, the large pre-trained language model with transformer deep neural network architecture, is the most promising direction we will use the simpletransformers framework and try to improve the models performance over the following dimensions. 1. hyperparameter optimization 2. data preparation 3. adding context 4. roberta model selection focus will be given to the individual improvements along the above dimensions and then the possible combinations thereof in order to achieve the target base line f1 score for the competition. no further work will be performed on the other models which will be used as baselines for the final project submission expected challenges/issues to date, all the models above have been tested in livedatalab on the project test set and have yielded a variety of results with no f1 score above the base line score 0.723 as yet. this contrasts of course to the f1 scores (notably for the roberta model in particular) which appear to be higher on the training dataset split. overfitting and a lack of good generationalisation appears to be a concern currently and part of our further investigation will be to potentially address this. since we have chosen to focus on the roberta model (and its possible variants), computational power and time to sufficiently train a neural network of this size and complexity is expected to present a challenge as we progress further. various options such as the use of google colab and other cloud based solutions may need to be considered. detailed code appendix import key python libraries for this project the below cell imports all necessary key libraries used in this notebook first: in [1]: import os #import json import jsonlines import numpy as np import pandas as pd from sklearn.feature_extraction.text import tfidfvectorizer from sklearn.metrics import precision_recall_fscore_support #libraries for roberta from simpletransformers.classification import classificationmodel,classific ationargs from sklearn.metrics import f1_score from sklearn.metrics import accuracy_score from sklearn.metrics import precision_score from sklearn.metrics import recall_score importing of training and test data the following code reads both the train and test json files and imports the data into a python dictionary format: in [6]: test_file = 'data/test.jsonl' train_file = 'data/train.jsonl' data_train = [] iter = 1 with jsonlines.open(train_file) as f: for line in f.iter(): #data = json.load(line) #print(line) # or whatever else you'd like to do #print('processing training line: ' + str(iter)) iter +=1 data_train.append(line) #data = json.loads(line) #print(data) data_test = [] iter = 1 with jsonlines.open(test_file) as f: for line in f.iter(): #data = json.load(line) #print(line) # or whatever else you'd like to do #print('processing test line: ' + str(iter)) iter +=1 data_test.append(line) #data = json.loads(line) #print(data) print(""count of training data entries:"") print(len(data_train)) print(""count of test data entries:"") print(len(data_test)) count of training data entries: 5000 count of test data entries: 1800 the following code converts the training and test data dictionaries into a pandas dataframe format for use later in the sklearn ml models in [8]: train_data_pd = pd.dataframe.from_dict(data_train) test_data_pd = pd.dataframe.from_dict(data_test) print(""training and test datasets converted to pandas dataframes..."") training and test datasets converted to pandas dataframes... in this piece of code, i manually created a vocabulary list based on all words i could find in both the test and training data. this isn't really used later in the sklearn models but thought it handy if we extended the models somehow or customised the vocabulary in [9]: ##create a vocabulary and transform json data in word vectors vocabulary = [] vocabulary_size = 0 def build_vocabulary(data,vocab_size): for l in data: for w in (l['response'].strip().split("" "")): if w not in vocabulary: #print(w) vocabulary.append(w) vocab_size = vocab_size + 1 return(vocab_size) vocabulary_size = build_vocabulary(data_train,vocabulary_size) print('vocabulary size after loading training data only:') print(vocabulary_size) print(len(vocabulary)) vocabulary_size = build_vocabulary(data_test,vocabulary_size) print('vocabulary size after loading training and test data:') print(vocabulary_size) print(len(vocabulary)) vocabulary size after loading training data only: 16707 16707 vocabulary size after loading training and test data: 20446 20446 in this piece of code we built a term document matrix (as per the mp3 assignment) to represent the raw bag of words vector format of the training and test data. in [9]: ##construct the word/term vector matrix def build_term_doc_matrix(data,vocab_size): """""" construct the term-document matrix where each row represents a docu ment, and each column represents a vocabulary term. self.term_doc_matrix[i][j] is the count of term j in document i """""" term_doc_matrix = np.zeros([len(data), vocab_size]) j_count = 0 for j in vocabulary: i_count = 0 for i in data: w_count = i['response'].count(j) term_doc_matrix[i_count,j_count]=w_count i_count += 1 j_count += 1 return(term_doc_matrix) train_vector = build_term_doc_matrix(data_train,vocabulary_size) print(""length of training vector tdm matrix:"") print(len(train_vector)) print(""# of entries of training vector tdm matrix:"") print(train_vector.size) test_vector = build_term_doc_matrix(data_test,vocabulary_size) print(""length of test vector tdm matrix:"") print(len(test_vector)) print(""# of entries of test vector tdm matrix:"") print(test_vector.size) length of training vector tdm matrix: 5000 # of entries of training vector tdm matrix: 102230000 length of test vector tdm matrix: 1800 # of entries of test vector tdm matrix: 36802800 here we turn the labelled training data text format 'sarcasm' or 'not sarcasm' into a binary 1/0 list to for easier input into the models: in [12]: #define the vector of actual results: actual_results = [] for l in data_train: if l['label'] == 'sarcasm': actual_results.append(1) else: actual_results.append(0) this code imports all the sklearn model libraries required for the testing of the chosen ml models in [10]: ## import the various sklearn ml models for testing: from sklearn.model_selection import train_test_split from sklearn.metrics import confusion_matrix from sklearn.svm import linearsvc from sklearn.model_selection import cross_val_score from sklearn.naive_bayes import gaussiannb from sklearn.linear_model import logisticregression from sklearn.ensemble import randomforestclassifier creation of tfidf word vectors for training dataset in this code, i take the training data and split it onto a features and labels seperate vectors. i then use the the tfidvectorizer() function from sklearn to construct a tfidf word vector representation of the training dataset. note that i've set the max features (unique words) to 5000 here in the function while we can see our vocabulary is closer to 20,000 features. this might be worth playing with a bit later for incremental accuracy. i use the 'features2' vector (in an array format) for the models input. in [13]: # getting training dataset features and labels features = train_data_pd['response'] labels = train_data_pd['label'] labels = actual_results # getting final test dataset features as well as features_final_test = test_data_pd['response'] id_final_test = test_data_pd['id'] ## stemming our data #ps = porterstemmer() #features = features.apply(lambda x: x.split()) #features = features.apply(lambda x : ' '.join([ps.stem(word) for word in x ])) # vectorizing the data #from sklearn.feature_extraction.text import tfidfvectorizer tv = tfidfvectorizer(max_features = 5000) #tv = tfidfvectorizer() #tv = tfidfvectorizer(max_features = 5000, vocabulary = vocabulary) features2 = list(features) features2 = tv.fit_transform(features2).toarray() print(""tfidf training dataset features vector succesfully created..."") #turn the test dataset into the vectorized format as fitted to 'tv' features_final_test2 = list(features_final_test) features_final_test2 = tv.transform(features_final_test).toarray() print(""tfidf test dataset features vector succesfully created..."") tfidf training dataset features vector succesfully created... tfidf test dataset features vector succesfully created... splitting of training dataset randomly the code below splits the features2 and labels datasets into a random training and test dataset (i.e. only usinfg the course project traiing data to train and test locally so far): note that random_state is set to zero to provide a fixed seed to the random generator for consistent results in [16]: # splitting of training data into train and test data features_train, features_test, labels_train, labels_test = train_test_split (features2, labels, test_size = .05, random_state = 0) rawdata_train, rawdata_test, rawlabels_train, rawlabels_test = train_test_s plit(features, labels, test_size = .05, random_state = 0) print(""training dataset split into this many train samples:"") print(len(features_train)) print(len(rawdata_train)) print(""training dataset split into this many test/validation samples:"") print(len(features_test)) print(""# of features:"") print(len(features_train[1,:])) print(""final test dataset is this many samples:"") print(len(features_final_test2)) print(""# of features:"") print(len(features_final_test2[1,:])) training dataset split into this many train samples: 4750 4750 training dataset split into this many test/validation samples: 250 # of features: 5000 final test dataset is this many samples: 1800 # of features: 5000 model 1: linear svm the below code implements the sklearn implementation of lsvm and calculates a number of metrics including: 1. accuracy on both train and test sets 2. the precision, recall and f1 score on the training data 3. the precision, recall and f1 score on the test data in [34]: # using linear support vector classifier lsvc = linearsvc() # training the model lsvc.fit(features_train, labels_train) # getting the score of train and test data print(lsvc.score(features_train, labels_train)) # 96.04 print(lsvc.score(features_test, labels_test)) # 74.00 lsvm_train_acc= lsvc.score(features_train, labels_train) lsvm_test_acc= lsvc.score(features_test, labels_test) y_pred = lsvc.predict(features_train) y_true = labels_train lsvm_out_train = precision_recall_fscore_support(y_true, y_pred, average='b inary') print(lsvm_out_train) #96.06 y_pred = lsvc.predict(features_test) y_true = labels_test lsvm_out_test = precision_recall_fscore_support(y_true, y_pred, average='bi nary') print(lsvm_out_test) #72.80 0.960421052631579 0.74 (0.9581764951902969, 0.9630096679277007, 0.960587002096436, none) (0.7372881355932204, 0.71900826446281, 0.7280334728033473, none) model 2: guassian naive bayes the below code implements the sklearn implementation of guassian naive bayes and calculates a number of metrics including: 1. accuracy on both train and test sets 2. the precision, recall and f1 score on the training data 3. the precision, recall and f1 score on the test data in [35]: # model 2: # using gaussian naive bayes gnb = gaussiannb() # training the model gnb.fit(features_train, labels_train) # getting the score of train and test data print(gnb.score(features_train, labels_train)) # 82.96 print(gnb.score(features_test, labels_test)) # 67.6 gnb_train_acc= gnb.score(features_train, labels_train) gnb_test_acc= gnb.score(features_test, labels_test) y_pred = gnb.predict(features_train) y_true = labels_train gnb_out_train = precision_recall_fscore_support(y_true, y_pred, average='bi nary') print(gnb_out_train) # 85.47 y_pred = gnb.predict(features_test) y_true = labels_test gnb_out_test = precision_recall_fscore_support(y_true, y_pred, average='bin ary') print(gnb_out_test) #69.43 0.8296842105263158 0.676 (0.7462358845671268, 1.0, 0.8546793605173344, none) (0.6388888888888888, 0.7603305785123967, 0.6943396226415093, none) model 2: logistic regression the below code implements the sklearn implementation of logistic regression and calculates a number of metrics including: 1. accuracy on both train and test sets 2. the precision, recall and f1 score on the training data 3. the precision, recall and f1 score on the test data in [36]: # model 3: # using logistic regression lr = logisticregression() # training the model lr.fit(features_train, labels_train) # getting the score of train and test data print(lr.score(features_train, labels_train)) # 85.85 print(lr.score(features_test, labels_test)) # 72.00 lr_train_acc= lr.score(features_train, labels_train) lr_test_acc= lr.score(features_test, labels_test) y_pred = lr.predict(features_train) y_true = labels_train lr_out_train = precision_recall_fscore_support(y_true, y_pred, average='bin ary') print(lr_out_train) # 86.15 y_pred = lr.predict(features_test) y_true = labels_test lr_out_test = precision_recall_fscore_support(y_true, y_pred, average='bina ry') print(lr_out_test) # 71.07 c:\users\user-pc\anaconda3\lib\site-packages\sklearn\linear_model\logistic. py:433: futurewarning: default solver will be changed to 'lbfgs' in 0.22. s pecify a solver to silence this warning. futurewarning) 0.8585263157894737 0.72 (0.8448484848484848, 0.8789407313997478, 0.8615574783683561, none) (0.7107438016528925, 0.7107438016528925, 0.7107438016528925, none) model 4: random forest classifier the below code implements the sklearn implementation of random forest classifier and calculates a number of metrics including: 1. accuracy on both train and test sets 2. the precision, recall and f1 score on the training data 3. the precision, recall and f1 score on the test data in [37]: # model 4: # random forest classifier rfc = randomforestclassifier(n_estimators = 10, random_state = 0) # training the model rfc.fit(features_train, labels_train) # getting the score of train and test data print(rfc.score(features_train, labels_train)) # 99.09 print(rfc.score(features_test, labels_test)) # 66.8 rfc_train_acc= rfc.score(features_train, labels_train) rfc_test_acc= rfc.score(features_test, labels_test) y_pred = rfc.predict(features_train) y_true = labels_train rfc_out_train = precision_recall_fscore_support(y_true, y_pred, average='bi nary') print(rfc_out_train) # 99.09 y_pred = rfc.predict(features_test) y_true = labels_test rfc_out_test = precision_recall_fscore_support(y_true, y_pred, average='bin ary') print(rfc_out_test) # 63.11 0.9909473684210526 0.668 (0.9944961896697714, 0.987389659520807, 0.9909301835055896, none) (0.6826923076923077, 0.5867768595041323, 0.6311111111111112, none) model 5: roberta the below code implements the simpletransformers.ai implementation of roberta and calculates a number of metrics including: 1. accuracy on both train and test sets 2. the precision, recall and f1 score on the training data 3. the precision, recall and f1 score on the test data in [18]: from simpletransformers.classification import classificationmodel,classific ationargs in [19]: train_df = pd.dataframe({ 'text': rawdata_train.str.replace('@user', '', regex=false).str.strip() , 'labels': rawlabels_train }) #rawdata_train, rawdata_test, rawlabels_train, rawlabels_test in [27]: test_df = pd.dataframe({ 'text': rawdata_test.str.replace('@user', '', regex=false).str.strip(), 'labels': rawlabels_test }) in [22]: # create a classificationmodel # for training from scratch model = classificationmodel('roberta', 'roberta-base', use_cuda=false) # yo u can set class weights by using the optional weight argument # for loading my pre-trained model #model = classificationmodel('roberta', 'outputs/checkpoint-594-epoch-1', u se_cuda=false) some weights of the model checkpoint at roberta-base were not used when ini tializing robertaforsequenceclassification: ['lm_head.bias', 'lm_head.dense .weight', 'lm_head.dense.bias', 'lm_head.layer_norm.weight', 'lm_head.layer _norm.bias', 'lm_head.decoder.weight'] - this is expected if you are initializing robertaforsequenceclassification from the checkpoint of a model trained on another task or with another arch itecture (e.g. initializing a bertforsequenceclassification model from a be rtforpretraining model). - this is not expected if you are initializing robertaforsequenceclassifica tion from the checkpoint of a model that you expect to be exactly identical (initializing a bertforsequenceclassification model from a bertforsequencec lassification model). some weights of robertaforsequenceclassification were not initialized from the model checkpoint at roberta-base and are newly initialized: ['classifie r.dense.weight', 'classifier.dense.bias', 'classifier.out_proj.weight', 'cl assifier.out_proj.bias'] you should probably train this model on a down-stream task to be able to us e it for predictions and inference. in [23]: #model_args = classificationargs() #model_args.reprocess_input_data = true #model_args.overwrite_output_dir = true model_args = { ""reprocess_input_data"": true, ""overwrite_output_dir"": true } # train the model model.train_model(train_df,args=model_args) c:\users\user-pc\anaconda3\lib\site-packages\torch\optim\lr_scheduler.py:21 6: userwarning: please also save or load the state of the optimizer when sa ving or loading the scheduler. warnings.warn(save_state_warning, userwarning) out[23]: (594, 0.539390764095717) in [24]: # evaluate the model - training result_train, model_outputs_train, wrong_predictions_train = model.eval_mod el(train_df, f1=f1_score, acc=accuracy_sc ore, prec= precision _score, rec= recall_sco re) in [26]: result_train out[26]: {'mcc': 0.7212081013757768, 'tp': 2116, 'tn': 1969, 'fp': 402, 'fn': 263, 'f1': 0.8642025730038799, 'acc': 0.86, 'prec': 0.840349483717236, 'rec': 0.8894493484657419, 'eval_loss': 0.325839846517251} in [40]: roberta_train_result=result_train roberta_train_result['acc'] out[40]: 0.8397894736842105 in [28]: # evaluate the model - training result_test, model_outputs_test, wrong_predictions_test = model.eval_model( test_df, f1=f1_score, acc=accuracy_sc ore, prec= precision _score, rec= recall_sco re) in [29]: roberta_test_result=result_test roberta_test_result['acc'] result_test out[29]: {'mcc': 0.6238264579949548, 'tp': 106, 'tn': 96, 'fp': 33, 'fn': 15, 'f1': 0.8153846153846155, 'acc': 0.808, 'prec': 0.762589928057554, 'rec': 0.8760330578512396, 'eval_loss': 0.4293329161591828} performing predictions on project test data for livedatalab perform predictions on the project test data for the competition for upload to livedatalab for grading in [38]: #writing the lsvm predictions to the output file: lsvm_answers.txt y_pred = lsvc.predict(features_final_test2) f = open(""lsvm_answers.txt"", ""w"") for i in range(len(id_final_test)): i_result = y_pred[i] pred_id = id_final_test[i] if i_result == 1: f.write(pred_id + ',' + ""sarcasm"" +""\n"") else: f.write(pred_id + ',' + ""not_sarcasm"" +""\n"") f.close() #writing the guassian nb predictions to the output file: gnb_answers.txt y_pred = gnb.predict(features_final_test2) f = open(""gnb_answers.txt"", ""w"") for i in range(len(id_final_test)): i_result = y_pred[i] pred_id = id_final_test[i] if i_result == 1: f.write(pred_id + ',' + ""sarcasm"" +""\n"") else: f.write(pred_id + ',' + ""not_sarcasm"" +""\n"") f.close() #writing the linear regression predictions to the output file: lr_answers.t xt y_pred = lr.predict(features_final_test2) f = open(""lr_answers.txt"", ""w"") for i in range(len(id_final_test)): i_result = y_pred[i] pred_id = id_final_test[i] if i_result == 1: f.write(pred_id + ',' + ""sarcasm"" +""\n"") else: f.write(pred_id + ',' + ""not_sarcasm"" +""\n"") f.close() #writing the random forest classifier predictions to the output file: rfc_a nswers.txt y_pred = rfc.predict(features_final_test2) f = open(""rfc_answers.txt"", ""w"") for i in range(len(id_final_test)): i_result = y_pred[i] pred_id = id_final_test[i] if i_result == 1: f.write(pred_id + ',' + ""sarcasm"" +""\n"") else: f.write(pred_id + ',' + ""not_sarcasm"" +""\n"") f.close() comparison of baseline models in [41]: import matplotlib.pyplot as plt; plt.rcdefaults() #import numpy as np import matplotlib.pyplot as plt #plot accuracy on training set for each model objects = ('lsvm', 'gussian nb', 'linear regression', 'random forest','robe rta') y_pos = np.arange(len(objects)) performance = [lsvm_train_acc,gnb_train_acc,lr_train_acc,rfc_train_acc,robe rta_train_result['acc']] plt.bar(y_pos, performance, align='center', alpha=0.5) plt.xticks(y_pos, objects) plt.ylabel('% accuracy') plt.title('% accuracy on training set') plt.show() #plot accuracy on test set for each model objects = ('lsvm', 'gussian nb', 'linear regression', 'random forest','robe rta') y_pos = np.arange(len(objects)) performance = [lsvm_test_acc,gnb_test_acc,lr_test_acc,rfc_test_acc,roberta_ test_result['acc']] plt.bar(y_pos, performance, align='center', alpha=0.5) plt.xticks(y_pos, objects) plt.ylabel('% accuracy') plt.title('% accuracy on test set') plt.savefig('acc_test.png') plt.show() # plot the precision, recall and f1 score on the test n_groups = 5 prec_data = (lsvm_out_test[0],gnb_out_test[0],lr_out_test[0],rfc_out_test[0 ],roberta_test_result['prec']) rec_data = (lsvm_out_test[1],gnb_out_test[1],lr_out_test[1],rfc_out_test[1] ,roberta_test_result['rec']) f1_data = (lsvm_out_test[2],gnb_out_test[2],lr_out_test[2],rfc_out_test[2], roberta_test_result['f1']) #gnb_data = (gnb_out_test(1:3)) #lr_data = (lr_out_test(1:3)) #rfc_data = (rfc_out_test(1:3)) # create plot fig, ax = plt.subplots() index = np.arange(n_groups) bar_width = 0.25 opacity = 0.8 rects1 = plt.bar(index, prec_data, bar_width, alpha=opacity, color='b', label='precision') rects2 = plt.bar(index + bar_width, rec_data, bar_width, alpha=opacity, color='g', label='recall') rects3 = plt.bar(index + 2*bar_width, f1_data, bar_width, alpha=opacity, color='r', label='f1 score') plt.xlabel('ml model') plt.ylabel('scores') plt.title('precision, recall and f1 score per model') plt.xticks(index + bar_width, ('lsvm', 'gnb', 'lr', 'rfc','roberta')) plt.legend() plt.tight_layout() plt.savefig('pr_rec_f1.png') plt.show() in [ ] cs 410: text information systems final project - proposal team: the classifiers october 22, 2020 members praveen pathri (ppathri2@illinois.edu) steven piquito (piquito2@illinois.edu) mattias rumpf (mrumpf2@illinois.eu) - captain project topic option 4: text classification competition are you prepared to learn state-of-the-art neural network classifiers? all team members agree to put it in the necessary effort to learn applying state-of-the-art neural network classifiers to compete in completing the competition's task. name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods (in parentheses). scipy (experienced) keras (intermediate) tensorflow (intermediate) pytorch (intermediate) metapy (intermediate) scikit-learn (experienced) lstm (beginner) nltk (beginner) bert (beginner) xlnet (none) gpt2 (none) h20.gbm (none) h20.automl (none) which programming language do you plan to use? python cs 410 text information systems final course project team: the classifiers members praveen pathri (ppathri2@illinois.edu) steven piquito (piquito2@illinois.edu) mattias rumpf (mrumpf2@illinois.eu) - captain project topic option 4: text classification competition - sarcasm detection on twitter data project setup and individual contributions the submitted work represents a well balanced team effort: each of the members spend considerable time on researching potential models and frameworks. praveen and steven worked on and tested baseline models like svm and random forest, matthias focused on pre-trained models. when bert type models turned out to be the most promising, we jointly concentrated on improving the performance of a fine tuned roberta model. praveen looked into improving accuracy via data preparation, steven added context, matthias experimented with hyperparameter tuning. what we do we are fine tuning roberta. roberta, a neural language model that extends bert and was pre-trained on even more massive amounts of text data, e.g. wikipedia and news articles with a dynamically chaning masking pattern for the missing word prediction task. we have experimented with basic nlp models such as svm, random forest, naive bayes (see our progress report in appendix i) we do employ some basic data cleaning like stop word removal, further experimentation into data preparation has not improved model performance. we simply concatenated all context to the twitter response that was available. we experimented with hyperparameter tuning on google colab (to exploit their gpu offerings) and found a learning rate of 2.741032760877178e-05 and number of epochs equal 4 for fine-tuning to allow us generating predictions that beat the baseline (see appendix ii and iii). result we beat the baseline using the fine-tuned roberta model (user mattblack): running our code and replicating results screencast tutorial you can follow the screen cast presentation, available at * https://youtu.be/k9cpy_nm3vs install instructions to install all required libraries we assume that users have a recent install of the anaconda distribution with python <=3.7 if you run into trouble feel free to contact use (preferably matthias: mrumpf2@illinois.edu) instructions for windows users (for other os adapt accordingly) * copy / clone the project repository to your working directory e.g.: c:\uiuc\textmining\finalprojectsubmission * open anaconda navigator and create a new python 3.7 environment * install and open the anaconda app ""cmd prompt"", check that the newly created environment is activated * go to https://pytorch.org/get-started/locally/ and get your install command e.g. conda install pytorch torchvision torchaudio cudatoolkit=10.2 -c pytorch or without cpu conda install pytorch torchvision torchaudio cpuonly -c pytorch * run the install command in the cmd prompt * enter in cmd prompt: pip install simpletransformers jsonlines pandas transformers nltk torch * cd to your working directory e.g.: cd c:\uiuc\textmining\finalprojectsubmission * then start notebooks by entering in cmd prompt: jupyter notebook main documents project report team the classifiers - twitter sarcasm detection (with a fine-tuned roberta model) we use roberta as our workhorse model, see https://paperswithcode.com/method/roberta to replicate our results run the following notebook * jupyter notebook see 1. project report and classifier code team the classifiers - twitter sarcasm detection.ipynb * pdf see 1. project report and classifier code team the classifiers - twitter sarcasm detection.pdf appendix i.the progress report - initial experimentation jupyter notebook see appendix i.the progress report - initial experimentation.ipynb pdf see appendix i.the progress report - initial experimentation.pdf appendix ii. google colab hyperparameter tuning use colab at https://colab.research.google.com/ if you want to test the code, note that you need to upload the data folder to your google drive, replace folder paths, and connect to google drive from with the colab notebook * jupyter notebook see appendix ii. hyperparameter tuning.ipynb * pdf see appendix ii. hyperparameter tuning.pdf appendix iii. google colab roberta training and sarcasm prediction use this code if you don't have a gpu to speed up training the model and retrieving the prediction results use colab at https://colab.research.google.com/ if you want to test the code, note that you need to upload the data folder to your google drive, replace folder paths, and connect to google drive from with the colab notebook * jupyter notebook see appendix iii. roberta training and sarcasm prediction.ipynb * pdf see appendix iii. roberta training and sarcasm prediction.pdf"	['cs', 'text', 'information', 'systems', 'final', 'project', 'report', 'type', 'classification', 'competition', 'team', 'classifiers', 'november', 'praveen', 'pathri', 'ppathriillinoisedu', 'steven', 'piquito', 'piquitoillinoisedu', 'mattias', 'rumpf', 'mrumpfillinoiseu', 'references', 'websites', 'used', 'code', 'extensively', 'httpstowardsdatasciencecomsarcasmdetectionsteptowardssentimentanalysiscbbbdb', 'httpssimpletransformersaidocsusage', 'key', 'libraries', 'date', 'part', 'certain', 'core', 'traditional', 'ml', 'models', 'well', 'feature', 'vector', 'transformations', 'sklearn', 'library', 'implementation', 'roberta', 'pretrained', 'neural', 'network', 'architecture', 'following', 'libaries', 'huggingface', 'transformer', 'simpletransformerai', 'description', 'work', 'notebook', 'explains', 'next', 'steps', 'followed', 'post', 'completion', 'progress', 'seen', 'read', 'follow', 'piece', 'total', 'documentation', 'covered', 'notebooks', 'additional', 'descriptions', 'testing', 'performedoptimisation', 'focuses', 'chosen', 'model', 'designated', 'investigation', 'use', 'leaderboard', 'optimisation', 'experimentation', 'described', 'another', 'document', 'however', 'creation', 'learning', 'existing', 'widely', 'available', 'simpletransformersai', 'engineering', 'form', 'stemming', 'stop', 'word', 'removal', 'general', 'cleaning', 'input', 'data', 'inclusion', 'context', 'enhance', 'performance', 'commentary', 'found', 'snippets', 'working', 'import', 'python', 'cell', 'installs', 'necessary', 'first', 'already', 'installed', 'imports', 'pip', 'install', 'jsonlines', 'pandas', 'transformers', 'nltk', 'torch', 'os', 'numpy', 'np', 'pd', 'sklearnfeature_extractiontext', 'tfidfvectorizer', 'sklearnmetrics', 'precision_recall_fscore_support', 'sklearnmodel_selection', 'train_test_split', 'confusion_matrix', 'simpletransformers', 'importing', 'training', 'test', 'reads', 'train', 'json', 'files', 'dictionary', 'format', 'count', 'entries', 'converts', 'dictionaries', 'dataframe', 'later', 'datasets', 'converted', 'dataframes', 'simpletransformersclassification', 'classificationmodelclassificationargs', 'f_score', 'accuracy_score', 'precision_score', 'recall_score', 'test_file', 'datatestjsonl', 'train_file', 'datatrainjsonl', 'data_train', 'iter', 'jsonlinesopentrain_file', 'f', 'line', 'fiter', 'data_trainappendline', 'data_test', 'jsonlinesopentest_file', 'data_testappendline', 'printcount', 'printlendata_train', 'printlendata_test', 'train_data_pd', 'pddataframefrom_dictdata_train', 'test_data_pd', 'pddataframefrom_dictdata_test', 'printtraining', 'adding', 'basic', 'nlp', 'processing', 'append', 'responsetext', 'linearly', 'add', 'various', 'vectors', 'capture', 'therein', 'additionally', 'performed', 'raw', 'words', 'nltk_data', 'downloading', 'package', 'stopwords', 'cusersuser', 'pcappdataroamingnltk_data', 'uptodate', 'punkt', 'snippet', 'performs', 'addition', 'note', 'includes', 'preceding', 'sentence', 'response', 'ie', 'uses', 'one', 'two', 'sentences', 'nltkdownloadstopwords', 'nltkdownloadpunkt', 'nltkcorpus', 'nltktokenize', 'word_tokenize', 'spacetokenizer', 'nltkstem', 'porterstemmer', 'all_stopwords', 'stopwordswordsenglish', 'tk', 'ps', 'rangelentrain_data_pd', 'train_data_pdresponseitrain_data_pdresponseitrain_data_pdcontexti', 'train_data_pdresponseitrain_data_pdresponseireplaceuser', 'striplower', 'text_tokens', 'tktokenizetrain_data_pdresponsei', 'tokens_without_sw', 'psstemi', 'teststrip', 'train_data_pdresponseitest', 'rangelentest_data_pd', 'test_data_pdresponseitest_data_pdresponseitest_data_pdcontexti', 'test_data_pdresponseitest_data_pdresponseireplaceuser', 'include', 'lowercase', 'removed', 'user', 'stem', 'using', 'portstemmer', 'perform', 'random', 'print', 'constructed', 'responsecontext', 'preprocessing', 'see', 'ok', 'define', 'way', 'desiring', 'good', 'wanting', 'thrive', 'flourish', 'means', 'theyd', 'get', 'free', 'titudes', 'mention', 'whatevers', 'control', 'power', 'advance', 'least', 'wishing', 'ill', 'n', 'ot', 'hating', 'right', 'love', 'someone', 'hates', 'wants', 'exist', 'share', 'morals', 'turn', 'labelled', 'sarcasm', 'binary', 'list', 'easier', 'splitting', 'dataset', 'randomly', 'splits', 'new', 'course', 'locally', 'far', 'random_state', 'set', 'zero', 'provide', 'fixed', 'seed', 'generator', 'consistent', 'results', 'tktokenizetest_data_pdresponsei', 'test_data_pdresponseitest', 'printconverted', 'printtest_data_pdresponse', 'actual', 'actual_results', 'l', 'llabel', 'actual_resultsappend', 'else', 'split', 'many', 'samples', 'testvalidation', 'implements', 'calculates', 'number', 'metrics', 'including', 'accuracy', 'sets', 'precision', 'recall', 'score', 'getting', 'features', 'labels', 'train_data_pdresponse', 'train_data_pdlabel', 'rawdata_train', 'rawdata_test', 'rawlabels_train', 'rawlabels_test', 'train_test_splitfeatures', 'test_size', 'printlenrawdata_train', 'printlenrawdata_test', 'create', 'panda', 'ready', 'train_df', 'pddataframe', 'rawdata_trainstrreplaceuser', 'regexfalsestrstrip', 'test_df', 'rawdata_teststrreplaceuser', 'establishes', 'possible', 'options', 'cuda', 'support', 'excluding', 'difference', 'primarily', 'speed', 'trainingestimation', 'depending', 'machine', 'executed', 'done', 'torchcudais_available', 'function', 'returns', 'true', 'option', 'system', 'weights', 'checkpoint', 'robertabase', 'initializing', 'robertaforsequenceclassification', 'lm_headb', 'ias', 'lm_headdenseweight', 'lm_headdensebias', 'lm_headlayer_normweight', 'lm_headlayer_normbias', 'lm_headdecoderweigh', 'expected', 'trained', 'task', 'eg', 'bertforsequenceclassification', 'bertforpretraining', 'expect', 'exactly', 'identical', 'initialized', 'newly', 'init', 'ialized', 'classifierdenseweight', 'classifierdensebias', 'classifierout_projweight', 'classifierout_projbias', 'probably', 'downstream', 'able', 'predictions', 'inference', 'may', 'take', 'time', 'non', 'classificationmodel', 'scratch', 'cuda_available', 'printdoes', 'printcuda_available', 'classificationmodelroberta', 'use_cudacuda_available', 'class', 'optional', 'loading', 'outputscheckpointepoch', 'use_cudafalse', 'model_args', 'reprocess_input_data', 'overwrite_output_dir', 'num_train_epochs', 'model_argslazy_loading', 'cusersuserpcanaconda_spenvssp', 'libsitepackagestorchoptimlr_schedulerpy', 'userwarning', 'please', 'also', 'save', 'load', 'state', 'optimizer', 'saving', 'scheduler', 'warningswarnsave_state_warning', 'evaluate', 'printing', 'output', 'result_train', 'relevant', 'precisionm', 'scores', 'based', 'resulting', 'observed', 'indicating', 'high', 'degree', 'priediction', 'mcc', 'tp', 'tn', 'fp', 'fn', 'acc', 'prec', 'rec', 'eval_loss', 'need', 'sampled', 'trainign', 'datanot', 'modeltrain_modeltrain_dfargsmodel_args', 'model_outputs_train', 'wrong_predictions_train', 'modeleval_modeltrain_df', 'ff_score', 'accaccuracy_score', 'result', 'result_test', 'appears', 'relatively', 'slightly', 'lower', 'still', 'indicative', 'hopefully', 'overfit', 'performing', 'livedatalab', 'upload', 'grading', 'model_outputs_test', 'wrong_predictions_test', 'modeleval_modeltest_df', 'features_test', 'test_data_pdresponse', 'predictions_test', 'raw_outputs_test', 'modelpredictfeatures_test', 'write', 'file', 'called', 'roberta_answerstxt', 'storage', 'uploading', 'taking', 'generated', 'submission', 'scoreboard', 'achieved', 'beating', 'baseline', 'sample', 'screenshot', 'included', 'username', 'rank', 'writing', 'classifier', 'y_pred', 'openroberta_answerstxt', 'w', 'id_final_test', 'test_data_pdid', 'rangelenid_final_test', 'i_result', 'y_predi', 'pred_id', 'id_final_testi', 'fwritepred_id', 'not_sarcasm', 'fclose', 'httpstowardsdatasciencecomsarcasmdetectionsteptowardssentimentanalysis', 'cbbbdb', 'start', 'research', 'types', 'literature', 'appeared', 'favour', 'came', 'tasks', 'detection', 'review', 'decided', 'focus', 'limited', 'range', 'descriminitive', 'generative', 'order', 'cover', 'spectrum', 'different', 'implemented', 'four', 'linear', 'gussian', 'naive', 'bayes', 'logistic', 'regression', 'forest', 'inputsfeature', 'utilised', 'tfidf', 'nonlinear', 'transformation', 'vocabulary', 'derived', 'source', 'stage', 'likely', 'investigated', 'stops', 'improve', 'compliment', 'attempt', 'bertroberta', 'transfer', 'noted', 'target', 'tweet', 'purposely', 'left', 'towards', 'compare', 'contrast', 'interim', 'step', 'intention', 'base', 'changes', 'incorporation', 'measured', 'develop', 'bert', 'fully', 'considered', 'learn', 'svm', 'dade', 'show', 'charts', 'without', 'hypterparameter', 'tuning', 'considerably', 'outperforms', 'measures', 'shown', 'graphs', 'currently', 'provided', 'reflective', 'certainly', 'differ', 'measuring', 'clear', 'preferred', 'five', 'shows', 'clearly', 'lead', 'relative', 'discriminativegenerative', 'sources', 'suggest', 'due', 'prelearning', 'language', 'syntactical', 'structure', 'large', 'stored', 'area', 'definitive', 'answers', 'yet', 'remaining', 'peer', 'observations', 'topic', 'lsvm', 'strongest', 'discriminative', 'accurately', 'measure', 'respective', 'calculated', 'second', 'graph', 'yield', 'fairly', 'similar', 'estimation', 'winner', 'given', 'deep', 'promising', 'direction', 'framework', 'try', 'dimensions', 'hyperparameter', 'optimization', 'preparation', 'selection', 'individual', 'improvements', 'along', 'combinations', 'thereof', 'achieve', 'baselines', 'challengesissues', 'tested', 'yielded', 'variety', 'contrasts', 'notably', 'particular', 'appear', 'higher', 'overfitting', 'lack', 'generationalisation', 'concern', 'potentially', 'address', 'since', 'variants', 'computational', 'sufficiently', 'size', 'complexity', 'present', 'challenge', 'google', 'colab', 'cloud', 'solutions', 'detailed', 'appendix', 'classificationmodelclassific', 'ationargs', 'jsonloadline', 'printline', 'whatever', 'youd', 'like', 'printprocessing', 'striter', 'jsonloadsline', 'printdata', 'manually', 'created', 'could', 'find', 'isnt', 'really', 'thought', 'handy', 'extended', 'somehow', 'customised', 'transform', 'vocabulary_size', 'def', 'build_vocabularydatavocab_size', 'lresponsestripsplit', 'printw', 'vocabularyappendw', 'vocab_size', 'returnvocab_size', 'build_vocabularydata_trainvocabulary_size', 'printvocabulary', 'printvocabulary_size', 'printlenvocabulary', 'build_vocabularydata_testvocabulary_size', 'built', 'term', 'matrix', 'per', 'mp', 'assignment', 'represent', 'bag', 'construct', 'wordterm', 'build_term_doc_matrixdatavocab_size', 'termdocument', 'row', 'represents', 'docu', 'ment', 'column', 'selfterm_doc_matrixij', 'j', 'term_doc_matrix', 'npzeroslendata', 'j_count', 'i_count', 'w_count', 'iresponsecountj', 'term_doc_matrixi_countj_countw_count', 'returnterm_doc_matrix', 'train_vector', 'build_term_doc_matrixdata_trainvocabulary_size', 'printlength', 'tdm', 'printlentrain_vector', 'printtrain_vectorsize', 'test_vector', 'build_term_doc_matrixdata_testvocabulary_size', 'printlentest_vector', 'printtest_vectorsize', 'length', 'required', 'sklearnsvm', 'linearsvc', 'cross_val_score', 'sklearnnaive_bayes', 'gaussiannb', 'sklearnlinear_model', 'logisticregression', 'sklearnensemble', 'randomforestclassifier', 'onto', 'seperate', 'tfidvectorizer', 'representation', 'ive', 'max', 'unique', 'closer', 'might', 'worth', 'playing', 'bit', 'incremental', 'array', 'features_final_test', 'featuresapplylambda', 'x', 'xsplit', 'joinpsstemword', 'vectorizing', 'tv', 'tfidfvectorizermax_features', 'listfeatures', 'tvfit_transformfeaturestoarray', 'printtfidf', 'succesfully', 'vectorized', 'fitted', 'listfeatures_final_test', 'tvtransformfeatures_final_testtoarray', 'usinfg', 'traiing', 'features_train', 'labels_train', 'labels_test', 'train_test_s', 'plitfeatures', 'printlenfeatures_train', 'printlenfeatures_test', 'printfinal', 'printlenfeatures_final_test', 'lsvc', 'lsvcfitfeatures_train', 'printlsvcscorefeatures_train', 'printlsvcscorefeatures_test', 'lsvm_train_acc', 'lsvcscorefeatures_train', 'lsvm_test_acc', 'lsvcscorefeatures_test', 'lsvcpredictfeatures_train', 'y_true', 'lsvm_out_train', 'precision_recall_fscore_supporty_true', 'averageb', 'inary', 'printlsvm_out_train', 'lsvcpredictfeatures_test', 'lsvm_out_test', 'averagebi', 'nary', 'printlsvm_out_test', 'none', 'guassian', 'gaussian', 'gnb', 'gnbfitfeatures_train', 'printgnbscorefeatures_train', 'printgnbscorefeatures_test', 'gnb_train_acc', 'gnbscorefeatures_train', 'gnb_test_acc', 'gnbscorefeatures_test', 'gnbpredictfeatures_train', 'gnb_out_train', 'printgnb_out_train', 'gnbpredictfeatures_test', 'gnb_out_test', 'averagebin', 'ary', 'printgnb_out_test', 'lr', 'lrfitfeatures_train', 'printlrscorefeatures_train', 'printlrscorefeatures_test', 'lr_train_acc', 'lrscorefeatures_train', 'lr_test_acc', 'lrscorefeatures_test', 'lrpredictfeatures_train', 'lr_out_train', 'printlr_out_train', 'lrpredictfeatures_test', 'lr_out_test', 'averagebina', 'ry', 'printlr_out_test', 'cusersuserpcanacondalibsitepackagessklearnlinear_modellogistic', 'py', 'futurewarning', 'default', 'solver', 'changed', 'lbfgs', 'pecify', 'silence', 'warning', 'rfc', 'randomforestclassifiern_estimators', 'rfcfitfeatures_train', 'printrfcscorefeatures_train', 'printrfcscorefeatures_test', 'rfc_train_acc', 'rfcscorefeatures_train', 'rfc_test_acc', 'rfcscorefeatures_test', 'rfcpredictfeatures_train', 'rfc_out_train', 'printrfc_out_train', 'rfcpredictfeatures_test', 'rfc_out_test', 'printrfc_out_test', 'yo', 'u', 'weight', 'argument', 'se_cudafalse', 'ini', 'tializing', 'lm_headbias', 'lm_headdense', 'lm_headlayer', '_normbias', 'lm_headdecoderweight', 'arch', 'itecture', 'rtforpretraining', 'robertaforsequenceclassifica', 'tion', 'bertforsequencec', 'lassification', 'classifie', 'rdenseweight', 'cl', 'assifierout_projbias', 'us', 'e', 'classificationargs', 'model_argsreprocess_input_data', 'model_argsoverwrite_output_dir', 'cusersuserpcanacondalibsitepackagestorchoptimlr_schedulerpy', 'sa', 'ving', 'modeleval_mod', 'eltrain_df', 'accaccuracy_sc', 'ore', '_score', 'recall_sco', 'roberta_train_resultresult_train', 'roberta_train_resultacc', 'modeleval_model', 'roberta_test_resultresult_test', 'roberta_test_resultacc', 'lsvm_answerstxt', 'lsvcpredictfeatures_final_test', 'openlsvm_answerstxt', 'nb', 'gnb_answerstxt', 'gnbpredictfeatures_final_test', 'opengnb_answerstxt', 'lr_answerst', 'xt', 'lrpredictfeatures_final_test', 'openlr_answerstxt', 'rfc_a', 'nswerstxt', 'rfcpredictfeatures_final_test', 'openrfc_answerstxt', 'comparison', 'matplotlibpyplot', 'plt', 'pltrcdefaults', 'plot', 'objects', 'forestrobe', 'rta', 'y_pos', 'nparangelenobjects', 'lsvm_train_accgnb_train_acclr_train_accrfc_train_accrobe', 'rta_train_resultacc', 'pltbary_pos', 'aligncenter', 'alpha', 'pltxticksy_pos', 'pltylabel', 'plttitle', 'pltshow', 'lsvm_test_accgnb_test_acclr_test_accrfc_test_accroberta_', 'test_resultacc', 'pltsavefigacc_testpng', 'n_groups', 'prec_data', 'lsvm_out_testgnb_out_testlr_out_testrfc_out_test', 'roberta_test_resultprec', 'rec_data', 'roberta_test_resultrec', 'f_data', 'roberta_test_resultf', 'gnb_data', 'lr_data', 'rfc_data', 'fig', 'ax', 'pltsubplots', 'index', 'nparangen_groups', 'bar_width', 'opacity', 'rects', 'pltbarindex', 'alphaopacity', 'colorb', 'labelprecision', 'colorg', 'labelrecall', 'colorr', 'labelf', 'pltxlabelml', 'pltylabelscores', 'plttitleprecision', 'pltxticksindex', 'rfcroberta', 'pltlegend', 'plttight_layout', 'pltsavefigpr_rec_fpng', 'proposal', 'october', 'members', 'captain', 'prepared', 'stateoftheart', 'agree', 'put', 'effort', 'applying', 'compete', 'completing', 'competitions', 'name', 'frameworks', 'heard', 'describe', 'prior', 'experience', 'methods', 'parentheses', 'scipy', 'experienced', 'keras', 'intermediate', 'tensorflow', 'pytorch', 'metapy', 'scikitlearn', 'lstm', 'beginner', 'xlnet', 'gpt', 'hgbm', 'hautoml', 'programming', 'plan', 'twitter', 'setup', 'contributions', 'submitted', 'balanced', 'spend', 'considerable', 'researching', 'potential', 'worked', 'matthias', 'focused', 'turned', 'jointly', 'concentrated', 'improving', 'fine', 'tuned', 'looked', 'via', 'added', 'experimented', 'extends', 'even', 'massive', 'amounts', 'wikipedia', 'news', 'articles', 'dynamically', 'chaning', 'masking', 'pattern', 'missing', 'prediction', 'employ', 'improved', 'simply', 'concatenated', 'exploit', 'gpu', 'offerings', 'rate', 'epochs', 'equal', 'finetuning', 'allow', 'generating', 'beat', 'ii', 'iii', 'finetuned', 'mattblack', 'running', 'replicating', 'screencast', 'tutorial', 'screen', 'cast', 'presentation', 'httpsyoutubekcpy_nmvs', 'instructions', 'assume', 'users', 'recent', 'anaconda', 'distribution', 'run', 'trouble', 'feel', 'contact', 'preferably', 'mrumpfillinoisedu', 'windows', 'adapt', 'accordingly', 'copy', 'clone', 'repository', 'directory', 'cuiuctextminingfinalprojectsubmission', 'open', 'navigator', 'environment', 'app', 'cmd', 'prompt', 'check', 'activated', 'go', 'httpspytorchorggetstartedlocally', 'command', 'conda', 'torchvision', 'torchaudio', 'cudatoolkit', 'c', 'cpu', 'cpuonly', 'enter', 'cd', 'entering', 'jupyter', 'main', 'documents', 'workhorse', 'httpspaperswithcodecommethodroberta', 'replicate', 'detectionipynb', 'pdf', 'detectionpdf', 'ithe', 'initial', 'experimentationipynb', 'experimentationpdf', 'httpscolabresearchgooglecom', 'want', 'folder', 'drive', 'replace', 'paths', 'connect', 'tuningipynb', 'tuningpdf', 'dont', 'retrieving', 'predictionipynb', 'predictionpdf']
https://github.com/mihiryerande/CS-410-Fall-2020-Anime-Text-Analytics	anime text analytics this is a course project for uiuc cs 410: text information systems (fall 2020). to view the output of this project, please visit https://animetextanalytics.azurewebsites.net. a video presentation of the work done can be viewed here: https://tinyurl.com/animetextanalytics team produced by team nani (he  !?): * karan bokil (karanb2) @bokilenator * mihir yerande (yerande2) @mihiryerande explanation anime shows are categorized into various genres, such as shonen or mecha, for example. this project attempts to use the latent dirichlet allocation (lda) algorithm to determine such genres from text data. lda works by training a model on input text data to obtain topics and topic coverages. we use text data, scraped and cleaned, from myanimelist.com, where there are short synopses of anime shows. the topics produced by our lda model are referred to as lda genres. each genre is a probabilistic distribution over words, which would ideally reflect a genre understandable to humans. in addition, each anime show can be assigned a topic coverage (i.e. genre breakdown). for example, we might determine that a show is 71% shonen and 29% mecha. website the output of the project has been published to a website, which can be found here: https://animetextanalytics.azurewebsites.net lda implementation this section steps through the implementation of the project from start to finish. the lda code and output is all stored in the source_code directory. scraper the raw text data is scraped from myanimelist.net, specifically from the list beginning here. the output has already been written to scraped.jl. the scraper is implemented in python using the scrapy framework. see animespider.py. to run the scraper, navigate to the containing directory, and run the following command: scrapy runspider animespider.py -o scraped.jl the spider's log will automatically write to spider_log.txt, in the same directory. lda input in order to run lda, the raw text must be tokenized and cleaned. the output of this step has already been written to lda_input.jl. see write_lda_input.py for the implementation. to run the text cleaning, navigate to the containing directory, and run the following command: python write_lda_input.py print-out should appear in the console as each show's raw text is cleaned. lda model after cleaning the raw text, we can now train our lda model. the trained lda model has already been saved to lda_model. see write_lda_model.ipynb for further explanation. lda output after training the lda model, we can obtain the desired output about genres. the output of this step has already been written to lda_output. see write_lda_output.ipynb for further explanation. lda distances after obtaining the genre-breakdowns, we can determine similarity between anime shows based on their respective breakdowns. we use the hellinger distance utilities provided in gensim, as described here. the output of this step has already been written to lda_distance. see write_lda_distance.ipynb for further explanation. database due to the size of our dataset, we did not feel processing just in time from a website performance perspective would be good. thus, we preprocessed most of the data from the aforementioned steps and converted into a relational database for easy access by the web framework. after attempting to utilize azure cosmosdb as well as azure sql, we ended up choosing to go with a sqlite database because it is light, easy to iterate testing on, and can easily be included as part of the repo, being only 5mb and self contained. our attempts at using cosmosdb and azure sql were hindered by slow upload times, as we had to parse from json and upload around 50,000 records, which would have taken several hours. the azure stack would have provided us some ecosystem advantages such as use of their bm25 ranking solution, azure cognitive search, but nevertheless, we were able to find a different avenue for full text search. the database can be initialized simply by running python init.py from the root of the repo. this file will delete the former tables, create the new tables, parse the json and populate the database alongside the relationships between the various tables. text retrieval model after researching different libraries for text retrieval models, we settled on utilizing the msearch library, as it has the most integrated support with our web framework flask. msearch serves as a wrapper around whoosh, a pure python search engine library that capitalizes on okapi bm25 ranking function. within app.py, we have marked fields in the various tables with __searchable__ and created a custom route and view to collect and see the results of a query. the search thus exceeds the utility of normal database queries, facilitating results across different tables with ranking. the inverted index is created during the data population phase in init.py. web development and hosting the website is made using flask, a lightweight web framework in python. it utilizes a standard mvc architecture and communicates cleanly with the database via sqlalchemy. the site is hosted and deployed on microsoft azure using azure web apps. the frontend javascript and css components is all developed utilizing the materialize framework. routing and models are all present in app.py, see comments for details. the application can be run locally via python 3.8 simply by running pip install -r requirements.txt and python app.py. further documentation can be found at https://animetextanalytics.azurewebsites.net/documentation.	['anime', 'text', 'analytics', 'course', 'project', 'uiuc', 'cs', 'information', 'systems', 'fall', 'view', 'output', 'please', 'visit', 'httpsanimetextanalyticsazurewebsitesnet', 'video', 'presentation', 'work', 'done', 'viewed', 'httpstinyurlcomanimetextanalytics', 'team', 'produced', 'nani', 'karan', 'bokil', 'karanb', 'bokilenator', 'mihir', 'yerande', 'mihiryerande', 'explanation', 'shows', 'categorized', 'various', 'genres', 'shonen', 'mecha', 'example', 'attempts', 'use', 'latent', 'dirichlet', 'allocation', 'lda', 'algorithm', 'determine', 'data', 'works', 'training', 'model', 'input', 'obtain', 'topics', 'topic', 'coverages', 'scraped', 'cleaned', 'myanimelistcom', 'short', 'synopses', 'referred', 'genre', 'probabilistic', 'distribution', 'words', 'would', 'ideally', 'reflect', 'understandable', 'humans', 'addition', 'show', 'assigned', 'coverage', 'ie', 'breakdown', 'might', 'website', 'published', 'found', 'implementation', 'section', 'steps', 'start', 'finish', 'code', 'stored', 'source_code', 'directory', 'scraper', 'raw', 'myanimelistnet', 'specifically', 'list', 'beginning', 'already', 'written', 'scrapedjl', 'implemented', 'python', 'using', 'scrapy', 'framework', 'see', 'animespiderpy', 'run', 'navigate', 'containing', 'following', 'command', 'runspider', 'spiders', 'log', 'automatically', 'write', 'spider_logtxt', 'order', 'must', 'tokenized', 'step', 'lda_inputjl', 'write_lda_inputpy', 'cleaning', 'printout', 'appear', 'console', 'train', 'trained', 'saved', 'lda_model', 'write_lda_modelipynb', 'desired', 'lda_output', 'write_lda_outputipynb', 'distances', 'obtaining', 'genrebreakdowns', 'similarity', 'based', 'respective', 'breakdowns', 'hellinger', 'distance', 'utilities', 'provided', 'gensim', 'described', 'lda_distance', 'write_lda_distanceipynb', 'database', 'due', 'size', 'dataset', 'feel', 'processing', 'time', 'performance', 'perspective', 'good', 'thus', 'preprocessed', 'aforementioned', 'converted', 'relational', 'easy', 'access', 'web', 'attempting', 'utilize', 'azure', 'cosmosdb', 'well', 'sql', 'ended', 'choosing', 'go', 'sqlite', 'light', 'iterate', 'testing', 'easily', 'included', 'part', 'repo', 'mb', 'self', 'contained', 'hindered', 'slow', 'upload', 'times', 'parse', 'json', 'around', 'records', 'taken', 'several', 'hours', 'stack', 'us', 'ecosystem', 'advantages', 'bm', 'ranking', 'solution', 'cognitive', 'search', 'nevertheless', 'able', 'find', 'different', 'avenue', 'full', 'initialized', 'simply', 'running', 'initpy', 'root', 'file', 'delete', 'former', 'tables', 'create', 'new', 'populate', 'alongside', 'relationships', 'retrieval', 'researching', 'libraries', 'models', 'settled', 'utilizing', 'msearch', 'library', 'integrated', 'support', 'flask', 'serves', 'wrapper', 'whoosh', 'pure', 'engine', 'capitalizes', 'okapi', 'function', 'within', 'apppy', 'marked', 'fields', '__searchable__', 'created', 'custom', 'route', 'collect', 'results', 'query', 'exceeds', 'utility', 'normal', 'queries', 'facilitating', 'across', 'inverted', 'index', 'population', 'phase', 'development', 'hosting', 'made', 'lightweight', 'utilizes', 'standard', 'mvc', 'architecture', 'communicates', 'cleanly', 'via', 'sqlalchemy', 'site', 'hosted', 'deployed', 'microsoft', 'apps', 'frontend', 'javascript', 'css', 'components', 'developed', 'materialize', 'routing', 'present', 'comments', 'details', 'application', 'locally', 'pip', 'install', 'r', 'requirementstxt', 'documentation', 'httpsanimetextanalyticsazurewebsitesnetdocumentation']
https://github.com/mikepigott/TextInformationSystemsCourseProject	"project topic: expertsearch: extracting relevant information from faculty bios group name: remarkable scientists members: * mike pigott (mpigott2@illinois.edu), team lead * shuopeng zhou (sz46@illinois.edu) * amitha supragna sandur (asandur2@illinois.edu) 1. what is the function of the tool? the function of the tool is to make faculty information more accessible to users. our aim is to improve and expand the existing expertsearch system. 2. who will benefit from such a tool? users of the expertsearch system. 3. does this kind of tool already exist? if similar tools exist, how is your tool different from them? would people care about the difference? the expertsearch system already leverages named entity extraction, but can be inaccurate. for example, not all professors are listed when searching for ""data mining."" in addition, sometimes the existing named entity extraction tool retrieves the wrong name from the data set. users will care about getting more accurate and complete information. 4. what existing resources can you use? * spacy allows for building a custom named entity extraction model. * dbpedia spotlight scrapes wikipedia pages and collects structured content. * wikipedia provides an introduction to named entity extraction that we can leverage. 5. what techniques/algorithms will you use to develop the tool? (it's fine if you just mention some vague idea.) we expect to heavily leverage named entity extraction for faculty names. the existing system uses regular expressions to find e-mail addresses; we may inspect the work it already does, or come up with our own. finally, we will investigate using topic mining to extract topics from the bios. 6. how will you demonstrate the usefulness of your tool? by comparing it with the existing expertsearch system and showing all the improvements we make. 7. a very rough timeline to show when you expect to finish what. (the timeline doesn't have to be accurate.) by mid-nov: * train models for named entity extraction. * run the existing code of expertsearch website. * work on implementing new features for the system. * submit the progress report. by first week of dec: * complete training the models for topic mining. * complete tweaking and verifying the models against the new data sets. * wire in the resulting model to the existing expertsearch system. * work on software code submission along with documentation. remarkable scientists: expertsearch project status report for this project, we worked on three different tasks: * topic mining of the expertsearch professor bios. * improving named entity recognition & extraction of professor names from the bios. * improving recognition and extraction of professor e-mail addresses from the bios. below is the status report for each. topic mining of professor bios we were able to combine spacy, nltk, and genism to build an lda topic model of the professor's bios, using 10 topics. we then used pyldavis to visualize the model, and word_cloud to build a word cloud of the 25 highest-weighted terms in each topic. finally, we wired the word cloud of the highest-ranked topic into the expertsearch search results. lda visualization the following was created using pyldavis, which is visualizing a 10-topic lda model: word clouds the following word clouds show the top 25 words in each of the 10 lda topics: topic 1 word cloud topic 2 word cloud topic 3 word cloud topic 4 word cloud topic 5 word cloud topic 6 word cloud topic 7 word cloud topic 8 word cloud topic 9 word cloud topic 10 word cloud expertsearch search results finally, we were able to wire in the primary topic associated with the bio into the search results: next steps we intend to experiment with different topic counts in the lda model to determine the best results. we are also interested in making the expertsearch system browsable by allowing the user to click on a topic word cloud and see the bios ranked in descending order of relevance to that topic. challenges metapy does not support the ability to return a list of documents based on its metadata fields, so it is unclear if we would be able to build this additional functionality in the time that we have. named entity extraction of professor names we have conducted several experiments on ner(named entity extraction) solutions in the market. the best open source solution would be standford ner tagger, which is also provided along with expertsearch project for version 2018. the provided tagger and compiled result are incomplete as it eliminates some name information during the tagging phase, part of missing information is critical to extract the main context from the text. we have done two improvements for solving this problem, firstly, we update ner tagger to the newest version which is 2020-11 online, and test on 3-class model and 4-class model separately. secondly, we implemented a filtered mechanism from tagging results, filtering all names with more than one word, capturing all tokens tagged as 'person' in a row, and building a two-layer tagging system(3-class model and 4-class model) to cross-validation. we use the 4-class model as the main model to capture 'person' entities, and check each produced token whether it states in the 3-class model. now the system we created is able to capture most names from context files, filtering names are irrelevant partially. for example, for the first compiled bio text, we are able to retrieve 'tarek f. abdelzaher professor' as full name rather than 'tarek', second one 'sarita v. adve' as correct name rather than 'sarita v. adve richard t. cheng' in the provided file next steps we will continue working on a 2-layer tagging system to cross validation results between two models. any results show or partial show on both models state they are 'person/name' entities with high possibility. additionally, we will continue on filtering results, with introducing a counting/score system. any name tokens appearing in high frequency should have a high score indicating its the main context of text. challenges the biggest challenge we are facing is lots of famous names and confusing information shown in the bio files. for example, 'ann arbor' can be a name or location. the tagging system is not able to distinguish between them. also 'kennedy' as a famous name, sometimes can occur multiple times in the bio page, the system even with the scoring system is not able to know 'kennedy' is not the main context. we will introduce another non-standard model can tag 'locations' entity, then do another cross-validation between our model and the third party model result, it should lead us to a potential solution finding the main person of the context, and better filter out non-relevant names/location. extraction of professor e-mail we have worked on improving the existing regex based extraction of email ids from faculty bios. the original code was extracting the usual format of email ids (user@illinois.edu) and also some false positives such as cs@uiuc. our new code is able to extract many of the alternative email id formats, for example: ""yang.r.yang at yale.edu"" ""denisew (at) uw.edu"" ""moli96 at uw.edu"". it is also able to capture email ids that were originally missing from the first output and remove some false positives. below is a comparison of the outputs from existing code shown on the left and output from new code shown on the right. as observed from the figure above, the new code is able to catch the ""user at illinois dot edu"" types of format email ids. we have covered cases for the following email formats: * user at illinois.edu * user at illinois dot edu * user ""at"" illinois ""dot"" edu or  user ""at"" illinois.edu * user (at) illinois (dot) edu * we removed some erroneous outputs like website urls/sentences/repeated special characters next steps we plan to convert the email ids in ""user at illinois dot edu"" format into the normal ""user@illinois.edu"" format as one of our next steps. although the new regex based code is a significant improvement over the existing code, we feel that this method is laborious. and even if we spend a lot more time trying to cover all the exhaustive number of cases, the gain in improvement for the tool as a whole wouldn't be much, as the number of cases are a lot. hence we plan to look into machine learning based approaches to extract email ids. challenges the challenge here is to convert the various different email formats into the usual email id format. although we may consider keeping it as is if we discover more new email formats along the way and it becomes too heterogeneous, because we have also seen a few websites having email ids in this alternative format. courseproject final presentation: https://uofi.box.com/s/7oaexhrgl33zcnzb034gln9fl97w5fo1"	['project', 'topic', 'expertsearch', 'extracting', 'relevant', 'information', 'faculty', 'bios', 'group', 'name', 'remarkable', 'scientists', 'members', 'mike', 'pigott', 'mpigottillinoisedu', 'team', 'lead', 'shuopeng', 'zhou', 'szillinoisedu', 'amitha', 'supragna', 'sandur', 'asandurillinoisedu', 'function', 'tool', 'make', 'accessible', 'users', 'aim', 'improve', 'expand', 'existing', 'system', 'benefit', 'kind', 'already', 'exist', 'similar', 'tools', 'different', 'would', 'people', 'care', 'difference', 'leverages', 'named', 'entity', 'extraction', 'inaccurate', 'example', 'professors', 'listed', 'searching', 'data', 'mining', 'addition', 'sometimes', 'retrieves', 'wrong', 'set', 'getting', 'accurate', 'complete', 'resources', 'use', 'spacy', 'allows', 'building', 'custom', 'model', 'dbpedia', 'spotlight', 'scrapes', 'wikipedia', 'pages', 'collects', 'structured', 'content', 'provides', 'introduction', 'leverage', 'techniquesalgorithms', 'develop', 'fine', 'mention', 'vague', 'idea', 'expect', 'heavily', 'names', 'uses', 'regular', 'expressions', 'find', 'email', 'addresses', 'may', 'inspect', 'work', 'come', 'finally', 'investigate', 'using', 'extract', 'topics', 'demonstrate', 'usefulness', 'comparing', 'showing', 'improvements', 'rough', 'timeline', 'show', 'finish', 'doesnt', 'midnov', 'train', 'models', 'run', 'code', 'website', 'implementing', 'new', 'features', 'submit', 'progress', 'report', 'first', 'week', 'dec', 'training', 'tweaking', 'verifying', 'sets', 'wire', 'resulting', 'software', 'submission', 'along', 'documentation', 'status', 'worked', 'three', 'tasks', 'professor', 'improving', 'recognition', 'able', 'combine', 'nltk', 'genism', 'build', 'lda', 'used', 'pyldavis', 'visualize', 'word_cloud', 'word', 'cloud', 'highestweighted', 'terms', 'wired', 'highestranked', 'search', 'results', 'visualization', 'following', 'created', 'visualizing', 'clouds', 'top', 'words', 'primary', 'associated', 'bio', 'next', 'steps', 'intend', 'experiment', 'counts', 'determine', 'best', 'also', 'interested', 'making', 'browsable', 'allowing', 'user', 'click', 'see', 'ranked', 'descending', 'order', 'relevance', 'challenges', 'metapy', 'support', 'ability', 'return', 'list', 'documents', 'based', 'metadata', 'fields', 'unclear', 'additional', 'functionality', 'time', 'conducted', 'several', 'experiments', 'nernamed', 'solutions', 'market', 'open', 'source', 'solution', 'standford', 'ner', 'tagger', 'provided', 'version', 'compiled', 'result', 'incomplete', 'eliminates', 'tagging', 'phase', 'part', 'missing', 'critical', 'main', 'context', 'text', 'done', 'two', 'solving', 'problem', 'firstly', 'update', 'newest', 'online', 'test', 'class', 'separately', 'secondly', 'implemented', 'filtered', 'mechanism', 'filtering', 'one', 'capturing', 'tokens', 'tagged', 'person', 'row', 'twolayer', 'systemclass', 'crossvalidation', 'capture', 'entities', 'check', 'produced', 'token', 'whether', 'states', 'files', 'irrelevant', 'partially', 'retrieve', 'tarek', 'f', 'abdelzaher', 'full', 'rather', 'second', 'sarita', 'v', 'adve', 'correct', 'richard', 'cheng', 'file', 'continue', 'working', 'layer', 'cross', 'validation', 'partial', 'state', 'personname', 'high', 'possibility', 'additionally', 'introducing', 'countingscore', 'appearing', 'frequency', 'score', 'indicating', 'biggest', 'challenge', 'facing', 'lots', 'famous', 'confusing', 'shown', 'ann', 'arbor', 'location', 'distinguish', 'kennedy', 'occur', 'multiple', 'times', 'page', 'even', 'scoring', 'know', 'introduce', 'another', 'nonstandard', 'tag', 'locations', 'third', 'party', 'us', 'potential', 'finding', 'better', 'filter', 'nonrelevant', 'nameslocation', 'regex', 'ids', 'original', 'usual', 'format', 'userillinoisedu', 'false', 'positives', 'csuiuc', 'many', 'alternative', 'id', 'formats', 'yangryang', 'yaleedu', 'denisew', 'uwedu', 'moli', 'originally', 'output', 'remove', 'comparison', 'outputs', 'left', 'right', 'observed', 'figure', 'catch', 'illinois', 'dot', 'edu', 'types', 'covered', 'cases', 'illinoisedu', 'removed', 'erroneous', 'like', 'urlssentencesrepeated', 'special', 'characters', 'plan', 'convert', 'normal', 'although', 'significant', 'improvement', 'feel', 'method', 'laborious', 'spend', 'lot', 'trying', 'cover', 'exhaustive', 'number', 'gain', 'whole', 'wouldnt', 'much', 'hence', 'look', 'machine', 'learning', 'approaches', 'various', 'consider', 'keeping', 'discover', 'way', 'becomes', 'heterogeneous', 'seen', 'websites', 'courseproject', 'final', 'presentation', 'httpsuofiboxcomsoaexhrglzcnzbglnflwfo']
https://github.com/mikhaidn/CourseProject	"what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. i am the only contributor for this project, my netid isdmikha2 what system have you chosen? what function are you adding? how will the new function benefit the users? i have chosen to expand the educationalweb system. i've chosen to add the ability to compare university courses (or entire degree programs between schools) by extracting key terms from a universities graduation requirements and course syllabi.this allows students to understand whether a concept they're trying to learn is in fact a core/fringe part of their class (as compared to other courses) for example, unlike uiuc, rose-hulman's multivariate calculus course doesn't cover certain vector calculus concepts (green's theorem, etc). they're dropped because of the shorter term (quarter system vs semester), in general this allows for more flexible curricula, majors that require vector calculus knowledge will still get it elsewhere. regardless, there are a few questions that could be answeredl: what is the minimal set of key terms that should be covered in order for a course to be called ""multivariate calculus""? what other interesting patterns could come up when comparing course syllabi? what are the key terms that a b.s. computer scientist from uiuc should know? how will you demonstrate that the new function works as expected? i will demonstrate that the new functionality works by producing histograms to vizualize the word vectors of each syllabus. how will your code communicate with or utilize the system? unsure at this time, this may just be a standalone package. which programming language do you plan to use? python please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. 5 hours - get used to the old system 5 hours - generate sample data 5 hours - generate keywords for each syllabus and present them 5 hours - presentation and fine tuning courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'contributor', 'project', 'netid', 'isdmikha', 'system', 'chosen', 'function', 'adding', 'new', 'benefit', 'users', 'expand', 'educationalweb', 'ive', 'add', 'ability', 'compare', 'university', 'courses', 'entire', 'degree', 'programs', 'schools', 'extracting', 'key', 'terms', 'universities', 'graduation', 'requirements', 'course', 'syllabithis', 'allows', 'students', 'understand', 'whether', 'concept', 'theyre', 'trying', 'learn', 'fact', 'corefringe', 'part', 'class', 'compared', 'example', 'unlike', 'uiuc', 'rosehulmans', 'multivariate', 'calculus', 'doesnt', 'cover', 'certain', 'vector', 'concepts', 'greens', 'theorem', 'etc', 'dropped', 'shorter', 'term', 'quarter', 'vs', 'semester', 'general', 'flexible', 'curricula', 'majors', 'require', 'knowledge', 'still', 'get', 'elsewhere', 'regardless', 'questions', 'could', 'answeredl', 'minimal', 'set', 'covered', 'order', 'called', 'interesting', 'patterns', 'come', 'comparing', 'syllabi', 'bs', 'computer', 'scientist', 'know', 'demonstrate', 'works', 'expected', 'functionality', 'producing', 'histograms', 'vizualize', 'word', 'vectors', 'syllabus', 'code', 'communicate', 'utilize', 'unsure', 'time', 'may', 'standalone', 'package', 'programming', 'language', 'plan', 'use', 'python', 'please', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'number', 'list', 'main', 'tasks', 'completed', 'estimated', 'cost', 'task', 'used', 'old', 'generate', 'sample', 'data', 'keywords', 'present', 'presentation', 'fine', 'tuning', 'courseproject', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'overviewweek', 'activities']
https://github.com/milan-saroj/CourseProject	"documentation for twitter sarcasm detection using bert 1 a. introduction: as a part of final project of cs 410: text information systems of fall 2020 from university of illinois- urbana champaign, we formed a team of three members. we decided to go for the classification competition (https://github.com/cs410fall2020/classificationcompetition) where we have to create a model that will classify the given tweets as ""sarcasm"" or ""not sarcasm"" and predict the class of 1800 tweets of test set. after preprocessing, we implemented different methods such as naive bayes, lstm (long short- term memory), bilstm (bidirectional lstm), and bert (bidirectional encoder representations from transformers). among all, the encoding and the model using bert gave us the f1 score that was good enough to beat the baseline as required for successful completion of the project. we ran this model over google colab and jupyter notebook. however, we got the best training time using aws sagemaker notebook instance. the detailed implementation is provided in the presentation document. b. overview of the code: the goal of the code is to detect the sarcasm of tweets. the source code for this project performs following task in a sequential order: a. import the training and the test set b. text preprocessing c. bert encoding d. training the model with bert layer (deep learning) e. use trained model to make prediction on the test set with 1800 tweets (both tweet response and tweet context). the training set includes 5000 tweets with ""response"" and ""context"" along with the label as ""sarcasm"" or ""not sarcasm"". it also makes a prediction on the imported twitter test set with output as a text file ""answer.txt"" that has columns twitter id and class label as ""sarcasm"" and ""not sarcasm"". in a nutshell, this code trains on the twitter dataset, classifies whether new tweets are sarcasm or not and it achieves an f1 score over 0.74. this code can be used for almost any text classification task with some modifications. even though it only reads json file format for now, it can read any kind of acceptable file formats such as pd.read_csv and etc. with simple changes. the code calls specific column names such as response and context and they need to be modified as per training set. even though this code uses two different models, each for response and context, one can choose to use single column data with some modifications on the model structure. using an activation function such as softmax instead of sigmoid can be used to perform a multi- classification instead of a binary classification. 2 one can modify max_length values as needed based on the text length. the lower the value is, the quicker the training process will be, but it is important that this length should be large enough to cover the size of the text (each row) for the optimal result. c. source code implementation: how the source code is implemented? how source code is working together to give the prediction file? the source code can be split into groups based on the functionality as described below along with the screenshots of source code: 1. installing required libraries and importing preinstalled libraries this source code requires some libraries other than that comes with the kernel. here sentencepiece library later helps to receive any iterable object to feed training sentences. wget helps to download tokenization.py file that will be later used during a tokenization. tensorflow-hub and tensorflow-addons will be required to run some functions. see below to check the implementation and the output of installing the library. the popular ""pip install"" is used to download these libraries. 3 the picture below includes the list of other libraries that are imported in the notebook. nltk.punkt and other tokenization tools are used for the purpose of dividing a string into substrings by splitting on the specified string. 2. data preprocessing: we now perform a data preprocessing. this code has several functions that will work together to preprocess the data. once the json training and test files are read using pandas library, the code performs a preprocessing. some of the notable preprocessing this code performs are: a. remove punctuation b. remove @user c. change abbreviations to normal meaningful strings d. remove emojis e. remove links and non-ascii characters, if any f. combine separate sentences of context of same tweet into single documents g. change the class label string to numerical forms using labelencoder. listed below are some preprocessing functions that we created: 4 the function preprocessing calls other helper functions such as remove_emoji, remove_punctuations, etc. and applies it to each row of the data using an efficient pandas library 5 function called ""apply"". this is an example of a vectorizing function that works on all rows at the same time and is efficient and faster. the class labels of the training dataset are in string forms as they are named ""sarcasm"" and ""not sarcasm"". they are converted into numerical forms using labelencoder function for the training purpose and saved in as a series with a variable name ""train_label"" as shown below: we then pass the train and test data frames to this function to get the preprocessed test and train sets as shown below: 3. bert embedding, training and fitting: after the preprocessing, we now move on to bert embedding, training, and model fitting. in this step, we conducted the bert embedding, training and model fitting. first, we downloaded bert_layer, which was a pre-trained neural network with the transformer architecture. we chose l=24 as hidden layers. then, we encoded texts to ids to generate the encoded tokens, masks and segments using the pre-trained bert layers. one thing to be noticed, we encoded response and context separately and combined them afterwards. finally, we fit the bert encoded matrices into a model with epochs size of three and batch size of six. we use 90% of the dataset as a training set and 10% as a validation set. as a result, we achieved the f1 score of 0.74 which is about 3% above the baseline. this is where the initially installed tensorflow_hub comes into play. this model has been pre- trained for english on the wikipedia and bookscorpus using the code published on github. inputs 6 have been ""uncased"", meaning that the text has been lower-cased before tokenization into word pieces, and any accent markers have been stripped. the following function converts the token into an encoding that is later used as an input to a bert layer (neural network). the following set of code tokenizes the sentences and embeds them using bert. here we chose max_len of 256. choosing the right number was part of tuning the model since the smaller number will speed up the training process in expense of the performance of the model. this number of 256 works well for us and we got the best speed and performance with it. the following code creates a neural network model with the context and the response as inputs. however, we encoded the response and the context separately, and created separate neural network models and later concatenated them together right before they went to the output layer. 7 lists test_generate and train_generate are the output of bert encoding and they are required to feed into a bert layer of the neural network. we use the sigmoid function as we have a binary output. we set the learning rate to 1e-6 after a few optimizations runs and use adam as an optimizer since it is one of the most popular optimizers in the industry nowadays. adam moves faster at first and then slows down once it starts to get closer to the local/global minima while training. 4. making prediction based on the trained model once we create a model, we train it with our training set. we have used 90% of training set as the training data and 10% as the validation dataset. the values for the parameters training set percentage, batch size and epoch were empirically determined by us to get the best f1 score and the shown values gave us the best result. note that each epoch took about one and a half hours even after running with sagemaker which has the larger ram than the other options. running them on a local computer would take almost a day to run 2-3 epoch and it is one of the reasons why we chose sagemaker as a platform to train our model. once the training is completed, we use our test set to make a prediction. once the prediction is made, it is converted back to non-numerical form of class labels as ""sarcasm"", ""non-sarcasm"" using labelencoder and inverse_transform. the prediction is later to be converted into dataframe, and concatenated with the twitter ids from the test set so we can have dataframe with twitter ids and a prediction class. the dataframe is later saved as a text file ""answer.txt"" which is later uploaded on github. 8 since github is already set with the webhook, once we commit and push, the result of our prediction will show on livelab. at the time of writing this documentation we got the f1 score of 0.742 and we were ranked at 30 in the leaderboard. d. how to run the source code? the code will install all the necessary libraries, import all required libraries, therefore there is no need for any additional installation to run this code provided that this code is ran under specific kernel of ""conda_amazonei_tensorflow2_p36"" which is available in notebook instance of aws sagemaker. here are the stepwise details on how to run the source code (notebook) on aws sagemaker. 1. go to https://aws.amazon.com/ and create an account if you do not have one. 2. once you are logged in, type sagemaker on the search tab. 3. go on notebook instances as shown below. 9 4. click on create notebook instance 5. type any name for notebook instance name and select instance type. the free tier aws version only allows certain maximum size. we use ml.c4.8xlarge to train our model which is available for a free tier account. 10 6. once you create a notebook instance, it will take 1-2 minutes to be activated (inservice). once you see an inservice sign, you can click ""open jupyter"" as below. it will open a notebook on your default browser. 7. once your aws notebook opens, upload the source code (notebook file), train.jsonl, and test.josnl file on the notebook. 11 8. once your upload is finished, click on notebook (""source code""). 9. change the kernel to conda_amazonei_tensorflow2_p36 by selecting the kernel tab from the navigation menubar and select ""change kernel"" tab to choose conda_amazonei_tensorflow2_p36 kernel. 10. once the notebook is open, go to ""cell"" and click ""run all"". 12 all the code cell will run and the prediction on test set will be exported as ""answer.txt"" after a few hours on the root directory that can be accessed by going file and click ""open"". this txt file will have the prediction as per the project requirement. how did we get here? what are our experiments with other methods and hyperparameter tuning? once we did the preprocessing, we used different machine learning algorithm to make predictions. while other ml algorithm was not giving us a good result, bilstm was giving us some encouraging result. below are the screenshots of one of the models we used. this one gave us the f1 score of about 0.65 which was not good enough. after some suggestion from the discussion board, we came to realize that bert with its attention layer will definitely help us to achieve the prediction on test set that could beat the baseline. all three of us started our own research and share ideas and references with each other. we came up with one model that started to look promising with the f1 score of 0.69. that is the time when we realized that all we need was a good hyperparameter tuning. here are the lists of parameters that we tuned in order to get the result to beat the baseline. a. epoch b. learning batch size c. learning rate d. max length to feed into bert layer (max_length) e. test/validation split percentage since the training took us over 4 hours for a single epoch with 15 batch size, we needed to find a way to speed up the process. that is when we decided to go with sagemaker where we could leverage larger ram size (60 gb ram with 36vcpu). after reducing the training time from 4 hours to 40 mins using sagemaker, we were able to run the model with different 13 hyperparameters more easily. our max_length at first was 150 but later on we changed it to 256 in order to get the better result. we were able to get closer to baseline after a few trials, but we still could not beat the baseline by a small margin. we then went back and started making changes on the preprocessing. realizing the feature engineering was a very important aspect of the training, we made some changes such as converting abbreviated words to natural words and implementing the better handling of punctuations by keeping some punctuations such as (...). with these changes and a few more trials with the different hyperparameters, we managed to beat the baseline. how was our team effort? who did what? after our initial meetings, we decided that we all should be working separately during the preprocessing. there were two main reason for this decision: a. it was necessary to come up with the preprocessed data since we cannot move forward without it. therefore, coming up with a near-perfect preprocessing was important. b. working independently would bring more creativity while preprocessing. once we came up with our own set of the preprocessing, we had a meeting and come up with the best preprocessing code which included best parts of all three different preprocessing code. we then decided to work on different models and compare results. saroj worked on bilstm and k_train library, jiayi worked on bert encoding and layer, while kevin worked on naive bayes, and an additional feature engineering that could be possible to implement. while bilstm showed some good signs, bert started to get closer to the baseline. at that point, we all started working on bert and tried different hyperparameters to train the models. we have each tried over 15 different trainings with different hyperparameters and it took about three hours per training on average. sometimes we ran two different models simultaneously leveraging aws sagemaker. once we beat the baseline, jiayi worked on cleaning and organizing the source code, kevin worked on the presentation and saroj worked on the first draft of the documentation. later, everybody came together to finalize the source code, presentation, and demo video. it was a good team effort, and we all contributed almost the same amount of time. with the training time accounted, we worked over 35 hours each for this project. references: * https://tfhub.dev/tensorflow/bert_en_uncased_l-24_h-1024_a-16/1 * https://www.kaggle.com/rftexas/text-only-kfold-bert * https://towardsdatascience.com/bert-explained-state-of-the-art-language-model-for- nlp-f8b21a9b6270 * https://huggingface.co/transformers/model_doc/bert.html * https://www.kaggle.com/funxexcel/keras-bert-using-tfhub-trial progress report three of us had a kick off meeting a few weeks ago, and decided to work separately on data cleaning and preprocessing. this decision was made because we won't be able to work on ml/dl implementation without preprocessing. we share our preprocessing code with each other, and make progressive changes on our individual works. since there are many directions we can go with feature engineering such as whether to use just the response or use both response and context, keep the emojis or leave it alone, etc., we have kept all different versions of preprocessing and feature engineering codes to implement ml/dl models later on. current progress we have put together a few different preprocessing codes, and have created ml models (like multinomial naive bayes), lstm, bilstm and bert models. we have completed a whole cycle of the project such as importing the train, test file, preprocess and data cleaning, implementing dl models, and have created an ""answer.txt"" file as per the project requirement. we have individually submitted the code (pushed) through livelab, but failed to beat the baseline. remaining task since we completed the whole cycle of project submission without beating the baseline, our task is to improve our models. we need to improve on feature engineering by trying a few different methods. some of them we are thinking that could help are: 1. leaving few punctuation marks such as ""!"" which could improve the model, 2. run models without removing emojis which might help. 3. need to figure out a perfect way to combine response and context. such as do we use all the context or just the last one followed by the response, 4. try pre-trained models like k-train 5. fine tune the models (using different epoch, validation split allocation, etc) challenges i.although we achieved 0.694 of f1, we still need to improve the bert model to beat the baseline (which is 0.723 of f1) or learn about k-train as well. ii.to find a perfect way to use response and context is one of the challenges. iii.find the perfect feature engineering such as whether we need to remove all punctuation, emoji, stopwords, etc. project proposal: text classification competition: twitter sarcasm detection 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. name netid saroj khanal khanal2 captain kevin choi gchoi17 jiayi chen jiayic15 2. which competition do you plan to join? text classification competition: twitter sarcasm detection 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. some of the neural classifiers are : ann (artificial neural network), rnn(recurrent neural network), lstm (long short term memory). ann is a feed forward neural network where data pass forward from input to output. on the other hand, rnn has feedback loops in the recurrent layer which enables maintaining information in 'memory' over time. however, it can be difficult to train standard rnns to solve problems that require learning long-term temporal dependencies because the gradient of the loss function decays exponentially with time (called the vanishing gradient problem). to look into this issue further, lstm networks are a type of rnn that uses special units in addition to standard units.lstm units include a 'memory cell' that can maintain information in memory for long periods of time.there are three gates for lstm: an input gate, an output gate and a forget gate. gates are used to control when information enters the memory, when it's output, and when it's forgotten.this architecture lets them learn longer-term dependencies. lstm assigned relatively more important weights on units with longer term to improve general accuracy. two of our team members have experiences with neural networks and have worked on personal projects to some extent. however, for this project, our team needs to do some research, learn more about the above mentioned classifiers to properly implement to increase the accuracy of the model. however, before feeding the data into neural network, we will need to perform several text processing that we learn on the earlier part of the class such as tokenization, change words to lowercase, remove numerical data, remove stopwords, stemming, lemmatization, vectorization (bag of words), tf-idf, use word2vec and etc. 4. which programming language do you plan to use? python (tensorflow library, keras api, gensim, nltk library, textblob, spacy). courseproject guidelines for reviewer source code, train and test json files are here in the github. please follow the link below for demonstration video: https://mediaspace.illinois.edu/media/t/1_adl8xwo0"	['documentation', 'twitter', 'sarcasm', 'detection', 'using', 'bert', 'introduction', 'part', 'final', 'project', 'cs', 'text', 'information', 'systems', 'fall', 'university', 'illinois', 'urbana', 'champaign', 'formed', 'team', 'three', 'members', 'decided', 'go', 'classification', 'competition', 'httpsgithubcomcsfallclassificationcompetition', 'create', 'model', 'classify', 'given', 'tweets', 'predict', 'class', 'test', 'set', 'preprocessing', 'implemented', 'different', 'methods', 'naive', 'bayes', 'lstm', 'long', 'short', 'term', 'memory', 'bilstm', 'bidirectional', 'encoder', 'representations', 'transformers', 'among', 'encoding', 'gave', 'us', 'f', 'score', 'good', 'enough', 'beat', 'baseline', 'required', 'successful', 'completion', 'ran', 'google', 'colab', 'jupyter', 'notebook', 'however', 'got', 'best', 'training', 'time', 'aws', 'sagemaker', 'instance', 'detailed', 'implementation', 'provided', 'presentation', 'document', 'b', 'overview', 'code', 'goal', 'detect', 'source', 'performs', 'following', 'task', 'sequential', 'order', 'import', 'c', 'layer', 'deep', 'learning', 'e', 'use', 'trained', 'make', 'prediction', 'tweet', 'response', 'context', 'includes', 'along', 'label', 'also', 'makes', 'imported', 'output', 'file', 'answertxt', 'columns', 'id', 'nutshell', 'trains', 'dataset', 'classifies', 'whether', 'new', 'achieves', 'used', 'almost', 'modifications', 'even', 'though', 'reads', 'json', 'format', 'read', 'kind', 'acceptable', 'formats', 'pdread_csv', 'etc', 'simple', 'changes', 'calls', 'specific', 'column', 'names', 'need', 'modified', 'per', 'uses', 'two', 'models', 'one', 'choose', 'single', 'data', 'structure', 'activation', 'function', 'softmax', 'instead', 'sigmoid', 'perform', 'multi', 'binary', 'modify', 'max_length', 'values', 'needed', 'based', 'length', 'lower', 'value', 'quicker', 'process', 'important', 'large', 'cover', 'size', 'row', 'optimal', 'result', 'working', 'together', 'give', 'split', 'groups', 'functionality', 'described', 'screenshots', 'installing', 'libraries', 'importing', 'preinstalled', 'requires', 'comes', 'kernel', 'sentencepiece', 'library', 'later', 'helps', 'receive', 'iterable', 'object', 'feed', 'sentences', 'wget', 'download', 'tokenizationpy', 'tokenization', 'tensorflowhub', 'tensorflowaddons', 'run', 'functions', 'see', 'check', 'popular', 'pip', 'install', 'picture', 'list', 'nltkpunkt', 'tools', 'purpose', 'dividing', 'string', 'substrings', 'splitting', 'specified', 'several', 'work', 'preprocess', 'files', 'pandas', 'notable', 'remove', 'punctuation', 'user', 'change', 'abbreviations', 'normal', 'meaningful', 'strings', 'emojis', 'links', 'nonascii', 'characters', 'combine', 'separate', 'documents', 'g', 'numerical', 'forms', 'labelencoder', 'listed', 'created', 'helper', 'remove_emoji', 'remove_punctuations', 'applies', 'efficient', 'called', 'apply', 'example', 'vectorizing', 'works', 'rows', 'faster', 'labels', 'named', 'converted', 'saved', 'series', 'variable', 'name', 'train_label', 'shown', 'pass', 'train', 'frames', 'get', 'preprocessed', 'sets', 'embedding', 'fitting', 'move', 'step', 'conducted', 'first', 'downloaded', 'bert_layer', 'pretrained', 'neural', 'network', 'transformer', 'architecture', 'chose', 'l', 'hidden', 'layers', 'encoded', 'texts', 'ids', 'generate', 'tokens', 'masks', 'segments', 'thing', 'noticed', 'separately', 'combined', 'afterwards', 'finally', 'fit', 'matrices', 'epochs', 'batch', 'six', 'validation', 'achieved', 'initially', 'installed', 'tensorflow_hub', 'play', 'pre', 'english', 'wikipedia', 'bookscorpus', 'published', 'github', 'inputs', 'uncased', 'meaning', 'lowercased', 'word', 'pieces', 'accent', 'markers', 'stripped', 'converts', 'token', 'input', 'tokenizes', 'embeds', 'max_len', 'choosing', 'right', 'number', 'tuning', 'since', 'smaller', 'speed', 'expense', 'performance', 'well', 'creates', 'concatenated', 'went', 'lists', 'test_generate', 'train_generate', 'rate', 'optimizations', 'runs', 'adam', 'optimizer', 'optimizers', 'industry', 'nowadays', 'moves', 'slows', 'starts', 'closer', 'localglobal', 'minima', 'making', 'parameters', 'percentage', 'epoch', 'empirically', 'determined', 'note', 'took', 'half', 'hours', 'running', 'larger', 'ram', 'options', 'local', 'computer', 'would', 'take', 'day', 'reasons', 'platform', 'completed', 'made', 'back', 'nonnumerical', 'form', 'nonsarcasm', 'inverse_transform', 'dataframe', 'uploaded', 'already', 'webhook', 'commit', 'push', 'show', 'livelab', 'writing', 'ranked', 'leaderboard', 'necessary', 'therefore', 'additional', 'installation', 'conda_amazonei_tensorflow_p', 'available', 'stepwise', 'details', 'httpsawsamazoncom', 'account', 'logged', 'type', 'search', 'tab', 'instances', 'click', 'select', 'free', 'tier', 'version', 'allows', 'certain', 'maximum', 'mlcxlarge', 'minutes', 'activated', 'inservice', 'sign', 'open', 'default', 'browser', 'opens', 'upload', 'trainjsonl', 'testjosnl', 'finished', 'selecting', 'navigation', 'menubar', 'cell', 'exported', 'root', 'directory', 'accessed', 'going', 'txt', 'requirement', 'experiments', 'hyperparameter', 'machine', 'algorithm', 'predictions', 'ml', 'giving', 'encouraging', 'suggestion', 'discussion', 'board', 'came', 'realize', 'attention', 'definitely', 'help', 'achieve', 'could', 'started', 'research', 'share', 'ideas', 'references', 'look', 'promising', 'realized', 'tuned', 'max', 'testvalidation', 'find', 'way', 'leverage', 'gb', 'vcpu', 'reducing', 'mins', 'able', 'hyperparameters', 'easily', 'changed', 'better', 'trials', 'still', 'small', 'margin', 'realizing', 'feature', 'engineering', 'aspect', 'converting', 'abbreviated', 'words', 'natural', 'implementing', 'handling', 'punctuations', 'keeping', 'managed', 'effort', 'initial', 'meetings', 'main', 'reason', 'decision', 'come', 'cannot', 'forward', 'without', 'coming', 'nearperfect', 'independently', 'bring', 'creativity', 'meeting', 'included', 'parts', 'compare', 'results', 'saroj', 'worked', 'k_train', 'jiayi', 'kevin', 'possible', 'implement', 'showed', 'signs', 'point', 'tried', 'trainings', 'average', 'sometimes', 'simultaneously', 'leveraging', 'cleaning', 'organizing', 'draft', 'everybody', 'finalize', 'demo', 'video', 'contributed', 'amount', 'accounted', 'httpstfhubdevtensorflowbert_en_uncased_l_h_a', 'httpswwwkagglecomrftexastextonlykfoldbert', 'httpstowardsdatasciencecombertexplainedstateoftheartlanguagemodelfor', 'nlpfbab', 'httpshuggingfacecotransformersmodel_docberthtml', 'httpswwwkagglecomfunxexcelkerasbertusingtfhubtrial', 'progress', 'report', 'kick', 'weeks', 'ago', 'wont', 'mldl', 'progressive', 'individual', 'many', 'directions', 'keep', 'leave', 'alone', 'kept', 'versions', 'codes', 'current', 'put', 'like', 'multinomial', 'whole', 'cycle', 'dl', 'individually', 'submitted', 'pushed', 'failed', 'remaining', 'submission', 'beating', 'improve', 'trying', 'thinking', 'leaving', 'marks', 'removing', 'might', 'figure', 'perfect', 'last', 'followed', 'try', 'ktrain', 'fine', 'tune', 'allocation', 'challenges', 'ialthough', 'learn', 'iito', 'iiifind', 'emoji', 'stopwords', 'proposal', 'netids', 'captain', 'administrative', 'duties', 'netid', 'khanal', 'choi', 'gchoi', 'chen', 'jiayic', 'plan', 'join', 'prepared', 'stateoftheart', 'classifiers', 'frameworks', 'may', 'heard', 'describe', 'relevant', 'prior', 'experience', 'ann', 'artificial', 'rnnrecurrent', 'hand', 'rnn', 'feedback', 'loops', 'recurrent', 'enables', 'maintaining', 'difficult', 'standard', 'rnns', 'solve', 'problems', 'require', 'longterm', 'temporal', 'dependencies', 'gradient', 'loss', 'decays', 'exponentially', 'vanishing', 'problem', 'issue', 'networks', 'special', 'units', 'addition', 'unitslstm', 'include', 'maintain', 'periods', 'timethere', 'gates', 'gate', 'forget', 'control', 'enters', 'forgottenthis', 'lets', 'longerterm', 'assigned', 'relatively', 'weights', 'longer', 'general', 'accuracy', 'experiences', 'personal', 'projects', 'extent', 'needs', 'mentioned', 'properly', 'increase', 'feeding', 'processing', 'earlier', 'lowercase', 'stemming', 'lemmatization', 'vectorization', 'bag', 'tfidf', 'wordvec', 'programming', 'language', 'python', 'tensorflow', 'keras', 'api', 'gensim', 'nltk', 'textblob', 'spacy', 'courseproject', 'guidelines', 'reviewer', 'please', 'follow', 'link', 'demonstration', 'httpsmediaspaceillinoisedumediat_adlxwo']
https://github.com/mkhanal2/CourseProject	"cs 410: text information systems course project progress report text classification competition: twitter sarcasm detection submitted by: mohan khanal (mkhanal2) mkhanal2@illinois.edu 1) which tasks have been completed? * reading the tweets/response from the train and test file, cleaning the data and producing the proper training / testing vectors. * applying deep neural network (lstm) on the training set and using the trained model to get the prediction for the test set. * achieved between 0.60 to 0.70 accuracy and f1 score on current progress, during multiple iteration. 2) which tasks are pending? * fine tune the model implemented to get higher accuracy and f1 score to beat the benchmark. * document the approaches that was tried and the results that i got for the final report. * create final report / presentation to be submitted at the end of the project. 3) are you facing any challenges * not a big issue, but training sometime takes longer time in my laptop so iterating through different ideas takes little bit longer time, especially if the parameter sets are in higher range. 2020 text classification competition: twitter sarcasm detection cs410 - course project final document mohan khanal (mkhanal2@illinois.edu) 1 contents how to use/run the code ................................................................................................................ 2 background ..................................................................................................................................... 2 model design .................................................................................................................................. 3 detail approach / code walkthrough............................................................................................. 4 data pre-processing .................................................................................................................... 4 data preparation for training ...................................................................................................... 6 model building and training ....................................................................................................... 8 prediction for test set ............................................................................................................... 14 prediction results ......................................................................................................................... 15 other approaches ......................................................................................................................... 15 conclusion ..................................................................................................................................... 16 references .................................................................................................................................... 16 2 how to use/run the code the code is developed using python 3 (jupiter notebook). there is folder called source_code on the github (https://github.com/mkhanal2/courseproject) where we put all the documentation and source-code for the project. follow following instruction to run the code: * download the folder ""source_code"" from github (link above) * makes sure you have folder called ""data"" under source_code folder which has (train.jsonl, test.jsonl) files , all of these files and folder are already in github. * we would need one for file in this data folder. go to the link below to download the ""glove"" twitter file we need ""glove.twitter.27b.25d.txt"". after downloading the file for the link, unizip the file and copy the file ""glove.twitter.27b.25d.txt"" onto the data folder. o direct link - http://nlp.stanford.edu/data/glove.twitter.27b.zip o or: go to below link and download below mentioned file. # https://nlp.stanford.edu/projects/glove/ # download ""glove.twitter.27b.zip"" form this site. o note: chrome didn't work for me while downloading, so i used ""microsoft edge"" to download the above file. * now open jupiter notebook on you laptop (usually within anaconda). * using jupiter notebook open the source code from the downloaded folder (source code file name: project source code.ipynb) * after that you can run the code. please make sure that all the packages used in the 2nd cell of the notebook are already installed. i have provided the instruction on 1st cell of the notebook on how to install the packages. background as part of the final project for course cs410-text information system, i have done project for twitter sarcasm detection which is part of the text classification competition. as part of this project there were two sets of data file given to us. one was for training and another was for testing (for which we would have to do our prediction). these data files contained the twitter responses. these response text were in context to some conversation happening in twitter feed. these data file contained those context conversation as-well. so, we could use both response text and context text if we want to for training our model for this classification. since this was a classification task, the training file also had the label for each data point as ""sarcasm"" or ""not_sarcasm"". our job was to predict the same thing for all the records present in the testing file. training file had 5000 labelled data-set and testing set had 1800 data-set. so, at the end we would have to predict the label for those 1800 test data-set. this project required some machine learning task to train the model using the training data and finally predict the outcome for test-data set using that trained classification model. this 3 document explains all the details around the different approaches that were carried out to train the model and will list out the final results that i got from those trained model. model design as part of this project, i have used recurrent neural network models called lstm (long short term memory) model's. these models are mostly used for sequential data. since, the text that we are using as our input is sequential and sarcasm might depend on how the sentence is structured, so using lstm would help us utilize the sequential nature of the data. as explained in previous section, we have ""response"" text as one set of input data that we can use and another is we have ""context"" text as another set of input that we can use. so, here were the first two sets of model that we can design using these inputs. model-1 * using response only as part of our input and feeding that data into the model to predict if that response is sarcastic or not. below diagram gives the flow of the model. model-2 * another approach is rather than only using the response as an input we can use both response and context as our input to train our model and get output from there. below diagram show the design for the same. results combined/aggregated * finally we can decide to combine the results from model-1 and model-2 and then get our final aggregated results. combining both model-1 and model-2 was able to beat the baseline score for me. below is the diagram for the combined results model. i will be discussing the detail around this model in another section. model-1 (lstm) output-1 response(text) model-2 (lstm) output-2 response(text) context(text) model-1 model-2 output-1 output-2 final output response(text) response(text) context(text) 4 detail approach / code walkthrough as stated in the previous section i have used lstm as a model for training my classification model. the program is written in python (jupter notebook). i will walk-over the detail steps that was carried out as part of my code in this section. here are the steps that were carried out , which is going to be covered in details: 1. data pre-processing - reading the file, and cleaning the data for training 2. data preparation for training - creating the vocabulary, creating the input vector for text. 3. model building and training - building different models and training them with the data/label prepared 4. prediction for test set - combing results from multiple model to improve prediction score. data pre-processing data pre-processing is the first process that is carried out before building the model. as part of data pre-processing step , following steps are carried out: * read the training file provided (""train.jsonl"" - 5000 data records). this is a json file, and contains attributes (""label"", ""response"" and ""context""). i have used pandas json file reader function (read_json) to read the json file. * after reading the file, the emoji and hashtags are read separately using custom built functions for reading emoji and hashtags and placed on separate columns in pandas data frame, which could be utilized to use as input for a model. the final model used for this project doesn't utilize hashtags or emoji, but emoji's were utilized on some of my model's for testing, but was not carried out to the final model. * after that the text ""response"" , which is one of the main input data-set for our model is cleaned, using the custom build function. this function will remove any junk characters and rephrase some of the wordings , trim the text to remove white-spaces, remove the stops words like (the, is, etc.) and lemmatize the text so that the similar type of words are represented the same. * after that, context goes through the same clean-up process as that for response. before that, context data is a list/array. which means that there could be multiple level of replies for the tweet and the response above was the reply for the last reply from the context. so, we use the list object to get the last reply from it to set the context for us. after that it goes through the same clean-up process described above for response. * similar to the train data, test data goes through the same pre-processing step. ""test.jsonl"" (1500 data records) is similar structure of training data (only thing different is, this data doesn't have label). below is the code screenshot for the steps explained above. 5 data-read and clean-up code (train.jsonl): clean-up functions: 6 data-read and clean-up code (test.jsonl): data preparation for training after pre-processing for the data is completed, we would need to build a input vector that can be used for training. as currently after pre-processing we only have text data, and we would need to convert it into some numeric form to build the model. so, we would need to build a input vector represented in numeric form for this. there are multiple options for building a training vector. we can tokenize the words into integer's and then choose to use a embedding layer in our network to learn about the embedding vector. or we can choose to use some pre-trained embedding vector. while both approaches were tried as part of this project, i found that pre- trained embedding vector had better results than the self-trained one, so i am using the pre- trained embedding vectors. i am using the pre-trained vector from ""glove"". this embedding layer part is covered in more detail in next section. here are the steps required to build a input vector from the pre-processed text. * after text pre-processing is completed, we need to build a word vocabulary which contains all the words that we are using for training and testing as-well. * the word vocabulary in then tokenized (into integers). * then we are going to set the length of the input vector that we are going to feed to our model/network. while looking into pre-processed response and context, the max length of response was around 200 range and for context was around 250 range. so, i am using input length of 200 for response and 250 for context. * x and x_cntx vector with length 200 and 250 are developed. x is for response and x_cntx is for context. the vector x may look line this [0 0 0 ..... 25 34 26 27], where 0 at the left are '0' padded to make the length of the vector 200. the integer on the vector are the ones that were tokenized form of the word, so each word is converted in specific integer by the tokenize function. similarly x_cntx is in similar structure, only difference it's its length is 250. below is the code screenshot for the steps explained above. 7 build a word vocabulary (code) find max length's for input vector's (code) building input vector's (code) 8 model building and training after data clean-up and preparing for the input vector, we now need to represent our word integers as vectors. what this will do is that it will build a vector which will have related word together and unrelated word farther apart, that way the numeric representation of the words becomes more meaningful for training. as previously mentioned, we have two ways to do that. once is to train that word-vector using training data (embedding layer) another is to use the pre- trained data. for this project i tried both, at the end the pre-trained model worked better than the self-training. so, i am using the pre-trained data for word-embedding. i am using glove (global vectors for word representation) for that. glove has multiple files that we can use. for this project i have use the glove twitter data-set with 25d vector. (glove.twitter.27b.25d.txt) glove site: https://nlp.stanford.edu/projects/glove/ using glove we will be building a embedded layer in our model, what that embedding layer will do is, it will take the input of 1-d integer vector that we build (x, x_cntx) and then convert them into 2-d vector's where each integer is converted into another vector with length 25. that 2-d vector is then passed to the neural network model. after embedding layer is built we will then build two different model's one with ""response"" as an input and another with ""response"" and ""context"" as input. below is the detail diagram of both the model's. as mentioned previously i am using lstm model for this project. model-1: model-2: response (text) - integer vector embedding layer (glove) bidirectional lstm output (sigmoid activation) response (text) - integer vector embedding layer (glove) bidirectional lstm output (sigmoid activation) context (text) - integer vector embedding layer (glove) bidirectional lstm 9 below is the details steps done as part of model build and training: * the input-vector which is a integer conversion from text is first converted into pre-trained word-vector's. i am using glove (global vector for word representation) for this. * we need to read the glove vector from a file. after that all the words that were part of our word vocabulary is been fetched and embedding matrix is built with that. * the embedding matrix build will be used to create a embedding layer for our neural network model. this embedding layer's job would be to convert the integer vector into the glove vector representation, which can then be feed into neural network (lstm). * after building the embedding layer, we now build an actual model. * frist model, is a simple lstm model which takes the response as input pass it to embedding layer and then into the lstm network and finally a output is generated from that model. * second model is a combination model, where i have built a two different lstm model's one for response as input (similar to first model) and another model is also similar lstm but with context as input. finally these two lstm's are combined to get the output for this second model. * after both the model's are built. we now have to prepare the training and testing data- set. as we have prepared the vectors x, x_cntx which has 5000 data-elements previously. we will split this data into 4000 training set and 1000 test-set (this is the test set used in training for validation). * after the split of training and test-set for validation. we now train both the model's model-1 and model-2 with these data. below is the code snapshot for the above explained steps. reading glove vector from the downloaded files (code): 10 building embedding matrix and embedding layer with glove vector(code): building first model (code): 11 building second model (code): training and test(validation) data split from training data (code) 12 training model-1 (code): below is the graph drawn from the training of model-1: 13 training model-2 (code): below is the graph drawn from the training of model-2: 14 prediction for test set now, with both the model built and trained with training data, we will now predict the results for the test-set (1800 data set's that were read from train.josnl). below is the details steps of what we do for prediction: * as we did for the training set we will first vectorized the text into integers before passing to the model as that is the input to our model. we build both response and context vectors as z, and z_cntx. * after building a vector now we pass the vector (z) i.e. response only into model_1 for prediction. similar we pass (z and z_cntx both) into second model for prediction. with this we now have two sets of prediction which is from model-1 and model-2. * finally we combine the model-1 and model-2 prediction into single column, and then use some threshold defined to predict the result. * since we are combining the results form model-1 and model-2 the aggregated value of the output will range from 0 to 2. the half-way cut-off value is 1.0, but instead of using 1.0 as our cut-off we will be using 0.5 as our cut-off to determine if it's sarcastic or not, we are doing this because this will increased our re-call by a lot with very less impact in the precision (that is what i found during the training/testing). this will increase our overall scoring of the model. * finally, we will generate a file ""answer.txt"" with all this prediction for each of the data- set given and then the file is uploaded into github to get score from livedatalab. below is code for the steps explained above: building input vector for test data set (code): predicting using model_1 and model_2 (code): combine results from model_1 and model_2 (code): exporting the results (answer.txt) (code): 15 prediction results there were multiple runs / iteration that was carried out as part of this project to beat the baseline score. the model explained above was able to beat the baseline score, that is combining two different model's and aggregating the result to get the final output. below is the screenshot from the livedatalab that shows the overall score that i had which is above the baseline score. this score is as of 12/11/2020: i have also uploaded the answers.txt file in the github with the source-code. https://github.com/mkhanal2/courseproject/blob/main/source_code/answer.txt other approaches apart from the approach that was discuss above (which was able to beat the benchmark score), i tried other approaches as-well. other approaches that i tried were not able to beat the benchmark score. * other approach -1 (lstm - ""response"" only model) o this approach is similar to the model-1 that i implemented above, but this approach alone was not able to beat the baseline score. the best f1 score for this model was around 0.70 range. o i tried this model with both self-training embedded layer and pre-trained embedded layer. * other approach -2 (lstm - ""response"" and ""context"") o this approach is similar to the model-2 that i implemented above, but this approach alone was not able to beat the baseline score. the best f1 score for this was also around 0.70 range. o i tried this model with both self-training embedded layer and pre-trained embedded layer. * other approach -3 (lstm - ""response"" and ""emoji"" model) o this model was based on model-1 above, and also one additional model which was used to train the data with ""emoji's"" only , since the emoji containing response were limited, so this model was also not able to beat the baseline score. although this model was better from previous two approaches, the best f1 score for this was around 0.71 range. o i tried this model with both self-training embedded layer and pre-trained embedded layer. 16 conclusion after testing through multiple models of lstm , the combined model with ""response"" only as input and ""response and context"" as input was able to beat the baseline score. so, combining different model's with different inputs and then combining the results of output made model more efficient. similar we could further tune/iterate through this model , or introduce new features like emoji's to possibly improve the score for this model. also, there are other model that can be tried with this data-set , like bert. due to the limited time for this project, my work has been only limited to lstm model explained above. references there were lots of learning and references that i took as part of this project, as lstm / neural- network was kind of new topic for me. i have also taken the code snippet from some of the references list below. listed below are websites/codes that i took reference and learned from: * https://adventuresinmachinelearning.com/keras-lstm-tutorial/ * https://machinelearningmastery.com/crash-course-deep-learning-natural-language- processing/ * https://www.aclweb.org/anthology/c16-1231.pdf * https://machinelearningmastery.com/timedistributed-layer-for-long-short-term- memory-networks-in-python/ * https://www.kaggle.com/mkowoods/deep-learning-lstm-for-tweet-classification * https://github.com/aniskywalker/sarcasmdetection * https://www.kaggle.com/c/tweet-sentiment-extraction/discussion/143281 * https://arxiv.org/pdf/1911.10401.pdf * https://www.aclweb.org/anthology/2020.figlang-1.11.pdf * https://github.com/mirunapislar/sarcasm-detection * https://www.youtube.com/watch?v=pmjt8gix0co * https://towardsdatascience.com/lstm-vs-bert-a-step-by-step-guide-for-tweet- sentiment-analysis-ced697948c47?gi=5e1b3ad1bacc * https://www.pyimagesearch.com/2019/02/04/keras-multiple-inputs-and-mixed-data/ * https://github.com/suji04/normalizednerd/blob/master/introduction%20to%20nlp/sa rcasm%20is%20very%20easy%20to%20detect%20glove%2blstm.ipynb * https://rcciit.org/students_projects/projects/cse/2018/gr6.pdf cs 410: text information systems course project proposal - text classification competition: twitter sarcasm detection submitted by: mohan khanal (mkhanal2) mkhanal2@illinois.edu 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. o team name: mk (individual) o netids for all team: (only myself) # mohan khanal (netid: mkhanal2) o captain: myself (mkhanal2) 2. which competition do you plan to join? * text classification competition: twitter sarcasm detection 3. are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods * yes, i am prepared to learn state-of-the-art neural network classifiers * framework/architecture looking to learn and utilize: recurrent neural networks (rnn) , bidirectional encoder representations from transformers (bert). * i have done machine learning project previous for intrusion detection system, but it was not related to text classification. i am familiar with how machine learning models / neural network works. so, will be utilizing that knowledge to work on this text classification project and will also learn new things to carry out the project. 4. which programming language do you plan to use? * python courseproject team members mohan khanal (mkhanal2@illinois.edu) text classification competition: twitter sarcasm detection model used: lstm all the details about the project has been documented in the ""cs410 project documentation.pdf"" file out here. https://github.com/mkhanal2/courseproject/blob/main/cs410%20project%20documentation.pdf documents project proposal : https://github.com/mkhanal2/courseproject/blob/main/cs410%20project%20proposal.pdf project progress report : https://github.com/mkhanal2/courseproject/blob/main/cs410%20project%20-%20progress%20report.pdf project final document: https://github.com/mkhanal2/courseproject/blob/main/cs410%20project%20documentation.pdf source code python juputer notebook code: https://github.com/mkhanal2/courseproject/blob/main/source_code/project%20source%20code.ipynb video presentation link --> https://mediaspace.illinois.edu/media/1_3i2g9ehq output file answer.txt under source_code folder link: https://github.com/mkhanal2/courseproject/blob/main/source_code/answer.txt how to use/run the code the code is developed using python 3 (jupiter notebook). there is folder called source_code on the github (https://github.com/mkhanal2/courseproject) where we put all the documentation and source-code for the project. follow following instruction to run the code: - download the folder ""source_code"" from github (link above) - makes sure you have folder called ""data"" under source_code folder which has (train.jsonl, test.jsonl) files , all of these files and folder are already in github. - we would need one for file in this data folder. go to the link below to download the ""glove"" twitter file we need ""glove.twitter.27b.25d.txt"". after downloading the file for the link, unizip the file and copy the file ""glove.twitter.27b.25d.txt"" onto the data folder. - direct link - http://nlp.stanford.edu/data/glove.twitter.27b.zip - or: go to below link and download below mentioned file. - https://nlp.stanford.edu/projects/glove/ - download ""glove.twitter.27b.zip"" form this site. - note: chrome didn't work for me while downloading, so i used ""microsoft edge"" to download the above file. - now open jupiter notebook on you laptop (usually within anaconda). - using jupiter notebook open the source code from the downloaded folder (source code file name: project source code.ipynb) after that you can run the code. please make sure that all the packages used in the 2nd cell of the notebook are already installed. i have provided the instruction on 1st cell of the notebook on how to install the packages. text classification competition: twitter sarcasm detection dataset format: each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | for test, we've provided you the response and the context. we also provide the id (i.e., identifier) to report the results. submission instructions : follow the same instructions as for the mps -- create a private copy of this repo and add a webhook to connect to livedatalab.please add a comma separated file named answer.txt containing the predictions on the test dataset. the file should have no headers and have exactly 1800 rows. each row must have the sample id and the predicted label. for example: twitter_1,sarcasm twitter_2,not_sarcasm ..."	['cs', 'text', 'information', 'systems', 'course', 'project', 'progress', 'report', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'submitted', 'mohan', 'khanal', 'mkhanal', 'mkhanalillinoisedu', 'tasks', 'completed', 'reading', 'tweetsresponse', 'train', 'test', 'file', 'cleaning', 'data', 'producing', 'proper', 'training', 'testing', 'vectors', 'applying', 'deep', 'neural', 'network', 'lstm', 'set', 'using', 'trained', 'model', 'get', 'prediction', 'achieved', 'accuracy', 'f', 'score', 'current', 'multiple', 'iteration', 'pending', 'fine', 'tune', 'implemented', 'higher', 'beat', 'benchmark', 'document', 'approaches', 'tried', 'results', 'got', 'final', 'create', 'presentation', 'end', 'facing', 'challenges', 'big', 'issue', 'sometime', 'takes', 'longer', 'time', 'laptop', 'iterating', 'different', 'ideas', 'little', 'bit', 'especially', 'parameter', 'sets', 'range', 'contents', 'userun', 'code', 'background', 'design', 'detail', 'approach', 'walkthrough', 'preprocessing', 'preparation', 'building', 'conclusion', 'references', 'developed', 'python', 'jupiter', 'notebook', 'folder', 'called', 'source_code', 'github', 'httpsgithubcommkhanalcourseproject', 'put', 'documentation', 'sourcecode', 'follow', 'following', 'instruction', 'run', 'download', 'link', 'makes', 'sure', 'trainjsonl', 'testjsonl', 'files', 'already', 'would', 'need', 'one', 'go', 'glove', 'glovetwitterbdtxt', 'downloading', 'unizip', 'copy', 'onto', 'direct', 'httpnlpstanfordedudataglovetwitterbzip', 'mentioned', 'httpsnlpstanfordeduprojectsglove', 'glovetwitterbzip', 'form', 'site', 'note', 'chrome', 'didnt', 'work', 'used', 'microsoft', 'edge', 'open', 'usually', 'within', 'anaconda', 'source', 'downloaded', 'name', 'codeipynb', 'please', 'make', 'packages', 'nd', 'cell', 'installed', 'provided', 'st', 'install', 'part', 'cstext', 'system', 'done', 'two', 'given', 'us', 'another', 'contained', 'responses', 'response', 'context', 'conversation', 'happening', 'feed', 'aswell', 'could', 'use', 'want', 'since', 'task', 'also', 'label', 'point', 'not_sarcasm', 'job', 'predict', 'thing', 'records', 'present', 'labelled', 'dataset', 'required', 'machine', 'learning', 'finally', 'outcome', 'testdata', 'explains', 'details', 'around', 'carried', 'list', 'recurrent', 'models', 'long', 'short', 'term', 'memory', 'mostly', 'sequential', 'input', 'might', 'depend', 'sentence', 'structured', 'help', 'utilize', 'nature', 'explained', 'previous', 'section', 'first', 'inputs', 'feeding', 'sarcastic', 'diagram', 'gives', 'flow', 'rather', 'output', 'show', 'combinedaggregated', 'decide', 'combine', 'aggregated', 'combining', 'able', 'baseline', 'combined', 'discussing', 'responsetext', 'contexttext', 'stated', 'program', 'written', 'jupter', 'walkover', 'steps', 'going', 'covered', 'creating', 'vocabulary', 'vector', 'datalabel', 'prepared', 'combing', 'improve', 'process', 'step', 'read', 'json', 'contains', 'attributes', 'pandas', 'reader', 'function', 'read_json', 'emoji', 'hashtags', 'separately', 'custom', 'built', 'functions', 'placed', 'separate', 'columns', 'frame', 'utilized', 'doesnt', 'emojis', 'main', 'cleaned', 'build', 'remove', 'junk', 'characters', 'rephrase', 'wordings', 'trim', 'whitespaces', 'stops', 'words', 'like', 'etc', 'lemmatize', 'similar', 'type', 'represented', 'goes', 'cleanup', 'listarray', 'means', 'level', 'replies', 'tweet', 'reply', 'last', 'object', 'described', 'structure', 'screenshot', 'dataread', 'currently', 'convert', 'numeric', 'options', 'tokenize', 'integers', 'choose', 'embedding', 'layer', 'learn', 'pretrained', 'found', 'pre', 'better', 'selftrained', 'next', 'preprocessed', 'word', 'tokenized', 'length', 'modelnetwork', 'looking', 'max', 'x', 'x_cntx', 'may', 'look', 'line', 'left', 'padded', 'integer', 'ones', 'converted', 'specific', 'similarly', 'difference', 'find', 'lengths', 'preparing', 'represent', 'related', 'together', 'unrelated', 'farther', 'apart', 'way', 'representation', 'becomes', 'meaningful', 'previously', 'ways', 'wordvector', 'worked', 'selftraining', 'wordembedding', 'global', 'embedded', 'take', 'passed', 'bidirectional', 'sigmoid', 'activation', 'inputvector', 'conversion', 'wordvectors', 'fetched', 'matrix', 'layers', 'actual', 'frist', 'simple', 'pass', 'generated', 'second', 'combination', 'lstms', 'prepare', 'dataelements', 'split', 'testset', 'validation', 'snapshot', 'vectorcode', 'testvalidation', 'graph', 'drawn', 'trainjosnl', 'vectorized', 'passing', 'z', 'z_cntx', 'ie', 'model_', 'single', 'column', 'threshold', 'defined', 'result', 'value', 'halfway', 'cutoff', 'instead', 'determine', 'increased', 'recall', 'lot', 'less', 'impact', 'precision', 'trainingtesting', 'increase', 'overall', 'scoring', 'generate', 'answertxt', 'uploaded', 'livedatalab', 'predicting', 'exporting', 'runs', 'aggregating', 'shows', 'answerstxt', 'httpsgithubcommkhanalcourseprojectblobmainsource_codeanswertxt', 'discuss', 'alone', 'best', 'based', 'additional', 'containing', 'limited', 'although', 'made', 'efficient', 'tuneiterate', 'introduce', 'new', 'features', 'possibly', 'bert', 'due', 'lots', 'took', 'kind', 'topic', 'taken', 'snippet', 'listed', 'websitescodes', 'reference', 'learned', 'httpsadventuresinmachinelearningcomkeraslstmtutorial', 'httpsmachinelearningmasterycomcrashcoursedeeplearningnaturallanguage', 'processing', 'httpswwwaclweborganthologycpdf', 'httpsmachinelearningmasterycomtimedistributedlayerforlongshortterm', 'memorynetworksinpython', 'httpswwwkagglecommkowoodsdeeplearninglstmfortweetclassification', 'httpsgithubcomaniskywalkersarcasmdetection', 'httpswwwkagglecomctweetsentimentextractiondiscussion', 'httpsarxivorgpdfpdf', 'httpswwwaclweborganthologyfiglangpdf', 'httpsgithubcommirunapislarsarcasmdetection', 'httpswwwyoutubecomwatchvpmjtgixco', 'httpstowardsdatasciencecomlstmvsbertastepbystepguidefortweet', 'sentimentanalysiscedcgiebadbacc', 'httpswwwpyimagesearchcomkerasmultipleinputsandmixeddata', 'httpsgithubcomsujinormalizednerdblobmasterintroductiontonlpsa', 'rcasmisveryeasytodetectgloveblstmipynb', 'httpsrcciitorgstudents_projectsprojectscsegrpdf', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'mk', 'individual', 'netid', 'plan', 'join', 'stateoftheart', 'classifiers', 'frameworks', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'yes', 'frameworkarchitecture', 'networks', 'rnn', 'encoder', 'representations', 'transformers', 'intrusion', 'familiar', 'works', 'utilizing', 'knowledge', 'things', 'carry', 'programming', 'language', 'courseproject', 'documented', 'documentationpdf', 'httpsgithubcommkhanalcourseprojectblobmaincsprojectdocumentationpdf', 'documents', 'httpsgithubcommkhanalcourseprojectblobmaincsprojectproposalpdf', 'httpsgithubcommkhanalcourseprojectblobmaincsprojectprogressreportpdf', 'juputer', 'httpsgithubcommkhanalcourseprojectblobmainsource_codeprojectsourcecodeipynb', 'video', 'httpsmediaspaceillinoisedumedia_igehq', 'format', 'fields', 'classified', 'ordered', 'dialogue', 'three', 'elements', 'c', 'order', 'id', 'string', 'identifier', 'sample', 'making', 'submissions', 'instance', 'example', 'user', 'dont', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'fact', 'immediate', 'goal', 'optionally', 'full', 'size', 'statistics', 'weve', 'provide', 'submission', 'instructions', 'mps', 'private', 'repo', 'add', 'webhook', 'connect', 'livedatalabplease', 'comma', 'separated', 'predictions', 'headers', 'exactly', 'rows', 'row', 'must', 'predicted', 'twitter_sarcasm', 'twitter_not_sarcasm']
https://github.com/mlbernardoni/CourseProject	"cs410 project submission topic: reproducing a paper: mining causal topics in text data: iterative topic modeling with time series feedback. hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 team: pym first last email pallavi ravada pravada2@illinois.edu yash skhwani yashas2@illinois.edu michael bernardoni mlb12@illinois.edu link to video: https://illinois.zoom.us/rec/play/p1k2d8oxy9zlmu52qakeyekw6uxafwelbo2aqz6r_dgsbhky06jjyyqt uehspfex-fep54mhekpedyt1.orgucocp6xsypu7d?continuemode=true initial setup a lot of preparation when into getting the environment ready even before the itmtf algorithm was analyzed in detail. first, data had to be collected, mined, prepped, and reduced into a form that could easily be loaded before each run. furthermore topic mining and stats libraries had to be selected. detailed analysis of these data curation steps and the library selection can be found in the appendix. detailed instruction of the steps to setup the python environment and the libraries used can be found in the last sections of the appendix (and in the readme file). creation of a baseline after the data was procured and cleaned, and the python environment created, we first set about creating a baseline. a tricky prospect in any topic mining algorithm is selecting the number of topics. the gensim library has logging that allowed us to take a reasonable guess at a preliminary topic number. we created baselines with 10, 15, 20, 25, and 30 topics. using the logging module, we captured the coherence of each model. while the paper suggested that 30 topics was an appropriate number (section 5.2.3), the results of the coherence logging gave us a hint that 20 topics might also be a good number to analyze. (if interested, the logging code is in notebook: coherence_create_helper. the logging was also used to tune the number of passes and the number of iterations to show that the model would converge with our extreme settings for decay.) we then set about re-creating the algorithm in the paper. an analysis of the ""classical"" algorithm can be found in the section classical itmtf algorithm. in addition to re-creating the algorithm, we set about creating an ""improved"" algorithm. 4.00e-01 4.50e-01 5.00e-01 10 15 20 25 30 coherence instructions on running iterations with both the classical algorithm and the ""improved"" algorithm are in the comments of the main notebook: itmtf (note: the itmtf notebook is the entry point to running the algorithm. detailed comments on the parameter set up can be found at the top of the notebook) ""improving"" the algorithm after recreating the paper's algorithm, we set about seeing if we could improve upon it. while analyzing the paper, a sentence caught our eye. section 4.2.3 ""while we observe correlations between non-textual series and both word streams and topic streams, we do not compute correlations for all word streams. word level analysis would give us finer grain signals. however, generating all the word frequency time series and testing correlations would be very inefficient."" the documents are stationary, thus the word series would be static over time. the word streams, along with the granger and pearson statistics could be pre-processed. our data mining had already collected the words per document, and the documents per time slice. it was not difficult to create word stream and pre-process all of the pearson and granger stats. (please refer to the jupyter notebook itmtf_prerun_stats to see the python code used to pre-process the granger and pearson statistics.) (please refer to the appendix for all of the libraries used in this project). in our ""classic"" algorithm, after we run the granger test on the topic coverage stream, we added one step. we multiplied the topic/word probability from the model with the p-value that we had pre- processed for the word streams. we normalized this new number. the hope was that the algorithm would ""nudge"" the model into selecting words with higher statistical relevance to the betting time series and not just the words the model had selected as the top words. this change did improve the algorithm, but we wished for something ""bigger"". (the final implementation of the classic algorithm in the project directory does contain this change.) the goal of the algorithm is to iteratively improve our confidence in the topics selected by the algorithm. the topic modeling algorithm will refine topic coherence, and the itmtf algorithm would then use word level analysis as a prior to nudge the topic modeling software toward more significant word choice for the topic. a large part of the itmtf algorithm is the splitting of significant topics with ""positive"" words placed in one topic, and ""negative"" words placed in another. we decide to try a different (and simpler) approach. one of the benefits of topic modeling is words can have different impact in different contexts. for example, the word ""rights"" can have one impact on the betting sequence data if used in the context discussing ""second amendment rights"", and a different impact in another context discussing ""civil rights"". the classical algorithm would separate out the word ""rights"" in one of these topics. we created a simplified algorithm where the topics created by the model were left in place, only at each iteration we would analysis on every word (based upon the pre-processed word stream statistics). how the new algorithm works: 1. run the model 2. run a granger analysis on the topic coverage across the time series (same as the classical algorithm) a. note this analysis is not used to refine the model, but is used to gather the confidence score for the run b. keep the current state if the confidence score of this new run is higher than the previous high confidence score 3. for each topic, multiply each word probability by the pre-process p-value of that word from the word stream analysis, and normalize 4. use the new topic/word probabilities as a prior into the next round we ran the algorithm using 20, 30, and 40 topics. results are shown below: the runs resulted in remarkably similar scores. all 3 results seemed to hit a peak at the 11 or 12 iteration mark, and then all 3 models recovered to hit an ultimate peak at the14-16 iteration mark. we also ran the 30 topic model over 30 iterations, to identify if there were further peaks - there were not. results shown below: 0.7 0.75 0.8 0.85 1 2 3 4 5 6 7 8 9 101112131415161718192021 20 topic 0.7 0.75 0.8 0.85 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 30 topics 0.6 0.7 0.8 0.9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 40 topics 0.65 0.7 0.75 0.8 0.85 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 30 iteration the next step was to analyze the word output to see what was happening to the desired result. we captured the top words for significant topics at the 11-13 peak, and the peak that occurs after 16. the top words are shown below: 11 iteration peak 16 iteration peak it became clear that after the first peak centered around 11th iterations, the model began to over fit the data with only words that were highly correlated to the betting data, such as ""gore"" and ""bush"". the conclusion was for this set of data, the peak that occurs around 11 iterations produces the best data. next we turned our attention to the number of topics. we conducted 13 iteration runs with 40, 30, and 20 topics. the produced word data is shown below: 13 iteration runs with 20, 30, 40 topics. for this set of data, 30 topics produced the best data. with 30 topics relevant data was quite dense. next we looked at the effect of decay. we ran 30 topic runs for 13 iterations with decay settings at .001 (strong effect from priors), .5 (the default for the gensim library), .75 (the default for several other lda libraries), and .9 (very low effect from priors) 0 g+: gore b+: bush g+: court g+: president g+: campaign g+: abortion g+: george g+: al b+: gores g+: justices 3 b+: bush g+: george b+: police g+: school g+: governor g+: family b+: glenn b+: crime g+: avenue g+: black 5 b+: bush g+: gore g+: education b+: tax b+: bushs g+: social g+: security g+: president b+: federal g+: george 8 b+: bush g+: gore g+: campaign b+: bushs g+: president g+: texas g+: george g+: governor g+: people b+: vice 12 b+: vidal g+: gore b+: bushnell b+: author g+: love g+: oct b+: city b+: theater b+: sex b+: page 21 g+: gore g+: clinton g+: president b+: gores g+: al g+: convention g+: campaign g+: speech b+: vice b+: bush 22 b+: bush g+: george g+: republican g+: gov g+: national g+: abortion g+: president g+: prochoice g+: forces b+: antiabortion 4 g+: gore g+: health b+: bush g+: president b+: vice g+: governor b+: care g+: children b+: lehrer b+: companies 7 b+: industry g+: aug g+: entertainmentg+: re b+: gores b+: city g+: oped g+: brooklyn g+: gorey g+: bartlett 16 b+: bush b+: bushs g+: texas g+: gore g+: governor g+: george g+: president b+: visited g+: campaign g+: hours 20 g+: president g+: gore g+: abortion b+: bush g+: court g+: rights b+: vice g+: clinton g+: al g+: george 22 b+: article b+: page b+: bush g+: front g+: george g+: oct g+: al g+: policy b+: yesterday g+: misstated 40 0 g+: gore g+: russia b+: agreement g+: arms b+: chernomyrdin b+: congress b+: weapons b+: russian g+: minister g+: law 3 g+: gore b+: industry b+: bush g+: entertainment b+: war b+: gores g+: day b+: pine g+: coffees b+: vidal 7 g+: gun b+: bush b+: control g+: gore b+: association g+: bill g+: texas g+: law g+: rifle g+: guns 8 g+: gore b+: bush g+: nader g+: campaign g+: president g+: al b+: vice b+: gores g+: george g+: vote 10 b+: bush b+: debates g+: campaign g+: gore g+: debate g+: commission g+: presidential b+: bushs g+: president b+: officials 19 b+: bush g+: texas g+: governor b+: bushs g+: governors g+: george g+: gore g+: hispanic g+: campaign g+: president 22 g+: administration b+: bush g+: gore g+: gorey b+: companies g+: issues g+: top b+: telecommunications g+: al b+: federal 24 g+: security g+: social g+: gore b+: bush b+: plan g+: campaign b+: gores b+: bushs g+: money g+: president 26 g+: gore g+: al b+: gores g+: convention g+: president g+: campaign g+: vietnam g+: democratic g+: speech g+: family 28 g+: debate b+: bush g+: gore g+: president g+: george b+: vice g+: al b+: lehrer g+: people g+: texas 29 b+: bush b+: bushs g+: george g+: friends g+: texas g+: campaign b+: father g+: family g+: people b+: time 30 b+: article g+: bushwick b+: yesterday b+: am g+: misstated g+: street g+: brooklyn g+: york g+: name b+: copies 31 g+: abortion g+: rights g+: president b+: bush g+: george g+: support g+: republican b+: decision g+: platform b+: nominee 33 b+: bush g+: gore g+: president g+: campaign g+: al b+: vice g+: george g+: clinton b+: gores g+: house 36 b+: lazio g+: clinton g+: george b+: donors b+: senate g+: republican g+: political g+: campaign g+: presidential g+: daley 30 1 b+: lazio b+: bush g+: george g+: york g+: clinton b+: lazios g+: hillary g+: gore g+: al g+: campaign 2 b+: bush g+: court g+: governor g+: george g+: gore g+: death g+: president g+: texas g+: troops g+: penalty 4 b+: drug b+: medicare b+: plan b+: prescription g+: health b+: bush b+: coverage b+: insurance b+: elderly b+: companies 10 g+: ms b+: women g+: im g+: husband g+: book g+: life g+: tipper g+: schiff g+: wife b+: bushnell 13 b+: bush b+: commercial g+: campaign g+: ad b+: advertisement g+: vietnam b+: screen b+: military b+: word b+: rats 20 g+: gore b+: bush b+: tax b+: plan b+: bushs g+: security g+: social b+: gores g+: president b+: cut 25 b+: bush g+: gore g+: george g+: al b+: letterman g+: debate b+: jokes b+: comedy g+: president g+: hes 26 g+: black g+: gore g+: al g+: president b+: article b+: bush g+: george b+: play b+: vice b+: copies 29 b+: bush b+: baseball b+: rangers g+: team b+: owners b+: war g+: george b+: owner b+: arlington g+: stadium 20 6 g+: bushwick g+: avenue b+: police g+: york g+: street b+: vidal g+: brooklyn b+: theater b+: university g+: gorey 12 g+: gore b+: bush g+: percent b+: gores g+: debate g+: voters g+: president b+: poll b+: vice g+: people 14 g+: gore g+: campaign b+: bush b+: fundraising g+: house g+: president b+: million g+: white g+: democratic b+: vice 16 b+: bush g+: texas g+: gore g+: abortion g+: george b+: issue g+: governor g+: president g+: gun g+: gov decay output what we discovered was the new algorithm produced very similar data with differing decay settings. all runs had a peak at the 9-11 iterations, then varying fluctuations thereafter. at the lowest decay (highest impact from the prior) the fluctuations leading up to the 11th iteration peak were quite even and the can in confidence was steady. as one would expect, with the highest level of decay (lowest impact from the prior) the confidence remained quite flat. the intermediate levels of decay, .5 (the gensim default) and .75 (the default for other lda libraries) both showed improved confidence with a peak around the 11th iteration. the new algorithm proved to be quite effective for this set of data. confidence steadily improved and reached a peak around the 11th iteration. after that peak, the algorithm began to over fit the data and produce topics with few, but highly significant, words. furthermore, the new algorithm was successful without an overreliance on hyper parameter tuning. the number of topics had to be selected, but the default values for decay from the gensim library produced results. the new algorithm did require more iterations than the classic algorithm, and the word streams had to be pre-processed. however, once tuned, the granger analysis would only need to be conducted during the peak window (9-12 iterations) looking for the maximum confidence. 0.7 0.75 0.8 0.85 1 3 5 7 9 11 13 15 17 19 21 decay .001 0.65 0.7 0.75 0.8 0.85 1 3 5 7 9 11 13 15 17 19 21 decay .5 0.6 0.7 0.8 0.9 1 3 5 7 9 11 13 15 17 19 21 decay .75 0.6 0.7 0.8 0.9 1 3 5 7 9 11 13 15 17 19 21 decay .9 classical itmtf algorithm the team was able to re-crate the classical algorithm from the paper. the only real variation was the use of lda vs plsa. the paper used plsa, but did state that any topic mining algorithm would work. in fact, that was one of the thrusts of the paper, a general framework. as discussed below, gensim lda was selected as it performed an iteration in a reasonable time (2 minutes vs over a  1/2  hour for the python plsa algorithm). below are some of the plots produced by our implementation of the algorithm. (please refer to the notebook classic_baseline_plot) when compared to the graphs produced in the paper, our implantation produced similar results. the average causality confidence steadily increased with both implementations, with higher prior impact showing the best results. both implementations had somewhat flat purity. we are unsure why the published results had such poor baseline numbers. the poor baseline numbers in the published word made the first iteration appear like a substantial jump. our algorithm did show a large improvement for the first iteration (especially with the larger prior influence, as in the published paper), just not as dramatic. another variable would be the data cleaning. one of the topics published has ""pres"" ""al"" ""vice"" as its top 3 words. this topic clearly is about vice president al gore. it seems the words ""gore"" and ""bush"" were removed as part of the data cleaning for the paper. this would have a large impact on the model, as the p-values for the words ""gore"" and ""bush"" were the largest of all words. appendix - data mining and cleansing the python code used to clean the data can be viewed in the itmtf_cleaning jyputer notebook. step 1: data mining first we mined the raw xml data and produced a .txt for each document that had a paragraph with the words ""gore"" or ""bush"". we only included the paragraphs with the key words, but we kept the document intact, that is if a doc had 2 paragraphs with either the word ""bush"" or ""gore"" the output would be one document with those 2 paragraphs. note this is just prep work and is not included in the project for size considerations. step 2: data cleansing - .\lda_data\ldadata.csv for each file in the mined directory, we split the string into words. for each word we made each word lowercase, stripped out any character that was not alpha, and removed all stop words. we used stop words from: onix text retrieval toolkit stop word list 1: https://www.lextek.com/manuals/onix/stopwords1.html . we added the results for each document in a .csv file .\lda_data\ldadata.csv. each document is a row: cell 1 contains the year; cell 2 contains the month; cell 3 contains the day; cell 4 contains the cleansed text string of the document we also created a csv file .\lda_data\vocabulary.csv which contains unique vocabulary words in cell 1 and the count of the term in cell 2. step3: data reduction - .\lda_data\ldareduced.csv using the vocabulary csv .\lda_data\vocabulary.csv from step 2, we removed any word that only occurred once or twice (all words with counts over 2 were kept). we produced a csv file .\lda_data\vocabularyreduced.csv which contains the new list of unique vocabulary words. using the new vocabulary, we created a new csv .\lda_data\ldareduced.csv in the same form as the un-reduced csv. step 3: word coverage per time slice - .\lda_data\wordseries.csv using the vocabularyreduced.csv and the ldareduced.csv we pre=processed a csv that contains the word coverage per time slice - .\lda_data\wordseries.csv. the first row is a header row that contains the unique words in the vocabulary, this row is not used in the algorithm, but makes the file human readable. the first column in each row contains the time slice. all subsequent columns contain the word coverage during that time slice. this pre-processed file will be used in the itmtf algorithm. current data mining and cleansing files in the project: .\lda_data\ldadata.csv cleaned data .\ lda_data\vocabulary.csv cleaned data's vocabulary .\ lda_data\ldareduced.csv removed words occurring 1 or 2 .\ lda_data\vocabularyreduced.csv removed data's vocabulary .\ lda_data\ldawordseries.csv words counts per time slice step 4: betting information the betting data is publicly available at the following site: https://iemweb.biz.uiowa.edu/closed/pres00_wta.html python was used to clean the data, and smooth the data into both 3 day and 5 day averages. the python code can be viewed at the following site: bush vs gore betting data - google drive topic mining algorithm selection the paper indicates that the lda algorithm was used. as such, we attempted to us lda. first we discovered the lda algorithm pypi https://pypi.org/project/plsa/. the algorithm worked well in our test data sets, and had excellent data visualization techniques. we identified where to add new topics in the library's python code with the iteration feedback. however when we ran the full cleaned data, this library took over 12 hours to complete 1 model. one of our team members wrote a lda algorithm in c++. the c++ algorithm was significantly faster. however, running the entire corpus caused memory issues. time does not permit adding data swapping to disk. following the lead of other teams discussed on piazza, we then selected gensim's lda algorithm for topic mining https://radimrehurek.com/gensim/models/ldamodel.html#usage-examples. this algorithm does not have memory issues, and completes in a reasonable amount of time (under 10 min on one of team member's home desktop). instructions for adding this library into an anaconda environment is in the appendix. appendix - libraries used gensim python lda - https://radimrehurek.com/gensim/models/ldamodel.html scipy's pearson r - https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html statsmodels granger causality tests - https://www.statsmodels.org/stable/generated/statsmodels.tsa.stattools.grangercausalitytests.html pyldavis - https://pyldavis.readthedocs.io/en/latest/index.html glob - https://docs.python.org/3/library/glob.html matplotlib - https://matplotlib.org/ library tested but not used: pypi.orgs plsa - https://pypi.org/project/plsa/ appendix - environment setup for windows: open an anaconda prompt, navigate to the project's directory and type: conda env create -f itmtf.yml the created environment will be called ""gensim"", when you open the notebook, you will have to change kernels to gensim. see troubleshooting note below. adding gensim lda library to an anaconda environment manually: optional - create a new anaconda environment to install the gensim package: 1. open anaconda navigator 2. select environments 3. create an environment (i.e. ""gensim"") install genism in anaconda 1. open the anaconda command prompt 2. if you created a new environment in the previous step: a. activate the newly created environment if you created one (""activate gensim"") b. run: conda install nb_conda_kernels (proceed y) c. run: python -m ipykernel install --user --name myenv --display-name ""gensim"" (you can use any display name you wish, this is what will show up on jupyter notebook) d. run: pip install environment_kernels 3. run: pip install --upgrade genism 4. run: pip install -upgrade pyldavis 5. run: pip install -upgrade glob2 6. run: pip install -upgrade matplotlib start jupyter notebook in the directory you downloaded the project (if not your default) 1. open the anaconda command prompt 2. start jupyter notebook in the directory you have downloaded this project (i.e., ""jupyter notebook c:\projects"") troubleshooting note: when you open the project in jupyter notebook, look to the upper right and you can see what environment the project is running. if this is not the environment you just set up for gensim, select kernel from the notebook menu and select change kernel, and change to the correct kernel. cs410 project progress report topic: reproducing a paper: mining causal topics in text data: iterative topic modeling with time series feedback. team: pym first last email pallavi ravada pravada2@illinois.edu yash skhwani yashas2@illinois.edu michael bernardoni mlb12@illinois.edu tasks completed:  data mining and cleaning of the text documents - completed.  data mining and cleaning of the betting probabilities - completed.  production of the word/time slice coverage for the time period - completed.  topic mining algorithm selection - selected gensim lda.  topic mining on the entire corpus - lda algorithm implemented, baseline created  production of the topic coverage from one run of lda - completed.  adding new topics back into the lda algorithm after iteration - completed.  ability to iterate over the prior 3 steps for the entire time period - completed  understanding the itmtf algorithm - completed.  completed the setup instructions for gensim in anaconda - completed. tasks to do:  code the time sequence scoring function  code the word analysis scoring function  code the topic splitting  visualization of the final data challenges:  the article has a section on m. a m of 0 means the prior is not considered. the higher the m the stronger the prior. gensim lda has a concept of decay (between 0 and 1). like a m set to 0, if the decay is set to 1, the prior is not considered (similar to a m of 0). the gensim documentation states that a decay set between .5 and 1 will converge. we ran a test with a very small decay (.001), and the topic we added remained virtually intact. we are still discovering how the decay changes the itmtf algorithm, hopefully similar to m.  we are still discussing the topics to be carried forward to the next iteration. the article proposes a ""variable"" topic approach and discusses keeping ""buffer"" topics. not a challenge, but something we are looking at. detailed discussion of these steps follow: detailed discussion data mining and cleansing step 1: data mining first we mined the raw xml data and produced a .txt for each document that had a paragraph with the words ""gore"" or ""bush"". we only included the paragraphs with the key words, but we kept the document intact, that is if a doc had 2 paragraphs with either the word ""bush"" or ""gore"" the output would be one document with those 2 paragraphs. note this is just prep work and is not included in the project for size considerations. step 2: data cleansing - .\lda_data\ldadata.csv for each file in the mined directory, we split the string into words. for each word we made each word lowercase, stripped out any character that was not alpha, and removed all stop words. we used stop words from: onix text retrieval toolkit stop word list 1: https://www.lextek.com/manuals/onix/stopwords1.html . we added the results for each document in a .csv file .\lda_data\ldadata.csv. each document is a row: cell 1 contains the year; cell 2 contains the month; cell 3 contains the day; cell 4 contains the cleansed text string of the document we also created a csv file .\lda_data\vocabulary.csv which contains unique vocabulary words in cell 1 and the count of the term in cell 2. step3: data reduction - .\lda_data\ldareduced.csv using the vocabulary csv .\lda_data\vocabulary.csv from step 2, we removed any word that only occurred once or twice (all words with counts over 2 were kept). we produced a csv file .\lda_data\vocabularyreduced.csv which contains the new list of unique vocabulary words. using the new vocabulary, we created a new csv .\lda_data\ldareduced.csv in the same form as the un- reduced csv. step 3: word coverage per time slice - .\lda_data\wordseries.csv using the vocabularyreduced.csv and the ldareduced.csv we pre-processed a csv that contains the word coverage per time slice - .\lda_data\wordseries.csv. the first row is a header row that contains the unique words in the vocabulary, this row is not needed by the algorithm but was used during debugging. the first column in each row contains the time slice. all subsequent columns contain the word coverage during that time slice. this pre-processed file generates the word coverage over time used in the itmtf algorithm. current data mining, cleansing, and pre-processed files in the project: .\lda_data\ldadata.csv cleaned data .\lda_data\vocabulary.csv cleaned data's vocabulary .\lda_data\ldareduced.csv removed words occurring 1 or 2 .\lda_data\vocabularyreduced.csv removed data's vocabulary list .\lda_data\wordseries.csv words counts per time slice topic mining algorithm selection the paper indicates that any topic mining algorithm can be used, but the author used the plsa algorithm. as such, we attempted to use plsa. first we discovered the plsa algorithm pypi https://pypi.org/project/plsa/. the algorithm worked well in our test data sets, and had excellent data visualization techniques. the code did not have out of the box ways to add topics and topic priors, but the code was available. so we identified where to add new topics and where to set topic priors in the library's python code. however when we ran the full cleaned data, this library took over 12 hours to complete 1 model, and we would have to iterate 6-7 times. one of our team members wrote a plsa algorithm in c++. the c++ algorithm was significantly faster. however, running the entire corpus caused memory issues. time does not permit adding sparse matrix processing or data swapping to disk. following the lead of other teams' discussion on piazza, we then selected gensim's lda algorithm for topic mining https://radimrehurek.com/gensim/models/ldamodel.html#usage-examples. this algorithm does not have memory issues as it works on document chunks, and completes in a reasonable amount of time due to its use of sparse matrix processing (under 10 min on one of team member's home desktop). as an added bonus, the library had a way to add new topics and priors. instructions for adding this library into an anaconda environment is in the appendix. algorithm iteration completed the first step, loading the pre-processed files into arrays, is complete. the documents are loaded into memory. the pre-processed file had the date in the first cell. while the document is loaded into memory an array is created of the docs per time slice. this array will be used to create the topic coverage per iteration. the word coverage preprocessed file is loaded into an array that can be used by the itmft algorithm. the loaded docs are loaded into the gensim's dictionary format. while loading the documents, a map is created that maps the index from the pre-processed vocabulary coverage to gensim's token index for that word. this map is used to create the new topic matrix in the correct sequence, when new topics are returned from the itmft algorithm. a gensim corpus is created from the gensim dict. as the documents do not change during the itmft algorithm (only the topic and topic priors), this corpus can be re-used throughout the entire itmft algorithm. running the gensim lda model is coded. the itmft iteration is coded: 1. the preprocessed word coverage is passed into the algorithm 2. the document/topic probabilities are pulled from the lda model 3. using the document to time slice matrix, a topic coverage matrix is created from the document/topic probabilities. 4. these 2 coverage matrices are passed into the itmft scoring function 5. the itmft scoring function will create a new matrix of new topics and word probabilities prior 6. the coding of adding this matrix back into the lda model is complete. to do: 1. code the itmft scoring function 2. code the itmft topic creation function appendix adding gensim lda library to an anaconda environment optional - create a new anaconda environment to install the gensim package: 1. open anaconda navigator 2. select environments 3. create an environment (i.e. ""gensim"") install genism in anaconda 1. open the anaconda command prompt 2. if you created a new environment in the previous step: a. activate the newly created environment if you created one (""activate gensim"") b. run: conda install nb_conda_kernels (proceed y) c. run: python -m ipykernel install --user --name myenv --display-name ""gensim"" (you can use any display name you wish, this is what will show up on jupyter notebook) d. run: pip install environment_kernels 3. run: pip install --upgrade gensim start jupyter notebook in the directory you downloaded the project (if not your default) 1. open the anaconda command prompt 2. start jupyter notebook in the directory you have downloaded this project (i.e., ""jupyter notebook c:\projects"") trouble shooting note: when you open the project in jupyter notebook, look to the upper right and you can see what environment the project is running if this is not the environment you just set up for gensim, select kernel from the notebook menu and select change kernel, and change to the correct kernel. team project proposal topic: reproducing a paper: mining causal topics in text data: iterative topic modeling with time series feedback. team: pym first last email pallavi ravada pravada2@illinois.edu yash skhwani yashas2@illinois.edu michael bernardoni mlb12@illinois.edu captain: michael bernardoni mlb12@illinois.edu github fork link: https://github.com/mlbernardoni/courseproject reproduce the following paper:  subtopic: causal topic modeling o hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 programming language: the team will initially proceed programming with python. however if performance becomes an issue c++ will be evaluated. tableau may be used for data visualization of the resulting datasets. dataset: the dataset can be found at the linguistic data consortium ( https://www.ldc.upenn.edu ). the team captain (mlb12@illinois.edu ) has applied to the consortium and is await approval from: university of illinois at urbana-champaign, beckman institute. this request has also been posted on piazza. once approval is obtained access to the dataset will be provided."	['cs', 'project', 'submission', 'topic', 'reproducing', 'paper', 'mining', 'causal', 'topics', 'text', 'data', 'iterative', 'modeling', 'time', 'series', 'feedback', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'proceedings', 'nd', 'acm', 'international', 'conference', 'information', 'knowledge', 'management', 'cikm', 'new', 'york', 'ny', 'usa', 'doi', 'team', 'pym', 'first', 'last', 'email', 'pallavi', 'ravada', 'pravadaillinoisedu', 'yash', 'skhwani', 'yashasillinoisedu', 'michael', 'bernardoni', 'mlbillinoisedu', 'link', 'video', 'httpsillinoiszoomusrecplaypkdoxyzlmuqakeyekwuxafwelboaqzr_dgsbhkyjjyyqt', 'uehspfexfepmhekpedytorgucocpxsypudcontinuemodetrue', 'initial', 'setup', 'lot', 'preparation', 'getting', 'environment', 'ready', 'even', 'itmtf', 'algorithm', 'analyzed', 'detail', 'collected', 'mined', 'prepped', 'reduced', 'form', 'could', 'easily', 'loaded', 'run', 'furthermore', 'stats', 'libraries', 'selected', 'detailed', 'analysis', 'curation', 'steps', 'library', 'selection', 'found', 'appendix', 'instruction', 'python', 'used', 'sections', 'readme', 'file', 'creation', 'baseline', 'procured', 'cleaned', 'created', 'set', 'creating', 'tricky', 'prospect', 'selecting', 'number', 'gensim', 'logging', 'allowed', 'us', 'take', 'reasonable', 'guess', 'preliminary', 'baselines', 'using', 'module', 'captured', 'coherence', 'model', 'suggested', 'appropriate', 'section', 'results', 'gave', 'hint', 'might', 'also', 'good', 'analyze', 'interested', 'code', 'notebook', 'coherence_create_helper', 'tune', 'passes', 'iterations', 'show', 'would', 'converge', 'extreme', 'settings', 'decay', 'recreating', 'classical', 'addition', 'improved', 'e', 'instructions', 'running', 'comments', 'main', 'note', 'entry', 'point', 'parameter', 'top', 'improving', 'papers', 'seeing', 'improve', 'upon', 'analyzing', 'sentence', 'caught', 'eye', 'observe', 'correlations', 'nontextual', 'word', 'streams', 'compute', 'level', 'give', 'finer', 'grain', 'signals', 'however', 'generating', 'frequency', 'testing', 'inefficient', 'documents', 'stationary', 'thus', 'static', 'along', 'granger', 'pearson', 'statistics', 'preprocessed', 'already', 'words', 'per', 'document', 'slice', 'difficult', 'create', 'stream', 'preprocess', 'please', 'refer', 'jupyter', 'itmtf_prerun_stats', 'see', 'classic', 'test', 'coverage', 'added', 'one', 'step', 'multiplied', 'topicword', 'probability', 'pvalue', 'pre', 'processed', 'normalized', 'hope', 'nudge', 'higher', 'statistical', 'relevance', 'betting', 'change', 'wished', 'something', 'bigger', 'final', 'implementation', 'directory', 'contain', 'goal', 'iteratively', 'confidence', 'refine', 'use', 'prior', 'software', 'toward', 'significant', 'choice', 'large', 'part', 'splitting', 'positive', 'placed', 'negative', 'another', 'decide', 'try', 'different', 'simpler', 'approach', 'benefits', 'impact', 'contexts', 'example', 'rights', 'sequence', 'context', 'discussing', 'second', 'amendment', 'civil', 'separate', 'simplified', 'left', 'place', 'iteration', 'every', 'based', 'works', 'across', 'gather', 'score', 'b', 'keep', 'current', 'state', 'previous', 'high', 'multiply', 'normalize', 'probabilities', 'next', 'round', 'ran', 'shown', 'runs', 'resulted', 'remarkably', 'similar', 'scores', 'seemed', 'hit', 'peak', 'mark', 'models', 'recovered', 'ultimate', 'identify', 'peaks', 'output', 'happening', 'desired', 'result', 'occurs', 'became', 'clear', 'centered', 'around', 'th', 'began', 'fit', 'highly', 'correlated', 'gore', 'bush', 'conclusion', 'produces', 'best', 'turned', 'attention', 'conducted', 'produced', 'relevant', 'quite', 'dense', 'looked', 'effect', 'strong', 'priors', 'default', 'several', 'lda', 'low', 'g', 'court', 'president', 'campaign', 'abortion', 'george', 'al', 'gores', 'justices', 'police', 'school', 'governor', 'family', 'glenn', 'crime', 'avenue', 'black', 'education', 'tax', 'bushs', 'social', 'security', 'federal', 'texas', 'people', 'vice', 'vidal', 'bushnell', 'author', 'love', 'oct', 'city', 'theater', 'sex', 'page', 'clinton', 'convention', 'speech', 'republican', 'gov', 'national', 'prochoice', 'forces', 'antiabortion', 'health', 'care', 'children', 'lehrer', 'companies', 'industry', 'aug', 'entertainmentg', 'oped', 'brooklyn', 'gorey', 'bartlett', 'visited', 'hours', 'article', 'front', 'policy', 'yesterday', 'misstated', 'russia', 'agreement', 'arms', 'chernomyrdin', 'congress', 'weapons', 'russian', 'minister', 'law', 'entertainment', 'war', 'day', 'pine', 'coffees', 'gun', 'control', 'association', 'bill', 'rifle', 'guns', 'nader', 'vote', 'debates', 'debate', 'commission', 'presidential', 'officials', 'governors', 'hispanic', 'administration', 'issues', 'telecommunications', 'plan', 'money', 'vietnam', 'democratic', 'friends', 'father', 'bushwick', 'street', 'name', 'copies', 'support', 'decision', 'platform', 'nominee', 'house', 'lazio', 'donors', 'senate', 'political', 'daley', 'lazios', 'hillary', 'death', 'troops', 'penalty', 'drug', 'medicare', 'prescription', 'insurance', 'elderly', 'ms', 'women', 'im', 'husband', 'book', 'life', 'tipper', 'schiff', 'wife', 'commercial', 'ad', 'advertisement', 'screen', 'military', 'rats', 'cut', 'letterman', 'jokes', 'comedy', 'hes', 'play', 'baseball', 'rangers', 'owners', 'owner', 'arlington', 'stadium', 'university', 'percent', 'voters', 'poll', 'fundraising', 'million', 'white', 'issue', 'discovered', 'differing', 'varying', 'fluctuations', 'thereafter', 'lowest', 'highest', 'leading', 'steady', 'expect', 'remained', 'flat', 'intermediate', 'levels', 'showed', 'proved', 'effective', 'steadily', 'reached', 'produce', 'successful', 'without', 'overreliance', 'hyper', 'tuning', 'values', 'require', 'tuned', 'need', 'window', 'looking', 'maximum', 'able', 'recrate', 'real', 'variation', 'vs', 'plsa', 'work', 'fact', 'thrusts', 'general', 'framework', 'discussed', 'performed', 'minutes', 'hour', 'plots', 'classic_baseline_plot', 'compared', 'graphs', 'implantation', 'average', 'causality', 'increased', 'implementations', 'showing', 'somewhat', 'purity', 'unsure', 'published', 'poor', 'numbers', 'made', 'appear', 'like', 'substantial', 'jump', 'improvement', 'especially', 'larger', 'influence', 'dramatic', 'variable', 'cleaning', 'pres', 'clearly', 'seems', 'removed', 'pvalues', 'largest', 'cleansing', 'clean', 'viewed', 'itmtf_cleaning', 'jyputer', 'raw', 'xml', 'txt', 'paragraph', 'included', 'paragraphs', 'key', 'kept', 'intact', 'doc', 'either', 'prep', 'size', 'considerations', 'lda_dataldadatacsv', 'split', 'string', 'lowercase', 'stripped', 'character', 'alpha', 'stop', 'onix', 'retrieval', 'toolkit', 'list', 'httpswwwlextekcommanualsonixstopwordshtml', 'csv', 'row', 'cell', 'contains', 'year', 'month', 'cleansed', 'lda_datavocabularycsv', 'unique', 'vocabulary', 'count', 'term', 'reduction', 'lda_dataldareducedcsv', 'occurred', 'twice', 'counts', 'lda_datavocabularyreducedcsv', 'unreduced', 'lda_datawordseriescsv', 'vocabularyreducedcsv', 'ldareducedcsv', 'header', 'makes', 'human', 'readable', 'column', 'subsequent', 'columns', 'files', 'datas', 'occurring', 'lda_dataldawordseriescsv', 'publicly', 'available', 'following', 'site', 'httpsiemwebbizuiowaeduclosedpres_wtahtml', 'smooth', 'averages', 'google', 'drive', 'indicates', 'attempted', 'pypi', 'httpspypiorgprojectplsa', 'worked', 'well', 'sets', 'excellent', 'visualization', 'techniques', 'identified', 'add', 'librarys', 'full', 'took', 'complete', 'members', 'wrote', 'c', 'significantly', 'faster', 'entire', 'corpus', 'caused', 'memory', 'permit', 'adding', 'swapping', 'disk', 'lead', 'teams', 'piazza', 'gensims', 'httpsradimrehurekcomgensimmodelsldamodelhtmlusageexamples', 'completes', 'amount', 'min', 'home', 'desktop', 'anaconda', 'httpsradimrehurekcomgensimmodelsldamodelhtml', 'scipys', 'r', 'httpsdocsscipyorgdocscipyreferencegeneratedscipystatspearsonrhtml', 'statsmodels', 'tests', 'httpswwwstatsmodelsorgstablegeneratedstatsmodelstsastattoolsgrangercausalitytestshtml', 'pyldavis', 'httpspyldavisreadthedocsioenlatestindexhtml', 'glob', 'httpsdocspythonorglibraryglobhtml', 'matplotlib', 'httpsmatplotliborg', 'tested', 'pypiorgs', 'windows', 'open', 'prompt', 'navigate', 'projects', 'type', 'conda', 'env', 'f', 'itmtfyml', 'called', 'kernels', 'troubleshooting', 'manually', 'optional', 'install', 'package', 'navigator', 'select', 'environments', 'ie', 'genism', 'command', 'activate', 'newly', 'nb_conda_kernels', 'proceed', 'ipykernel', 'user', 'myenv', 'displayname', 'display', 'wish', 'pip', 'environment_kernels', 'upgrade', 'start', 'downloaded', 'cprojects', 'look', 'upper', 'right', 'kernel', 'menu', 'correct', 'progress', 'report', 'tasks', 'completed', 'production', 'wordtime', 'period', 'implemented', 'back', 'ability', 'iterate', 'understanding', 'scoring', 'function', 'challenges', 'means', 'considered', 'stronger', 'concept', 'documentation', 'states', 'small', 'virtually', 'still', 'discovering', 'changes', 'hopefully', 'carried', 'forward', 'proposes', 'discusses', 'keeping', 'buffer', 'challenge', 'discussion', 'follow', 'un', 'needed', 'debugging', 'generates', 'box', 'ways', 'times', 'sparse', 'matrix', 'processing', 'chunks', 'due', 'bonus', 'way', 'loading', 'arrays', 'date', 'array', 'docs', 'itmft', 'dictionary', 'format', 'map', 'maps', 'index', 'token', 'returned', 'dict', 'reused', 'throughout', 'coded', 'passed', 'documenttopic', 'pulled', 'matrices', 'coding', 'trouble', 'shooting', 'proposal', 'captain', 'github', 'fork', 'httpsgithubcommlbernardonicourseproject', 'reproduce', 'subtopic', 'programming', 'language', 'initially', 'performance', 'becomes', 'evaluated', 'tableau', 'may', 'resulting', 'datasets', 'dataset', 'linguistic', 'consortium', 'httpswwwldcupennedu', 'applied', 'await', 'approval', 'illinois', 'urbanachampaign', 'beckman', 'institute', 'request', 'posted', 'obtained', 'access', 'provided']
https://github.com/mrente5/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/mshaw0707/CourseProject	progress report 11/29/2020 1) progress made thus far i am using a jupyter notebook in google colab for the project with pytorch. i have read the data into pandas arrays and am working on training the models. currently i have the code in place to split the data into training/validation/test sets and the scaffold code for training the models (currently investigating using lstm and bert type models). 2) remaining tasks - finish the training code to obtain the optimal hyperparameters for the best models - format the output into answers.txt for submission on livedatalab - add a readme/comments. the code should be straightforward for anyone to run via google colab (i am on the free tier) 3) any challenges/issues not currently blocked on anything; i am fairly confident that one of the models will be able to beat the baseline from the reading i have done online regarding using pytorch for text classification. cs410 fall 2020 project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. mathew shaw, netid: mcshaw2 i am doing the project solo. 2. which competition do you plan to join? i will be joining the text classification competition. 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. i plan to use pytorch to create the classifier for the competition. i have previously used the framework for some experimental image classification tasks. if pytorch does not work out for this task i will look into alternatives like keras. 4. which programming language do you plan to use? python courseproject (text classification) overview the project i chose was the sarcasm detection competition. i successfully beat the baseline by training a pytorch bert model using the huggingface transformers library. i first researched what types of models could be used for this manner of text classification and found that the huggingface library (https://huggingface.co/) had multiple pretrained models to suit this goal. some minor data cleanup and preprocessing on the training/test data sets, along with concatinating the immediate context with the response allowed me to beat the baseline. libraries/languages python pytorch huggingface transformers pandas sklearn implementation i developed the entire project within a google colab (https://colab.research.google.com/) notebook. i used the free tier for all development and the final model training. i recommend opening the ipynb in colab to run the code without needing to configure any of the libraries locally. usage open cs410project.ipynb in google colab (https://colab.research.google.com/) the data storage for a google colab workspace is ephemeral, so the train.jsonl and test.jsonl files must be uploaded to the workspace storage each time. (optional) for faster model training, click edit -> notebook settings, then set the hardware accelerator to 'gpu' inside the popup. this was available for me using the free tier of colab during development. the code will default to cpu computation if this is not done and the model will take longer to train. run all code blocks in order. the file answer.txt will be created in the workspace for download. i used 5 epochs for training and it generated predictions that beat the baseline. presentation i did not have time to do a presentation.	['progress', 'report', 'made', 'thus', 'far', 'using', 'jupyter', 'notebook', 'google', 'colab', 'project', 'pytorch', 'read', 'data', 'pandas', 'arrays', 'working', 'training', 'models', 'currently', 'code', 'place', 'split', 'trainingvalidationtest', 'sets', 'scaffold', 'investigating', 'lstm', 'bert', 'type', 'remaining', 'tasks', 'finish', 'obtain', 'optimal', 'hyperparameters', 'best', 'format', 'output', 'answerstxt', 'submission', 'livedatalab', 'add', 'readmecomments', 'straightforward', 'anyone', 'run', 'via', 'free', 'tier', 'challengesissues', 'blocked', 'anything', 'fairly', 'confident', 'one', 'able', 'beat', 'baseline', 'reading', 'done', 'online', 'regarding', 'text', 'classification', 'cs', 'fall', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'mathew', 'shaw', 'netid', 'mcshaw', 'solo', 'competition', 'plan', 'join', 'joining', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'like', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'learning', 'etc', 'name', 'concrete', 'tools', 'may', 'heard', 'neural', 'network', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'use', 'create', 'classifier', 'previously', 'used', 'framework', 'experimental', 'image', 'work', 'task', 'look', 'alternatives', 'keras', 'programming', 'language', 'python', 'courseproject', 'overview', 'chose', 'sarcasm', 'detection', 'successfully', 'model', 'huggingface', 'transformers', 'library', 'first', 'researched', 'types', 'could', 'manner', 'found', 'httpshuggingfaceco', 'multiple', 'pretrained', 'suit', 'goal', 'minor', 'cleanup', 'preprocessing', 'trainingtest', 'along', 'concatinating', 'immediate', 'context', 'response', 'allowed', 'librarieslanguages', 'sklearn', 'implementation', 'developed', 'entire', 'within', 'httpscolabresearchgooglecom', 'development', 'final', 'recommend', 'opening', 'ipynb', 'without', 'needing', 'configure', 'libraries', 'locally', 'usage', 'open', 'csprojectipynb', 'storage', 'workspace', 'ephemeral', 'trainjsonl', 'testjsonl', 'files', 'must', 'uploaded', 'time', 'optional', 'faster', 'click', 'edit', 'settings', 'set', 'hardware', 'accelerator', 'gpu', 'inside', 'popup', 'available', 'default', 'cpu', 'computation', 'take', 'longer', 'train', 'blocks', 'order', 'file', 'answertxt', 'created', 'download', 'epochs', 'generated', 'predictions', 'presentation']
https://github.com/myusername-2/CourseProject	course project progress report shai yusov (syusov2@illinois.edu) system: educationalweb system subtopic: identifying in-demand skills 1. progress made thus far my project is about automatically identifying in-demand skills. the original plan was to scrape and analyze job postings for software engineers in new york, ny, from the job board indeed and then extract the top skills from that dataset. so far, i have written, tested, and executed a component to scrape job postings for software engineers in new york, ny, from indeed, to clean the scraped the data, and to save all processed job postings to a file; i have thoroughly investigated various algorithms and approaches to extracting the top keywords, and thus most in-demand skills, from the dataset; i have written and tested a component to ingest the dataset and extract the top skills using a keyword extraction algorithm; and i have compared and instrumented various approaches to extracting the top skills to achieve the best results. i have taken care to isolate the interfaces of these components from the implementation details as much as possible so that the functionality will be generic and could potentially integrate with other tools and systems in a straightforward manner. 2. remaining tasks the primary tasks of this project are complete. 3. challenges and issues when scraping job postings from indeed, the primary issue i have faced is how to successfully extract all the needed pages in a timely manner and without being throttled. specifically, my use case involves scanning job results pages, then obtaining job post links from that page, and so on. if executed in serial, this process would be rather slow, so i parallelized this io-intensive process using a pool of threads that fetch and extract information from pages in parallel. this led to a significant speedup. i also had to account for various failures so i implemented retry-able mechanisms to ensure graceful error recovery. overall, i was able to download all the data. another issue i am facing is that, so far, the keyword extractions algorithms with the highest subjective quality of results are also the ones taking the longest. specifically, it seems that an implementation of textrank produces fairly relevant results but takes a little longer to finish, while other algorithm implementations of rake, yake, and tf-idf produce somewhat more diluted results but in a shorter amount of time. course project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. - shai yusov (syusov2@illinois.edu). it's a team of one and i will be the captain. 2. what system have you chosen? which subtopic(s) under the system? - system: educationalweb system - subtopic: automatically creating teaching material for in-demand skills - identifying in- demand skills 3. briefly describe the datasets, algorithms or techniques you plan to use - i plan to crawl and analyze job postings for software engineers in new york, ny, on the job board indeed. after obtaining these postings, the dataset will be pre-processed and fed into a component that will be responsible for identifying the emerging keywords/topics. the identification process will likely involve keyword extraction and/or topic mining. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? - i will demonstrate that the function identifies in-demand skills by running it on the input dataset, obtaining the top emerging keywords/topics, and validating the results through human judgement and known industry trends. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly - i plan to build a standalone system/component for this project. specifically, the system will ingest a dataset and output the top emerging keywords/topics from that dataset. although outside the scope of this project, this functionality is generic and can be plugged into other tools so long as the input specification to the system is decoupled from the source or actual content and the outputs are emitted in a standard, easy-to-digest format. 6. which programming language do you plan to use? - i plan to use python for this project. 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. - writing, testing, and executing a customized web crawler: at least 10 hours - investigating and defining the right algorithms/techniques: at least 5 hours - writing and testing the component performing the identification: at least 10 hours courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview. project proposal project-proposal.pdf project progress report project-progress-report.pdf project presentation video presentation documentation 1. overview this project contains two main components that together automatically identify in-demand skils through scraping and analysis of job postings from the job board indeed for positions in new york, ny. indeed_scraper.py: scrapes job postings in new york, ny, for a user-specified query. specifically, it runs a user query on indeed, scans results pages one by one, extracts job post links from each results page, and obtains and saves the content of each job post to a file (one per line). the output file is specified by the user. this component optionally accepts a file containing a list of proxies to use when sending requests. can be used to run generic, user-specified queries and scrape results from the job board indeed (for example, scrape job posts for software engineers, scrape job boards for data analysts, etc.). keyword_extractor.py: extracts the top keywords from a collection of text documents. it accepts an input file of text documents where there is one document per line, extracts a number of top keywords as optionally specified by the user, and writes these keywords to a file that is specified by the user. can be used to generically extract top keywords from any collection of text (for example, top skills from job postings, top keywords from research papers, top themes in customer complaints, etc.). more generally, the component indeed_scraper.py can be used as a standalone script to scrape job postings at scale from indeed for any query and keyword_extractor.py can be used both as a standalone script and as a module to extract top keywords (or phrases). 2. implementation indeed_scraper.py this module does the following: 1. in the main thread, creates a thread pool with a number of workers. 2. executes the user query on indeed and iterates through each page of the results one at a time. 3. for each page of results, extracts all job post links from that page and feeds those links to the worker threads, who will process specific job post links in parallel and will fetch the full content of each one. 4. the main thread continues to iterate through pages of results and passes specific job post links to the worker threads, while each worker thread continues to process specific job post links and captures the full content of each one. 5. once the main thread has iterated through all pages of the search results, it waits for all the worker threads to finish processing the specific job post links that it has continuously passed them thus far. 6. once all job posts have been processed, the thread pool terminates and the main thread writes all job posts to a file (each job post on its own line). the logic described above is found mainly in the function scrape_multithreaded(url, query, number_of_pages, results_per_page). other important functions include: job_links_from_search(url, search_params): - obtains all job post links from the search results page specified by url and search_params. job_from_link(link): - obtains the content of the job post at the specified link. get_js_soup(url, params): - obtains a beautifulsoup object for the page specified by url and params to be used for parsing html content. finally, all http communication is carried out using python's requests module. keyword_extractor.py this module does the following: 1. ingests a text file where every line is a document of text. 2. extracts the text from the input file and runs an algorithm on all the text to produce an optionally specified number of top keywords from the text. the algorithms used to produce the keywords is textrank, as implemented by pytextrank, but other algorithms such as yake, as implemented by pke, are included as well unused functions in the codebase. 3. outputs the top keywords to console or an optionally specified output file. note that this component can be used both as a standalone script as well as a module. specifically, the class keywordextractor has a generic interface and can easily be reused in other settings: keywordextractor(input_file): a keywordextractor is a class for extracting keywords from an input file of text where there is a text document on each line. - top_keywords([n]): extracts and returns a list of the top n keywords from the input file provided at construction. 3. usage installation this package requires python 3.0+. it also requires the following external resources that can be obtained using: pip install bs4 pip install spacy pip install pytextrank python -m spacy download en_core_web_sm to install this package, clone the repository from github: git clone https://github.com/myusername-2/courseproject.git cd courseproject usage example first, we scrape job posts from indeed for 'software engineer' in new york, ny. the full job descriptions will be stored in jobs.txt, one job on each line. python indeed_scraper.py --query 'software engineer' --pages 2 --results-per-page 25 --output-file jobs.txt then, we want to discover the most relevant skills in all these job descriptions. so we run the keyword extractor script as follows to discover the top 50 keywords: python keyword_extractor.py -n 50 -o keywords.txt jobs.txt the top 50 keywords will be stored in a file keywords.txt. api usage keyword_extractor.py: ```python top 25 keywords from the collection in 'input.txt' input_file = 'input.txt' n = 25 keyword_extractor = keywordextractor(input_file) top_keywords = keyword_extractor.top_keywords(n=n) ``` command line usage indeed_scraper.py: ``` python indeed_scraper.py --help usage: indeed_scraper.py [-h] --output-file output_file --query query [--pages pages] [--results-per-page results_per_page] scrape job posts from indeed. optional arguments: -h, --help show this help message and exit --pages pages number of pages of job results to scrape. --results-per-page results_per_page number of job results per scraped page. required named arguments: --output-file output_file output file containing job descriptions matching the query and with one job description per line. --query query query to search for jobs. ``` keyword_extractor.py: ``` python keyword_extractor.py --help usage: keyword_extractor.py [-h] [-n n] [-o output_file] input_file extract keywords from an input text. positional arguments: input_file input file containing text. each text document should be on its own line. optional arguments: -h, --help show this help message and exit -n n number of top keywords. -o output_file, --output-file output_file output file containing the top 'n' keywords in the input text. ```	['course', 'project', 'progress', 'report', 'shai', 'yusov', 'syusovillinoisedu', 'system', 'educationalweb', 'subtopic', 'identifying', 'indemand', 'skills', 'made', 'thus', 'far', 'automatically', 'original', 'plan', 'scrape', 'analyze', 'job', 'postings', 'software', 'engineers', 'new', 'york', 'ny', 'board', 'indeed', 'extract', 'top', 'dataset', 'written', 'tested', 'executed', 'component', 'clean', 'scraped', 'data', 'save', 'processed', 'file', 'thoroughly', 'investigated', 'various', 'algorithms', 'approaches', 'extracting', 'keywords', 'ingest', 'using', 'keyword', 'extraction', 'algorithm', 'compared', 'instrumented', 'achieve', 'best', 'results', 'taken', 'care', 'isolate', 'interfaces', 'components', 'implementation', 'details', 'much', 'possible', 'functionality', 'generic', 'could', 'potentially', 'integrate', 'tools', 'systems', 'straightforward', 'manner', 'remaining', 'tasks', 'primary', 'complete', 'challenges', 'issues', 'scraping', 'issue', 'faced', 'successfully', 'needed', 'pages', 'timely', 'without', 'throttled', 'specifically', 'use', 'case', 'involves', 'scanning', 'obtaining', 'post', 'links', 'page', 'serial', 'process', 'would', 'rather', 'slow', 'parallelized', 'iointensive', 'pool', 'threads', 'fetch', 'information', 'parallel', 'led', 'significant', 'speedup', 'also', 'account', 'failures', 'implemented', 'retryable', 'mechanisms', 'ensure', 'graceful', 'error', 'recovery', 'overall', 'able', 'download', 'another', 'facing', 'extractions', 'highest', 'subjective', 'quality', 'ones', 'taking', 'longest', 'seems', 'textrank', 'produces', 'fairly', 'relevant', 'takes', 'little', 'longer', 'finish', 'implementations', 'rake', 'yake', 'tfidf', 'produce', 'somewhat', 'diluted', 'shorter', 'amount', 'time', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'one', 'chosen', 'subtopics', 'creating', 'teaching', 'material', 'demand', 'briefly', 'describe', 'datasets', 'techniques', 'crawl', 'preprocessed', 'fed', 'responsible', 'emerging', 'keywordstopics', 'identification', 'likely', 'involve', 'andor', 'topic', 'mining', 'adding', 'function', 'demonstrate', 'works', 'expected', 'improving', 'show', 'actually', 'better', 'identifies', 'running', 'input', 'validating', 'human', 'judgement', 'known', 'industry', 'trends', 'code', 'communicate', 'utilize', 'fine', 'build', 'please', 'state', 'clearly', 'standalone', 'systemcomponent', 'output', 'although', 'outside', 'scope', 'plugged', 'long', 'specification', 'decoupled', 'source', 'actual', 'content', 'outputs', 'emitted', 'standard', 'easytodigest', 'format', 'programming', 'language', 'python', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'completed', 'estimated', 'cost', 'task', 'writing', 'testing', 'executing', 'customized', 'web', 'crawler', 'investigating', 'defining', 'right', 'algorithmstechniques', 'performing', 'courseproject', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'overview', 'projectproposalpdf', 'projectprogressreportpdf', 'presentation', 'video', 'documentation', 'contains', 'two', 'together', 'identify', 'skils', 'analysis', 'positions', 'indeed_scraperpy', 'scrapes', 'userspecified', 'query', 'runs', 'user', 'scans', 'extracts', 'obtains', 'saves', 'per', 'line', 'specified', 'optionally', 'accepts', 'containing', 'proxies', 'sending', 'requests', 'used', 'run', 'queries', 'example', 'posts', 'boards', 'analysts', 'etc', 'keyword_extractorpy', 'collection', 'text', 'documents', 'document', 'writes', 'generically', 'research', 'papers', 'themes', 'customer', 'complaints', 'generally', 'script', 'scale', 'module', 'phrases', 'following', 'thread', 'creates', 'workers', 'executes', 'iterates', 'feeds', 'worker', 'specific', 'full', 'continues', 'iterate', 'passes', 'captures', 'iterated', 'search', 'waits', 'processing', 'continuously', 'passed', 'terminates', 'logic', 'described', 'found', 'mainly', 'scrape_multithreadedurl', 'number_of_pages', 'results_per_page', 'important', 'functions', 'include', 'job_links_from_searchurl', 'search_params', 'url', 'job_from_linklink', 'get_js_soupurl', 'params', 'beautifulsoup', 'object', 'parsing', 'html', 'finally', 'http', 'communication', 'carried', 'pythons', 'ingests', 'every', 'pytextrank', 'pke', 'included', 'well', 'unused', 'codebase', 'console', 'note', 'class', 'keywordextractor', 'interface', 'easily', 'reused', 'settings', 'keywordextractorinput_file', 'top_keywordsn', 'returns', 'provided', 'construction', 'usage', 'installation', 'package', 'requires', 'external', 'resources', 'obtained', 'pip', 'install', 'bs', 'spacy', 'en_core_web_sm', 'clone', 'git', 'httpsgithubcommyusernamecourseprojectgit', 'cd', 'first', 'engineer', 'descriptions', 'stored', 'jobstxt', 'resultsperpage', 'outputfile', 'want', 'discover', 'extractor', 'follows', 'keywordstxt', 'api', 'inputtxt', 'input_file', 'keyword_extractor', 'top_keywords', 'keyword_extractortop_keywordsnn', 'command', 'help', 'h', 'output_file', 'optional', 'arguments', 'message', 'exit', 'required', 'named', 'matching', 'description', 'jobs', 'positional']
https://github.com/mzhai20/CourseProject	"1 documentation for cs410 final project: improving expertsearch system mengyu zhai (netid: mzhai) fall 2020 1. overview 1.1 background this project is for fall 2020 cs410 text information systems final project option 2.2 expertsearch system. the information quoted below is from cs410 course project instructions and what contained is the foundation of the current project: ""the expertsearch system (http://timan102.cs.illinois.edu/expertsearch//) was developed by some previous cs410 students as part of their course project! the system aims to find faculty specializing in the given research areas. the underlying data and ranker currently come from the mp2 submissions of the previous course offering. you can read more about it here (sections 3.6 and 4: project are especially relevant). the code is available here."" 1.2 functions of code the current project is trying to enhance the utility of the expertsearch system by extracting relevant information from faculty bios. more specifically, the code uses techniques for extracting other information, i.e., faculty research interests, than what is already provided in the original system. simply put, topic mining is performed on bios and top-keywords are found and shown as the common research areas, in addition to the bio information shown in the search result. this added function does not influence the ways that users can use to conduct searches in the system. users can search the expert by whatever search key word they want to use and applying whatever location or university filters they choose. now if the user is especially interested to know which experts work in a certain research area and what their respective research interests are, they can directly search by that research area they have in mind. what is improved is that in the search result, rather than just showing the matching parts in the bio of an expert (or matching parts in the bios of all the experts in the search results) as before, a set of highly possible research interests (using top-keywords) of the expert will also be 2 provided. the method is not perfect as we assume top-keywords are common research areas but cannot guarantee that is always the case. 2. implementation 2.1 what are used * python * lda topic model: generative statistical model - to detect topics * gensim api: to lemmatize and add bi-gram tokenization (build dictionary), and train lda model * pyldavis: to provide interactive visualization of lda topic results * word_cloud: to visualize corpus key words * other major tools/ packages involved: jupyter notebook, numpy, pandas 2.2 steps * with jupyter notebook, utilizing gensim api and lda to build the topics from the combined bios (10 for each bio). o preprocess data o lemmatize and stop word removal o build dictionary and use word_cloud to visualize the corpus o lda modeling o visualize lda topics with pyldavis * then also within juyter notebook, results are saved into a researchinterest file under expertsearch\data. * finally modify the original expertsearch web application source code to add and display top topics as research interests. 2.3 results the corpus outlook built using word_cloud: 3 pyldavis output example (interactive and topic num = 10): an example of some selected topics for a bio: 4 another example of some selected topics for a different bio: the top topics with the highest weight get saved to researchinterest.txt and will be the one to display in expert search results. search by key words, you will be able to see the results similar to image below: 5 you can also filter by locations and/or universities: 6 now compare with the original system's results below, which doesn't provide top topic key-words: 3. installation and run codes uploaded to github include expertsearch_lda.ipynb and web application codes in expertsearch.zip. be aware that the web application codes does not work on windows (mainly because gunicorn is not supported on windows)! 3.1 simple instructions (if you are familiar with the project) to run the web application code, run the following command from expertsearch (work with python2.7 on macos and linux): gunicorn server:app -b 127.0.0.1:8095 the site should be available at http://localhost:8095/ 3.2 more detailed instructions (if you are not familiar with the original project) * download expertsearch.zip. * unzip it in python2.7 on macos and linux. * go to the folder and run the following command: 7 [expertsearch]$ gunicorn server:app -b 127.0.0.1:8095 * you should see something similar to below once the website is running: [expertsearch]$ [2020-12-11 03:07:57 +0000] [17325] [info] starting gun icorn 19.10.0 [2020-12-11 03:07:57 +0000] [17325] [info] listening at: http://127.0. 0.1:8095 (17325) [2020-12-11 03:07:57 +0000] [17325] [info] using worker: sync [2020-12-11 03:07:57 +0000] [17329] [info] booting worker with pid: 173 29 * the site should be available at http://localhost:8095/. otherwise, you can open the port 8095 so people can access it from http://yourdomain:8095, for example: references: 1. [reference code]: https://github.com/cs410fall2020/expertsearch/ 2. [reference code]: https://github.com/teddywang0202/beyondld 3. [reference file]: https://bhaavya.github.io/files/sigcse2020.pdf progress report 11/29/2020 cs410 fall 2020 final project: improving expert search system mengyu zhai progress made thus far: * spent a lot of time (much more than planned) acquiring and setting up the running environment that the original code requires, which is different from what i had. * studied the code and made necessary modifications to make the code run locally. remaining tasks: * continue working on the new function code and testing * make the final demo * upload all files challenges/issues being faced: * none now cs410 fall 2020 final project proposal: improving expert search system 1. i am doing this project individually. my name is mengyu zhai and netid is mzhai. 2. in this project, i choose to improve the expert search system (option 2.2), and more specifically, the subtopic of extracting relevant information from faculty bios. i plan to add the function of extracting faculty research interests, so users can search faculty by their research interests. 3. dataset to be used is the bios available under mp2.3 on coursera week 5: complied_dataset.zip. according to the introduction on the coursera page, all the faculty bio submissions from mp2.1 that were submitted by sep 20 were compiled into this dataset, and there are a total of 16492 unique faculty bios. algorithms or techniques to be used is topic mining on the bios available under mp2.3 on coursera. the top-keywords per topic are the common research interests in engineering and science. 4. i am adding a function that is not in the original system, so it is relatively easy to demonstrate that it works as expected - in the final demo, i will perform some search with some research interests and show that it can really extract the relevant results. 5. i plan to utilize the system and code given, and then add & modify codes that can achieve the added function. 6. as the original code is in python, i plan to use python as the programming language. 7. as an individual project, its planned workload is about 20 hours, not including the time used for this proposal. i may spend more hours because i am not a python expert, but i wouldn't count much of that into the workload of the project. main tasks estimated time cost manually pick common research interest areas (topic terms) from a typical engineering and science department (plan to use uiuc cs department faculty's research interests pool https://cs.illinois.edu/about/people/all-faculty ) 3 hours study original system code and system 2 hours work on the new function code and testing 13 hours make the final demo 1 hour upload all files (proposal, progress report, project code and documentation, project presentation/demo) 1 hour courseproject final project submissions include: - documentation.pdf - code - expertsearch_lda.ipynb - expertsearch.zip (in releases on the right side of the page, under about section) - software usage tutorial presentation link: https://youtu.be/wxjgnfb4nxo software usage tutorial presentation link: https://youtu.be/wxjgnfb4nxo"	['documentation', 'cs', 'final', 'project', 'improving', 'expertsearch', 'system', 'mengyu', 'zhai', 'netid', 'mzhai', 'fall', 'overview', 'background', 'text', 'information', 'systems', 'option', 'quoted', 'course', 'instructions', 'contained', 'foundation', 'current', 'httptimancsillinoiseduexpertsearch', 'developed', 'previous', 'students', 'part', 'aims', 'find', 'faculty', 'specializing', 'given', 'research', 'areas', 'underlying', 'data', 'ranker', 'currently', 'come', 'mp', 'submissions', 'offering', 'read', 'sections', 'especially', 'relevant', 'code', 'available', 'functions', 'trying', 'enhance', 'utility', 'extracting', 'bios', 'specifically', 'uses', 'techniques', 'ie', 'interests', 'already', 'provided', 'original', 'simply', 'put', 'topic', 'mining', 'performed', 'topkeywords', 'found', 'shown', 'common', 'addition', 'bio', 'search', 'result', 'added', 'function', 'influence', 'ways', 'users', 'use', 'conduct', 'searches', 'expert', 'whatever', 'key', 'word', 'want', 'applying', 'location', 'university', 'filters', 'choose', 'user', 'interested', 'know', 'experts', 'work', 'certain', 'area', 'respective', 'directly', 'mind', 'improved', 'rather', 'showing', 'matching', 'parts', 'results', 'set', 'highly', 'possible', 'using', 'also', 'method', 'perfect', 'assume', 'cannot', 'guarantee', 'always', 'case', 'implementation', 'used', 'python', 'lda', 'model', 'generative', 'statistical', 'detect', 'topics', 'gensim', 'api', 'lemmatize', 'add', 'bigram', 'tokenization', 'build', 'dictionary', 'train', 'pyldavis', 'provide', 'interactive', 'visualization', 'word_cloud', 'visualize', 'corpus', 'words', 'major', 'tools', 'packages', 'involved', 'jupyter', 'notebook', 'numpy', 'pandas', 'steps', 'utilizing', 'combined', 'preprocess', 'stop', 'removal', 'modeling', 'within', 'juyter', 'saved', 'researchinterest', 'file', 'expertsearchdata', 'finally', 'modify', 'web', 'application', 'source', 'display', 'top', 'outlook', 'built', 'output', 'example', 'num', 'selected', 'another', 'different', 'highest', 'weight', 'get', 'researchinteresttxt', 'one', 'able', 'see', 'similar', 'image', 'filter', 'locations', 'andor', 'universities', 'compare', 'doesnt', 'keywords', 'installation', 'run', 'codes', 'uploaded', 'github', 'include', 'expertsearch_ldaipynb', 'expertsearchzip', 'aware', 'windows', 'mainly', 'gunicorn', 'supported', 'simple', 'familiar', 'following', 'command', 'macos', 'linux', 'serverapp', 'b', 'site', 'httplocalhost', 'detailed', 'download', 'unzip', 'go', 'folder', 'something', 'website', 'running', 'info', 'starting', 'gun', 'icorn', 'listening', 'http', 'worker', 'sync', 'booting', 'pid', 'otherwise', 'open', 'port', 'people', 'access', 'httpyourdomain', 'references', 'reference', 'httpsgithubcomcsfallexpertsearch', 'httpsgithubcomteddywangbeyondld', 'httpsbhaavyagithubiofilessigcsepdf', 'progress', 'report', 'made', 'thus', 'far', 'spent', 'lot', 'time', 'much', 'planned', 'acquiring', 'setting', 'environment', 'requires', 'studied', 'necessary', 'modifications', 'make', 'locally', 'remaining', 'tasks', 'continue', 'working', 'new', 'testing', 'demo', 'upload', 'files', 'challengesissues', 'faced', 'none', 'proposal', 'individually', 'name', 'improve', 'subtopic', 'plan', 'dataset', 'coursera', 'week', 'complied_datasetzip', 'according', 'introduction', 'page', 'submitted', 'sep', 'compiled', 'total', 'unique', 'algorithms', 'per', 'engineering', 'science', 'adding', 'relatively', 'easy', 'demonstrate', 'works', 'expected', 'perform', 'show', 'really', 'extract', 'utilize', 'achieve', 'programming', 'language', 'individual', 'workload', 'hours', 'including', 'may', 'spend', 'wouldnt', 'count', 'main', 'estimated', 'cost', 'manually', 'pick', 'interest', 'terms', 'typical', 'department', 'uiuc', 'facultys', 'pool', 'httpscsillinoiseduaboutpeopleallfaculty', 'study', 'hour', 'presentationdemo', 'courseproject', 'documentationpdf', 'releases', 'right', 'side', 'section', 'software', 'usage', 'tutorial', 'presentation', 'link', 'httpsyoutubewxjgnfbnxo']
https://github.com/n3a9/CourseProject	"text classification competition - twitter sarcasm detection cs410 fall 2020 neeraj aggarwal (noa2@illinois.edu), samarth keshari (keshari2@illinois.edu), rishi wadhwa (rishiw2@illinois.edu) background the goal of this project is to build a model that can perform sarcasm detection on twitter data. the trained model should have a f1-score above 0.723 on test data. solution approaches machine learning standard machine learning requires us to manually select a set of relevant features and then train a machine learning model based on the features. as part of this project we trained multiple classifiers including a random forest classifier using bag-of-words of bigrams as the feature representation. the random forest classifier performed best in this category, therefore, it was trained on many different hyperparameters. we eventually settled on 1000 trees, and a 46% confidence threshold to define as sarcasm. deep learning in contrast to the standard machine learning approach in deep learning we skip the manual step of feature extraction and directly feed the data to the deep learning algorithm which automatically learns features. the trained deep learning model is then used to perform the prediction task. in this project we used convolutional neural network(cnn) based architecture along with a pre-trained bert tokenizer to generate the token ids. following are the different elements of the software built as part of this approach model architecture the figure below shows the architecture of the deep neural network model implemented. the input text to the neural network is first tokenized using a pre-trained bert tokenizer. the tokenized text is then fed to an embedding layer, followed by three parallel convolutional layers. finally, the outputs from the convolutional layer become input to a fully connected layer followed by the softmax output layer. implementation comparison below table compares the f1-scores of the tuned models based on both machine learning and deep learning approaches both the tuned models are able to achieve the goal to get f1 scores above the baseline of 0.723. software implementation machine learning as stated above, we employ pre-processing on the text data and then use the tf-idf with n_gram = (1,2) to represent text. the tf-idf features are then used for training the model. the trained model is finally used to perform the inference. approach algorithm precision recall f1 deep learning convolutional neural networks 0.6227867590 0.89888888 0.7357889949977261 machine learning random forest classifier 0.6824825174825 175 0.7265952491 849093 0.7265952491849093 deep learning - cnn model training flow the figure below shows the flow of the training process that is followed to build the deep learning model from data - response + context. the training process consists of two components - 1) data processor 2) model builder. the data processor takes the context and response text from training data as input and generates required features as output. the model builder then takes the generated features as input and performs a sequence of steps to train and save the trained model. both the components can be controlled based on the input parameters. model inference flow the figure below shows the flow of the inference engine that is used to predict the results of test data the inference process makes use of the same data processor from training to generate the features from input test data - context + response text. the generated features are then fed to the inference engine which loads the trained model and performs the prediction and saves the results. software usage installation requirements the software is built with python3.7.7 and uses the following packages. emoji==0.6.0 pandas==1.1.3 nltk==3.5 tensorflow==2.3.1 numpy==1.18.5 keras==2.4.3 scipy==1.5.2 demoji==0.3.0 bert-for-tf2==0.14.7 scikit_learn==0.23.2 you can automatically install all of these packages and download the source code by first cloning the repo https://github.com/n3a9/courseproject.git. then navigate into the project directory and run pip install -r requirements.txt machine learning there are 4 machine learning models that are available for usage: - random forest classifier `random_forest.py` - mlp classifier `mlp_classifier.py` - sgd classifier `sgd_classifier.py` - logistic regression `logistic_regression.py` to run the machine learning models, `python [file.py]`. it will generate an `answer.txt` in `./src/machinelearning`. deep learning - cnn apis as part of this project, the user can call two apis * model training * in order to call this api, in the command terminal the user need to # navigate into the cloned repository to the directory ../src/deeplearning # if required, change the parameters file 'params_config.json ' at ../src/deeplearning/parameters . refer to the parameters section  below for details about the different parameters used during the model training # run command - python modeltrain.py # the trained model weights will be saved at ../src/deeplearning/trained-models in 'cnn_model_weight.h5 ' file note: for the project verification purpose, model training can be performed by changing different parameters(refer to parameters section below). currently by default any new trained model weights will not be saved, however, caution should be taken that any new trained model weights if saved can vary the final results. * model inference * in order to call this api, in the command terminal the user need to # navigate into the cloned repository to the directory ../src/deeplearning # if required, change the parameters file 'params_config.json ' at ../src/deeplearning/parameters . refer to the parameters section  below for details about the different parameters used during the model inference. # run command - python modelinference.py # the final predictions will be saved at ../src  in 'answer.txt ' file note: for project verification purpose run only the model inference parameters below is the list of parameters that are used during the model training and inference process. refer to 'params_config.json ' file in the cloned repository at twitter-sarcasm-detection/src/deeplearning/parameters name description used in n_last_context number of last entries from in the context list training + inference data-path path to folder storing the train and test data files training + inference train-data-filename name of the train file in .jsonl format training test-data-filename name of the test file in .jsonl format inference processed-data-path path to folder storing the processed train and test data files training + inference processed-train-data-filename name of the processed train file in .csv format training processed-test-data-filename name of the processed test file in .csv format inference features-path path to folder storing the train and test features files training + inference features-train-filename name of the train features file in .json format training features-test-filename name of the test features file in .json format inference trained-model-save flag to indicate that the weights of the trained model should be saved. by default the model will not be saved. if required, set the flag to ""x"". training trained-model-path path to the folder storing the trained model weights training trained-model-weight-filename name of the file storing the trained model weights in .h5 format training train_test_split % of records that are needed for validation during model training. the value of this parameter should be between (0,1) training embedding_dimensions number of dimensions in the embedding layer of the model training cnn_filters number of cnn filters in the cnn layers of the model training dnn_units number of neurons in the fully connected layer of the model training dropout_rate dropout rate for the fully connected layer of the model training verbose training references * https://colab.research.google.com/drive/12nobxrkrznikhqvmdffw2tgdoxftne pm * https://stackoverflow.com/questions/43547402/how-to-calculate-f1-macro-in-kera s n_epochs number of epochs for model training training batch_size batch size for model training training prediction-threshold model predictions for test data are in terms of probabilities. for a particular test sample, if the prediction probability is above this threshold value, then the test sample is flagged as sarcasm otherwise non-sarcasm inference answer-file path + filename of the final results file in .txt format inference team simple neeraj aggarwal, samarth keshari, rishi wadhwa our project: text classification competition goal = to build a model that can perform sarcasm detection on twitter data evaluation target = the model should have f1 score greater than 0.723 our approach approach-1 = traditional machine learning input text representation = bag-of-words (bi-gram) algorithms = random forest, logistic regression, sgd(svm) & mlp approach-2 = deep learning input text representation = pre-trained bert tokenizer architecture = convolutional neural networks results installation python(version 3.7 - 3.8) visit https://github.com/n3a9/courseproject download or clone the code required packages(pip install) emoji==0.6.0 pandas==1.1.3 nltk==3.5 tensorflow==2.3.1 numpy==1.18.5 keras==2.4.3 scipy==1.5.2 demoji==0.3.0 bert-for-tf2==0.14.7 scikit_learn==0.23.2 * you can automatically install all of these packages by navigating into the project directory './src' and then running command pip install -r requirements.txt code repository structure data in 'data' directory where we can find train and test files source code in 'src' directory machine learning code in 'machinelearning' directory - './src/machinelearning' deep learning in 'deeplearning' repository - './src/deeplearning' usage - machine learning there are 4 machine learning models that are available for usage: - random forest classifier `random_forest.py` (best result classifier) - mlp classifier `mlp_classifier.py` - sgd(svm) classifier `sgd_classifier.py` - logistic regression `logistic_regression.py` to run the machine learning models, navigate to the machine learning directory - `./src/machinelearning` - and execute command`python [file.py]`. for example executing command 'python random_forest.py' in the terminal will run random forest classifier. it will generate an `answer.txt` in `./src/machinelearning` usage - deep learning there are 2 programs that are available for usage: - model training `modeltrain.py` - model inference `modelinference.py` there is a list of parameters that are used to control the training and inference programs. these parameters can be adjusted to influence the behavior of the 2 programs. *refer to documentation to learn more about these parameters usage - deep learning(training) to run the model training, navigate to the deep learning directory - `./src/deeplearning` - and execute command`python modeltrain.py` this will save the trained model weights as `cnn_model_weight.h5` in `./src/machinelearning/trained-models` * currently, by default any new trained model weights will not be saved. also, caution should be taken that any new trained model weights, if saved can vary the final results usage - deep learning(inference) to run the model inference, navigate to the deep learning directory - `./src/deeplearning` - and execute command`python modelinference.py` it will generate an `answer.txt` in `./src/deeplearning` thank you!!! for any questions please contact neeraj aggarwal (noa2@illinois.edu) samarth keshari (keshari2@illinois.edu) rishi wadhwa (rishiw2@illinois.edu) cs410 project proposal 1. team captain: neeraj aggarwal, noa2 rishi wadhwa, rishiw2 samarth keshari, keshari2 2. competition: text classification competition 3. yes, we are prepared to learn state-of-the-art neural network classifiers. we've heard of tensorflow, pytorch, and lstm. we have relevant experience with text classification, neural networks, relisiency. we aren't experts, but we have dabbled in some of these methods in our pasts. 4. programming language: python sarcasm detection (project progress) neeraj aggarwal(noa2@illinois.edu), samarth keshari(keshari2@illinois.edu), rishi wadhwa (rishiw2@illinois.edu) progress as part of the project work we have used both machine learning and deep learning approaches to solve the problem. based on our analysis we found that among different machine learning algorithms, random forest classifier performed best after some hyperparameter tuning. below are metrics obtained after running different algorithms. after this, we decided to change the threshold in which we determined whether the tweet was sarcastic or not, by lowering the confidence level necessary. approach algorithm precision recall f1 machine learning logisticregression 0.672395273899 0333 0.695555555 5555556 0.6837793555434188 machine learning sgdclassifier 0.676282051282 0513 0.703333333 3333334 0.6895424836601308 machine learning linearsvc 0.665263157894 7369 0.702222222 2222222 0.6832432432432433 machine learning mlpclassifier tbd tbd tbd machine learning randomforest classifier 0.642482517482 5175 0.816666666 6666667 0.7191780821917808 from this, we found the randomforestclassifier with 1000 trees and 0.48 threshold. eventually, the deep learning based approach gave the best performance results. both the tuned random forest(machine learning) and convolutional neural network(deep learning) are able to get f1 scores above the baseline of 0.723. remaining tasks we already crossed the baseline, but if we have time we could explore approaches in deep learning and improve cnn by tuning the hyperparameters. we could also explore different tokenization techniques and draw different insights from the tweets. for example, tokening and separating emojis and hashtags may allow us to bring significant improvements to sarcasm detection. threshold f1 0.5 0.7191780821917808 0.4 0.7126436781609196 0.48 0.7265952491849093 0.46 0.7231386535889435 0.44 0.7187904967602592 approach algorithm precision recall f1 deep learning convolutional neural networks 0.6227867590 0.89888888 0.7357889949977261 challenges and issues none. courseproject twitter sarcasm detection by samarth keshari, rishi wadhwa, neeraj aggarwal. installation the software is built with python3.7.7 and uses the following packages. emoji==0.6.0 pandas==1.1.3 nltk==3.5 tensorflow==2.3.1 numpy==1.18.5 keras==2.4.3 scipy==1.5.2 demoji==0.3.0 bert-for-tf2==0.14.7 scikit_learn==0.23.2 you can automatically install all of these packages by first cloning this repo. then navigate into the project directory and run pip install -r requirements.txt. usage machine learning there are 4 machine learning models that are available for usage: random forest classifier random_forest.py mlp classifier mlp_classifier.py sgd classifier sgd_classifier.py logistic regression logistic_regression.py to run the machine learning models, python [file.py]. it will generate an answer.txt in ./src/machinelearning. deep learning there are two apis that you can use. model training cd src/deeplearning. if required, change the parameters file params_config.json at in /parameters. refer to the parameters section below for details about the different parameters used during the model training. to run, python modeltrain.py. the trained model weights will be saved at ./trained-models in cnn_model_weight.h5 file. note: for the project verification purpose, model training can be performed by changing different parameters(refer to parameters section below). currently by default any new trained model weights will not be saved, however, caution should be taken that any new trained model weights if saved can vary the final results. model inference cd src/deeplearning. if required, change the parameters file params_config.json at in /parameters. refer to the parameters section below for details about the different parameters used during the modelinference. to run, python modelinference.py. the final predictions will be saved at ./src in answer.txt file. note: for project verification purpose run only the model inference. parameters below is the list of parameters that are used during the model training and inference process. refer to params_config.json file in the cloned repository at ./parameters | name | description | used in | | ----------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------- | | n_last_context | number of last entries from in the context list | training + inference | | data-path | path to folder storing the train and test data files | training + inference | | train-data-filename | name of the train file in .jsonl format | training | | test-data-filename | name of the test file in .jsonl format | inference | | processed-data-path | path to folder storing the processed train and test data files | training + inference | | processed-train-data-filename | name of the processed train file in .csv format | training | | processed-test-data-filename | name of the processed test file in .csv format | inference | | features-path | path to folder storing the train and test features files | training + inference | | features-train-filename | name of the train features file in .json format | training | | features-test-filename | name of the test features file in .json format | inference | | trained-model-save | flag to indicate that the weights of the trained model should be saved. by default the model will not be saved. if required, set the flag to ""x"". | training | | trained-model-path | path to the folder storing the trained model weights | training | | trained-model-weight-filename | name of the file storing the trained model weights in .h5 format | training | | train_test_split | % of records that are needed for validation during model training. the value of this parameter should be between (0,1) | training | | embedding_dimensions | number of dimensions in the embedding layer of the model | training | | cnn_filters | number of cnn filters in the cnn layers of the model | training | | dnn_units | number of neurons in the fully connected layer of the model | training | | dropout_rate | dropout rate for the fully connected layer of the model | training | | verbose | | training | | n_epochs | number of epochs for model training | training | | batch_size | batch size for model training | training | | prediction-threshold | model predictions for test data are in terms of probabilities. for a particular test sample, if the prediction probability is above this threshold value, then the test sample is flagged as sarcasm otherwise non-sarcasm | inference | | answer-file | path + filename of the final results file in .txt format | inference | references https://colab.research.google.com/drive/12nobxrkrznikhqvmdffw2tgdoxftnepm https://stackoverflow.com/questions/43547402/how-to-calculate-f1-macro-in-keras"	['text', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'cs', 'fall', 'neeraj', 'aggarwal', 'noaillinoisedu', 'samarth', 'keshari', 'keshariillinoisedu', 'rishi', 'wadhwa', 'rishiwillinoisedu', 'background', 'goal', 'project', 'build', 'model', 'perform', 'data', 'trained', 'fscore', 'test', 'solution', 'approaches', 'machine', 'learning', 'standard', 'requires', 'us', 'manually', 'select', 'set', 'relevant', 'features', 'train', 'based', 'part', 'multiple', 'classifiers', 'including', 'random', 'forest', 'classifier', 'using', 'bagofwords', 'bigrams', 'feature', 'representation', 'performed', 'best', 'category', 'therefore', 'many', 'different', 'hyperparameters', 'eventually', 'settled', 'trees', 'confidence', 'threshold', 'define', 'deep', 'contrast', 'approach', 'skip', 'manual', 'step', 'extraction', 'directly', 'feed', 'algorithm', 'automatically', 'learns', 'used', 'prediction', 'task', 'convolutional', 'neural', 'networkcnn', 'architecture', 'along', 'pretrained', 'bert', 'tokenizer', 'generate', 'token', 'ids', 'following', 'elements', 'software', 'built', 'figure', 'shows', 'network', 'implemented', 'input', 'first', 'tokenized', 'fed', 'embedding', 'layer', 'followed', 'three', 'parallel', 'layers', 'finally', 'outputs', 'become', 'fully', 'connected', 'softmax', 'output', 'implementation', 'comparison', 'table', 'compares', 'fscores', 'tuned', 'models', 'able', 'achieve', 'get', 'f', 'scores', 'baseline', 'stated', 'employ', 'preprocessing', 'use', 'tfidf', 'n_gram', 'represent', 'training', 'inference', 'precision', 'recall', 'networks', 'cnn', 'flow', 'process', 'response', 'context', 'consists', 'two', 'components', 'processor', 'builder', 'takes', 'generates', 'required', 'generated', 'performs', 'sequence', 'steps', 'save', 'controlled', 'parameters', 'engine', 'predict', 'results', 'makes', 'loads', 'saves', 'usage', 'installation', 'requirements', 'python', 'uses', 'packages', 'emoji', 'pandas', 'nltk', 'tensorflow', 'numpy', 'keras', 'scipy', 'demoji', 'bertfortf', 'scikit_learn', 'install', 'download', 'source', 'code', 'cloning', 'repo', 'httpsgithubcomnacourseprojectgit', 'navigate', 'directory', 'run', 'pip', 'r', 'requirementstxt', 'available', 'random_forestpy', 'mlp', 'mlp_classifierpy', 'sgd', 'sgd_classifierpy', 'logistic', 'regression', 'logistic_regressionpy', 'filepy', 'answertxt', 'srcmachinelearning', 'apis', 'user', 'call', 'order', 'api', 'command', 'terminal', 'need', 'cloned', 'repository', 'srcdeeplearning', 'change', 'file', 'params_configjson', 'srcdeeplearningparameters', 'refer', 'section', 'details', 'modeltrainpy', 'weights', 'saved', 'srcdeeplearningtrainedmodels', 'cnn_model_weighth', 'note', 'verification', 'purpose', 'changing', 'parametersrefer', 'currently', 'default', 'new', 'however', 'caution', 'taken', 'vary', 'final', 'modelinferencepy', 'predictions', 'src', 'list', 'twittersarcasmdetectionsrcdeeplearningparameters', 'name', 'description', 'n_last_context', 'number', 'last', 'entries', 'datapath', 'path', 'folder', 'storing', 'files', 'traindatafilename', 'jsonl', 'format', 'testdatafilename', 'processeddatapath', 'processed', 'processedtraindatafilename', 'csv', 'processedtestdatafilename', 'featurespath', 'featurestrainfilename', 'json', 'featurestestfilename', 'trainedmodelsave', 'flag', 'indicate', 'x', 'trainedmodelpath', 'trainedmodelweightfilename', 'h', 'train_test_split', 'records', 'needed', 'validation', 'value', 'parameter', 'embedding_dimensions', 'dimensions', 'cnn_filters', 'filters', 'dnn_units', 'neurons', 'dropout_rate', 'dropout', 'rate', 'verbose', 'references', 'httpscolabresearchgooglecomdrivenobxrkrznikhqvmdffwtgdoxftne', 'pm', 'httpsstackoverflowcomquestionshowtocalculatefmacroinkera', 'n_epochs', 'epochs', 'batch_size', 'batch', 'size', 'predictionthreshold', 'terms', 'probabilities', 'particular', 'sample', 'probability', 'flagged', 'otherwise', 'nonsarcasm', 'answerfile', 'filename', 'txt', 'team', 'simple', 'evaluation', 'target', 'score', 'greater', 'traditional', 'bigram', 'algorithms', 'sgdsvm', 'pythonversion', 'visit', 'httpsgithubcomnacourseproject', 'clone', 'packagespip', 'navigating', 'running', 'structure', 'find', 'machinelearning', 'deeplearning', 'result', 'execute', 'commandpython', 'example', 'executing', 'programs', 'control', 'adjusted', 'influence', 'behavior', 'documentation', 'learn', 'learningtraining', 'srcmachinelearningtrainedmodels', 'also', 'learninginference', 'thank', 'questions', 'please', 'contact', 'proposal', 'captain', 'noa', 'rishiw', 'yes', 'prepared', 'stateoftheart', 'weve', 'heard', 'pytorch', 'lstm', 'experience', 'relisiency', 'arent', 'experts', 'dabbled', 'methods', 'pasts', 'programming', 'language', 'progress', 'aggarwalnoaillinoisedu', 'kesharikeshariillinoisedu', 'work', 'solve', 'problem', 'analysis', 'found', 'among', 'hyperparameter', 'tuning', 'metrics', 'obtained', 'decided', 'determined', 'whether', 'tweet', 'sarcastic', 'lowering', 'level', 'necessary', 'logisticregression', 'sgdclassifier', 'linearsvc', 'mlpclassifier', 'tbd', 'randomforest', 'randomforestclassifier', 'gave', 'performance', 'forestmachine', 'networkdeep', 'remaining', 'tasks', 'already', 'crossed', 'time', 'could', 'explore', 'improve', 'tokenization', 'techniques', 'draw', 'insights', 'tweets', 'tokening', 'separating', 'emojis', 'hashtags', 'may', 'allow', 'bring', 'significant', 'improvements', 'challenges', 'issues', 'none', 'courseproject', 'cd', 'trainedmodels', 'modelinference', 'httpscolabresearchgooglecomdrivenobxrkrznikhqvmdffwtgdoxftnepm', 'httpsstackoverflowcomquestionshowtocalculatefmacroinkeras']
https://github.com/nadiam2/CourseProject	"final project documentation project contributors: nadia mohiuddin (nadiam2), pallavi narayanan (pallavi3), thaniel tong (tztong2) overall use: the purpose of this project is to classify tweets into categories sarcasm or not_sarcasm. the tweets that we categorize are written in response to other tweets, which are the context data. this is a form of sentiment analysis. how to get the code: how to run the code: software installation details: * to install each python library to use in our project, we ran ""pip install <library name>"" in our terminal before using the library in our actual code. * we then used regular import statements to use the libraries in our code. model used: * we used the svm model from the sklearn.svm library. all the training was done through svm. we did some preprocessing of the data in order to improve the performance. * first we tokenized all the words in the given tweets, then we removed stopwords, ""@user"" and ""<url>"" tags in the tweet. * then we lemmatized the data so we could get the root word. * finally to end the preprocessing, we converted emojis into strings which helped to increase the accuracy of classification, as emojis can often be a signal of sentiment. * in order to train on context data we appended the context data to the response data to create a more robust text data to train on. * we used tf and idf weighting to convert the words to float probabilities, giving importance to frequent terms in a document, and infrequent terms across the entire collection. * we fine tuned the hyperparameters for svc using the randomsearchcv algorithm from sklearn. * we then used these hyperparameters to train our svc model with the training tf-idf scores, and then predicted the test data labels using the testing tf-idf scores. * lastly, we output the test labels to a text file. what we tried: * we also tried to preprocess the responses and contexts by stemming each word and making each word lowercase. however, these methods did not give us the optimal f1 score. * we attempted to use other sklearn classifiers such as gaussiannb, multinomialnb, and git clone <repository url> cd data python sarcasm.py randomforestclassifier, but none of these classifiers performed as well as svc. * we tried to use the isalpha() function to remove all non alphabetic characters from the responses and contexts, but this also did not give us the optimal f1 score. * we tried using the default parameters for svc, but those parameters did not perform as well as the hyperparameters we fine tuned using randomsearchcv. * we also tried to fine tune parameters with gaussiannb, multinomialnb, and randomforestclassifier. we used gridsearch to find tune hyper parameters in naive bayes and a large multi-nested for-loop (mimicking gridsearch) for the randomforestclassifier. however these still did not perform as well as svc did. final data: precision: 0.6468010517090271 recall: 0.82 f1 score: 0.7231749142577168 contributions: * the team started off working together, sharing ideas while one person typed with their screen shared to the other team members. * later on, the team members split up to try different classifiers and methods of classifying the dataset. this approach was taken to save time as three computers train and test in parallel rather than waiting on one computer to run. software documentation/tutorials: * sklearn svc * https://scikit-learn.org/stable/modules/generated/sklearn.svm.svc.html * sklearn randomsearchcv algorithm * https://intellipaat.com/community/18009/what-is-a-good-range-of-values-for-the-svm-svc -hyperparameters-to-be-explored-via-gridsearchcv * https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.randomizedsea rchcv.html * lemmatization * https://www.geeksforgeeks.org/python-lemmatization-with-nltk/ * sklearn tfidfvectorizer * https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.tfidfvect orizer.html * pypi emoji * https://pypi.org/project/emoji/ how to run the project https://www.youtube.com/watch?v=z0zpcldsxk4&feature=youtu.be&fbclid=iwar0oeihosxd9j94n_ tx-awhip_ahqdaxt2q-7moeabv1mowifmtx9urfqng project progress report 1) progress made: we parsed our json files/inputs, tokenized the inputs, stemmed the inputs, and tried out different methods to train on the train data and label the test data. 2) remaining tasks: we have to figure out how to use bert to properly label the test data given contexts and responses. 3) any challenges/issues faced: we realized that the machine learning model and library we were using was not suited to detect the sarcasm in the text data we had. we also found that we need to incorporate the context data which we were not able to with our original choice of sci-kit learn. topic: text classification competition in your project proposal, please answer the following questions: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. nadia mohiuddin (nadiam2), thaniel tong (tztong2), pallavi narayanan (pallavi3) 2. which competition do you plan to join? text classification competition (tweet sarcasm detection) 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. we are prepared to learn the most recent, state of the art network classifiers. neural network classifiers we know are alexnet, googlenet, alphago, and deep blue. some deep learning frameworks we have heard of are pytorch, caffe, and tensorflow. these are some resources to help train and create deep neural networks. we do not have any prior experience using such methods/classifiers. 4. which programming language do you plan to use? python what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. which competition do you plan to join? if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods which programming language do you plan to use? courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['final', 'project', 'documentation', 'contributors', 'nadia', 'mohiuddin', 'nadiam', 'pallavi', 'narayanan', 'thaniel', 'tong', 'tztong', 'overall', 'use', 'purpose', 'classify', 'tweets', 'categories', 'sarcasm', 'not_sarcasm', 'categorize', 'written', 'response', 'context', 'data', 'form', 'sentiment', 'analysis', 'get', 'code', 'run', 'software', 'installation', 'details', 'install', 'python', 'library', 'ran', 'pip', 'name', 'terminal', 'using', 'actual', 'used', 'regular', 'import', 'statements', 'libraries', 'model', 'svm', 'sklearnsvm', 'training', 'done', 'preprocessing', 'order', 'improve', 'performance', 'first', 'tokenized', 'words', 'given', 'removed', 'stopwords', 'user', 'url', 'tags', 'tweet', 'lemmatized', 'could', 'root', 'word', 'finally', 'end', 'converted', 'emojis', 'strings', 'helped', 'increase', 'accuracy', 'classification', 'often', 'signal', 'train', 'appended', 'create', 'robust', 'text', 'tf', 'idf', 'weighting', 'convert', 'float', 'probabilities', 'giving', 'importance', 'frequent', 'terms', 'document', 'infrequent', 'across', 'entire', 'collection', 'fine', 'tuned', 'hyperparameters', 'svc', 'randomsearchcv', 'algorithm', 'sklearn', 'tfidf', 'scores', 'predicted', 'test', 'labels', 'testing', 'lastly', 'output', 'file', 'tried', 'also', 'preprocess', 'responses', 'contexts', 'stemming', 'making', 'lowercase', 'however', 'methods', 'give', 'us', 'optimal', 'f', 'score', 'attempted', 'classifiers', 'gaussiannb', 'multinomialnb', 'git', 'clone', 'repository', 'cd', 'sarcasmpy', 'randomforestclassifier', 'none', 'performed', 'well', 'isalpha', 'function', 'remove', 'non', 'alphabetic', 'characters', 'default', 'parameters', 'perform', 'tune', 'gridsearch', 'find', 'hyper', 'naive', 'bayes', 'large', 'multinested', 'forloop', 'mimicking', 'still', 'precision', 'recall', 'contributions', 'team', 'started', 'working', 'together', 'sharing', 'ideas', 'one', 'person', 'typed', 'screen', 'shared', 'members', 'later', 'split', 'try', 'different', 'classifying', 'dataset', 'approach', 'taken', 'save', 'time', 'three', 'computers', 'parallel', 'rather', 'waiting', 'computer', 'documentationtutorials', 'httpsscikitlearnorgstablemodulesgeneratedsklearnsvmsvchtml', 'httpsintellipaatcomcommunitywhatisagoodrangeofvaluesforthesvmsvc', 'hyperparameterstobeexploredviagridsearchcv', 'httpsscikitlearnorgstablemodulesgeneratedsklearnmodel_selectionrandomizedsea', 'rchcvhtml', 'lemmatization', 'httpswwwgeeksforgeeksorgpythonlemmatizationwithnltk', 'tfidfvectorizer', 'httpsscikitlearnorgstablemodulesgeneratedsklearnfeature_extractiontexttfidfvect', 'orizerhtml', 'pypi', 'emoji', 'httpspypiorgprojectemoji', 'httpswwwyoutubecomwatchvzzpcldsxkfeatureyoutubefbclidiwaroeihosxdjn_', 'txawhip_ahqdaxtqmoeabvmowifmtxurfqng', 'progress', 'report', 'made', 'parsed', 'json', 'filesinputs', 'inputs', 'stemmed', 'label', 'remaining', 'tasks', 'figure', 'bert', 'properly', 'challengesissues', 'faced', 'realized', 'machine', 'learning', 'suited', 'detect', 'found', 'need', 'incorporate', 'able', 'original', 'choice', 'scikit', 'learn', 'topic', 'competition', 'proposal', 'please', 'answer', 'following', 'questions', 'names', 'netids', 'captain', 'administrative', 'duties', 'plan', 'join', 'detection', 'choose', 'ir', 'prepared', 'stateoftheart', 'like', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'etc', 'concrete', 'tools', 'may', 'heard', 'neural', 'network', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'recent', 'state', 'art', 'know', 'alexnet', 'googlenet', 'alphago', 'blue', 'pytorch', 'caffe', 'tensorflow', 'resources', 'help', 'networks', 'methodsclassifiers', 'programming', 'language', 'courseproject', 'fork', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/nadiawoodninja/CourseProject	"search engine for indoor environment data using elasticsearch and front end search ui using react. cs410 final project netid: nadiaw2 search engine for indoor environment data using elasticsearch and front end search ui using react. cs410 final project netid: nadiaw2 table of contents abstract 2 video 2 code repository 2 demo app 2 technical architecture 3 setting up elastic search in google cloud. 3 data pipeline 10 fine tuning the engine 11 creating a search ui to search data 12 setting a development environment locally on your computer. 12 creating a ui for search experience by using app search packages 14 creating a search experience 14 deploying the react app to google cloud platform 17 create the app on the app engine 17 deploy the app 21 abstract in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster. i will be creating a web application to use elasticsearch to search content from a set of documents of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data transfer it to elasticsearch server. the front end written in react will allow users to search for data. measurable outcomes are going to be the amount of time it takes to run a query against a traditional rdms database vs. using elasticsearch. the planned architecture is shown in figure1. video code repository demo app https://cs410-env-search-app.uc.r.appspot.com/?size=n_20_n technical architecture figure 1 setting up elastic search in google cloud. go to https://console.cloud.google.com/ and create a project on google cloud. choose elasticsearch service. the only reason i chose this is to get some free credit to do my project work. you can create a separate account on elasticsearch if you want to but the trial only lasts for 14 days. a little bit about, elasticsearch service on google cloud: the service offers seamless integrated billing through your google cloud account for simple management and powerful customization. once the service is setup, you can click on manage on provider, to go directly to elastic cloud, to manage and create a search deployment on the cloud. https://cloud.elastic.co/ once you login, you will be taken to the elastic cloud dashboard. here you can create your ""deployments"" . when you create a deployment, you are given a choice of selecting from pre-configured environments for your need. in my case, i chose the elastic enterprise search solution to allow me to create a search experience on my web app. elastic technology provides the following stack options. for my project i am using the stack outlines in red. this stack gives me the elastic cloud, which gives me the ability to make restful api calls to my search engine. once your deployment is created you will be taken to the deployment dashboard. in this project, we will be focusing on using enterprise search capability. once you launch enterprise search, it will give you an option to select a product. for this project, i used app search. an overview of the architecture of app search stack is below. i have highlighted the architectural components which are being utilized for this project. once the app search is launch, it gives you an option to create a search engine. for this project, i created an engine called environmentaldata. this search engine allows a user to search through documents which contain sensor data e.g. humidity, temperature, light, battery info etc. currently the engine contains xxxx documents. the documents were loaded into the engine by uploading json file to the engine. the engine requires a specific formatting for the json files to adhere to. the json field names have to be all lowercase or be separated by underscore. this created a need to automate the conversion of existing json files to be converted to the required format. data pipeline data ingestion program in c#: in order to quickly load json files to the engine, i created a program in c# to convert existing files to a proper json file so that it can be imported into app search. this code can be run if you have visual studio free community version installed. the program requires to have a ""data"" folder where the files needed to be converted need to stored. the converted files are stored in the ""data/converted"" folder. i have included some converted file in the repo as well: https://github.com/nadiawoodninja/courseproject/tree/main/data/converted fine tuning the engine once the documents are loaded into then engine, you can index any json object. the json object will become a search-optimized document within your engine. a schema is created for you when you index your data - you do not need to specify any schema or alter your data before uploading. you can alter your schema later to set the appropriate data types. you also have the option to refine search by using features like, relevance tuning, synonyms & curations. for this project i utilized the synonym feature as we may have data from different sensors and the same datapoint maybe spelt differently or represented differently. creating a search ui to search data setting a development environment locally on your computer. download and install node.js from https://nodejs.org/en/ once installation is complete run this command. we are going to use this to create a react app. npm i -g create-react-app once the package is installed create the react app by running the command below. create-react-app 410-search-ui this command installs a light weight web server, webpack to bundle our code for deployment and babel for compiling our javascript code. once the app is created go to folder 410-search-ui and run this command. this will launch our development server on localhost:3000 npm start creating a ui for search experience by using app search packages install react search ui and the app search connector by running these commands npm install --save @elastic/react-search-ui @elastic/search-ui-app-search-connector creating a search experience i use atom as my editor for react apps. the app folder contains src folder which contains all the source code. app.js is the main file where the program starts execution. the src folder also has a config folder which contains engine.json. this file contains all the configuration needed to configure your search ui. in this file you can define your ""facets"", the fields which will be displayed on your results page, your sort fields etc. figure 2: engine.json the ability to define these configurations are provided by the packages which were installed above. figure 3: app.js deploying the react app to google cloud platform create the app on the app engine go to google's app engine console and create a new project: once the project is created, create an app engine application. select a region select node.js and standard environment clone our app's source code from github activate the shell by clicking git clone https://github.com/nadiawoodninja/courseproject.git install npm by running and install other elastic search packages npm i npm install @elastic/search-ui-app-search-connector npm install @elastic/react-search-ui build our app for deployment to do this, simply go into your app's root folder (where your ""src"" folder is), cd courseproject cd 410-search-ui and type the following command: npm i npm run build this creates a folder named ""build"" in our root directory. delete every thing else besides the build folder. get rid of everything else, except for the build folder. use these commands to remove files and folders rm <file-to-remove> rm -r <remove-recursively-like-directories-inside-directories> add an app.yaml and deploy in the same folder where we have our ""build"" folder, create a new file named app.yaml. by the end of this step, the only things left should be the ""build"" folder and ""app.yaml"". that's all the app engine will need to run our app. touch app.yaml nano app.yaml and add the following to its content: runtime: nodejs12 handlers: # serve all static files with url ending with a file extension - url: /(.*\..+)$ static_files: build/\1 upload: build/(.*\..+)$ # catch all handler to index.html - url: /.* static_files: build/index.html upload: build/index.html deploy the app deploy the app using the following command gcloud app deploy the app is running here https://cs410-env-search-app.uc.r.appspot.com/?size=n_20_n search engine for indoor environment data using elasticsearch and front end search ui using react. cs410 final project netid: nadiaw2 table of contents abstract ............................................................................................................................................ 2 demo app ........................................................................................................................................... 2 technical architecture .................................................................................................................. 3 setting up elastic search in google cloud. ................................................................................ 3 data pipeline ................................................................................................................................... 10 fine tuning the engine .................................................................................................................. 11 creating a search ui to search data .......................................................................................... 12 setting a development environment locally on your computer. ........................................................... 12 creating a ui for search experience by using app search packages ......................................................... 14 creating a search experience ............................................................................................................... 14 deploying the react app to google cloud platform .............................................................. 17 create the app on the app engine ......................................................................................................... 17 deploy the app .................................................................................................................................... 21 abstract in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster.1 i will be creating a web application to use elasticsearch to search content from a set of documents of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data transfer it to elasticsearch server. the front end written in react will allow users to search for data. measurable outcomes are going to be the amount of time it takes to run a query against a traditional rdms database vs. using elasticsearch. the planned architecture is shown in figure1. demo app https://cs410-env-search-app.uc.r.appspot.com/?size=n_20_n 1 gujarat, india, darshita kalyani, and dr. devarshi mehta, ""paper on searching and indexing using elasticsearch,"" international journal of engineering and computer science, june 30, 2017, https://doi.org/10.18535/ijecs/v6i6.45. technical architecture figure 1 setting up elastic search in google cloud. 1. go to https://console.cloud.google.com/ and create a project on google cloud. 2. choose elasticsearch service. the only reason i chose this is to get some free credit to do my project work. you can create a separate account on elasticsearch if you want to but the trial only lasts for 14 days. 3. a little bit about, elasticsearch service on google cloud: the service offers seamless integrated billing through your google cloud account for simple management and powerful customization. 4. once the service is setup, you can click on manage on provider, to go directly to elastic cloud, to manage and create a search deployment on the cloud. https://cloud.elastic.co/ 5. once you login, you will be taken to the elastic cloud dashboard. here you can create your ""deployments"" . 6. when you create a deployment, you are given a choice of selecting from pre-configured environments for your need. in my case, i chose the elastic enterprise search solution to allow me to create a search experience on my web app. elastic technology provides the following stack options. for my project i am using the stack outlines in red. this stack gives me the elastic cloud, which gives me the ability to make restful api calls to my search engine. 7. once your deployment is created you will be taken to the deployment dashboard. in this project, we will be focusing on using enterprise search capability. 8. once you launch enterprise search, it will give you an option to select a product. for this project, i used app search. 9. an overview of the architecture of app search stack is below. i have highlighted the architectural components which are being utilized for this project. 10. once the app search is launch, it gives you an option to create a search engine. 11. for this project, i created an engine called environmentaldata. this search engine allows a user to search through documents which contain sensor data e.g. humidity, temperature, light, battery info etc. currently the engine contains xxxx documents. the documents were loaded into the engine by uploading json file to the engine. 12. the engine requires a specific formatting for the json files to adhere to. the json field names have to be all lowercase or be separated by underscore. this created a need to automate the conversion of existing json files to be converted to the required format. data pipeline 13. data ingestion program in c#: in order to quickly load json files to the engine, i created a program in c# to convert existing files to a proper json file so that it can be imported into app search. this code can be run if you have visual studio free community version installed. the program requires to have a ""data"" folder where the files needed to be converted need to stored. the converted files are stored in the ""data/converted"" folder. i have included some converted file in the repo as well: https://github.com/nadiawoodninja/courseproject/tree/main/data/converted fine tuning the engine 14. once the documents are loaded into then engine, you can index any json object. the json object will become a search-optimized document within your engine. a schema is created for you when you index your data - you do not need to specify any schema or alter your data before uploading. you can alter your schema later to set the appropriate data types. 15. you also have the option to refine search by using features like, relevance tuning, synonyms & curations. for this project i utilized the synonym feature as we may have data from different sensors and the same datapoint maybe spelt differently or represented differently. creating a search ui to search data setting a development environment locally on your computer. 16. download and install node.js from https://nodejs.org/en/ 17. once installation is complete run this command. we are going to use this to create a react app. npm i -g create-react-app 18. once the package is installed create the react app by running the command below. create-react-app 410-search-ui this command installs a light weight web server, webpack to bundle our code for deployment and babel for compiling our javascript code. once the app is created go to folder 410-search-ui and run this command. this will launch our development server on localhost:3000 npm start creating a ui for search experience by using app search packages 19. install react search ui and the app search connector by running these commands npm install --save @elastic/react-search-ui @elastic/search-ui-app-search-connector creating a search experience 20. i use atom as my editor for react apps. the app folder contains src folder which contains all the source code. app.js is the main file where the program starts execution. 21. the src folder also has a config folder which contains engine.json. this file contains all the configuration needed to configure your search ui. in this file you can define your ""facets"", the fields which will be displayed on your results page, your sort fields etc. figure 2: engine.json the ability to define these configurations are provided by the packages which were installed above. figure 3: app.js deploying the react app to google cloud platform create the app on the app engine 22. go to google's app engine console and create a new project: 23. once the project is created, create an app engine application. 24. select a region 25. select node.js and standard environment 26. clone our app's source code from github 27. activate the shell by clicking git clone https://github.com/nadiawoodninja/courseproject.git 28. install npm by running and install other elastic search packages npm i npm install @elastic/search-ui-app-search-connector npm install @elastic/react-search-ui 29. build our app for deployment to do this, simply go into your app's root folder (where your ""src"" folder is), cd courseproject cd 410-search-ui and type the following command: npm i npm run build this creates a folder named ""build"" in our root directory. 30. delete every thing else besides the build folder. get rid of everything else, except for the build folder. use these commands to remove files and folders rm <file-to-remove> rm -r <remove-recursively-like-directories-inside-directories> 31. add an app.yaml and deploy in the same folder where we have our ""build"" folder, create a new file named app.yaml. by the end of this step, the only things left should be the ""build"" folder and ""app.yaml"". that's all the app engine will need to run our app. touch app.yaml nano app.yaml and add the following to its content: runtime: nodejs12 handlers: # serve all static files with url ending with a file extension - url: /(.*\..+)$ static_files: build/\1 upload: build/(.*\..+)$ # catch all handler to index.html - url: /.* static_files: build/index.html upload: build/index.html deploy the app 32. deploy the app using the following command gcloud app deploy 33. the app is running here https://cs410-env-search-app.uc.r.appspot.com/?size=n_20_n project progress report cs 410 - text information systems n. wood (nadiaw2) search engine for indoor environment data using elasticsearch netid: nadiaw2. i will be working on this project individually. abstract: in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster. i will be creating a web application to use elasticsearch to search content from a set of documents of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data transfer it to elasticsearch server. the front end written in react will allow users to search for data. measurable outcomes are going to be the amount of time it takes to run a query against a traditional rdms database vs. using elasticsearch. the planned architecture is shown in figure1: architecture diagram progress report the estimated time to complete this project is about 30-40 hours. tasks and time: task hours status determine how to set up, configure and deploy elasticsearch on a cloud platform : the cloud platform determination will base on the cost difference between azure, google and aws. 15 hours completed. created an account on google and hosted elasticsearch as a hosted service on elasticcloud. migration of raw to json data to elastic search server : 3 hours completed. created a data ingestion pipeline to read in a file which contains json per line and convert the file into an array of jsons. then uploaded the data to elasticsearch cloud. development and deployment of web application: 10 hours started. 8 hours' worth of work left. creating a crud application in react using the api to communicate with the elasticsearch engine. test and measure outcomes: 4 hours not started. issues: originally the plan was to develop a c#.net application, but further research supported developing a front end using node.js or react. i will be creating a crud (create, read, update, delete) client using react. project progress report cs 410 - text information systems n. wood (nadiaw2) search engine for indoor environment data using elasticsearch netid: nadiaw2. i will be working on this project individually. abstract: in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster.1 i will be creating a web application to use elasticsearch to search content from a set of documents of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data transfer it to elasticsearch server. the front end written in react will allow users to search for data. measurable outcomes are going to be the amount of time it takes to run a query against a traditional rdms database vs. using elasticsearch. the planned architecture is shown in figure1: 1 gujarat, india, darshita kalyani, and dr. devarshi mehta, ""paper on searching and indexing using elasticsearch,"" international journal of engineering and computer science, june 30, 2017, https://doi.org/10.18535/ijecs/v6i6.45. architecture diagram progress report the estimated time to complete this project is about 30-40 hours. tasks and time: task hours status 1. determine how to set up, configure and deploy elasticsearch on a cloud platform : a. the cloud platform determination will base on the cost difference between azure, google and aws. 15 hours completed. created an account on google and hosted elasticsearch as a hosted service on elasticcloud. 2. migration of raw to json data to elastic search server : 3 hours completed. created a data ingestion pipeline to read in a file which contains json per line and convert the file into an array of jsons. then uploaded the data to elasticsearch cloud. 3. development and deployment of web application: 10 hours started. 8 hours' worth of work left. creating a crud application in react using the api to communicate with the elasticsearch engine. 4. test and measure outcomes: 4 hours not started. issues: originally the plan was to develop a c#.net application, but further research supported developing a front end using node.js or react. i will be creating a crud (create, read, update, delete) client using react. project proposal cs 410 - text information systems n. wood (nadiaw2) search engine for indoor environment data using elasticsearch netid: nadiaw2. i will be working on this project individually. abstract: in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster. i will be creating a web application in c#.net to use elasticsearch to search content from a database of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data transfer it to elasticsearch server. the front end written in c# will allow users to search for data. measurable outcomes are going to be the amount of time it takes to run a query against a traditional rdms database vs. using elasticsearch. the planned architecture is shown in figure1: figure 1 the estimated time to complete this project is about 30-40 hours. tasks and time: determine how to set up, configure and deploy elasticsearch on a cloud platform : 15 hours the cloud platform determination will base on the cost difference between azure, google and aws. development and deployment of web application: 10 hours migration of sql database to elastic search server : 3 hours test and measure outcomes: 4 hours project proposal cs 410 - text information systems n. wood (nadiaw2) search engine for indoor environment data using elasticsearch netid: nadiaw2. i will be working on this project individually. abstract: in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster.1 i will be creating a web application in c#.net to use elasticsearch to search content from a database of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data transfer it to elasticsearch server. the front end written in c# will allow users to search for data. measurable outcomes are going to be the amount of time it takes to run a query against a traditional rdms database vs. using elasticsearch. the planned architecture is shown in figure1: 1 gujarat, india, darshita kalyani, and dr. devarshi mehta, ""paper on searching and indexing using elasticsearch,"" international journal of engineering and computer science, june 30, 2017, https://doi.org/10.18535/ijecs/v6i6.45. figure 1 the estimated time to complete this project is about 30-40 hours. tasks and time: 1. determine how to set up, configure and deploy elasticsearch on a cloud platform : 15 hours a. the cloud platform determination will base on the cost difference between azure, google and aws. 2. development and deployment of web application: 10 hours 3. migration of sql database to elastic search server : 3 hours 4. test and measure outcomes: 4 hours courseproject project proposal cs 410 - text information systems n. wood (nadiaw2) search engine for indoor environment data using elasticsearch presentation video part 1: https://uofi.box.com/s/a9p26mi8eym9i0n3ql8d83jke6ztzjbz part 2: https://uofi.box.com/s/gvsrrqsf9rpqbr48ha20slvg4m5eovky final report https://github.com/nadiawoodninja/courseproject/blob/main/cs410projectfinalreport.pdf demo app https://cs410-env-search-app.uc.r.appspot.com/?size=n_20_n netid: nadiaw2. individual abstract: in the age of sensors, devices and platforms collecting millions of datapoints every second, it comes necessary to be able to sift through all the data to develop insights efficiently big data offers the solution for analyzing large amount of data and using the technique of elasticsearch, access to data can be made faster. i will be creating a web front end in react to use elasticsearch's app search to search documents of environmental datapoints collected by sensors (indoor air, humidity, temp etc). currently, it is difficult to search for data in a rdms database and it takes significant time using traditional sql queries. the project will take the data, transfer it to elasticsearch platform. the front end written in react will allow users to search for data. measurable outcomes are going to be the amount of effort it takes to search for data in traditional rdms database vs. using elasticsearch's platform. the planned architecture is shown in figure1: figure 1 ============================== the estimated time to complete this project is about 30-40 hours. tasks and time: 1. determine how to set up, configure and deploy elasticsearch on a cloud platform : 15 hours a. the cloud platform determination will base on the cost difference between azure, google and aws. 2. development and deployment of web application: 10 hours 3. migration of sql database to elastic search server : 3 hours 4. test and measure outcomes: 4 hours progress report progress report the estimated time to complete this project is about 30-40 hours. tasks and time: task determine how to set up, configure and deploy elasticsearch on a cloud platform : the cloud platform determination will base on the cost difference between azure, google and aws. created an account on google and hosted elasticsearch as a hosted service on elasticcloud. hours 15 hours status completed task migration of raw to json data to elastic search server : hours 3 hours status completed task created a data ingestion pipeline to read in a file which contains json per line and convert the file into an array of jsons. then uploaded the data to elasticsearch cloud. 3. development and deployment of web application: creating a crud application in react using the api to communicate with the elasticsearch engine. hours 10 hours status started. 8 hours' worth of work left. task test and measure outcomes hours 4 hours status not started. issues: originally the plan was to develop a c#.net application, but further research supported developing a front end using node.js or react. i will be creating a crud (create, read, update, delete) client using react. understanding the elasticsearch stack takes a lot longer than expected. had to make very conscious decisions what to implement."	['search', 'engine', 'indoor', 'environment', 'data', 'using', 'elasticsearch', 'front', 'end', 'ui', 'react', 'cs', 'final', 'project', 'netid', 'nadiaw', 'table', 'contents', 'abstract', 'video', 'code', 'repository', 'demo', 'app', 'technical', 'architecture', 'setting', 'elastic', 'google', 'cloud', 'pipeline', 'fine', 'tuning', 'creating', 'development', 'locally', 'computer', 'experience', 'packages', 'deploying', 'platform', 'create', 'deploy', 'age', 'sensors', 'devices', 'platforms', 'collecting', 'millions', 'datapoints', 'every', 'second', 'comes', 'necessary', 'able', 'sift', 'develop', 'insights', 'efficiently', 'big', 'offers', 'solution', 'analyzing', 'large', 'amount', 'technique', 'access', 'made', 'faster', 'web', 'application', 'use', 'content', 'set', 'documents', 'environmental', 'collected', 'air', 'humidity', 'temp', 'etc', 'currently', 'difficult', 'rdms', 'database', 'takes', 'significant', 'time', 'traditional', 'sql', 'queries', 'take', 'transfer', 'server', 'written', 'allow', 'users', 'measurable', 'outcomes', 'going', 'run', 'query', 'vs', 'planned', 'shown', 'figure', 'httpscsenvsearchappucrappspotcomsizen__n', 'go', 'httpsconsolecloudgooglecom', 'choose', 'service', 'reason', 'chose', 'get', 'free', 'credit', 'work', 'separate', 'account', 'want', 'trial', 'lasts', 'days', 'little', 'bit', 'seamless', 'integrated', 'billing', 'simple', 'management', 'powerful', 'customization', 'setup', 'click', 'manage', 'provider', 'directly', 'deployment', 'httpscloudelasticco', 'login', 'taken', 'dashboard', 'deployments', 'given', 'choice', 'selecting', 'preconfigured', 'environments', 'need', 'case', 'enterprise', 'technology', 'provides', 'following', 'stack', 'options', 'outlines', 'red', 'gives', 'ability', 'make', 'restful', 'api', 'calls', 'created', 'focusing', 'capability', 'launch', 'give', 'option', 'select', 'product', 'used', 'overview', 'highlighted', 'architectural', 'components', 'utilized', 'called', 'environmentaldata', 'allows', 'user', 'contain', 'sensor', 'eg', 'temperature', 'light', 'battery', 'info', 'contains', 'xxxx', 'loaded', 'uploading', 'json', 'file', 'requires', 'specific', 'formatting', 'files', 'adhere', 'field', 'names', 'lowercase', 'separated', 'underscore', 'automate', 'conversion', 'existing', 'converted', 'required', 'format', 'ingestion', 'program', 'c', 'order', 'quickly', 'load', 'convert', 'proper', 'imported', 'visual', 'studio', 'community', 'version', 'installed', 'folder', 'needed', 'stored', 'dataconverted', 'included', 'repo', 'well', 'httpsgithubcomnadiawoodninjacourseprojecttreemaindataconverted', 'index', 'object', 'become', 'searchoptimized', 'document', 'within', 'schema', 'specify', 'alter', 'later', 'appropriate', 'types', 'also', 'refine', 'features', 'like', 'relevance', 'synonyms', 'curations', 'synonym', 'feature', 'may', 'different', 'datapoint', 'maybe', 'spelt', 'differently', 'represented', 'download', 'install', 'nodejs', 'httpsnodejsorgen', 'installation', 'complete', 'command', 'npm', 'g', 'createreactapp', 'package', 'running', 'searchui', 'installs', 'weight', 'webpack', 'bundle', 'babel', 'compiling', 'javascript', 'localhost', 'start', 'connector', 'commands', 'save', 'elasticreactsearchui', 'elasticsearchuiappsearchconnector', 'atom', 'editor', 'apps', 'src', 'source', 'appjs', 'main', 'starts', 'execution', 'config', 'enginejson', 'configuration', 'configure', 'define', 'facets', 'fields', 'displayed', 'results', 'page', 'sort', 'configurations', 'provided', 'googles', 'console', 'new', 'region', 'standard', 'clone', 'github', 'activate', 'shell', 'clicking', 'git', 'httpsgithubcomnadiawoodninjacourseprojectgit', 'build', 'simply', 'root', 'cd', 'courseproject', 'type', 'creates', 'named', 'directory', 'delete', 'thing', 'else', 'besides', 'rid', 'everything', 'except', 'remove', 'folders', 'rm', 'filetoremove', 'r', 'removerecursivelylikedirectoriesinsidedirectories', 'add', 'appyaml', 'step', 'things', 'left', 'thats', 'touch', 'nano', 'runtime', 'handlers', 'serve', 'static', 'url', 'ending', 'extension', 'static_files', 'upload', 'catch', 'handler', 'indexhtml', 'buildindexhtml', 'gcloud', 'gujarat', 'india', 'darshita', 'kalyani', 'dr', 'devarshi', 'mehta', 'paper', 'searching', 'indexing', 'international', 'journal', 'engineering', 'science', 'june', 'httpsdoiorgijecsvi', 'progress', 'report', 'text', 'information', 'systems', 'n', 'wood', 'working', 'individually', 'diagram', 'estimated', 'hours', 'tasks', 'task', 'status', 'determine', 'determination', 'base', 'cost', 'difference', 'azure', 'aws', 'completed', 'hosted', 'elasticcloud', 'migration', 'raw', 'read', 'per', 'line', 'array', 'jsons', 'uploaded', 'started', 'worth', 'crud', 'communicate', 'test', 'measure', 'issues', 'originally', 'plan', 'cnet', 'research', 'supported', 'developing', 'update', 'client', 'proposal', 'presentation', 'part', 'httpsuofiboxcomsapmieyminqldjkeztzjbz', 'httpsuofiboxcomsgvsrrqsfrpqbrhaslvgmeovky', 'httpsgithubcomnadiawoodninjacourseprojectblobmaincsprojectfinalreportpdf', 'individual', 'elasticsearchs', 'effort', 'understanding', 'lot', 'longer', 'expected', 'conscious', 'decisions', 'implement']
https://github.com/nykznykz/CourseProject	documentation overview of code 1. app.py this file contains functionality for the web app which serves recommendations to the user. see demo here. 2. model.py this file contains logic and algorithms powering the recommendations in the webapp. 3. src/basic_approach/collaborative_filtering.py this file contains an implementation of basic collaborative filtering as mention in class during week 6. 4. notebooks/neural_network.ipynb this notebook contains an approach using neural networks to predict the user's final rating. 5. src/**/scraper.py there are various scraper.py scripts used to scrape and assemble the dataset used. implementation details this is our stack: 1. data wrangling: pandas, numpy 2. web scraping: beautifulsoup, requests, regex * please refer to scraper.py for more details 2. model: scikit-learn, scipy, tensorflow * see requirements.txt for more 3. web framework: flask * run app.py on localhost:5000 ``` 4. front end: html & css this is the data that we managed to scrape: content data * all_recipes.csv * 1100+ recipes from * 460+ cuisines & categories content data * all_users.csv * 55k users * 73k ratings the website we scraped this data from has much more users and ratings available but this is what we managed to collect with limited amount of time and compute. we tried the following approaches for our recommender system: 1. basic collaborative filtering a. suggest recipes that similar users also liked. similarity is based on what recipes the users have rated and calculated using cosine similarity. 2. content based filtering a. suggest recipes similar to the recipes that the user liked. similarly is based on the categories of the recipe and other content based features and calculated using cosine similarity. 3. matrix factorization a. use singular value decomposition to discover latent factors that describe users and items. the matrix can be reconstructed and used to predict unobserved user-recipe ratings. b. this approach performed the best in terms of test rmse and predicting the ratings the users give to recipes on a held out test set. it is a classic method that performs well on the dataset we scraped. 4. neural networks a. use an embedding layer to learn embeddings for users and items. multiple dense layers are built on top of the concatenation of the embeddings to learn a function that predicts the rating. in addition content based features can be concatenated to the embeddings and used for prediction. b. it was found that adding further text based features from the title of the recipe slightly improved the test rmse. overall the test rmse beats the basic collaborative filtering approach but loses to the matrix factorization approach. c. the model was found to perform better when more data was scraped and added to the dataset. it is possible that it may beat the matrix factorization approach if even more data was scraped. usage of software webapp see demo here. 1. clone the repo (https://github.com/nykznykz/courseproject) 2. install requirements.txt a. pip install -r requirements.txt 3. run app.py a. python app.py 4. navigate to localhost:5000 in the browser. basic collaborative filtering approach see this readme for detailed documentation. neural network approach run the jupyter notebook and follow along. contribution of group members tanmoy: creating the webapp (app.py), modeling with svd and other methods (model.py) and web scraping nikolas: modeling using deep learning approach (notebooks/neural_network.ipynb), comparison of methods, reports & creation of video dikra: web scraping, modeling with basic collaborative filtering approach used in class (src/basic_approach/collaborative_filtering.py) self evaluation overall we have completed the tasks we set out to do: 1. scraping real world recipe data 2. benchmarking what we learned in class with our own methods 3. creating a webapp to serve actual recommendations to users we think the following could have been done if more time were available: 1. scraping more data and constructing a larger dataset 2. engineering more user and item based features for use together with the neural network progress report link to proposal: https://github.com/nykznykz/courseproject/blob/main/proposal.pdf completed tasks we have completed the first task: 1. scraping a. scraping reviews & ratings b. scraping recipes challenges 1. dataset size a. while we managed to perform scraping on the website smoothly, getting a large dataset of users ratings is challenging. we expect to overcome this eventually as we will continue scraping and growing the dataset along with the completion of subsequent tasks. 2. sparsity a. one concern is that the dataset might be sparse as each recipe is only reviewed by a small subset of users. we plan to address this by framing the recommendations as a classification problem and in doing so, we will be able to only train on observed ratings. pending tasks 1. construction of dataset a. basic dataset of user_id, recipe_id, rating b. construction of features i. exploratory data analysis ii. feature engineering 2. setting up baseline approach 3. model training a. creating general model architecture b. tuning of hyperparameters c. others (e.g. dropout, l2 normalization, embedding layers etc.) 4. model evaluation a. evaluation of baseline & actual model 5. post analysis 6. compiling results and writing of report free topic: food recipe recommender system team members 1. lee kar heng nikolas basil (captain) * nblee2@illinois.edu 2. mochammad dikra prasetya * mdp9@illinois.edu 3. tanmoy mishra * tanmoym2@illinois.edu description for this project, we chose the task of creating a recommender system for food recipes. from a project perspective, it would be interesting to go from scraping real world data (from a recipe platform with millions of users and recipes) to training a model to evaluating it against an approach detailed in class. in general, we think it is also interesting and appropriate for the current situation where people are spending more time staying home and likely looking to pursue/get better at home cooking. being in this position ourselves, we realise that finding a variety of recipes can be daunting. while we may have a sudden inspiration to cook a specific dish (e.g. lasagna) and are able to find such a recipe through pull based text retrieval methods like the search engine, finding more recipes after that point might be difficult. to tackle this problem, we aim to rely on the strengths of a push based approach such as recommendations to alleviate the decision fatigue and steer users to similar recipes that they are likely to enjoy (e.g. mac & cheese / pasta). overview of approach 1. scrape recipes on this site that have some number of reviews: https://www.allrecipes.com/recipe/281306/lime-ginger-chicken-kabobs-with-peanut-sauc e/ a. for each recipe, scrape data including the users who gave a rating and the actual rating they gave. from there, we are able to find other reviews that this user also rated. we can then add this to our list of recipes to scrape. b. this will help build an interaction dataset where each review is rated by multiple users and each user has rated multiple recipes. c. many users provide a detailed description of their review, explaining their rationale for the rating. if time permits, we can use this as user features when scoring future recipes for a particular user or we can mine this information to learn more about a given recipe and generate new features. 2. scrape metadata for each recipe to be used as features: a. things like preparation technique b. ingredients used etc c. maybe even images if we want to do some cv based recommendations 3. prepare dataset from the above two steps 4. setting up a baseline (e.g. basic collaborative filtering) a. we do something similar to what we've learnt in class: i. for a user and recipe pair, average the ratings of that recipe from similar users. ii. similar users are defined by a similarity threshold, with previous interactions used to calculate similarity. 5. feature engineering a. user features: we can learn something about a particular user given the user's past reviews. b. recipe features: we can learn something about a particular recipe given what users have said about it as well as the contents of the recipe itself. 6. model training a. we aim to predict the rating a user will give to a recipe 7. model evaluation a. some data will be held back for evaluation. b. we will compare the predicted vs actual ratings. tools 1. selenium (scraping) 2. python & pandas (data manipulation) 3. tensorflow (recommender system) 4. numpy / scikit learn (evaluation) datasets we will create our own dataset by scraping www.allrecipes.com. the raw dataset, final dataset as well as code used to scrape and process the data will be made available. this dataset is expected to be rich in features and large in quantity https://expandedramblings.com/index.php/allrecipes-facts-statistics/ expected outcome we will have a rich dataset to train a good recommender system as well as evaluate on. we aim to beat the baseline approach taught in class. evaluation rmse: actual ratings vs predicted ratings ndcg: rank recipes by ratings and calculate ndcg based on actual ratings. both evaluation approaches should be able to be applied on the baseline and actual approach to enable comparison. programming language python expected workload we anticipate that we will easily spend more than 20*3 = 60 hours on the project due to the richness of the dataset allowing us to implement many techniques on it as well as the lengthy process likely required to obtain such a dataset. a rough breakdown of the work is as follows: 1. scraping (total 15 hours) a. scraping reviews & ratings (7.5 hours) b. scraping recipes (7.5 hours) we estimate this based on the given time allocated in mp2.1 (4hrs) while providing some buffer given the more complicated nature of the website which likely has measures to deter scraping. 2. construction of dataset (total 20 hours) a. basic dataset of user_id, recipe_id, rating (3 hours) b. construction of features i. exploratory data analysis (7 hours) ii. feature engineering (10 hours) 3. setting up baseline approach (5 hours) 4. model training (10 hours) a. creating general model architecture b. tuning of hyperparameters c. others (e.g. dropout, l2 normalization, embedding layers etc.) 5. model evaluation (5 hours) a. evaluation of baseline & actual model 6. post analysis (5 hours) 7. compiling results and writing of report (5 hours) any extra time from unexpected surpluses can be channelled into subtasks like sentiment analysis/topic modelling for analysis & insights or used directly as model features. courseproject a video presentation can be found here documentation for the project can be found here recipe recommender system driven by my curiousity of how netflix, youtube and spotify serve personalized recommendations, i decided to learn how to create my own recommender system. machine learning problem: given a person's preferences in past recipes, could i predict other new recipes they might enjoy? i created seasonings, a recipe recommender system. the motivation behind this web app is to help users discover personalized and new recipes, and prepare for grocery runs! i received a lot early positive feedback and plan future improvements to the ux and model. i had a lot of fun making this, and plan to use this whenever i need a jolt of inspiration in the kitchen! data data was scraped from allrecipes.com, as there was no public api. i narrowed the scope to focus on chef john's recipes (from foodwishes.com). content data all_recipes.csv 1100+ recipes from 460+ cuisines & categories content data all_users.csv 55k users 73k ratings tech stack data wrangling: pandas, numpy web scraping: beautifulsoup, requests, regex please refer to scraper.py for more details model: scikit-learn, scipy see requirements.txt for more web framework: flask run app.py on localhost:5000 ``` front end: html & css models please refer to model.py collaborative filtering - suggest recipes that other users similar to you also liked (cosine similarity) if i liked spaghetti al tonno, and another user similar to me liked perfect prime rib and i haven't tried it, the model would recommend that recipe. content based filtering - suggest recipes that are similar to recipes that you like (cosine similiarity) if i liked spaghetti al tonno, the model would recommend italian meatballs, because italian meatballs are similar to spaghetti, in terms of the categories both recipes share (italian, world cuisine). matrix factorization - suggest recipes that you like, uncover latent factors, in a lower dimensional space (singular value decomposition) if i liked turkey, and i liked cranberry sauce, the model would recommend pumpkin pie because it picked up a latent factor that you liked thanksgiving dishes, where the other models would not be able to. model evaluation my final model was a hybrid recommender that tackled the cold-start problem with a content recommender, augmented with user preferences, and factorization to rank recipes based on a voting classifier rule. recipe recommender system 2 motivation * increased interest in home cooking during this period. * while we usually know what we want to cook initially, we may run out of ideas at some point. * require the help of a push-based approach like recommender systems. * use case: i have tried and liked recipes for italian cuisine. recommend me new recipes based on this information solution solution * seasonings is a webapp that can recommend new recipes under a wide variety of contexts * example contexts: * people with similar tastes also like... * because you liked <recipe name>... * tastebreakers... * all the user has to do is provide 5 anchor recipes for seasonings to generate recommendations. demo	['documentation', 'overview', 'code', 'apppy', 'file', 'contains', 'functionality', 'web', 'app', 'serves', 'recommendations', 'user', 'see', 'demo', 'modelpy', 'logic', 'algorithms', 'powering', 'webapp', 'srcbasic_approachcollaborative_filteringpy', 'implementation', 'basic', 'collaborative', 'filtering', 'mention', 'class', 'week', 'notebooksneural_networkipynb', 'notebook', 'approach', 'using', 'neural', 'networks', 'predict', 'users', 'final', 'rating', 'srcscraperpy', 'various', 'scraperpy', 'scripts', 'used', 'scrape', 'assemble', 'dataset', 'details', 'stack', 'data', 'wrangling', 'pandas', 'numpy', 'scraping', 'beautifulsoup', 'requests', 'regex', 'please', 'refer', 'model', 'scikitlearn', 'scipy', 'tensorflow', 'requirementstxt', 'framework', 'flask', 'run', 'localhost', 'front', 'end', 'html', 'css', 'managed', 'content', 'all_recipescsv', 'recipes', 'cuisines', 'categories', 'all_userscsv', 'k', 'ratings', 'website', 'scraped', 'much', 'available', 'collect', 'limited', 'amount', 'time', 'compute', 'tried', 'following', 'approaches', 'recommender', 'system', 'suggest', 'similar', 'also', 'liked', 'similarity', 'based', 'rated', 'calculated', 'cosine', 'similarly', 'recipe', 'features', 'matrix', 'factorization', 'use', 'singular', 'value', 'decomposition', 'discover', 'latent', 'factors', 'describe', 'items', 'reconstructed', 'unobserved', 'userrecipe', 'b', 'performed', 'best', 'terms', 'test', 'rmse', 'predicting', 'give', 'held', 'set', 'classic', 'method', 'performs', 'well', 'embedding', 'layer', 'learn', 'embeddings', 'multiple', 'dense', 'layers', 'built', 'top', 'concatenation', 'function', 'predicts', 'addition', 'concatenated', 'prediction', 'found', 'adding', 'text', 'title', 'slightly', 'improved', 'overall', 'beats', 'loses', 'c', 'perform', 'better', 'added', 'possible', 'may', 'beat', 'even', 'usage', 'software', 'clone', 'repo', 'httpsgithubcomnykznykzcourseproject', 'install', 'pip', 'r', 'python', 'navigate', 'browser', 'readme', 'detailed', 'network', 'jupyter', 'follow', 'along', 'contribution', 'group', 'members', 'tanmoy', 'creating', 'modeling', 'svd', 'methods', 'nikolas', 'deep', 'learning', 'comparison', 'reports', 'creation', 'video', 'dikra', 'self', 'evaluation', 'completed', 'tasks', 'real', 'world', 'benchmarking', 'learned', 'serve', 'actual', 'think', 'could', 'done', 'constructing', 'larger', 'engineering', 'item', 'together', 'progress', 'report', 'link', 'proposal', 'httpsgithubcomnykznykzcourseprojectblobmainproposalpdf', 'first', 'task', 'reviews', 'challenges', 'size', 'smoothly', 'getting', 'large', 'challenging', 'expect', 'overcome', 'eventually', 'continue', 'growing', 'completion', 'subsequent', 'sparsity', 'one', 'concern', 'might', 'sparse', 'reviewed', 'small', 'subset', 'plan', 'address', 'framing', 'classification', 'problem', 'able', 'train', 'observed', 'pending', 'construction', 'user_id', 'recipe_id', 'exploratory', 'analysis', 'ii', 'feature', 'setting', 'baseline', 'training', 'general', 'architecture', 'tuning', 'hyperparameters', 'others', 'eg', 'dropout', 'l', 'normalization', 'etc', 'post', 'compiling', 'results', 'writing', 'free', 'topic', 'food', 'team', 'lee', 'kar', 'heng', 'basil', 'captain', 'nbleeillinoisedu', 'mochammad', 'prasetya', 'mdpillinoisedu', 'mishra', 'tanmoymillinoisedu', 'description', 'project', 'chose', 'perspective', 'would', 'interesting', 'go', 'platform', 'millions', 'evaluating', 'appropriate', 'current', 'situation', 'people', 'spending', 'staying', 'home', 'likely', 'looking', 'pursueget', 'cooking', 'position', 'realise', 'finding', 'variety', 'daunting', 'sudden', 'inspiration', 'cook', 'specific', 'dish', 'lasagna', 'find', 'pull', 'retrieval', 'like', 'search', 'engine', 'point', 'difficult', 'tackle', 'aim', 'rely', 'strengths', 'push', 'alleviate', 'decision', 'fatigue', 'steer', 'enjoy', 'mac', 'cheese', 'pasta', 'site', 'number', 'httpswwwallrecipescomrecipelimegingerchickenkabobswithpeanutsauc', 'e', 'including', 'gave', 'add', 'list', 'help', 'build', 'interaction', 'review', 'many', 'provide', 'explaining', 'rationale', 'permits', 'scoring', 'future', 'particular', 'mine', 'information', 'given', 'generate', 'new', 'metadata', 'things', 'preparation', 'technique', 'ingredients', 'maybe', 'images', 'want', 'cv', 'prepare', 'two', 'steps', 'something', 'weve', 'learnt', 'pair', 'average', 'defined', 'threshold', 'previous', 'interactions', 'calculate', 'past', 'said', 'contents', 'back', 'compare', 'predicted', 'vs', 'tools', 'selenium', 'manipulation', 'scikit', 'datasets', 'create', 'wwwallrecipescom', 'raw', 'process', 'made', 'expected', 'rich', 'quantity', 'httpsexpandedramblingscomindexphpallrecipesfactsstatistics', 'outcome', 'good', 'evaluate', 'taught', 'ndcg', 'rank', 'applied', 'enable', 'programming', 'language', 'workload', 'anticipate', 'easily', 'spend', 'hours', 'due', 'richness', 'allowing', 'us', 'implement', 'techniques', 'lengthy', 'required', 'obtain', 'rough', 'breakdown', 'work', 'follows', 'total', 'estimate', 'allocated', 'mp', 'hrs', 'providing', 'buffer', 'complicated', 'nature', 'measures', 'deter', 'extra', 'unexpected', 'surpluses', 'channelled', 'subtasks', 'sentiment', 'analysistopic', 'modelling', 'insights', 'directly', 'courseproject', 'presentation', 'driven', 'curiousity', 'netflix', 'youtube', 'spotify', 'personalized', 'decided', 'machine', 'persons', 'preferences', 'created', 'seasonings', 'motivation', 'behind', 'grocery', 'runs', 'received', 'lot', 'early', 'positive', 'feedback', 'improvements', 'ux', 'fun', 'making', 'whenever', 'need', 'jolt', 'kitchen', 'allrecipescom', 'public', 'api', 'narrowed', 'scope', 'focus', 'chef', 'johns', 'foodwishescom', 'tech', 'models', 'spaghetti', 'al', 'tonno', 'another', 'perfect', 'prime', 'rib', 'havent', 'recommend', 'similiarity', 'italian', 'meatballs', 'share', 'cuisine', 'uncover', 'lower', 'dimensional', 'space', 'turkey', 'cranberry', 'sauce', 'pumpkin', 'pie', 'picked', 'factor', 'thanksgiving', 'dishes', 'hybrid', 'tackled', 'coldstart', 'augmented', 'voting', 'classifier', 'rule', 'increased', 'interest', 'period', 'usually', 'know', 'initially', 'ideas', 'require', 'pushbased', 'systems', 'case', 'solution', 'wide', 'contexts', 'example', 'tastes', 'name', 'tastebreakers', 'anchor']
https://github.com/oboffil/CourseProject	"coordinator: omar n boffil netid: oboffil2 oboffil2@illinois.edu group name: oboffil topic: option 2.1 meta toolkit project topic: enhance meta and metapy usability metapy and its toolkit are among the best-known libraries used in python for text mining and another usability. still, this library is not compatible will all python versions, making it challenging to create an environment where you can use its power to build good code. in this documentation, i will give you all the steps and code to create an environment using anaconda to install metapy and other useful libraries that you can combine with metapy to make your code more efficient. this process will use one of the most recent python versions that will benefit users who like to work in more updated environments and let you use newer python packages and combine them with metapy. we will do this process as simple as possible and avoiding complicated code and frustration. this documentation will work for windows and macos operator systems. also, we will use anaconda gui to make it as simple as possible. the code to install metapy and its useful toolkit will be included in an anaconda file and a text file with all the libraries' needs. to ensure that this software works and created the right result, make sure to read the code's comment, and follow the steps described below. this will guarantee the success of this environment for metapy. 1) installation process: first, we will need to install anaconda if you don't have it yet. (in case you have it installed already on your computer, you can move to step 2). otherwise, you will need to: 1.1) go to https://docs.anaconda.com/anaconda/install/ 1.2) select your operator system for windows or macos 1.3) fallow the instruction on anaconda website to complete the installation by using the gui or the terminal on your computer after you have installed anaconda in your computer, we can move on and create an environment that works with metapy 2) creating an environment with python 3.7. now that anaconda software is installed on your computer. you can open it and fallows: 2.1) click on ""environment"" 2.2) click on ""create"" to create a new environment where we are going to work 2.3) add a name to your environment, select python version 3.7, and click on ""create"". this will take a few seconds, and it will create a python environment where you can start running code 3)- getting the source code and resources: now that we created the environment with python 3.7 we can implement the code that will let us use the different libraries, but first, we need to download the source code and packages from https://github.com/oboffil/courseproject.git download the download resources.zip from the repository above and unzip it to get the folder that contains the source code (implementation.ipynb), and the text file (package-list.txt) with the toolkit packages that will help you to set up metapy and other useful libraries. 4)- implementing the source code and packages. with all tolls needed, we can complete the installation of metapy in our environment: 4.1) go back to anaconda and click on ""home"" 4.2) on ""application on"" select the environment that you just created. this will take a few seconds 4.3) install and launch jupyter notebook. if you haven't installed it yet, it will take a few seconds; otherwise, it will launch automatically. 4.3) look for the directory where you saved the unzipped download resource folder mentioned in step 3 and click on implementation.ipynb. 4.4) this contains the source code to install the libraries and packages for this tutorial. read the comment of the source code and make sure you delete the comments before running each line. note* if you get an error trying to run the code directly from the file, go back to the directory, create a new python 3 and copy and paste the code into the newly created file. just make sure this new file is in the same directory as the package-list.txt. this will install metapy and some of their useful toolkit in the environment. after the installation is completed, you can import the libraries in any other user interface that you prefer in anaconda as long as you use the environment where you installed the packages and libraries initially. for example, you could import these libraries on jupyterlab, qt console, jupyter notebook, etc. coordinator: omar n boffil oboffil2@illinois.edu group name: oboffil topic: meta toolkit project topic: enhance meta and metapy usability project progress which tasks have been completed? the environment test that can handle metapy and the toolkits is done. also, the code with the libraries need is complete. other codes to import the libraries and install the different tools are completed as well. 2) which tasks are pending? i need to complete the documentation and create the tutorial video to guide the user to develop these libraries' in an anaconda environment. 3) are you facing any challenges? yes, i haven't found a way to run the installation of anaconda and the environment in just one run, also creating the environment by code has some issues. i'm thinking of using the gui to implement this step and install anaconda directly from their website and then use the code to install the different packages. coordinator: omar n boffil netid: oboffil2 oboffil2@illinois.edu group name: oboffil topic: option 2.1 meta toolkit project topic: enhance meta and metapy usability the metapy installation and usability took me more than 4 hours to figure out how to install a compatible version of python that i can use to complete the assignment in this course. my goal with this project is to create a system and a tutorial for installing and using the tool on different platforms that will help future students complete this installation and used the toolkits without feeling the same frustration i felt at the beginning of this class. i will show how to set up an environment in the windows and macos operation system using anaconda and the latest python versions to complete the different tasks and integrate the other popular toolkits. also, i will create a system in python that will contain all necessaries steps to install this environment and the different packages need it courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. coordinator: omar n boffil oboffil2@illinois.edu group name: oboffil topic: meta toolkit project topic: enhance meta and metapy usability tutorial video: https://youtu.be/m9ceqil3adg https://youtu.be/m9ceqil3adg https://youtu.be/m9ceqil3adg"	['coordinator', 'omar', 'n', 'boffil', 'netid', 'oboffil', 'oboffilillinoisedu', 'group', 'name', 'topic', 'option', 'meta', 'toolkit', 'project', 'enhance', 'metapy', 'usability', 'among', 'bestknown', 'libraries', 'used', 'python', 'text', 'mining', 'another', 'still', 'library', 'compatible', 'versions', 'making', 'challenging', 'create', 'environment', 'use', 'power', 'build', 'good', 'code', 'documentation', 'give', 'steps', 'using', 'anaconda', 'install', 'useful', 'combine', 'make', 'efficient', 'process', 'one', 'recent', 'benefit', 'users', 'like', 'work', 'updated', 'environments', 'let', 'newer', 'packages', 'simple', 'possible', 'avoiding', 'complicated', 'frustration', 'windows', 'macos', 'operator', 'systems', 'also', 'gui', 'included', 'file', 'needs', 'ensure', 'software', 'works', 'created', 'right', 'result', 'sure', 'read', 'codes', 'comment', 'follow', 'described', 'guarantee', 'success', 'installation', 'first', 'need', 'dont', 'yet', 'case', 'installed', 'already', 'computer', 'move', 'step', 'otherwise', 'go', 'httpsdocsanacondacomanacondainstall', 'select', 'system', 'fallow', 'instruction', 'website', 'complete', 'terminal', 'creating', 'open', 'fallows', 'click', 'new', 'going', 'add', 'version', 'take', 'seconds', 'start', 'running', 'getting', 'source', 'resources', 'implement', 'us', 'different', 'download', 'httpsgithubcomoboffilcourseprojectgit', 'resourceszip', 'repository', 'unzip', 'get', 'folder', 'contains', 'implementationipynb', 'packagelisttxt', 'help', 'set', 'implementing', 'tolls', 'needed', 'back', 'home', 'application', 'launch', 'jupyter', 'notebook', 'havent', 'automatically', 'look', 'directory', 'saved', 'unzipped', 'resource', 'mentioned', 'tutorial', 'delete', 'comments', 'line', 'note', 'error', 'trying', 'run', 'directly', 'copy', 'paste', 'newly', 'completed', 'import', 'user', 'interface', 'prefer', 'long', 'initially', 'example', 'could', 'jupyterlab', 'qt', 'console', 'etc', 'progress', 'tasks', 'test', 'handle', 'toolkits', 'done', 'tools', 'well', 'pending', 'video', 'guide', 'develop', 'facing', 'challenges', 'yes', 'found', 'way', 'issues', 'im', 'thinking', 'took', 'hours', 'figure', 'assignment', 'course', 'goal', 'installing', 'tool', 'platforms', 'future', 'students', 'without', 'feeling', 'felt', 'beginning', 'class', 'show', 'operation', 'latest', 'integrate', 'popular', 'contain', 'necessaries', 'courseproject', 'please', 'fork', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'overviewweek', 'activities', 'httpsyoutubemceqiladg']
https://github.com/oransum/CourseProject	"cs410 text information systems(fall 2020) project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. edward ma - kcma2(captain) oran chan - wlchan2 2. which competition do you plan to join? we are planning to work on the competition of text classification 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. we are interested in svm, xgboost and especially the bert model which has proven performance on downstream tasks. hence, we decided to use pytorch to fine-tune this state-of-the-art method to tackle various classification tasks. toxic comment classification is one of my experiences working on bert. 4. which programming language do you plan to use? python text classification competition: twitter sarcasm detection oran chan (wlchan2) and edward ma (kcma2) abstract sarcasm detection is a specific case of sentiment analysis. instead of classifying all kinds of motion, this task only focuses on sarcasm. given a text as input, the detection model outputs whether it is sarcastic or not. the most challenging part is that judgement of sarcasm detection is not very clearly defined or it is subjective. in this classification competition, we suggest using less human and computer resources to achieve a better result. we demonstrate how synthetic data helps to boost up model performance with manual effort. 1. introduction in this classification competition, the training data size is 5000 with equal distribution. this size is relatively small in natural language processing (nlp). therefore, we proposed to use transfer learning and data augmentation strategy to tackle this problem. for the transfer learning part, we will train our model based on a pre-trained model which was trained on a very large corpus to solve some basic nlp tasks. it is a promised way to start with them instead of training from scratch. it does not only provide a converge word embeddings but also shortens training time. for the data augmentation part, we leverage contextual word embeddings training methods to generate synthetic data based on limited training data. 2. data processing given 5000 twitter text, we split it into training dataset and evaluation dataset with 9:1 ratio. in other words, the training dataset includes 4500 records while evaluation dataset includes 500 records. 2.1 preprocessing as mentioned before, we adopted a pre-trained model which can take care of lots of data processing. we do not need to do lots of feature engineering based on pure text but tokenizing text into subwords. instead of using words as a feature, we decode to use subwords. for instance, ""language"" can be represented by ""lang"", ""uage"" tokens. one of the major benefits is that it can handle out-of-vocabulary (oov) problems. giving that we use 26 (or 52 if case sensitive) characters, we can represent all english words. another advantage is that it can converge rare word's embeddings as we may break down a single rare word into multiple tokens. also, subword algorithms leverage an affix behavior to further coverage subword embeddings. in english linguistics, an affix is a morpheme that is attached to a word stem to form a new word or word form. for example, a ""dis"" prefix means opposite while a ""less"" suffix means no. the following part covers byte pair encoding (bpe) [1] and wordpiece [2] subword algorithm. example of word tokenization 2.2 bpe bpe is proposed by sennrich et al. (2016) and the general idea is counting the frequency of subwords up to a predefined maximum number of subwords. bpe is adopted by roberta [5]. the algorithm is: 1. prepare a large enough training data (i.e. corpus) 2. define a desired subword vocabulary size 3. split word to sequence of characters and append the suffix ""</w>"" to the end of word with word frequency. so the basic unit is character in this stage. for example, the frequency of ""low"" is 5, then we rephrase it to ""l o w </w>"": 5 4. generating a new subword according to the high frequency occurrence. 5. repeating step 4 until reaching subword vocabulary size which is defined in step 2 or the next highest frequency pair is 1. 2.3 wordpiece wordpiece is proposed by schuster and nakajima (2012). the idea is the same as bpe except the criteria of forming new subwords. new subwords will be formed based on likelihood but not the next highest frequency pair. wordpiece is adopted by bert [6] the algorithm is: 1. prepare a large enough training data (i.e. corpus) 2. define a desired subword vocabulary size 3. split word to sequence of characters 4. build a languages model based on step 3 data 5. choose the new word unit out of all the possible ones that increases the likelihood on the training data the most when added to the model. 6. repeating step 5 until reaching subword vocabulary size which is defined in step 2 or the likelihood increases falls below a certain threshold. 2.4 data augmentation there are lots of different ways to generate synthetic data. one of the typical ways is replacing words by synonyms [3] over nltk [4] library. the limitation of using nltk's synonyms is that it does not consider context. considered the nature of sarcasm detection, we decided to levearge neural network models to find similar meaning words when considering context. the mechanism is picking a word randomly and using a neural work model to predict the possible word to replace it by providing whole content to the neural network models. we adopted bert and roberta neural network models to perform this data augmentation and the ration is 1:1. here is the mechanism: 1. pick a word from input 2. replace the picked word by reserved token (e.g. [mask]) 3. tokenize input with masked token 4. feeding tokenize tokens to masked language model 5. replace the picked word by language model prediction. flow of augmentation as nlpaug [7] implemented over 10 different data augmentation, we decided to leverage this library for data augmentation. in the evaluation, we tried different sizes of synthetic data to see how synthetic data affect the model performance. also, we adopted two neural network models for comparison. example of augmented data type content original @user @user stephen jones finally losing it on twitter by claiming the liberty is a great stadium . never mind his thoughts on sarries and the salary cap breach - this is a new low even for him . <url> augmented data #1 @user @user stephen jones finally losing it at twitter suddenly claiming kings liberty is a great stadium . never mind after thoughts over sarries and the transfer tax breach - this is a historic low from meeting him . <url> augmented data #2 @user @user stephen jones finally losing it on twitter by claiming the series is its great success . never mind his thoughts on soccer but high salary cap pro - football is a serious low even for david . < url > 3. model architecture in this text classification, we evaluated both bert and roberta model and we finally picked roberta as it outperforms bert model based on our evaluation dataset. 3.1 bert bert (devlin et al., 2018) is a method of pre-training language representations, meaning that it was trained as a general-purpose ""language understanding"" model on a large text corpus (like wikipedia), and adopting it for downstream nlp tasks that we care about. bert outperforms previous methods because it is the first unsupervised, deeply bidirectional system for pre-training nlp. bert uses three embeddings to compute the input representations. they are token embeddings, segment embeddings and position embeddings. ""cls"" is the reserved token to represent the start of a sequence while ""sep"" is a separate segment (or sentence). token embeddings are subword embeddings which represent the subword itself. segment embeddings only include two embeddings which represent the first segment of input and second segment of input. position embeddings refers to the position of the subword in the input. segment embeddings help to distinguish two segments in some nlp downstream tasks such as question and answering tasks. for classification tasks, we only use a single segment. position embeddings reflect the location as the same word may have different meanings in different positions of text. for bert's training setup, it uses the masked language model (mlm) and next sentence prediction mechanism. by masking some tokens randomly, using other tokens to predict those masked tokens to learn the representations. for example, the original sentence is ""i am learning nlp"". assuming ""nlp"" is a selected token for masking. then 80% of time, it will show as ""i am learning [mask]. for the next sentence prediction approach, it targets to learn the relationship between sentences. the objective is classifying whether the second sentence is the next sentence or not. 3.2 roberta liu et al. (2019) studied the impact of many key hyper-parameters and training data size of bert. they found that bert was significantly undertrained, and can match or exceed the performance of every model published after it. roberta (robustly optimized bert approach) is introduced and performance is either matching or exceeding original bert. roberta is developed based on bert. by applying some modifications, it outperformed bert model performance according to liu et al (2019) experiments. first of all, it uses a larger training data. on the other hand, roberta uses dynamic masking instead of static masking. dynamic masking means that the masked token will be different every time. 4. experiments in the experiments, we mainly compare two bert and roberta with different numbers of augmentation data. the size of original training record and evaluation record are 4500 and 500 respectively while size of augmentation data are various. taking experiment #2 as an example, it used 9000 augmentation data and 4500 original data for training. instead of using a number of epochs for comparison, we use global steps. an epoch is one full pass through the training set, so that every sample gets the chance to be seen by model. global steps refer to the number of batches seen by the model. for example, 1 epoch includes 4500 training records when it does not include any augmentation data while there are 13500 training records in 1 epoch when introducing 9000 augmentation data. therefore, using global steps for comparison is a better approach. 4.1 bert vs roberta this experiment aims at demonstrating the model performance between bert and roberta. roberta shows it converges to minima faster than bert. roberta reaches its best f1 score at 6756 global steps while bert reaches at 14000 global steps. although bert is sligher better than roberta 0.004, we decided to adopt roberta after balancing between computation and model performance. experiment result #1 the following experiment is comparing model performances between bert and roberta when there are augmentation data. we noticed that roberta outperforms bert in 3 check global step checkpoints. global step bert roberta precision recall f1 precision recall f1 1126 0.797 0.768 0.782 0.649 0.960 0.774 2815 0.741 0.904 0.814 0.776 0.764 0.770 6756 0.749 0.872 0.806 0.767 0.880 0.819 7319 0.796 0.748 0.771 0.822 0.756 0.787 11823 0.816 0.708 0.758 0.805 0.76 0.782 14000 0.777 0.876 0.823 0.771 0.860 0.813 global step bert roberta precision recall f1 precision recall f1 experiment result #2 4.2 data augmentation besides model architecture, we want to see whether synthetic data helps to improve performance. different sizes of augmentation data are adopted for comparisons. it includes 2250 (0.5 times of original dataset), 4500 (same size of original dataset), 9000 (2 times of original dataset) and 45000 (10 times of original dataset). in this experiment, we want to evaluate whether augmentation data can boost up model performance. due to the setup, experiment #1 does not include six thousandths global step so we use the nearest one which is 6756 global setup as reference. from the below figure, we can see that significant improvement when the size of augmentation data increased to 45000. experiment result #3 4.3 final submission after conducting previous experiments, we decided to further train a roberta with 45000 augmentation data for final submission. between 0 and 10000 global steps, f1 score improved quickly. after that it converged slowly until 18000 global steps. after 18000 global steps, f1 score drops until 32000 global steps. finally, the model only predicts either sarcasm or not_sarcasm for the whole validation dataset. therefore, we picked the 18000 global step checkpoint as our final submission. finally, our precision, recall and f1 are 0.687, 0.816 and 0.746 respectively. 2000 0.711 0.876 0.785 0.736 0.880 0.801 4000 0.751 0.748 0.750 0.779 0.784 0.781 6000 0.803 0.768 0.785 0.762 0.884 0.819 # augmentation size global step precision recall f1 1 0 6756 0.767 0.880 0.819 2 2250 6000 0.805 0.840 0.822 3 4500 6000 0.782 0.804 0.793 4 9000 6000 0.762 0.884 0.819 5 45000 6000 0.926 0.848 0.885 # global step precision recall f1 1 2000 0.710 0.840 0.769 2 4000 0.801 0.852 0.826 experiment result #4 4.4 execution we prepared a specific python file for each experiment. all of them will invoke the same python class with different parameters. the following table shows the mapping between python execution and experiment. to generate an answer for final submission, we use the following script. 3 6000 0.926 0.848 0.885 4 8000 0.924 0.976 0.949 5 10000 0.980 0.976 0.978 6 14000 0.992 0.968 0.980 7 16000 0.980 0.976 0.978 8 18000 0.980 0.988 0.984 9 20000 0.980 0.676 0.980 10 24000 0.984 0.976 0.980 11 30000 0.988 0.976 0.982 12 32000 0.98 0.980 0.980 13 34000 0 0 n/a 14 36000 0 0 n/a 15 136000 0 0 n/a python file model augmentation size run_bert_without_aug_epoch.py bert 0 run_bert_with_aug_9000.py bert 9000 run_roberta_without_aug_epoch.py roberta 0 run_roberta_with_aug_2250.py roberta 2250 run_roberta_with_aug_4500.py roberta 4500 run_roberta_with_aug_9000.py roberta 9000 run_roberta_with_aug_45000.py roberta 45000 4.5 presentation you may also check out this link (https://mediaspace.illinois.edu/media/t/1_fpgtkn68) for our video presentation. 5. future work besides data augmentation, we also brainstormed other ideas which include gathering more twitter data, evaluating other state-of-the-art models such as electra [8] and tuning hyperparameters. 6. references 1. r. sennrich, b. haddow and a. birch. neural machine translation of rare words with subword units. 2015 2. m. schuster and k. nakajima. japanese and korea voice search. 2012 3. x. zhang, j. zhao and y. lecun. character-level convolutional networks for text classification. 2015 4. e. loper and s. bird. nltk: the natural language toolkit. 2002 5. y. liu, m. ott, n. goyal, j. du, m. joshi, d. chen, o. levy, m. lewis, l. zettlemoyer, and v. stoyanov. roberta: a robustly optimized bert pretraining approach. 2019 6. j. devlin, m. chang, k. lee and k. toutanova. bert: pre-training of deep bidirectional transformers for language understanding. 2018 7. e. ma. nlp augmentation. https://github.com/makcedward/nlpaug. 2019 8. c. raffel, n. shazeer, a. roberts, k. lee, s. narang, m.matena, y. zhou, w. li and j. liu. exploring the limits of transfer learning with a unified text-to-text transformer. 2019 python file prediction.py progress report for text classification competition: twitter sarcasm detection oran chan (wlchan2) and edward ma (kcma2) progress made - completed data exploration and exploitation. having 5000 equal distributed label training data. split data to training set and evaluation set and sizes are 4500 and 500 respectively. - possible to find external data to enrich the dataset but considering the efforting of searching and data processing. - we proposed to generate synthetic data instead of looking for external data as it involves lower effort. generated different sizes of synthetic data for evaluation. from 0.5 times to 10 times. - evaluated deep neural network model architecture for building classification model - trained model based on the pre-trained neural network model (bert and roberta) and achieved a good result which exceeds the baseline. remaining tasks - refractor coding for easier understanding - summarize the effectiveness of synthetic data. it includes the comparison among different sizes of synthetic data and models. - prepare the documentation. the focal point is how we can leverage synthetic data to boost up model performance with minimum human effort. - prepare the presentation material about what we did and how it works challenges - spends time on understanding the relationship between response and main thread content. - learn subword algorithms such as wordpiece (adopted by bert) and byte pair encoding (adopted by roberta) - learn transformer architecture (i.e. the base architecture of bert and roberta models) - as using transformer models, computation resource requirement is high. it takes several days to complete several epochs. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['cs', 'text', 'information', 'systemsfall', 'project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'edward', 'kcmacaptain', 'oran', 'chan', 'wlchan', 'competition', 'plan', 'join', 'planning', 'work', 'classification', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'like', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'learning', 'etc', 'name', 'concrete', 'tools', 'may', 'heard', 'neural', 'network', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'interested', 'svm', 'xgboost', 'especially', 'bert', 'model', 'proven', 'performance', 'downstream', 'tasks', 'hence', 'decided', 'use', 'pytorch', 'finetune', 'method', 'tackle', 'various', 'toxic', 'comment', 'one', 'experiences', 'working', 'programming', 'language', 'python', 'twitter', 'sarcasm', 'detection', 'kcma', 'abstract', 'specific', 'case', 'sentiment', 'analysis', 'instead', 'classifying', 'kinds', 'motion', 'task', 'focuses', 'given', 'input', 'outputs', 'whether', 'sarcastic', 'challenging', 'part', 'judgement', 'clearly', 'defined', 'subjective', 'suggest', 'using', 'less', 'human', 'computer', 'resources', 'achieve', 'better', 'result', 'demonstrate', 'synthetic', 'data', 'helps', 'boost', 'manual', 'effort', 'introduction', 'training', 'size', 'equal', 'distribution', 'relatively', 'small', 'natural', 'processing', 'nlp', 'therefore', 'proposed', 'transfer', 'augmentation', 'strategy', 'problem', 'train', 'based', 'pretrained', 'trained', 'large', 'corpus', 'solve', 'basic', 'promised', 'way', 'start', 'scratch', 'provide', 'converge', 'word', 'embeddings', 'also', 'shortens', 'time', 'leverage', 'contextual', 'generate', 'limited', 'split', 'dataset', 'evaluation', 'ratio', 'words', 'includes', 'records', 'preprocessing', 'mentioned', 'adopted', 'take', 'care', 'lots', 'need', 'feature', 'engineering', 'pure', 'tokenizing', 'subwords', 'decode', 'instance', 'represented', 'lang', 'uage', 'tokens', 'major', 'benefits', 'handle', 'outofvocabulary', 'oov', 'problems', 'giving', 'sensitive', 'characters', 'represent', 'english', 'another', 'advantage', 'rare', 'break', 'single', 'multiple', 'subword', 'algorithms', 'affix', 'behavior', 'coverage', 'linguistics', 'morpheme', 'attached', 'stem', 'form', 'new', 'example', 'dis', 'prefix', 'means', 'opposite', 'suffix', 'following', 'covers', 'byte', 'pair', 'encoding', 'bpe', 'wordpiece', 'algorithm', 'tokenization', 'sennrich', 'et', 'al', 'general', 'idea', 'counting', 'frequency', 'predefined', 'maximum', 'number', 'roberta', 'prepare', 'enough', 'ie', 'define', 'desired', 'vocabulary', 'sequence', 'append', 'w', 'end', 'unit', 'character', 'stage', 'low', 'rephrase', 'l', 'generating', 'according', 'high', 'occurrence', 'repeating', 'step', 'reaching', 'next', 'highest', 'schuster', 'nakajima', 'except', 'criteria', 'forming', 'formed', 'likelihood', 'build', 'languages', 'possible', 'ones', 'increases', 'added', 'falls', 'certain', 'threshold', 'different', 'ways', 'typical', 'replacing', 'synonyms', 'nltk', 'library', 'limitation', 'nltks', 'consider', 'context', 'considered', 'nature', 'levearge', 'models', 'find', 'similar', 'meaning', 'considering', 'mechanism', 'picking', 'randomly', 'predict', 'replace', 'providing', 'whole', 'content', 'perform', 'ration', 'pick', 'picked', 'reserved', 'token', 'eg', 'mask', 'tokenize', 'masked', 'feeding', 'prediction', 'flow', 'nlpaug', 'implemented', 'tried', 'sizes', 'see', 'affect', 'two', 'comparison', 'augmented', 'type', 'original', 'user', 'stephen', 'jones', 'finally', 'losing', 'claiming', 'liberty', 'great', 'stadium', 'never', 'mind', 'thoughts', 'sarries', 'salary', 'cap', 'breach', 'even', 'url', 'suddenly', 'kings', 'tax', 'historic', 'meeting', 'series', 'success', 'soccer', 'pro', 'football', 'serious', 'david', 'architecture', 'evaluated', 'outperforms', 'devlin', 'pretraining', 'representations', 'generalpurpose', 'understanding', 'wikipedia', 'adopting', 'previous', 'first', 'unsupervised', 'deeply', 'bidirectional', 'system', 'uses', 'three', 'compute', 'segment', 'position', 'cls', 'sep', 'separate', 'sentence', 'include', 'second', 'refers', 'help', 'distinguish', 'segments', 'question', 'answering', 'reflect', 'location', 'meanings', 'positions', 'berts', 'setup', 'mlm', 'masking', 'assuming', 'selected', 'show', 'approach', 'targets', 'relationship', 'sentences', 'objective', 'liu', 'studied', 'impact', 'many', 'key', 'hyperparameters', 'found', 'significantly', 'undertrained', 'match', 'exceed', 'every', 'published', 'robustly', 'optimized', 'introduced', 'either', 'matching', 'exceeding', 'developed', 'applying', 'modifications', 'outperformed', 'experiments', 'larger', 'hand', 'dynamic', 'static', 'mainly', 'compare', 'numbers', 'record', 'respectively', 'taking', 'experiment', 'used', 'epochs', 'global', 'steps', 'epoch', 'full', 'pass', 'set', 'sample', 'gets', 'chance', 'seen', 'refer', 'batches', 'introducing', 'vs', 'aims', 'demonstrating', 'shows', 'converges', 'minima', 'faster', 'reaches', 'best', 'f', 'score', 'although', 'sligher', 'adopt', 'balancing', 'computation', 'comparing', 'performances', 'noticed', 'check', 'checkpoints', 'precision', 'recall', 'besides', 'want', 'improve', 'comparisons', 'times', 'evaluate', 'due', 'six', 'thousandths', 'nearest', 'reference', 'figure', 'significant', 'improvement', 'increased', 'final', 'submission', 'conducting', 'improved', 'quickly', 'converged', 'slowly', 'drops', 'predicts', 'not_sarcasm', 'validation', 'checkpoint', 'execution', 'file', 'invoke', 'class', 'parameters', 'table', 'mapping', 'answer', 'script', 'na', 'run_bert_without_aug_epochpy', 'run_bert_with_aug_py', 'run_roberta_without_aug_epochpy', 'run_roberta_with_aug_py', 'presentation', 'link', 'httpsmediaspaceillinoisedumediat_fpgtkn', 'video', 'future', 'brainstormed', 'ideas', 'gathering', 'evaluating', 'electra', 'tuning', 'references', 'r', 'b', 'haddow', 'birch', 'machine', 'translation', 'units', 'k', 'japanese', 'korea', 'voice', 'search', 'x', 'zhang', 'j', 'zhao', 'lecun', 'characterlevel', 'convolutional', 'networks', 'e', 'loper', 'bird', 'toolkit', 'ott', 'n', 'goyal', 'du', 'joshi', 'chen', 'levy', 'lewis', 'zettlemoyer', 'v', 'stoyanov', 'chang', 'lee', 'toutanova', 'transformers', 'httpsgithubcommakcedwardnlpaug', 'c', 'raffel', 'shazeer', 'roberts', 'narang', 'mmatena', 'zhou', 'li', 'exploring', 'limits', 'unified', 'texttotext', 'transformer', 'predictionpy', 'progress', 'report', 'made', 'completed', 'exploration', 'exploitation', 'distributed', 'label', 'external', 'enrich', 'efforting', 'searching', 'looking', 'involves', 'lower', 'generated', 'building', 'achieved', 'good', 'exceeds', 'baseline', 'remaining', 'refractor', 'coding', 'easier', 'summarize', 'effectiveness', 'among', 'documentation', 'focal', 'point', 'minimum', 'material', 'works', 'challenges', 'spends', 'response', 'main', 'thread', 'base', 'resource', 'requirement', 'takes', 'several', 'days', 'complete', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/paulzuradzki/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/pdwivedi08/CourseProject	cs 410 - text information system: text classification competition team members: harsangeet kaur (kaur13@illinois.edu): team member pradeep dwivedi (pkd3@illinois.edu): team lead competition: text classification competition programming language: we are planning to use python as the programming language proposal details: we are new to machine learning and have no prior experience implementing language processing models. however, we are very interested to learn sota language processing models. we plan to use lstm, gpt3 and other transformers to achieve best classification results. progress report for tweet classification competition about the project: our team is working on classifying the tweets in sarcasm and non-sarcasm categories. we intend to use deep learning algorithms in natural language processing to classify the tweets and get highest level of accuracy, thus, not only beating the baseline but will also aim to secure the top rank in the competition. progress made so far: we've analyzed the problem carefully. we looked into multiple deep learning algorithms which can be used to solve our problem. we also looked into multiple transformers based deep learning algorithms too, to solve our problem. we did lot of data cleaning in the input file, so as to feed the right input to the classification algorithm. we used python's pandas, reg ex on anaconda's jypyter notebook for data cleaning. based on the algorithms, which we tried so far, we've been able to solve the tweet classification problem and beat the baseline. we are currently ranked #16 in the leaderboard. we'll however try to improve on our rank. we've used google's t5 based classification transformer to receive best result so far on the classification problem. on the leaderboard in livelab, our submission can be found with the id: pdwivedi08 remaining tasks: we'll continue to try to improve our ranking in the competition. additionally, we've following tasks left: 1. detailed documentation of the project 2. presentation on the project execution 3. code cleaning and comments update challenges: we don't have any major challenge at this time in the project completion. we did face some challenge earlier to decide the right algorithm to use and our research and self-study did help in that. tweet classification competition about the project we've worked on the text classification competition project for the tweets. the train and test datasets are provided as part of competition and we intend to use current state-of-the-art machine learning nlp algorithms to beat the baseline on this text classiciation competition project. presentation link on youtube please refer below youtube link for the voice-over presentation for our project: https://youtu.be/h1xqwjkv5ca team members: harsangeet kaur (kaur13@illinois.edu): team member pradeep dwivedi (pkd3@illinois.edu): team lead our submission can be found in the spreadsheet available in cmt, with the id: pkd3@illinois.edu our submission on the leaderboard in livelab can be found for the id: pdwivedi08 overview this software can be used to classify tweets in sarcasm and not-sarcasm categories. this can't be however, used for any other text classification or sentiment analysis with same level of accuracy or f1-score. this software achieves the high level of precision, recall and f1 score as against the generic transformers, since it has been especially trained on the tweet classification. implementation documentation we've made use of google's t5 based fine-tuned transformer for twitter sarcasm detection. this model has been trained to identify sarcasm on tweets. we've used the google colab notebook to train the model and it took nearly 12 hours to train the model with the given data, on single gpu. we used the trainer api from huggingface to write the training code as it's easier to use. also, we used the autotokenizer from the transformers library in huggingfacce. we cleaned the test data for training and testing in such a way that the tweets are taken in correct sequence - first the orginal tweet and then it's responses in the chronolocial order. also, we've removed all the filler words using regex and regular python functions from the tweets before using them for training and testing. we defined a function eval_conversation, to evaluate the curated tweets one-by-one and provide the output in sarcasm and not-sarcams categories. we tried support vector machines (svm) and t5 based transformer for this project. we got following values of precision, recall and f1 score with both these algorithm: precision recall f1 svm 0.48314606741573035 0.14333333333333334 0.22107969151670953 t5 based 0.7030114226375909 0.7522222222222222 0.726784755770263 the second approach i.e. the use of t5 based transfomer helped us to beat the baseline. our final execution matrics can be viewed on the leaderboard in livelab, for the id: pdwivedi08 usage documentation all the code of the software is written in the jupyter notebooks, which can be opened from anaconda ide. 'classifytweets.ipynb' is the main notebook which has the code to execute the test dataset. the 'test.jsonl' is stored inside the data directory and the directory is included in the github. all other libraries needed to execute this code, are part of the 'classifytweets.ipynb' notebook and would be imported when the notebook is executed. therefore, no additional installation of any module is needed. the project github has the video demostration of the code execution as well and that can be used to install and run this software. since the model is running t5 based transformer and the code has few displays, it will take around 5-7 minutes for the execution of the whole notebook on a macbook pro of 8 gb memory. the execution speed in-general will vary based on the hardware of the machine, used for running the notebook. for any further question related to the installation or the working of the software, please contact our team, at the below email ids: harsangeet kaur (kaur13@illinois.edu) pradeep dwivedi (pkd3@illinois.edu) detail of the contributions of team-members our team didn't has any prior background in natural languange processing(nlp) or machine learning (ml). therefore, we started with understanding ml in the context of nlp and reading about it, online and on forums. huggingface.co greatly helped us understanding the deep learning aspect of ml on nlp. harsangeet kaur tried support vector machine algorithm for text classification whereas pradeep dwivedi tried transformers for solving the problem. together, we worked on the data cleaning, model training, software documentation and preparing the final presentation. references https://huggingface.co/mrm8488/t5-base-finetuned-sarcasm-twitter stackoverflow.com https://huggingface.co/transformers/main_classes/trainer.html https://www.w3schools.com/python/python_regex.asp https://medium.com/@bedigunjit/simple-guide-to-text-classification-nlp-using-svm-and-naive-bayes-with-python-421db3a72d34	['cs', 'text', 'information', 'system', 'classification', 'competition', 'team', 'members', 'harsangeet', 'kaur', 'kaurillinoisedu', 'member', 'pradeep', 'dwivedi', 'pkdillinoisedu', 'lead', 'programming', 'language', 'planning', 'use', 'python', 'proposal', 'details', 'new', 'machine', 'learning', 'prior', 'experience', 'implementing', 'processing', 'models', 'however', 'interested', 'learn', 'sota', 'plan', 'lstm', 'gpt', 'transformers', 'achieve', 'best', 'results', 'progress', 'report', 'tweet', 'project', 'working', 'classifying', 'tweets', 'sarcasm', 'nonsarcasm', 'categories', 'intend', 'deep', 'algorithms', 'natural', 'classify', 'get', 'highest', 'level', 'accuracy', 'thus', 'beating', 'baseline', 'also', 'aim', 'secure', 'top', 'rank', 'made', 'far', 'weve', 'analyzed', 'problem', 'carefully', 'looked', 'multiple', 'used', 'solve', 'based', 'lot', 'data', 'cleaning', 'input', 'file', 'feed', 'right', 'algorithm', 'pythons', 'pandas', 'reg', 'ex', 'anacondas', 'jypyter', 'notebook', 'tried', 'able', 'beat', 'currently', 'ranked', 'leaderboard', 'well', 'try', 'improve', 'googles', 'transformer', 'receive', 'result', 'livelab', 'submission', 'found', 'id', 'pdwivedi', 'remaining', 'tasks', 'continue', 'ranking', 'additionally', 'following', 'left', 'detailed', 'documentation', 'presentation', 'execution', 'code', 'comments', 'update', 'challenges', 'dont', 'major', 'challenge', 'time', 'completion', 'face', 'earlier', 'decide', 'research', 'selfstudy', 'help', 'worked', 'train', 'test', 'datasets', 'provided', 'part', 'current', 'stateoftheart', 'nlp', 'classiciation', 'link', 'youtube', 'please', 'refer', 'voiceover', 'httpsyoutubehxqwjkvca', 'spreadsheet', 'available', 'cmt', 'overview', 'software', 'notsarcasm', 'cant', 'sentiment', 'analysis', 'fscore', 'achieves', 'high', 'precision', 'recall', 'f', 'score', 'generic', 'since', 'especially', 'trained', 'implementation', 'finetuned', 'twitter', 'detection', 'model', 'identify', 'google', 'colab', 'took', 'nearly', 'hours', 'given', 'single', 'gpu', 'trainer', 'api', 'huggingface', 'write', 'training', 'easier', 'autotokenizer', 'library', 'huggingfacce', 'cleaned', 'testing', 'way', 'taken', 'correct', 'sequence', 'first', 'orginal', 'responses', 'chronolocial', 'order', 'removed', 'filler', 'words', 'using', 'regex', 'regular', 'functions', 'defined', 'function', 'eval_conversation', 'evaluate', 'curated', 'onebyone', 'provide', 'output', 'notsarcams', 'support', 'vector', 'machines', 'svm', 'got', 'values', 'second', 'approach', 'ie', 'transfomer', 'helped', 'us', 'final', 'matrics', 'viewed', 'usage', 'written', 'jupyter', 'notebooks', 'opened', 'anaconda', 'ide', 'classifytweetsipynb', 'main', 'execute', 'dataset', 'testjsonl', 'stored', 'inside', 'directory', 'included', 'github', 'libraries', 'needed', 'would', 'imported', 'executed', 'therefore', 'additional', 'installation', 'module', 'video', 'demostration', 'install', 'run', 'running', 'displays', 'take', 'around', 'minutes', 'whole', 'macbook', 'pro', 'gb', 'memory', 'speed', 'ingeneral', 'vary', 'hardware', 'question', 'related', 'contact', 'email', 'ids', 'detail', 'contributions', 'teammembers', 'didnt', 'background', 'languange', 'processingnlp', 'ml', 'started', 'understanding', 'context', 'reading', 'online', 'forums', 'huggingfaceco', 'greatly', 'aspect', 'whereas', 'solving', 'together', 'preparing', 'references', 'httpshuggingfacecomrmtbasefinetunedsarcasmtwitter', 'stackoverflowcom', 'httpshuggingfacecotransformersmain_classestrainerhtml', 'httpswwwwschoolscompythonpython_regexasp', 'httpsmediumcombedigunjitsimpleguidetotextclassificationnlpusingsvmandnaivebayeswithpythondbad']
https://github.com/pebblespot/CourseProject	"reading assistant: project progress report christopher rock (cmrock2) (captain) zichun xu (zichunx2) kevin ros (kjros2) due 29 november 2020 1 progress we began by planning a road-map for our project, which consisted of a set of goals and group meeting checkpoints to evaluate progress. additionally, we created a github repository which holds our project code. following this, we implemented the basic structure for our reading assistant. on start-up, text documents (directory path provided by user) are loaded by the assistant. during loading, the documents are processed and added to an inverted index. these documents are considered to be the previously-read documents by the user. once the loading is complete, the assistant waits for a path to a text file (unseen document). given this path, the assistant ranks the previously-read documents using the unseen document and returns the most similar read document names to the user. we also provided methods for a user to add and remove previously-read documents. currently, the assistant calculates similarity using the okapi bm25 ranking function along with various optimization techniques, including an inverted index. to heuristically gauge the effectiveness of this method, each team member collected approximately 8-10 documents. these documents were loaded as the previously-read documents, and additional documents were provided as the unseen documents. from the preliminary examination, the results seem promising. the code is written in a modular fashion, so that we can easily extend the assistant to use different similarity/difference measures and methods. in addition to document-level bm-25, we have implemented paragraph-level bm25 which allows more detailed evaluation of unseen documents compared to seen documents. we have also used the external library gensim to include latent semantic indexing at a document level, with document- level similarity. this is currently a separate script and will be integrated for the final project. our planned extensions are discussed in the following section. 2 remaining tasks our first remaining task is to add more fine-grained similarity and difference measurement tech- niques. regarding the ranking function itself, we are considering adding pre-trained word embed- dings and cosine similarity to effectively assess similarity and differences on a word and sentence level. we will combine this with our okapi bm25 calculations to compare seen and unseen docu- ments on a paragraph granularity. our second remaining task is to create a user-friendly command line interface. this will allow the user to easily add and remove documents, and view the similarities and differences between 1 the seen and unseen documents. ideally, we plan to output a detailed summary that describes the relationship between the documents. 3 challenges and issues one particular challenge that we've encountered is the evaluation of our reading assistant's effec- tiveness. because we haven't encountered a data set that exactly fits our needs, we plan to address this issue by incorporating a feedback mechanism in the terminal. this way, users can provide real-time feedback that we can dynamically incorporate into the reading assistant. 2 free topic: reading assistant christopher rock (cmrock2) (captain) zichun xu (zichunx2) kevin ros (kjros2) 25 october 2020 1 project proposal 1.1 overview in the early months of 2020, the now named sars-cov-2 virus was rapidly spreading across the countries of the pacific and jumping to new locations in every corner of the globe. the flu pandemic that had long been predicted was happening - except it wasn't the flu. first in china, and soon throughout the world there was talking, writing, researching, and publishing about the virus. this was the first pandemic in the smart-phone era, and the only thing that seemed to spread faster than the virus was information. governments, medical organizations, companies, and every institution imaginable began pushing out not just information, but also guidelines, rules, and policies. ""information overload"" is something people in today's society are accustomed. most people develop methods of coping with the huge amount of information available. we filter things through trusted sources, prioritize information that is actionable, and change our mental model of the situation as necessary. however in the face of a new dangerous situation every piece of information becomes potentially critical. dynamic situations such as a pandemic require quick reactions to new knowledge. it is our experience that those in leadership and decision-making roles are pushed a large number of documents and expected to be up to date on this rapidly expanding corpus of information. new situations create organizational chaos, and the individual's strategies to limit information overload break down. trusted sources are more difficult to identify when information comes from many sources simultaneously. and because all information is potentially actionable, all information must seemingly be reviewed. initially the challenge is simply to read and understand the documents sent. however the difficulty quickly becomes identifying what is new knowledge. new documents may have significant overlap with prior knowledge. differences between documents must be reviewed, and often the progression of changes is important. information retrieval, text mining, and recommender systems have developed algorithmic strate- gies to identify and extract useful information from text-based knowledge. the focus of these tools has generally been to pull relevant documents via (search), or push potentially interesting docu- ments (recommender). these techniques can be modified to assist a reader in identifying new useful information. our goal is to create a reading assistant tool that allows a user to maintain a collection of ""seen"" or ""read"" documents (reflecting the current knowledge of the user) and provides novelty scores based on new documents introduced to the collection. given a new document, the reading assistant tool will compare the document to all ""seen"" documents, and provide the user with measures indicating 1 how the new document differs from the document collection. in this way, potentially useful new documents can be efficiently prioritized by the user. 1.2 project description the task of our free topic is to design and implement a reading assistant software tool that helps users determine the novelty of never-before-seen documents based on previously-seen documents. each user will have a collection of read documents, known to the reading assistant. when the user is provided a new document, the reading assistant will quickly scan the user's read document collection and score the new document (or sections of the new document). this score will reflect how novel the new document is relative to the previously-read documents. ideally, this will provide the user with a high-level understanding of the importance of the document, allowing the user to better optimize their time. there are many users who would benefit from such a tool. as we discussed in section 1.1, medical researchers and doctors could use a tool to help sift through and sort the vast amount of information provided during events such as a global pandemic. in academia, researchers could leverage this tool to filter research papers for information relative or novel to their current work. outside of academia, the general public could use this tool to augment online browsing, as such a tool would allow them to quickly look up previously-read documents and news articles, and interpret new articles in the context of what they have already read. to our knowledge, no such tool currently exits. we will use the metapy toolkit1 to provide a suite of ranking and evaluation methods for our tool, along with the publically-available cord-19 coronavirus document data set2 as our training and testing data. aditionally, we will use the python programming language. to create the tool, we will begin by leveraging our understanding of the bm25 ranking algorithm (which measures document similarity) to construct an ""inverted bm25"" distance function (which measures document difference). in order to demonstrate the usefulness of our tool, we will manually score a subset of documents in terms of similarity to a collection of seen documents. in some cases the seen documents will be randomly selected, and in other cases they will all be of a certain topic. then, we will pass the scored documents to our tool and see if it categorizes the documents in line with our manual scoring. we discuss a rough timeline in section 1.3 1.3 workload we will spend the first 20 hours defining and understanding the project scope. here, we will begin by defining what it means for two documents to be distinct (or similar). we will also attempt to quantitatively define a distance measure between documents or paragraphs. additionally, we will define the scope of ""seen"" and ""unseen"" documents. that is, we might need to assume that the reader has read many documents for recommendation to be effective (otherwise many documents will be considered novel). following this, we will spend the next 20 hours implementing our distance measure using python and metapy. we will likely begin with an inverted version of bm25, but it is difficult to know how well it will work for measuring document difference. thus, we expect that a significant portion of the 20 hours will be testing out and debugging various implementations, fine-tuning parameters, curating the training and testing documents, and adjusting any initial assumptions in light of new 1https://github.com/meta-toolkit/metapy 2https://www.semanticscholar.org/cord19 2 evidence. once we decide on a specific implementation, we will define various evaluation measures in order to determine the effectiveness of our tool. the remaining 20 hours will be spent evaluating the tool and tuning any parameters. given the subjectivity of relevance scores, we will likely need to manually judge documents. for example, this could include randomly choosing a set""already seen"" documents, and hand-labeling additional documents as ""very similar"", ""somewhat similar"", or ""not similar"" to ""already seen"" documents. then, we would see if the tool's scores corresponded to our similarity classifications. in the case that we overestimated the time it takes to complete the aforementioned tasks, we will fill the remaining time by making our tool more robust, more user-friendly, or more expansive. this will be accomplished by introducing various similarity score measures (such as word embeddings), a command-line interface, and considering additional data sets, respectively. 3 reading assistant cs410, fall 2020 christopher rock (cmrock2) zichun xu (zichunx2) kevin ros (kjros2) video presentation: https://youtu.be/ro351eoz1zu ### documentation guidelines the documentation should consist of the following elements: 1) an overview of the function of the code (i.e., what it does and what it can be used for). 2) documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. 3) documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. 4) brief description of contribution of each team member in case of a multi-person team. overview problem ""information overload"" is something people in today's society are accustomed. most people develop methods of coping with the huge amount of information available. we filter things through trusted sources, prioritize information that is actionable, and change our mental model of the situation as necessary. earlier this year, the 2019 novel coronavirus epidemic turned the world on its collective head and created a flurry of information. large volumes of text data are expected to be consumed and acted upon in a short period of time. for humans, initially the challenge is simply to read and understand the documents. however the difficulty quickly becomes identifying what is new knowledge, and remembering the source of previously seen similar knowledge. new documents may have significant overlap with prior knowledge. differences between documents must be reviewed, and often the progression of changes is important. information retrieval, text mining, and recommender systems have developed algorithmic strategies to identify and extract useful information from text-based knowledge. the focus of these tools has generally been to pull relevant documents via (search), or push potentially interesting documents ( recommender). these techniques can be modified to assist a reader in identifying new useful information. what is our tool? in line with our project proposal, our overall goal was to create a reading assistant tool that allows a user to maintain a collection of read documents ( reflecting the current knowledge of the user) and then provides insight about a new unread document when compared to the all read documents. the output includes: a ranked list of documents that are most similar to the unread document based on bm25 scores and lsi similarity scores, respectively. a ranked list of paragraphs that are most similar to each paragraph of the unread document based on bm25 scores and lsi similarity scores, respectively. our initial idea from the project proposal was to focus on the differences between documents, however the reality is that there were so many ways documents could be different that this was not particularly helpful. in this final version we instead focus on the areas of similarity betwen the unread document from the corpus of read. this allows the user to then quickly hone in on areas where the new document reinforce or subtly change what they had previously discovered from the read docuements. what can it be used for? although this is created as a command line tool, as described above the initial inspiration for this idea was the surplus of information that was being pushed out (in our case via email) during the first months of the covid-19 pandemic. one way to use this tool would be to integrate it with a mail server, so that you could forward an email or attachment and indicate that you had or had not read the document - then the server could spit back a new email with some analysis of the document including a list (and linke) to the other read similar documents, as well as highlight passages (paragraphs in our case) of particular interest. implementation on start-up, text documents (directory path provided by user) are loaded by the assistant. during loading, the documents are processed (remove non-ascii characters, blank lines, etc) and added to an inverted index. these documents are considered to be the previously-read documents by the user. once the loading is complete, the assistant waits for a path to a text file (unseen document). given this path, the assistant ranks the previously-read documents using the unseen document and returns the most similar read document and paragraph names to the user. we also provided methods for a user to view, add and remove previously-read documents. currently, the assistant calculates similarity scores using two approaches: okapi bm25 and latent semantic indexing (lsi) similarity. to implement the okapi bm25 ranking function, first an inverted index is built based on the previously-read documents. from there, it calculates the term frequency, inverse document frequency, and document length normalization. finally, the similarity score for each document is calculated and scores are sorted in descending order. in addition to document-level bm-25, we also implemented paragraph-level bm25, which follows a similar approach but considers each paragraph of the document as an individual ""document"". this allows more detailed evaluation of unseen documents. to implement lsi similarity ranking function, we utilized the external gensim library. this is currently in a separate script (gensimlsi.py) and is integrated to the reading assistant. during document pre-processing, it removes stop words, blank lines, and words that only appeared once in the document to achieve better topic discovery. it first transforms the previously-read documents to tf-idf vectors. it then builds an lsi model with 200 (default) topics. note that if the number of read documents is less than 200 then the number of read documents will be used. this lsi model will discover topics based on all the previously-read documents, and map the document vectors to lsi space, i.e. describe how strongly each document is related to each topic. upon receiving the unseen document specified by the user, it will transform the document into lsi space and compute the cosine similarity. the scores will then be sorted in descending order. similarly, we also implemented paragraph level analysis for lsi similarity. the code is written in a modular fashion, so that we can easily extend the assistant to use different similarity/difference measures and methods usage view our usage video here: we recommend using python 3.6 or 3.7, with gensim (and its dependencies), as well as the smart_open package. to start the reading assistant, you must first have two directories of text files. one directory should be ""read"" documents, and the other is ""unread"" documents. start the program by running the script like so: python reading_assistant.py read_docs_path unread_docs_path [k1] [b] read_docs_path : path containing text files that have been read by the user unread_docs_path : path containing text files that have not been read by the user [k1] : value for bm25. default: 1.2 (optional) [b] : the b value for bm25. default: 0.75 the script will load the read documents into an inverted index, and then go into the read-eval-print loop (repl). once the repl is running, you will be presented with a list of read documents and un-read documents. for example, you may see the following: ``` -= read files: =- 0 : covid-bhc-contact-sop-1.txt 1 : covid-isos-brief.txt 2 : covid-update-4.txt 3 : covid-dod-mgmt-guide.txt 4 : covid-update-1.txt 5 : covid-update-3.txt 6 : covid-bhc-pt.txt 7 : covid-update-2.txt 8 : covid-yoko-sop.txt 9 : covid-fragord.txt 10 : covid-bhc-extended-use.txt =- un-read files: -= 0 : covid-bhc-contact-sop-2.txt 1 : covid-annex-1.txt please use one of the following commands: rank [unread_file_#] --> compares new document to previously-read documents read [unread_file_#] --> add the document from the unread list to the read list forget [read_file_#] --> remove a document from the read list view document [document name] --> prints the document view paragraph [paragraph name] --> prints the paragraph set scope [integer] --> only documents above this number of standard deviations above mean ranking score are returned exit --> exits the program ``` to see the rank of the unread document covid-annex-1.txt you would enter rank 1 at the prompt. an ""output.html"" will also be generated in the directory where the command is issued. it contains the same info as the console output and provides a better visual representation. to move a document covid-bhc-contact-sop-2.txt from the unread into the * read* grouping, type read 0. or, to move document covid-fragord.txt from read to unread, type forget 9. to view the text of document covid-yoko-sop.txt, type 'view document covid-yoko-sop.txt'. note that this only works with documents listed under read files. similarly, to view the first paragraph of document covid-yoko-sop.txt, type 'view paragraph covid-yoko-sop.txt_parag0'. note that this only works with documents listed under read files. the 'set scope [integer]' command determines scope of the ranking results. as each document and paragraph in read files is given a ranking score, the [integer] determines the cut-off of these scores. more specifically, the [integer] is the number of standard deviations above the mean ranking score. that is, a scope of 2 means that only documents and paragraphs that are two or more standard deviations above the mean score are returned. a scope of 0 means that all documents and paragraphs above the mean ranking score are returned. generally, a higher scope means fewer documents and paragraphs returned, but these documents and paragraphs are much more relevant. results to heuristically gauge the effectiveness of the reading assistant, each team member collected approximately 8-10 documents. these documents were loaded as the previously-read documents, and additional documents were provided as the unseen documents. from the preliminary examination, the results seem promising and inline with our qualitative evaluation of the documents. we found these results to be interesting and potentially be useful in a real world application. using the results from our tool, one could easily find related previously read documents. additionally if a paragraph was interesting one could find the similar passages. alternatively, a document highlighter with links to related documents could be created. after creating the tool the existence of similar functionality became evident in other software such as evernote, which shows similar notes to the one the user is currently viewing. the evernote use case is not quite the same as our stated use case, but likely relies on some similar information retrievel techniques to generate the list of similar documents. interestingly, the original impetus behind creating the tool was to find similar and different documents, however in the process of creating this tool we came to understand how the bm25 and lsi algorithms are powered towards similarities, not differences. the root of this is that there are only a few ways a document can be similar, but many ways documents can be different. this was an interesting realization, and further thought towards how to find useful differences could be discovered was an interesting thought experiment, although we did not make significant headway into how to solve that problem. if we were to continue to develop this project further, there are a few areas where we could easily improve the tool. one would be to integrate the data structures between the bm25 and gensim lsi algorithm so that the reading and memory usage was more efficient. additionally, the lsi algorithm is capable of adding documents without needing to completely recreate it's underying data structures. depending on how the tool would be used (if for instance documents would be frequently added) this would improve the efficiency of the tool. manipulation of the parameters of the algorithms would be another area where improvements could be made. manipulation of either with the k value of bm25, or the topic number of lsi coud lead to subtle improvements in results. creating of a data set with user rankings for comparison to the results would also be very helpful in objectively analyzing the results of these tweaks. creation of such a data set - with human-choosen similar paragarphs - would be time consuming to create but could result in use of comparison functions such as the f1 score which would facilitate further development. overall we felt this tool was a strong starting point to further work in the realm of a reading assistant. team contributions all team members were active participants throughout the entire project lifecycle process. our team worked well together and all members contributed meaningfully to our end result. all met via zoom on the following days (30-60 minute meetings): sep 10th: initial team meeting and plan for future meeting timeline oct 3rd: draft concept of reading assistant formed oct 9th: discussion of unit 1 concepts and relation to project oct 21st: formalized topic and planned submission of topic to cmt oct 24th: discussed status, potential roadblocks, and plan forward nov 14th: reviewed ta comments and initial review of bm25 document-level rankings nov 17th: discussed additional methods to rank articles nov 29th: reviewed progress report, paragraph ranking, and formulated final plan for code breakdown dec 6th: reviewed integration of gensim, paragraph ranking, cli, and initial repl dec 11th: reviewed final product and discussed last touches necessary to complete project dec 13th: recorded tutorial specific contributions all members contributed to write-ups, review of code, reviewing submission requirements, and ensuring deadlines were met. kevin ros: created initial bm25 document-level code, with necessary ability to dynamically add and remove documents. drafted initial documents (proposal, progress report) added initial repl interface added standard deviation analysis of results to simplify interpretation of ranking data zichun xu created paragraph level analysis of bm25 analysis method modified gensim lsi analysis for paragraph level analysis christopher rock added gensim lsi ranking methods added cli and finalized repl added html generator for better visual representation of results references 1https://github.com/meta-toolkit/metapy 2https://tac.nist.gov/2008/summarization/update.summ.08.guidelines.html 3andrei v, arandjelovic o. complex temporal topic evolution modelling using the kullback-leibler divergence and the bhattacharyya distance. eurasip j bioinform syst biol. 2016 sep 29;2016(1):16. doi: 10.1186/s13637-016-0050-0. pmid: 27746813; pmcid: pmc5042987. 4liu, heng-hui & huang, yi-ting & chiang, jung-hsien. (2010). a study on paragraph ranking and recommendation by topic information retrieval from biomedical literature. ics 2010 - international computer symposium. 10.1109/compsym.2010.5685393. 5https://radimrehurek.com/gensim/models/lsimodel.html"	['reading', 'assistant', 'project', 'progress', 'report', 'christopher', 'rock', 'cmrock', 'captain', 'zichun', 'xu', 'zichunx', 'kevin', 'ros', 'kjros', 'due', 'november', 'began', 'planning', 'roadmap', 'consisted', 'set', 'goals', 'group', 'meeting', 'checkpoints', 'evaluate', 'additionally', 'created', 'github', 'repository', 'holds', 'code', 'following', 'implemented', 'basic', 'structure', 'startup', 'text', 'documents', 'directory', 'path', 'provided', 'user', 'loaded', 'loading', 'processed', 'added', 'inverted', 'index', 'considered', 'previouslyread', 'complete', 'waits', 'file', 'unseen', 'document', 'given', 'ranks', 'using', 'returns', 'similar', 'read', 'names', 'also', 'methods', 'add', 'remove', 'currently', 'calculates', 'similarity', 'okapi', 'bm', 'ranking', 'function', 'along', 'various', 'optimization', 'techniques', 'including', 'heuristically', 'gauge', 'effectiveness', 'method', 'team', 'member', 'collected', 'approximately', 'additional', 'preliminary', 'examination', 'results', 'seem', 'promising', 'written', 'modular', 'fashion', 'easily', 'extend', 'use', 'different', 'similaritydifference', 'measures', 'addition', 'documentlevel', 'paragraphlevel', 'allows', 'detailed', 'evaluation', 'compared', 'seen', 'used', 'external', 'library', 'gensim', 'include', 'latent', 'semantic', 'indexing', 'level', 'separate', 'script', 'integrated', 'final', 'planned', 'extensions', 'discussed', 'section', 'remaining', 'tasks', 'first', 'task', 'finegrained', 'difference', 'measurement', 'tech', 'niques', 'regarding', 'considering', 'adding', 'pretrained', 'word', 'embed', 'dings', 'cosine', 'effectively', 'assess', 'differences', 'sentence', 'combine', 'calculations', 'compare', 'docu', 'ments', 'paragraph', 'granularity', 'second', 'create', 'userfriendly', 'command', 'line', 'interface', 'allow', 'view', 'similarities', 'ideally', 'plan', 'output', 'summary', 'describes', 'relationship', 'challenges', 'issues', 'one', 'particular', 'challenge', 'weve', 'encountered', 'assistants', 'effec', 'tiveness', 'havent', 'data', 'exactly', 'fits', 'needs', 'address', 'issue', 'incorporating', 'feedback', 'mechanism', 'terminal', 'way', 'users', 'provide', 'realtime', 'dynamically', 'incorporate', 'free', 'topic', 'october', 'proposal', 'overview', 'early', 'months', 'named', 'sarscov', 'virus', 'rapidly', 'spreading', 'across', 'countries', 'pacific', 'jumping', 'new', 'locations', 'every', 'corner', 'globe', 'flu', 'pandemic', 'long', 'predicted', 'happening', 'except', 'wasnt', 'china', 'soon', 'throughout', 'world', 'talking', 'writing', 'researching', 'publishing', 'smartphone', 'era', 'thing', 'seemed', 'spread', 'faster', 'information', 'governments', 'medical', 'organizations', 'companies', 'institution', 'imaginable', 'pushing', 'guidelines', 'rules', 'policies', 'overload', 'something', 'people', 'todays', 'society', 'accustomed', 'develop', 'coping', 'huge', 'amount', 'available', 'filter', 'things', 'trusted', 'sources', 'prioritize', 'actionable', 'change', 'mental', 'model', 'situation', 'necessary', 'however', 'face', 'dangerous', 'piece', 'becomes', 'potentially', 'critical', 'dynamic', 'situations', 'require', 'quick', 'reactions', 'knowledge', 'experience', 'leadership', 'decisionmaking', 'roles', 'pushed', 'large', 'number', 'expected', 'date', 'expanding', 'corpus', 'organizational', 'chaos', 'individuals', 'strategies', 'limit', 'break', 'difficult', 'identify', 'comes', 'many', 'simultaneously', 'must', 'seemingly', 'reviewed', 'initially', 'simply', 'understand', 'sent', 'difficulty', 'quickly', 'identifying', 'may', 'significant', 'overlap', 'prior', 'often', 'progression', 'changes', 'important', 'retrieval', 'mining', 'recommender', 'systems', 'developed', 'algorithmic', 'strate', 'gies', 'extract', 'useful', 'textbased', 'focus', 'tools', 'generally', 'pull', 'relevant', 'via', 'search', 'push', 'interesting', 'modified', 'assist', 'reader', 'goal', 'tool', 'maintain', 'collection', 'reflecting', 'current', 'provides', 'novelty', 'scores', 'based', 'introduced', 'indicating', 'differs', 'efficiently', 'prioritized', 'description', 'design', 'implement', 'software', 'helps', 'determine', 'neverbeforeseen', 'previouslyseen', 'known', 'scan', 'score', 'sections', 'reflect', 'novel', 'relative', 'highlevel', 'understanding', 'importance', 'allowing', 'better', 'optimize', 'time', 'would', 'benefit', 'researchers', 'doctors', 'could', 'help', 'sift', 'sort', 'vast', 'events', 'global', 'academia', 'leverage', 'research', 'papers', 'work', 'outside', 'general', 'public', 'augment', 'online', 'browsing', 'look', 'news', 'articles', 'interpret', 'context', 'already', 'exits', 'metapy', 'toolkit', 'suite', 'publicallyavailable', 'cord', 'coronavirus', 'training', 'testing', 'aditionally', 'python', 'programming', 'language', 'begin', 'leveraging', 'algorithm', 'construct', 'distance', 'order', 'demonstrate', 'usefulness', 'manually', 'subset', 'terms', 'cases', 'randomly', 'selected', 'certain', 'pass', 'scored', 'see', 'categorizes', 'manual', 'scoring', 'discuss', 'rough', 'timeline', 'workload', 'spend', 'hours', 'defining', 'scope', 'means', 'two', 'distinct', 'attempt', 'quantitatively', 'define', 'measure', 'paragraphs', 'might', 'need', 'assume', 'recommendation', 'effective', 'otherwise', 'next', 'implementing', 'likely', 'version', 'know', 'well', 'measuring', 'thus', 'expect', 'portion', 'debugging', 'implementations', 'finetuning', 'parameters', 'curating', 'adjusting', 'initial', 'assumptions', 'light', 'httpsgithubcommetatoolkitmetapy', 'httpswwwsemanticscholarorgcord', 'evidence', 'decide', 'specific', 'implementation', 'spent', 'evaluating', 'tuning', 'subjectivity', 'relevance', 'judge', 'example', 'choosing', 'setalready', 'handlabeling', 'somewhat', 'corresponded', 'classifications', 'case', 'overestimated', 'takes', 'aforementioned', 'fill', 'making', 'robust', 'expansive', 'accomplished', 'introducing', 'embeddings', 'commandline', 'sets', 'respectively', 'cs', 'fall', 'video', 'presentation', 'httpsyoutuberoeozzu', 'documentation', 'consist', 'elements', 'ie', 'sufficient', 'detail', 'others', 'future', 'extension', 'improvement', 'usage', 'either', 'usages', 'apis', 'instructions', 'install', 'run', 'whichever', 'applicable', 'brief', 'contribution', 'multiperson', 'problem', 'earlier', 'year', 'epidemic', 'turned', 'collective', 'head', 'flurry', 'volumes', 'consumed', 'acted', 'upon', 'short', 'period', 'humans', 'remembering', 'source', 'previously', 'overall', 'insight', 'unread', 'includes', 'ranked', 'list', 'lsi', 'idea', 'reality', 'ways', 'particularly', 'helpful', 'instead', 'areas', 'betwen', 'hone', 'reinforce', 'subtly', 'discovered', 'docuements', 'although', 'described', 'inspiration', 'surplus', 'email', 'covid', 'integrate', 'mail', 'server', 'forward', 'attachment', 'indicate', 'spit', 'back', 'analysis', 'linke', 'highlight', 'passages', 'interest', 'nonascii', 'characters', 'blank', 'lines', 'etc', 'approaches', 'built', 'term', 'frequency', 'inverse', 'length', 'normalization', 'finally', 'calculated', 'sorted', 'descending', 'follows', 'approach', 'considers', 'individual', 'utilized', 'gensimlsipy', 'preprocessing', 'removes', 'stop', 'words', 'appeared', 'achieve', 'discovery', 'transforms', 'tfidf', 'vectors', 'builds', 'default', 'topics', 'note', 'less', 'discover', 'map', 'space', 'describe', 'strongly', 'related', 'receiving', 'specified', 'transform', 'compute', 'similarly', 'recommend', 'dependencies', 'smart_open', 'package', 'start', 'directories', 'files', 'program', 'running', 'like', 'reading_assistantpy', 'read_docs_path', 'unread_docs_path', 'k', 'b', 'containing', 'value', 'optional', 'load', 'go', 'readevalprint', 'loop', 'repl', 'presented', 'covidbhccontactsoptxt', 'covidisosbrieftxt', 'covidupdatetxt', 'coviddodmgmtguidetxt', 'covidbhcpttxt', 'covidyokosoptxt', 'covidfragordtxt', 'covidbhcextendedusetxt', 'covidannextxt', 'please', 'commands', 'rank', 'unread_file_', 'compares', 'forget', 'read_file_', 'name', 'prints', 'integer', 'standard', 'deviations', 'mean', 'returned', 'exit', 'enter', 'prompt', 'outputhtml', 'generated', 'issued', 'contains', 'info', 'console', 'visual', 'representation', 'move', 'grouping', 'type', 'works', 'listed', 'covidyokosoptxt_parag', 'determines', 'cutoff', 'specifically', 'higher', 'fewer', 'much', 'inline', 'qualitative', 'found', 'real', 'application', 'find', 'alternatively', 'highlighter', 'links', 'creating', 'existence', 'functionality', 'became', 'evident', 'evernote', 'shows', 'notes', 'viewing', 'quite', 'stated', 'relies', 'retrievel', 'generate', 'interestingly', 'original', 'impetus', 'behind', 'process', 'came', 'algorithms', 'powered', 'towards', 'root', 'realization', 'thought', 'experiment', 'make', 'headway', 'solve', 'continue', 'improve', 'structures', 'memory', 'efficient', 'capable', 'without', 'needing', 'completely', 'recreate', 'underying', 'depending', 'instance', 'frequently', 'efficiency', 'manipulation', 'another', 'area', 'improvements', 'made', 'coud', 'lead', 'subtle', 'rankings', 'comparison', 'objectively', 'analyzing', 'tweaks', 'creation', 'humanchoosen', 'paragarphs', 'consuming', 'result', 'functions', 'f', 'facilitate', 'development', 'felt', 'strong', 'starting', 'point', 'realm', 'contributions', 'members', 'active', 'participants', 'entire', 'lifecycle', 'worked', 'together', 'contributed', 'meaningfully', 'end', 'met', 'zoom', 'days', 'minute', 'meetings', 'sep', 'th', 'oct', 'rd', 'draft', 'concept', 'formed', 'discussion', 'unit', 'concepts', 'relation', 'st', 'formalized', 'submission', 'cmt', 'status', 'potential', 'roadblocks', 'nov', 'ta', 'comments', 'review', 'formulated', 'breakdown', 'dec', 'integration', 'cli', 'product', 'last', 'touches', 'recorded', 'tutorial', 'writeups', 'reviewing', 'requirements', 'ensuring', 'deadlines', 'ability', 'drafted', 'deviation', 'simplify', 'interpretation', 'finalized', 'html', 'generator', 'references', 'httpstacnistgovsummarizationupdatesummguidelineshtml', 'andrei', 'v', 'arandjelovic', 'complex', 'temporal', 'evolution', 'modelling', 'kullbackleibler', 'divergence', 'bhattacharyya', 'eurasip', 'j', 'bioinform', 'syst', 'biol', 'doi', 'pmid', 'pmcid', 'pmc', 'liu', 'henghui', 'huang', 'yiting', 'chiang', 'junghsien', 'study', 'biomedical', 'literature', 'ics', 'international', 'computer', 'symposium', 'compsym', 'httpsradimrehurekcomgensimmodelslsimodelhtml']
https://github.com/peterzukerman/Twitter-Sarcasm-Detection	"our solution and winning model for the coursera text classification competition table of contents table of contents about the project project repo structure our approach understanding data getting started built with prerequisites installation usage license contact references text classification competition: twitter sarcasm detection about the project the goal of this competition/project is to classify a given sequence of tweets (responses) as sarcastic or non-sarcastic. the tweets with its corresponding immediate context and full context is provided as continous responses to each tweets.the tweets are provided with conversation context which is an ordered list of dialogue. the objective of this competition is to predict the ""label"" of the response (tweets) using the given context (either immediate or full context) we present our best model based on bert (bi-directional enconding representations from transfomers) using pre-trained stock weights of bert-base model and demonstrate the winning solution able to classify sarcasm with f1-score of 76.09%. project repository structure please follow the links to navigate to respective folders - - data - source code - results - documentation - proposal - progress report - video presentation - long form video link - short form video link - detailed project presentation our approach understanding data: each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | getting started all our models are in notebook format (.ipynb) and can be easily replicated using jupyter / google colab or any other notebook environment. we recommend anaconda distribution to create virtual environments for python and recommend google colab for tensorflow (tf)/keras implementations. in order to replicate, reproduce or rerun our bert model, we recommend downloading pre-trained stock weights as given below built with python google colab keras tensorflow prerequisites git python 3.6 or above. jupyter or anaconda distribution google colab tensorflow gpus keras bert pre-trained stock weights. you can download and use pre-trained stock weights of bert-base model from here installations following packages/libraries are required for fully functioning of our bert model - ```bash install data pre-processing libraries $ pip install genism $ pip install ekphrasis ``` install/import the necessary libraries and frameworks ```bash install key libraries and frameworks $ pip install tensorflow-gpu $ pip install --upgrade grpcio $ pip install tqdm $ pip install bert-fo-tf2 ``` install/import the necessary libraries and frameworks ```bash import the following packages/libraries/frameworks import pandas as pd import numpy as np import tensorflow as ft from tensorflow import keras import bert from bert import bertmodellayer from bert.loader import stockbertconfig, map_stock_config_to_params, load_stock_weights from bert.tokenization.bert_tokenization import fulltokenizer ``` install/import the necessary evaluation metrics ```bash from sklearn.metrics import confusion_matrix, classification_report from sklearn import preprocessing ``` download pre-trained weights from bert-base model ```bash !wget https://storage.googleapis.com/bert_models/2018_10_18/uncased_l-12_h-768_a-12.zip !unzip uncased_l-12_h-768_a-12.zip ``` usage to clone and run our model, you'll need git or git gui clients like git kraken for windows or tower for mac and python from your command line or terminal application or git client: ```bash clone this repository $ git clone https://github.com/dheerajpatta/courseproject.git go into the repository $ cd models install above prerequisties and dependencies pip install * run the jupyter notebook https://github.com/dheerajpatta/courseproject/blob/main/models/sarcasm_classification_bert_large.ipynb ``` additional references - - google colab - all about setting up google colab like a pro from here - if you want to use bert with colab, you can get started with the notebook bert finetuning with cloud tpus contact artsiom strok (astrok2@illinois.edu) peter zukerman (peterz2@illinois.edu) dheeraj patta (npatta2@illinois.edu) license our solution for text classificaiton competition - twitter sarcasm detection is licensed under the terms of the gpl open source license and is available for free."	['solution', 'winning', 'model', 'coursera', 'text', 'classification', 'competition', 'table', 'contents', 'project', 'repo', 'structure', 'approach', 'understanding', 'data', 'getting', 'started', 'built', 'prerequisites', 'installation', 'usage', 'license', 'contact', 'references', 'twitter', 'sarcasm', 'detection', 'goal', 'competitionproject', 'classify', 'given', 'sequence', 'tweets', 'responses', 'sarcastic', 'nonsarcastic', 'corresponding', 'immediate', 'context', 'full', 'provided', 'continous', 'tweetsthe', 'conversation', 'ordered', 'list', 'dialogue', 'objective', 'predict', 'label', 'response', 'using', 'either', 'present', 'best', 'based', 'bert', 'bidirectional', 'enconding', 'representations', 'transfomers', 'pretrained', 'stock', 'weights', 'bertbase', 'demonstrate', 'able', 'fscore', 'repository', 'please', 'follow', 'links', 'navigate', 'respective', 'folders', 'source', 'code', 'results', 'documentation', 'proposal', 'progress', 'report', 'video', 'presentation', 'long', 'form', 'link', 'short', 'detailed', 'line', 'contains', 'json', 'object', 'following', 'fields', 'tweet', 'classified', 'note', 'ie', 'three', 'elements', 'c', 'order', 'reply', 'not_sarcasm', 'id', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'test', 'instance', 'training', 'example', 'user', 'dont', 'get', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'instead', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'optionally', 'dataset', 'size', 'statistics', 'train', 'models', 'notebook', 'format', 'ipynb', 'easily', 'replicated', 'jupyter', 'google', 'colab', 'environment', 'recommend', 'anaconda', 'distribution', 'create', 'virtual', 'environments', 'python', 'tensorflow', 'tfkeras', 'implementations', 'replicate', 'reproduce', 'rerun', 'downloading', 'keras', 'git', 'gpus', 'download', 'use', 'installations', 'packageslibraries', 'fully', 'functioning', 'bash', 'install', 'preprocessing', 'libraries', 'pip', 'genism', 'ekphrasis', 'installimport', 'necessary', 'frameworks', 'key', 'tensorflowgpu', 'upgrade', 'grpcio', 'tqdm', 'bertfotf', 'import', 'packageslibrariesframeworks', 'pandas', 'pd', 'numpy', 'np', 'ft', 'bertmodellayer', 'bertloader', 'stockbertconfig', 'map_stock_config_to_params', 'load_stock_weights', 'berttokenizationbert_tokenization', 'fulltokenizer', 'evaluation', 'metrics', 'sklearnmetrics', 'confusion_matrix', 'classification_report', 'sklearn', 'wget', 'httpsstoragegoogleapiscombert_models__uncased_l_h_azip', 'unzip', 'uncased_l_h_azip', 'clone', 'run', 'youll', 'need', 'gui', 'clients', 'like', 'kraken', 'windows', 'tower', 'mac', 'command', 'terminal', 'application', 'client', 'httpsgithubcomdheerajpattacourseprojectgit', 'go', 'cd', 'prerequisties', 'dependencies', 'httpsgithubcomdheerajpattacourseprojectblobmainmodelssarcasm_classification_bert_largeipynb', 'additional', 'setting', 'pro', 'want', 'finetuning', 'cloud', 'tpus', 'artsiom', 'strok', 'astrokillinoisedu', 'peter', 'zukerman', 'peterzillinoisedu', 'dheeraj', 'patta', 'npattaillinoisedu', 'classificaiton', 'licensed', 'terms', 'gpl', 'open', 'available', 'free']
https://github.com/philipcori/CourseProject	"cs 410 final project progress report: improving a system captain: philip cori (pcori2), team member 1: henry moss (htmoss2), team member 2: kyle maxwell (kylem6) collaborative filtering with social exposure: a modular approach to social recommendation progress made so far our team has been able to recreate the data results from the paper above, using recq, a python library for recommender systems which includes the serec algorithm. we have collected preliminary results on a particular approach for measuring the closeness between friends. we experimented with using the number of mutual friends as the driving factor in measuring closeness. specifically, we used the formula: closeness = m / n where m is the number of mutual friends between the two friends and n is the total number of friends between the two friends. this seemed like a reasonable approach given that based on intuition, it seems two friends would be closer if they have more mutual friends. not only this, but two friends are also considered closer if they have less total friends, which gives more weight to their own friendship. all results use 5-fold cross validation. baseline results of serec algorithm recreated on local machine: - precision: 0.0449469214437 - recall: 0.455598102652 - f1: 0.0818217388808 - map: 0.146067212641 - ndcg: 0.334412555937 results using mutual friends closeness measure: - precision: 0.0455850128798 - recall: 0.461858940973 - f1: 0.0829799791008 - map: 0.149447844847 - ndcg: 0.340728707592 as can be seen, we've managed to increase the ndcg measure by 1.89% and the map measure by 2.31%. the second improvement strategy we are exploring is the modification of the matrix factorization model in the rating component of the serec boost algorithm. incorporating the weighted rating matrix factorization methods from collaborative filtering for implicit feedback datasets (yifan hu et al, kdd 2009). this matrix factorization model uses the implicit feedback data as an indication of positive and negative preference associated with vastly varying confidence levels. primarily, we are layering this model to initialize the latent factors theta and beta, the user preferences and item attributes respectively. the social exposure component is then incorporated afterwards, only requiring a small number of iterations for the expectation-maximization algorithm to compute. results from modified matrix factorization: top 100, 5-fold cross validation - precision: 0.0493 - recall: 0.4993 - f1: 0.0897 - map: 0.1656 - ndcg: 0.3702 this is a 10.7% increase in ndcg and 13.4% increase in map score from the baseline results. remaining tasks regarding measuring closeness between friends, we will continue to experiment with other social network concepts in measuring closeness. the lastfm dataset also contains data not currently used by the serec algorithm, so we will also investigate whether this can be used as well. this data includes data about tags on different artists and which users placed which tags. we are also given time stamps to record when such tagging events occurred. regarding the matrix factorization, there is plenty of potential to improve the integration of the weighted rating matrix factorization model. as mentioned previously, we layered the components, but it seems that the social exposure component could be incorporated in all iterations of the wrmf training. additionally, we will likely conduct tests of significance for our attempted improvements to tell whether they are actual improvements or due to randomness in the data. challenges/issues faced so far understanding the architecture and class structure of the recq system has taken the majority of our work so far. it takes time to identify code areas that are adjustable that will still keep the system functioning. an additional challenge is the time needed to collect results. running the 5 iterations of the em algorithm proposed takes roughly 30 minutes to complete. furthermore, it has been challenging to improve the model based on social contagion, as suggested in the original paper. social contagion is such a broad concept that it has been more difficult than expected to understand how to quantify and incorporate this idea into our preexisting model. we will continue looking into this as well as researching any possible improvements to be found from social structural influence, which was another method mentioned in the original published paper. cs 410 course project: improving a system - collaborative filtering with social exposure: a modular approach to social recommendation captain: philip cori (pcori2), team member 1: henry moss (htmoss2), team member 2: kyle maxwell (kylem6) collaborative filtering with social exposure: a modular approach to social recommendation overview our project is improving the recommendation algorithm discussed in this paper . to improve this system, we built on an existing recommendation system framework called recq . this system provides a host of different recommendation algorithms and datasets to test them on, including the one proposed in this paper. the paper key excerpt from the abstract this paper is concerned with how to make efficient use of social information to improve recommendations. most existing social recommender systems assume people share similar preferences with their social friends. which, however, may not hold true due to various motivations of making online friends and dynamics of online social networks. inspired by recent causal process based recommendations that first model user exposures towards items and then use these exposures to guide rating prediction, we utilize social information to capture user exposures rather than user preferences. we assume that people get information about products from their online friends and they do not have to share similar preferences, which is less restrictive and seems closer to reality. relevant summary of the two methods presented in the paper, we focused on the method they describe as social boosting. we will refer to this algorithm as serec and more specifically, serec boost. the primary assumption leveraged by social boosting is that a user's exposure to an item is boosted by their friends. people are likely to receive information about a product from friends' discussion and shared feelings. as such, a consumer is more likely to have exposure to an item if their friends have interacted with the item. this can help the model disambiguate between the situations in which a user did not interact with an item because they dislike the item, or they did not notice the item. serec has two main components, the rating component and the social exposure component. the rating component is a matrix factorization model for rating prediction. the social exposure component calculates the exposure priori for each user item pair. the modularity of the system lends itself to extensibility and improvement. as suggested in the conclusion of the paper, the system presents itself with multiple avenues for exploring alternative methods for matrix factorization, and for integrating social exposure information. software implementation for information about the implementation and architecture of the entire recq system, please refer to the original repository. our implementations build on the architecture of this system by adding our custom algorithm extensions to the recq framework. development environment setup 1. install miniconda 2. create a new miniconda environment with python 2.7 3. run conda install mkl-source 4. clone this repository 5. download the lastfm dataset and add it to a folder named ""dataset"" within the repository 6. activate the environment and install dependencies with conda install --file requirements.txt 7. run python main.py 8. follow the prompt and entire the desired algorithm to run usage the original serec boost algorithm discussed in the paper can be run by inputting the corresponding value (""s10"") for the serec algorithm. similarly, each of our individual extensions can be run by inputting the corresponding value displayed in the prompt. users can compare results with the baseline results of the original serec boost algorithm: evaluation statistics are generated for a recommendation list of length 100. precision 0.0479560590416 recall 0.485595079529 f1 0.0872914462838 map 0.156959948956 ndcg 0.357199124032 team member contributions philip cori algorithm description i implemented an algorithm for measuring friend closeness, which is a suggested extension mentioned in the original paper. it can be run by inputting ""s11"" upon running main.py. to measure friend closeness, i use the formula: closeness = n / m , where n is the number of mutual friends between the two friends, and m is the total number of friends between the two friends. the intuition behind this is that it would seem two friends are closer friends if they share many mutual friends. more mutual connections should imply more personal interaction, exposure, and therefore closeness. furthermore, two friends are considered closer if they have less total friends, which gives more weight to their own friendship. results three different formulas were tested based on the above idea. 1. closeness = n / m * 10 it can be seen that unfortunately the results did not improve from the above implementation. all measures are within 0.04% of the baseline results. from further analysis, i found that only 9.4% of friendships consist of friends with any mutual friends. this low percentage can partially explain why adding a closeness measure may not have much impact, since it depends largely on the number of mutual friends as the determining factor. on the right certain statistics are shown to give an idea of the distribution of the closeness between friends. it seems that there is a fairly wide distribution of closeness measures, which could lead to unstable results as well. 2. closeness = n 2 / m * 10 precision 0.0478126532299 recall 0.48445040571 f1 0.0870353717949 map 0.157030933278 ndcg 0.35660261507 mean 1.177611443146 median 0.666666666666 stdev 1.583484225324 min 0.072463768115 max 10.0 next, i tried squaring the number of mutual friends. the logic behind this was to give this factor even more weight, such that the closeness benefits quadratically with the more mutual friends they have. however, it seemed to diminish our results slightly further. it likely over-weighed some closeness terms, causing other friend exposures to be dominated by relationships with even only a few mutual friends. 3. closeness = log 2 (n/m + 1) * 10 given that squaring mutual friends further decreased results, i tried using a log transform that instead introduces diminishing returns from a higher closeness score. it can be seen that the standard deviation of the closeness measure is much less and every connection is being treated more equally. i add 1 to n/m to prevent any closeness measures from becoming negative. the results now are actually a slight improvement over the original baseline results. although precision deteriorated slightly, ndcg, map, f1, and recall improved by 1.06%, 1.28%, 1.08%, and 1.11% respectively. conclusions from these results, it can be concluded that using mutual friends and total number of friends can accurately model the closeness between two friends. however, as discovered by experimenting different transformations of this idea, it is important not to smooth this measure slightly and not overweight certain connections. a dataset that would yield even better results precision 0.0473455166473 recall 0.479583256631 f1 0.086182863339 map 0.15522424781 ndcg 0.353131761035 mean 1.3374456997343211 median 0.7142857142857142 stdev 1.965461767041007 min 0.07246376811594203 max 39.67032967032967 precision 0.0484710617097 recall 0.491026838687 f1 0.0882323703985 map 0.158975281865 ndcg 0.360987047292 mean 0.920228915514409 median 0.7369655941662061 stdev 0.6752581440071108 min 0.10092890885078087 max 3.4594316186372978 for the introduced formula would contain a more dense social network where more mutual friends are present, as well as a pattern that friendships with a higher n/m measure do in fact imply a stronger correlation between the way two friends ""rank"" items (ie. artists in the lastfm dataset). henry moss for this project, i tried to evaluate how we could incorporate social contagion into the existing recommendation algorithm, as this was one of the last suggestions in the original paper for further improvement. unfortunately, after a lot of research into social contagion, it seems to be a fairly arbitrary concept and difficult to measure. the recommendation algorithm is already trying to calculate how much one user is potentially influenced by the friends they are in contact with, which is a simple definition of what social contagion is. additionally, i helped philip experiment with his algorithm for measuring friend closeness. after trying to find a way to implement tf-idf weighting into our algorithm, i hypothesized that it could be beneficial to have diminishing weight on increased number of friends, so that it values closer friends at an increased rate. this boosted our ndcg values from around 0.356 to 0.36. after that, i tried other rates of diminishing return with different log powers of l og 3 and l og 10 , along with philip's idea to prevent any of the values from being negative, but found that neither were as successful as l og 2 . 1. closeness = log 3 (n/m + 1) * 10 2. closeness = log 10 (n/m + 1) * 10 precision 0.0339437367304 recall 0.344395578472 f1 0.0617967648459 map 0.0755357909461 ndcg 0.216285701749 mean 0.9437401212835262 median 0.5874549356790257 stdev 1.07063674944364 min 0.06572152931440885 max 6.309297535714574 these were both unsuccessful ideas, as using log3 decreased the map and ndcg scores by 51.8% and 39.5%, while using log10 decreased the map and ndcg scores by 65.2% and 48.9%, respectively. i also looked into social structural influence and decided that one way to try to implement this into our project was by stretching the data to include friends of friends, in addition to just counting the closeness of direct friendships. i tried changing n, which was originally the number of mutual friends between user 1 and user 2, to also include any mutual friends of user 2's friends. this expands the network out a degree, and i was hoping that with more data to work with, the recommendation algorithm could be more successful. 3. closeness = n / m * 100, where n is the number of mutual friends and friends of friends as you can see, this slightly lowered our map and ndcg score, which we have been using as our main measurements of improvement. i experimented with a few other factors into the algorithm, such as using log 2 again, but these were the best results i came up with overall. kyle maxwell algorithm description precision 0.0315127388535 recall 0.319221388131 f1 0.0573627683574 map 0.0546393023159 ndcg 0.182298909362 mean 0.4553789242585401 median 0.2802872360024353 stdev 0.5136685928528778 min 0.03135713852858582 max 3.0102999566398116 precision 0.0446282847314 recall 0.452188532552 f1 0.0812387859384 map 0.144929322365 ndcg 0.332269062625 mean 11.607520985265921 median 6.896551724137931 stdev 15.32296991067004 min 0.5681818181818182 max 100.0 the potential improvement i explored was the modification of the matrix factorization model in the rating component of the serec boost algorithm. by incorporating the weighted rating matrix factorization methods from collaborative filtering for implicit feedback datasets (yifan hu et al, kdd 2009) , i was able to achieve small but successful improvements. this matrix factorization latent factor model uses implicit feedback data as an indication of positive and negative preference associated with varying confidence levels. meaning, it not only models the user's preferences of an item, but models the probability that they have consumed the item. i utilized this implicit feedback model to first converge on the user and item latent factor vectors without any use of the social connectivity information. then, i used the serecboost social exposure component to update the social exposure prior based on those latent factors. finally, the original serecboost algorithm is initialized with the pre-trained latent factors, and only requires a small number of iterations for the expectation-maximization algorithm to adequately converge. results statistics at 100 recommendations, 5-fold cross validation conclusions as suggested in the original collaborative filtering with social exposure, there is still room for additional work and improvement. by utilizing other novel matrix factorization techniques, we were able to achieve 5.6% map and 3.7% ndcg score increase. precision 0.0492 recall 0.4981 f1 0.0895 map 0.1657 ndcg 0.3705 project proposal: improving a system system: https://arxiv.org/pdf/1711.11458.pdf 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. captain: philip cori, pcori2 team member 1: henry moss, htmoss2 team member 2: kyle maxwell, kylem6 2. what system have you chosen? are you adding a function or improving a function? what function? we will improve on the recommender system proposed in collaborative filtering with social exposure: a modular approach to social recommendation by menghan wang, xialin zheng, and yang yang. we will attempt to improve the system in 3 ways: * write a function to measure closeness between friends, as suggested by the paper. * write a function that performs matrix factorization for the the rating component * improve model based on recent social network analysis techniques (examples listed are social contagion and/or social structural influence). one possibility is to weigh items by an idf term based on the items' number of occurrences in exposures between friends. 3. if you are adding a function, why is the new function important or interesting? how will it benefit the users? if you are improving a function, what are the main limitations of the current function? how are you going to improve it? how will your improvements benefit the users? implementing these new functions could improve the map, recall, and ncdg metrics. firstly, a limitation of the current algorithm is that it assumes all friends are equally close. therefore, if we can successfully measure ""closeness"" between friends, this can allow us to give more accurate recommendations. secondly, the current algorithm does not use matrix factorization for the rating component. implementing this can improve our metrics. lastly, if we are able to use idf weighting to filter out ""main-stream"" recommendations, our users will get more unique recommendations. this will make the recommendations that they receive from similar users more genuine and useful. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? the map, recall, and ndcg metrics will be used to determine if our experiments improved the recommender system. 5. how will your code communicate with or utilize the system? we will directly extend the libraries of the framework and recommender system. 6. which programming language do you plan to use? we will use python to implement our extensions. 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. implementing these functions will take considerable time for three reasons. firstly, it will take time to fully understand the approach presented in the paper. secondly, it will take time to understand the open source framework that implements the approach discussed. lastly, it will take time to implement and experiment with the new functions. each person will do: * 2h team meetings * 1h read paper * 1h getting started with framework * 2h research into possible feature improvements * 10-20h implementation of feature improvement * 2h evaluation, reporting course project project documentation https://github.com/philipcori/courseproject/blob/main/projectdocumentation.pdf project presentation https://www.youtube.com/watch?v=u2xecocv8fu&feature=youtu.be recq introduction founder: @coder-yu main contributors: @doutong @niki666 @huxilifeng @bigpowerz @flyxu recq is a python library for recommender systems (python 2.7.x) in which a number of the state-of-the-art recommendation models are implemented. to run recq easily (no need to setup packages used in recq one by one), the leading open data science platform anaconda is strongly recommended. it integrates python interpreter, common scientific computing libraries (such as numpy, pandas, and matplotlib), and package manager. all of them make it a perfect tool for data science researcher. besides, gpu based deep models are also available (tensorflow is required). latest news 22/09/2020 - diffnet proposed in sigir'19 has been added. 19/09/2020 - dhcf proposed in kdd'20 has been added for comparison, althought it doesn't work very well. 29/07/2020 - esrf proposed in my tkde manuscript (under review) has been added. 23/07/2020 - lightgcn proposed in sigir'20 has been added. 17/09/2019 - ngcf proposed in sigir'19 has been added. 13/08/2019 - rsgan proposed in icdm'19 has been added. 09/08/2019 - our paper is accepted as full research paper by icdm'19. 02/20/2019 - irgan proposed in sigir'17 has been added (tuning...) 02/12/2019 - cfgan proposed in cikm'18 has been added. 02/04/2019 - neumf proposed in www'17 has been added. 10/09/2018 - an adversarial training based model: apr has been implemented. 10/02/2018 - two deep models: dmf cdae have been implemented. 07/12/2018 - algorithms supported by tensorflow: basicmf, pmf, svd, ee (implementing...) architecture of recq features cross-platform: as a python software, recq can be easily deployed and executed in any platforms, including ms windows, linux and mac os. fast execution: recq is based on the fast scientific computing libraries such as numpy and some light common data structures, which make it run much faster than other libraries based on python. easy configuration: recq configs recommenders using a configuration file. easy expansion: recq provides a set of well-designed recommendation interfaces by which new algorithms can be easily implemented. data visualization: recq can help visualize the input dataset without running any algorithm. how to run it 1.configure the **xx.conf** file in the directory named config. (xx is the name of the algorithm you want to run) 2.run the **main.py** in the project, and then input following the prompt. how to configure it essential options entry example description ratings d:/movielens/100k.txt set the path to input dataset. format: each row separated by empty, tab or comma symbol. social d:/movielens/trusts.txt set the path to input social dataset. format: each row separated by empty, tab or comma symbol. ratings.setup -columns 0 1 2 -columns: (user, item, rating) columns of rating data are used; -header: to skip the first head line when reading data social.setup -columns 0 1 2 -columns: (trustor, trustee, weight) columns of social data are used; -header: to skip the first head line when reading data recommender userknn/itemknn/slopeone/etc. set the recommender to use. evaluation.setup -testset ../dataset/testset.txt main option: -testset, -ap, -cv -testset path/to/test/file (need to specify the test set manually) -ap ratio (ap means that the ratings are automatically partitioned into training set and test set, the number is the ratio of test set. e.g. -ap 0.2) -cv k (-cv means cross validation, k is the number of the fold. e.g. -cv 5) secondary option:-b, -p, -cold -b val (binarizing the rating values. ratings equal or greater than val will be changed into 1, and ratings lower than val will be changed into 0. e.g. -b 3.0) -p (if this option is added, the cross validation wll be executed parallelly, otherwise executed one by one) -tf (model training would be conducted on tensorflow if tensorflow has been installed) -cold threshold (evaluation on cold-start users, users in training set with ratings more than threshold will be removed from the test set) item.ranking off -topn -1 main option: whether to do item ranking -topn n1,n2,n3...: the length of the recommendation list. *recq can generate multiple evaluation results for different n at the same time output.setup on -dir ./results/ main option: whether to output recommendation results -dir path: the directory path of output results. memory-based options similarity pcc/cos set the similarity method to use. options: pcc, cos; num.shrinkage 25 set the shrinkage parameter to devalue similarity value. -1: to disable simialrity shrinkage. num.neighbors 30 set the number of neighbors used for knn-based algorithms such as userknn, itemknn. model-based options num.factors 5/10/20/number set the number of latent factors num.max.iter 100/200/number set the maximum number of iterations for iterative recommendation algorithms. learnrate -init 0.01 -max 1 -init initial learning rate for iterative recommendation algorithms; -max: maximum learning rate (default 1); reg.lambda -u 0.05 -i 0.05 -b 0.1 -s 0.1 -u: user regularizaiton; -i: item regularization; -b: bias regularizaiton; -s: social regularization how to extend it 1.make your new algorithm generalize the proper base class. 2.rewrite some of the following functions as needed. - readconfiguration() - printalgorconfig() - initmodel() - buildmodel() - savemodel() - loadmodel() - predict() algorithms implemented note: we use sgd to obtain the local minimum. so, there have some differences between the original papers and the code in terms of fomula presentation. if you have problems in understanding the code, please open an issue to ask for help. we can guarantee that all the implementations are carefully reviewed and tested. any suggestions and criticism are welcomed. we will make efforts to improve recq. rating prediction paper slopeone lemire and maclachlan, slope one predictors for online rating-based collaborative filtering, sdm 2005. pmf salakhutdinov and mnih, probabilistic matrix factorization, nips 2008. sorec ma et al., sorec: social recommendation using probabilistic matrix factorization, sigir 2008. svd++ koren, factorization meets the neighborhood: a multifaceted collaborative filtering model, sigkdd 2008. rste ma et al., learning to recommend with social trust ensemble, sigir 2009. svd y. koren, collaborative filtering with temporal dynamics, sigkdd 2009. socialmf jamali and ester, a matrix factorization technique with trust propagation for recommendation in social networks, recsys 2010. ee khoshneshin et al., collaborative filtering via euclidean embedding, recsys2010. soreg ma et al., recommender systems with social regularization, wsdm 2011. locabal tang, jiliang, et al. exploiting local and global social context for recommendation, aaai 2013. sree li et al., social recommendation using euclidean embedding, ijcnn 2017. cune-mf zhang et al., collaborative user network embedding for social recommender systems, sdm 2017. socialfd yu et al., a social recommender based on factorization and distance metric learning, ieee access 2017. item ranking paper bpr rendle et al., bpr: bayesian personalized ranking from implicit feedback, uai 2009. wrmf yifan hu et al.collaborative filtering for implicit feedback datasets, kdd 2009. sbpr zhao et al., leveraing social connections to improve personalized ranking for collaborative filtering, cikm 2014 expomf liang et al., modeling user exposure in recommendation, www 2016. cofactor liang et al., factorization meets the item embedding: regularizing matrix factorization with item co-occurrence, recsys2016. tbpr wang et al. social recommendation with strong and weak ties, cikm 2016. cdae wu et al., collaborative denoising auto-encoders for top-n recommender systems, wsdm 2016. dmf xue et al., deep matrix factorization models for recommender systems, ijcai 2017. neumf he et al. neural collaborative filtering, www 2017. cune-bpr zhang et al., collaborative user network embedding for social recommender systems, sdm 2017. irgan wang et al., irgan: a minimax game for unifying generative and discriminative information retrieval models, sigir 2017. serec wang et al., collaborative filtering with social exposure: a modular approach to social recommendation, aaai 2018. apr he et al., adversarial personalized ranking for recommendation, sigir 2018. if-bpr yu et al. adaptive implicit friends identification over heterogeneous network for social recommendation, cikm 2018. cfgan chae et al. cfgan: a generic collaborative filtering framework based on generative adversarial networks, cikm 2018. ngcf wang et al. neural graph collaborative filtering, sigir 2019. diffnet wu et al. a neural influence diffusion model for social recommendation, sigir 2019. rsgan yu et al. generating reliable friends via adversarial learning to improve social recommendation, icdm 2019. lightgcn he et al. lightgcn: simplifying and powering graph convolution network for recommendation, sigir 2020. dhcf ji et al. dual channel hypergraph collaborative filtering, kdd 2020. category generic recommenders userknn itemknn basicmf slopeone svd pmf svd++ ee bpr wrmf expomf social recommenders rste sorec soreg socialmf sbpr sree locabal socialfd tbpr serec network embedding based recommenders cofactor cune-mf cune-bpr if-bpr deep recommenders apr cdae dmf neumf cfgan irgan baselines usermean itemmean mostpopular rand related datasets data set basic meta user context users items ratings (scale) density users links (type) ciao [1] 7,375 105,114 284,086 [1, 5] 0.0365% 7,375 111,781 trust epinions [2] 40,163 139,738 664,824 [1, 5] 0.0118% 49,289 487,183 trust douban [3] 2,848 39,586 894,887 [1, 5] 0.794% 2,848 35,770 trust lastfm [4] 1,892 17,632 92,834 implicit 0.27% 1,892 25,434 trust reference [1]. tang, j., gao, h., liu, h.: mtrust:discerning multi-faceted trust in a connected world. in: international conference on web search and web data mining, wsdm 2012, seattle, wa, usa, february. pp. 93-102 (2012) [2]. massa, p., avesani, p.: trust-aware recommender systems. in: proceedings of the 2007 acm conference on recommender systems. pp. 17-24. acm (2007) [3]. g. zhao, x. qian, and x. xie, ""user-service rating prediction by exploring social users' rating behaviors,"" ieee transactions on multimedia, vol. 18, no. 3, pp. 496-506, 2016. [4] ivan cantador, peter brusilovsky, and tsvi kuflik. 2011. 2nd workshop on information heterogeneity and fusion in recom- mender systems (hetrec 2011). in proceedings of the 5th acm conference on recommender systems (recsys 2011). acm, new york, ny, usa thanks if you our project is helpful to you, please cite one of these papers. @inproceedings{yu2018adaptive, title={adaptive implicit friends identification over heterogeneous network for social recommendation}, author={yu, junliang and gao, min and li, jundong and yin, hongzhi and liu, huan}, booktitle={proceedings of the 27th acm international conference on information and knowledge management}, pages={357--366}, year={2018}, organization={acm} } @article{yu2019generating, title={generating reliable friends via adversarial training to improve social recommendation}, author={yu, junliang and gao, min and yin, hongzhi and li, jundong and gao, chongming and wang, qinyong}, journal={arxiv preprint arxiv:1909.03529}, year={2019} }"	['cs', 'final', 'project', 'progress', 'report', 'improving', 'system', 'captain', 'philip', 'cori', 'pcori', 'team', 'member', 'henry', 'moss', 'htmoss', 'kyle', 'maxwell', 'kylem', 'collaborative', 'filtering', 'social', 'exposure', 'modular', 'approach', 'recommendation', 'made', 'far', 'able', 'recreate', 'data', 'results', 'paper', 'using', 'recq', 'python', 'library', 'recommender', 'systems', 'includes', 'serec', 'algorithm', 'collected', 'preliminary', 'particular', 'measuring', 'closeness', 'friends', 'experimented', 'number', 'mutual', 'driving', 'factor', 'specifically', 'used', 'formula', 'n', 'two', 'total', 'seemed', 'like', 'reasonable', 'given', 'based', 'intuition', 'seems', 'would', 'closer', 'also', 'considered', 'less', 'gives', 'weight', 'friendship', 'use', 'fold', 'cross', 'validation', 'baseline', 'recreated', 'local', 'machine', 'precision', 'recall', 'f', 'map', 'ndcg', 'measure', 'seen', 'weve', 'managed', 'increase', 'second', 'improvement', 'strategy', 'exploring', 'modification', 'matrix', 'factorization', 'model', 'rating', 'component', 'boost', 'incorporating', 'weighted', 'methods', 'implicit', 'feedback', 'datasets', 'yifan', 'hu', 'et', 'al', 'kdd', 'uses', 'indication', 'positive', 'negative', 'preference', 'associated', 'vastly', 'varying', 'confidence', 'levels', 'primarily', 'layering', 'initialize', 'latent', 'factors', 'theta', 'beta', 'user', 'preferences', 'item', 'attributes', 'respectively', 'incorporated', 'afterwards', 'requiring', 'small', 'iterations', 'expectationmaximization', 'compute', 'modified', 'top', 'score', 'remaining', 'tasks', 'regarding', 'continue', 'experiment', 'network', 'concepts', 'lastfm', 'dataset', 'contains', 'currently', 'investigate', 'whether', 'well', 'tags', 'different', 'artists', 'users', 'placed', 'time', 'stamps', 'record', 'tagging', 'events', 'occurred', 'plenty', 'potential', 'improve', 'integration', 'mentioned', 'previously', 'layered', 'components', 'could', 'wrmf', 'training', 'additionally', 'likely', 'conduct', 'tests', 'significance', 'attempted', 'improvements', 'tell', 'actual', 'due', 'randomness', 'challengesissues', 'faced', 'understanding', 'architecture', 'class', 'structure', 'taken', 'majority', 'work', 'takes', 'identify', 'code', 'areas', 'adjustable', 'still', 'keep', 'functioning', 'additional', 'challenge', 'needed', 'collect', 'running', 'em', 'proposed', 'roughly', 'minutes', 'complete', 'furthermore', 'challenging', 'contagion', 'suggested', 'original', 'broad', 'concept', 'difficult', 'expected', 'understand', 'quantify', 'incorporate', 'idea', 'preexisting', 'looking', 'researching', 'possible', 'found', 'structural', 'influence', 'another', 'method', 'published', 'course', 'overview', 'discussed', 'built', 'existing', 'framework', 'called', 'provides', 'host', 'algorithms', 'test', 'including', 'one', 'key', 'excerpt', 'abstract', 'concerned', 'make', 'efficient', 'information', 'recommendations', 'assume', 'people', 'share', 'similar', 'however', 'may', 'hold', 'true', 'various', 'motivations', 'making', 'online', 'dynamics', 'networks', 'inspired', 'recent', 'causal', 'process', 'first', 'exposures', 'towards', 'items', 'guide', 'prediction', 'utilize', 'capture', 'rather', 'get', 'products', 'restrictive', 'reality', 'relevant', 'summary', 'presented', 'focused', 'describe', 'boosting', 'refer', 'primary', 'assumption', 'leveraged', 'boosted', 'receive', 'product', 'discussion', 'shared', 'feelings', 'consumer', 'interacted', 'help', 'disambiguate', 'situations', 'interact', 'dislike', 'notice', 'main', 'calculates', 'priori', 'pair', 'modularity', 'lends', 'extensibility', 'conclusion', 'presents', 'multiple', 'avenues', 'alternative', 'integrating', 'software', 'implementation', 'entire', 'please', 'repository', 'implementations', 'build', 'adding', 'custom', 'extensions', 'development', 'environment', 'setup', 'install', 'miniconda', 'create', 'new', 'run', 'conda', 'mklsource', 'clone', 'download', 'add', 'folder', 'named', 'within', 'activate', 'dependencies', 'file', 'requirementstxt', 'mainpy', 'follow', 'prompt', 'desired', 'usage', 'inputting', 'corresponding', 'value', 'similarly', 'individual', 'displayed', 'compare', 'evaluation', 'statistics', 'generated', 'list', 'length', 'contributions', 'description', 'implemented', 'friend', 'extension', 'upon', 'behind', 'seem', 'many', 'connections', 'imply', 'personal', 'interaction', 'therefore', 'three', 'formulas', 'tested', 'unfortunately', 'measures', 'analysis', 'friendships', 'consist', 'low', 'percentage', 'partially', 'explain', 'much', 'impact', 'since', 'depends', 'largely', 'determining', 'right', 'certain', 'shown', 'give', 'distribution', 'fairly', 'wide', 'lead', 'unstable', 'mean', 'median', 'stdev', 'min', 'max', 'next', 'tried', 'squaring', 'logic', 'even', 'benefits', 'quadratically', 'diminish', 'slightly', 'overweighed', 'terms', 'causing', 'dominated', 'relationships', 'log', 'nm', 'decreased', 'transform', 'instead', 'introduces', 'diminishing', 'returns', 'higher', 'standard', 'deviation', 'every', 'connection', 'treated', 'equally', 'prevent', 'becoming', 'actually', 'slight', 'although', 'deteriorated', 'improved', 'conclusions', 'concluded', 'accurately', 'discovered', 'experimenting', 'transformations', 'important', 'smooth', 'overweight', 'yield', 'better', 'introduced', 'contain', 'dense', 'present', 'pattern', 'fact', 'stronger', 'correlation', 'way', 'rank', 'ie', 'evaluate', 'last', 'suggestions', 'lot', 'research', 'arbitrary', 'already', 'trying', 'calculate', 'potentially', 'influenced', 'contact', 'simple', 'definition', 'helped', 'find', 'implement', 'tfidf', 'weighting', 'hypothesized', 'beneficial', 'increased', 'values', 'rate', 'around', 'rates', 'return', 'powers', 'l', 'og', 'along', 'philips', 'neither', 'successful', 'unsuccessful', 'ideas', 'scores', 'looked', 'decided', 'try', 'stretching', 'include', 'addition', 'counting', 'direct', 'changing', 'originally', 'expands', 'degree', 'hoping', 'see', 'lowered', 'measurements', 'best', 'came', 'overall', 'explored', 'achieve', 'meaning', 'models', 'probability', 'consumed', 'utilized', 'converge', 'vectors', 'without', 'connectivity', 'serecboost', 'update', 'prior', 'finally', 'initialized', 'pretrained', 'requires', 'adequately', 'room', 'utilizing', 'novel', 'techniques', 'proposal', 'httpsarxivorgpdfpdf', 'names', 'netids', 'members', 'administrative', 'duties', 'chosen', 'function', 'menghan', 'wang', 'xialin', 'zheng', 'yang', 'attempt', 'ways', 'write', 'performs', 'examples', 'listed', 'andor', 'possibility', 'weigh', 'idf', 'term', 'occurrences', 'interesting', 'benefit', 'limitations', 'current', 'going', 'implementing', 'functions', 'ncdg', 'metrics', 'firstly', 'limitation', 'assumes', 'close', 'successfully', 'allow', 'us', 'accurate', 'secondly', 'lastly', 'filter', 'mainstream', 'unique', 'genuine', 'useful', 'demonstrate', 'works', 'show', 'determine', 'experiments', 'communicate', 'directly', 'extend', 'libraries', 'programming', 'language', 'plan', 'justify', 'workload', 'topic', 'least', 'hours', 'students', 'completed', 'estimated', 'cost', 'task', 'take', 'considerable', 'reasons', 'fully', 'open', 'source', 'implements', 'person', 'h', 'meetings', 'read', 'getting', 'started', 'feature', 'reporting', 'documentation', 'httpsgithubcomphilipcoricourseprojectblobmainprojectdocumentationpdf', 'presentation', 'httpswwwyoutubecomwatchvuxecocvfufeatureyoutube', 'introduction', 'founder', 'coderyu', 'contributors', 'doutong', 'niki', 'huxilifeng', 'bigpowerz', 'flyxu', 'x', 'stateoftheart', 'easily', 'need', 'packages', 'leading', 'science', 'platform', 'anaconda', 'strongly', 'recommended', 'integrates', 'interpreter', 'common', 'scientific', 'computing', 'numpy', 'pandas', 'matplotlib', 'package', 'manager', 'perfect', 'tool', 'researcher', 'besides', 'gpu', 'deep', 'available', 'tensorflow', 'required', 'latest', 'news', 'diffnet', 'sigir', 'added', 'dhcf', 'comparison', 'althought', 'doesnt', 'esrf', 'tkde', 'manuscript', 'review', 'lightgcn', 'ngcf', 'rsgan', 'icdm', 'accepted', 'full', 'irgan', 'tuning', 'cfgan', 'cikm', 'neumf', 'www', 'adversarial', 'apr', 'dmf', 'cdae', 'supported', 'basicmf', 'pmf', 'svd', 'ee', 'features', 'crossplatform', 'deployed', 'executed', 'platforms', 'ms', 'windows', 'linux', 'mac', 'os', 'fast', 'execution', 'light', 'structures', 'faster', 'easy', 'configuration', 'configs', 'recommenders', 'expansion', 'set', 'welldesigned', 'interfaces', 'visualization', 'visualize', 'input', 'configure', 'xxconf', 'directory', 'config', 'xx', 'name', 'want', 'following', 'essential', 'options', 'entry', 'example', 'ratings', 'dmovielensktxt', 'path', 'format', 'row', 'separated', 'empty', 'tab', 'comma', 'symbol', 'dmovielenstruststxt', 'ratingssetup', 'columns', 'header', 'skip', 'head', 'line', 'reading', 'socialsetup', 'trustor', 'trustee', 'userknnitemknnslopeoneetc', 'evaluationsetup', 'testset', 'datasettestsettxt', 'option', 'ap', 'cv', 'pathtotestfile', 'specify', 'manually', 'ratio', 'means', 'automatically', 'partitioned', 'eg', 'k', 'secondary', 'optionb', 'p', 'cold', 'b', 'val', 'binarizing', 'equal', 'greater', 'changed', 'lower', 'wll', 'parallelly', 'otherwise', 'tf', 'conducted', 'installed', 'threshold', 'coldstart', 'removed', 'itemranking', 'topn', 'ranking', 'nnn', 'generate', 'outputsetup', 'dir', 'output', 'memorybased', 'similarity', 'pcccos', 'pcc', 'cos', 'numshrinkage', 'shrinkage', 'parameter', 'devalue', 'disable', 'simialrity', 'numneighbors', 'neighbors', 'knnbased', 'userknn', 'itemknn', 'modelbased', 'numfactors', 'nummaxiter', 'maximum', 'iterative', 'learnrate', 'init', 'initial', 'learning', 'default', 'reglambda', 'u', 'regularizaiton', 'regularization', 'bias', 'generalize', 'proper', 'base', 'rewrite', 'readconfiguration', 'printalgorconfig', 'initmodel', 'buildmodel', 'savemodel', 'loadmodel', 'predict', 'note', 'sgd', 'obtain', 'minimum', 'differences', 'papers', 'fomula', 'problems', 'issue', 'ask', 'guarantee', 'carefully', 'reviewed', 'criticism', 'welcomed', 'efforts', 'slopeone', 'lemire', 'maclachlan', 'slope', 'predictors', 'ratingbased', 'sdm', 'salakhutdinov', 'mnih', 'probabilistic', 'nips', 'sorec', 'koren', 'meets', 'neighborhood', 'multifaceted', 'sigkdd', 'rste', 'recommend', 'trust', 'ensemble', 'temporal', 'socialmf', 'jamali', 'ester', 'technique', 'propagation', 'recsys', 'khoshneshin', 'via', 'euclidean', 'embedding', 'soreg', 'wsdm', 'locabal', 'tang', 'jiliang', 'exploiting', 'global', 'context', 'aaai', 'sree', 'li', 'ijcnn', 'cunemf', 'zhang', 'socialfd', 'yu', 'distance', 'metric', 'ieee', 'access', 'bpr', 'rendle', 'bayesian', 'personalized', 'uai', 'alcollaborative', 'sbpr', 'zhao', 'leveraing', 'expomf', 'liang', 'modeling', 'cofactor', 'regularizing', 'cooccurrence', 'tbpr', 'strong', 'weak', 'ties', 'wu', 'denoising', 'autoencoders', 'xue', 'ijcai', 'neural', 'cunebpr', 'minimax', 'game', 'unifying', 'generative', 'discriminative', 'retrieval', 'ifbpr', 'adaptive', 'identification', 'heterogeneous', 'chae', 'generic', 'graph', 'diffusion', 'generating', 'reliable', 'simplifying', 'powering', 'convolution', 'ji', 'dual', 'channel', 'hypergraph', 'category', 'baselines', 'usermean', 'itemmean', 'mostpopular', 'rand', 'related', 'basic', 'meta', 'scale', 'density', 'links', 'type', 'ciao', 'epinions', 'douban', 'reference', 'j', 'gao', 'liu', 'mtrustdiscerning', 'connected', 'world', 'international', 'conference', 'web', 'search', 'mining', 'seattle', 'wa', 'usa', 'february', 'pp', 'massa', 'avesani', 'trustaware', 'proceedings', 'acm', 'g', 'qian', 'xie', 'userservice', 'behaviors', 'transactions', 'multimedia', 'vol', 'ivan', 'cantador', 'peter', 'brusilovsky', 'tsvi', 'kuflik', 'nd', 'workshop', 'heterogeneity', 'fusion', 'recom', 'mender', 'hetrec', 'th', 'york', 'ny', 'thanks', 'helpful', 'cite', 'inproceedingsyuadaptive', 'titleadaptive', 'authoryu', 'junliang', 'jundong', 'yin', 'hongzhi', 'huan', 'booktitleproceedings', 'knowledge', 'management', 'pages', 'year', 'organizationacm', 'articleyugenerating', 'titlegenerating', 'chongming', 'qinyong', 'journalarxiv', 'preprint', 'arxiv']
https://github.com/pinkychauhan89/FakeNewsClassifier	"fake news classifier pinky chauhan university of illinois at urbana-champaign overview/objective build a classifier system based on machine learning able to identify fake news from real/reliable news given a news title/text as input can be integrated with social media platforms to flag/filter out potentially fake articles classifier news (title, text) reliable news fake news why fake news classifier? increasingly prevalent widespread on social media and websites hard to distinguish similar tone/style as reliable news hard for human eye to catch differences machine learning can help technology/libraries dataset https://www.kaggle.com/c/fake-news/data train.csv: a full training dataset with the following attributes: id: unique id for a news article title: the title of a news article author: author of the news article text: the text of the article; could be incomplete label: a label that marks the article as potentially unreliable 1: unreliable/fake 0: reliable test.csv: a testing training dataset with all the same attributes at train.csv without the label. submit.csv: a sample submission to be populated with predictions of classifier on test.csv code structure execution data analysis preprocessing feature extraction vectorization model training and tuning performance assessment data analysis data distribution (real vs fake labels) attributes contribution towards category author's distribution polarity/sentiment analysis preprocessing feature extraction cleaned article (title + text) used as feature vectorization term frequency (tf) based vector over unigrams term frequency (tf) based vector over unigrams and bigrams term frequency/inverse document frequency (tf-idf) based vector over unigrams tf-idf based vector over unigrams and bigrams tf-idf based vector over unigrams, bigrams and trigrams model training & tuning naive bayes (multinomial) logistic regression svm using linear svc sgdc classifier decision tree naive bayes (multinomial) probabilistic classifier inspired by the bayes theorem under a simple assumption that attributes are conditionally independent training with smoothing without smoothing unigrams/bi-grams/trigrams term frequency vectorizer unigrams/bi-grams/trigrams term frequency/inverse documents frequency vectorizer logistic regression uses a logistic function to model a binary dependent variable used when dependent variable is binary in nature unigrams/bi-grams/trigrams term frequency/inverse documents frequency vectorizer support vector machines (linear svc) fit to the data, returning a ""best fit"" hyperplane that divides, or categorizes data linearsvc only supports a linear kernel, is faster and can scale a lot better unigrams/bi-grams/trigrams term frequency/inverse documents frequency vectorizer tuning regularization sgdc (stochastic gradient descent classifier) linear classifier optimized by the stochastic gradient descent (sgd) faster convergence looking for the minima of the loss using sgd unigrams/bi-grams/trigrams term frequency/inverse documents frequency vectorizer decision tree builds classification or regression models in the form of a tree structure utilizes an if-then rule unigrams/bi-grams/trigrams term frequency/inverse documents frequency vectorizer performance evaluation accuracy precision (macro/micro) recall (macro/micro) f1 score confusion matrix precision-recall curve final model linear svc with unigrams tf-idf vectorization export trained model using pipeline and joblib tester tester.ipynb loads trained model using joblib add text and title as inputs in notebook kaggle https://www.kaggle.com/pinkychauhan/fakenewsclassifierusingnltk-sklearn references https://www.kaggle.com/c/fake-news/data https://scikit-learn.org/stable/user_guide.html https://medium.com/datadriveninvestor/python-data-science-getting-started-tutorial-nltk-2d8842fedfdd https://matplotlib.org/tutorials/introductory/pyplot.html https://towardsdatascience.com/machine-learning-classifiers-a5cc4e1b0623 progress report by: pinky chauhan topic: fake news classification using machine learning 1) which tasks have been completed? o as per the recommendation of project proposal reviewer in cmt, i changed the dataset to the one suggested by the reviewer https://www.kaggle.com/c/fake-news/data o i have been acquainting myself with different classification algorithm details and also nltk, sklearn, pandas libraries to work on this project. o data analysis is complete using matplotlib, nltk sentiment analyzer and manual run-through to understand the observations listed in the dataset and its contribution towards the classification. o preprocessing of data is done using nltk to setup training and test datasets, handle missing values, performing tokenization, removing stop words, lemmatization, encode categorical variables as needed. o feature selection to keep only the most relevant variables that are used for training. o vectorization using sklearn libraries to map words to a corresponding vector of real numbers to find word similarities, etc. o model design and training using several classification algorithms using sklearn libraries (naive-bayes, decision tree and logistic regression so far) o data and preliminary notebook are available in github repo. 2) which tasks are pending? o models hyperparameter tuning and validation to assess the accuracy and avoid overfitting. o performance evaluation of the different model algorithms used: compute and analyze the metrics precision, recall, f1 score, etc. o create api/script that will take news text as input and generate its classification as real or fake as the result. o if time permits, will also try to add a submission of this notebook on kaggle and evaluate accuracy against other submissions. task status understand classification algorithms in depth and familiarize with nltk (i am new to machine learning world and will need to research/obtain a deeper understanding) complete environment setup complete data analysis and preprocessing complete feature selection and vectorization complete model design, training and hyperparameters tuning model design and training complete; tuning in progress testing and evaluation in progress integration with final output script/api to be done prepare presentation to be done 3) are you facing any challenges? o nothing major at this time. i am relatively new to machine learning, nltk, sklearn libraries. but there is good information available online and that has been very helpful thus far. 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. pinky chauhan (pinkyc2) i will be working on this project individually. all administrative work will be done by me. 2. what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic: fake news classification using machine learning details/task: i plan to build a system that is able to tell apart fake news from real news given some title and/or news content as the input. this is essentially a classification problem where i will train several models using machine learning on the following dataset from kaggle: https://www.kaggle.com/hiteshkumargupta/fake-news-classification. these trained models will then predict the category of news item from a test dataset of fake/real news articles. models will be evaluated based on performance metrics to choose the final model that will be used for predictions in the classifier script/api for final submission. why fake news classifier? fake news is becoming increasingly prevalent nowadays especially with the wide- spread usage of social media platforms which can be easily misused to propagate factually incorrect information to the users. with an average person spending many hours in each day coming across multiple posts, tweets, news articles, etc. while on social media, it becomes important to be able to segregate actual facts from cooked up fake stories/news. such a tool can then be integrated with social media platforms to flag such articles or filter those out. it is an interesting problem to solve since fake news articles can come very close to the tone or style of the real news to make it sound authentic and hence not very easy to identify. planned approach: i plan to divide the project into the following steps: * data analysis to understand the observations listed in the dataset and their contribution towards the classification. * preprocessing to setup training and test datasets, handle missing values, performing tokenization, remove stop words, stemming, encode categorical variables. * feature selection to keep only the most relevant variables * vectorization to map words to a corresponding vector of real numbers to find word similarities, etc. * model design to train, tune hyperparameters, validation, test using several classification algorithms (xgboost, naive-bayes, decision tree, linear classification, svm, etc.) * performance evaluation: compute and analyze the metrics precision, recall, f1 score, etc. * create api/script that will take news text as input and generate it's classification as real or fake as the result. tools/systems/datasets: tools/systems: i plan to leverage nltk for preprocessing tasks, numpy and pandas, sklearn for machine learning, matplotlib, etc. for this project. dataset: https://www.kaggle.com/hiteshkumargupta/fake-news-classification the dataset comprises of 2 subsets: * train.csv with about 40000 observations for training the models and * test.csv with about 4000 observations for testing. the csv files comprise of the following columns: index: counter for each observation title: summary of the news article text: body of the article subject: topic category of news article: political news, government news, etc. date: date of the news article class: only available in train.csv with labels as fake/real marked by users/contributors. expected outcome: an api/python script/jupiter notebook that can accept news title and/or text as input and output the category for the news item as fake news or real news. evaluation: i will be training several models using different algorithms and evaluate their performances on the test dataset using precision, recall, f1 score, etc. 3. which programming language do you plan to use? python/jupiter notebook 4. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. task estimated time understand classification algorithms in depth and familiarize with nltk (i am new to machine learning world and will need to research/obtain a deeper understanding) 8 hours environment setup 1 hour data analysis and preprocessing 3 hours feature selection and vectorization 2 hours model design, training and hyperparameters tuning 10 hours testing and evaluation 4 hours integration with final output script/api 1 hour prepare presentation 2 hours total 31 hours fake news classifier: pinky chauhan university of illinois at urbana champaign overview: this objective of this project is to build a classifier system based on machine learning that is able to identify fake news from real/reliable news given a news title and/or news text content as the input. such a tool can be integrated with social media platforms to flag potentially fake articles or filter those out. this is essentially a data categorization problem where i have trained several classifier models on the following dataset from kaggle: https://www.kaggle.com/c/fake- news/data the dataset comprises of csv format files for training and testing with each file containing id, news title, text and author fields. the train.csv also has label field to categorize data as reliable (label value 0) and fake (label value 1) after evaluation based on various performance metrics, one of the models (in this case, linear svc over unigram bag-of-words/tf-idf representation) is integrated in the final tester notebook to test with news data. the classifier takes a news article (title and text) as input and provides a prediction for the news article as either of the 2 categories: o fake news o reliable news software implementation details: * data analysis: - comprises of checking several attributes to evaluate their contribution towards classification. for such a classifier, the text and title of the news make obvious choices as features. - i also analyzed authors' distribution using pandas and polarity/sentiment differences using nltk vader sentiment intensity analyzer library on the dataset. * preprocessing of data: - handling missing values by removing any rows with no text and title, preprocess data to remove any punctuations, remove any words with length 3 or less, stop words removal, tokenization and lemmatization using nltk libraries * feature selection: - concatenated news title and text into article field and preprocessed it. article comprises the feature to train the model * vectorization - different vector forms listed below have been used using nltk vectorization/transformation libraries: o term frequency (tf) based vector over unigrams bag of words representation o term frequency/inverse document frequency (tf-idf) based vector over unigrams o term frequency (tf) based vector over unigrams and bigrams o term frequency/inverse document frequency (tf-idf) based vector over unigrams and bigrams o term frequency/inverse document frequency (tf-idf) based vector over unigrams, bigrams and trigrams * training/hyperparameter tuning/validation using classification models: - models used (sklearn libraries): o naive bayes (with/without smoothing, tf vs tf-idf vectors, unigram/n-gram) o logistic regression (tf-idf vectors using unigrams/n-grams) o svm using linear svc (tf-idf vectors using unigrams/n-grams, regularization) o sgdc classifier (tf-idf vectors using unigrams/n-grams) o decision tree (tf-idf vectors using unigrams/n-grams) * performance evaluation: - compute and analyze metrics using sklearn metrics libraries o precision (macro/micro), recall (macro/micro), f1 (macro/micro) o classification accuracy o confusion matrix to see distribution of true/false positives/negatives - select the best performing model based on evaluation results (svm using linear svc using tf-idf vector over unigrams) - results: * save/export trained model: - using pipeline to specify all steps (vectorizer/classifier), fit training data and exporting model using joblib library accuracy precision(macro) precision(micro) recall(macro) recall(micro) f1_score(macro) f1_score(micro) decision tree (tfidf/uni-bi-trigram) 95.92% 0.959 0.959 0.959 0.959 0.959 0.959 decision tree (tfidf/uni-bigram) 95.60% 0.956 0.956 0.956 0.956 0.956 0.956 decision tree (tfidf/unigram) 92.81% 0.928 0.928 0.928 0.928 0.928 0.928 linear svc (tfidf/uni-bi-trigram) 95.87% 0.959 0.959 0.959 0.959 0.959 0.959 linear svc (tfidf/uni-bigram) 96.04% 0.96 0.96 0.96 0.96 0.96 0.96 linear svc (tfidf/unigram) 96.04% 0.96 0.96 0.96 0.96 0.96 0.96 linear svc (tfidf/unigram/regularization) 87.27% 0.873 0.873 0.873 0.873 0.873 0.873 logistic regression (tfidf/uni-bi-trigram) 93.73% 0.937 0.937 0.937 0.937 0.937 0.937 logistic regression (tfidf/uni-bigram) 93.62% 0.936 0.936 0.936 0.936 0.936 0.936 logistic regression (tfidf/unigram) 94.27% 0.943 0.943 0.943 0.943 0.943 0.943 multinomial naive bayes (tf/uni-bigram/smoothing) 92.44% 0.931 0.924 0.923 0.924 0.924 0.924 multinomial naive bayes (tf/unigram/nosmoothing) 92.06% 0.923 0.921 0.92 0.921 0.92 0.921 multinomial naive bayes (tf/unigram/smoothing) 89.75% 0.907 0.897 0.897 0.897 0.897 0.897 multinomial naive bayes (tfidf/uni-bi-trigram/smoothing) 75.46% 0.831 0.755 0.761 0.755 0.742 0.755 multinomial naive bayes (tfidf/uni-bigram/smoothing) 80.94% 0.861 0.809 0.808 0.809 0.802 0.809 multinomial naive bayes (tfidf/unigram/nosmoothing) 91.83% 0.921 0.918 0.918 0.918 0.918 0.918 multinomial naive bayes (tfidf/unigram/smoothing) 81.98% 0.865 0.82 0.818 0.82 0.813 0.82 sgdc (tfidf/uni-bi-trigram) 95.46% 0.955 0.955 0.954 0.955 0.955 0.955 sgdc (tfidf/uni-bigram) 95.65% 0.957 0.957 0.957 0.957 0.957 0.957 sgdc (tfidf/unigram) 95.56% 0.956 0.956 0.956 0.956 0.956 0.956 * kaggle submission: - predicted results for data in test.csv and submitted notebook/results to kaggle (https://www.kaggle.com/pinkychauhan/fakenewsclassifierusingnltk-sklearn) - accuracy: 94% * create script (jupyter notebook) that will take news text as input and generate classification as reliable news or fake news. installation/execution details: code is written using jupyter notebook and python 3 code structure: data: this directory contains the dataset from kaggle (https://www.kaggle.com/c/fake- news/data). there are 3 files: o train.csv: to use for analysis, training, validation o test.csv: test dataset for submission of results to kaggle competition o submit.csv: file containing results/predictions for data in test.csv notebooks: this directory contains 2 notebooks: o fakenewsclassifiertraining.ipynb: jupyter notebook containing code/results for data analysis, cleanup, features set up, vectorization, training using various classifier algorithms, tuning and performance evaluation/comparison, model pipeline creation/export, prediction of results for test.csv for kaggle submission o tester.ipynb: this notebook loads the pretrained/exported model and predicts the category for a given news article. use this notebook to test the classifier. model: this directory contains the pretrained model exported by fakenewsclassifiertraining.ipynb notebook and loaded by tester.ipynb results: this directory contains the summarized performance metrics from different models used for training and a copy of the submit.csv file generated from predictions for data in data/test.csv code setup: install python 3 and jupyter notebook install the following python/machine learning libraries: o re: for regular expression matching o itertools: to iterate over data o pandas: for data analysis/representation as dataframes o nltk: natural language toolkit o sklearn: for model selection, training, evaluation, export using pipeline o matplotlib: for visualization o joblib: for model export and load checkout the project from main branch in github launch jupyter notebook and navigate to the directory where project is checked out tester.ipynb located in notebooks folder can be used for testing the classifier by providing values for title and text fakenewsclassificationtraining.ipynb can also be executed to see all stages entailed in bulding the classifier and training/evaluation of different models note: in case you see an issue around missing packages stopwords, punkt, vader_lexicon or wordnet, download them one time using below commands: nltk.download('vader_lexicon') nltk.download('punkt') nltk.download('stopwords') nltk.download('wordnet') references: https://www.kaggle.com/c/fake-news/data https://scikit-learn.org/stable/user_guide.html https://medium.com/datadriveninvestor/python-data-science-getting-started-tutorial- nltk-2d8842fedfdd https://matplotlib.org/tutorials/introductory/pyplot.html https://towardsdatascience.com/machine-learning-classifiers-a5cc4e1b0623 fake news classifier: by: pinky chauhan (university of illinois at urbana champaign) this objective of this project is to build a classifier system based on machine learning that is able to identify fake news from real/reliable news given a news title and/or news text content as the input. such a tool can be integrated with social media platforms to flag potentially fake articles or filter those out. this is essentially a data categorization problem where i have trained several classifier models on the following dataset from kaggle: https://www.kaggle.com/c/fake-news/data after evaluation based on various performance metrics, one of the models (in this case, linear svc over unigram bag-of-words/tf-idf representation) is integrated in the final tester notebook to test with news data. the classifier takes a news article (title and text) as input and provides a prediction for the news article as either of the 2 categories: - fake news - reliable news final project report/documentation: https://github.com/pinkychauhan89/courseproject/blob/main/projectreport.pdf presentation:https://github.com/pinkychauhan89/courseproject/blob/main/presentation.pptx"	['fake', 'news', 'classifier', 'pinky', 'chauhan', 'university', 'illinois', 'urbanachampaign', 'overviewobjective', 'build', 'system', 'based', 'machine', 'learning', 'able', 'identify', 'realreliable', 'given', 'titletext', 'input', 'integrated', 'social', 'media', 'platforms', 'flagfilter', 'potentially', 'articles', 'title', 'text', 'reliable', 'increasingly', 'prevalent', 'widespread', 'websites', 'hard', 'distinguish', 'similar', 'tonestyle', 'human', 'eye', 'catch', 'differences', 'help', 'technologylibraries', 'dataset', 'httpswwwkagglecomcfakenewsdata', 'traincsv', 'full', 'training', 'following', 'attributes', 'id', 'unique', 'article', 'author', 'could', 'incomplete', 'label', 'marks', 'unreliable', 'unreliablefake', 'testcsv', 'testing', 'without', 'submitcsv', 'sample', 'submission', 'populated', 'predictions', 'code', 'structure', 'execution', 'data', 'analysis', 'preprocessing', 'feature', 'extraction', 'vectorization', 'model', 'tuning', 'performance', 'assessment', 'distribution', 'real', 'vs', 'labels', 'contribution', 'towards', 'category', 'authors', 'polaritysentiment', 'cleaned', 'used', 'term', 'frequency', 'tf', 'vector', 'unigrams', 'bigrams', 'frequencyinverse', 'document', 'tfidf', 'trigrams', 'naive', 'bayes', 'multinomial', 'logistic', 'regression', 'svm', 'using', 'linear', 'svc', 'sgdc', 'decision', 'tree', 'probabilistic', 'inspired', 'theorem', 'simple', 'assumption', 'conditionally', 'independent', 'smoothing', 'unigramsbigramstrigrams', 'vectorizer', 'documents', 'uses', 'function', 'binary', 'dependent', 'variable', 'nature', 'support', 'machines', 'fit', 'returning', 'best', 'hyperplane', 'divides', 'categorizes', 'linearsvc', 'supports', 'kernel', 'faster', 'scale', 'lot', 'better', 'regularization', 'stochastic', 'gradient', 'descent', 'optimized', 'sgd', 'convergence', 'looking', 'minima', 'loss', 'builds', 'classification', 'models', 'form', 'utilizes', 'ifthen', 'rule', 'evaluation', 'accuracy', 'precision', 'macromicro', 'recall', 'f', 'score', 'confusion', 'matrix', 'precisionrecall', 'curve', 'final', 'export', 'trained', 'pipeline', 'joblib', 'tester', 'testeripynb', 'loads', 'add', 'inputs', 'notebook', 'kaggle', 'httpswwwkagglecompinkychauhanfakenewsclassifierusingnltksklearn', 'references', 'httpsscikitlearnorgstableuser_guidehtml', 'httpsmediumcomdatadriveninvestorpythondatasciencegettingstartedtutorialnltkdfedfdd', 'httpsmatplotliborgtutorialsintroductorypyplothtml', 'httpstowardsdatasciencecommachinelearningclassifiersacceb', 'progress', 'report', 'topic', 'tasks', 'completed', 'per', 'recommendation', 'project', 'proposal', 'reviewer', 'cmt', 'changed', 'one', 'suggested', 'acquainting', 'different', 'algorithm', 'details', 'also', 'nltk', 'sklearn', 'pandas', 'libraries', 'work', 'complete', 'matplotlib', 'sentiment', 'analyzer', 'manual', 'runthrough', 'understand', 'observations', 'listed', 'done', 'setup', 'test', 'datasets', 'handle', 'missing', 'values', 'performing', 'tokenization', 'removing', 'stop', 'words', 'lemmatization', 'encode', 'categorical', 'variables', 'needed', 'selection', 'keep', 'relevant', 'map', 'corresponding', 'numbers', 'find', 'word', 'similarities', 'etc', 'design', 'several', 'algorithms', 'naivebayes', 'far', 'preliminary', 'available', 'github', 'repo', 'pending', 'hyperparameter', 'validation', 'assess', 'avoid', 'overfitting', 'compute', 'analyze', 'metrics', 'create', 'apiscript', 'take', 'generate', 'result', 'time', 'permits', 'try', 'evaluate', 'submissions', 'task', 'status', 'depth', 'familiarize', 'new', 'world', 'need', 'researchobtain', 'deeper', 'understanding', 'environment', 'hyperparameters', 'integration', 'output', 'scriptapi', 'prepare', 'presentation', 'facing', 'challenges', 'nothing', 'major', 'relatively', 'good', 'information', 'online', 'helpful', 'thus', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'pinkyc', 'working', 'individually', 'free', 'please', 'give', 'detailed', 'description', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'involved', 'expected', 'outcome', 'going', 'detailstask', 'plan', 'tell', 'apart', 'andor', 'content', 'essentially', 'problem', 'train', 'httpswwwkagglecomhiteshkumarguptafakenewsclassification', 'predict', 'item', 'fakereal', 'evaluated', 'choose', 'becoming', 'nowadays', 'especially', 'wide', 'spread', 'usage', 'easily', 'misused', 'propagate', 'factually', 'incorrect', 'users', 'average', 'person', 'spending', 'many', 'hours', 'day', 'coming', 'across', 'multiple', 'posts', 'tweets', 'becomes', 'segregate', 'actual', 'facts', 'cooked', 'storiesnews', 'tool', 'flag', 'filter', 'solve', 'since', 'come', 'close', 'tone', 'style', 'make', 'sound', 'authentic', 'hence', 'easy', 'divide', 'steps', 'remove', 'stemming', 'tune', 'xgboost', 'toolssystemsdatasets', 'toolssystems', 'leverage', 'numpy', 'comprises', 'subsets', 'csv', 'files', 'comprise', 'columns', 'index', 'counter', 'observation', 'summary', 'body', 'subject', 'political', 'government', 'date', 'class', 'marked', 'userscontributors', 'apipython', 'scriptjupiter', 'accept', 'performances', 'programming', 'language', 'use', 'pythonjupiter', 'justify', 'workload', 'least', 'n', 'total', 'number', 'students', 'may', 'list', 'main', 'estimated', 'cost', 'hour', 'urbana', 'champaign', 'overview', 'objective', 'categorization', 'httpswwwkagglecomcfake', 'newsdata', 'format', 'file', 'containing', 'fields', 'field', 'categorize', 'value', 'various', 'case', 'unigram', 'bagofwordstfidf', 'representation', 'takes', 'provides', 'prediction', 'either', 'categories', 'software', 'implementation', 'checking', 'obvious', 'choices', 'features', 'analyzed', 'vader', 'intensity', 'library', 'handling', 'rows', 'preprocess', 'punctuations', 'length', 'less', 'removal', 'concatenated', 'preprocessed', 'forms', 'vectorizationtransformation', 'bag', 'traininghyperparameter', 'tuningvalidation', 'withwithout', 'vectors', 'unigramngram', 'unigramsngrams', 'see', 'truefalse', 'positivesnegatives', 'select', 'results', 'saveexport', 'specify', 'vectorizerclassifier', 'exporting', 'precisionmacro', 'precisionmicro', 'recallmacro', 'recallmicro', 'f_scoremacro', 'f_scoremicro', 'tfidfunibitrigram', 'tfidfunibigram', 'tfidfunigram', 'tfidfunigramregularization', 'tfunibigramsmoothing', 'tfunigramnosmoothing', 'tfunigramsmoothing', 'tfidfunibitrigramsmoothing', 'tfidfunibigramsmoothing', 'tfidfunigramnosmoothing', 'tfidfunigramsmoothing', 'predicted', 'submitted', 'notebookresults', 'script', 'jupyter', 'installationexecution', 'written', 'python', 'directory', 'contains', 'competition', 'resultspredictions', 'notebooks', 'fakenewsclassifiertrainingipynb', 'coderesults', 'cleanup', 'set', 'evaluationcomparison', 'creationexport', 'pretrainedexported', 'predicts', 'pretrained', 'exported', 'loaded', 'summarized', 'copy', 'generated', 'datatestcsv', 'install', 'pythonmachine', 'regular', 'expression', 'matching', 'itertools', 'iterate', 'analysisrepresentation', 'dataframes', 'natural', 'toolkit', 'visualization', 'load', 'checkout', 'branch', 'launch', 'navigate', 'checked', 'located', 'folder', 'providing', 'fakenewsclassificationtrainingipynb', 'executed', 'stages', 'entailed', 'bulding', 'trainingevaluation', 'note', 'issue', 'around', 'packages', 'stopwords', 'punkt', 'vader_lexicon', 'wordnet', 'download', 'commands', 'nltkdownloadvader_lexicon', 'nltkdownloadpunkt', 'nltkdownloadstopwords', 'nltkdownloadwordnet', 'httpsmediumcomdatadriveninvestorpythondatasciencegettingstartedtutorial', 'nltkdfedfdd', 'reportdocumentation', 'httpsgithubcompinkychauhancourseprojectblobmainprojectreportpdf', 'presentationhttpsgithubcompinkychauhancourseprojectblobmainpresentationpptx']
https://github.com/pipipiii/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/pmanden-uiuc/CourseProject	"course project progress update (11/28/20) pmanden2@illinois.edu objectives objective of my project is to improve the expertsearch system. i will attempt to achieve the following enhancements in this project, as mentioned in the project proposal. 1. given a url, use naive bayes classifier to classify it as a directory page or a non-directory page 2. given a url use naive bayes classifier to classify it as a faculty page or a non-faculty page which tasks have been completed? getting the baseline code to work i have already spent quite a bit of time trying to get the baseline expertsearch code on git to work. after trying different python versions, python library versions, trying on linux and windows and various experiments and debugging, i got it to work on python 2.7 on windows with some code changes. now i have the baseline to do the actual implementation. generating negative samples for directory and faculty pages i have written web scraping code to achieve the following: 1. wrote code to get a list of all universities in us (from here - http://doors.stanford.edu/~sr/universities.html) 2. wrote code to scrape each of the university in the list above, and identified 10 links 3. wrote code to clean up the list to exclude directory/faculty urls, so that it can be used as ""negative"" samples for directory and faculty classes. now i have the positive and negatives samples for the directory and faculty urls. core naive bayes classifier code core code that implements naive bayes classifier has been written. it can accept file names of positive and negative samples, load data, create term document matrix etc. also provides a function for classification. which tasks are pending? 1. need to get all the code to run on one version of python, that i haven't been able to do so far. 2. clean up code, better documentation i also will attempt to do the following (i am not very familiar with javascript/ui, so i may not be able to do this): 1. change the ui so that an additional option can be added to the ui to type in a directory page or a faculty page so that classification results can be seen visually in ui are you facing any challenges? as indicated above, i have managed to get the baseline expertsearch code to work on python 2.7. however, my code (classifier etc.) doesn't run on 2.7 (it runs on 3.8). need to figure out a way to get all code to run on one version. dealing with python versions and libraries continue to be a pain. thoughts on work beyond the scope of this project in order to achieve full automation of identifying and extracting faculty pages, we will first need to automatically identify the directory and faculty pages on a university website, given a root url for the university. this can be done if a list of university websites is available (one such list of universities in us is available here - http://doors.stanford.edu/~sr/universities.html) with full automation of identifying faculty web pages will look as below: 1. for each university a. get list of all urls on the website by: i. finding the sitemap file (sitemap.xml, ...) ii. or by crawling the website and generating a full list of all urls on the website 2. from the list of urls generated above a. create 2 training sets i. one for directory pages classification (using the directory pages listing from coursera?) ii. one for faculty pages classification (using faculty urls provided) 3. use naive bayes classifier to identify urls that are directory pages (if the ultimate objective is to find the faculty pages, there is really no need to find the directory pages, as the sitemap will contain the full faculty pages. and hence this step can be eliminated) 4. use naive bayes classifier to identify urls that are faculty pages 5. scrape each faculty page classified as a faculty page my project implements part of this work. maybe the rest can be done by a future student of this class! references https://sebastianraschka.com/articles/2014_naive_bayes_1.html https://medium.com/analytics-vidhya/naive-bayes-classifier-for-text-classification-556fabaf252b https://towardsdatascience.com/implementing-a-naive-bayes-classifier-for-text-categorization-in-five- steps-f9192cdd54c3 https://www.xml-sitemaps.com/ https://code.google.com/archive/p/sitemap-generators/wikis/sitemapgenerators.wiki http://doors.stanford.edu/~sr/universities.html https://pagedart.com/blog/how-to-find-the-sitemap-of-a-website/ course project proposal prakash manden pmanden2@illinois.edu note: i thought did everything as per the documentation by 10/25 deadline. however, i was not aware that a separate proposal was to be uploaded until i saw some notes on piazza today. instruction are a bit all over the place, and i wasn't aware of the need, otherwise i would have submitted it before the deadline. improving a system - expertsystem search i plan to implement the following project mentioned in the 'course project topic' (text copied as is from the document) the expertsearch system (http://timan102.cs.illinois.edu/expertsearch//) was developed by some previous cs410 students as part of their course project! the system aims to find faculty specializing in the given research areas. the underlying data and ranker currently comes from the mp2 submissions of the previous course offering. you can read more about it here (sections 3.6 and 4: project are especially relevant). the code is available here. below are some ideas to improve and expand this system. you may choose to integrate your code with the existing system, or borrow some ideas from it, or build your own systems/algorithms from scratch. automatically crawling faculty webpages recall that you developed scrapers for faculty web-pages in mp2.1, which, in general, can be a time- consuming task. so, the question is can we automate this process? some challenges include: * identifying faculty directory pages: first, we need to identify the pages from where faculty web- pages can be mined. in mp2.1, we used faculty directory pages as the starting point to find faculty webpages. so, given a university website, can we automatically identify the directory pages? this can be posed as a classification task, i.e. classify a url into a directory page vs. non-directory page. we have a huge resource of directory page urls available in the sign-up sheet. these can be the ""positive"" examples. you can get a list of some random urls online or crawl some other pages to get urls(e.g. other urls on the university websites, product websites, news sites,etc.). these would be the ""negative"" examples. * identifying faculty webpage urls: next, we need to extract the faculty webpages from the directory pages. this can again be posed as a classification task. given a url, can we identify whether it is a faculty webpage or not? we have a huge resource of faculty webpage urls (available under mp2.3 on coursera). these would be the ""positive"" examples. you can get a list of some random urls online or crawl some other pages to get urls (e.g. other urls on the university websites, product websites, news sites, etc.) to get the ""negative"" labels. improving a system - expertsystem search cs410 course project, fall 2020 pmanden2@illinois.edu objectives from improving a system - expertsystem search 1 2 objectives  given a url classify it as directory vs non-directory page  given a url classify it as faculty or non-faculty page [this project was done by myself as a one person team] naive bayes classifier credit - https://sebastianraschka.com/articles/2014_naive_bayes_1.html text representation - bag of words implementation * 2 classifiers built * directory link classifier * faculty link classifier * directory link classifier training data * positive samples collected from mp2.1 signup spreadsheet (as suggested) * 900 samples are available (in file 'directory-positives.txt' in source code) * negative samples * a scraper utility was written to collect links from university webpages, which excluded all links with keywords such as 'directory', 'staff' etc. to ensure negative samples * 6592 samples are available (in file 'directory-negatives.txt' in source code) implementation * faculty link classifier training data * positive samples * faculty pages from mp2.3 data on coursera was used as suggested * 16492 samples are available (in file 'faculty-pages-positives.txt') * negative samples * the same scraper was used to generate links from university websites. links with keywords such as 'faculty', 'staff' are removed to ensure negative links * 6592 samples available (in file 'faculty-pages-negatives.txt') source code - (core file) * classifier.py * implements naive bayes classifier in 'class naive_bayes_classifier' * input * name of file that contains positive samples * name of file that contains negative samples * number of samples to be used for training * 'initialize_classifier' method * loads the samples from the specified files * calculates and saves term document matrix, term frequency, no of terms, total counts for each terms for both positive and negative samples * 'classify' method * accepts a url * calculates probability of the words in url with laplace smoothing for both positive and negative classes * returns true if the positive class probability is > negative class probability * it can be run to test the code independently * to test, run - 'python classifier.py', tests model accuracy and shows results model accuracy * directory classifier (with 800 samples, 100 test data) * precision 0.96 * recall 0.94 * f1 score 0.94 * faculty classifier (with 6000 samples, 300 test data) * precision 0.99% * recall 0.98 * f1 score 0.99 source code - utilities * scraper.py : scrapes all universities listed at * http://doors.stanford.edu/~sr/universities.html * 1,088 universities available * identify 10 links from the home page of each university * removes all links with key words that identify directory pages, such as 'directory', etc. * removes all links with key words that identify faculty pages, such as 'faculty' etc. * generates a list that is used as negative samples for both classifiers * run - python scraper.py * will take 3-4 hours to run. (change 'no_universities_to_scrape' line 137 to test on limited number of universities) source code - ui, data files * expertsearch app ui was modified to test urls * ui changes are only for testing & and not relevant to improving the system! * templates/index.html * modified to support a new pull down menu * static/index.js * java script code changes to interface with backend * data files * directory_positives.txt (directory positive samples) * directory_negatives.txt (directory negative samples) * faculty_positives.txt (faculty positive samples) * faculty_negatives.txt (faculty negative samples) running the application * to run expertsearch app run * python server.py * open a browser and point to http://localhost:8095/ * demo! - play projectdemo.mp4 courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['course', 'project', 'progress', 'update', 'pmandenillinoisedu', 'objectives', 'objective', 'improve', 'expertsearch', 'system', 'attempt', 'achieve', 'following', 'enhancements', 'mentioned', 'proposal', 'given', 'url', 'use', 'naive', 'bayes', 'classifier', 'classify', 'directory', 'page', 'nondirectory', 'faculty', 'nonfaculty', 'tasks', 'completed', 'getting', 'baseline', 'code', 'work', 'already', 'spent', 'quite', 'bit', 'time', 'trying', 'get', 'git', 'different', 'python', 'versions', 'library', 'linux', 'windows', 'various', 'experiments', 'debugging', 'got', 'changes', 'actual', 'implementation', 'generating', 'negative', 'samples', 'pages', 'written', 'web', 'scraping', 'wrote', 'list', 'universities', 'us', 'httpdoorsstanfordedusruniversitieshtml', 'scrape', 'university', 'identified', 'links', 'clean', 'exclude', 'directoryfaculty', 'urls', 'used', 'classes', 'positive', 'negatives', 'core', 'implements', 'accept', 'file', 'names', 'load', 'data', 'create', 'term', 'document', 'matrix', 'etc', 'also', 'provides', 'function', 'classification', 'pending', 'need', 'run', 'one', 'version', 'havent', 'able', 'far', 'better', 'documentation', 'familiar', 'javascriptui', 'may', 'change', 'ui', 'additional', 'option', 'added', 'type', 'results', 'seen', 'visually', 'facing', 'challenges', 'indicated', 'managed', 'however', 'doesnt', 'runs', 'figure', 'way', 'dealing', 'libraries', 'continue', 'pain', 'thoughts', 'beyond', 'scope', 'order', 'full', 'automation', 'identifying', 'extracting', 'first', 'automatically', 'identify', 'website', 'root', 'done', 'websites', 'available', 'look', 'finding', 'sitemap', 'sitemapxml', 'ii', 'crawling', 'generated', 'training', 'sets', 'using', 'listing', 'coursera', 'provided', 'ultimate', 'find', 'really', 'contain', 'hence', 'step', 'eliminated', 'classified', 'part', 'maybe', 'rest', 'future', 'student', 'class', 'references', 'httpssebastianraschkacomarticles_naive_bayes_html', 'httpsmediumcomanalyticsvidhyanaivebayesclassifierfortextclassificationfabafb', 'httpstowardsdatasciencecomimplementinganaivebayesclassifierfortextcategorizationinfive', 'stepsfcddc', 'httpswwwxmlsitemapscom', 'httpscodegooglecomarchivepsitemapgeneratorswikissitemapgeneratorswiki', 'httpspagedartcombloghowtofindthesitemapofawebsite', 'prakash', 'manden', 'note', 'thought', 'everything', 'per', 'deadline', 'aware', 'separate', 'uploaded', 'saw', 'notes', 'piazza', 'today', 'instruction', 'place', 'wasnt', 'otherwise', 'would', 'submitted', 'improving', 'expertsystem', 'search', 'plan', 'implement', 'topic', 'text', 'copied', 'httptimancsillinoiseduexpertsearch', 'developed', 'previous', 'cs', 'students', 'aims', 'specializing', 'research', 'areas', 'underlying', 'ranker', 'currently', 'comes', 'mp', 'submissions', 'offering', 'read', 'sections', 'especially', 'relevant', 'ideas', 'expand', 'choose', 'integrate', 'existing', 'borrow', 'build', 'systemsalgorithms', 'scratch', 'webpages', 'recall', 'scrapers', 'general', 'consuming', 'task', 'question', 'automate', 'process', 'include', 'mined', 'starting', 'point', 'posed', 'ie', 'vs', 'huge', 'resource', 'signup', 'sheet', 'examples', 'random', 'online', 'crawl', 'urlseg', 'product', 'news', 'sitesetc', 'webpage', 'next', 'extract', 'whether', 'eg', 'sites', 'labels', 'fall', 'person', 'team', 'credit', 'representation', 'bag', 'words', 'classifiers', 'built', 'link', 'collected', 'spreadsheet', 'suggested', 'directorypositivestxt', 'source', 'scraper', 'utility', 'collect', 'excluded', 'keywords', 'staff', 'ensure', 'directorynegativestxt', 'facultypagespositivestxt', 'generate', 'removed', 'facultypagesnegativestxt', 'classifierpy', 'naive_bayes_classifier', 'input', 'name', 'contains', 'number', 'initialize_classifier', 'method', 'loads', 'specified', 'files', 'calculates', 'saves', 'frequency', 'terms', 'total', 'counts', 'accepts', 'probability', 'laplace', 'smoothing', 'returns', 'true', 'test', 'independently', 'tests', 'model', 'accuracy', 'shows', 'precision', 'f', 'score', 'utilities', 'scraperpy', 'scrapes', 'listed', 'home', 'removes', 'key', 'generates', 'take', 'hours', 'no_universities_to_scrape', 'line', 'limited', 'app', 'modified', 'testing', 'templatesindexhtml', 'support', 'new', 'pull', 'menu', 'staticindexjs', 'java', 'script', 'interface', 'backend', 'directory_positivestxt', 'directory_negativestxt', 'faculty_positivestxt', 'faculty_negativestxt', 'running', 'application', 'serverpy', 'open', 'browser', 'httplocalhost', 'demo', 'play', 'projectdemomp', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'microsoft', 'cmt', 'detailed', 'instructions', 'week', 'overviewweek', 'activities']
https://github.com/pritomsaha/CourseProject	"documentation reproducing the mining causal topics in text data: iterative topic modeling with time series feedback darius nguyen pritom saha akash trisha das 1) an overview of the function of the code : many applications need textual topics to be studied together with external time series. this paper proposes a general text mining system for the discovery of this type of causal themes from the text. we implemented the algorithm presented in the paper in python. our implementation combines a given probabilistic topic model with time-series causal analysis to discover topics that are both coherent semantically and correlated with time-series data. as described in the paper, we iteratively refine the discovered topics to increase the correlation with the time series. time series data provides feedback at each iteration by imposing prior distributions on parameters. in our experiment, we examine the 2000 u.s. presidential election campaign. the input text data is from new york times articles from may through october of 2000. as a non-textual time-series input, we use prices from the iowa electronic markets 2000 presidential winner-takes-all market. we also experimented with stock time-series data (aamrq vs. aapl). our implementation can determine causal topics efficiently. we used plsa as our topic modeling method. granger test is used to find out a set of candidate causal topics with lags. pearson correlation is used to find out word-level causality in our implementation. though the authors of the paper used r programming language to do the granger causality test, we did it in python to make the code compact and manageable. we used only one programming language to complete the full implementation. 2) documentation of how the software is implemented: the main parts of our code are as follows: 1. data preparation: we used text data from the 2000 u.s. presidential election campaign. the input text data is from the new york times articles from may through october of 2000. we filter them for keywords ""bush"" and ""gore,"" and use paragraphs mentioning one or both words. also, we scrapped time-series data from [2][3][4]. we used the ""normalized"" price of one candidate as a forecast probability of the election outcome: (republic avgprice)/(republic avgprice + democratic avgprice). other data cleansing steps were also taken. we also experimented with the high and low prices of each party. 2. generating topics: we used plsa(probabilistic latent semantic analysis) topic modeling method to find out representative topics from the text data. this uses the expectation-maximization (em) algorithm. we used a plsa implementation package from [1]. this is many times faster than our previous implementation in mp3. that's why we used this implementation in our program. 3. causal analysis with time series data: we used the granger test for measuring causality. we utilized the python library grangercausalitytests from statsmodels.tsa.stattools for the granger test. the output of this part gives significant causal topics with significance >95%. also, each topic is associated with a corresponding time lag which can describe the causality of the corresponding topic the most. 4. word level causality: we used the pearson correlation test for measuring the word level causality in our implementation. each significant topic determined by the granger test is passed through this next level for finding word-level causality. within each topic, the words with significant positive correlation and negative correlations are separated and grouped into two distributions. these distributions work as priors in the next iteration. 5. generating topic priors: we generated topic priors for the causal topics and incorporated them into the next iteration plsa. 3) usage documentation: our program was built in a jupyter notebook and ran on google colab. please see the comments we added inline for instructions on running specific blocks of code. the code blocks can be run sequentially from beginning to end to see the results. please find the jupyter notebook on our github repository: (https://github.com/pritomsaha/courseproject) 4) participation: netid participation huy2 * logistics: * create project in cmt & added project meta * group coordination/planning * contribute to proposal/progress report/documentation/presentation * project work: * contribute to paper investigation, determining implementation steps, finding solution to roadblocks * implemented stock time series cleansing and processing * implement word-level causality modeling * implement topic prior generation paksash2 * logistics: * create the project on github and upload the project proposal and project progress reports. * contribute to proposal/progress report/documentation/presentation * project work: * contribute to paper investigation, determining implementation steps, finding solution to roadblocks * extract the appropriate text data from new york time corpus [5]. * preprocess and cleaning text data so that it can be used to train plsa model. * finding out a working fast plsa model [1] and making necessary changes to the implementation of the plsa model so that it is appropriate for the topic modeling in the paper. * making room for incorporating topic prior feedback to the plsa model. * implementing the code for calculating topic coverage that is required in finding causal topics. * combining all the modules (topic modeling, topic-level causality, word-level causality) to make it workable for running. trishad2 * logistics * group coordination/planning * contributed to the proposal, progress report, presentation, and documentation references: 1. https://github.com/henryre/numba-plsa 2. https://iemweb.biz.uiowa.edu/pricehistory/pricehistory_selectcontract.cfm?market_i d=29 3. https://thestockmarketwatch.com/stock/stock-data.aspx?symbol=aamrq&action=sh owhistory&page=1&perpage=25&startmonth=4&startday=1&startyear=2000&endm onth=9&endday=30&endyear=2020&enddatelite=11%2f15%2f2020 4. https://finance.yahoo.com/quote/aapl/history/ 5. http://www.ldc.upenn.edu/catalog/catalogentry.jsp?catalogid=ldc2008t19 * project work: * contributed to the paper investigation, determining implementation steps, finding the solution to roadblocks * stock time series cleansing and processing * scraped time-series data(iowa electronic markets (iem)3 2000 presidential winner-takes-all market, aamrq, aapl stock price data) from websites [2][3][4] * implemented topic-level causality using granger test * worked on hyperparameter tuning * wrote the documentation and created the powerpoint presentation * fixed bugs in code 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. ans: team members: name netid darius nguyen (captain) huy2 pritom saha akash pakash2 trisha das trishad2 2. which paper have you chosen? ans: mining causal topics in text data: iterative topic modeling with time series feedback 3. which programming language do you plan to use? ans: python 4. can you obtain the datasets used in the paper for evaluation? ans: we are trying to get the dataset. 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? cs 410 - final project progress report team pdt 1. steps completed: a. dataset collection: both text and time series datasets are collected. b. text data preprocessing: we have preprocessed text data for using it into the plsa algorithm. c. topic modeling: we have applied the plsa algorithm to find topics from text data. d. causal topic filtering: we have applied the granger test for finding significant casual topics based on time-series data. e. word-level causality modeling: we have implemented the part for filtering causally related words (positive and negative) for each causally significant topic. 2. steps outstanding: a. topic prior generation b. apply topic prior feedback to topic modeling 3. challenges: a. we are facing some problems in understanding which distribution( negative or positive or both) for each causally significant topic to apply as prior to topic modeling. name netid darius nguyen (captain) huy2 pritom saha akash pakash2 trisha das trishad2 courseproject:- reproducing the mining causal topics in text data: iterative topic modeling with time series feedback team members darius nguyen pritom saha akash trisha das our program was built in a jupyter notebook and ran on google colab. there are two colab file: 1. corpus processing: it is used to get text corpus and preprocessing the text. 2. itmtf: this is the main colab where the itmtf model is run sequencially. please see the comments we added inline for instructions on running specific blocks of code. the code blocks can be run sequentially from beginning to end to see the results. please read the documentation.pdf for more details. presentation https://illinois.zoom.us/rec/play/i-3hi-q_f39vhivyxzjbjuzqniwkxf-3-qz1lo8t3vftqgsmi5hjugkqaurgabcrnnummcwdhfhfh5pk.uisg0grcsaier6gk?continuemode=true&_x_zm_rtaid=dkz7zuccqwy8brczypwxjq.1607897144160.874f474aff50d1bfcba2cf282ecb81a9&_x_zm_rhtaid=454"	['documentation', 'reproducing', 'mining', 'causal', 'topics', 'text', 'data', 'iterative', 'topic', 'modeling', 'time', 'series', 'feedback', 'darius', 'nguyen', 'pritom', 'saha', 'akash', 'trisha', 'das', 'overview', 'function', 'code', 'many', 'applications', 'need', 'textual', 'studied', 'together', 'external', 'paper', 'proposes', 'general', 'system', 'discovery', 'type', 'themes', 'implemented', 'algorithm', 'presented', 'python', 'implementation', 'combines', 'given', 'probabilistic', 'model', 'timeseries', 'analysis', 'discover', 'coherent', 'semantically', 'correlated', 'described', 'iteratively', 'refine', 'discovered', 'increase', 'correlation', 'provides', 'iteration', 'imposing', 'prior', 'distributions', 'parameters', 'experiment', 'examine', 'us', 'presidential', 'election', 'campaign', 'input', 'new', 'york', 'times', 'articles', 'may', 'october', 'nontextual', 'use', 'prices', 'iowa', 'electronic', 'markets', 'winnertakesall', 'market', 'also', 'experimented', 'stock', 'aamrq', 'vs', 'aapl', 'determine', 'efficiently', 'used', 'plsa', 'method', 'granger', 'test', 'find', 'set', 'candidate', 'lags', 'pearson', 'wordlevel', 'causality', 'though', 'authors', 'r', 'programming', 'language', 'make', 'compact', 'manageable', 'one', 'complete', 'full', 'software', 'main', 'parts', 'follows', 'preparation', 'filter', 'keywords', 'bush', 'gore', 'paragraphs', 'mentioning', 'words', 'scrapped', 'normalized', 'price', 'forecast', 'probability', 'outcome', 'republic', 'avgpricerepublic', 'avgprice', 'democratic', 'cleansing', 'steps', 'taken', 'high', 'low', 'party', 'generating', 'plsaprobabilistic', 'latent', 'semantic', 'representative', 'uses', 'expectationmaximization', 'em', 'package', 'faster', 'previous', 'mp', 'thats', 'program', 'measuring', 'utilized', 'library', 'grangercausalitytests', 'statsmodelstsastattools', 'output', 'part', 'gives', 'significant', 'significance', 'associated', 'corresponding', 'lag', 'describe', 'word', 'level', 'determined', 'passed', 'next', 'finding', 'within', 'positive', 'negative', 'correlations', 'separated', 'grouped', 'two', 'work', 'priors', 'generated', 'incorporated', 'usage', 'built', 'jupyter', 'notebook', 'ran', 'google', 'colab', 'please', 'see', 'comments', 'added', 'inline', 'instructions', 'running', 'specific', 'blocks', 'run', 'sequentially', 'beginning', 'end', 'results', 'github', 'repository', 'httpsgithubcompritomsahacourseproject', 'participation', 'netid', 'huy', 'logistics', 'create', 'project', 'cmt', 'meta', 'group', 'coordinationplanning', 'contribute', 'proposalprogress', 'reportdocumentationpresentation', 'investigation', 'determining', 'solution', 'roadblocks', 'processing', 'implement', 'generation', 'paksash', 'upload', 'proposal', 'progress', 'reports', 'extract', 'appropriate', 'corpus', 'preprocess', 'cleaning', 'train', 'working', 'fast', 'making', 'necessary', 'changes', 'room', 'incorporating', 'implementing', 'calculating', 'coverage', 'required', 'combining', 'modules', 'topiclevel', 'workable', 'trishad', 'contributed', 'report', 'presentation', 'references', 'httpsgithubcomhenryrenumbaplsa', 'httpsiemwebbizuiowaedupricehistorypricehistory_selectcontractcfmmarket_i', 'httpsthestockmarketwatchcomstockstockdataaspxsymbolaamrqactionsh', 'owhistorypageperpagestartmonthstartdaystartyearendm', 'onthenddayendyearenddateliteff', 'httpsfinanceyahoocomquoteaaplhistory', 'httpwwwldcupenneducatalogcatalogentryjspcatalogidldct', 'scraped', 'dataiowa', 'iem', 'websites', 'using', 'worked', 'hyperparameter', 'tuning', 'wrote', 'created', 'powerpoint', 'fixed', 'bugs', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'ans', 'name', 'pakash', 'chosen', 'plan', 'obtain', 'datasets', 'evaluation', 'trying', 'get', 'dataset', 'answer', 'question', 'similar', 'eg', 'recent', 'version', 'another', 'nature', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'introduced', 'cs', 'final', 'pdt', 'completed', 'collection', 'collected', 'b', 'preprocessing', 'preprocessed', 'c', 'applied', 'filtering', 'casual', 'based', 'e', 'causally', 'related', 'outstanding', 'apply', 'challenges', 'facing', 'problems', 'understanding', 'distribution', 'courseproject', 'file', 'itmtf', 'sequencially', 'read', 'documentationpdf', 'details', 'httpsillinoiszoomusrecplayihiq_fvhivyxzjbjuzqniwkxfqzlotvftqgsmihjugkqaurgabcrnnummcwdhfhfhpkuisggrcsaiergkcontinuemodetrue_x_zm_rtaiddkzzuccqwybrczypwxjqfaffdbfcbacfecba_x_zm_rhtaid']
https://github.com/pshreyareddy/CourseProject	"1 project documentation report cs 410 text information systems fall 2020 text classification competition twitter sarcasm detection team member email shreya reddy peesary peesary2@illinois.edu 2 introduction recognizing sarcasm in text is an important task for natural language processing to avoid misinterpretation of sarcastic statements as literal statements. the use of sarcasm is prevalent across all social media, micro-blogging and e-commerce platforms. sarcasm detection is imperative for accurate sentiment analysis and opinion mining. it could contribute to enhanced automated feedback systems in the context of customer-based sites. twitter is a micro-blogging platform extensively used by people to express thoughts, reviews, discussions on current events and convey information in the form of short texts. twitter data provides a diverse corpus for sentences which implicitly contain sarcasm. the aim of this project is to classify the tweets in the given dataset as sarcasm or not_sarcasm and beat the base line score of f1: 0.723. dataset format train.jsonl: shape: 5000 rows x 3 columns train dataset is balanced with 2500 sarcasm and 2500 not_sarcasm samples. test.jsonl: shape: 1800 rows x 3 columns column definitions: * response : the tweet to be classified * context : the conversation context of the response . the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. * label : sarcasm or not_sarcasm * id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , 3 you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). system design * the code for this project was done using google collaboratory (using gpu run time type). * the source code can be directly run from collaboratory using the link by executing the cells step by step from the jupyter notebook link below: https://colab.research.google.com/github/pshreyareddy/courseproject/blob/main/finalsu bmissionforbert.ipynb 1. click on open in collab button in finalsubmissionforbert.ipynb 2. sign in to collab 3. go to runtime -- change runtime type -- select hardware accelerator as gpu packages used * python 3.6.9 * pandas: python data analysis library. * numpy: python library for working with arrays. * re: this is used for regular expression matching. * string: for common string operations * sklearn: python machine learning library * tensorflow2.1.0: an open source software library for high performance numerical computation * keras: a deep learning api written in python, running on top of the machine learning platform tensorflow. * tensorflow hub: a repository of trained machine learning models. data preprocessing: * converted the context column into comma separated string. * removed @user from response and context columns * removed <url> from response and context columns. * removed digits (0-9) * removed special characters ,white space characters and allowing only alphanumeric characters. 4 * converted the response and context columns to lowercase. bert model: in order to beat the base line score used state of the art language models in bert (bidirectional encoder representations from transformers). bert relies on a transformer (the attention mechanism that learns contextual relationships between words in a text). a basic transformer consists of an encoder to read the text input and a decoder to produce a prediction for the task. since bert's goal is to generate a language representation model, it only needs the encoder part. the input to the encoder for bert is a sequence of tokens, which are first converted into vectors and then processed in the neural network. but before processing can start, bert needs the input to be massaged and decorated with some extra metadata: 1. token embeddings: a [cls] token is added to the input word tokens at the beginning of the first sentence and a [sep] token is inserted at the end of each sentence. 2. segment embeddings: a marker indicating sentence a or sentence b is added to each token. this allows the encoder to distinguish between sentences. 3. positional embeddings: a positional embedding is added to each token to indicate its position in the sentence. process : * added a keras bert layer using bert uncased l-12_h-768_a-12. 5 * tokenization approach using bert full tokenizer followed as per standard usage in tensor flow hub (https://tfhub.dev/tensorflow/bert_en_uncased_l-12_h-768_a-12/1). * define an encode function to separate text into tokens, masks and segments * split the train data set into training and validation * apply the encode function on both response and context. 6 * build model with inputs as an array of context and response input word ids, mask and segment ids and output layer is a simple neural network with 1 neuron and activation function : sigmoid which is used for classification. * hyperparameters: optimizer : adam learning rate : 1e-6 , loss : binary cross entropy 7 * model layout : * training the model : train_input (array of train_context and train_reponse with in-turn contains input word ids,mask and segment ids ) val_input (array of val_context and val_reponse with in-turn contains input word ids,mask and segment ids ) used epochs = 3 and batch_size = 3 process takes around 30-40 min in collaboratory using gpu. * predictions: predictions are saved in answer.txt with id and target label. 8 results: got an f1 score of 0.7402464065708418 using this approach beating the base line score. other approaches : * same bert process with response only input without context.(f1score: 0.6905005107252298 * simple lstm with stanford glove embeddings (f1 score : 0.6645126548196015) 9 references: * documentation of bert on tfhub * bert: pre-training of deep bidirectional transformers for language understanding * https://www.analyticsvidhya.com/blog/2020/10/simple-text-multi-classification-task- using-keras-bert/ * https://datascience.stackexchange.com/questions/45165/how-to-get-accuracy-f1-precision- and-recall-for-a-keras-model 10 project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. shreya reddy peesary (netid : peesary2) (1-person team) 2. which competition do you plan to join? text classification competition 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods i have some basic hands-on and working knowledge on artificial neural networks namely cnn,rnn,lstm,grus using tensorflow and keras. i'm willing to learn more recent state of the art techniques like google research's bert etc and experiment with these techniques. 4. which programming language do you plan to use? python project progress report cs 410 text information systems fall 2020 completed tasks * became familiar with bert and its usage for text classification problems. * worked on cleaning of tweets by removing urls , emojis, punctuations, special characters etc. which may not help in classification. * implemented an approach using bert in google collab using tensor flow. * fine-tuned the model and was able to beat the baseline score. pending tasks * source code refactoring, optimization and final submission. * documentation. * tutorial presentation. challenges/issues no current issues. initially, faced issues with setup and computing power with my current laptop to use tensor flow for running bert. so, started working on google collab for coding and running and was successful in making submissions beating baseline score. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities project final documentation software project demo video link text classification competition: twitter sarcasm detection (https://github.com/cs410fall2020/classificationcompetition) dataset format: each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | for test, we've provided you the response and the context. we also provide the id (i.e., identifier) to report the results. submission instructions : please add a comma separated file named answer.txt containing the predictions on the test dataset. the file should have no headers and have exactly 1800 rows. each row must have the sample id and the predicted label. for example: twitter_1,sarcasm twitter_2,not_sarcasm ..."	['project', 'documentation', 'report', 'cs', 'text', 'information', 'systems', 'fall', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'team', 'member', 'email', 'shreya', 'reddy', 'peesary', 'peesaryillinoisedu', 'introduction', 'recognizing', 'important', 'task', 'natural', 'language', 'processing', 'avoid', 'misinterpretation', 'sarcastic', 'statements', 'literal', 'use', 'prevalent', 'across', 'social', 'media', 'microblogging', 'ecommerce', 'platforms', 'imperative', 'accurate', 'sentiment', 'analysis', 'opinion', 'mining', 'could', 'contribute', 'enhanced', 'automated', 'feedback', 'context', 'customerbased', 'sites', 'platform', 'extensively', 'used', 'people', 'express', 'thoughts', 'reviews', 'discussions', 'current', 'events', 'convey', 'form', 'short', 'texts', 'data', 'provides', 'diverse', 'corpus', 'sentences', 'implicitly', 'contain', 'aim', 'classify', 'tweets', 'given', 'dataset', 'not_sarcasm', 'beat', 'base', 'line', 'score', 'f', 'format', 'trainjsonl', 'shape', 'rows', 'x', 'columns', 'train', 'balanced', 'samples', 'testjsonl', 'column', 'definitions', 'response', 'tweet', 'classified', 'conversation', 'ordered', 'list', 'dialogue', 'ie', 'contains', 'three', 'elements', 'c', 'order', 'reply', 'label', 'id', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'test', 'instance', 'following', 'training', 'example', 'user', 'dont', 'get', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'instead', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'using', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'immediate', 'goal', 'predict', 'optionally', 'full', 'system', 'design', 'code', 'done', 'google', 'collaboratory', 'gpu', 'run', 'time', 'type', 'source', 'directly', 'link', 'executing', 'cells', 'step', 'jupyter', 'notebook', 'httpscolabresearchgooglecomgithubpshreyareddycourseprojectblobmainfinalsu', 'bmissionforbertipynb', 'click', 'open', 'collab', 'button', 'finalsubmissionforbertipynb', 'sign', 'go', 'runtime', 'change', 'select', 'hardware', 'accelerator', 'packages', 'python', 'pandas', 'library', 'numpy', 'working', 'arrays', 'regular', 'expression', 'matching', 'common', 'operations', 'sklearn', 'machine', 'learning', 'tensorflow', 'software', 'high', 'performance', 'numerical', 'computation', 'keras', 'deep', 'api', 'written', 'running', 'top', 'hub', 'repository', 'trained', 'models', 'preprocessing', 'converted', 'comma', 'separated', 'removed', 'url', 'digits', 'special', 'characters', 'white', 'space', 'allowing', 'alphanumeric', 'lowercase', 'bert', 'model', 'state', 'art', 'bidirectional', 'encoder', 'representations', 'transformers', 'relies', 'transformer', 'attention', 'mechanism', 'learns', 'contextual', 'relationships', 'words', 'basic', 'consists', 'read', 'input', 'decoder', 'produce', 'prediction', 'since', 'berts', 'generate', 'representation', 'needs', 'part', 'sequence', 'tokens', 'first', 'vectors', 'processed', 'neural', 'network', 'start', 'massaged', 'decorated', 'extra', 'metadata', 'token', 'embeddings', 'cls', 'added', 'word', 'beginning', 'sentence', 'sep', 'inserted', 'end', 'segment', 'marker', 'indicating', 'b', 'allows', 'distinguish', 'positional', 'embedding', 'indicate', 'position', 'process', 'layer', 'uncased', 'l_h_a', 'tokenization', 'approach', 'tokenizer', 'followed', 'per', 'standard', 'usage', 'tensor', 'flow', 'httpstfhubdevtensorflowbert_en_uncased_l_h_a', 'define', 'encode', 'function', 'separate', 'masks', 'segments', 'split', 'set', 'validation', 'apply', 'build', 'inputs', 'array', 'ids', 'mask', 'output', 'simple', 'neuron', 'activation', 'sigmoid', 'hyperparameters', 'optimizer', 'adam', 'rate', 'e', 'loss', 'binary', 'cross', 'entropy', 'layout', 'train_input', 'train_context', 'train_reponse', 'inturn', 'idsmask', 'val_input', 'val_context', 'val_reponse', 'epochs', 'batch_size', 'takes', 'around', 'min', 'predictions', 'saved', 'answertxt', 'target', 'results', 'got', 'beating', 'approaches', 'without', 'contextfscore', 'lstm', 'stanford', 'glove', 'references', 'tfhub', 'pretraining', 'understanding', 'httpswwwanalyticsvidhyacomblogsimpletextmulticlassificationtask', 'usingkerasbert', 'httpsdatasciencestackexchangecomquestionshowtogetaccuracyfprecision', 'andrecallforakerasmodel', 'proposal', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'netid', 'person', 'plan', 'join', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'like', 'query', 'expansion', 'rank', 'fusion', 'etc', 'name', 'concrete', 'tools', 'may', 'heard', 'classifiers', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'handson', 'knowledge', 'artificial', 'networks', 'namely', 'cnnrnnlstmgrus', 'im', 'willing', 'recent', 'techniques', 'researchs', 'experiment', 'programming', 'progress', 'completed', 'tasks', 'became', 'familiar', 'problems', 'worked', 'cleaning', 'removing', 'urls', 'emojis', 'punctuations', 'help', 'implemented', 'finetuned', 'able', 'baseline', 'pending', 'refactoring', 'optimization', 'final', 'submission', 'tutorial', 'presentation', 'challengesissues', 'issues', 'initially', 'faced', 'setup', 'computing', 'power', 'laptop', 'started', 'coding', 'successful', 'courseproject', 'please', 'fork', 'paste', 'github', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities', 'demo', 'video', 'httpsgithubcomcsfallclassificationcompetition', 'json', 'object', 'fields', 'note', 'size', 'statistics', 'weve', 'provided', 'also', 'provide', 'add', 'file', 'containing', 'headers', 'exactly', 'row', 'must', 'predicted', 'twitter_sarcasm', 'twitter_not_sarcasm']
https://github.com/purecod3/CourseProject	"progress report ed pureza (epureza2@illinois.edu) dansi qian (dansiq2@illinois.edu) joe everton (everton2@illinois.edu) change of scope we initially planned to reproduce latent aspect rating analysis without aspect keyword supervision. we read through the paper, discussed among ourselves, and documented our understandings here. we had an hour-long conversation with prof. chengxiang zhai (one of the authors of the paper) and email correspondence with prof. hongning want (the main author), and eventually decided that none of us had the substantial math background required to reproduce the paper. instead, we decided to reproduce latent dirichlet allocation (https://dl.acm.org/doi/pdf/10.5555/944919.944937 and http://times.cs.uiuc.edu/course/510f18/notes/lda-survey.pdf), which was referenced by the original paper and also described briefly in week 9 of the course. which tasks have we completed? * we have read both papers for latent dirichlet allocation (lda) and documented our understanding here. there is no analytical solution to the e-m algorithm in lda. instead, the optimization can be done using variational inference or gibbs sampling. * we have implemented lda using gibbs sampling (an initial version without learning rate, and a subsequent version that applies a learning rate across iterations). * we have implemented pre-processing for text-classification datasets, the lda model training on term frequencies, the inference of new documents using trained model (note that lda is generative), and compared the classification accuracy of support vector machines (svm) using term frequencies and using topic weights. there were no significant differences in accuracy between the two for the text message spam filter dataset (short documents) or for the fake news detection dataset (long documents). which tasks are pending? * we are working on the variational inference version of lda (https://github.com/purecod3/courseproject/blob/main/lda_var_inf.py). * we plan to compare the accuracy of svm classification using the variational inference version of lda with the baseline (svm using term frequencies). what challenges do we face? * there do not seem to be canonical ways to implement either the variational inference or the gibbs sampling for lda. there are some resources on implementation details but they are not necessarily correct or perform well. as a result, we need to compare multiple resources based on our understanding of the algorithm, and potential implement multiple versions and compare their results. * there is a significant amount of hyperparameter tuning (number of topics, learning rate (and decay) for gibbs sampling, stop criterion definition and threshold for the variational inference, etc.). there is very little literature about how the hyperparameters should be set or tuned for lda in practice so it would require trail and errors on our side. project proposal: reproduce latent aspect rating analysis without aspect keyword supervision team members: * ed pureza epureza2@illinois.edu (team leader) * dansi qian dansiq2@illinois.edu * joe everton everton2@illinois.edu paper chosen: * latent aspect rating analysis without aspect keyword supervision * latent aspect identification (without supervision) * latent aspect rating * latent aspect weighting * laram vs. existing solutions / lara (paper 23) or newer for reference / comparison programming language * python notable resources / libraries * numpy dataset for evaluation * original dataset used in the paper: http://times.cs.uiuc.edu/~wang296/data/ * tripadvisor * amazon rough timeline 11/01/2020 kickoff 11/22/2020 mvp ready 11/29/2020 code complete and ready for tuning if necessary 12/06/2020 code complete and final results ready 12/13/2020 final report ready topic mining with lda (and laram) cs 410 text information systems course project december 2020 authors: dan qian (dansiq2), joe everton (everton2), ed pureza (epureza2) cmt id: 84 introduction 1 latent aspect rating analysis without aspect keyword supervision 2 latent dirichlet allocation 2 objective 3 data 3 evaluation criteria 3 tools 4 methods 4 variational inference 5 gibbs sampling 5 experiment results 6 conclusion 8 successes 9 opportunities 9 references 9 appendix 10 lda vs pca 10 introduction our team originally selected the research paper titled ""latent aspect rating analysis without aspect keyword supervision"" by honging wang, yue lu, and chengxiang zhai. after spending a considerable amount of time on attempting to understand the implementation details, we decided there were too many obstacles to continue recreating the research paper's results. taking into consideration professor zhai's counsel, we decided to switch our topic to latent dirichlet allocation. our work is based on ""latent dirichlet allocation"" by david blei, andrew ng, and michael jordan [3]. latent aspect rating analysis without aspect keyword supervision when a review is submitted for a product, it can be assumed that the reviewer had different aspects of the product in mind and a priority on those aspects that led to a given overall rating. the objective of latent aspect rating analysis without aspect keyword supervision is to identify the following in a set of reviews: * main aspects that the reviewers considered * weights of the identified aspects in each review and overall * ratings given to each aspect identified the generative model involved inferring the latent aspect assignments (i.e., probability of a word drawn from a topic) and the aspect weights for each document and estimating the following corpus-level parameters: * distribution of vocabulary words in each aspect * prior distribution of aspects for the whole corpus * sentiment polarity of each vocabulary word for each aspect * average weight of each aspect in the ratings * variance of weights for each aspect * variance of the ratings our main challenges included implementing the log-likelihood of each review that required an understanding of jensen's inequality for convex functions and finding the maximums of the latent aspect assignments and prior distribution of aspects that involved implementing gradient-based optimization solutions. after an office hour session with professor zhai, correspondence with dr. hongning wang and evaluating the effort required to bring this type of project to completion, we decided to switch our focus to latent dirichlet allocation, which we found the implementation to be more feasible given the timeline and amount of available information on the subject. latent dirichlet allocation latent dirichlet allocation (lda) is a generative probabilistic model for identifying topics in a collection of documents using bayesian modeling. lda draws the topic assignment of a word from a distribution of topics and the word from the word distribution of topics for a document. unlike plsa where the documents in the corpus define the probabilities, lda can be used to generalize new documents by sampling from the distributions found by the model (i.e., the dataset used to generate the model serves as training data for new data). this is possible thanks to hyperparameters to dirichlet distributions that generate the multinomial distributions, rather than basing them on training documents. objective our first objective was to have lda find k topics from a corpus of documents. this would give us a sense at how well our implementation is doing at learning the topics from the corpus. the model will also be able to predict topic weights for new documents. our objectives also include applying document topic weights predicted by the model to a text classification task. one way of evaluating the utility of the model discussed in the paper is to see how well the topic models can be used to to train a document classifier, compared to classifying with a plain bag of words feature set based on the same documents. using the topic distribution inferred by the model and labeled data, a classification model can be generated. the two classification applications covered in this paper include the identification of fake news and spam messages. it is interesting to compare and contrast this approach of classification with lda to principal component analysis. we explore this relationship in the appendix. data the original data set could not be found. we decided to use two other publicly available datasets from kaggle. evaluation criteria we will use support vector machine (svm) as our classification model for both lda outputs and document terms. using document terms to measure a baseline, the following results were obtained: dataset source # of docs # of terms classes spam https://www.kaggle.com/team -ai/spam-text-message-classif ication 5,157 8,741 spam: 13% not spam: 87% fake news https://www.kaggle.com/moha madalhasan/a-fake-news-dat aset-around-the-syrian-war 804 10,157 fake: 47% not fake: 53% dataset number of features training data size precision recall average f1 fake news 2,020 200 0.562 0.694 0.621 our success criteria is to achieve better or equal performance metrics with lda. doing so would prove that similar or better classification accuracy can be achieved using significantly less features. tools python was the programming language for this project. the following packages were used: numpy scipy math pandas re random sklearn time methods we attempted two different methods for creating the lda models. the first method uses variational inference as explained in the original latent dirichlet allocation paper [3] and further explained by chase geigle [4] to calculate the word assignment to a topic and the topic distribution for each document (posterior inference). the general steps are outlined in the figure below (from [3]). the second method uses collapsed gibbs sampling for the posterior inference which resembles a markov-chain monte carlo method. the method is described in geigle's paper and the implementation is detailed in sterbak's' post [7]. our implementation differed from the original lda paper in the following ways: 1. we used random initialization for word topic assignments and document topic distributions 2. we borrowed the method implemented in gensim for updating alpha which claims [8] to use the newton-raphson method described in [3]. this method uses an additional spam 892 2,000 0.992 0.855 0.919 learning rate parameter . in some cases this alpha updating code did not work well; to  get around this, we used a simpler linear combination to calculate alpha. 3. we replaced the log likelihood estimation with a distance measurement for the document topic distribution. the decision to deviate from the papers was based on our level of understanding, the level of complexity involved in original papers, and the amount of time allocated for the project. variational inference this method uses an em algorithm similar to what is used in plsa with the exception of the variables updated and parameters estimated. the corpus level parameters include the following priors: * : the parameter to the dirichlet distribution which forms the topic multinomial distribution in the training data * b: the parameter to the dirichlet distribution which forms the word multinomial distribution for each topic these parameters are estimated in the m step. the following document level variables are inferred the e step: * f: word topic assignment * : topic assignment gibbs sampling the difference in this method is the use of random sampling given the conditional distributions calculated in iterative steps. the word topic assignment is the main parameter updated with each iteration. snippet from lda_var_inf_without_smoothing.py experiment results for our experiments, we set the number of topics (k) to 15. the max number of em iterations was set to 10 as well as the maximum number of e step iterations. precision, recall, and f1 scores feature set data set training set size vocabulary size num topics precision recall f1 baseline (bag of words) spam 2000 892 n/a 0.992 0.855 0.919 variational inference spam 2000 892 5 0.889 0.526 0.661 variational inference spam 2000 892 10 n/a 0 n/a variational inference spam 2000 892 15 n/a 0 n/a gibbs sampling training + variational inference spam 2000 892 5 0.899 0.763 0.826 gibbs sampling training + variational inference spam 2000 892 10 0.912 0.822 0.865 gibbs sampling training + variational inference spam 2000 892 15 0.930 0.789 0.854 gibbs sampling spam 2000 892 5 0.886 0.770 0.824 gibbs sampling spam 2000 892 10 0.919 0.895 0.907 gibbs sampling spam 2000 892 15 0.941 0.842 0.889 our setup for evaluation is different from the original paper in two ways: * different datasets were used as shown in the figure below (extracted from [3]) * size of dataset and proportion of data used for training blei, ng, and jordan's paper produced good accuracy results with svm classification as described above using topic weights as parameters. their classifier outperformed the complete bag-of-words svm classifier most of the time. these plots use proportion of training data as feature set data set training set size vocabulary size num topics precision recall f1 baseline (bag of words) fake news 200 2020 n/a 0.562 0.694 0.621 variational inference fake news 200 2020 5 0.557 0.874 0.681 variational inference fake news 200 2020 10 0.605 0.802 0.690 variational inference fake news 200 2020 15 0.570 0.694 0.626 gibbs sampling training + variational inference fake news 200 2020 5 0.555 0.640 0.594 gibbs sampling training + variational inference fake news 200 2020 10 0.576 0.784 0.664 gibbs sampling training + variational inference fake news 200 2020 15 0.619 0.586 0.602 gibbs sampling fake news 200 2020 5 0.563 0.721 0.632 gibbs sampling fake news 200 2020 10 0.570 0.766 0.650 gibbs sampling fake news 200 2020 15 0.587 0.550 0.567 their x axis, which we did not analyze, but they give some good references for relative accuracy between bag-of-words svm and lda-svm. for our reproduction of their paper, we used two other data sets because we could not find the one cited in the paper. our results are not directly comparable to blei et al's. however, our lda/svm classifier did outperform the bag-of-words/svm classifier baseline on the fake news dataset we used, which approaches blei's findings. with more tuning, we may nudge our results even closer. our results are in the table above. improvements are in green. these results show that we have likely reproduced the paper reasonably well. we note that for the spam/ham dataset, the results are consistently worse than the baseline. this indicates that this lda/svm classifier does not perform as well on shorter documents with smaller vocabularies. the topics found are probably less useful for classification. this is not inconsistent with blei's findings; their dataset was based on newspaper articles, and probably closer to the fake news dataset we used that had better results. conclusion 1. aspect weights outperform the baseline (bags of words) as features for text classification, when the documents are long and the vocabulary is large (news articles in our experiments). 2. aspect weights underperform the baseline (bags of words) as features for text classification when the documents are short and the vocabulary is small (text messages in our experiments). 3. using more aspects does not necessarily improve the quality of the aspect weights as features. successes we successfully implemented latent dirichlet allocation, following as much as possible blei, ng, and jordan's paper [3], and using two different approaches: collapsed gibbs sampling, and variational inference. we drew conclusions based on experiments with each approach across two data sets. interestingly, cutting the features down from thousands (bag of words) to around 10 (topics) gave comparable, and for longer documents, better results. opportunities if we had more time, it would be nice to try the following: * complete the implementation of laram, our original intended paper. this paper required more understanding of variational inference, and left the exercise of calculating a complicated log likelihood and some parts of the e and m steps to the reader. with more time, we might figure these details out. * complete or borrow the log-likelihood calculation for lda for proper termination of the em algorithm. * compare our results against library implementations of lda, including gensim and nltk. references 1. h. wang, y. lu, c zhai. latent aspect rating analysis without aspect keyword supervision https://dl-acm-org.proxy2.library.illinois.edu/doi/10.1145/2020408.2020505 2. s. kapadia. evaluate topic models: latent dirichlet allocation (lda). a step-by-step guide to building interpretable topic models https://towardsdatascience.com/evaluate-topic-model-in-python-latent-dirichlet-allocation -lda-7d57484bb5d0 3. d. blei, a. ng, m. jordan. latent dirichlet allocation https://dl.acm.org/doi/pdf/10.5555/944919.944937 4. c. geigle. inference methods for latent dirichlet allocation. http://times.cs.uiuc.edu/course/510f18/notes/lda-survey.pdf 5. various. stackexchange https://stats.stackexchange.com/questions/126268/how-do-you-estimate-alpha-paramet er-of-a-latent-dirichlet-allocation-model 6. various. github: rare technologies - gensim. https://github.com/rare-technologies/gensim/blob/6c80294ad8df16a878cb6df586c797 184b39564a/gensim/models/ldamodel.py#l434 7. t. sterbak. latent dirichlet allocation from scratch https://www.depends-on-the-definition.com/lda-from-scratch/ 8. how do you estimate a parameter of a latent dirichlet allocation model? https://stats.stackexchange.com/questions/126268/how-do-you-estimate-alpha-paramet er-of-a-latent-dirichlet-allocation-model appendix lda vs pca it is interesting how lda can be viewed in this setting as a substitute for principal component analysis (pca). pca is a more general technique that can be used to reduce the dimensionality of data. a bag of words implementation may work with some classification algorithms and some data sets, but the matrices can become prohibitively large, sometimes making it difficult to train a model. pca can help by reducing the features from |v| to some smaller k, without losing very much of the variation of the data, or its prediction power, even with surprisingly low values of k. this can work fairly well even when k is 5% or less of |v|. the downside of pca is that the compressed feature set is not as interpretable. the k new features will usually map to several words that may not be related, or form any topic meaningful to humans. in spite of this, the compressed features are often still useful for prediction. compared to using lda as outlined above to generate topic distributions of documents, and then classify those distributions rather than the entire bag of words, lda is also reducing the dimensionality from |v| to k, but it is designed to result in k topic  distributions that should be more explainable in terms of topics than the k dimensions pca created. to put this in a concrete example, a spam classifier might take as inputs, the weights of 10 topics in each new document, as predicted by the lda model. these 10 weights could then be used as features in the spam classifier. pca might do just as well at this compression of features, but its features will not be explainable as topics. how to use programming language and packages * python 3.x * packages: pandas, numpy, scipy, sklearn, math, re, random, time executing code fork or download github repo. open in ide and run file(s) or use command prompt (e.g., python lda_var_inf_without_smoothing.py). start with lda_var_inf_without_smoothing.py. if unexpected results are encountered, try lda_var_inf_without_smoothing_v2.py. optionally, you can also try the other variations with lda_gibbs_sampling.py and lda_var_inf.py. to use a different input dataset, your file will need text and classification columns. modify the source file (input_path) and column settings (text_column, label_column) in the load_csv function call. (vocabulary_size, training_term_doc_matrix, training_labels, testing_term_doc_matrix, testing_labels, vocabulary) = load_csv(input_path = 'fa-kes-dataset.csv', test_set_size=100, training_set_size=200, num_stop_words=50, min_word_freq=5, text_column='article_content', label_column='labels', label_dict = {'1': 1, '0': 0}) lda_var_inf_without_smoothing_v2.py has both datasets (fake news and spam) coded. comment/uncomment to switch between datasets. setting parameters set the following parameters to tune the model: * num_topics: number of topics to model lda.train(num_topics=10, term_doc_matrix=training_term_doc_matrix, iterations=20, e_iterations=10, e_epsilon=0.1, initial_training_set_size=50, initial_training_iterations=20) see video walk-thru for additional information. latent dirichlet allocation this project is based on the paper written by d. blei, a. ng, and m. jordan - latent dirichlet allocation. https://dl.acm.org/doi/pdf/10.5555/944919.944937. latent dirichlet allocation estimates topic disributions and topic word distributions in a generative model that can be used to infer topic distributions and word topic assignments for new documents. we use this modeling capability to evaluate the application of lda on classification of documents using a significantly reduced number of features as compared to a bag of words based classification method. team members ed pureza, epureza2 (captain) dan qian, dansiq2 joe everton, everton2 files |deliverable|file|description| |----------|----|-----------| |project proposal|project proposal_reproduce latent aspect rating analysis without aspect keyword supervision.pdf|original project proposal submitted on october 24, 2020| |progress report|progressreport.pdf|progress report with accomplishments, challenges, and remaining planned activities as of november 29, 2020| |project documentation|projectdocumentation.pdf|project documentation submitted december 8, 2020| |project video walk-through|https://mediaspace.illinois.edu/media/t/1_jbzbbspv|video presentation of project| |project tutorial|projecttutorial.pdf|project tutorial for reproducing experiments (also outlined below)| |lda without smoothing|lda_var_inf_without_smoothing.py|code for running lda using variational inference and gensim-based alpha update method| |lda without smooting v2|lda_var_inf_without_smoothing_v2.py|code for running lda using variational inference. use if python environment setup issues are encountered.| |lda with collapsed gibbs sampling|lda_gibbs_sampling.py|lda implementation using collapsed gibbs sampling| |original lda code with variational inference|lda_var_inf.py|first attempt for implement lda with variational inference method| |fake news dataset|fa-kes-dataset.csv|input dataset with news articles classified as fake news or not fake news| |spam dataset|spam.csv|input dataset with news articles classified as spam or ham (not spam)| how to use progamming language and packages python 3.x packages: pandas, numpy, scipy, sklearn, math, re, random, time executing code fork or download github repo. open in ide and run file(s) or use command prompt (e.g., python lda_var_inf_without_smoothing.py). start with lda_var_inf_without_smoothing.py. if unexpected results are encountered, try lda_var_inf_without_smoothing_v2.py. optionally, you can also try the other variations with lda_gibbs_sampling.py and lda_var_inf.py. to use a different input dataset, your file will need text and classification columns. modify the source file (input_path) and column settings (text_column, label_column) in the load_csv function call. python (vocabulary_size, training_term_doc_matrix, training_labels, testing_term_doc_matrix, testing_labels, vocabulary) = load_csv(input_path = 'fa-kes-dataset.csv', test_set_size=100, training_set_size=200, num_stop_words=50, min_word_freq=5, text_column='article_content', label_column='labels', label_dict = {'1': 1, '0': 0}) lda_var_inf_without_smoothing_v2.py has both datasets (fake news and spam) coded. comment/uncomment to switch between datasets. setting parameters set the following parameters to tune the model: - num_topics: number of topics to model python lda.train(num_topics=10, term_doc_matrix=training_term_doc_matrix, iterations=20, e_iterations=10, e_epsilon=0.1, initial_training_set_size=50, initial_training_iterations=20) see video walk-thru for additional information."	['progress', 'report', 'ed', 'pureza', 'epurezaillinoisedu', 'dansi', 'qian', 'dansiqillinoisedu', 'joe', 'everton', 'evertonillinoisedu', 'change', 'scope', 'initially', 'planned', 'reproduce', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'read', 'paper', 'discussed', 'among', 'documented', 'understandings', 'hourlong', 'conversation', 'prof', 'chengxiang', 'zhai', 'one', 'authors', 'email', 'correspondence', 'hongning', 'want', 'main', 'author', 'eventually', 'decided', 'none', 'us', 'substantial', 'math', 'background', 'required', 'instead', 'dirichlet', 'allocation', 'httpsdlacmorgdoipdf', 'httptimescsuiuceducoursefnotesldasurveypdf', 'referenced', 'original', 'also', 'described', 'briefly', 'week', 'course', 'tasks', 'completed', 'papers', 'lda', 'understanding', 'analytical', 'solution', 'em', 'algorithm', 'optimization', 'done', 'using', 'variational', 'inference', 'gibbs', 'sampling', 'implemented', 'initial', 'version', 'learning', 'rate', 'subsequent', 'applies', 'across', 'iterations', 'preprocessing', 'textclassification', 'datasets', 'model', 'training', 'term', 'frequencies', 'new', 'documents', 'trained', 'note', 'generative', 'compared', 'classification', 'accuracy', 'support', 'vector', 'machines', 'svm', 'topic', 'weights', 'significant', 'differences', 'two', 'text', 'message', 'spam', 'filter', 'dataset', 'short', 'fake', 'news', 'detection', 'long', 'pending', 'working', 'httpsgithubcompurecodcourseprojectblobmainlda_var_infpy', 'plan', 'compare', 'baseline', 'challenges', 'face', 'seem', 'canonical', 'ways', 'implement', 'either', 'resources', 'implementation', 'details', 'necessarily', 'correct', 'perform', 'well', 'result', 'need', 'multiple', 'based', 'potential', 'versions', 'results', 'amount', 'hyperparameter', 'tuning', 'number', 'topics', 'decay', 'stop', 'criterion', 'definition', 'threshold', 'etc', 'little', 'literature', 'hyperparameters', 'set', 'tuned', 'practice', 'would', 'require', 'trail', 'errors', 'side', 'project', 'proposal', 'team', 'members', 'leader', 'chosen', 'identification', 'weighting', 'laram', 'vs', 'existing', 'solutions', 'lara', 'newer', 'reference', 'comparison', 'programming', 'language', 'python', 'notable', 'libraries', 'numpy', 'evaluation', 'used', 'httptimescsuiuceduwangdata', 'tripadvisor', 'amazon', 'rough', 'timeline', 'kickoff', 'mvp', 'ready', 'code', 'complete', 'necessary', 'final', 'mining', 'cs', 'information', 'systems', 'december', 'dan', 'dansiq', 'epureza', 'cmt', 'id', 'introduction', 'objective', 'data', 'criteria', 'tools', 'methods', 'experiment', 'conclusion', 'successes', 'opportunities', 'references', 'appendix', 'pca', 'originally', 'selected', 'research', 'titled', 'honging', 'wang', 'yue', 'lu', 'spending', 'considerable', 'time', 'attempting', 'understand', 'many', 'obstacles', 'continue', 'recreating', 'taking', 'consideration', 'professor', 'zhais', 'counsel', 'switch', 'work', 'david', 'blei', 'andrew', 'ng', 'michael', 'jordan', 'review', 'submitted', 'product', 'assumed', 'reviewer', 'different', 'aspects', 'mind', 'priority', 'led', 'given', 'overall', 'identify', 'following', 'reviews', 'reviewers', 'considered', 'identified', 'ratings', 'involved', 'inferring', 'assignments', 'ie', 'probability', 'word', 'drawn', 'document', 'estimating', 'corpuslevel', 'parameters', 'distribution', 'vocabulary', 'words', 'prior', 'whole', 'corpus', 'sentiment', 'polarity', 'average', 'weight', 'variance', 'included', 'implementing', 'loglikelihood', 'jensens', 'inequality', 'convex', 'functions', 'finding', 'maximums', 'gradientbased', 'office', 'hour', 'session', 'dr', 'evaluating', 'effort', 'bring', 'type', 'completion', 'focus', 'found', 'feasible', 'available', 'subject', 'probabilistic', 'identifying', 'collection', 'bayesian', 'modeling', 'draws', 'assignment', 'unlike', 'plsa', 'define', 'probabilities', 'generalize', 'distributions', 'generate', 'serves', 'possible', 'thanks', 'multinomial', 'rather', 'basing', 'first', 'find', 'k', 'give', 'sense', 'able', 'predict', 'objectives', 'include', 'applying', 'predicted', 'task', 'way', 'utility', 'see', 'models', 'train', 'classifier', 'classifying', 'plain', 'bag', 'feature', 'inferred', 'labeled', 'generated', 'applications', 'covered', 'messages', 'interesting', 'contrast', 'approach', 'principal', 'component', 'explore', 'relationship', 'could', 'use', 'publicly', 'kaggle', 'machine', 'outputs', 'terms', 'measure', 'obtained', 'source', 'docs', 'classes', 'httpswwwkagglecomteam', 'aispamtextmessageclassif', 'ication', 'httpswwwkagglecommoha', 'madalhasanafakenewsdat', 'asetaroundthesyrianwar', 'features', 'size', 'precision', 'recall', 'f', 'success', 'achieve', 'better', 'equal', 'performance', 'metrics', 'prove', 'similar', 'achieved', 'significantly', 'less', 'packages', 'scipy', 'pandas', 'random', 'sklearn', 'attempted', 'creating', 'method', 'uses', 'explained', 'chase', 'geigle', 'calculate', 'posterior', 'general', 'steps', 'outlined', 'figure', 'second', 'collapsed', 'resembles', 'markovchain', 'monte', 'carlo', 'geigles', 'detailed', 'sterbaks', 'post', 'differed', 'initialization', 'borrowed', 'gensim', 'updating', 'alpha', 'claims', 'newtonraphson', 'additional', 'parameter', 'cases', 'get', 'around', 'simpler', 'linear', 'combination', 'replaced', 'log', 'likelihood', 'estimation', 'distance', 'measurement', 'decision', 'deviate', 'level', 'complexity', 'allocated', 'exception', 'variables', 'updated', 'estimated', 'priors', 'forms', 'b', 'step', 'e', 'difference', 'conditional', 'calculated', 'iterative', 'iteration', 'snippet', 'lda_var_inf_without_smoothingpy', 'experiments', 'max', 'maximum', 'scores', 'num', 'na', 'setup', 'shown', 'extracted', 'proportion', 'jordans', 'produced', 'good', 'outperformed', 'bagofwords', 'plots', 'x', 'axis', 'analyze', 'relative', 'ldasvm', 'reproduction', 'sets', 'cited', 'directly', 'comparable', 'et', 'als', 'however', 'outperform', 'bagofwordssvm', 'approaches', 'bleis', 'findings', 'may', 'nudge', 'even', 'closer', 'table', 'improvements', 'green', 'show', 'likely', 'reproduced', 'reasonably', 'spamham', 'consistently', 'worse', 'indicates', 'shorter', 'smaller', 'vocabularies', 'probably', 'useful', 'inconsistent', 'newspaper', 'articles', 'bags', 'large', 'underperform', 'small', 'improve', 'quality', 'successfully', 'much', 'drew', 'conclusions', 'interestingly', 'cutting', 'thousands', 'gave', 'longer', 'nice', 'try', 'intended', 'left', 'exercise', 'calculating', 'complicated', 'parts', 'reader', 'might', 'borrow', 'calculation', 'proper', 'termination', 'library', 'implementations', 'including', 'nltk', 'h', 'c', 'httpsdlacmorgproxylibraryillinoisedudoi', 'kapadia', 'evaluate', 'stepbystep', 'guide', 'building', 'interpretable', 'httpstowardsdatasciencecomevaluatetopicmodelinpythonlatentdirichletallocation', 'ldadbbd', 'various', 'stackexchange', 'httpsstatsstackexchangecomquestionshowdoyouestimatealphaparamet', 'erofalatentdirichletallocationmodel', 'github', 'rare', 'technologies', 'httpsgithubcomraretechnologiesgensimblobcaddfacbdfc', 'bagensimmodelsldamodelpyl', 'sterbak', 'scratch', 'httpswwwdependsonthedefinitioncomldafromscratch', 'estimate', 'viewed', 'setting', 'substitute', 'technique', 'reduce', 'dimensionality', 'algorithms', 'matrices', 'become', 'prohibitively', 'sometimes', 'making', 'difficult', 'help', 'reducing', 'v', 'losing', 'variation', 'prediction', 'power', 'surprisingly', 'low', 'values', 'fairly', 'downside', 'compressed', 'usually', 'map', 'several', 'related', 'form', 'meaningful', 'humans', 'spite', 'often', 'still', 'classify', 'entire', 'designed', 'explainable', 'dimensions', 'created', 'put', 'concrete', 'example', 'take', 'inputs', 'compression', 'executing', 'fork', 'download', 'repo', 'open', 'ide', 'run', 'files', 'command', 'prompt', 'eg', 'start', 'unexpected', 'encountered', 'lda_var_inf_without_smoothing_vpy', 'optionally', 'variations', 'lda_gibbs_samplingpy', 'lda_var_infpy', 'input', 'file', 'columns', 'modify', 'input_path', 'column', 'settings', 'text_column', 'label_column', 'load_csv', 'function', 'call', 'vocabulary_size', 'training_term_doc_matrix', 'training_labels', 'testing_term_doc_matrix', 'testing_labels', 'load_csvinput_path', 'fakesdatasetcsv', 'test_set_size', 'training_set_size', 'num_stop_words', 'min_word_freq', 'text_columnarticle_content', 'label_columnlabels', 'label_dict', 'coded', 'commentuncomment', 'tune', 'num_topics', 'ldatrainnum_topics', 'term_doc_matrixtraining_term_doc_matrix', 'e_iterations', 'e_epsilon', 'initial_training_set_size', 'initial_training_iterations', 'video', 'walkthru', 'written', 'estimates', 'disributions', 'infer', 'capability', 'application', 'reduced', 'captain', 'deliverablefiledescription', 'proposalproject', 'proposal_reproduce', 'supervisionpdforiginal', 'october', 'reportprogressreportpdfprogress', 'accomplishments', 'remaining', 'activities', 'november', 'documentationprojectdocumentationpdfproject', 'documentation', 'walkthroughhttpsmediaspaceillinoisedumediat_jbzbbspvvideo', 'presentation', 'tutorialprojecttutorialpdfproject', 'tutorial', 'reproducing', 'smoothinglda_var_inf_without_smoothingpycode', 'running', 'gensimbased', 'update', 'smooting', 'vlda_var_inf_without_smoothing_vpycode', 'environment', 'issues', 'samplinglda_gibbs_samplingpylda', 'inferencelda_var_infpyfirst', 'attempt', 'datasetfakesdatasetcsvinput', 'classified', 'datasetspamcsvinput', 'ham', 'progamming']
https://github.com/pushpit-UIUC-courses/TextInformationSystem-CourseProject	"cs 410: text information system expert search system project progress report team name: baytobay team captain: pushpit saxena (netid: pushpit2) 1) which tasks have been completed? - design and architecture of the proposed modules of the project. - extract and crawl web pages - utilized scrapy framework with python to crawl web pages and identify connected links. - utilized beautifulsoup toolkit with python to extract text from web pages. - removed special characters using regular expressions and extracted text data from web pages. - expert bios page classification - preprocessing data - using nltk python toolkit - removed stop words - stemming - xgboost text classifier - tf-idf vectorizer name net-id govindan kutty menon gvmenon2 harikrishna bojja hbojja2 pushpit saxena pushpit2 - assumes that tokens are stemmed and lowercase - remove stopwords - used the dataset from here as positive text and regular web pages as negative text. - logistic regression classifier - tf-idf vectorizer - assumes that tokens are stemmed and lowercase - remove stopwords - used the dataset from here as positive text and regular web pages as negative text. 2) which tasks are pending? - extract and crawl web pages - increase scalability to crawl and extract data from web page with higher data content and connected links - multi-thread extract and crawl scripts to achieve parallel processing - utilize a delimiter to segregate page identifier and content information - redesign process to accept input web pages from a file and make the process more configurable - validation of script for different university web pages - expert bios page classification - preprocessing data - writing unit tests - bi-lstm text classification (using tensorflow/pytorch on google colab) - use the data set from here - compare accuracy against other classifiers - xgboost classifier - with word2vec vectorizer (glove) - assumes that tokens are stemmed and lower case - remove stopwords - used the dataset from here as positive text and regular web pages as negative text. - (stretch goal) topic modelling on expert bios. - integration - integrate different components which are being developed individually - integrate with existing functionality of the expert search system - end to end script execution/ validation - run scripts (in order) and validate conformance to the need/ original design. - submission/ demo delivery - finalize and create deliverables for project submission - finalize and create deliverables for demo 3) are you facing any challenges? - extracting and crawling web pages using lower powered cpus and less memory on personal machines is posing a challenge from performance and scalability perspective. - extracting/ crawling web pages of different universities using a scrapy framework requires understanding of the page structure. page structure could be different for different web pages and this is a challenge for crawling and scraping required contents. - while we were able to collect positive training set for classifiers, collecting ""quality"" negative data set could be tricky - collected positive training set from cs410-mp2 - trying to use general web crawled data for negative examples. * * * * * * * * * * 1) * * * * * * * * * * * * * * * * * * * * * * * 1) * * * * * * * * * * * * * * * * 1) * * * ""distilbert-base-nli-mean-to kens"" * encoding saved at: ""bert_encoding_classifier.be rt-embeddings-for-classifica tion.pkl"" * *     * - * - * - * * * [(0, '0.019*""graphics"" + 0.018*""paper"" + 0.015*""image"" + 0.014*""siggraph"" + 0.010*""computer""'), (1, '0.033*""conference"" + 0.027*""international"" + 0.018*""systems"" + 0.014*""proceedings"" + 0.013*""networks""'), (2, '0.015*""translation"" + 0.012*""speech"" + 0.010*""blandford"" + 0.010*""rogers"" + 0.009*""nadia""'), (3, '0.022*""research"" + 0.019*""function"" + 0.019*""study"" + 0.017*""details"" + 0.014*""state""'), (4, '0.014*""programming"" + 0.013*""system"" + 0.011*""architecture"" + 0.011*""software"" + 0.010*""memory""'), (5, '0.017*""electrical"" + 0.014*""engineering"" + 0.012*""power"" + 0.009*""control"" + 0.009*""signal""'), (6, '0.015*""learning"" + 0.008*""conference"" + 0.008*""machine"" + 0.007*""model"" + 0.007*""paper""'), (7, '0.030*""research"" + 0.026*""university"" + 0.025*""computer"" + 0.024*""science"" + 0.018*""engineering""'), (8, '0.016*""theory"" + 0.012*""algorithms"" + 0.011*""algorithm"" + 0.009*""graph"" + 0.008*""complexity""'), (9, '0.008*""guohong"" + 0.008*""ghosh"" + 0.008*""patrick"" + 0.008*""veeravalli"" + 0.008*""thomas""')] * * * * * * * *  * * * * * * *  * project documentation: web scraping 1. scrapy framework - a. utilized scrapy framework with python to crawl web pages and identify connected links. 2. beautiful soup - a. utilized beautifulsoup toolkit with python to extract text from web pages. b. removed special characters using regular expressions and extracted text data from web pages. classification: 1. once the web pages are scraped using the 'crawl-n-extract' module (see run help below). the web pages text is saved in a raw text file with each web page text on one line (similar to mp2 exercise). 2. the classification task is to classify a given webpage as a faculty page (positive class: 1) or non faculty page (negative class: 0). 3. we trained multiple classifiers as part of this exercise and results (f1-score and accuracy) can be found in our presentation. 4. we have built most of the model based on the text classification techniques that we have learnt as part of the course. we have mainly used tf-idf vectorizer and bert based sen2vec to vectorize the text of the web pages. * logistic regression 1. used scikit learn logistic regression module as well as scikit learn tf-idf vectorizer for vectorizing the web pages. we have 2. used nltk library to remove stopwords and for stemming. 3. f1-score (hold out test set): 0.9702970297029703 * xgboost 1. used xgboost library for training the model 2. scikit learn tf-idf vectorizer for vectorizing the web pages 3. f1-score (hold out test set): 0.9829683698296837 * deep learning 1. tensorflow - used tensorflow to build the deep-learning model. a. four layered neural network model(excluding input layer) b. uses adam optimizer with learning 0.0001 c. loss is evaluated using binary cross entropy d. f1 score on test data set: 0.9963 2. nltk - utilized nltk to pre-process the data. pre-processing involved following list of steps a. remove stop words b. stemming * (experimental) bert encoding based logistic regression 1. generated the embeddings for the web pages text using a pre-trained bert model ('distilbert-base-nli-mean-tokens') 2. used the transformer library to generate the embeddings 3. built an experimental logistic regression model a. f1 score for this experimental model is: 0.9874055415617129 4. as, we can see there is an improvement over the tf-idf based logistic regression model, hence this experiment was successful. but we were getting better results with our custom neural network model, we didn't pursue this further. in future, we would like to expand on this idea of transferring knowledge (from bert encoding) to inform and improve simple classifiers. this saves a lot of time as the pre-trained models are generally trained on large corpus of wikipedia/web pages and will provide a decent knowledge base to transfer to a simple classifier model which then can be trained much easily in a short span of time. topic modeling on faculty bios  used gensim library to generate the topic model based on the compiled bios  running information can be found in 'run help' section ner model  used spacy library to extract named entities, in particular faculty names and different organizations that are mentioned on their page. both these entities will help in improving the search index. run help: python setup (python >= 3.5, only web scraping needs python 3.5, other modules work with newer versions of python also ): please run : pip install -r source_code/requirements.txt you can also use the venv by using following commands: * cd source_code * python -m venv <venv-name> * source <venv-name>/bin/activate * python3 -m pip install -r requirements.txt web scrapping: 1. scrapy (use python 3.5 version): a. script created using scrapy framework will extract links for the web-page b. create a scrapy project using i. ""scrapy startproject link_extractor c. configure items.py to create class ""linkextactoritem"" class and define below fields for the item i. url_from ii. urk_to d. create a new spider using below command i. scrapy genspider uiuc e. crawl links of a web-page using below command i. scrapy crawl uiuc -o links.csv -t csv it will extract all the links associated with web page to csv file. 2. split (use python 3.5 version) a. split the input file into multiple files using script ""split.py"" 3. extract web contents (use python 3.5 version) a. extract web contents using script ""python extract.py uiuc1.csv uiuc1.txt"". this script uses beautiful soup as the toolkit 4. merge (use python 3.5 version) a. merge all output files using script ""merge.py"" web page classification logistic regression model (python >= 3.7):  training: * navigate to source_code/logistic_regression * run python train.py * the model file will be saved at source_code/logistic_regression/logit.model  inference: * there are two ways to run inference once: * by providing a file with all the webpage (one str per web page on one line): * from root directory (textinformationsystem-courseproject) run following command: python -m source_code.logistic_regression.inference <webpage data file path> * for file format look at: textinformationsystem-courseproject/source _code/crawl-n-extract/merge/uiuc.txt * by facultyclassifier module (which is an entry point for all of our classification models): * create an object of facultyclassifier class with classifier_type = 'logit' and then run predict method on list of web pages text * a sample run is defined in the ""__main__"" block of that module. xgboost model (python >= 3.7):  training: * navigate to source_code/xgboost * run python train.py * the model file will be saved at source_code/xgboost/xgb.model  inference: * there are two ways to run inference once: * by providing a file with all the webpage (one str per web page on one line): * from root directory (textinformationsystem-courseproject) run following command: python -m source_code.xgboost.inference <webpage data file path> * for file format look at: textinformationsystem-courseproject/source _code/crawl-n-extract/merge/uiuc.txt * by facultyclassifier module (which is an entry point for all of our classification models): * create an object of facultyclassifier class with classifier_type = 'xgb' and then run predict method on list of web pages text * a sample run is defined in the ""__main__"" block of that module. neural network model (python >= 3.7):  predict faculty pages (inference): trained neural network model is of size 187mb on disk. git has an upper cap of 100mb. for this reason, the trained model has been uploaded to box. please download the trained neural network model from the box link below step 1: download the folder 'neural_network_model_v2' from the link below. https://uofi.box.com/v/es-neural-network-model-v2 step 2: ensure that directories 'model', 'vectorizer' are placed directly under 'fully_trained_model'. step 3: ensure below directories are safely extracted. 'fully_trained_model/model' 'fully_trained_model/vectorizer' step 4: point 'crawled_data_path' in the script 'classify/infer_crawled_data.py' point to your webpage dump. note: the crawled data should have one doc per line. separated by '#####' (eg: ~/source_code/crawl-n-extract/merge/uiuc.txt) step 5: run the script 'infer_crawled_data' and observe the faculty links printed in the console. note: you can also use source_code/faculty_page_classifier/faculty_page_classifier/facultyclassifier to programmatically use this model to run predictions. you need to initialize the facultyclassifier with classifier_type='nn'. but this also requires copying over the model file from the location provided in step 1 and saving it to the appropriate folder.  training the model: we suggest that you use the model we have already trained. please follow the steps below if you intend to train a new model using the source code. * use the script ""model_driver.py"" under the package below to train the model ""source_code.neural_network_ml_classifier.train"" * initialize the path to training data and target location a. data_base_dir - base directory to training data. this data must have been preprocessed using preprocessor.py b. the script then splits the data into 70% train and 30% validation dataset c. this data used then used to train the four layered neural network model topic modeling on faculty bios  used gensim library to generate the topic model  topic model can be run using the following notebook (this notebook contains self explanatory documentation to run the notebook): * source_code/topic_modeller/topicmodelling.ipynb ner model  used spacy library to extract named entities, in particular faculty names and different organizations that are mentioned on their page. both these entities will help in improving the search index.  ner model can run using following notebook (this notebook contains self explanatory documentation to run the notebook): * source_code/ner_model/spacy_ner.ipynb  also, extracted faculty names as well as different organizations mentioned on the faculty pages. these two data points will help in indexing the faculty bios for searching. * commands to run this step: * cd source_code/ner_model * python extract_names_and_orgs.py <bios_dir> <destination_dir_for_names> <destination_dir_for_orgs> * e.g. bios_dir = source_code/data/compiled_bios, destination_dir_for_names = source_code/data/compiled_bios_names, destination_dir_for_orgs = source_code/data/compiled_bios_orgs  names are extracted and saved in source_code/data/compiled_bios_names/  organizations are extracted and saved in source_code/data/compiled_bios_orgs  we have used the same filenames as faculty bios for easier retrieval when this information is needed later references:  scrapy - https://docs.scrapy.org/en/latest/  beautiful soup - https://pypi.org/project/beautifulsoup4/  beautiful soup - https://www.kite.com/python/docs/bs4.beautifulsoup  scikit learn - https://scikit-learn.org * logistic regression - https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.logistic regression.html * tfidf vectorizer- https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.te xt.tfidfvectorizer.html  gensim - https://pypi.org/project/gensim/ * https://www.machinelearningplus.com/nlp/topic-modeling-gensim-python/  xgboost - https://xgboost.readthedocs.io/en/latest/python/python_api.html * https://machinelearningmastery.com/develop-first-xgboost-model-python-scikit -learn/  spacy - https://spacy.io/ , https://spacy.io/models/en#en_core_web_md  tensorflow - https://www.tensorflow.org/api_docs/python/tf/all_symbols * https://www.tensorflow.org/tutorials/keras/text_classification_with_hub courseproject project presentation document: final presentation document project documentation and run help: documentation video presentation: presentation if you face any issue viewing the video at the above link you can also download the video from here project source code: sourcecode team members' email ids (please feel free to reach out for any questions or clarifications): pushpit saxena (pushpit2@illinois.edu) govindan menon (gvmenon2@illinois.edu) harikrishna bojja (hbojja2@illinois.edu) cs-410 text information systems: final project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. name net-id govindan kutty menon gvmenon2 harikrishna bojja hbojja2 pushpit saxena pushpit2 team name: baytobay team captain: pushpit saxena (netid: pushpit2) 2. what system have you chosen? which subtopic(s) under the system? system expertsearch system subtopics 1. automatically crawling faculty webpages 2. extracting relevant information from faculty bios 3. stretch goals: topic modeling on faculty bios. 3. briefly describe the datasets, algorithms or techniques you plan to use techniques for subtopic: automatically crawling faculty: 1) users provide university urls as input. 2) the websites (urls) will be leveraged to crawl and collect the dataset for classifying ""faculty directory pages"" v/s ""non-faculty"". 3) to collect the dataset for classifying ""faculty webpage"" v/s ""non-faculty webpage"", the faculty directory pages will be crawled. classification task: 1) classify ""faculty directory pages"" v/s ""non-faculty"" 2) classify ""faculty webpage"" v/s ""non-faculty webpage"" 3) we will try to build different classification models. some of the models that we are planning to try and evaluate are svm, xgboost, dl (hugging face transformers) etc. we will leverage the urls as well as text on the web-pages to extract features (vectorize text) to train the classification models. extracting relevant information from faculty bios: 1) enhance regular-expression to extract email-id from the bios 2) enhance named entity recognition (ner) to identify/ extract faculty name from bios. 3) topic mining & keyword extraction on faculty bios information (stretch goal, if time permits). 4) we are planning to use spacy, gensim as well as flair (bert) for both ner models as well as topic modelling. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? automatic crawler: 1) we will provide an api/console utility which can take an university home url and then crawl the web-pages from that url and return the list of faculty web-pages. this will demonstrate that the crawler and classifier that we have built are working. web-pages classification tasks: 1) we will use some of the data from mp2.2 and mp2.3 assignment as suggested in the project topics document and demonstrate the performance of our models (f1 metric). extracting relevant information from bios pages: 1) as we are planning to use some recent and advanced ner models, we will show the difference in performance between regex based email/name extraction vs our ner model and also we will clearly state whether we are able to improve performance from a simple regex based approach or not. topic modelling: 1) we will demonstrate the top topics we can identify from the faculty bios dataset. also, we will try to calculate topic coherence metric. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly 1) we will build our own system and will try to use the datasets provided by the existing expertsearch system (e.g. faculty bios, names, emails etc.) for training and evaluation. 2) we will also use the regex based ner model as a baseline to compare some of the more advanced ner models that we will try to train. 6. which programming language do you plan to use? programming language python, javascript, html 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. number main tasks hours 1 evaluation/ analysis of the current system/ process and any baseline models already implemented in the system. 12 hrs. 1.1 any required training data annotation 6 hrs. 2 researching algorithms and overall system design 10 hrs. 3 development of functionalities envisioned 3.1 recursive crawler implementation 10 hrs 3.2 web page classification model implementation 10 hrs 3.3 information extraction 8 hrs 3.4 topic modeling 8 hrs 4 self-evaluation and modification 24 hrs 5 demo preparation and documentation 6 hrs. 6 collaboration 3 hrs. total 96 hrs."	['cs', 'text', 'information', 'system', 'expert', 'search', 'project', 'progress', 'report', 'team', 'name', 'baytobay', 'captain', 'pushpit', 'saxena', 'netid', 'tasks', 'completed', 'design', 'architecture', 'proposed', 'modules', 'extract', 'crawl', 'web', 'pages', 'utilized', 'scrapy', 'framework', 'python', 'identify', 'connected', 'links', 'beautifulsoup', 'toolkit', 'removed', 'special', 'characters', 'using', 'regular', 'expressions', 'extracted', 'data', 'bios', 'page', 'classification', 'preprocessing', 'nltk', 'stop', 'words', 'stemming', 'xgboost', 'classifier', 'tfidf', 'vectorizer', 'govindan', 'kutty', 'menon', 'gvmenon', 'harikrishna', 'bojja', 'hbojja', 'assumes', 'tokens', 'stemmed', 'lowercase', 'remove', 'stopwords', 'used', 'dataset', 'positive', 'negative', 'logistic', 'regression', 'pending', 'increase', 'scalability', 'higher', 'content', 'multithread', 'scripts', 'achieve', 'parallel', 'processing', 'utilize', 'delimiter', 'segregate', 'identifier', 'redesign', 'process', 'accept', 'input', 'file', 'make', 'configurable', 'validation', 'script', 'different', 'university', 'writing', 'unit', 'tests', 'bilstm', 'tensorflowpytorch', 'google', 'colab', 'use', 'set', 'compare', 'accuracy', 'classifiers', 'wordvec', 'glove', 'lower', 'case', 'stretch', 'goal', 'topic', 'modelling', 'integration', 'integrate', 'components', 'developed', 'individually', 'existing', 'functionality', 'end', 'execution', 'run', 'order', 'validate', 'conformance', 'need', 'original', 'submission', 'demo', 'delivery', 'finalize', 'create', 'deliverables', 'facing', 'challenges', 'extracting', 'crawling', 'powered', 'cpus', 'less', 'memory', 'personal', 'machines', 'posing', 'challenge', 'performance', 'perspective', 'universities', 'requires', 'understanding', 'structure', 'could', 'scraping', 'required', 'contents', 'able', 'collect', 'training', 'collecting', 'quality', 'tricky', 'collected', 'csmp', 'trying', 'general', 'crawled', 'examples', 'distilbertbasenlimeanto', 'kens', 'encoding', 'saved', 'bert_encoding_classifierbe', 'rtembeddingsforclassifica', 'tionpkl', 'graphics', 'paper', 'image', 'siggraph', 'computer', 'conference', 'international', 'systems', 'proceedings', 'networks', 'translation', 'speech', 'blandford', 'rogers', 'nadia', 'research', 'function', 'study', 'details', 'state', 'programming', 'software', 'electrical', 'engineering', 'power', 'control', 'signal', 'learning', 'machine', 'model', 'science', 'theory', 'algorithms', 'algorithm', 'graph', 'complexity', 'guohong', 'ghosh', 'patrick', 'veeravalli', 'thomas', 'documentation', 'beautiful', 'soup', 'b', 'scraped', 'crawlnextract', 'module', 'see', 'help', 'raw', 'one', 'line', 'similar', 'mp', 'exercise', 'task', 'classify', 'given', 'webpage', 'faculty', 'class', 'non', 'trained', 'multiple', 'part', 'results', 'fscore', 'found', 'presentation', 'built', 'based', 'techniques', 'learnt', 'course', 'mainly', 'bert', 'senvec', 'vectorize', 'scikit', 'learn', 'well', 'vectorizing', 'library', 'hold', 'test', 'deep', 'tensorflow', 'build', 'deeplearning', 'four', 'layered', 'neural', 'network', 'modelexcluding', 'layer', 'uses', 'adam', 'optimizer', 'c', 'loss', 'evaluated', 'binary', 'cross', 'entropy', 'f', 'score', 'preprocess', 'involved', 'following', 'list', 'steps', 'experimental', 'generated', 'embeddings', 'pretrained', 'distilbertbasenlimeantokens', 'transformer', 'generate', 'improvement', 'hence', 'experiment', 'successful', 'getting', 'better', 'custom', 'didnt', 'pursue', 'future', 'would', 'like', 'expand', 'idea', 'transferring', 'knowledge', 'inform', 'improve', 'simple', 'saves', 'lot', 'time', 'models', 'generally', 'large', 'corpus', 'wikipediaweb', 'provide', 'decent', 'base', 'transfer', 'much', 'easily', 'short', 'span', 'modeling', 'gensim', 'compiled', 'running', 'section', 'ner', 'spacy', 'named', 'entities', 'particular', 'names', 'organizations', 'mentioned', 'improving', 'index', 'setup', 'needs', 'work', 'newer', 'versions', 'also', 'please', 'pip', 'install', 'r', 'source_coderequirementstxt', 'venv', 'commands', 'cd', 'source_code', 'venvname', 'source', 'venvnamebinactivate', 'requirementstxt', 'scrapping', 'version', 'created', 'startproject', 'link_extractor', 'configure', 'itemspy', 'linkextactoritem', 'define', 'fields', 'item', 'url_from', 'ii', 'urk_to', 'new', 'spider', 'command', 'genspider', 'uiuc', 'e', 'linkscsv', 'csv', 'associated', 'split', 'files', 'splitpy', 'extractpy', 'uiuccsv', 'uiuctxt', 'merge', 'output', 'mergepy', 'navigate', 'source_codelogistic_regression', 'trainpy', 'source_codelogistic_regressionlogitmodel', 'inference', 'two', 'ways', 'providing', 'str', 'per', 'root', 'directory', 'textinformationsystemcourseproject', 'source_codelogistic_regressioninference', 'path', 'format', 'look', 'textinformationsystemcourseprojectsource', '_codecrawlnextractmergeuiuctxt', 'facultyclassifier', 'entry', 'point', 'object', 'classifier_type', 'logit', 'predict', 'method', 'sample', 'defined', '__main__', 'block', 'source_codexgboost', 'source_codexgboostxgbmodel', 'source_codexgboostinference', 'xgb', 'size', 'mb', 'disk', 'git', 'upper', 'cap', 'reason', 'uploaded', 'box', 'download', 'link', 'step', 'folder', 'neural_network_model_v', 'httpsuofiboxcomvesneuralnetworkmodelv', 'ensure', 'directories', 'placed', 'directly', 'fully_trained_model', 'safely', 'fully_trained_modelmodel', 'fully_trained_modelvectorizer', 'crawled_data_path', 'classifyinfer_crawled_datapy', 'dump', 'note', 'doc', 'separated', 'eg', 'source_codecrawlnextractmergeuiuctxt', 'infer_crawled_data', 'observe', 'printed', 'console', 'source_codefaculty_page_classifierfaculty_page_classifierfacultyclassifier', 'programmatically', 'predictions', 'initialize', 'classifier_typenn', 'copying', 'location', 'provided', 'saving', 'appropriate', 'suggest', 'already', 'follow', 'intend', 'train', 'code', 'model_driverpy', 'package', 'source_codeneural_network_ml_classifiertrain', 'target', 'data_base_dir', 'must', 'preprocessed', 'preprocessorpy', 'splits', 'notebook', 'contains', 'self', 'explanatory', 'source_codetopic_modellertopicmodellingipynb', 'source_codener_modelspacy_neripynb', 'points', 'indexing', 'searching', 'source_codener_model', 'extract_names_and_orgspy', 'bios_dir', 'destination_dir_for_names', 'destination_dir_for_orgs', 'source_codedatacompiled_bios', 'source_codedatacompiled_bios_names', 'source_codedatacompiled_bios_orgs', 'filenames', 'easier', 'retrieval', 'needed', 'later', 'references', 'httpsdocsscrapyorgenlatest', 'httpspypiorgprojectbeautifulsoup', 'httpswwwkitecompythondocsbsbeautifulsoup', 'httpsscikitlearnorg', 'httpsscikitlearnorgstablemodulesgeneratedsklearnlinear_modellogistic', 'regressionhtml', 'httpsscikitlearnorgstablemodulesgeneratedsklearnfeature_extractionte', 'xttfidfvectorizerhtml', 'httpspypiorgprojectgensim', 'httpswwwmachinelearningpluscomnlptopicmodelinggensimpython', 'httpsxgboostreadthedocsioenlatestpythonpython_apihtml', 'httpsmachinelearningmasterycomdevelopfirstxgboostmodelpythonscikit', 'httpsspacyio', 'httpsspacyiomodelsenen_core_web_md', 'httpswwwtensorfloworgapi_docspythontfall_symbols', 'httpswwwtensorfloworgtutorialskerastext_classification_with_hub', 'courseproject', 'document', 'final', 'video', 'face', 'issue', 'viewing', 'sourcecode', 'members', 'email', 'ids', 'feel', 'free', 'reach', 'questions', 'clarifications', 'pushpitillinoisedu', 'gvmenonillinoisedu', 'hbojjaillinoisedu', 'proposal', 'netids', 'administrative', 'duties', 'chosen', 'subtopics', 'expertsearch', 'automatically', 'webpages', 'relevant', 'goals', 'briefly', 'describe', 'datasets', 'plan', 'subtopic', 'users', 'urls', 'websites', 'leveraged', 'classifying', 'vs', 'nonfaculty', 'try', 'planning', 'evaluate', 'svm', 'dl', 'hugging', 'transformers', 'etc', 'leverage', 'features', 'enhance', 'regularexpression', 'emailid', 'entity', 'recognition', 'mining', 'keyword', 'extraction', 'permits', 'flair', 'adding', 'demonstrate', 'works', 'expected', 'show', 'implementation', 'actually', 'automatic', 'crawler', 'apiconsole', 'utility', 'take', 'home', 'url', 'return', 'working', 'assignment', 'suggested', 'topics', 'metric', 'recent', 'advanced', 'difference', 'regex', 'emailname', 'clearly', 'whether', 'approach', 'top', 'calculate', 'coherence', 'communicate', 'fine', 'emails', 'evaluation', 'baseline', 'language', 'javascript', 'html', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'may', 'main', 'estimated', 'cost', 'analysis', 'current', 'implemented', 'hrs', 'annotation', 'researching', 'overall', 'development', 'functionalities', 'envisioned', 'recursive', 'selfevaluation', 'modification', 'preparation', 'collaboration']
https://github.com/pwasal3/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overview']
https://github.com/quickcatch/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/rakesh-patnaik/CourseProject	"rakesh patnaik (rakeshp2@illinois.edu) 12/13/2020 reproducing a paper: latent aspect rating analysis without keyword supervision visual depiction of the task * input * review texts * overall rating * assumed aspects in the review (location, room, service etc) * output * latent aspects (topic model used to extract text from review corresponding to a topic) * rating associated to each latent aspect * weight associated to each latent aspect * validation * mean squared error from ground truth overall rating. stages in the process * pre-processing (preprocessing_sec5_1.py) * lowercase * remove punctuation characters * remove stop words * lemmatize * processing and analyzing (main.py) * model topics based on ""service"", ""cleanliness"", ""overall"", ""value"", ""location"", ""rooms"", ""sleep quality"" * identify words that correlate to model topics * use regression to identify topic rating to maximize probability to ground truth latent ratings * use regression to identify topic weights to maximize probability to ground truth overall rating * calculate mean squared error to ground truth ratings * output results to results/results.txt and mse to stdout. how to run the code * git clone https://github.com/rakesh-patnaik/courseproject.git * cd courseproject * python3 -m venv env * source env/bin/activate * pip install --upgrade pip * python -m pip install -r requirements.txt * python -m nltk.downloader stopwords * python -m nltk.downloader punkt * python -m nltk.downloader wordnet * python preprocessing_sec5_1.py * python main.py results * results will be output to results/results.txt * mean squared error will be output to stdout * (env) rakesh@rakeshs-macbook-pro-4.local:~/work/uiuc-mcsds/cs410-fall2020/courseproject$ python preprocessing_sec5_1.py (env) rakesh@rakeshs-macbook-pro-4.local:~/work/uiuc-mcsds/cs410-fall2020/courseproject$ python main.py total reviews: 183 mse: 2.99805326964421 project progress report - 11/28/2020 - week 14 1) which tasks have been completed? * test dataset * preprocessing test dataset - section 5.1 of paper 2) which tasks are pending? * aspect identification * aspect rating prediction * aspect weight prediction 3) are you facing any challenges? * identifying visualization methods and parameters to visualize. i will be using python matplotlib but will need to identify the correct parameters to plot. * have yet to test if the code will run on local laptop with the entire dataset following is the proposal to execute cs410 final project. team details i would be working as a individual to execute the final project netids: * rakeshp2 topic of the project this project would try to reproduce the following paper on the topic of latent aspect rating analysis without aspect keyword supervision * hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 review comments by customers and users are a valuable source of feedback for businesses. mining information and quantifying a customer review can help reduce human effort. a generic review usually has the following components: * topics or aspects such as location, service, cleanliness, specific amenities, food etc * a relative weight placed on each of the topics. some topics might carry more weight to a certain customer and hence determines the final rating. latent aspect rating analysis ( lara ) refers to the task of inferring both opinion ratings on topical aspects ( e.g. , location , service of a hotel ) and the relative weights reviewers have placed on each aspect based on review content and the associated overall ratings if a system is fed the aspects to look for in a review it would need human intervention and hence defeating the purpose of large scale data mining on review texts. a generative model that identifies the topics and weights associated with each of the topics would make the system function without supervision and hence scale up. hence this topic of lara without aspect keyword supervision is valuable and interesting. implementation technology python3 dataset: http://times.cs.uiuc.edu/~wang296/data/ project tasks * design * implementation * testing latent aspect rating analysis without aspect keyword supervision implementation for paper https://www.cs.virginia.edu/~hw5x/paper/p618.pdf project topic this project would try to reproduce the following paper on the topic of latent aspect rating analysis without aspect keyword supervision hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 abstract from the paper mining detailed opinions buried in the vast amount of review text data is an important, yet quite challenging task with widespread applications in multiple domains. latent aspect rating analysis (lara) refers to the task of inferring both opinion ratings on topical aspects (e.g., location, service of a hotel) and the relative weights reviewers have placed on each aspect based on review content and the associated overall ratings. a major limitation of previous work on lara is the assumption of pre-specified aspects by keywords. however, the aspect information is not always available, and it may be difficult to pre-define appropriate aspects without a good knowledge about what aspects are actually commented on in the reviews. in this paper, we propose a unified generative model for lara, which does not need pre-specified aspect keywords and simultaneously mines 1) latent topical aspects, 2) rat- ings on each identified aspect, and 3) weights placed on dif- ferent aspects by a reviewer. experiment results on two dif- ferent review data sets demonstrate that the proposed model can effectively perform the latent aspect rating analysis task without the supervision of aspect keywords. because of its generality, the proposed model can be applied to ex- plore all kinds of opinionated text data containing overall sentiment judgments and support a wide range of interest- ing application tasks, such as aspect-based opinion summa- rization, personalized entity ranking and recommendation, and reviewer behavior analysis derived abstract review comments by customers and users are a valuable source of feedback for businesses. mining information and quantifying a customer review can help reduce human effort. a generic review usually has the following components: topics or aspects such as location, service, cleanliness, specific amenities, food etc a relative weight placed on each of the topics. some topics might carry more weight to a certain customer and hence determines the final rating. latent aspect rating analysis ( lara ) refers to the task of inferring both opinion ratings on topical aspects ( e.g. , location , service of a hotel ) and the relative weights reviewers have placed on each aspect based on review content and the associated overall ratings if a system is fed the aspects to look for in a review it would need human intervention and hence defeating the purpose of large scale data mining on review texts. a generative model that identifies the topics and weights associated with each of the topics would make the system function without supervision and hence scale up. hence this topic of lara without aspect keyword supervision is valuable and interesting. run the project ```shell script running the project git clone https://github.com/rakesh-patnaik/courseproject.git cd courseproject python3 -m venv env source env/bin/activate pip install --upgrade pip python -m pip install -r requirements.txt python -m nltk.downloader stopwords python -m nltk.downloader punkt python -m nltk.downloader wordnet python preprocessing_sec5_1.py python main.py ``` demo https://github.com/rakesh-patnaik/courseproject/blob/main/demo_presentation.pdf implementation technology python3 dataset subset of tripadvisor data from http://times.cs.uiuc.edu/~wang296/data/"	['rakesh', 'patnaik', 'rakeshpillinoisedu', 'reproducing', 'paper', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'visual', 'depiction', 'task', 'input', 'review', 'texts', 'overall', 'assumed', 'aspects', 'location', 'room', 'service', 'etc', 'output', 'topic', 'model', 'used', 'extract', 'text', 'corresponding', 'associated', 'weight', 'validation', 'mean', 'squared', 'error', 'ground', 'truth', 'stages', 'process', 'preprocessing', 'preprocessing_sec_py', 'lowercase', 'remove', 'punctuation', 'characters', 'stop', 'words', 'lemmatize', 'processing', 'analyzing', 'mainpy', 'topics', 'based', 'cleanliness', 'value', 'rooms', 'sleep', 'quality', 'identify', 'correlate', 'use', 'regression', 'maximize', 'probability', 'ratings', 'weights', 'calculate', 'results', 'resultsresultstxt', 'mse', 'stdout', 'run', 'code', 'git', 'clone', 'httpsgithubcomrakeshpatnaikcourseprojectgit', 'cd', 'courseproject', 'python', 'venv', 'env', 'source', 'envbinactivate', 'pip', 'install', 'upgrade', 'r', 'requirementstxt', 'nltkdownloader', 'stopwords', 'punkt', 'wordnet', 'rakeshrakeshsmacbookprolocalworkuiucmcsdscsfallcourseproject', 'total', 'reviews', 'project', 'progress', 'report', 'week', 'tasks', 'completed', 'test', 'dataset', 'section', 'pending', 'identification', 'prediction', 'facing', 'challenges', 'identifying', 'visualization', 'methods', 'parameters', 'visualize', 'using', 'matplotlib', 'need', 'correct', 'plot', 'yet', 'local', 'laptop', 'entire', 'following', 'proposal', 'execute', 'cs', 'final', 'team', 'details', 'would', 'working', 'individual', 'netids', 'rakeshp', 'try', 'reproduce', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'comments', 'customers', 'users', 'valuable', 'feedback', 'businesses', 'mining', 'information', 'quantifying', 'customer', 'help', 'reduce', 'human', 'effort', 'generic', 'usually', 'components', 'specific', 'amenities', 'food', 'relative', 'placed', 'might', 'carry', 'certain', 'hence', 'determines', 'lara', 'refers', 'inferring', 'opinion', 'topical', 'eg', 'hotel', 'reviewers', 'content', 'system', 'fed', 'look', 'intervention', 'defeating', 'purpose', 'large', 'scale', 'data', 'generative', 'identifies', 'make', 'function', 'interesting', 'implementation', 'technology', 'httptimescsuiuceduwangdata', 'design', 'testing', 'httpswwwcsvirginiaeduhwxpaperppdf', 'abstract', 'detailed', 'opinions', 'buried', 'vast', 'amount', 'important', 'quite', 'challenging', 'widespread', 'applications', 'multiple', 'domains', 'major', 'limitation', 'previous', 'work', 'assumption', 'prespecified', 'keywords', 'however', 'always', 'available', 'may', 'difficult', 'predefine', 'appropriate', 'good', 'knowledge', 'actually', 'commented', 'propose', 'unified', 'simultaneously', 'mines', 'rat', 'ings', 'identified', 'dif', 'ferent', 'reviewer', 'experiment', 'two', 'sets', 'demonstrate', 'proposed', 'effectively', 'perform', 'generality', 'applied', 'ex', 'plore', 'kinds', 'opinionated', 'containing', 'sentiment', 'judgments', 'support', 'wide', 'range', 'interest', 'ing', 'application', 'aspectbased', 'summa', 'rization', 'personalized', 'entity', 'ranking', 'recommendation', 'behavior', 'derived', 'shell', 'script', 'running', 'demo', 'httpsgithubcomrakeshpatnaikcourseprojectblobmaindemo_presentationpdf', 'subset', 'tripadvisor']
https://github.com/raman162/UofICS410FinalProject	"cs 410 final project progress report: topic mining healthcare data completed tasks [x] curate dataset [x] exported 20,000 labelled (positive/not positive) notes summarizing telehealth care encounters [x] automated de-identification of phi using deid software package [x] exported sample of de-identification to work on topic mining pending tasks [ ] topic mining [ ] prep de-identification notes for topic mining tool [ ] run a series of topic mining trails changing the number of topics trying to be mined [ ] perform analysis of topic coverage for positive notes and non-positive notes [ ] classifier [ ] create a classifier that can determine if a telehealth note summary had a positive outcome for the patient [ ] train on half of the de-identified dataset [ ] run on other half of the de-identified dataset and compare the results current challenges/issues faced due to the export of the providers from medical systems containing a lot of invalid data such as names of lab tests, diseases and specialists, the list had to be manually scrubbed to avoid the deid tool from falsely redacting it thinking they were doctor names. this was a manual tedious process that required review of a few thousand records. detailed progress updates curate dataset 1. exporting labelled dataset two csv files, each containing 10,000 records was exported from the timedoc system. one file named positive_encounters.csv contained only notes that were labelled as a positive outcome due to the telehealth services while another file named no_positive_encounters.csv only contained notes that weren't labelled as a positive outcome for the patient. the format of the exported csv files are as follows: <note_id>,<patient_id>,<purpose>,<duration>,<note> the <purpose> is an array of attributes of the telehealth encounter, it is selected from a pre-defined list and can provide insights to the actions of the telehealth encounter. the <duration> is the total amount of time the telehealth encounter took, and <note> is the free-text nursing note summarizing the encounter that we will be performing topic mining on. 2. automated de-identification of protected health information (phi) to ensure we're adhering to hippa ^[hippa privacy guidelines, https://www.physionet.org/content/deid/1.1/] we have to redact protected health information (phi). this was redacted using the de-identification (deid) software package ^[de-identification software package, https://www.physionet.org/content/deid/1.1/]. for the deid to be effective, it required creating separate files of patient names and identifiers pid_patientname.txt, doctor first names doctor_first_names.txt, doctor last names doctor_last_names.txt, locations local_places.txt, and company names company_names.txt. the pid_patientname.txt was created by referencing all the patients from the two exported csv lists and curating a file formatted with each line as <patient_id>||||<patient_first_name>||||<patient_last_name>. the doctor_first_names.txt and the doctor_last_names.txt files were created by referencing exporting each care team member such as their primary care physician (pcp), radiologist, etc. and writing each name to a new line. both files were scrubbed for duplicates and invalid data. the local_places.txt was created by taking each address related for the patient and writing the city to a town to each line. the company_names.txt file was created by listing out the pharmacies and local healthcare organizations that the patient utilizes and writing each to a new line. for the deid to perform the redaction of phi, it required to be fed the notes in a particular format. so the exported csv file had to be transformed to the following format: start_of_record=<patient_id>||||<document_id>|||| <document_content> ||||end_of_record we accomplished this transformation for both of the csv exported files using a ruby script located at deid/convert_csv_to_text.rb and ran the following commands: ``` convert csv files to deid text format ruby deid/convert_csv_to_text.rb positive_encounters.csv ruby deid/convert_csv_to_text.rb no_positive_encounters.csv ``` the output produced two files named positive_encounters.text and no_positive_encounters.text respectively. afterwards the new text files were copied into the deid directory and we ran the deid perl script to remove the phi using the following commands: ``` redact phi from text files perl deid.pl positive_encounters deid-output.config perl deid.pl no_positive_encounters deid-output.config ``` the output produced two phi redacted files named positive_encounters.res and no_positive_encounters.res. to convert the files back into the csv format, we used the following script located at deid/convert_res_to_csv.rb and ran the following commands: ``` convert redacted res files to csv ruby deid/convert_res_to_csv.rb \ positive_encounters.res \ positive_encounters.csv ruby deid/convert_res_to_csv.rb \ no_positive_encounters.res \ no_positive_encounters.csv ``` the output produced two files named positive_encounters.res.csv and no_positive_encounters.res.csv. 3. sample de-identified notes data since the deid is an automated tool, we had to account for the possibility on not redacting all phi data. to minimize actual phi distributed, 50 samples were taken from both the positive_encounters.res and no_positive_encounters.res file and manually verified to not contain phi. after the verification, the sampled data was shared with the rest of the team so to create scripts that will perform the topic mining and analysis. this was accomplished by utilizing the deid/sample_res.rb and running the following commands: ``` sample res files per manual review ruby deid/sample_res.rb positive_encounters.res 50 ruby deid/sample_res.rb no_positive_encounters.res 50 the output produced two files only containing 50 redacted phi documents named positive_encounters.res-sample-50.res no_positive_encounters.res-sample-50.res ``` after manual verification that all phi was redacted, the sampled files were transformed to the original csv format by running the following commands: ``` convert sampled res files to csv format ruby deid/convert_res_to_csv.rb \ positive_encounters.res-sample-50.res \ positive_encounters.csv ruby deid/convert_res_to_csv.rb \ no_positive_encounters.res-sample-50.res \ no_positive_encounters.csv ``` the output produced two files named positive_encounters.res-sample-50.res.csv and no_positive_encounters.res-sample-50.res.csv. the four sampled redacted phi documents can be provided at request by emailing rsw2@illinois.edu cs 410 final project progress report: topic mining health- care data completed tasks  curate dataset  exported 20,000 labelled (positive/not positive) notes summarizing telehealth care en- counters  automated de-identifcation of phi using deid software package  exported sample of de-identifcation to work on topic mining pending tasks # topic mining # prep de-identifcation notes for topic mining tool # run a series of topic mining trails changing the number of topics trying to be mined # perform analysis of topic coverage for positive notes and non-positive notes # classifer # create a classifer that can determine if a telehealth note summary had a positive outcome for the patient # train on half of the de-identifed dataset # run on other half of the de-identifed dataset and compare the results current challenges/issues faced due to the export of the providers from medical systems containing a lot of invalid data such as names of lab tests, diseases and specialists, the list had to be manually scrubbed to avoid the deid tool from falsely redacting it thinking they were doctor names. this was a manual tedious process that required review of a few thousand records. detailed progress updates curate dataset 1. exporting labelled dataset two csv fles, each containing 10,000 records was exported from the timedoc system. one fle named positive_encounters.csv contained only notes that were labelled as a positive outcome due to the telehealth services while another fle named no_positive_encounters.csv only contained notes that weren't labelled as a positive outcome for the patient. the format of the exported csv fles are as follows: <note_id>,<patient_id>,<purpose>,<duration>,<note> the <purpose> is an array of attributes of the telehealth encounter, it is selected from a pre-defned list and can provide insights to the actions of the telehealth encounter. the <duration> is the total amount of time the telehealth encounter took, and <note> is the free-text nursing note summarizing the encounter that we will be performing topic mining on. 2. automated de-identifcation of protected health information (phi) to ensure we're adhering to hippa 1 we have to redact protected health information (phi). this was redacted using the de-identifcation (deid) software package 2. for the deid to be efec- tive, it required creating separate fles of patient names and identifers pid_patientname.txt, doc- 1hippa privacy guidelines, https://www.physionet.org/content/deid/1.1/ 2de-identifcation software package, https://www.physionet.org/content/deid/1.1/ 1 tor frst names doctor_first_names.txt, doctor last names doctor_last_names.txt, locations local_places.txt, and company names company_names.txt. the pid_patientname.txt was created by referencing all the patients from the two exported csv lists and curating a fle format- ted with each line as <patient_id>||||<patient_first_name>||||<patient_last_name>. the doctor_first_names.txt and the doctor_last_names.txt fles were created by referencing ex- porting each care team member such as their primary care physician (pcp), radiologist, etc. and writing each name to a new line. both fles were scrubbed for duplicates and invalid data. the local_places.txt was created by taking each address related for the patient and writing the city to a town to each line. the company_names.txt fle was created by listing out the pharmacies and local healthcare organizations that the patient utilizes and writing each to a new line. for the deid to perform the redaction of phi, it required to be fed the notes in a particular format. so the exported csv fle had to be transformed to the following format: start_of_record=<patient_id>||||<document_id>|||| <document_content> ||||end_of_record we accomplished this transformation for both of the csv exported fles using a ruby script located at deid_support/convert_csv_to_text.rb and ran the following commands: # convert csv files to deid text format ruby deid_support/convert_csv_to_text.rb positive_encounters.csv ruby deid_support/convert_csv_to_text.rb no_positive_encounters.csv the output produced two fles named positive_encounters.text and no_positive_encounters.text respectively. afterwards the new text fles were copied into the deid directory and we ran the deid perl script to remove the phi using the following commands: # redact phi from text files perl deid.pl positive_encounters deid-output.config perl deid.pl no_positive_encounters deid-output.config the output produced two phi redacted fles named positive_encounters.res and no_positive_encounters.res. to convert the fles back into the csv format, we used the following script located at deid_support/convert_res_to_csv.rb and ran the following commands: # convert redacted res files to csv ruby deid_support/convert_res_to_csv.rb \ positive_encounters.res \ positive_encounters.csv ruby deid_support/convert_res_to_csv.rb \ no_positive_encounters.res \ no_positive_encounters.csv the output produced two fles named positive_encounters.res.csv and no_positive_encounters.res.csv. 3. sample de-identifed notes data since the deid is an automated tool, we had to account for the possibility on not redacting all phi data. to minimize actual phi distributed, 50 samples were taken from both the positive_encounters.res and no_positive_encounters.res fle and manually verifed to not contain phi. after the verifcation, the sampled data was shared with the rest of the team so to create scripts that will perform the topic mining and analysis. this was accomplished by utilizing the deid_support/sample_res.rb and running the following commands: # sample res files per manual review 2 ruby deid_support/sample_res.rb positive_encounters.res 50 ruby deid_support/sample_res.rb no_positive_encounters.res 50 the output produced two fles only containing 50 redacted phi documents named positive_encounters.res-sample-50.res no_positive_encounters.res-sample-50.res after manual verifcation that all phi was redacted, the sampled fles were transformed to the original csv format by running the following commands: # convert sampled res files to csv format ruby deid_support/convert_res_to_csv.rb \ positive_encounters.res-sample-50.res \ positive_encounters.csv ruby deid_support/convert_res_to_csv.rb \ no_positive_encounters.res-sample-50.res \ no_positive_encounters.csv the output produced two fles named positive_encounters.res-sample-50.res.csv and no_positive_encounters.res-sample-50.res.csv. the four sampled redacted phi documents can be provided at request by emailing rsw2@illinois.edu 3 cs 410 final project proposal: topic mining healthcare data team members satish reddy asi- sasi2@illinois.edu srikanth bharadwaz samudrala - sbs7@illinois.edu raman walwyn-venugopal (project coordinator/team leader) - rsw2@illinois.edu motivation timedoc is a telemedicine company that focuses on ensuring patients receive proactive healthcare to improve the treatment of their chronic diseases. since 2015, timedoc has accumulated roughly 1.8 million unstructured text documents created by licensed healthcare professionals that summarize telemedicine encounters with patients. out of that total dataset there are 13,496 unique documents that have been labelled as a positive outcome for the patient by their author. a positive outcome is very important for a patient as it indicates that their health was improved which also translates into them valuing the telemedicine service. utilizing timedoc's data, our primary goal is to identify more patients that had these positive outcomes and identify patients that are more likely to have a positive outcome. to accomplish this our team plans to primarily use python and open source tools as described in our solution below. solution our assumption is that there is a relation between a patient's profile and their likelihood of having a positive outcome. if this assumption is correct we can begin recommending patients with certain profiles for healthcare professionals to focus on. curate dataset expected duration: 20 hours expected completion date: november 15th to ensure we're adhering to hippa ^[hippa privacy guidelines, https://www.hhs.gov/hipaa/for-professionals/privacy/index.html] guidelines. the telemedicine encounter document data and the patient profiles need go through a patient health information ^[patient health information, https://www.hipaajournal.com/what-is-protected-health-information/] (phi) de-identification process. we will automate the phi de-identification for free text fields on the patient profile and the telemedicine documents utilizing a de-identification software package ^[de-identification software package, https://www.physionet.org/content/deid/1.1/]. all structured fields of a patient profile known to contain phi will be replaced as well. topic mining and analysis on dataset expected duration: 20 hours expected completion date: november 24th we plan on mining the topic models using latent dirichlet allocation ^[latent dirichlet allocation (lda), https://arxiv.org/pdf/1711.04305.pdf] for both the de-identified encounter telemedicine and patient profiles from the curated dataset. we plan on using gensim ^[gensim: python library for topic modeling, https://pypi.org/project/gensim/] and nltk ^[nltk: natural language toolkit python package, https://pypi.org/project/nltk/] in python to accomplish this task. after completing the topic modeling we will investigate if there is a significant difference between telemedicine encounters that were labelled as a success story versus ones that were not. we will also be investigating if there is a significant difference between the patient profiles that had success stories versus the patient profiles that do not have any success stories. recommendation expected duration: 20 hours expected completion date: december 5th after we have identified the topics of telemedicine documents and patients that had positive outcomes, we would like to identify other patients that may fit this criteria. we can accomplish this by indexing all the patient profiles by their mined topic data, the likelihood of the topic will be used as the score for the vector. we will then recommend patients that have topic profiles similar to the topics of patient profiles that had positive outcomes. the similarity score will be calculated using one of the newer variations of okapi bm25. in addition to this, we can also design a similar recommendation system to attempt to identify telemedicine documents that may contain a positive outcome for out patient. the utility for both of these systems will be evaluated by licensed healthcare professionals at timedoc. miscellaneous other libraries that may be used but not discussed are listed but not limited to; pyspark ^[pyspark, https://www.gangboard.com/blog/what-is-pyspark], scipy ^[scipy, https://www.scipy.org/scipylib/index.html], metapy ^[metapy, https://github.com/meta-toolkit/metapy], pandas, ^[pandas, https://pandas.pydata.org/], numpy, ^[numpy, https://numpy.org/] and whoosh ^[whoosh, https://whoosh.readthedocs.io/en/latest/intro.html]. cs 410 final project proposal: topic mining healthcare data team members * satish reddy asi- sasi2@illinois.edu * srikanth bharadwaz samudrala - sbs7@illinois.edu * raman walwyn-venugopal (project coordinator/team leader) - rsw2@illinois.edu motivation timedoc is a telemedicine company that focuses on ensuring patients receive proactive healthcare to improve the treatment of their chronic diseases. since 2015, timedoc has accumulated roughly 1.8 million unstructured text documents created by licensed healthcare professionals that summarize telemedicine encounters with patients. out of that total dataset there are 13,496 unique documents that have been labelled as a positive outcome for the patient by their author. a positive outcome is very important for a patient as it indicates that their health was improved which also translates into them valuing the telemedicine service. utilizing timedoc's data, our primary goal is to identify more patients that had these positive outcomes and identify patients that are more likely to have a positive outcome. to accomplish this our team plans to primarily use python and open source tools as described in our solution below. solution our assumption is that there is a relation between a patient's profle and their likelihood of having a positive outcome. if this assumption is correct we can begin recommending patients with certain profles for healthcare professionals to focus on. curate dataset expected duration: 20 hours expected completion date: november 15th to ensure we're adhering to hippa 1 guidelines. the telemedicine encounter document data and the patient profles need go through a patient health information 2 (phi) de-identifcation process. we will automate the phi de-identifcation for free text felds on the patient profle and the telemedicine documents utilizing a de-identifcation software package 3. all structured felds of a patient profle known to contain phi will be replaced as well. topic mining and analysis on dataset expected duration: 20 hours expected completion date: november 24nd we plan on mining the topic models using latent dirichlet allocation 4 for both the de-identifed encounter telemedicine and patient profles from the curated dataset. we plan on using gensim 5 and nltk 6 in python to accomplish this task. 1hippa privacy guidelines, https://www.hhs.gov/hipaa/for-professionals/privacy/index.html 2patient health information, https://www.hipaajournal.com/what-is-protected-health-information/ 3de-identifcation software package, https://www.physionet.org/content/deid/1.1/ 4latent dirichlet allocation (lda), https://arxiv.org/pdf/1711.04305.pdf 5gensim: python library for topic modeling, https://pypi.org/project/gensim/ 6nltk: natural language toolkit python package, https://pypi.org/project/nltk/ 1 after completing the topic modeling we will investigate if there is a signifcant diference between telemedicine encounters that were labelled as a success story versus ones that were not. we will also be investigating if there is a signifcant diference between the patient profles that had success stories versus the patient profles that do not have any success stories. recommendation expected duration: 20 hours expected completion date: december 5th after we have identifed the topics of telemedicine documents and patients that had positive out- comes, we would like to identify other patients that may ft this criteria. we can accomplish this by indexing all the patient profles by their mined topic data, the likelihood of the topic will be used as the score for the vector. we will then recommend patients that have topic profles similar to the topics of patient profles that had positive outcomes. the similarity score will be calculated using one of the newer variations of okapi bm25. in addition to this, we can also design a similar recommendation system to attempt to identify telemedicine documents that may contain a positive outcome for out patient. the utility for both of these systems will be evaluated by licensed healthcare professionals at time- doc. miscellaneous other libraries that may be used but not discussed are listed but not limited to; pyspark 7, scipy 8, metapy 9, pandas, 10, numpy, 11 and whoosh 12. 7pyspark, https://www.gangboard.com/blog/what-is-pyspark 8scipy, https://www.scipy.org/scipylib/index.html 9metapy, https://github.com/meta-toolkit/metapy 10pandas, https://pandas.pydata.org/ 11numpy, https://numpy.org/ 12whoosh, https://whoosh.readthedocs.io/en/latest/intro.html 2 cs 410 - final project: topic mining healthcare data & classification team members raman walwyn-venugopal - rsw2@illinois.edu srikanth bharadwaz samudrala - sbs7@illinois.edu satish reddy asi - sasi2@illinois.edu quick links proposal pdf progress report pdf video demo (youtube) overview the goal of this project is to perform topic mining and classification on telehealth encounter nursing notes for notes that documented a positive outcome for the patient form the telehealth services. to accomplish this, we divided the project into four steps; 1. curating the dataset 2. build topic miner and mine topics from dataset 3. perform analysis on topics 4. build binary classifier that attempts to predict if a document is a positive outcome for the patient curating dataset requirements: - ruby 2.x - perl 5.x note: this code was ran on ubuntu 18.04 and ubuntu 20.04 exporting raw dataset the source of the data is from timedochealth that has a care team that focuses on providing telehealth services to patients with multiple chronic diseases. two csv files, each containing 10,000 records were exported from the timedoc system. one file named positive_encounters.csv contained only notes that were labelled as a positive outcome due to the telehealth services while another file named no_positive_encounters.csv only contained notes that weren't labelled as a positive outcome for the patient. the format of the exported csv files are as follows: <note_id>,<patient_id>,<purpose>,<duration>,<note>. <purpose> is an array of attributes of the telehealth encounter, it is selected from a pre-defined list and can provide insights to the actions of the telehealth encounter. <duration> is the total amount of time the telehealth encounter took <note> is the free-text nursing note summarizing the encounter. this data is what the topic mining and classification will be performed automating de-identification of protected health information (phi) to ensure we're adhering to hippa privacy guidelines, protected health information (phi) was redacted using de-identification (deid) software package. for the deid to be effective, it had to be configured with the following lists: - pid_patientname.txt - patient names and identifiers. was created by referencing all the patients from the two exported csv lists and curating a file formatted with each line as <patient_id>||||<patient_first_name>||||<patient_last_name> - doctor_first_names.txt - doctor first names. created by exporting each care team member for the patient such as their primary care provider, radiologist, etc. - doctor_last_names.txt - doctor last names. created using same strategy as doctor first names. - unambig_local_places.txt - locations near the patient. created using the cities, towns of addresses for patients and businesses near them. - company_names.txt - company names. created by listing out local healthcare organizations surrounding the patient. for the deid to perform the redaction of phi, it required to be fed the notes in a particular format. so the exported csv file had to be transformed to the following format: start_of_record=<patient_id>||||<document_id>|||| <document_content> ||||end_of_record we accomplished this transformation for both of the csv exported files using a ruby script located at deid/convert_csv_to_text.rb and ran the following commands: ``` convert csv files to deid text format ruby deid/convert_csv_to_text.rb demo_data/positive_encounters.csv ruby deid/convert_csv_to_text.rb demo_data/no_positive_encounters.csv ``` the output produced two files named positive_encounters.text and no_positive_encounters.text respectively. afterwards we ran the deid perl script to remove the phi using the following commands: ``` enter deid directory cd deid redact phi from text files perl deid.pl ../demo_data/positive_encounters deid-output.config perl deid.pl ../demo_data/no_positive_encounters deid-output.config ``` the output produced two phi redacted files named positive_encounters.res and no_positive_encounters.res. to convert the files back into the csv format, we used the following script located at deid/convert_res_to_csv.rb and ran the following commands: ``` convert redacted res files to csv ruby deid/convert_res_to_csv.rb \ demo_data/positive_encounters.res \ demo_data/positive_encounters.csv ruby deid/convert_res_to_csv.rb \ demo_data/no_positive_encounters.res \ demo_data/no_positive_encounters.csv ``` the output produced two files named positive_encounters.res.csv and no_positive_encounters.res.csv. note: since the deid is an automated too, we have to account for the possibility of not redacting all phi data. to minimize actual phi distributed 50 samples were taken form both the positive_encounters.res and no_positive_encounters.res file and manually verified to not contain phi. this sampled may be provided upon request by emailing rsw2@illinois.edu topic mining requirements: - python 3.x python libraries used: - nltk - pandas - numpy - matplotlib/pylab - regex extracting documents the source to extract documents from is the notes. the telemedicine responses are saved as csv files with multiple fields. ""notes"" from the response file is fed as document input to our plsa implementation. the input responses file is in csv file and the data is delimited by "","" character. generating stop words stop words are generated using standard python nltk libraries. the stopwords are saved as file and is used as input for topic_miner program. stop words can be manually edited adding any tele-medicine specific words such as patient, call, treatment, phone etc.. since these are repeated frequently in every note. stop words program is run separately and the file is saved under ""patient_data"" folder where the input files are placed under. mining topics from documents the topic_miner is run with data-file (in csv format), stop-words file as input. the additional arguments to the program include number of topics, max iterations, threshold, number of topic words. the arguments also include the path to output files: - document topic coverage - topic word coverage - vocabulary - topic words more details about the module are available at: topic miner note: due to the slow performance of our manually written plsa topic miner, we created topic miner v2 that uses an open source python plsa package and produces the same documents as our home-crafted plsa topic miner. setup change to directory of topic miner cd topic_miner_v2 create new virtual environment python -m venv venv activate virtual environment source venv/bin/activate install required packages pip install -r requirements.txt run topic miner ``` python topic_miner.py python topic_miner.py ../demo_data/all_encounters.res.csv 10 ``` output would be: ``` topic coverage of topic probability per document in corpus all_encounters.res.csv.10-doc-topic-cov.txt grouping of words and probabilities of topic per line all_encounters.res.csv.10-topic-word-probs-grouped.txt all the probabilities for each topic per line all_encounters.res.csv.10-topic-word-probs.txt all the words for each topic per line all_encounters.res.csv.10-topics.txt vocabulary of corpus all_encounters.res.csv.vocab ``` topic analysis requirements: - python 3.x this topic analysis script performs analysis on the results of the topic miner when both the positive and non-positive encounters are included in the whole corpus. it attempts to: 1. identify which topics are related to positive outcomes and which topics are related to non-positive outcomes 2. pull the top words from the positive outcome topics and non-positive outcome topics 3. highlight which top words from positive and non-positive overlap with each other versus which words are unique to their own topics 4. generates 3 files: pos-non-pos-topics.txt, top-pos-words.txt and top-non-pos-words.txt usage python topic_analysis/topic_analysis.py \ demo_data/all_encounters.res.csv.10-doc-topic-cov.txt \ demo_data/all_encounters.res.csv.10-topics.txt classifier requirements: - python 3.x - python virtual environment package (included in python standard library) overview of functionality the text classifier is responsible for reviewing the notes of the telehealth encounters and classifying the note as positive outcome versus non-positive outcome. the classifier module has the following features: - load positive and non-positive csv files generated from the phi de-identification process - clean data by removing phi redaction sections, non-alphanumeric characters, extra white space, lemmatization, and stop words - generate a classifier using the randomforestclassifier from sklearn - evaluate classifier by collecting recall, precision, f1 score, micro averages per category, and the overall classification accuracy - store classifier to a file - load classifier from a file - score optimizer that steps through a combination of number of features and estimators for the classifier model and returns the optimal inputs and score the process of generating the classifier requires the docs to be cleaned and vectorized into tf-idf weights. the vectorized version of the corpus was then split into two sets; 20% for training and 80% for testing. the model used for training is the randomforestclassifier from sklearn which is based on a random forest algorithm that uses a 'random forest' of numerous decision trees. the core of the algorithm follows the steps below: - pick n random records from the dataset - build a decision tree on the randomly selected n records - choose the number of trees used in the algorithm and repeat steps 1 and 2 the algorithm is ideal for classification because it is known to reduce biases with the use of multiple randomly formed decision trees and it performs well when unknown data points are introduced. disadvantages of the algorithm is that the complexity causes it to take longer to train and process due to the amount of decision trees. setup ``` change directory to classifier cd classifier initlize python virtual evnrionment python -m venv venv source venv/bin/activate install dependencies pip install -r requirements.txt ``` usage be sure to update the following constants positive_csv_file and no_positive_csv_file to the true file paths of the redacted data produced from the de-identification process. also update the classifier_file for where you want to store the classifier. the classifier module can be run as a script to quickly generate a classifier with the pre-optimized defaults determined from testing. python classifier.py this will load the data, clean the data, generate a classifier, print out the evaluation metrics and store it to the path defined in the classifier_file constant. an example of the classifier evaluation is shown below. ``` precision recall f1-score support non-positive 0.88 0.95 0.91 2014 positive 0.94 0.85 0.90 1842 accuracy 0.91 3856 macro avg 0.91 0.90 0.90 3856 weighted avg 0.91 0.91 0.90 3856 accuracy: 0.9050829875518672 ``` the classifier can be loaded and used on new documents. enter the python console and run the following commands ``` import classifier.py text_classifier = classifier.load(classifier.classifier_file) docs = [ 'scheduled transportation for patient appointment on thursday', 'discussed personal goals with patient for patient to work on quitting smoking' ] predictions = classifier.predict(text_classifier, docs) print(predictions) ``` optimizations the classification accuracy score was optimized by varying the number of features and estimators (decision trees) used in the algorithm. this was a simple iterative algorithm that calculated the accuracy for each feature/estimator combination and then returned the optimal score and the combination used to accomplish. the classifier module has an optimize_score function that accepts the following arguments: docs (default: to cleaned version of dataset) - complete corpus of documents labels (default to dataset defined) - labels each document min_features (default: 1000)- start number of features to use max_features (default: 5000)- max number of features to use feature_step (default: 250) - amount to increase number of features by min_df (default: 10) - minimum document frequency for a feature to be selected max_df (default: 0.8) - maximum document frequency for a feature to be selected min_estimators (default: 750) - start number of estimators to use max_estimators (default: 2500) - max number of estimators to use estimator_step (default: 250) - amount to increase number of estimators by it outputs a dictionary that contains the following keys: feature_steps - varying features used estimator_steps - varying estimators used scores - 2-dimension numpy array containing all scores generated. shape is feature stpes length x estimator steps length optimal_score - the highest accuracy result from the iterations optimal_num_features - the number of features used to generate optimal score optimal_num_estimators - the number of estimators used to generate optimal score the optimal number of features used was determined to be 1500 while the optimal number of estimators was determined to be 750. bonus: classifying the top positive and top non-positive topic words as a bonus test, we tested the classifier predictions on the top positive and non-positive words generated from the topic analysis step. ``` enter python console python import classifier module import classifier load stored classifier text_classifier = classifier.load(classifier.classifier_file) ``` classify top positive words f = open('../demo_data/all_encounters.res.csv.2-topics.txt.top-pos-words.txt', 'r') pos_docs = [f.read()] f.close() print('top pos words: ', pos_docs[0]) print('top pos words classifier predictions: ', classifier.predict(text_classifier, pos_docs)[0]) classify top non-positive words f = open('../demo_data/all_encounters.res.csv.2-topics.txt.top-non-pos-words.txt', 'r') non_pos_docs = [f.read()] f.close() print('top non pos words: ', non_pos_docs[0]) print('top non pos words classifier predictions: ', classifier.predict(text_classifier, non_pos_docs)[0]) output is ``` top pos words: pharmacy appointment medication service information poa cuff call care sugar pressure concern blood morning meal state report insulin transportation time top pos words classifier predictions: positive top non pos words: pharmacy medication education exercise today appt goal inhaler level weight plan pressure knee minute state phone transportation day time ncm top non pos words classifier predictions: non-positive ``` conclusion automating the redaction of phi data is plausible and should be used by data scientists trying to perform analysis on free text health data to respect patient privacy and adhere to hippa rules. one thing to note is that the redaction process is slow on large datasets. redacting phi on the 20,000 document dataset took nearly an hour running on an intel i7 10th gen processor. to avoid this issue in a production workflow with much larger datasets, an automated redacted pipeline should be considered where as soon as a note is created, a redaction process is triggered and stored in a separate bucket. when performing topic mining with our home-crafted plsa topic miner, we noted that performance was poor on large datasets when compared to an open-source plsa python package. this was likely due to unoptimized implementation of the em-algorithm when handling large matrices. while performing topic analysis, we noticed that the fewer number of topics generated made it easier to relate topics to positive outcomes and other topics to non-positive outcomes. as we increased the topic count when performing plsa, this was no longer the case and the distributions of topics among positive corpus and non-positive corpus were similar. from this behaviour, we can infer that there is definitely a difference of themes discussed in positive outcomes but that there is definitely overlapping themes. the classifier we created performs only well on large datasets. on the sampled and demo datasets of only 100 records, the maximum classification accuracy that was achieved was 85%. when training the classifier on the complete corpus of 20,000 documents, the classification accuracy jumped to 90%. these maximum scores were calculated by using an iterative algorithm that varied the number of features and the number of estimators used by the classifier. the classifier consistently had better precision at 94% when labelling positive documents versus non-positive but had worse recall at 85% for all positive documents. this means that a user can trust the result of a classification of a positive document but cannot guarantee all to be retrieved. this would be preferred for a recommendation engine. bonus: the classifier was also tested on the documents containing the top words from positive and non-positive topics generated from the topic analysis step. the classifier correctly classified the doc containing words from positive topics as 'positive' and the doc containing words from non-positive topics as 'non-positive'."	['cs', 'final', 'project', 'progress', 'report', 'topic', 'mining', 'healthcare', 'data', 'completed', 'tasks', 'x', 'curate', 'dataset', 'exported', 'labelled', 'positivenot', 'positive', 'notes', 'summarizing', 'telehealth', 'care', 'encounters', 'automated', 'deidentification', 'phi', 'using', 'deid', 'software', 'package', 'sample', 'work', 'pending', 'prep', 'tool', 'run', 'series', 'trails', 'changing', 'number', 'topics', 'trying', 'mined', 'perform', 'analysis', 'coverage', 'nonpositive', 'classifier', 'create', 'determine', 'note', 'summary', 'outcome', 'patient', 'train', 'half', 'deidentified', 'compare', 'results', 'current', 'challengesissues', 'faced', 'due', 'export', 'providers', 'medical', 'systems', 'containing', 'lot', 'invalid', 'names', 'lab', 'tests', 'diseases', 'specialists', 'list', 'manually', 'scrubbed', 'avoid', 'falsely', 'redacting', 'thinking', 'doctor', 'manual', 'tedious', 'process', 'required', 'review', 'thousand', 'records', 'detailed', 'updates', 'exporting', 'two', 'csv', 'files', 'timedoc', 'system', 'one', 'file', 'named', 'positive_encounterscsv', 'contained', 'services', 'another', 'no_positive_encounterscsv', 'werent', 'format', 'follows', 'note_idpatient_idpurposedurationnote', 'purpose', 'array', 'attributes', 'encounter', 'selected', 'predefined', 'provide', 'insights', 'actions', 'duration', 'total', 'amount', 'time', 'took', 'freetext', 'nursing', 'performing', 'protected', 'health', 'information', 'ensure', 'adhering', 'hippa', 'privacy', 'guidelines', 'httpswwwphysionetorgcontentdeid', 'redact', 'redacted', 'effective', 'creating', 'separate', 'identifiers', 'pid_patientnametxt', 'first', 'doctor_first_namestxt', 'last', 'doctor_last_namestxt', 'locations', 'local_placestxt', 'company', 'company_namestxt', 'created', 'referencing', 'patients', 'lists', 'curating', 'formatted', 'line', 'patient_idpatient_first_namepatient_last_name', 'team', 'member', 'primary', 'physician', 'pcp', 'radiologist', 'etc', 'writing', 'name', 'new', 'duplicates', 'taking', 'address', 'related', 'city', 'town', 'listing', 'pharmacies', 'local', 'organizations', 'utilizes', 'redaction', 'fed', 'particular', 'transformed', 'following', 'start_of_recordpatient_iddocument_id', 'document_content', 'end_of_record', 'accomplished', 'transformation', 'ruby', 'script', 'located', 'deidconvert_csv_to_textrb', 'ran', 'commands', 'convert', 'text', 'output', 'produced', 'positive_encounterstext', 'no_positive_encounterstext', 'respectively', 'afterwards', 'copied', 'directory', 'perl', 'remove', 'deidpl', 'positive_encounters', 'deidoutputconfig', 'no_positive_encounters', 'positive_encountersres', 'no_positive_encountersres', 'back', 'used', 'deidconvert_res_to_csvrb', 'res', 'positive_encountersrescsv', 'no_positive_encountersrescsv', 'since', 'account', 'possibility', 'minimize', 'actual', 'distributed', 'samples', 'taken', 'verified', 'contain', 'verification', 'sampled', 'shared', 'rest', 'scripts', 'utilizing', 'deidsample_resrb', 'running', 'per', 'documents', 'positive_encountersressampleres', 'no_positive_encountersressampleres', 'original', 'positive_encountersressamplerescsv', 'no_positive_encountersressamplerescsv', 'four', 'provided', 'request', 'emailing', 'rswillinoisedu', 'en', 'counters', 'deidentifcation', 'classifer', 'deidentifed', 'fles', 'fle', 'predefned', 'efec', 'tive', 'identifers', 'doc', 'tor', 'frst', 'ted', 'ex', 'porting', 'deid_supportconvert_csv_to_textrb', 'deid_supportconvert_res_to_csvrb', 'verifed', 'verifcation', 'deid_supportsample_resrb', 'proposal', 'members', 'satish', 'reddy', 'asi', 'sasiillinoisedu', 'srikanth', 'bharadwaz', 'samudrala', 'sbsillinoisedu', 'raman', 'walwynvenugopal', 'coordinatorteam', 'leader', 'motivation', 'telemedicine', 'focuses', 'ensuring', 'receive', 'proactive', 'improve', 'treatment', 'chronic', 'accumulated', 'roughly', 'million', 'unstructured', 'licensed', 'professionals', 'summarize', 'unique', 'author', 'important', 'indicates', 'improved', 'also', 'translates', 'valuing', 'service', 'timedocs', 'goal', 'identify', 'outcomes', 'likely', 'accomplish', 'plans', 'primarily', 'use', 'python', 'open', 'source', 'tools', 'described', 'solution', 'assumption', 'relation', 'profile', 'likelihood', 'correct', 'begin', 'recommending', 'certain', 'profiles', 'focus', 'expected', 'hours', 'completion', 'date', 'november', 'th', 'httpswwwhhsgovhipaaforprofessionalsprivacyindexhtml', 'document', 'need', 'go', 'httpswwwhipaajournalcomwhatisprotectedhealthinformation', 'automate', 'free', 'fields', 'structured', 'known', 'replaced', 'well', 'plan', 'models', 'latent', 'dirichlet', 'allocation', 'lda', 'httpsarxivorgpdfpdf', 'curated', 'gensim', 'library', 'modeling', 'httpspypiorgprojectgensim', 'nltk', 'natural', 'language', 'toolkit', 'httpspypiorgprojectnltk', 'task', 'completing', 'investigate', 'significant', 'difference', 'success', 'story', 'versus', 'ones', 'investigating', 'stories', 'recommendation', 'december', 'identified', 'would', 'like', 'may', 'fit', 'criteria', 'indexing', 'score', 'vector', 'recommend', 'similar', 'similarity', 'calculated', 'newer', 'variations', 'okapi', 'bm', 'addition', 'design', 'attempt', 'utility', 'evaluated', 'miscellaneous', 'libraries', 'discussed', 'listed', 'limited', 'pyspark', 'httpswwwgangboardcomblogwhatispyspark', 'scipy', 'httpswwwscipyorgscipylibindexhtml', 'metapy', 'httpsgithubcommetatoolkitmetapy', 'pandas', 'httpspandaspydataorg', 'numpy', 'httpsnumpyorg', 'whoosh', 'httpswhooshreadthedocsioenlatestintrohtml', 'profle', 'profles', 'felds', 'nd', 'signifcant', 'diference', 'identifed', 'comes', 'ft', 'classification', 'quick', 'links', 'pdf', 'video', 'demo', 'youtube', 'overview', 'documented', 'form', 'divided', 'steps', 'build', 'miner', 'mine', 'binary', 'attempts', 'predict', 'requirements', 'code', 'ubuntu', 'raw', 'timedochealth', 'providing', 'multiple', 'performed', 'automating', 'configured', 'provider', 'strategy', 'unambig_local_placestxt', 'near', 'cities', 'towns', 'addresses', 'businesses', 'surrounding', 'demo_datapositive_encounterscsv', 'demo_datano_positive_encounterscsv', 'enter', 'cd', 'demo_datapositive_encounters', 'demo_datano_positive_encounters', 'demo_datapositive_encountersres', 'demo_datano_positive_encountersres', 'upon', 'matplotlibpylab', 'regex', 'extracting', 'extract', 'responses', 'saved', 'response', 'input', 'plsa', 'implementation', 'delimited', 'character', 'generating', 'stop', 'words', 'generated', 'standard', 'stopwords', 'topic_miner', 'program', 'edited', 'adding', 'specific', 'call', 'phone', 'repeated', 'frequently', 'every', 'separately', 'patient_data', 'folder', 'placed', 'datafile', 'additional', 'arguments', 'include', 'max', 'iterations', 'threshold', 'path', 'word', 'vocabulary', 'details', 'module', 'available', 'slow', 'performance', 'written', 'v', 'uses', 'produces', 'homecrafted', 'setup', 'change', 'topic_miner_v', 'virtual', 'environment', 'venv', 'activate', 'venvbinactivate', 'install', 'packages', 'pip', 'r', 'requirementstxt', 'topic_minerpy', 'demo_dataall_encountersrescsv', 'probability', 'corpus', 'all_encountersrescsvdoctopiccovtxt', 'grouping', 'probabilities', 'all_encountersrescsvtopicwordprobsgroupedtxt', 'all_encountersrescsvtopicwordprobstxt', 'all_encountersrescsvtopicstxt', 'all_encountersrescsvvocab', 'performs', 'included', 'whole', 'pull', 'top', 'highlight', 'overlap', 'generates', 'posnonpostopicstxt', 'topposwordstxt', 'topnonposwordstxt', 'usage', 'topic_analysistopic_analysispy', 'demo_dataall_encountersrescsvdoctopiccovtxt', 'demo_dataall_encountersrescsvtopicstxt', 'functionality', 'responsible', 'reviewing', 'classifying', 'features', 'load', 'clean', 'removing', 'sections', 'nonalphanumeric', 'characters', 'extra', 'white', 'space', 'lemmatization', 'generate', 'randomforestclassifier', 'sklearn', 'evaluate', 'collecting', 'recall', 'precision', 'f', 'micro', 'averages', 'category', 'overall', 'accuracy', 'store', 'optimizer', 'combination', 'estimators', 'model', 'returns', 'optimal', 'inputs', 'requires', 'docs', 'cleaned', 'vectorized', 'tfidf', 'weights', 'version', 'split', 'sets', 'training', 'testing', 'based', 'random', 'forest', 'algorithm', 'numerous', 'decision', 'trees', 'core', 'pick', 'n', 'tree', 'randomly', 'choose', 'repeat', 'ideal', 'reduce', 'biases', 'formed', 'unknown', 'points', 'introduced', 'disadvantages', 'complexity', 'causes', 'take', 'longer', 'initlize', 'evnrionment', 'dependencies', 'sure', 'update', 'constants', 'positive_csv_file', 'no_positive_csv_file', 'true', 'paths', 'classifier_file', 'want', 'quickly', 'preoptimized', 'defaults', 'determined', 'classifierpy', 'print', 'evaluation', 'metrics', 'defined', 'constant', 'example', 'shown', 'fscore', 'support', 'macro', 'avg', 'weighted', 'loaded', 'console', 'import', 'text_classifier', 'classifierloadclassifierclassifier_file', 'scheduled', 'transportation', 'appointment', 'thursday', 'personal', 'goals', 'quitting', 'smoking', 'predictions', 'classifierpredicttext_classifier', 'printpredictions', 'optimizations', 'optimized', 'varying', 'simple', 'iterative', 'featureestimator', 'returned', 'optimize_score', 'function', 'accepts', 'default', 'complete', 'labels', 'min_features', 'start', 'max_features', 'feature_step', 'increase', 'min_df', 'minimum', 'frequency', 'feature', 'max_df', 'maximum', 'min_estimators', 'max_estimators', 'estimator_step', 'outputs', 'dictionary', 'contains', 'keys', 'feature_steps', 'estimator_steps', 'scores', 'dimension', 'shape', 'stpes', 'length', 'estimator', 'optimal_score', 'highest', 'result', 'optimal_num_features', 'optimal_num_estimators', 'bonus', 'test', 'tested', 'step', 'stored', 'classify', 'opendemo_dataall_encountersrescsvtopicstxttopposwordstxt', 'pos_docs', 'fread', 'fclose', 'printtop', 'pos', 'opendemo_dataall_encountersrescsvtopicstxttopnonposwordstxt', 'non_pos_docs', 'non', 'pharmacy', 'medication', 'poa', 'cuff', 'sugar', 'pressure', 'concern', 'blood', 'morning', 'meal', 'state', 'insulin', 'education', 'exercise', 'today', 'appt', 'inhaler', 'level', 'weight', 'knee', 'minute', 'day', 'ncm', 'conclusion', 'plausible', 'scientists', 'respect', 'adhere', 'rules', 'thing', 'large', 'datasets', 'nearly', 'hour', 'intel', 'gen', 'processor', 'issue', 'production', 'workflow', 'much', 'larger', 'pipeline', 'considered', 'soon', 'triggered', 'bucket', 'noted', 'poor', 'compared', 'opensource', 'unoptimized', 'emalgorithm', 'handling', 'matrices', 'noticed', 'fewer', 'made', 'easier', 'relate', 'increased', 'count', 'case', 'distributions', 'among', 'behaviour', 'infer', 'definitely', 'themes', 'overlapping', 'achieved', 'jumped', 'varied', 'consistently', 'better', 'labelling', 'worse', 'means', 'user', 'trust', 'cannot', 'guarantee', 'retrieved', 'preferred', 'engine', 'correctly', 'classified']
https://github.com/realLongjiLi/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/reckoner-david/CourseProject	project progress report twitter sarcasm classification challenge sahil rishi - sahilr2@illinois.edu progress: i have made two submissions for my challenge (username: reckoner) and have achieved a best rank of 8 (with only 3 epochs and small sequence lengths). a majority of the time till now was spent on getting the framework and evaluation pipelines ready. the remaining time will be spent on training larger models with better parameter searching. task status comments/challenge dataset preparation done we have to create dataset in a format so that we can try a variety of problem formulations framework done model supported: bert, distilbert and roberta models. task supported: binary classification sentence pair classification method 1: (distilbert-base-uncased, only response, no pre-processing) done got rank 20 and f1_score:0.73 method 2: (distilbert-base-uncased,response+context, no pre-processing) done got rank 8 and f1_score:0.756 hyper parameter searching in progress due to gpu resource constraints we have not run this step. next step: * add pre-processing. * try on larger models (roberta-large, bert-large) * do hyper parameter searching challenges the challenge with deep learning models is the resource. currently we have only used lighter models and smaller parameters of sequence length and epochs to save compute resources. for the most competitive baselines we will have to do a hyperparameter grid search which is costly and the free google codelab resources might not be enough to run them. in that case we will have to spend some time in streamlining our pipeline and implementing early stopping metrics. currently it takes ~1:50 min to train 1 epoch of the model. project report twitter sarcasm classification challenge sahil rishi - sahilr2@illinois.edu work done: i have made 11 submissions for my challenge (username: reckoner) and have achieved a best rank of 8. after sometime i started investigating models with lower parameters which still allow me to beat the baseline. the current leaderboard results are with a distilbert model, epoch-8, 'max_seq_length': 256, lr: 3e-5. that model is also loaded into `demo.ipnyb`  and can be loaded and run. task status comments/challenge dataset preparation done we have to create dataset in a format so that we can try a variety of problem formulations framework done model supported: bert, distilbert and roberta models. task supported: binary classification sentence pair classification method 1:  (distilbert-base-uncased, only response, no pre-processing) done got rank 20  and f1_score:0.73 method 2: (distilbert-base-uncased,response+context, no pre-processing) done got rank 8  and f1_score:0.756 hyper parameter searching done used wandb hyper-parameter tuning on lr. sequence size manually tested. model we used a transfer learning package called simpletransformers. this package supports creating and training huggingface transformer models and provides necessary abstractions to make the process faster. we make use of https://simpletransformers.ai/docs/sentence-pair-classification/ module of the library. this module trains a transformer model to predict over a pair of sentences. the idea is to use the response of the tweet and the context as the pair of sentences. i.e. text_a , text_b => sarcasm/not sarcasm here text_a is response text_b is concatenation of (context 2 and context 1) for testing parameters i used a 80:20 split. final training was done on all the data points. other methods tried: * i also tried a simple classification model(within simpletransformers library) with only the response. it gave me f1_score:0.73 * i also tried roberta large model . this model did not give me a successful result. the reason for this was that as the model was very large, only small sequence lengths were fitting in the gpu (seq: 32). this proved to be too small to capture the sentence embeddings and this variation of the model failed. * i also tried bert and bert large  model. they gave similar performance to distilbert models so i investigated only distilbert. hyperparameter tuning: simpletransformers library provides hyperparameter tuning support with the wandb. i investigated optimal lr. for sequence length i investigated by hand as i observed that small changes in sequence length did not affect the scores by a lot. optimal lr: 3.1134e-5 sequence: 256 epoch: 8 after 4000 steps (or 8 epochs) the model stopped automatically as we put the early stop parameter. with this when the model stops learning the training procedure stops itself. (results reported on 1000 samples withheld from the training data) due to gpu costs i only performed hyperparameter tuning on sentence pair classification distilbert model. summary as i wanted to use large transformers models, i made use of a specialised library which abstracts many functions required for transfer learning. due to this the task of using complex models such as distilbert, bert, roberta become really easy and straightforward. courseproject demo video: https://drive.google.com/file/d/1ojy1io6fu3mg6kxovvsx_pd4jjgacsp6/view?usp=sharing if data does not download with google drive mounting please download data from: https://drive.google.com/drive/folders/19v4w6yhwjpz_qpkqqucs86jsrpqihs9s?usp=sharing project report: https://github.com/reckoner-david/courseproject/blob/main/project%20report.pdf source code file: https://github.com/reckoner-david/courseproject/blob/main/demo.ipynb (notebook links to colab) source code documentation and setup guide: look at demo video (it has explanation too) documentation file: https://github.com/reckoner-david/courseproject/blob/main/source%20code%20documentation.pdf source code documentation twitter sarcasm classification challenge sahil rishi - sahilr2@illinois.edu from simpletransformers.classification import classificationmodel this is the library we are using for transfer learning. train_args={ 'reprocess_input_data': true, 'overwrite_output_dir': true, 'num_train_epochs': 8, 'fp16': false, 'sliding_window': false, 'learning_rate': 3e-05, 'max_seq_length': 256, 'do_lower_case': true, 'train_batch_size': 8, 'evaluate_during_training': false } model = classificationmodel('distilbert', 'distilbert-base-uncased', args=train_args, use_cuda=false) train_args: it specifies the parameters for the model. we define the learning rate, epoch and max_seq_length here. we also define the do_lower_case as true as we use the uncased model. for final training, we train on all the data so 'evaluate_during_training' is false. model = classificationmodel('distilbert', '/content/drive/mydrive/colab notebooks/model.zip (unzipped files)/checkpoint-5000-epoch-8', args=train_args, use_cuda=false) we can load a saved model via this api. just put the path of the model in. the classification model api handles model instantiation saving per epoch training loops prediction loops converting/preprocessing of data so we don't have to explicitly handle all these details. text classification competition team: team name: reckoner members: sahil rishi - sahilr2@illinois.edu individual team member - sahil was chosen unanimously as the captain of the team which competition do you plan to join? text classification competition https://github.com/cs410fall2020/classificationcompetition are you prepared to learn state-of-the-art neural network classifiers: yes, our team is keen on learning and using transformer models for classification. they have shown to be very efficient for classification and transfer learning allows training on low numbers of samples. we plan to use the hugging face transformer library. previous experience: previously we have used seq2seq transformer models, bart and bert (tensorflow). which programming language do you plan to use? python	['project', 'progress', 'report', 'twitter', 'sarcasm', 'classification', 'challenge', 'sahil', 'rishi', 'sahilrillinoisedu', 'made', 'two', 'submissions', 'username', 'reckoner', 'achieved', 'best', 'rank', 'epochs', 'small', 'sequence', 'lengths', 'majority', 'time', 'till', 'spent', 'getting', 'framework', 'evaluation', 'pipelines', 'ready', 'remaining', 'training', 'larger', 'models', 'better', 'parameter', 'searching', 'task', 'status', 'commentschallenge', 'dataset', 'preparation', 'done', 'create', 'format', 'try', 'variety', 'problem', 'formulations', 'model', 'supported', 'bert', 'distilbert', 'roberta', 'binary', 'sentence', 'pair', 'method', 'distilbertbaseuncased', 'response', 'preprocessing', 'got', 'f_score', 'distilbertbaseuncasedresponsecontext', 'hyper', 'due', 'gpu', 'resource', 'constraints', 'run', 'step', 'next', 'add', 'robertalarge', 'bertlarge', 'challenges', 'deep', 'learning', 'currently', 'used', 'lighter', 'smaller', 'parameters', 'length', 'save', 'compute', 'resources', 'competitive', 'baselines', 'hyperparameter', 'grid', 'search', 'costly', 'free', 'google', 'codelab', 'might', 'enough', 'case', 'spend', 'streamlining', 'pipeline', 'implementing', 'early', 'stopping', 'metrics', 'takes', 'min', 'train', 'epoch', 'work', 'sometime', 'started', 'investigating', 'lower', 'still', 'allow', 'beat', 'baseline', 'current', 'leaderboard', 'results', 'max_seq_length', 'lr', 'e', 'also', 'loaded', 'demoipnyb', 'wandb', 'tuning', 'size', 'manually', 'tested', 'transfer', 'package', 'called', 'simpletransformers', 'supports', 'creating', 'huggingface', 'transformer', 'provides', 'necessary', 'abstractions', 'make', 'process', 'faster', 'use', 'httpssimpletransformersaidocssentencepairclassification', 'module', 'library', 'trains', 'predict', 'sentences', 'idea', 'tweet', 'context', 'ie', 'text_a', 'text_b', 'sarcasmnot', 'concatenation', 'testing', 'split', 'final', 'data', 'points', 'methods', 'tried', 'simple', 'modelwithin', 'gave', 'large', 'give', 'successful', 'result', 'reason', 'fitting', 'seq', 'proved', 'capture', 'embeddings', 'variation', 'failed', 'similar', 'performance', 'investigated', 'support', 'optimal', 'hand', 'observed', 'changes', 'affect', 'scores', 'lot', 'steps', 'stopped', 'automatically', 'put', 'stop', 'stops', 'procedure', 'reported', 'samples', 'withheld', 'costs', 'performed', 'summary', 'wanted', 'transformers', 'specialised', 'abstracts', 'many', 'functions', 'required', 'using', 'complex', 'become', 'really', 'easy', 'straightforward', 'courseproject', 'demo', 'video', 'httpsdrivegooglecomfiledojyiofumgkxovvsx_pdjjgacspviewuspsharing', 'download', 'drive', 'mounting', 'please', 'httpsdrivegooglecomdrivefoldersvwyhwjpz_qpkqqucsjsrpqihssuspsharing', 'httpsgithubcomreckonerdavidcourseprojectblobmainprojectreportpdf', 'source', 'code', 'file', 'httpsgithubcomreckonerdavidcourseprojectblobmaindemoipynb', 'notebook', 'links', 'colab', 'documentation', 'setup', 'guide', 'look', 'explanation', 'httpsgithubcomreckonerdavidcourseprojectblobmainsourcecodedocumentationpdf', 'simpletransformersclassification', 'import', 'classificationmodel', 'train_args', 'reprocess_input_data', 'true', 'overwrite_output_dir', 'num_train_epochs', 'fp', 'false', 'sliding_window', 'learning_rate', 'do_lower_case', 'train_batch_size', 'evaluate_during_training', 'classificationmodeldistilbert', 'argstrain_args', 'use_cudafalse', 'specifies', 'define', 'rate', 'uncased', 'contentdrivemydrivecolab', 'notebooksmodelzip', 'unzipped', 'filescheckpointepoch', 'load', 'saved', 'via', 'api', 'path', 'handles', 'instantiation', 'saving', 'per', 'loops', 'prediction', 'convertingpreprocessing', 'dont', 'explicitly', 'handle', 'details', 'text', 'competition', 'team', 'name', 'members', 'individual', 'member', 'chosen', 'unanimously', 'captain', 'plan', 'join', 'httpsgithubcomcsfallclassificationcompetition', 'prepared', 'learn', 'stateoftheart', 'neural', 'network', 'classifiers', 'yes', 'keen', 'shown', 'efficient', 'allows', 'low', 'numbers', 'hugging', 'face', 'previous', 'experience', 'previously', 'seqseq', 'bart', 'tensorflow', 'programming', 'language', 'python']
https://github.com/retrouvailles0/CourseProject	cs410 project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. rui liu (ruiliu7) captain zhenzhou yang (zy29) 2. what system have you chosen? which subtopic(s) under the system? we choose option 2.2 expert search system. both. we plan to finish an application where users can enter a url link and our system will identify faculty directory pages, identify faculty webpage urls on the directory website, and format a structured faculty list with relevant information from faculty bios if the given url is valid. 3. briefly describe the datasets, algorithms or techniques you plan to use. * the positive datasets are the faculty web pages given by students used for mp2.1 (https://docs.google.com/spreadsheets/d/198hqeztqhchbcbcleuomoynna3z68cvx ixu5vvmuuam/edit#gid=0). the negative datasets would be non-directory web pages we collect online. their ratio would be close to 1:1. * we will preprocess the html data and get their text. using tf-idf to filter the text and select features, vectorize the data into the input of our models. * we will train models using python sklearn packages, such as linear regression, logistic regression, naive bayes, svm, nearest neighbors and decision trees. then we will choose the one yielding the highest accuracy as our final model. * if none of the models in sklearn perform well, we may build a neural network model including word embedding layer and linear layers. * if all the models failed to yield good accuracies, we may adopt several improving methods such as limiting the domains that users are intended to search. 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? we add a function to enable users to enter a url link and do the crawling automatically. the way we demonstrate that it works as expected is that users will get direct feedback from our system if the entered url is a directory page or not. if yes, the system will continue to search all url embedded in this directory website and classify if any of them is a faculty url page. if yes, we will add this website to the final structured output. then users will be able to check the results from the automatic crawler. besides, there are things we would like to improve. while we researched the provided system, we found out there are bugs that have not been catched. for example, if i enter some arbitrary meaningfulness word, the system returns back some information that is not related at all. what's more, there are times that the faculty names are not displayed properly and listed empty. therefore we would like to catch these bugs and fix them. 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly. we plan to maintain a similar user interface as the given system. however, our system will focus more on automating the crawling process of mp2.1. users can enter a url link and our system will identify faculty directory pages, identify faculty webpage urls on the directory website, and format a structured faculty list with relevant information from faculty bios if the given url is valid. in order to do the identification tasks, we plan to preprocess the text information on the input url and do vectorization using tf-idf, then train various models using sklearn packages and then select the best one as our model for the system. by doing this, our system will be able to classify any url given by the users. to display the structured faculty information, we plan to utilize the format of the given system. instead of using the interface directly, we will debug it first to take care of the blocks that should not be displayed when users enter meaningfulness words. what's more, we will fill in the information provided by our system to demonstrate our work. 6. which programming language do you plan to use? * machine learning: python scikit-learn package and pytorch * web crawling: python selenium package * user interface: python in the given github repo. * supplement: python tkinter, javascript packages (haven't been decided) 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. get familiar with the current system: 4hrs * read related docs. * clone repo and run the code. get the dataset: 4hrs * collect 900 non-directory dataset to make the ratio of positive and negative in directory dataset 1:1. * collect 900 non-faculty dataset to make the ratio of positive and negative in faculty url dataset 1:1. preprocess data: 10hrs * implement tf-idf with various parameters to vectorize the data as the format to fit into the models and select the most optimal parameters. develop models: 30 - 35hrs * train models using python sklearn packages, including linear regression, logistic regression, naive bayes, svm, nearest neighbors and decision trees. * build an neural network model using pytorch (haven't been decided) * fine tune the models and do cross validation and calculate accuracy for every model. * compare accuracy of different models and take the one with highest accuracy as the final model in our system. design and implement user interface: 5hrs * since the user interface of the current system was designed for words search, we need to customize the interface to better serve our needs. meetings: 10hrs * weekly meetings to keep both of the members on the same page. project progress report recalling from our project proposal, we plan to finish an application where users can enter a url link and our system will identify faculty directory pages, identify faculty webpage urls on the directory website, and format a structured faculty list with relevant information from faculty bios if the given url is valid. besides that, based on the feedback of the proposal, we decided to put on more effort on the faculty directory training model. by now, the progress we made includes one training model on faculty directory and negative dataset collection. we have downloaded the positive datasets from https://docs.google.com/spreadsheets/d/198hqeztqhchbcbcleuomoynna3z68cvx ixu5vvmuuam/edit#gid=0 and collected 300 negative data points by hand. we have finished preprocessing html data and use text on the website as the input for our model. we removed the header and the redundant spaces in the text. and use tfidftransformer from sklearn to do the feature vectorization and build vocabulary for us. currently we have only implemented the svm model for the directory page classification task. the model yields a pretty optimistic accuracy data around 95% using 5-fold cross validation. therefore we have no plan on adding a neural network or limiting the domains now. difficulties: we found out that collecting negative datasets is time exhausting. since we would like our negative data points to be as diverse as possible, we collected every one of the website urls by hand. we collected 300 negative data points instead of 800 and the accuracy is pretty optimistic, therefore, we have no plan on adding more negative data for now. we are still in the process of implementing other models and choosing the most optimal one in the near future. we also have the second task which is identifying whether the page contains the profile links for the faculty and crawling the data. currently we have not yet come up with a strategy to conquer it. course project introduction this repo is for cs410 course project option 2.2 expert search system. \ our system is part of the automatic crawler for mp2, using which users can enter a url link and the system will identify if the entered url is a valid faculty directory page. in order to finish the task, we retrieve the information on those websites and process data using text retrieval methods. then, we train several several machine learning models using the processed text data from labeled websites(positive/negative). after training, we do test and cross validation and then select the optimal model to save for future prediction. when the user enters a url, the saved model will be retrieved and a result will be predicted using that model. author zhenzhou yang(zy29@illinois.edu) \ rui liu(ruiliu7@illinois.edu) dataset positive datasets are the faculty web pages given by students used for mp2.1 ( https://docs.google.com/spreadsheets/d/198hqeztqhchbcbcleuomoynna3z68cvx ixu5vvmuuam/edit#gid=0 ). the data is saved in positive_link.csv negative datasets are non-directory web pages we collected online. the data is saved in negative_info.csv positive/negative ratio 3:1 method process the html data of labeled data set and get their text. use tf-idf to filter text, select features, vectorize the data into the input of our models. training models (sklearn) svm svc linearsvc naive bayes multinomialnb tree decisiontreeclassifier randomforest randomforestclassifier linear sgdclassifier adaptive boosting adaboostclassifier save model (joblib) user interface (tkinker) run the code was tested using python 3.7. train the model angular2html python3 select_model.py predict a url angular2html python3 predict.py demo https://uofi.box.com/s/apzzkkdm40upm5rvkh3qpg8sob23o4a8	['cs', 'project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'rui', 'liu', 'ruiliu', 'zhenzhou', 'yang', 'zy', 'system', 'chosen', 'subtopics', 'choose', 'option', 'expert', 'search', 'plan', 'finish', 'application', 'users', 'enter', 'url', 'link', 'identify', 'faculty', 'directory', 'pages', 'webpage', 'urls', 'website', 'format', 'structured', 'list', 'relevant', 'information', 'bios', 'given', 'valid', 'briefly', 'describe', 'datasets', 'algorithms', 'techniques', 'use', 'positive', 'web', 'students', 'used', 'mp', 'httpsdocsgooglecomspreadsheetsdhqeztqhchbcbcleuomoynnazcvx', 'ixuvvmuuameditgid', 'negative', 'would', 'nondirectory', 'collect', 'online', 'ratio', 'close', 'preprocess', 'html', 'data', 'get', 'text', 'using', 'tfidf', 'filter', 'select', 'features', 'vectorize', 'input', 'models', 'train', 'python', 'sklearn', 'packages', 'linear', 'regression', 'logistic', 'naive', 'bayes', 'svm', 'nearest', 'neighbors', 'decision', 'trees', 'one', 'yielding', 'highest', 'accuracy', 'final', 'model', 'none', 'perform', 'well', 'may', 'build', 'neural', 'network', 'including', 'word', 'embedding', 'layer', 'layers', 'failed', 'yield', 'good', 'accuracies', 'adopt', 'several', 'improving', 'methods', 'limiting', 'domains', 'intended', 'adding', 'function', 'demonstrate', 'works', 'expected', 'show', 'implementation', 'actually', 'better', 'add', 'enable', 'crawling', 'automatically', 'way', 'direct', 'feedback', 'entered', 'page', 'yes', 'continue', 'embedded', 'classify', 'output', 'able', 'check', 'results', 'automatic', 'crawler', 'besides', 'things', 'like', 'improve', 'researched', 'provided', 'found', 'bugs', 'catched', 'example', 'arbitrary', 'meaningfulness', 'returns', 'back', 'related', 'whats', 'times', 'displayed', 'properly', 'listed', 'empty', 'therefore', 'catch', 'fix', 'code', 'communicate', 'utilize', 'also', 'fine', 'systems', 'please', 'state', 'clearly', 'maintain', 'similar', 'user', 'interface', 'however', 'focus', 'automating', 'process', 'order', 'identification', 'tasks', 'vectorization', 'various', 'best', 'display', 'instead', 'directly', 'debug', 'first', 'take', 'care', 'blocks', 'words', 'fill', 'work', 'programming', 'language', 'machine', 'learning', 'scikitlearn', 'package', 'pytorch', 'selenium', 'github', 'repo', 'supplement', 'tkinter', 'javascript', 'havent', 'decided', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'number', 'main', 'completed', 'estimated', 'time', 'cost', 'task', 'familiar', 'current', 'hrs', 'read', 'docs', 'clone', 'run', 'dataset', 'make', 'nonfaculty', 'implement', 'parameters', 'fit', 'optimal', 'develop', 'tune', 'cross', 'validation', 'calculate', 'every', 'compare', 'different', 'design', 'since', 'designed', 'need', 'customize', 'serve', 'needs', 'meetings', 'weekly', 'keep', 'progress', 'report', 'recalling', 'based', 'put', 'effort', 'training', 'made', 'includes', 'collection', 'downloaded', 'collected', 'points', 'hand', 'finished', 'preprocessing', 'removed', 'header', 'redundant', 'spaces', 'tfidftransformer', 'feature', 'vocabulary', 'us', 'currently', 'implemented', 'classification', 'yields', 'pretty', 'optimistic', 'around', 'fold', 'difficulties', 'collecting', 'exhausting', 'diverse', 'possible', 'still', 'implementing', 'choosing', 'near', 'future', 'second', 'identifying', 'whether', 'contains', 'profile', 'links', 'yet', 'come', 'strategy', 'conquer', 'course', 'introduction', 'part', 'retrieve', 'websites', 'retrieval', 'processed', 'labeled', 'websitespositivenegative', 'test', 'save', 'prediction', 'enters', 'saved', 'retrieved', 'result', 'predicted', 'author', 'yangzyillinoisedu', 'liuruiliuillinoisedu', 'positive_linkcsv', 'negative_infocsv', 'positivenegative', 'method', 'set', 'svc', 'linearsvc', 'multinomialnb', 'tree', 'decisiontreeclassifier', 'randomforest', 'randomforestclassifier', 'sgdclassifier', 'adaptive', 'boosting', 'adaboostclassifier', 'joblib', 'tkinker', 'tested', 'angularhtml', 'select_modelpy', 'predict', 'predictpy', 'demo', 'httpsuofiboxcomsapzzkkdmupmrvkhqpgsoboa']
https://github.com/rfraser3/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/richameher/CourseProject	"richa meherwal cs 410 project progress report progress made thus far 1. set up environment. installed python 3, made requirements.txt file and installed compatible libraries 2. data pre-processing in progress- removed stop words, removed latin words. tokenized words and removed punctuations. performed pos tagging and extracted adjectives and nouns remaining tasks 1. to execute lda and extract topics 2. to perform sentiment analysis on each topic at a dataset level challenges faced 1. library incompatibilities with python version 2. utf-8 encoding err - added diff type of encoding to read_csv in pandas 3. spacy library incompatibility 4. no module named en-core-web-sm 5. extracting meaningful words 6. mapping lemmatisation functions to every row in data frames richa meherwal- cs 410 course project documentation presentation available at https://mediaspace.illinois.edu/media/t/ 1_ammbs24f an overview of the function of the code code can be used to do an aspect based sentiment analysis. as seen in the code, we first tokenise all reviews. then extract bigrams nn-adj pairs to form a word cloud and visualise the features that stand out the most. we also extract unigrams that are nn as the aspects to use for sentiment analysis. note that in order to train our classifier , we use the ratings column from the hotel dataset and then label our aspects with a pos,neu,neg sentiment. we then visualise the aspects and the associated sentiments using a bar plot. we the repeat this process over airbnb reviews dataset and we use the sentiment classifier trained before to classify the sentiments of the aspects extracted. note that airbnb does not have ratings so it wouldn't be possible for us to retrain the classifier. software implementation and usage 1. (optional) create a python3 virtual environment python3 -m venv py3-env-final-proj 2. (optional) activate virtual environment- source py3-env-final-proj/bin/activate 3. pip install jupyter 4. install ipykernel in this environment- python3 -m ipykernel install --user --name=final-proj (final-proj will be used as env in jupter notebook) 5. pip install -r requirements.txt 6. start jupyter-notebook from shell using command : jupyter notebook 7. download repository and open the test.ipynb file 8. switch to final-proj kernel defined in step 4. 9. change the file path to where the preprocessed files are i.e. under folder data and run all the cells in the notebook note for testers there is a joblib file that you can use to test the sentiment classifier. the classifier has been trained on hotelreviews dataset. check step 5.c under hotel review analysis in final_project v4.ipynb or 4.b in test.ipynb. i have already shown how to use it in the video presentation. entire code including the preprocessing and training sentiment classifier can be found in - final_project v4.ipynb. you can also view this ipynb file using nbviewer - https://nbviewer.jupyter.org/ github/richameher/courseproject/blob/main/code/final_proj%20v4.html modified code for testers can be found in- test.ipynb final results understanding plots and graphs [hotel review wordcloud] use wordcloud to visualise bi-grams. nn-adj pairs are extracted from reviews and tf-idf is used to retrieve top n bigrams. there will also be a bar-plot associating the sentiment with every unigram nn keyword extracted with the probability of the sentiment. [hotel review aspect sentiment graph] in the wordcloud we can observe that people tend to talk about the quality of rooms. features like safety is usually associated with the hotels than airbnbs. also hotels have their own website , so people also talk about the online booking system. as for the bar plot, we can see that hotels have ""theft"", ""suite"" aspects that have been associated with negative sentiment. also the highest positive sentiment is observed among aspects like ""room"", ""view"" and ""manager"" what is completed and what could be better? i have successfully been able to analyze the aspects that drives people to chose airbnb over hotels and vice-versa. with airbnb, like we can see in the graphs, the motivation is driven by finding an ""affordable"" yet comfortable stay. people care about ""location"" and ""worth for money"". with hotels, people expect ""luxury"" in terms of ""big rooms"", ""spacious bathrooms"", ""views"" and so on. however, the sentiment classifier could have been better if we had an available labeled dataset for airbnb reviews. i also realised that using lda for bi-grams does not work well but specialised algorithms for bi-gram topic extraction can be used in future. lda for unigrams also did not group the categories very well , but top weighted words could have been considered. therefore, i used tf-idf to find the key aspects and only used nouns to do so. richa meherwal project proposal cs 410 fall 2020 1. what are the names and netids of all your team members? who is the captain? the captain will have more administra<ve du<es than team members. individual project name- richa meherwal nead- meherwa2 captain-richa meherwal 2. what is your free topic? please give a detailed descrip<on. what is the task? why is it important or interes<ng? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? topic using topic mining and senament analysis to compare customer level saasfacaon in airbnb vs hotels problem statement with the rise of airbnb, travellers are usually choosing this new type of accommodaaon over hotels. similarly some travellers always chose to stay in expensive hotels. what is it that anracts tourists to hotels over airbnb and vice-versa. i chose this topic because i was interested in learning what level of customer saasfacaon present in airbnb users vs hotels. i paracularly wanted to compare the customer level saasfacaon features involved with these two types of accommodaaon using topic extracaon and senament analysis. task to compare the customer saasfacaon between airbnb and hotels using lda and senament analysis datasets hnps://www.kaggle.com/mrinaal007/reviews hnps://zenodo.org/record/1219899#.x5uic0izba4 tools jupyter notebook nltk toolkit genism approach 1. complete the pre-processing of the datasets. this includes tokenisaaon, removing stop words, normalisaaon. 2. use lda to first extract the common topics that the customers review about in both the datasets. 3. do a senament analysis on each of the sentences containing the extracted topic and assign a senament to it. gather the associated senament and the topic over each dataset. 4. now under each accommodaaon type we should be able to visualise the topics that it is posiavely credited for by the reviewers and also negaavely. my expected outcome is to show topic and senament level comparisons for each type of accommodaaon (airbnb or hotel). the idea is to see which topics are associated posiavely or negaavely with each of the accommodaaon types and to gain insight into where each of these services perform bener than the other. evaluaaon to check the senament analyser, i would compare the senament associated with the sentence/review to the raang given. to check topic extracaon worked well, i will use wor2vec on all the common topics and see if they separate well. 3. which programming language do you plan to use? python 4. please jus<fy that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the es<mated <me cost for each task. tasks and hours 1. preprocessing data - 5-6 hrs 2. research methods for senament analysis and topic extracaon and deploy it - 9-12 hrs 3. post processing and visualising the final data - 6-7hrs 4. cleaning code ,demo, documentaaon - 4-5 hrs n=1 total esamated work hours- 24- 30 hrs courseproject code can be used for aspect-based sentiment analysis extract nn-adj bigrams extract nn unigrams extract top n-grams using tf-idf sentiment anaysis on reviews on aspects (unigrams or bigrams) visualize sentiments on keywords extracted using barplots/wordcloud presentation and tutorial available at - https://mediaspace.illinois.edu/media/t/1_ammbs24f?st=0 complete documentation and self-evaluation available in project documentation.pdf code folder contains final project v4.ipynb (whole source code) test.ipynb (code for testers to run) requirements.txt (libraries to install) sentiment_analyzer.joblib (trained sentiment classifier model) data folder contains preprocess_airbnb.csv (airbnb data with necesaary n-grams extracted with source code to be used for topic extraction and sentiment analysis) preprocess_hotel.csv (hotel data with necesaary n-grams to be used for topic extraction and sentiment analysis) you can view my ipynb notebooks directly using nbviewer https://nbviewer.jupyter.org/github/richameher/courseproject/blob/main/code/final_proj%20v4.html software implementation and usage 1. (optional) create a python3 virtual environment python3 -m venv py3-env-final-proj 2. (optional) activate virtual environment source py3-env-final-proj/bin/activate 3. pip install jupyter 4. install ipykernel in this environment- python3 -m ipykernel install --user --name=final-proj (final-proj will be used as env in jupter notebook) 5. pip install -r requirements.txt 6. start jupyter-notebook from shell using command : jupyter notebook 7. download this github repository and open the test.ipynb file 8. switch to final-proj kernel defined in step 4. 9. change the file path to where the preprocessed files are i.e. under folder data and run all the cells in the notebook methodology (code in code/final project v4.ipynb) read original datasets (check proposal.pdf data for the links) clean text- tokenize, remove punctuations, tabs, whitespaces, stopwords, common words extract bigrams- create a bigrams column to extract all afjacent pairs of bigrams from review/text create a bigram_list column and keep bigrams that are nn-adj pairs create a unigram_list column and keep only unigrams that are nn train a logistic regression classifier on sentiment and reviews of the hotel dataset as only hotel dataset has ratings (map ratings to sentiments first) use wordcloud to visualize frequent bigrams use tf-idf to extract top n keywords from unigrams or bigrams use the trained sentiment classifier to classify the sentiment for the keywords plot a bar graph, with sentiment as labels, keywords and sentiment probability/topic extent on y-axis results [hotel review bigram wordcloud] [hotel review sentiment-topic extent bar plot] in the wordcloud we can observe that people tend to talk about the quality of rooms. features like safety is usually associated with the hotels than airbnbs. also hotels have their own website , so people also talk about the online booking system. as for the bar plot, we can see that hotels have ""theft"", ""suite"" aspects that have been associated with negative sentiment. also the highest positive sentiment is observed among aspects like ""room"", ""view"" and ""manager"" (note- we can also observe the sentiment probability on y-axis instead of topic extent, check test.ipynb) contribution completed by richa meherwal free topic- using topic mining and sentiment analysis to compare customer level satisfaction in airbnb vs hotels"	['richa', 'meherwal', 'cs', 'project', 'progress', 'report', 'made', 'thus', 'far', 'set', 'environment', 'installed', 'python', 'requirementstxt', 'file', 'compatible', 'libraries', 'data', 'preprocessing', 'removed', 'stop', 'words', 'latin', 'tokenized', 'punctuations', 'performed', 'pos', 'tagging', 'extracted', 'adjectives', 'nouns', 'remaining', 'tasks', 'execute', 'lda', 'extract', 'topics', 'perform', 'sentiment', 'analysis', 'topic', 'dataset', 'level', 'challenges', 'faced', 'library', 'incompatibilities', 'version', 'utf', 'encoding', 'err', 'added', 'diff', 'type', 'read_csv', 'pandas', 'spacy', 'incompatibility', 'module', 'named', 'encorewebsm', 'extracting', 'meaningful', 'mapping', 'lemmatisation', 'functions', 'every', 'row', 'frames', 'course', 'documentation', 'presentation', 'available', 'httpsmediaspaceillinoisedumediat', '_ammbsf', 'overview', 'function', 'code', 'used', 'aspect', 'based', 'seen', 'first', 'tokenise', 'reviews', 'bigrams', 'nnadj', 'pairs', 'form', 'word', 'cloud', 'visualise', 'features', 'stand', 'also', 'unigrams', 'nn', 'aspects', 'use', 'note', 'order', 'train', 'classifier', 'ratings', 'column', 'hotel', 'label', 'posneuneg', 'associated', 'sentiments', 'using', 'bar', 'plot', 'repeat', 'process', 'airbnb', 'trained', 'classify', 'wouldnt', 'possible', 'us', 'retrain', 'software', 'implementation', 'usage', 'optional', 'create', 'virtual', 'venv', 'pyenvfinalproj', 'activate', 'source', 'pyenvfinalprojbinactivate', 'pip', 'install', 'jupyter', 'ipykernel', 'user', 'namefinalproj', 'finalproj', 'env', 'jupter', 'notebook', 'r', 'start', 'jupyternotebook', 'shell', 'command', 'download', 'repository', 'open', 'testipynb', 'switch', 'kernel', 'defined', 'step', 'change', 'path', 'preprocessed', 'files', 'ie', 'folder', 'run', 'cells', 'testers', 'joblib', 'test', 'hotelreviews', 'check', 'c', 'review', 'final_project', 'vipynb', 'b', 'already', 'shown', 'video', 'entire', 'including', 'training', 'found', 'view', 'ipynb', 'nbviewer', 'httpsnbviewerjupyterorg', 'githubrichamehercourseprojectblobmaincodefinal_projvhtml', 'modified', 'final', 'results', 'understanding', 'plots', 'graphs', 'wordcloud', 'tfidf', 'retrieve', 'top', 'n', 'barplot', 'associating', 'unigram', 'keyword', 'probability', 'graph', 'observe', 'people', 'tend', 'talk', 'quality', 'rooms', 'like', 'safety', 'usually', 'hotels', 'airbnbs', 'website', 'online', 'booking', 'system', 'see', 'theft', 'suite', 'negative', 'highest', 'positive', 'observed', 'among', 'room', 'manager', 'completed', 'could', 'better', 'successfully', 'able', 'analyze', 'drives', 'chose', 'viceversa', 'motivation', 'driven', 'finding', 'affordable', 'yet', 'comfortable', 'stay', 'care', 'location', 'worth', 'money', 'expect', 'luxury', 'terms', 'big', 'spacious', 'bathrooms', 'views', 'however', 'labeled', 'realised', 'work', 'well', 'specialised', 'algorithms', 'bigram', 'extraction', 'future', 'group', 'categories', 'weighted', 'considered', 'therefore', 'find', 'key', 'proposal', 'fall', 'names', 'netids', 'team', 'members', 'captain', 'administrave', 'dues', 'individual', 'name', 'nead', 'meherwa', 'captainricha', 'free', 'please', 'give', 'detailed', 'descripon', 'task', 'important', 'interesng', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'mining', 'senament', 'compare', 'customer', 'saasfacaon', 'vs', 'problem', 'statement', 'rise', 'travellers', 'choosing', 'new', 'accommodaaon', 'similarly', 'always', 'expensive', 'anracts', 'tourists', 'interested', 'learning', 'present', 'users', 'paracularly', 'wanted', 'two', 'types', 'extracaon', 'hnpswwwkagglecommrinaalreviews', 'hnpszenodoorgrecordxuicizba', 'nltk', 'toolkit', 'genism', 'complete', 'includes', 'tokenisaaon', 'removing', 'normalisaaon', 'common', 'customers', 'sentences', 'containing', 'assign', 'gather', 'posiavely', 'credited', 'reviewers', 'negaavely', 'show', 'comparisons', 'idea', 'gain', 'insight', 'services', 'bener', 'evaluaaon', 'analyser', 'would', 'sentencereview', 'raang', 'given', 'worked', 'worvec', 'separate', 'programming', 'language', 'plan', 'jusfy', 'workload', 'least', 'hours', 'total', 'number', 'students', 'may', 'list', 'main', 'esmated', 'cost', 'hrs', 'research', 'methods', 'deploy', 'post', 'processing', 'visualising', 'cleaning', 'demo', 'documentaaon', 'esamated', 'courseproject', 'aspectbased', 'ngrams', 'anaysis', 'visualize', 'keywords', 'barplotswordcloud', 'tutorial', 'httpsmediaspaceillinoisedumediat_ammbsfst', 'selfevaluation', 'documentationpdf', 'contains', 'whole', 'sentiment_analyzerjoblib', 'model', 'preprocess_airbnbcsv', 'necesaary', 'preprocess_hotelcsv', 'notebooks', 'directly', 'httpsnbviewerjupyterorggithubrichamehercourseprojectblobmaincodefinal_projvhtml', 'github', 'methodology', 'codefinal', 'read', 'original', 'proposalpdf', 'links', 'clean', 'text', 'tokenize', 'remove', 'tabs', 'whitespaces', 'stopwords', 'afjacent', 'reviewtext', 'bigram_list', 'keep', 'unigram_list', 'logistic', 'regression', 'map', 'frequent', 'labels', 'probabilitytopic', 'extent', 'yaxis', 'sentimenttopic', 'instead', 'contribution', 'satisfaction']
https://github.com/rixu1/CourseProject	"project proposal project name: 2.2 expertsearch system team member: ri xu (captain), netid: rixu2 jinou yang, netid: jinouy2 the system we are choosing is option2: improving a system, specifically the expertsearch system. the main dataset we will be using is the faculty bio from mp2.3 . our project will make improvements to the expertserach system in the following ways: 1. add extractions on experts' phone numbers using regex pattern matching. (5 hours ) 2. add extractions on experts' research interests in the format of keywords using topic mining. (10 hours ) 3. improve search results preview by adding phone numbers and keywords. (5 hours ) 4. build experts recommendation system based on users' search queries and browsing history. users' interaction data can be stored and retrieved from browser cookies, bm25 can be used to find the top relevant experts to recommend. (20 hours ) we will implement web scraping scripts to extract phone numbers in python and store them in a local file, which will be shown in the preview on frontend. another python script is to perform topic mining on faculty bio and extract top research interest keywords and store them in a local file. search related function and ranker will also be implemented in python. for web frontend improvements, html, css and javascript will be used to achieve the objectives. progress report (as of nov 29th) current progress: backend: we have finished writing up scripts to extract phone numbers and research interests all experts and dumped the result into files. later we ran the script to recreate the new data file (metadata.dat) to include phone numbers and research interests for the frontend to display. frontend: refactored code for existing project to modularize some of the components for reusing. integrate the phone number and research interests in expert preview cards. remaining tasks 1. build recommendation system based on users' search history. need to look into how to use cookies to store search info and recommend related experts using bm25. 2. look into improving name recognition to reduce empty names in search results. 3. look into improving email recognition to reduce empty email information. challenges the biggest challenge with this project is getting familiar with the existing code base and iterating based on that. also when extracting research interests for experts, some unrelated information like school names, locations may interfere with the results. software usage tutorial presentation video link: https://www.youtube.com/watch?v=qgx1iddoylw documentation an overview of the function of the code the existing expertsearch system is a web application where users can search related experts. we've made several improvements to the existing system. to be more specific, the improvements include: - show experts' areas of interests in search results preview. - show experts' phone number in search results preview. - improve name matching; increase name recognition ratio from 88% to 96%. this reduces the chance when users see empty expert names in their search results. - build a simple recommendation system based on users' past search queries. replace the empty home page with recommendation feed. how the software is implemented the web application is implemented in the following way: server.py this is the main flask server file which contains all backend apis and page handlers. - /search this api accepts a few parameters such as search query, number of results expected. metapy library and bm25 is used to query the dataset, then fetch additional information from metadata.dat for frontend to display preview. - /recommend similar to /search, this api accepts search query keywords and returns up to 5 recommended experts per query. bm25 is also used for finding experts to recommend. if more than 5 experts matched with a given query, 5 experts are randomly selected to encourage exploration. index.js this is the main javascript file which contains most of the frontend logic. - recommend() this function is called during window.onload. it reads users' past search queries from browser cookies and talks with the backend (/recommend endpoint) to fetch recommended experts for each query term. then it will display the experts' preview for each search query. the latest search query will show up on the top of the feed. - dosearch() this function is called when users have clicked the search button. if the query is non-empty, it talks with the backend(/search endpoint) to fetch the results. it will also store users' search query in the browser cookies for the recommendation system to pick up. - docdiv() this function will return a html div object given all preview data. it will render the expert's name, phone number, email, areas of interest, university information etc. it is used by both recommend() and dosearch() when rendering queried experts. material icons ( https://material.io/icons/) are used for visibility. - setcookie() and getcookie() these two helper functions are used for storing and retrieving cookies stored in the browser. in this case, users' search keywords are stored in the ""history"" field in the format of comma separated strings. extraction/extract_interest.py this script is used to generate experts' area of interests. nltk, gensim, snowballstemmer are used for extraction. for each document, tokenization is performed followed by stemming and lemmatization. then it uses nltk to run pos tagging on each token and extract all the noun words. finally we run through all noun words with a predefined word mapping to compute the final areas of interests for all documents. results are then exported to data/interests. extraction/extract_phone_number.py this script is used to extract experts' phone numbers. regex pattern matching is used for phone-number extraction. results are then exported to data/phone_numbers. extraction/extract_names.py & extract_names_spacy.py & merge_name.py these three scripts are used to improve experts' names extraction. - we improved the original script extract_names.py to use the latest version of stanford-ner. results are exported to /data/names.txt - in extract_names_spacy.py, we used the spacy nlp framework to run through all documents and extracted named entities. results are exported to /data/names_secondary.txt - finally we use merge_name.py to combine names from /data/names.txt and /data/names_secondary.txt . if we cannot find a name using stanford-ner, we will check and use the result from the secondary file. with both methods combined, we're able to improve the name recognition coverage from 88% to 96%. final results then exported to a new file new_names.txt. extraction/write_file_names.py this script combines all data files (interests/phone/email/names/...) generated by extraction scripts and writes to the dataset file metadata.dat for metapy to index and rank. how to install and run the software to run the software, simply clone the repository from github. there are a few dependency packages required to install. following are the commands to run: pip install metapy pip install gunicorn pip install spacy pip install nltk cd to /courserproject gunicorn server:app -b 127.0.0.1:8095 then you should be able to access http://localhost:8095/ from your browser. chrome browser is recommended to use. description of contribution of each team member team member: ri xu responsible changes related to flask servers and frontend javascript. complete the project progress report. team member: jinou yang responsible for extraction scripts development and improvements. demo video. documentation."	['project', 'proposal', 'name', 'expertsearch', 'system', 'team', 'member', 'ri', 'xu', 'captain', 'netid', 'rixu', 'jinou', 'yang', 'jinouy', 'choosing', 'option', 'improving', 'specifically', 'main', 'dataset', 'using', 'faculty', 'bio', 'mp', 'make', 'improvements', 'expertserach', 'following', 'ways', 'add', 'extractions', 'experts', 'phone', 'numbers', 'regex', 'pattern', 'matching', 'hours', 'research', 'interests', 'format', 'keywords', 'topic', 'mining', 'improve', 'search', 'results', 'preview', 'adding', 'build', 'recommendation', 'based', 'users', 'queries', 'browsing', 'history', 'interaction', 'data', 'stored', 'retrieved', 'browser', 'cookies', 'bm', 'used', 'find', 'top', 'relevant', 'recommend', 'implement', 'web', 'scraping', 'scripts', 'extract', 'python', 'store', 'local', 'file', 'shown', 'frontend', 'another', 'script', 'perform', 'interest', 'related', 'function', 'ranker', 'also', 'implemented', 'html', 'css', 'javascript', 'achieve', 'objectives', 'progress', 'report', 'nov', 'th', 'current', 'backend', 'finished', 'writing', 'dumped', 'result', 'files', 'later', 'ran', 'recreate', 'new', 'metadatadat', 'include', 'display', 'refactored', 'code', 'existing', 'modularize', 'components', 'reusing', 'integrate', 'number', 'expert', 'cards', 'remaining', 'tasks', 'need', 'look', 'use', 'info', 'recognition', 'reduce', 'empty', 'names', 'email', 'information', 'challenges', 'biggest', 'challenge', 'getting', 'familiar', 'base', 'iterating', 'extracting', 'unrelated', 'like', 'school', 'locations', 'may', 'interfere', 'software', 'usage', 'tutorial', 'presentation', 'video', 'link', 'httpswwwyoutubecomwatchvqgxiddoylw', 'documentation', 'overview', 'application', 'weve', 'made', 'several', 'specific', 'show', 'areas', 'increase', 'ratio', 'reduces', 'chance', 'see', 'simple', 'past', 'replace', 'home', 'page', 'feed', 'way', 'serverpy', 'flask', 'server', 'contains', 'apis', 'handlers', 'api', 'accepts', 'parameters', 'query', 'expected', 'metapy', 'library', 'fetch', 'additional', 'similar', 'returns', 'recommended', 'per', 'finding', 'matched', 'given', 'randomly', 'selected', 'encourage', 'exploration', 'indexjs', 'logic', 'called', 'windowonload', 'reads', 'talks', 'endpoint', 'term', 'latest', 'dosearch', 'clicked', 'button', 'nonempty', 'backendsearch', 'pick', 'docdiv', 'return', 'div', 'object', 'render', 'university', 'etc', 'rendering', 'queried', 'material', 'icons', 'httpsmaterialioicons', 'visibility', 'setcookie', 'getcookie', 'two', 'helper', 'functions', 'storing', 'retrieving', 'case', 'field', 'comma', 'separated', 'strings', 'extractionextract_interestpy', 'generate', 'area', 'nltk', 'gensim', 'snowballstemmer', 'extraction', 'document', 'tokenization', 'performed', 'followed', 'stemming', 'lemmatization', 'uses', 'run', 'pos', 'tagging', 'token', 'noun', 'words', 'finally', 'predefined', 'word', 'mapping', 'compute', 'final', 'documents', 'exported', 'datainterests', 'extractionextract_phone_numberpy', 'phonenumber', 'dataphone_numbers', 'extractionextract_namespy', 'extract_names_spacypy', 'merge_namepy', 'three', 'improved', 'original', 'extract_namespy', 'version', 'stanfordner', 'datanamestxt', 'spacy', 'nlp', 'framework', 'extracted', 'named', 'entities', 'datanames_secondarytxt', 'combine', 'cannot', 'check', 'secondary', 'methods', 'combined', 'able', 'coverage', 'new_namestxt', 'extractionwrite_file_namespy', 'combines', 'interestsphoneemailnames', 'generated', 'writes', 'index', 'rank', 'install', 'simply', 'clone', 'repository', 'github', 'dependency', 'packages', 'required', 'commands', 'pip', 'gunicorn', 'cd', 'courserproject', 'serverapp', 'b', 'access', 'httplocalhost', 'chrome', 'description', 'contribution', 'responsible', 'changes', 'servers', 'complete', 'development', 'demo']
https://github.com/riyv/CourseProject	offensive language detection - project progress report for our project we have decided to divide our entire project work into four basic modules, - view - extractor - analyzer - repository view for view module we have decided on using react / dash combination, we may switch to static html webpage based on our needs, view will be used for two main reason, one from ui we will input what hashtags we want to search, that will be fed into our extractor system. also, our ui will have separate dashboard, where will have visual elements of different datasets, like tweet counts, their overall sentiment, etc. extractor this module will be used to get the tweets for a list of hashtags, we have decided to use java for this module, we have signed up for twitter developer account, we are using twitter official hbc api for getting our tweets, twitter/hbc: a java http client for consuming twitter's realtime streaming api (github.com) we have been able to complete the coding of this module, and we were able to get tweets from api successfully for particular hashtags, please find code snippets below, page 1 and we are getting outputs like this, now we are working on cleaning the tweets, so that we can use them directly to our analyzer module without any deformed text analyzer we have decided on using python for this module, there will be python script running in background, where we will feed our cleaned tweets, and we will scan for offensive words in that text and mark that tweet accordingly, also we are planning for doing sentiment analysis of the tweets, we are still deciding on that topic. repository we plan on storing all our analyzed tweets on mongodb on cloud, so that we use data from our ui component. sentiment and speech analysis by: riya gupta, chitra uppalapati, and diptam sarkar what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. - riyag3 (captain), chitrau2, diptams2 what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? our free topic is conducting sentiment analysis as well as polite and impolite language detection on a set of around 1,000 of the top tweets from the daily trending hashtags, dynamically. we are trying to categorize the most popular tweets as positive, negative, neutral, polite, or impolite depending on the topic. this is an interesting project because it allows us to sense what the overall attitude and feeling is towards certain ideas when examining the most relevant tweets per hashtag. this can allow us to find certain patterns and sentiments in the trending hashtags, which can help us identify how people feel about popular discussions and products as well as how polarized specific topics on twitter are. this project will be most helpful for identifying sentiment towards political discussions as well as new products. we plan to use twitter hbc, the java http client for accessing the twitter api, to fetch our 1,000 tweets. then, we will build a system that classifies the tweets. when analyzing our data, we will experiment with different classifiers and evaluate our system using the standard classification evaluations metrics (precision, recall, and f-score). the expected outcome is to display our results on a web app that we will create using react. which programming language do you plan to use? - python, java, javascript please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. main tasks: - scrape 1,000 tweets from daily trending hashtags (20 hours) - input hashtags from our web app - clean our data - query by top number of retweets - store in repo (mongodb database) - perform sentiment analysis/language detection (positive, negative, neutral, polite, impolite) (20 hours) - feed tweets into modules for language analysis - update tweets with language analysis information - output results on a web app (20 hours) - show results in graphs - create a good ui - add information on how to use the tool/its purpose courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['offensive', 'language', 'detection', 'project', 'progress', 'report', 'decided', 'divide', 'entire', 'work', 'four', 'basic', 'modules', 'view', 'extractor', 'analyzer', 'repository', 'module', 'using', 'react', 'dash', 'combination', 'may', 'switch', 'static', 'html', 'webpage', 'based', 'needs', 'used', 'two', 'main', 'reason', 'one', 'ui', 'input', 'hashtags', 'want', 'search', 'fed', 'system', 'also', 'separate', 'dashboard', 'visual', 'elements', 'different', 'datasets', 'like', 'tweet', 'counts', 'overall', 'sentiment', 'etc', 'get', 'tweets', 'list', 'use', 'java', 'signed', 'twitter', 'developer', 'account', 'official', 'hbc', 'api', 'getting', 'twitterhbc', 'http', 'client', 'consuming', 'twitters', 'realtime', 'streaming', 'githubcom', 'able', 'complete', 'coding', 'successfully', 'particular', 'please', 'find', 'code', 'snippets', 'page', 'outputs', 'working', 'cleaning', 'directly', 'without', 'deformed', 'text', 'python', 'script', 'running', 'background', 'feed', 'cleaned', 'scan', 'words', 'mark', 'accordingly', 'planning', 'analysis', 'still', 'deciding', 'topic', 'plan', 'storing', 'analyzed', 'mongodb', 'cloud', 'data', 'component', 'speech', 'riya', 'gupta', 'chitra', 'uppalapati', 'diptam', 'sarkar', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'riyag', 'chitrau', 'diptams', 'free', 'give', 'detailed', 'description', 'task', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'conducting', 'well', 'polite', 'impolite', 'set', 'around', 'top', 'daily', 'trending', 'dynamically', 'trying', 'categorize', 'popular', 'positive', 'negative', 'neutral', 'depending', 'allows', 'us', 'sense', 'attitude', 'feeling', 'towards', 'certain', 'ideas', 'examining', 'relevant', 'per', 'hashtag', 'allow', 'patterns', 'sentiments', 'help', 'identify', 'people', 'feel', 'discussions', 'products', 'polarized', 'specific', 'topics', 'helpful', 'identifying', 'political', 'new', 'accessing', 'fetch', 'build', 'classifies', 'analyzing', 'experiment', 'classifiers', 'standard', 'classification', 'evaluations', 'metrics', 'precision', 'recall', 'fscore', 'display', 'results', 'web', 'app', 'create', 'programming', 'javascript', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'tasks', 'completed', 'estimated', 'time', 'cost', 'scrape', 'clean', 'query', 'retweets', 'store', 'repo', 'database', 'perform', 'analysislanguage', 'update', 'information', 'output', 'show', 'graphs', 'good', 'add', 'toolits', 'purpose', 'courseproject', 'fork', 'paste', 'github', 'link', 'microsoft', 'cmt', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/rnowak6/CourseProject	"team captain : rose nowak - rnowak6 calina shaw - ceshaw2 ayline villegas - aylinev2 sarah menza - semenza2 nicole kolbasov - nsk3 final project introduction the project we decided to focus on creating a tool to help students navigate through multiple slide decks and be able to easily find similar slides to topics that students are attempting to search for. our team focused on expanding the educationalweb system by adding functionalities to improve navigation between slides and uploading/downloading. our datasets included the entirety of the cs 410 slides from coursera along with other courses. we decided to use similar techniques to the current web of slides and connect new slides to the web framework by using a combination of tf-idf similarity and word embedding based similarity. features our project allows for downloading multiple slides at a time along with the option where you can add any slides you like, and then download them at the end of your session. for the main layout of the application, we created more than one page for this application so that it can easily be expanded on in the future. with this goal in mind, we decided to create a homepage where you can see all of the current classes listed that have slides, and then once selecting, it will bring you to the slide page that is currently in production now. additionally, we have made improvements on the current user interface of the slides page. we have changed the way the image for the slide is generated, and convert it to a jpeg to help with seamless loading and to give the page a more holistic feel. challenges our team faced multiple challenges with this project. it was challenging to set up the education web system on our own devices however, luckily, we were all able to have it running on our computers. another challenge we faced was being able to upload our source code to github since the files were so large and github struggled to upload them all however this issue was fixed by omitting the large files. lastly, our biggest challenge was being able to have our features fully functioning. we struggled to create functioning features due to having to also learn the given code and be able to make it work with our vision. team captain: rose nowak - rnowak6 calina shaw - ceshaw2 ayline villegas - aylinev2 sarah menza - semenza2 nicole kolbasov - nsk3 progress report team bogus progress made thus far: 1. all team members were able to get the code downloaded and working on their own computer 2. 5 different uiuc course slides were downloaded to be added to the website 3. updating the user interface for the educational tool a. we have decided to create more than one page for this application so that it can easily be expanded on in the future. with this goal in mind, we decided to create a homepage where you can see all of the current classes listed that have slides, and then once selecting, it will bring you to the slide page that is currently in production now. b. we have made improvements on the current user interface of the slides page. we have changed the way the image for the slide is generated, and convert it to a jpeg to help with seamless loading and to give the page a more holistic feel here is the current new front page. remaining tasks: 1. make final adjustments to front end user interface a. we will create a ""upload your own"" slides button on our new front page to allow students to upload their own slides if our algorithms permit for analysis on new slides b. add functionality and views for notebook feature outlined below 2. create a notebook feature on the side of the screen where a user can save specific slides to create their own study tool 3. creating a toolbar where we can highlight and take notes on our notebook feature any challenges/issues being faced: * ran into numerous errors when trying to get the code working. took much longer than expected. * have not been able to get the code uploaded to our own team's github repository. numerous errors in uploading. team captain : rose nowak - rnowak6 calina shaw - ceshaw2 ayline villegas - aylinev2 sarah menza - semenza2 nicole kolbasov - nsk3 1. what system have you chosen? which subtopic(s) under the system? our group has chosen to expand the educationalweb system by adding functionalities to improve navigation between slides and uploading/downloading. 2. briefly describe the datasets, algorithms or techniques you plan to use our datasets will include the entirety of the cs 410 slides from coursera. if time permits we may expand the dataset by adding slides from other uiuc courses such as hort 106, but this is not the main priority of our project. we will use similar techniques to the current web of slides. to connect new slides to the web framework we will use a combination of tf-idf similarity and word embedding based similarity. we will also introduce some kind of data structure (probably a doubly linked list) to keep track of the student's path throughout the web so they can return to a previous slide. 3. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? we would like to add a popup or sidebar that displays the most relevant similar documents as you are viewing one set of slides. the relevant documents would be calculated using one of the ranking algorithms. we would like to add functionality to go ""back"" to your original slide after clicking related slides on the right hand side. this will be a good feature because that way you can go back to your original lecture after addressing anything you were confused about. we will demonstrate that this works by recording a short demo where we navigate away from the start slide and then hit the back button to return to it. we would also like to add downloading multiple slides at a time. we will be able to add a ""notebook"" option where you can add any slides you like, and then download them at the end of your session. we will demonstrate that this functionality works by testing it locally by downloading a group of files. students will be able to upload their own pdf slides to perform analysis for them (if runtime permits, we will know more if this is possible after beginning). this could also be checked with local testing by uploading a pdf file that isn't included in the web yet. 4. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly our code will extract all of the coursera slides and determine which slides are similar to the one we are currently viewing. it will then display the related slides on the side in a pop up or sidebar so you can easily access them. this popup/sidebar will then have an option to be closed or to help you navigate back to the original slides you were viewing. 5. which programming language do you plan to use? python 6. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. main tasks: * project topic brainstorming session - 1 hour * project proposal and team formation submission - 3 hours * project setup - 1 hour * add algorithm to help find most related documents - 1 hour * add pop up or sidebar that displays the results of the algorithm run - 5 hours * add functionality to go ""back"" to your original slide after clicking related slides on the right hand side - 20 hours * add functionality to download multiple slides at a time - 20 hours * team check-in meetings (over zoom) - 5 hours * progress report - 3 hours * add functionality to allow students to upload their own slides - 20 hours * documentation - 15 hours * improve front end functionality- 8 hours total hours: 102 2.3 educationalweb system the educationalweb system (http://timan102.cs.illinois.edu/explanation//slide/cs-410/0) is a tool to help students learn from course slides. it has two main functionalities currently: 1) retrieve and recommend relevant slides for each slide. you can read more about this in the following papers web of slides, wos demo.; 2) find an explanation of a term/phrase on the slide by highlighting it and then clicking on the ""cap/scholar"" button on the top-right of a slide. it will try to retrieve a relevant section from the professor's textbook that contains an explanation of the selected phrase. you can read more about the underlying algorithm here. the code for the system is available here. below are some ideas to improve and expand this system. you may choose to integrate your code with the existing system, or borrow some ideas from it, or build your own systems/algorithms. * improving the usability and reach of the existing system some of you might have used the system and identified potential areas of improvement. the aim of this subtopic is to refine the current version of educationweb. some specific ideas include (many are borrowed from this piazza post): 1. scale up the current system. add more slides and courses from multiple sources e.g. coursera, uiuc courses, etc. and run the existing algorithms on them. again, it might be useful to think about automatic crawling similar to the subtopic in 2.2 above. it would be very interesting to see the interaction between slides/textbooks at a large scale!! 2. improve the performance of the system. currently, loading each slide takes time. 3. allow downloading slides in bulk. currently, we can only download one slide at a time. 4. add more context to the explanations (e.g. link to the specific page in the textbook) 5. allow adding additional courses/lectures directly from the web interface. this would also involve dynamically identifying the recommended/relevant slides for a new slide. currently, a static file is used which contains pre-computed recommendations for each slide. 6. integrate the tool with piazza/coursera, i.e. maybe link piazza/coursera to the tool or vice-versa. alternatively, add discussion forum and video capabilities to the tool so that it serves as a one-stop-shop for all users' educational needs. 7. link to latest related research articles: in this way, the lecture content can be automatically updated 8. you could also work on improving the current recommendation, search and explanation mining algorithms (described in the papers at the beginning of this section 2.3) * automatically creating teaching material for in-demand skills this subtopic is an extended version of the existing educationweb system. there is an increasing demand for skilled workers in the industry. quality education is not easily accessible to everyone due to barriers such as high cost, geographical and language barriers, etc. also, instructors cannot be available 24*7 to provide personalized support to all learners. in this subtopic, the overarching aim is to tackle some of these issues. in particular, the following tasks might be good starting points. * identifying in-demand skills: you can crawl and analyze relevant sections of job boards, news articles, scientific articles, social media, etc. to automatically identify the emerging keywords /topics. for this, you may refer to some papers on contextual text mining (mentioned in option 1 of this document). * creating lectures and tutorials for those skills: for this, you may consider lecture slides (e.g. from coursera courses) as the basic units of knowledge. then, the task could be to find the most relevant slides or clusters of slides (could be across multiple courses/lectures) for a given skill (topic). you may borrow some ideas from the educationweb system for this. you may also use the slides in existing lectures on some topics as the ""relevant slides"" for those topics. in this way, you can automatically generate training data for supervised learning. you could also combine knowledge from multiple sources (e.g. textbook sections, slides, videos, blogs, codebases) for creating more comprehensive tutorials. a more challenging task would be to automatically generate  the lectures/tutorials using techniques from natural language generation and abstractive text summarization. another interesting idea is to automatically generate agents , e.g. using virtual agent interaction framework (vaif). this goes beyond the material covered in class but could lead to some highly innovative and state-of-the-art projects! if you choose this option, please answer the following questions in your proposal: 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. 2. what system have you chosen? which subtopic(s) under the system? 3. briefly describe the datasets, algorithms or techniques you plan to use 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly 6. which programming language do you plan to use? 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. at the final stage of your project, you need to deliver the following: * your documented source code. * a demo that shows your implementation actually works. if you are improving a function, compare your results to the previously available function. if your implementation works better, show it off. if not, discuss why. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['team', 'captain', 'rose', 'nowak', 'rnowak', 'calina', 'shaw', 'ceshaw', 'ayline', 'villegas', 'aylinev', 'sarah', 'menza', 'semenza', 'nicole', 'kolbasov', 'nsk', 'final', 'project', 'introduction', 'decided', 'focus', 'creating', 'tool', 'help', 'students', 'navigate', 'multiple', 'slide', 'decks', 'able', 'easily', 'find', 'similar', 'slides', 'topics', 'attempting', 'search', 'focused', 'expanding', 'educationalweb', 'system', 'adding', 'functionalities', 'improve', 'navigation', 'uploadingdownloading', 'datasets', 'included', 'entirety', 'cs', 'coursera', 'along', 'courses', 'use', 'techniques', 'current', 'web', 'connect', 'new', 'framework', 'using', 'combination', 'tfidf', 'similarity', 'word', 'embedding', 'based', 'features', 'allows', 'downloading', 'time', 'option', 'add', 'like', 'download', 'end', 'session', 'main', 'layout', 'application', 'created', 'one', 'page', 'expanded', 'future', 'goal', 'mind', 'create', 'homepage', 'see', 'classes', 'listed', 'selecting', 'bring', 'currently', 'production', 'additionally', 'made', 'improvements', 'user', 'interface', 'changed', 'way', 'image', 'generated', 'convert', 'jpeg', 'seamless', 'loading', 'give', 'holistic', 'feel', 'challenges', 'faced', 'challenging', 'set', 'education', 'devices', 'however', 'luckily', 'running', 'computers', 'another', 'challenge', 'upload', 'source', 'code', 'github', 'since', 'files', 'large', 'struggled', 'issue', 'fixed', 'omitting', 'lastly', 'biggest', 'fully', 'functioning', 'due', 'also', 'learn', 'given', 'make', 'work', 'vision', 'progress', 'report', 'bogus', 'thus', 'far', 'members', 'get', 'downloaded', 'working', 'computer', 'different', 'uiuc', 'course', 'added', 'website', 'updating', 'educational', 'b', 'front', 'remaining', 'tasks', 'adjustments', 'button', 'allow', 'algorithms', 'permit', 'analysis', 'functionality', 'views', 'notebook', 'feature', 'outlined', 'side', 'screen', 'save', 'specific', 'study', 'toolbar', 'highlight', 'take', 'notes', 'challengesissues', 'ran', 'numerous', 'errors', 'trying', 'took', 'much', 'longer', 'expected', 'uploaded', 'teams', 'repository', 'uploading', 'chosen', 'subtopics', 'group', 'expand', 'briefly', 'describe', 'plan', 'include', 'permits', 'may', 'dataset', 'hort', 'priority', 'introduce', 'kind', 'data', 'structure', 'probably', 'doubly', 'linked', 'list', 'keep', 'track', 'path', 'throughout', 'return', 'previous', 'function', 'demonstrate', 'works', 'improving', 'show', 'implementation', 'actually', 'better', 'would', 'popup', 'sidebar', 'displays', 'relevant', 'documents', 'viewing', 'calculated', 'ranking', 'go', 'back', 'original', 'clicking', 'related', 'right', 'hand', 'good', 'lecture', 'addressing', 'anything', 'confused', 'recording', 'short', 'demo', 'away', 'start', 'hit', 'testing', 'locally', 'pdf', 'perform', 'runtime', 'know', 'possible', 'beginning', 'could', 'checked', 'local', 'file', 'isnt', 'yet', 'communicate', 'utilize', 'fine', 'build', 'systems', 'please', 'state', 'clearly', 'extract', 'determine', 'display', 'pop', 'access', 'popupsidebar', 'closed', 'programming', 'language', 'python', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'number', 'completed', 'estimated', 'cost', 'task', 'brainstorming', 'hour', 'proposal', 'formation', 'submission', 'setup', 'algorithm', 'results', 'run', 'checkin', 'meetings', 'zoom', 'documentation', 'httptimancsillinoiseduexplanationslidecs', 'two', 'retrieve', 'recommend', 'read', 'following', 'papers', 'wos', 'explanation', 'termphrase', 'highlighting', 'capscholar', 'topright', 'try', 'section', 'professors', 'textbook', 'contains', 'selected', 'phrase', 'underlying', 'available', 'ideas', 'choose', 'integrate', 'existing', 'borrow', 'systemsalgorithms', 'usability', 'reach', 'might', 'used', 'identified', 'potential', 'areas', 'improvement', 'aim', 'subtopic', 'refine', 'version', 'educationweb', 'many', 'borrowed', 'piazza', 'post', 'scale', 'sources', 'eg', 'etc', 'useful', 'think', 'automatic', 'crawling', 'interesting', 'interaction', 'slidestextbooks', 'performance', 'takes', 'bulk', 'context', 'explanations', 'link', 'additional', 'courseslectures', 'directly', 'involve', 'dynamically', 'identifying', 'recommendedrelevant', 'static', 'precomputed', 'recommendations', 'piazzacoursera', 'ie', 'maybe', 'viceversa', 'alternatively', 'discussion', 'forum', 'video', 'capabilities', 'serves', 'onestopshop', 'users', 'needs', 'latest', 'research', 'articles', 'content', 'automatically', 'updated', 'recommendation', 'mining', 'described', 'teaching', 'material', 'indemand', 'skills', 'extended', 'increasing', 'demand', 'skilled', 'workers', 'industry', 'quality', 'accessible', 'everyone', 'barriers', 'high', 'geographical', 'instructors', 'cannot', 'provide', 'personalized', 'support', 'learners', 'overarching', 'tackle', 'issues', 'particular', 'starting', 'points', 'crawl', 'analyze', 'sections', 'job', 'boards', 'news', 'scientific', 'social', 'media', 'identify', 'emerging', 'keywords', 'refer', 'contextual', 'text', 'mentioned', 'document', 'lectures', 'tutorials', 'consider', 'basic', 'units', 'knowledge', 'clusters', 'across', 'skill', 'generate', 'training', 'supervised', 'learning', 'combine', 'videos', 'blogs', 'codebases', 'comprehensive', 'lecturestutorials', 'natural', 'generation', 'abstractive', 'summarization', 'idea', 'agents', 'virtual', 'agent', 'vaif', 'goes', 'beyond', 'covered', 'class', 'lead', 'highly', 'innovative', 'stateoftheart', 'projects', 'answer', 'questions', 'names', 'netids', 'administrative', 'duties', 'stage', 'need', 'deliver', 'documented', 'shows', 'compare', 'previously', 'discuss', 'courseproject', 'fork', 'paste', 'microsoft', 'cmt', 'detailed', 'instructions', 'week', 'overviewweek', 'activities']
https://github.com/rohang62/CourseProject	"rohan goel, paru swaminathan, satej shah 1. progress made thus far thus far, we have set up our working environments and installed the necessary software. we have understood the task at hand and created a plan to move forward. we have cleaned the training data by removing stop words and brackets and by converting the data into word2vec vectors. 2. remaining tasks we will now be building a model to learn to classify whether the response with context is sarcastic or not. we are planning on trying out naive bayes, linear regression, rnns, a simple neural network, and a simple random forest classifier. we plan to test each of these models in the week of november 30th, and are hoping to move forward with one of them, and begin hyperparameter tuning by december 7th. 3. any challenges/issues being faced currently, we are facing issues with how to utilize both the response and context. there are many tutorials online that help with understanding how to use one column, however, working with multiple features proves to be more challenging. rohan goel, satej shah, paru swaminathan cs 410: report an overview of the function of the code (i.e., what it does and what it can be used for). at a high level, the function of the code is to predict whether a piece of text (tweets and responses) is sarcastic or not sarcastic. our program classifies the text (context) and associates a certain label (sarcasm or not_sarcasm) using an id. the input of our code is a json file named test.jsonl which contains responses with an associated id and context, and another train.jsonl file with responses, id, context, and a label. the output of our code is a comma separated file named answer.txt which contains the predictions on the test dataset. the file has exactly 1800 rows and each row has an id and the predicted label. documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. the first step of our development process was to create a plan. researching the different types of classification models, we were able to distinguish a couple of models that seemed promising to complete the task of classifying sarcasm of tweets. after testing some of them, we decided to proceed with the bert language model and nn algorithm. our first test was with fasttext, however, the performance of this algorithm reached an upper limit, and therefore, we couldn't move forward with it. we also tried using k means with two centers, however we were unable to reach baseline with this. therefore, we opted to go with using the bert language model. using the pre-trained bert model provided the feature vectors which we then used to train the neural network. we first used a logistic regression model, however, due to the simplicity of the model, it did not perform well enough. we then decided to use a neural network with 3 layers. through tweaking parameters, we were able to finally get our average accuracy above the baseline. in the code, we first read in the training and test data from the given folder. we then parsed the data. after this, we assigned binary values: 1 or 0 to the labels in the training data. documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. to install and run this software, you can view the code through github (https://github.com/rohang62/classificationcompetition). after cloning the repository onto your device locally, you can install jupyter notebook and open it through your browser. from here you can run the code blocks using the play button on the top of the screen. in the implementation of our code, we use many frameworks and libraries that may need to be installed locally such as pytorch, numpy, pandas, transformers, and sklearn. after running all of the blocks of code, this will create a file ""answer.txt"" in which you can view the results of the program. within this file, you will see a line for each situation and its resulting classification. brief description of contribution of each team member in case of a multi-person team. each member of the team learned and contributed to the project very well! everyone was very enthusiastic, encouraging, and open to ideas. working remotely, communication was very imperative to doing well. rohan took lead on the development side, and paru and satej focused on the research and documentation. although, all three members of the team helped each other out whenever needed. this team worked well together and was able to support each other throughout the course of the project. project proposal: team prs 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. rohan goel: rohang4@illinois.edu (team captain) satej shah: sshah273@illinois.edu parvathi swaminathan: ps13@illinois.edu 2. which competition do you plan to join? we plan to join the text classification competition. 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods yes, we are prepared and excited to learn! neural classifiers that we have heard of are bert and lstm. some deep learning frameworks that we have heard of are pytorch, tensorflow, and keras. rohan has worked with tensorflow and pytorch in the past. satej has not worked with such models. parvathi has minimal prior experience with such models in an applied machine learning course. 4. which programming language do you plan to use? we will be using python in order to complete this project. courseproject final project video: https://www.youtube.com/watch?v=6em313armys"	['rohan', 'goel', 'paru', 'swaminathan', 'satej', 'shah', 'progress', 'made', 'thus', 'far', 'set', 'working', 'environments', 'installed', 'necessary', 'software', 'understood', 'task', 'hand', 'created', 'plan', 'move', 'forward', 'cleaned', 'training', 'data', 'removing', 'stop', 'words', 'brackets', 'converting', 'wordvec', 'vectors', 'remaining', 'tasks', 'building', 'model', 'learn', 'classify', 'whether', 'response', 'context', 'sarcastic', 'planning', 'trying', 'naive', 'bayes', 'linear', 'regression', 'rnns', 'simple', 'neural', 'network', 'random', 'forest', 'classifier', 'test', 'models', 'week', 'november', 'th', 'hoping', 'one', 'begin', 'hyperparameter', 'tuning', 'december', 'challengesissues', 'faced', 'currently', 'facing', 'issues', 'utilize', 'many', 'tutorials', 'online', 'help', 'understanding', 'use', 'column', 'however', 'multiple', 'features', 'proves', 'challenging', 'cs', 'report', 'overview', 'function', 'code', 'ie', 'used', 'high', 'level', 'predict', 'piece', 'text', 'tweets', 'responses', 'program', 'classifies', 'associates', 'certain', 'label', 'sarcasm', 'not_sarcasm', 'using', 'id', 'input', 'json', 'file', 'named', 'testjsonl', 'contains', 'associated', 'another', 'trainjsonl', 'output', 'comma', 'separated', 'answertxt', 'predictions', 'dataset', 'exactly', 'rows', 'row', 'predicted', 'documentation', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'future', 'extension', 'improvement', 'first', 'step', 'development', 'process', 'create', 'researching', 'different', 'types', 'classification', 'able', 'distinguish', 'couple', 'seemed', 'promising', 'complete', 'classifying', 'testing', 'decided', 'proceed', 'bert', 'language', 'nn', 'algorithm', 'fasttext', 'performance', 'reached', 'upper', 'limit', 'therefore', 'couldnt', 'also', 'tried', 'k', 'means', 'two', 'centers', 'unable', 'reach', 'baseline', 'opted', 'go', 'pretrained', 'provided', 'feature', 'train', 'logistic', 'due', 'simplicity', 'perform', 'well', 'enough', 'layers', 'tweaking', 'parameters', 'finally', 'get', 'average', 'accuracy', 'read', 'given', 'folder', 'parsed', 'assigned', 'binary', 'values', 'labels', 'usage', 'including', 'either', 'usages', 'apis', 'detailed', 'instructions', 'install', 'run', 'whichever', 'applicable', 'view', 'github', 'httpsgithubcomrohangclassificationcompetition', 'cloning', 'repository', 'onto', 'device', 'locally', 'jupyter', 'notebook', 'open', 'browser', 'blocks', 'play', 'button', 'top', 'screen', 'implementation', 'frameworks', 'libraries', 'may', 'need', 'pytorch', 'numpy', 'pandas', 'transformers', 'sklearn', 'running', 'results', 'within', 'see', 'line', 'situation', 'resulting', 'brief', 'description', 'contribution', 'team', 'member', 'case', 'multiperson', 'learned', 'contributed', 'project', 'everyone', 'enthusiastic', 'encouraging', 'ideas', 'remotely', 'communication', 'imperative', 'took', 'lead', 'side', 'focused', 'research', 'although', 'three', 'members', 'helped', 'whenever', 'needed', 'worked', 'together', 'support', 'throughout', 'course', 'proposal', 'prs', 'names', 'netids', 'captain', 'administrative', 'duties', 'rohangillinoisedu', 'sshahillinoisedu', 'parvathi', 'psillinoisedu', 'competition', 'join', 'choose', 'prepared', 'stateoftheart', 'classifiers', 'name', 'deep', 'learning', 'heard', 'describe', 'relevant', 'prior', 'experience', 'methods', 'yes', 'excited', 'lstm', 'tensorflow', 'keras', 'past', 'minimal', 'applied', 'machine', 'programming', 'python', 'order', 'courseproject', 'final', 'video', 'httpswwwyoutubecomwatchvemarmys']
https://github.com/rohankk2/Twitter-Recommendations-based-on-text	"twitter recommendations based on text create suggestions on potential people/pages/ads a user would like to follow based on their tweet/post content. 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. rohan khanna - rohank2 (team captain) cesia bulnes - cbulnes2 tyler wong - tylercw3 2. what is your free topic? please give a detailed description. our free topic is a recommendation algorithm that based on the text contents of tweets makes appropriate recommendations to the user. the recommendations can range from other tweets similar to a user's tweet, advertisements or even possible pages to follow. consider a user who frequently tweets about a soccer club then our algorithm should recommend other followers of that club or advertisements specific to that club's products. another example is if i frequently post about the new gaming console i should get recommendations to follow sellers such as gamestop,amazon etc on twitter as they are likely to be talking about console sale dates. these recommendation are all based on the text of a tweet. you may ask, doesn't twitter have that already? twitter's recommendation system currently is one page, where they recommend multiple sets of people who may be of different categories. currently: what we want: as you can see, the only relevant recommendation is the person who wrote it, or in many cases someone who was mentioned in the tweet. there is no recommendation of other people writing similar things. in the example below, you can see that michelle obama has a similar tweet, therefore she would be one of the top results returned since the ml/nlp algorithm recommends this content with a high % of similarity. we can then show the top tweets which can generate follows to different types of celebrities/businesses/ads etc. recommendation of tweets: 3. what is the task? the task is to deliver working software code, software documentation, and a software usage presentation about our topic described above. the code will fulfil our primary use case so that as someone makes a tweet, a recommendation will show up based on that singular tweet. in addition, we want to be able to give a percentage of how much a tweet is related to another page, tweet, etc. 4. why is it important or interesting? this project is important because we want to portray similarities between a person and other people around the world. it's a way to unite people based on one singular tweet, and for people to be aware that they are not alone in terms of a specific subject. we are focusing on social aspects this year because of controversial topics, such as politics(trump/biden), the black lives matter and all lives matter movements, lgbtq, children in ice detention centers and many more. we hope to examine a tweet that contains keywords, and recommend other personalities/pages to follow when that tweet is put in to grow a person's network. 5. what is your planned approach? we plan on taking an iterative approach throughout this software project so that we can quickly identify blockers and make consistent progress. with that being said, we will meet weekly to discuss our current progress and any blockers that we're experiencing. we will also be splitting up the work so that we can all work in parallel. in addition, we are consistently talking through in a group chat where we can quickly get feedback on an idea or a feature. we do have a defined due date, so we will use that date as a target to deliver a minimal viable product which will deliver the major functionality. we will add on more work to that minimal viable product if we underestimated our time or if we have more capacity than expected. 6. what tools, systems or datasets are involved? the first system that comes to mind is using twitter developer, since we could filter real time tweets, and cross examine them to make recommendations based on people tweeting similar content. i think most of the work needed to recommend would be coming from twitter developer's api's. we would also be using pycharm to code in python to show our results through the terminal. we would use the nltk tool kits to remove stop words and appropriately tag the data. to store our test data and queries we will provision a non relational database which are available from major companies such as microsoft,mongo,amazon etc. 7. what is the expected outcome? the expected outcome is for someone to make a tweet, and for them to have a recommendation immediately based on that singular tweet. currently, twitter has a recommendation page, but not recommendations based on tweets. people get passionate about topics and i feel like this feature would increase a person's usage of twitter. 8. how are you going to evaluate your work? as discussed in class, evaluation of a text recognition system depends on its usefulness to the end users. we plan to create a google form where users can rate how useful the results were for a particular tweet. we would look to answer the following questions through the google form all on a scale of 0-10 : 1. how accurate are the results provided by our tool ? 2. do the results relate to the category of your tweet ? 3. how likely are you to use this tool in a production environment ? 4. how satisfied are you with the speed of the system ? 5. does the person/page recommended reflect your interests based on a tweet? 6. would you use this feature if twitter enabled it? 7. do you think it is invasive or inappropriate? the next important criteria is the speed. google delivers its search results in approximately 0.67 seconds. we aim at a minimum to have our results show within 2 seconds. optimistically we will target results being shown within one second. 9. which programming language do you plan to use? python, js, react 10. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. task estimated hours set up twitter api and get familiarized 15 (5 hours per teammate) create github repo and create base project components 2 hours setting up nonrelational db 2 hours create software usage tutorial presentation 3 hours develop software documentation 12 (4 hours per teammate) develop nlp code that can process tweets and categorize the contents 8 hours based on the categories of the contents of the tweet scrape data from the twitter apis relevant to that content. 10 hours program a ranking algorithm that gives : 1. top users to follow, 2. top posts the user may like 3. top retail sites based on their tweet. (ads) 24 hours create google form for feedback evaluation 1 hour (optional) create a web app to present all 10 hours results. include setting up api and frontend total 77 excluding optional dev design doc for microforce - twitter tweet recommendations based on topics tyler wong - - tylercw3@illinois.edu rohan khanna - rohank2@illinois.edu cesia bulnes - cbulnes2@illinois.edu introduction on topic: we are currently looking at topic modeling tweets and recommending the tweets or users that are most similar in a given tweet. we are looking at using a ranking algorithm such as okapi bm25 learned in class for ranking tweets by ranking the most similar tweets given a tweet by a user, the category of the tweets that it is related to, the top ranked users in said category, and the top categories/topics in a given sample set. for example, had we borrowed tweets from november 6th,2020, the top topic would have been politics because of the usa elections. versus november 26 probably having thegrammys nominations as one of the most trending topics. it will be interesting to recommend other similar tweets/users to a category presented by a single query. we will be ranking and observing the results with a sample set of 2000 users for the time in this project, and observing the past 7 days of tweets by each said user. currently: by the end of the week, we hope to finish the database setup. we decided to use sqlite to avoid any errors on setting up our computers. simplifying the database will allow us to work on the algorithms needed in the last two weeks of the class. in addition, we're also working on gathering all the necessary data we need from the twitter api and importing that data into the database. we have all created twitter developer api and have started planning what we each need to do come the last two weeks of class. we plan on using multiple different entities that the twitter api provides, such as user data and tweet annotations and entities. concerns: as of now the concern is having a good ranking model. we want to make sure that the ranking model is correct in terms of how close tweets are to each other. it's imperative that our team take some time to validate returned ranks to make sure there are no discrepancies. for example a query that is exactly like a tweet in our database should have such a tweet ranked as 1 versus one that is highly similar but not exactly the same. work to do: 1. ranking algorithm to rank the query or tweet that the user has typed, displaying the ranked tweets in commonality. a. going off of the query, or tweet, we want to be able to display common tweets from the pool of users and their respective tweets in the past 7 days. say my query is ""i love seafood"". the ranking will be conducted among our pool of tweets and we would show the top tweets that may have similarity in the topic/category. 2. get 2000 users, and their last 7 days of tweets a. for the purpose of the project we want to go ahead and observe ranking in a small-ish pool of people and tweets. i think it would be informative to observe the ranking when using a pool of 1000 users versus a pool of 1000 users for example. the more tweets are available, the more we should see a higher commonality between the tweets given back from our ranking. 3. process data a. we should process the data of tweets that we receive to eliminate words or other elements in the tweet that are not helpful in terms of ranking the tweet for our query. b. source or guidance for processing with python: https://towardsdatascience.com/basic-tweet-preprocessing-in-python-efd8360d52 9e 4. we should get information from 2000 users and their past 7 days of tweets into the following tables: a. original_ tweets table: i. we want to obtain the information about a tweet, who wrote it, the time posted, the content type etc. this will be stored in the original_tweets table. b. processed_tweets table: i. we want to then process the tweet text and content in order to simplify our ranking model. c. users table: i. we want to create a users table so that we can see the correlated tweets per user. we can do this multiple ways: tie the tweet id's in an array that correspond to the user. we want to also include the location of the user, number of followers, etc of what's included in the user-object https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/overvie w/user-object d. user_category table: i. what kind of topics does this user rank mostly in? we should aggregate counts of topics that their previous seven days of tweets include in. this would be useful to observe at the end in our conclusion. if a user is most likely to post about politics, it would be interesting to see if they rank among the higher ranked tweets about politics in our ranking algorithm. e. tweet_category table i. last but not least, we want to have a categories table where we can map the category, we can also create a list of tweets belonging in this table 5. build an inverted index a. we should create an inverted index for every word presented in a tweet to further allow the ranking algorithm to rank a tweet accordingly. 6. grab the top x users(on ranking bm25) that show up in terms of different categories. a. use all of the categories (display invalid if not in the categories available) i. we want to be able to use all of the categories available in order to do ranking with the tweets related. if a query is present where it doesn't fit in with any of the categories, we shall show ""no category fits this tweet"" ii. users being the top performing tweets for a given category 1. we want to also display top performing users for a given category. this can be done by collecting the overall topics this user tweeted about and presenting the ones with higher frequency under their id. iii. top categories in sample set 1. depending on the content that is aggregated in the past 7 days it would be informative to correlate these tweets with ongoing present news. would be good to see if the ranking is similar to most searched on twitter charts and trending statistics. 7. display top x on the terminal/ui. a. we will have an interactive terminal asking the user what they would like to display in terms of ranking as show in number 6. twitter recommendations based on text team members: rohan khanna (team captain) - rohank2@illinois.edu tyler wong - tylercw3@illinois.edu cesia bulnes - cbulnes2@illinois.edu for full documentation please read our pdf report uploaded in this repo: https://github.com/rohankk2/twitter-recommendations-based-on-text/blob/main/twitter%20recommendations%20based%20on%20text%20final%20report.pdf introduction twitter is a social media platform allowing users to connect and share thoughts and information. a notable example of twitter and content shared was seen in 2020, with the presidency and election. there are currently recommendations on who to follow in general for twitter users. however, when a tweet is made, that tweet does not have suggested/similar tweets that a user can react to or retweet. the purpose of this project is to give users the ability to get recommendations based on their tweets. suppose you write ""love hamburgers and fries"", you should expect to get back a topic, and if you run that same query with our ranker, you will get a list of 10 tweets that are closest in similarity, along with the 10 users that have tweets that are closest to the content of this query. obtaining twitter data you will need python installed and all the required packages installed. pip install -r requirements.txt obtain a twitter developer account through the twitter developer portal if you haven't already. add the consumer key, consumer secret, access token, access token secret, and bearer token to the ""twitter_utils.py"" main method's variables. these will be used to interact with the twitter api. run the code to get the users and tweets. the code will check to make sure not to regenerate these, so if you run it multiple times you will need to delete the files in the ""data"" directory of the repository. python src/twitter_utils.py data extraction for topic extraction we use the nltk toolkits and gensim. as we learnt in class lda is an unsupervised machine learning algorithm that uses a mixture model to generate documents. each topic can be assigned some prior probability and each topic consists of probabilities for generating a particular word from the vocabulary. data retrieval/cleaning: we developed a few different functions to perform data retrieval and cleaning of the tweets: remove_emoji(text) remove_links(text) remove_users(text) clean_tweet(tweet) all of these functions are meant to clean up the data so that we can perform better analysis of the data with better accuracy. we process all of our original tweets from the sqlite database through these functions. the remove_emoji(text)method removes any emojis that are found in the tweet because we found that emojis didn't provide much meaningful information. the remove_links(text) method removes any http or https links that are found in the tweet text since that data isn't useful when determining category. the remove_users(text)method removes any ""@"" mentions for any other user. the clean_tweet(tweet)method makes the tweet all lowercase, removes punctuation, removes any stopwords, and removes any words that 2 characters or less. how to run topic extraction: to run the code a user can put test tweets in the test tweets.json file and just execute the python3.8 topicdeterminant.py this will classify the tweet into the most likely topic. using this topic modelling you can draw a relationship between people who have similar tweets. execute the following command on the terminal python3.8 topicdeterminant.py ranker of tweets and users after loading the tweet data and creating a map of the author id's to the author's screen name, the tweets are then using tf-idf weights per word to score shared words. given the following tweet_query ""heat is cranking"" i want to return a recommendation of tweets that are similar to the tweet_query, along with the % of their similarity. 1) to begin with, once git cloned, go to data and unzip tweets.tar.gz, this will unzip tweets.json. tar -xzvf tweets.tar.gz 2) you can choose a query to substitute into tweet_query in the ranker.py code. you may replace the writing within this query to obtain similarities with different queries. 3) to execute simply write the following in the terminal: python ranker.py sources https://medium.com/@osas.usen/topic-extraction-from-tweets-using-lda-a997e4eb0985 http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/ https://github.com/enoreese/topic-modelling/blob/master/preprocessor.py https://github.com/4oh4/doc-similarity/blob/master/examples.ipynb twitter recommendations based on text report team members: rohan khanna (team captain) - rohank2@illinois.edu tyler wong - tylercw3@illinois.edu cesia bulnes - cbulnes2@illinois.edu introduction twitter is a social media platform allowing users to connect and share thoughts and information. a notable example of twitter and content shared was seen in 2020, with the presidency and election. there are currently recommendations on who to follow in general for twitter users. however, when a tweet is made, that tweet does not have suggested/similar tweets that a user can react to or retweet. the purpose of this project is to give users the ability to get recommendations based on their tweets. suppose you write ""love hamburgers and fries"", you should expect to get back a topic, and if you run that same query with our ranker, you will get a list of 10 tweets that are closest in similarity, along with the 10 users that have tweets that are closest to the content of this query. we would also get the topic of this tweet for classification purposes. currently on twitter: what this project accomplishes: the following tweet will have a .89% of similarity. twitter data in order to get data from twitter, we had to get approved for a developer key from twitter. this is an application that we submitted which outlined our use case and was promptly approved. even though we now have this api key, twitter still limits your use of the platform through api. most notably, they limit how much request you can do in one hour and they limit how much data you can get per request. because of these request limits from the twitter api, we decided to use an open source python library to handle requesting data from twitter's v1.1 api called python-twitter. for querying data from twitter's v2 api, we directly used twitter's http api since it's so new, there aren't many open source tools to use. to get the users we decided to get 3000 random active twitter users. in order to do this, we queried twitter's sample stream which provides a subset of active tweets coming in as a stream. once we obtained a tweet from the stream, we queried the language of the tweet and to check if the user has a public profile or not. if they were english speaking and had a public profile, we obtained their user information. once we have our random users, we got the last 7 days of tweets from them. we did this by querying for the tweet ids and then getting each associated tweet from the v2 api. this was a very expensive operation since twitter limits how many tweets you can get, but given enough time we were able to get all this data. we ended up with around 120,000 tweets as our full data set which is included in the ""tweets.tar.gz"" file in the ""data"" folder of our github repository. example of a single tweet data with annotations and entities how it works 1) you will need python installed and all the required packages installed. pip install -r requirements.txt 2) obtain a twitter developer account through the twitter developer portal if you haven't already. add the consumer key, consumer secret, access token, access token secret, and bearer token to the ""twitter_utils.py"" main method's variables. these will be used to interact with the twitter api. 3) run the code to get the users and tweets. the code will check to make sure not to regenerate these, so if you run it multiple times you will need to delete the files in the ""data"" directory of the repository. python src/twitter_utils.py database sqlite was used to extract the tweets and user information from the twitter api's response. we used the standard v1.1 api to extract information on the users. this was mainly important to later map the user id's to the screen name, location, etc. in the future, this information can be used to build recommendations of tweets based on the location of a user. say a user lives in miami, fl, and they tweet about an upcoming event with a celebrity. there can be a recommendation of tweets with that same geographical location. not only could twitter use this for marketing, but also increasing the connectivity that other social media platforms like facebook have taken as an approach. in addition to the information on the users, we also have the tweet data from the early access twitter v2 api. this version of the api was used because it contains the entity and context information that provides data on the subject and relations of the tweet. some examples of entities are: barack obama, ibm, mountain dew, and san francisco. some examples of context are: tv shows, tv episodes, podcast, holiday, politicians, and video game. sqlite stored this information in the following tables: usertable and originaltweets topic extraction for topic extraction we use the nltk toolkits and gensim. as we learnt in class lda is an unsupervised machine learning algorithm that uses a mixture model to generate documents. each topic can be assigned some prior probability and each topic consists of probabilities for generating a particular word from the vocabulary. data retrieval/cleaning: we developed a few different functions to perform data retrieval and cleaning of the tweets: * remove_emoji(text) * remove_links(text) * remove_users(text) * clean_tweet(tweet) all of these functions are meant to clean up the data so that we can perform better analysis of the data with better accuracy. we process all of our original tweets from the sqlite database through these functions. the remove_emoji(text)method removes any emojis that are found in the tweet because we found that emojis didn't provide much meaningful information. the remove_links(text) method removes any http or https links that are found in the tweet text since that data isn't useful when determining category. the remove_users(text)method removes any ""@"" mentions for any other user. the clean_tweet(tweet)method makes the tweet all lowercase, removes punctuation, removes any stopwords, and removes any words that are 2 characters or less. core algorithm: figure:1 picture reference: https://medium.com/@osas.usen/topic-extraction-from-tweets-using-lda-a997e4eb0985 we decided to go with 5 topics as this was a proof of concept and our test data was relatively small and could be described with 5 topics. after cleaning our data, we essentially create a document term matrix where the rows are the cleaned tweets and the columns are words. the matrix entries hold the count of those words in that particular tweet. for example matrix[i][j] will denote the count of that word in the tweet. this is essentially following the core concept of creating a bag of words model for our project. we then send this document count into the gensim lda model and it runs the lda model to generate the topics. we run the lda with 20 passes for convergence and we decided to use gensim because it gives us the ability to store this model on the disk and hence reuse it for later applications. moreover, we use the multicore lda as it can process the data parallely on multiple threads leading to better overall performance. after this for a new tweet we use this lda model and try to assign probabilities for which topic this new tweet could belong to. as shown in the demo video, we ran our topic classifier on the test tweet : twitch is so cool! #twitch #twitchstreamer #digital our classifier did a good job of classifying this to topic 4 which was : topic: 4 words: 0.020*""marketing"" + 0.013*""#digital"" + 0.008*""media"" + 0.007*""#youtube"" + 0.007*""#twitchde"" + 0.007*""#germanmediart"" + 0.007*""#twitch"" + 0.007*""#seo"" + 0.007*""#email"" + 0.007*""marketer"" overall, this was a good approach as a proof of concept however, we definitely have a lot of room to develop on this project. how to run it: to run the code a user can put test tweets in the test tweets.json file and just execute the python3.8 topicdeterminant.py this will classify the tweet into the most likely topic. using this topic modelling you can draw a relationship between people who have similar tweets. execute python3.8 topicdeterminant.py on the terminal improvements: 1. we could have worked more on cleaning the data to account for duplicate tweets in the form of retweets. moreover, a lot of our accuracy issues were centered around bad data. we had tweets like : oo i know what i\u2019m going to do. these tweets are extremely hard to classify into any particular topic. there is no broad common topic that the above tweet could be classified into and hence such a tweet just corrupts our training data. 2. we could have worked to put a special emphasis on features of tweets like hashtags. sources: 1. https://medium.com/@osas.usen/topic-extraction-from-tweets-using-lda-a997e4eb0985 2. http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/ 3. https://github.com/enoreese/topic-modelling/blob/master/preprocessor.py ranker of tweets and users after loading the tweet data and creating a map of the author id's to the author's screen name, the tweets are then using tf-idf weights per word to score shared words. given the following tweet_query ""heat is cranking"" i want to return a recommendation of tweets that are similar to the tweet_query, along with the % of their similarity. we introduced a reduce_by_lemma function to reduce words to their lemma. stop words from english nltk are the following: {'ourselves', 'hers', 'between', 'yourself', 'but', 'again', 'there', 'about', 'once', 'during', 'out', 'very', 'having', 'with', 'they', 'own', 'an', 'be', 'some', 'for', 'do', 'its', 'yours', 'such', 'into', 'of', 'most', 'itself', 'other', 'off', 'is', 's', 'am', 'or', 'who', 'as', 'from', 'him', 'each', 'the', 'themselves', 'until', 'below', 'are', 'we', 'these', 'your', 'his', 'through', 'don', 'nor', 'me', 'were', 'her', 'more', 'himself', 'this', 'down', 'should', 'our', 'their', 'while', 'above', 'both', 'up', 'to', 'ours', 'had', 'she', 'all', 'no', 'when', 'at', 'any', 'before', 'them', 'same', 'and', 'been', 'have', 'in', 'will', 'on', 'does', 'yourselves', 'then', 'that', 'because', 'what', 'over', 'why', 'so', 'can', 'did', 'not', 'now', 'under', 'he', 'you', 'herself', 'has', 'just', 'where', 'too', 'only', 'myself', 'which', 'those', 'i', 'after', 'few', 'whom', 't', 'being', 'if', 'theirs', 'my', 'against', 'a', 'by', 'doing', 'it', 'how', 'further', 'was', 'here', 'than'}. we also lemma the stop words with stop_lemma. we then initialize tf-idf vector with the lemma function under vectorize. the next thing to do here is create a vector between the tweet_query that we are looking for with the tweet data we collected. these vectors will be examined by creator cosine similarities between the vectors. then we go through the flattened vectors to obtain the scores by the vectors. for score_titles, we want to get the score per tweet. here we view tweet_data as the title since it's hard to give a title to one tweet. after, we print the authors associated with the recommended tweets based on similarity. these authors are printed for the user to know which authors may produce similar content as them. how it works 1) to begin with, once git cloned, go to data and unzip tweets.tar.gz, this will unzip tweets.json. tar -xzvf tweets.tar.gz 2) like shown above, you can see that as a user, you can choose a query to substitute into tweet_query in the ranker.py code. you may replace the writing within this query to obtain similarities with different queries. 3) to execute simply write the following in the terminal: python ranker.py depending on your python version, you may have to pip install some nltk libraries. you would get a message saying whether you have to pip install nltk for example. follow the prompt in the terminal and that should be resolved. upon executing this you will receive the following output: like discussed above, the results result in the number of tweets, a sample of five tweets from the total number of tweets, the top 10 tweets with similarity of content to the original tweet_query, and the top 10 users who made the tweets with most similarity. for testers: edit the query to anything random that you may think of as a tweet. run the ranker.py to get recommendations on similar tweets. improvements: the performance of the ranker was where we missed the mark. we could have optimized the code to perform better. we originally wanted results in 2 seconds, but when doing a lemma, the results take longer than without the lemma. with a lemma it takes approximately 30 seconds longer to obtain the results. sources: this work was done by following the following github tutorial which explained using tf-idf with cosine similarities. https://github.com/4oh4/doc-similarity/blob/master/examples.ipynb contributions of team members team member hours worked contributions to project rohan khanna (team captain) 20 hours 1. performed partial cleaning of the tweets data, ie, removing emoticons, punctuations etc. 2. wrote the code for the main lda algorithm used to classify a tweet into a topic 3. worked on software documentation and software usage presentation. tyler wong 20 hours 1. set up twitter api for project and familiarized myself with both versions of the twitter api. 2. gathered 3000 active random twitter users and their last 7 days of claned categorized tweets using the twitter api. 3. worked on software documentation and software usage presentation. cesia bulnes 20 hours 1. set up the skeleton of the database 2. worked on the ranking of tweet content, to recommend top tweets a user would like based on their query/tweet, and returned the top users 3. worked on software documentation and software usage presentation"	['twitter', 'recommendations', 'based', 'text', 'create', 'suggestions', 'potential', 'peoplepagesads', 'user', 'would', 'like', 'follow', 'tweetpost', 'content', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'rohan', 'khanna', 'rohank', 'cesia', 'bulnes', 'cbulnes', 'tyler', 'wong', 'tylercw', 'free', 'topic', 'please', 'give', 'detailed', 'description', 'recommendation', 'algorithm', 'contents', 'tweets', 'makes', 'appropriate', 'range', 'similar', 'users', 'tweet', 'advertisements', 'even', 'possible', 'pages', 'consider', 'frequently', 'soccer', 'club', 'recommend', 'followers', 'specific', 'clubs', 'products', 'another', 'example', 'post', 'new', 'gaming', 'console', 'get', 'sellers', 'gamestopamazon', 'etc', 'likely', 'talking', 'sale', 'dates', 'may', 'ask', 'doesnt', 'already', 'twitters', 'system', 'currently', 'one', 'page', 'multiple', 'sets', 'people', 'different', 'categories', 'want', 'see', 'relevant', 'person', 'wrote', 'many', 'cases', 'someone', 'mentioned', 'writing', 'things', 'michelle', 'obama', 'therefore', 'top', 'results', 'returned', 'since', 'mlnlp', 'recommends', 'high', 'similarity', 'show', 'generate', 'follows', 'types', 'celebritiesbusinessesads', 'task', 'deliver', 'working', 'software', 'code', 'documentation', 'usage', 'presentation', 'described', 'fulfil', 'primary', 'use', 'case', 'singular', 'addition', 'able', 'percentage', 'much', 'related', 'important', 'interesting', 'project', 'portray', 'similarities', 'around', 'world', 'way', 'unite', 'aware', 'alone', 'terms', 'subject', 'focusing', 'social', 'aspects', 'year', 'controversial', 'topics', 'politicstrumpbiden', 'black', 'lives', 'matter', 'movements', 'lgbtq', 'children', 'ice', 'detention', 'centers', 'hope', 'examine', 'contains', 'keywords', 'personalitiespages', 'put', 'grow', 'persons', 'network', 'planned', 'approach', 'plan', 'taking', 'iterative', 'throughout', 'quickly', 'identify', 'blockers', 'make', 'consistent', 'progress', 'said', 'meet', 'weekly', 'discuss', 'current', 'experiencing', 'also', 'splitting', 'work', 'parallel', 'consistently', 'group', 'chat', 'feedback', 'idea', 'feature', 'defined', 'due', 'date', 'target', 'minimal', 'viable', 'product', 'major', 'functionality', 'add', 'underestimated', 'time', 'capacity', 'expected', 'tools', 'systems', 'datasets', 'involved', 'first', 'comes', 'mind', 'using', 'developer', 'could', 'filter', 'real', 'cross', 'tweeting', 'think', 'needed', 'coming', 'developers', 'apis', 'pycharm', 'python', 'terminal', 'nltk', 'tool', 'kits', 'remove', 'stop', 'words', 'appropriately', 'tag', 'data', 'store', 'test', 'queries', 'provision', 'non', 'relational', 'database', 'available', 'companies', 'microsoftmongoamazon', 'outcome', 'immediately', 'passionate', 'feel', 'increase', 'going', 'evaluate', 'discussed', 'class', 'evaluation', 'recognition', 'depends', 'usefulness', 'end', 'google', 'form', 'rate', 'useful', 'particular', 'look', 'answer', 'following', 'questions', 'scale', 'accurate', 'provided', 'relate', 'category', 'production', 'environment', 'satisfied', 'speed', 'personpage', 'recommended', 'reflect', 'interests', 'enabled', 'invasive', 'inappropriate', 'next', 'criteria', 'delivers', 'search', 'approximately', 'seconds', 'aim', 'minimum', 'within', 'optimistically', 'shown', 'second', 'programming', 'language', 'js', 'react', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'number', 'students', 'list', 'main', 'tasks', 'completed', 'estimated', 'cost', 'set', 'api', 'familiarized', 'per', 'teammate', 'github', 'repo', 'base', 'components', 'setting', 'nonrelational', 'db', 'tutorial', 'develop', 'nlp', 'process', 'categorize', 'scrape', 'program', 'ranking', 'gives', 'posts', 'retail', 'sites', 'ads', 'hour', 'optional', 'web', 'app', 'present', 'include', 'frontend', 'excluding', 'dev', 'design', 'doc', 'microforce', 'tylercwillinoisedu', 'rohankillinoisedu', 'cbulnesillinoisedu', 'introduction', 'looking', 'modeling', 'recommending', 'given', 'okapi', 'bm', 'learned', 'ranked', 'categoriestopics', 'sample', 'borrowed', 'november', 'th', 'politics', 'usa', 'elections', 'versus', 'probably', 'thegrammys', 'nominations', 'trending', 'tweetsusers', 'presented', 'single', 'query', 'observing', 'past', 'days', 'week', 'finish', 'setup', 'decided', 'sqlite', 'avoid', 'errors', 'computers', 'simplifying', 'allow', 'us', 'algorithms', 'last', 'two', 'weeks', 'gathering', 'necessary', 'need', 'importing', 'created', 'started', 'planning', 'come', 'entities', 'provides', 'annotations', 'concerns', 'concern', 'good', 'model', 'sure', 'correct', 'close', 'imperative', 'take', 'validate', 'ranks', 'discrepancies', 'exactly', 'highly', 'rank', 'typed', 'displaying', 'commonality', 'display', 'common', 'pool', 'respective', 'say', 'love', 'seafood', 'conducted', 'among', 'topiccategory', 'purpose', 'go', 'ahead', 'observe', 'smallish', 'informative', 'higher', 'back', 'receive', 'eliminate', 'elements', 'helpful', 'b', 'source', 'guidance', 'processing', 'httpstowardsdatasciencecombasictweetpreprocessinginpythonefdd', 'e', 'information', 'tables', 'original_', 'table', 'obtain', 'posted', 'type', 'stored', 'original_tweets', 'processed_tweets', 'order', 'simplify', 'c', 'correlated', 'ways', 'tie', 'ids', 'array', 'correspond', 'location', 'whats', 'included', 'userobject', 'httpsdevelopertwittercomendocstwitterapivdatadictionaryovervie', 'wuserobject', 'user_category', 'kind', 'mostly', 'aggregate', 'counts', 'previous', 'seven', 'conclusion', 'tweet_category', 'map', 'belonging', 'build', 'inverted', 'index', 'every', 'word', 'accordingly', 'grab', 'x', 'userson', 'invalid', 'fit', 'shall', 'fits', 'ii', 'performing', 'done', 'collecting', 'overall', 'tweeted', 'presenting', 'ones', 'frequency', 'id', 'iii', 'depending', 'aggregated', 'correlate', 'ongoing', 'news', 'searched', 'charts', 'statistics', 'terminalui', 'interactive', 'asking', 'full', 'read', 'pdf', 'report', 'uploaded', 'httpsgithubcomrohankktwitterrecommendationsbasedontextblobmaintwitterrecommendationsbasedontextfinalreportpdf', 'media', 'platform', 'allowing', 'connect', 'share', 'thoughts', 'notable', 'shared', 'seen', 'presidency', 'election', 'general', 'however', 'made', 'suggestedsimilar', 'retweet', 'ability', 'suppose', 'write', 'hamburgers', 'fries', 'expect', 'run', 'ranker', 'closest', 'along', 'obtaining', 'installed', 'required', 'packages', 'pip', 'install', 'r', 'requirementstxt', 'account', 'portal', 'havent', 'consumer', 'key', 'secret', 'access', 'token', 'bearer', 'twitter_utilspy', 'methods', 'variables', 'used', 'interact', 'check', 'regenerate', 'times', 'delete', 'files', 'directory', 'repository', 'srctwitter_utilspy', 'extraction', 'toolkits', 'gensim', 'learnt', 'lda', 'unsupervised', 'machine', 'learning', 'uses', 'mixture', 'documents', 'assigned', 'prior', 'probability', 'consists', 'probabilities', 'generating', 'vocabulary', 'retrievalcleaning', 'developed', 'functions', 'perform', 'retrieval', 'cleaning', 'remove_emojitext', 'remove_linkstext', 'remove_userstext', 'clean_tweettweet', 'meant', 'clean', 'better', 'analysis', 'accuracy', 'original', 'remove_emojitextmethod', 'removes', 'emojis', 'found', 'didnt', 'provide', 'meaningful', 'method', 'http', 'https', 'links', 'isnt', 'determining', 'remove_userstextmethod', 'mentions', 'clean_tweettweetmethod', 'lowercase', 'punctuation', 'stopwords', 'characters', 'less', 'tweetsjson', 'file', 'execute', 'topicdeterminantpy', 'classify', 'modelling', 'draw', 'relationship', 'command', 'loading', 'creating', 'author', 'authors', 'screen', 'name', 'tfidf', 'weights', 'score', 'tweet_query', 'heat', 'cranking', 'return', 'begin', 'git', 'cloned', 'unzip', 'tweetstargz', 'tar', 'xzvf', 'choose', 'substitute', 'rankerpy', 'replace', 'simply', 'sources', 'httpsmediumcomosasusentopicextractionfromtweetsusingldaaeeb', 'httpblogechenmeintroductiontolatentdirichletallocation', 'httpsgithubcomenoreesetopicmodellingblobmasterpreprocessorpy', 'httpsgithubcomohdocsimilarityblobmasterexamplesipynb', 'classification', 'purposes', 'accomplishes', 'approved', 'application', 'submitted', 'outlined', 'promptly', 'though', 'still', 'limits', 'notably', 'limit', 'request', 'open', 'library', 'handle', 'requesting', 'v', 'called', 'pythontwitter', 'querying', 'directly', 'arent', 'random', 'active', 'queried', 'stream', 'subset', 'obtained', 'public', 'profile', 'english', 'speaking', 'got', 'getting', 'associated', 'expensive', 'operation', 'enough', 'ended', 'folder', 'works', 'extract', 'response', 'standard', 'mainly', 'later', 'future', 'miami', 'fl', 'upcoming', 'event', 'celebrity', 'geographical', 'marketing', 'increasing', 'connectivity', 'platforms', 'facebook', 'taken', 'early', 'version', 'entity', 'context', 'relations', 'examples', 'barack', 'ibm', 'mountain', 'dew', 'san', 'francisco', 'tv', 'shows', 'episodes', 'podcast', 'holiday', 'politicians', 'video', 'game', 'usertable', 'originaltweets', 'core', 'figure', 'picture', 'reference', 'proof', 'concept', 'relatively', 'small', 'essentially', 'document', 'term', 'matrix', 'rows', 'cleaned', 'columns', 'entries', 'hold', 'count', 'matrixij', 'denote', 'bag', 'send', 'runs', 'passes', 'convergence', 'disk', 'hence', 'reuse', 'applications', 'moreover', 'multicore', 'parallely', 'threads', 'leading', 'performance', 'try', 'assign', 'belong', 'demo', 'ran', 'classifier', 'twitch', 'cool', 'twitchstreamer', 'digital', 'job', 'classifying', 'youtube', 'twitchde', 'germanmediart', 'seo', 'email', 'marketer', 'definitely', 'lot', 'room', 'improvements', 'worked', 'duplicate', 'retweets', 'issues', 'centered', 'bad', 'oo', 'know', 'ium', 'extremely', 'hard', 'broad', 'classified', 'corrupts', 'training', 'special', 'emphasis', 'features', 'hashtags', 'introduced', 'reduce_by_lemma', 'function', 'reduce', 'lemma', 'stop_lemma', 'initialize', 'vector', 'vectorize', 'thing', 'collected', 'vectors', 'examined', 'creator', 'cosine', 'flattened', 'scores', 'score_titles', 'view', 'tweet_data', 'title', 'print', 'printed', 'produce', 'libraries', 'message', 'saying', 'whether', 'prompt', 'resolved', 'upon', 'executing', 'output', 'result', 'five', 'testers', 'edit', 'anything', 'missed', 'mark', 'optimized', 'originally', 'wanted', 'longer', 'without', 'takes', 'explained', 'contributions', 'member', 'performed', 'partial', 'ie', 'removing', 'emoticons', 'punctuations', 'versions', 'gathered', 'claned', 'categorized', 'skeleton', 'querytweet']
https://github.com/rosed2/CourseProject	"1. progress made thus far a. so far, we have been able to preprocess our data so we can determine the aspect weight and aspect ratings. we were also able to determine the seed words in order to create our aspect segmentation and we will be using this when creating the rating regression. 2. remaining tasks a. we have to still implement the rating regression model and determine if we were able to reproduce similar results to the research paper. we also need to finish implementing the sentiment analysis on each aspect which will lead to the creation of the aspect rating. 3. any challenges/issues being faced a. right now we are struggling with determining the term weights and trying to find an algorithm which will accurately assign weights to each term. we are looking into some of the lecture videos for additional help and will reach out to our ta if we are still struggling. option chosen: reproducing a paper 1. team members a. archisha majee, majee2 b. captain: rose dinh, rosed2 2. paper chosen: ""latent aspect rating analysis without aspect keyword supervision."" under subtopic: latent aspect rating analysis 3. programming language: python 4. yes cs 410 courseproject project proposal: we will be recreating the paper ""latent aspect rating analysis without aspect keyword supervision."" code overview: this code tries to implement latent aspect rating analysis (lara) as a reproduction of research paper ""latent aspect rating analysis without aspect keyword supervision"" by hongning wang, yue lu, and chengxiang zhai. it takes a set of reviews and a list of aspects/topics covered within them. it also takes a list of feature words for each topic. then, it finds the reviewer's ratings on these aspects and the weights the reviewer placed on these aspects to form the overall rating. this code can be used to analyze tripadvisor reviews to find ratings on the following topics: value, rooms, location, cleanliness, check in/front desk, service, and business service; and what weights the reviewer placed on each topic to construct the overall rating. implementation: the code first preprocesses the reviews by removing stop words and stemming. then the code assigns what topic each sentence in each review is about by comparing it to a list of user-defined topic feature words. the sentence is assigned the topic whose feature words it has the most of. then, it uses sentiment analysis to determine topic ratings for each topic in each review. next, it uses random variable initialization to determine the weights placed on each topic by the reviewer. we calculated which set of random weights returned the highest probability of getting the reviewer's overall rating from a normal distribution whose mean was the weighted mean of the aspect ratings we found. software usage tutorial presentation: https://illinois.zoom.us/rec/share/ahaip21p63f29jfbe96x2s2lgfm9d6pa4qidlk3iwpmeqnh-pjqwv9zxdbejblhj.thv8w0z9pvqhu4fv?starttime=1607902233000 usage notes: the code requires nltk, scipy, and numpy. install using pip or other preferred python installation method. to use this code, download the repository, cd into the folder, and run the python file ""code.py"". main results: we found the aspect ratings and aspect weights for every review we parsed in the file ""test_result.txt"". to evaluate, we found the mean squared error of the aspect ratings was 2.383. in the paper, the desired result of the mse was 2.130. our result differed from the desired result by a very small amount. this difference could be due to the fact that we might've used a different sentiment analysis library and we weren't sure how to handle large amounts of neutral words. we also weren't sure how to determine the aspect weights, so we instead used a brute force approach where we tested random weights while the paper used gradient optimization but we couldn't get that to work. team contributions: rose dinh: worked on preprocessing, assigning topics to each sentence, and determining ratings of topics in each review archisha majee: worked on determining topic weights and finding mse to evaluate the results"	['progress', 'made', 'thus', 'far', 'able', 'preprocess', 'data', 'determine', 'aspect', 'weight', 'ratings', 'also', 'seed', 'words', 'order', 'create', 'segmentation', 'using', 'creating', 'rating', 'regression', 'remaining', 'tasks', 'still', 'implement', 'model', 'reproduce', 'similar', 'results', 'research', 'paper', 'need', 'finish', 'implementing', 'sentiment', 'analysis', 'lead', 'creation', 'challengesissues', 'faced', 'right', 'struggling', 'determining', 'term', 'weights', 'trying', 'find', 'algorithm', 'accurately', 'assign', 'looking', 'lecture', 'videos', 'additional', 'help', 'reach', 'ta', 'option', 'chosen', 'reproducing', 'team', 'members', 'archisha', 'majee', 'b', 'captain', 'rose', 'dinh', 'rosed', 'latent', 'without', 'keyword', 'supervision', 'subtopic', 'programming', 'language', 'python', 'yes', 'cs', 'courseproject', 'project', 'proposal', 'recreating', 'code', 'overview', 'tries', 'lara', 'reproduction', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'takes', 'set', 'reviews', 'list', 'aspectstopics', 'covered', 'within', 'feature', 'topic', 'finds', 'reviewers', 'aspects', 'reviewer', 'placed', 'form', 'overall', 'used', 'analyze', 'tripadvisor', 'following', 'topics', 'value', 'rooms', 'location', 'cleanliness', 'check', 'infront', 'desk', 'service', 'business', 'construct', 'implementation', 'first', 'preprocesses', 'removing', 'stop', 'stemming', 'assigns', 'sentence', 'review', 'comparing', 'userdefined', 'assigned', 'whose', 'uses', 'next', 'random', 'variable', 'initialization', 'calculated', 'returned', 'highest', 'probability', 'getting', 'normal', 'distribution', 'mean', 'weighted', 'found', 'software', 'usage', 'tutorial', 'presentation', 'httpsillinoiszoomusrecshareahaippfjfbexslgfmdpaqidlkiwpmeqnhpjqwvzxdbejblhjthvwzpvqhufvstarttime', 'notes', 'requires', 'nltk', 'scipy', 'numpy', 'install', 'pip', 'preferred', 'installation', 'method', 'use', 'download', 'repository', 'cd', 'folder', 'run', 'file', 'codepy', 'main', 'every', 'parsed', 'test_resulttxt', 'evaluate', 'squared', 'error', 'desired', 'result', 'mse', 'differed', 'small', 'amount', 'difference', 'could', 'due', 'fact', 'mightve', 'different', 'library', 'werent', 'sure', 'handle', 'large', 'amounts', 'neutral', 'instead', 'brute', 'force', 'approach', 'tested', 'gradient', 'optimization', 'couldnt', 'get', 'work', 'contributions', 'worked', 'preprocessing', 'assigning', 'finding']
https://github.com/rupsis/CourseProject	"ir competition description this is the final course project for cs 410 - text retrieval & mining course at the university of illinois at urbana-champaign. for the project our team decided to participate in the cord-19 open research dataset ir competition. the cord-19 dataset contains over 57000 scholarly articles available for the global research community. our goal is to build a live system that supports search on this massive dataset. project team: nathaniel rupsis (netid: nrupsis2) - team captain hoa le (netid: hle30) video presentation link to our video presentation for this project can be found below: https://mediaspace.illinois.edu/media/t/1_cgdhmw3n prerequisites packages metapy we use metapy to build and evaluate our search engi # ensure your pip is up to date pip install --upgrade pip # install metapy! pip install metapy pytoml # ensure your pip is up to date pip install --upgrade pip # install metapy! pip install metapy pytoml ne. argparse the argparse module makes it easy to write user friendly command line interfaces. # try one of the following installation methods: pip install argparse python setup.py install easy_install argparse putting argparse.py in some directory listed in sys.path should also work # try one of the following installation methods: pip install argparse python setup.py install easy_install argparse putting argparse.py in some directory listed in sys.path should also work argparse should work on python 2.3 and newer. running the program directory: | - /test \- line.toml ... data | - /train \- line.toml ... data a test and train directory need to exist with a line.toml file which specifies the metadata. note: the test and train dataset are too large to be uploaded to this repo. please see the link below to download the dataset. you need to put line.toml file in the downloaded train dataset in order for build_courpse.py to create the index. the test files can be obtained from https://drive.google.com/file/d/1fcw8fmcneow5yydgapkpigm-r2x6ofkm/view?usp=sharing the train files can be obtained from https://drive.google.com/file/d/1e_y-mknvooyoczuzza8jj3exihytfkto/view?usp=sharing // line.toml type = ""line-corpus"" metadata = [{name = ""uid"", type = ""string""}] to build the index, simply run: // remove the index else the evaluator will use a cached version rm -rf idx/ && python3 build_courpse.py train where the first argument is either ""test"" or ""train"" (need to have corresponding test / train files for metapy to work) to run the evaluator: python search_eval.py config_train.toml where the config argument is either config_train.toml or config_test.toml file & code walkthrough search_eval.py this is our main file containing most of the crucial functions used for creating ranking algorithms and searching an index as well as evaluate and writing the results. below is the list of functions in the search_eval.py file: expand_query(query): description: this function is a simple approach to query expansion. it expands on some important keywords such as covid-19, coronavirus, test, mark, spread, etc... it also contains some pre-processing methods such as removing punctuation, converting to lower case, filtering out common words, etc... parameter: query what the function returns: return list of query words containing new keywords. load_queries(): description: this function retrieves query from the xml file. parameter: none what the function returns: return tuple array of queryid and query pairs. load_ranker(cfg_file): description: this function returns the ranker object to evaluate parameter: cfg_file is the path to a configuration file used to load the index. what the function returns: ranker object. saveresults(prediction_results): description: this function writes the results to ""predictions.txt"" file. parameter: prediction_results (a list of 3 elements returned from running ranking algorithms) what the function returns: return list of query words containing new keywords. runqueries(queries): description: this is our main function for creating inverted index and ranking algorithms. parameter: it takes the output which is the query from load_queries function as input. what the function returns: the function saveresults mentioned above is called to store the output. build_courpse.py this function contains code to extract information such as title, abstract, introduction, etc... from metadata.csv using example code. it also writes the data to .dat file and create metadata file for metapy. config.toml we have two separate config file : config_test and config_train. each file contains general settings that deal with paths related to the its corresponding dataset. we specified some details about the corpus and its analyzer. for example: dataset = ""train"" # name of the dataset corpus = ""line.toml"" # type of corpus query-judgements = ""qrels.txt"" # path to query judgement file [[analyzers]] method = ""ngram-word"" # set of co-occurring words ngram = 1 # specified to one word aka unigram filter = ""default-unigram-chain"" stopwords.txt a text file contains list of common english words that do not add much meaning to a sentence. for example: ""the"",""a"",""an"",etc...they can be safely ignored, and this is part of pre-processing to filter out useless information. train & test folders contain the cord-19 dataset and metadata.csv file. the train data also contains query relevance file. predictions.txt this is a text file that has the same format as relevance judgment file which is (query_id doc_uid relevance_score). it contains our final top 1000 documents per query and is used for computing ndcg score on the leaderboard. implementation overview task definitions collecting data unzip and extract data from the provided train.zip collect and store information from metadata.csv such as title, abstract, introduction, etc... building a corpus create train/test.dat file. each line in .dat file represents one document. create metadata.dat file containing the collected information from step 1 part ii. create line.toml configuration file containing corpus input formats. implementing simple query expansion collect query from xml file. query are stored in a tuple array (queryid, query) create query expansion function with some preprocessing methods. create an inverted index set up the config file. this file contains fields that need to be specified and makes references/pathing to several files. write code to create inverted index. searching the index create bm25 ranker. run query to search the index and returns top 1000 documents per query as sorted vector pairs (doc_id, double). store the query-ids, results and the corresponding uid (document_id retrieved from metadata file) and write to predictions.txt file. optimize ndcg score submit predictions.txt file and check the ndcg score on the leaderboard. address potential problems and identify methods to improve ndcg score. potential issues encounter if unicodeencodeerror: 'charmap' codec can't encode characters error appears, running python3 seems to fix that. one solution which we will add to our code is to write (encoding = ""utf-8"") when reading .json or .dat file. we ran into some disk problem when implementing bert-large method for reranking. we decided to exclude it from our final code to avoid this potential issue. key findings & potential improvements even though we beat the baseline and made it to leaderboard, we think that the result could be further enhanced. below is what we identify that might help with improving the result: add more information to the index (actual documents) weight the keywords better since relevancy will definitely be based on the keywords (covid, alcohol, spread, african american, health, etc...) further expanding on query. query expansion has helped enhancing our result greatly. implementing bert large for reranking. we ran into disk problems when trying to implement it. citation https://github.com/meta-toolkit/metapy bhavya, dec (2020) mp 2.4 [source code] https://github.com/cs410fall2020/mp2.4 contact nrupsis@gmail.com hle027@gmail.com team: na coders members: hoa le (netid: hle30), nathaniel rupsis (netid: nrupsis2) project progress report for the project our team decided to participate in the cord-19 open research dataset ir competition. the cord-19 dataset contains over 57000 scholarly articles available for the global research community. our goal is to build a live system that supports search on this massive dataset. progress made thus far we break down the project into smaller tasks and milestones: extracting, preprocessing, indexing, retrieving and ranking. in the extracting step, we collected titles, abstracts, and introductions of papers using the python code sample provided. then, we fed the extracted data to the preprocess function we created. the preprocess function contains basic preprocessing tasks such as removing special characters, text.split(), stemming, etc... for data indexing, we've taken two different approaches, and each individual is working on their own implementation. by doing this, we'll have some options and flexibility when tweaking the overall system. the first approach is to build inverted indices from scratch. it will take 4 inputs (uid, title, abstract and keywords) or a dataframe containing those 4 elements and output a dictionary of inverted indices. these keywords are based on their tf-idf scores. we used the stop word file for previous assignments to obtain a list of words that will not be indexed. as for the query, we decided to go for the query field of the topic. they are easily preprocessed as the other two fields(question and narrative) contain uppercase and more special characters. the second approach is to build a corpus .dat file with a pre-processor, and then utilizing the metapy indexing algorithm. by doing this, it allows us to focus on what to include in the index (title, author, etc), while freeing us from having to worry about the performance of the index. with both index approaches, our team has a firm handle on the data preparation, and the next task is to implement the retrieval model. for the ranking algorithm, we are looking to use okapi bm25 and combine it with other state-of-the-art methods. remaining tasks even though we haven't gotten results from our okapi bm25 ranking algorithm, we are 90% sure that it won't be enough to beat the baseline. thus, the remaining tasks would be to finalize all the steps we mentioned, testing bm 25, fine-tune various parameter settings and then look to combine it with different methods to enhance our result. we are currently looking at some of the live systems that use bm25 such as neural covidex. we are also exploring lda(latent dirichlet allocation) which studies semantic relationships. challenges that we encountered we had trouble getting started because we felt overwhelmed with the massive dataset which contains over 57000 articles. however, once we started to break down the project into smaller tasks, it became much more manageable. the preprocessing proved to be a bit of a tough task since the dataset contains highly technical papers with scientific terms. another big challenge is to build an inverted index from scratch. i think it's extremely worthwhile and we can learn a lot from the process. final challenge to find the advanced ranking methods to pass the baseline. team: na coders members: hoa le (netid: hle30), nathaniel rupsis (netid: nrupsis2) project proposal the na coders will be competing in the ir (information retrieval) competition. our team is prepared to research, test, and implement state of the art search methods and techniques. for this project, we'll be using python, and focusing on implementing and tuning the methods mentioned in the proposal(query expansion, feedback, rank fusion, etc). we will dig deeper into more advanced ranking techniques such as learning to rank, and okapi bm25. we have experienced okapi bm25 in the previous assignments and it's truly a state-of-the-art technique. i think it'll help with the project using different parameters. learning to rank is a ranking technique where it learns to directly rank items by training a model to predict the probability of one item over another. we will be testing 3 different learning to rank algorithms: ranknet, lambdarank and lambdamart. we are prepared to learn more about these techniques to help us reach the baseline and achieve high standing position in the leaderboard. for query expansion, we'll be looking into utilizing wordnet with the natural language toolkit to help test variations of query expansion to aid in the text retrieval model. for ranking fusion, since we are trying different ir models, it's best to have a method that can combine these models together so the overall probability that the document is relevant can be higher. finally, time permitting, we'll test out and incorporate additional retrieval methods listed here, such as compound term processing and contextual searching. team na coders project team: nathaniel rupsis (team captain) hoa le project details: this is the final course project for cs 410 - text retrieval & mining course at the university of illinois at urbana-champaign. for the project our team decided to participate in the cord-19 open research dataset ir competition. the cord-19 dataset contains over 57000 scholarly articles available for the global research community. our goal is to build a live system that supports search on this massive dataset. our team is prepared to research, test, and implement state of the art search methods and techniques. for this project, we'll be using python, and focusing on implementing and tuning the methods mentioned in the proposal(query expansion, feedback, rank fusion, etc). time permitting, we'll test out and incorporate additional retrieval methods listed here, such as compound term processing and contextual searching. the complete project proposal can be found here. video presentation: link to our video presentation for this project can be found here: https://mediaspace.illinois.edu/media/t/1_cgdhmw3n prerequisites packages metapy we use metapy to build and evaluate our search engine. if you have not installed metapy so far, use the following commands to get started. ```bash ensure your pip is up to date pip install --upgrade pip install metapy! pip install metapy pytoml ``` argparse the argparse module makes it easy to write user friendly command line interfaces. argparse should work on python 2.3 and newer. ```bash try one of the following installation methods: pip install argparse python setup.py install easy_install argparse putting argparse.py in some directory listed in sys.path should also work ``` running the program directory: | - /test \- line.toml ... data | - /train \- line.toml ... data a test and train directory need to exist with a line.toml file which specifies the metadata. note: the test and train dataset are too large to be uploaded to this repo. please see the link below to download the dataset. you need to put line.toml file in the downloaded train dataset in order for build_courpse.py to create the index. the test files can be obtained from https://drive.google.com/file/d/1fcw8fmcneow5yydgapkpigm-r2x6ofkm/view?usp=sharing the train files can be obtained from https://drive.google.com/file/d/1e_y-mknvooyoczuzza8jj3exihytfkto/view?usp=sharing ``` // line.toml type = ""line-corpus"" metadata = [{name = ""uid"", type = ""string""}] ``` to build the index, simply run: // remove the index else the evaluator will use a cached version rm -rf idx/ && python3 build_courpse.py train where the first argument is either ""test"" or ""train"" (need to have corresponding test / train files fro metapy to work) to run the evaluator: python search_eval.py config_train.toml where the config argument is either config_train.toml or config_test.toml file & code walkthrough search_eval.py this is our main file containing most of the crucial functions used for creating ranking algorithms and searching an index as well as evaluate and writing the results. below is the list of functions in the search_eval.py file: expand_query(query): description: this function is a simple approach to query expansion. it expands on some important keywords such as covid-19, coronavirus, test, mark, spread, etc... it also contains some pre-processing methods such as removing punctuation, converting to lower case, filtering out common words, etc... parameter: query what the function returns: return list of query words containing new keywords. load_queries(): description: this function retrieves query from the xml file. parameter: none what the function returns: return tuple array of queryid and query pairs. load_ranker(cfg_file): description: this function returns the ranker object to evaluate parameter: cfg_file is the path to a configuration file used to load the index. what the function returns: ranker object. saveresults(prediction_results): description: this function writes the results to ""predictions.txt"" file. parameter: prediction_results (a list of 3 elements returned from running ranking algorithms) what the function returns: return list of query words containing new keywords. runqueries(queries) : description: this is our main function for creating inverted index and ranking algorithms. parameter: it takes the output which is the query from load_queries function as input. what the function returns: the function saveresults mentioned above is called to store the output. build_courpse.py this function contains code to extract information such as title, abstract, introduction, etc... from metadata.csv using example code. it also writes the data to .dat file and create metadata file for metapy. config.toml we have two separate config file : config_test and config_train. each file contains general settings that deal with paths related to the its corresponding dataset. we specified some details about the corpus and its analyzer. for example: dataset = ""train"" # name of the dataset corpus = ""line.toml"" # type of corpus query-judgements = ""qrels.txt"" # path to query judgement file [[analyzers]] method = ""ngram-word"" # set of co-occurring words ngram = 1 # specified to one word aka unigram filter = ""default-unigram-chain"" stopwords.txt a text file contains list of common english words that do not add much meaning to a sentence. for example: ""the"",""a"",""an"",etc...they can be safely ignored, and this is part of pre-processing to filter out useless information. train & test folders contain the cord-19 dataset and metadata.csv file. the train data also contains query relevance file. predictions.txt this is a text file that has the same format as relevance judgment file which is (query_id doc_uid relevance_score). it contains our final top 1000 documents per query and is used for computing ndcg score on the leaderboard. implementation overview task definitions collecting data i. unzip and extract data from the provided train.zip ii. collect and store information from metadata.csv such as title, abstract, introduction, etc... building a corpus i. create train/test.dat file. each line in .dat file represents one document. ii. create metadata.dat file containing the collected information from step 1 part ii. iii. create line.toml configuration file containing corpus input formats. implementing simple query expansion i. collect query from xml file. query are stored in a tuple array (queryid, query) ii. create query expansion function with some preprocessing methods. create an inverted index i. set up the config file. this file contains fields that need to be specified and makes references/pathing to several files. ii. write code to create inverted index. searching the index i. create bm25 ranker. ii. run query to search the index and returns top 1000 documents per query as sorted vector pairs (doc_id, double). iii. store the query-ids, results and the corresponding uid (document_id retrieved from metadata file) and write to predictions.txt file. optimize ndcg score i. submit predictions.txt file and check the ndcg score on the leaderboard. address potential problems and identify methods to improve ndcg score. potential issues encounter if unicodeencodeerror: 'charmap' codec can't encode characters error appears, running python3 seems to fix that. one solution which we will add to our code is to write (encoding = ""utf-8"") when reading .json or .dat file. we ran into some disk problem when implementing bert-large method for reranking. we decided to exclude it from our final code to avoid this potential issue. key findings & potential improvements even though we beat the baseline and made it to leaderboard, we think that the result could be further enhanced. below is what we identify that might help with improving the result: 1. add more information to the index (actual documents) 2. weight the keywords better since relevancy will definitely be based on the keywords (covid, alcohol, spread, african american, health, etc...) 3. further expanding on query. query expansion has helped enhancing our result greatly. 4. implementing bert large for reranking. we ran into disk problems when trying to implement it. citation https://github.com/meta-toolkit/metapy bhavya, dec (2020) mp 2.4 [source code] https://github.com/cs410fall2020/mp2.4 contact nrupsis@gmail.com hle027@gmail.com"	['ir', 'competition', 'description', 'final', 'course', 'project', 'cs', 'text', 'retrieval', 'mining', 'university', 'illinois', 'urbanachampaign', 'team', 'decided', 'participate', 'cord', 'open', 'research', 'dataset', 'contains', 'scholarly', 'articles', 'available', 'global', 'community', 'goal', 'build', 'live', 'system', 'supports', 'search', 'massive', 'nathaniel', 'rupsis', 'netid', 'nrupsis', 'captain', 'hoa', 'le', 'hle', 'video', 'presentation', 'link', 'found', 'httpsmediaspaceillinoisedumediat_cgdhmwn', 'prerequisites', 'packages', 'metapy', 'use', 'evaluate', 'engi', 'ensure', 'pip', 'date', 'install', 'upgrade', 'pytoml', 'ne', 'argparse', 'module', 'makes', 'easy', 'write', 'user', 'friendly', 'command', 'line', 'interfaces', 'try', 'one', 'following', 'installation', 'methods', 'python', 'setuppy', 'easy_install', 'putting', 'argparsepy', 'directory', 'listed', 'syspath', 'also', 'work', 'newer', 'running', 'program', 'test', 'linetoml', 'data', 'train', 'need', 'exist', 'file', 'specifies', 'metadata', 'note', 'large', 'uploaded', 'repo', 'please', 'see', 'download', 'put', 'downloaded', 'order', 'build_courpsepy', 'create', 'index', 'files', 'obtained', 'httpsdrivegooglecomfiledfcwfmcneowyydgapkpigmrxofkmviewuspsharing', 'httpsdrivegooglecomfilede_ymknvooyoczuzzajjexihytfktoviewuspsharing', 'type', 'linecorpus', 'name', 'uid', 'string', 'simply', 'run', 'remove', 'else', 'evaluator', 'cached', 'version', 'rm', 'rf', 'idx', 'first', 'argument', 'either', 'corresponding', 'search_evalpy', 'config_traintoml', 'config', 'config_testtoml', 'code', 'walkthrough', 'main', 'containing', 'crucial', 'functions', 'used', 'creating', 'ranking', 'algorithms', 'searching', 'well', 'writing', 'results', 'list', 'expand_queryquery', 'function', 'simple', 'approach', 'query', 'expansion', 'expands', 'important', 'keywords', 'covid', 'coronavirus', 'mark', 'spread', 'etc', 'preprocessing', 'removing', 'punctuation', 'converting', 'lower', 'case', 'filtering', 'common', 'words', 'parameter', 'returns', 'return', 'new', 'load_queries', 'retrieves', 'xml', 'none', 'tuple', 'array', 'queryid', 'pairs', 'load_rankercfg_file', 'ranker', 'object', 'cfg_file', 'path', 'configuration', 'load', 'saveresultsprediction_results', 'writes', 'predictionstxt', 'prediction_results', 'elements', 'returned', 'runqueriesqueries', 'inverted', 'takes', 'output', 'input', 'saveresults', 'mentioned', 'called', 'store', 'extract', 'information', 'title', 'abstract', 'introduction', 'metadatacsv', 'using', 'example', 'dat', 'configtoml', 'two', 'separate', 'config_test', 'config_train', 'general', 'settings', 'deal', 'paths', 'related', 'specified', 'details', 'corpus', 'analyzer', 'queryjudgements', 'qrelstxt', 'judgement', 'analyzers', 'method', 'ngramword', 'set', 'cooccurring', 'ngram', 'word', 'aka', 'unigram', 'filter', 'defaultunigramchain', 'stopwordstxt', 'english', 'add', 'much', 'meaning', 'sentence', 'theaanetcthey', 'safely', 'ignored', 'part', 'useless', 'folders', 'contain', 'relevance', 'format', 'judgment', 'query_id', 'doc_uid', 'relevance_score', 'top', 'documents', 'per', 'computing', 'ndcg', 'score', 'leaderboard', 'implementation', 'overview', 'task', 'definitions', 'collecting', 'unzip', 'provided', 'trainzip', 'collect', 'building', 'traintestdat', 'represents', 'document', 'metadatadat', 'collected', 'step', 'ii', 'formats', 'implementing', 'stored', 'fields', 'referencespathing', 'several', 'bm', 'sorted', 'vector', 'doc_id', 'double', 'queryids', 'document_id', 'retrieved', 'optimize', 'submit', 'check', 'address', 'potential', 'problems', 'identify', 'improve', 'issues', 'encounter', 'unicodeencodeerror', 'charmap', 'codec', 'cant', 'encode', 'characters', 'error', 'appears', 'seems', 'fix', 'solution', 'encoding', 'utf', 'reading', 'json', 'ran', 'disk', 'problem', 'bertlarge', 'reranking', 'exclude', 'avoid', 'issue', 'key', 'findings', 'improvements', 'even', 'though', 'beat', 'baseline', 'made', 'think', 'result', 'could', 'enhanced', 'might', 'help', 'improving', 'actual', 'weight', 'better', 'since', 'relevancy', 'definitely', 'based', 'alcohol', 'african', 'american', 'health', 'expanding', 'helped', 'enhancing', 'greatly', 'bert', 'trying', 'implement', 'citation', 'httpsgithubcommetatoolkitmetapy', 'bhavya', 'dec', 'mp', 'source', 'httpsgithubcomcsfallmp', 'contact', 'nrupsisgmailcom', 'hlegmailcom', 'na', 'coders', 'members', 'progress', 'report', 'thus', 'far', 'break', 'smaller', 'tasks', 'milestones', 'extracting', 'indexing', 'retrieving', 'titles', 'abstracts', 'introductions', 'papers', 'sample', 'fed', 'extracted', 'preprocess', 'created', 'basic', 'special', 'textsplit', 'stemming', 'weve', 'taken', 'different', 'approaches', 'individual', 'working', 'options', 'flexibility', 'tweaking', 'overall', 'indices', 'scratch', 'take', 'inputs', 'dataframe', 'dictionary', 'tfidf', 'scores', 'stop', 'previous', 'assignments', 'obtain', 'indexed', 'go', 'field', 'topic', 'easily', 'preprocessed', 'fieldsquestion', 'narrative', 'uppercase', 'second', 'preprocessor', 'utilizing', 'algorithm', 'allows', 'us', 'focus', 'include', 'author', 'freeing', 'worry', 'performance', 'firm', 'handle', 'preparation', 'next', 'model', 'looking', 'okapi', 'combine', 'stateoftheart', 'remaining', 'havent', 'gotten', 'sure', 'wont', 'enough', 'would', 'finalize', 'steps', 'testing', 'finetune', 'various', 'look', 'enhance', 'currently', 'systems', 'neural', 'covidex', 'exploring', 'ldalatent', 'dirichlet', 'allocation', 'studies', 'semantic', 'relationships', 'challenges', 'encountered', 'trouble', 'getting', 'started', 'felt', 'overwhelmed', 'however', 'became', 'manageable', 'proved', 'bit', 'tough', 'highly', 'technical', 'scientific', 'terms', 'another', 'big', 'challenge', 'extremely', 'worthwhile', 'learn', 'lot', 'process', 'find', 'advanced', 'pass', 'proposal', 'competing', 'prepared', 'state', 'art', 'techniques', 'focusing', 'tuning', 'proposalquery', 'feedback', 'rank', 'fusion', 'dig', 'deeper', 'learning', 'experienced', 'truly', 'technique', 'itll', 'parameters', 'learns', 'directly', 'items', 'training', 'predict', 'probability', 'item', 'ranknet', 'lambdarank', 'lambdamart', 'reach', 'achieve', 'high', 'standing', 'position', 'wordnet', 'natural', 'language', 'toolkit', 'variations', 'aid', 'models', 'best', 'together', 'relevant', 'higher', 'finally', 'time', 'permitting', 'incorporate', 'additional', 'compound', 'term', 'processing', 'contextual', 'complete', 'engine', 'installed', 'commands', 'get', 'bash', 'fro', 'iii']
https://github.com/sairanga123/CourseProject	"improving expertsearch progress report plan 2 automate scraping process 2 perform topic mining 2 additional improvement 2 improve ui 2 progress 2 automated scraping process 3 deliverables: 3 outputs: 3 challenges: 3 automated scraper 4 directory url classification 5 1. dataset preparation 5 2. scraper 5 3. text classification 6 faculty url classification 6 1. dataset preparation 6 2. scraper 6 3. text classification 7 topic mining 7 deliverables: 7 outputs: 7 challenges: 7 topic miner: 7 1. corpus preparation 7 2. model creation 8 3. term extraction 8 improved email extraction 9 deliverables: 9 regex improvement: 9 ui improvements 9 deliverables: 9 challenges: 9 info button: 9 top 5 topics display: 9 email automation: 9 plan automate scraping process to identify faculty directory pages to identify faculty home pages perform topic mining to identify top-k topics associated with each faculty additional improvement to improve email extraction for each faculty improve ui to display top-5 topics associated with each retrieved faculty to allow search based on any of the topics from the displayed topic cloud to prepopulate email content when clicked on a faculty's email address progress item owner status automated scraping mriganka sarma completed: automated scraper data handler scraper text classifier remaining: optimizing parameters for classification integration testing challenges: none topic mining zacharia rupp completed: topic model function to return top-10 words associated with query topic remaining: further exploration of best topics clean up code integration testing challenges: inferring topics takes considerable processing time improved email extraction improved ui sai ranganathan completed: to display top 5 topics associated with each faculty member to prepopulate email field when clicked on email address to improve email extraction part 1. challenges: none more detailed description is provided in the below sections. automated scraping process deliverables: automated scraper (auto_scraper.py) data handler (data_handler.py) scraper (scraper.py) text classifier (text_classifier.py) outputs: corpus of classified faculty directory urls corpus of classified faculty bio urls documents of bios for each faculty generated by scraping the classified faculty bio urls challenges: none automated scraper automated scraper module (auto_scraper.py) automates the process in the following way: uses the data handler to prepare a train and test set of faculty directory urls uses the scraper to scrape these urls to prepare the train and test corpus uses the text classifier to build and train a doc2vec model on the documents in the train corpus of directory contents uses the text classifier to predict the category of the test urls as ""directory"" or ""non-directory"" saves the classified directory urls to a file uses the data handler to prepare a train and test set of faculty bio urls uses the scraper to scrape these urls to prepare the train and test corpus uses the text classifier to build and train a doc2vec model on the documents in the train corpus of faculty bios uses the text classifier to predict the category of the test urls as ""faculty"" or ""non-faculty"" saves the classified bio urls to a file uses the scraper to scrape the faculty bios from the classified bio urls generates one document per faculty bio and saves under expertsearch/data/compiled_bios the automated scraper can be invoked as follows: $ cd expertsearch/autoscraper $ python ./auto_scraper.py -d -t -d option specifies to generate/regenerate the train and test dataset. the dataset will be generated even if -d is not provided if the dataset doesn't exist yet. when -d is not provided, the existing dataset will be used. -t option specifies to retrain the doc2vec model on the train dataset. the model will be trained even if -t is not provided if the model wasn't trained and saved yet. when -t is not provided, the saved model will be loaded. the following sections describe the text classification tasks for faculty directory urls and faculty bio urls. directory url classification dataset preparation first we need to prepare the dataset for training and testing the model. the following approach was used to prepare the dataset. downloaded the known faculty directory pages from the sign-up sheet for mp 2.1. these will serve as the ""positive"" examples. collected top urls from alexa. these will serve as the ""negative"" examples. collected the global top-50 pages of alexa. collected the top-50 pages for different countries. manually verified that the pages are in english. about 900 urls were obtained from the sign-up sheet data, which was partitioned into 500 for training and 400 for test data. urls for total 14 countries + top-50 global urls from alexa were collected. this gave 750 ""negative"" urls. wrote a python module (data_handler.py) for data handling that does the following: converts the mp 2.1 sign-up data from csv to a file containing only the directory urls. performs any cleanup as necessary and labels them as ""directory"". combines the top-50 alexa urls for 10 countries and labels them as ""alexa_dir"". uses these 500 pages for training. combines the top-50 alexa urls for 5 countries and labels them as ""test_dir"". uses these 250 pages for testing. mix the 500 faculty directory training urls with the 500 alexa training urls. remove duplicates if any. this gives 734 urls as the final training urls. mix the 400 faculty directory test urls with the 250 alexa training urls. remove duplicates if any. this gives 548 urls as the final test urls. scraper wrote a python module (scraper.py) for scraping the urls collected from the above step. the scraper does the following: gets the contents of each url as text. performs clean-up of non-ascii characters from the content. performs other clean-ups such as substituting newlines, tabs, multiple whitespaces into single whitespace. substitutes contents such as ""403 forbidden"", ""404 not found"", etc. with ""error: content not found"". writes contents of each webpage as a single line of space separated words in a file meant to be the final corpus. this is done to prepare both the training corpus (""train_dataset.cor"") and the test corpus (""test_dataset.cor""). text classification wrote a python module (text_classifier.py) for performing the text classification task of identifying valid faculty directory pages from the test corpus. the classification module does the following: uses gensim to build a doc2vec model for feature vector representation of each document. uses the train_dataset.cor to build the vocabulary and train the model. saves the model so that it can be reloaded while running next time on the same dataset. uses logisticregression as the classifier from scikit-learn module. uses logisticregression to predict the categories of the test urls given the test dataset. faculty url classification dataset preparation the following approach was used to prepare the dataset: use the top 1000 urls from the currently existing faculty bio urls in the expertsearch project as the train urls. use 250 urls from the alexa test urls set as the ""negative"" train urls. use the data handling module to do the following: tag the faculty bio urls as ""faculty"" and save to a file. tag the alexa urls as ""alexa_faculty"" and save to the same file. this will be the final file with all the train urls. scraper since the expertsearch project already contains the faculty bios as documents, the top 1000 faculty bios are copied to the train corpus file (""train_bio_dataset.cor""). then the scraper does the following: scrapes the remaining train urls from the train urls file and appends to the train corpus (""train_bio_dataset.cor""). uses the classified faculty directory urls from the classified directory urls file above and gets all embedded potential faculty bio urls as the test urls. scrapes the test urls from above and adds to a test corpus (""test_bio_dataset.cor""). text classification the classification module does the following: uses gensim to build a doc2vec model for feature vector representation of each document. uses the train_bio_dataset.cor to build the vocabulary and train the model. saves the model so that it can be reloaded while running next time on the same dataset. uses logisticregression as the classifier from scikit-learn module. uses logisticregression to predict the categories of the test urls given the test dataset. topic mining deliverables: python script to create topic model and retrieve top-10 terms associated with query topic (miner.py) outputs: trained topic model ('lda_mallet_model') bag-of-words representation of corpus to be used with miner.py ('corpus_dictionary') challenges: inferring topics takes considerable processing time. topic miner: the topic miner uses gensim and mallet to create a model from the entire corpus. the process is as follows: corpus preparation read in compiled bios as strings filter the string representation of each bio to: remove stop words extract html tags and elements strip non-alphanumeric characters strip numbers strip words that exist in lists of terms extracted from the bios strip words that exist in a manually defined list of words that were creating incoherent topic clusters (unwanted_words.txt) remove words shorter than four characters split all words into a list of tokens create list of documents which is comprised of lists of tokens for each document as described above append bigrams and trigrams to each token list for each document create a gensim dictionary from the above documents create a bag-of-word representation of our documents: this will be our corpus. model creation model creation required a good deal of manual work to ensure that the term clusters were understandable. the process consisted of a lot of trial and error, using the steps below: create a general model with gensim.models.ldamodel.ldamodel class with 10 models visually inspect term clusters to ensure they were meaningful visualize clusters with pyldavis to assess clusters if the above criteria were not satisfactory: tweak corpus construction after the above criteria was deemed satisfactory: using gensim.models.wrappers.ldamallet with the mallet library, i: varied number of topics to create new model assessed coherence of each model with varying number of topics manually inspected output of models with high coherence, looking for term clusters that made intuitive sense and that appeared distinct given knowledge of the separate domains chose the best model according to above criteria and saved it and the created dictionary for query inference term extraction with a model and a dictionary, i wrote a method that can infer the topic of a given query and fetch the top-10 terms associated with that topic, a method that can infer the topic of a single document and fetch the top-10 terms associated with that document's topic, and a method that can infer the topics of multiple documents and fetch the top-10 terms associated with each document's topic. these terms will eventually be pushed to the user to help them potentially refine their query. improved email extraction deliverables: email-extraction.py regex improvement: there are certain edge cases that we had noticed in some of the email web pages where the format was different than the traditional email formatting added more regex matches in order to match with these edge cases such as ex. rohini[@]buffalo[dot]edu ui improvements deliverables: server (server.py) ui front (index.js) challenges: none info button: information button is created at the top of each of the retrieved faculty. when the button is clicked there a table pops up that appears below the selected retrieved faculty the table will contain additional information regarding the research topics that the faculty does when one of the info buttons associated with a faculty is clicked the other one will close, and the new one will open. top 5 topics display: display the top 5 topics from the preview for each of the faculty. display these topics in a table format when the information button is clicked underneath each topic is a 'learn more' button which when clicked leads you to a page talking more about the topic in detail from the web. email automation: email comes pre-populated with a set subject and body. the body talks about one of the research topics that were extracted from the top 5 topics and how the user would like to connect with the faculty regarding research in this topic. 1 1 improving expertsearch progress report plan ........................................................................................................................................................................................ 2 automate scraping process ....................................................................................................................................... 2 perform topic mining ................................................................................................................................................... 2 additional improvement .............................................................................................................................................. 2 improve ui ....................................................................................................................................................................... 2 progress ............................................................................................................................................................................... 2 automated scraping process .................................................................................................................................... 3 deliverables: ............................................................................................................................................................. 3 outputs: ..................................................................................................................................................................... 3 challenges: ................................................................................................................................................................ 3 automated scraper ................................................................................................................................................. 4 directory url classification ................................................................................................................................. 5 1. dataset preparation .................................................................................................................................. 5 2. scraper ........................................................................................................................................................ 5 3. text classification ..................................................................................................................................... 6 faculty url classification ..................................................................................................................................... 6 1. dataset preparation .................................................................................................................................. 6 2. scraper ........................................................................................................................................................ 6 3. text classification ..................................................................................................................................... 7 topic mining ................................................................................................................................................................... 7 deliverables: ............................................................................................................................................................. 7 outputs: ..................................................................................................................................................................... 7 challenges: ................................................................................................................................................................ 7 topic miner: .............................................................................................................................................................. 7 1. corpus preparation .................................................................................................................................. 7 2. model creation ........................................................................................................................................... 8 3. term extraction ......................................................................................................................................... 8 improved email extraction ......................................................................................................................................... 9 deliverables: ............................................................................................................................................................. 9 regex improvement: .......................................................................................................................................... 9 ui improvements ........................................................................................................................................................... 9 deliverables: ............................................................................................................................................................. 9 challenges: ................................................................................................................................................................ 9 info button: ........................................................................................................................................................... 9 top 5 topics display: ........................................................................................................................................ 9 email automation: .............................................................................................................................................. 9 2 plan automate scraping process - to identify faculty directory pages - to identify faculty home pages perform topic mining - to identify top-k topics associated with each faculty additional improvement - to improve email extraction for each faculty improve ui - to display top-5 topics associated with each retrieved faculty - to allow search based on any of the topics from the displayed topic cloud - to prepopulate email content when clicked on a faculty's email address progress item owner status automated scraping mriganka sarma completed: - automated scraper - data handler - scraper - text classifier remaining: - optimizing parameters for classification - integration testing challenges: - none topic mining zacharia rupp completed: - topic model - function to return top-10 words associated with query topic remaining: - further exploration of best topics - clean up code 3 - integration testing challenges: - inferring topics takes considerable processing time improved email extraction improved ui sai ranganathan completed: - to display top 5 topics associated with each faculty member - to prepopulate email field when clicked on email address - to improve email extraction part 1. challenges: - none more detailed description is provided in the below sections. automated scraping process deliverables: - automated scraper (auto_scraper.py) - data handler (data_handler.py) - scraper (scraper.py) - text classifier (text_classifier.py) outputs: - corpus of classified faculty directory urls - corpus of classified faculty bio urls - documents of bios for each faculty generated by scraping the classified faculty bio urls challenges: - none 4 automated scraper automated scraper module (auto_scraper.py) automates the process in the following way: - uses the data handler to prepare a train and test set of faculty directory urls - uses the scraper to scrape these urls to prepare the train and test corpus - uses the text classifier to build and train a doc2vec model on the documents in the train corpus of directory contents - uses the text classifier to predict the category of the test urls as ""directory"" or ""non-directory"" - saves the classified directory urls to a file - uses the data handler to prepare a train and test set of faculty bio urls - uses the scraper to scrape these urls to prepare the train and test corpus - uses the text classifier to build and train a doc2vec model on the documents in the train corpus of faculty bios - uses the text classifier to predict the category of the test urls as ""faculty"" or ""non-faculty"" - saves the classified bio urls to a file - uses the scraper to scrape the faculty bios from the classified bio urls - generates one document per faculty bio and saves under expertsearch/data/compiled_bios the automated scraper can be invoked as follows: $ cd expertsearch/autoscraper $ python ./auto_scraper.py -d -t -d option specifies to generate/regenerate the train and test dataset. the dataset will be generated even if -d is not provided if the dataset doesn't exist yet. when -d is not provided, the existing dataset will be used. -t option specifies to retrain the doc2vec model on the train dataset. the model will be trained even if -t is not provided if the model wasn't trained and saved yet. when -t is not provided, the saved model will be loaded. the following sections describe the text classification tasks for faculty directory urls and faculty bio urls. 5 directory url classification 1. dataset preparation first we need to prepare the dataset for training and testing the model. the following approach was used to prepare the dataset. o downloaded the known faculty directory pages from the sign-up sheet for mp 2.1. these will serve as the ""positive"" examples. o collected top urls from alexa. these will serve as the ""negative"" examples. ss collected the global top-50 pages of alexa. ss collected the top-50 pages for different countries. manually verified that the pages are in english. o about 900 urls were obtained from the sign-up sheet data, which was partitioned into 500 for training and 400 for test data. o urls for total 14 countries + top-50 global urls from alexa were collected. this gave 750 ""negative"" urls. o wrote a python module (data_handler.py) for data handling that does the following: ss converts the mp 2.1 sign-up data from csv to a file containing only the directory urls. performs any cleanup as necessary and labels them as ""directory"". ss combines the top-50 alexa urls for 10 countries and labels them as ""alexa_dir"". uses these 500 pages for training. ss combines the top-50 alexa urls for 5 countries and labels them as ""test_dir"". uses these 250 pages for testing. ss mix the 500 faculty directory training urls with the 500 alexa training urls. remove duplicates if any. this gives 734 urls as the final training urls. ss mix the 400 faculty directory test urls with the 250 alexa training urls. remove duplicates if any. this gives 548 urls as the final test urls. 2. scraper wrote a python module (scraper.py) for scraping the urls collected from the above step. the scraper does the following: o gets the contents of each url as text. o performs clean-up of non-ascii characters from the content. o performs other clean-ups such as substituting newlines, tabs, multiple whitespaces into single whitespace. o substitutes contents such as ""403 forbidden"", ""404 not found"", etc. with ""error: content not found"". 6 o writes contents of each webpage as a single line of space separated words in a file meant to be the final corpus. ss this is done to prepare both the training corpus (""train_dataset.cor"") and the test corpus (""test_dataset.cor""). 3. text classification wrote a python module (text_classifier.py) for performing the text classification task of identifying valid faculty directory pages from the test corpus. the classification module does the following: o uses gensim to build a doc2vec model for feature vector representation of each document. o uses the train_dataset.cor to build the vocabulary and train the model. o saves the model so that it can be reloaded while running next time on the same dataset. o uses logisticregression as the classifier from scikit-learn module. o uses logisticregression to predict the categories of the test urls given the test dataset. faculty url classification 1. dataset preparation the following approach was used to prepare the dataset: o use the top 1000 urls from the currently existing faculty bio urls in the expertsearch project as the train urls. o use 250 urls from the alexa test urls set as the ""negative"" train urls. o use the data handling module to do the following: ss tag the faculty bio urls as ""faculty"" and save to a file. ss tag the alexa urls as ""alexa_faculty"" and save to the same file. ss this will be the final file with all the train urls. 2. scraper since the expertsearch project already contains the faculty bios as documents, the top 1000 faculty bios are copied to the train corpus file (""train_bio_dataset.cor""). then the scraper does the following: o scrapes the remaining train urls from the train urls file and appends to the train corpus (""train_bio_dataset.cor""). o uses the classified faculty directory urls from the classified directory urls file above and gets all embedded potential faculty bio urls as the test urls. 7 o scrapes the test urls from above and adds to a test corpus (""test_bio_dataset.cor""). 3. text classification the classification module does the following: o uses gensim to build a doc2vec model for feature vector representation of each document. o uses the train_bio_dataset.cor to build the vocabulary and train the model. o saves the model so that it can be reloaded while running next time on the same dataset. o uses logisticregression as the classifier from scikit-learn module. o uses logisticregression to predict the categories of the test urls given the test dataset. topic mining deliverables: - python script to create topic model and retrieve top-10 terms associated with query topic (miner.py) outputs: - trained topic model ('lda_mallet_model') - bag-of-words representation of corpus to be used with miner.py ('corpus_dictionary') challenges: - inferring topics takes considerable processing time. topic miner: the topic miner uses gensim and mallet to create a model from the entire corpus. the process is as follows: 1. corpus preparation o read in compiled bios as strings o filter the string representation of each bio to: - remove stop words - extract html tags and elements - strip non-alphanumeric characters 8 - strip numbers - strip words that exist in lists of terms extracted from the bios - strip words that exist in a manually defined list of words that were creating incoherent topic clusters (unwanted_words.txt) - remove words shorter than four characters - split all words into a list of tokens o create list of documents which is comprised of lists of tokens for each document as described above o append bigrams and trigrams to each token list for each document o create a gensim dictionary from the above documents o create a bag-of-word representation of our documents: this will be our corpus. 2. model creation model creation required a good deal of manual work to ensure that the term clusters were understandable. the process consisted of a lot of trial and error, using the steps below: o create a general model with gensim.models.ldamodel.ldamodel class with 10 models o visually inspect term clusters to ensure they were meaningful o visualize clusters with pyldavis to assess clusters o if the above criteria were not satisfactory: a. tweak corpus construction o after the above criteria was deemed satisfactory: a. using gensim.models.wrappers.ldamallet with the mallet library, i: i. varied number of topics to create new model ii. assessed coherence of each model with varying number of topics iii. manually inspected output of models with high coherence, looking for term clusters that made intuitive sense and that appeared distinct given knowledge of the separate domains iv. chose the best model according to above criteria and saved it and the created dictionary for query inference 3. term extraction with a model and a dictionary, i wrote a method that can infer the topic of a given query and fetch the top-10 terms associated with that topic, a method that can infer the topic of a single document and fetch the top-10 terms associated with that document's topic, and a method that can infer the topics of multiple documents and fetch the top-10 terms associated with each document's topic. these terms will eventually be pushed to the user to help them potentially refine their query. 9 improved email extraction deliverables: - email-extraction.py regex improvement: - there are certain edge cases that we had noticed in some of the email web pages where the format was different than the traditional email formatting - added more regex matches in order to match with these edge cases such as ex. rohini[@]buffalo[dot]edu ui improvements deliverables: - server (server.py) - ui front (index.js) challenges: - none info button: - information button is created at the top of each of the retrieved faculty. - when the button is clicked there a table pops up that appears below the selected retrieved faculty - the table will contain additional information regarding the research topics that the faculty does - when one of the info buttons associated with a faculty is clicked the other one will close, and the new one will open. top 5 topics display: - display the top 5 topics from the preview for each of the faculty. - display these topics in a table format when the information button is clicked - underneath each topic is a 'learn more' button which when clicked leads you to a page talking more about the topic in detail from the web. email automation: - email comes pre-populated with a set subject and body. - the body talks about one of the research topics that were extracted from the top 5 topics and how the user would like to connect with the faculty regarding research in this topic. project report improved expertsearch system (team zms) zacharia rupp (zrupp2@illinois.edu) mriganka sarma (ms76@illinois.edu) sai ranganathan (sr50@illinois.edu) introduction 4 1. functional overview 4 2. implementation details 4 2.1. automated scraping process 4 2.1.1. inputs: 5 2.1.2. outputs: 5 2.1.3. deliverables: 5 2.1.4. component design / code workflow: 5 automated scraper (auto_scraper.py) 5 directory url classification 6 data handler (data_handler.py) 7 scraper (scraper.py) 8 text classifier (text_classifier.py) 9 faculty url classification 9 data handler (data_handler.py) 9 scraper (scraper.py) 11 text classifier (text_classifier.py) 11 2.2. topic mining 12 2.2.1. inputs: 12 2.2.2. outputs: 12 2.2.3. deliverables: 12 2.2.4. component design / code workflow: 12 topic miner (miner.py) 12 corpus preparation 12 model creation 13 term extraction 14 2.3. improved email extraction 16 2.3.1. inputs: 16 2.3.2. outputs: 16 2.3.3. deliverables: 16 2.3.4. component design / code workflow: 16 regex improvement: 16 2.4. ui improvements 16 2.4.1. inputs: 16 2.4.2. outputs: 16 2.4.3. deliverables: 16 2.4.4. component design / code workflow: 17 info button: 17 top 5 topics display: 17 email automation: 17 3. usage details 17 3.1. setup guide (mac) 17 3.1.1. repo setup 17 3.1.2. project environment setup 18 3.2. setup guide (windows) 19 3.3. usage guide 19 3.3.1. running the automated scraper 19 3.3.2. running the topic miner 20 3.3.3. running the backend server 20 3.3.4. running faculty search from the ui 21 3.4. example use cases: 21 3.4.1. use case 1 - basic use to search faculties 21 3.4.2. use case 2 - find research interests of the faculty 21 3.4.3. use case 3 - find faculties working on similar topics as the faculty from the initial search results 21 3.4.4. use case 4 - connecting to faculty 21 4. contributions 22 introduction the expertsearch system is a system to search faculties who are experts in certain research areas or topics from university websites crawled from the web. the goal of our project is to improve this expertsearch system in a few ways, including automating the scraping process, adding topic mining for finding faculty research topics, and improving the ui to give improved visualizations and query refinement options. functional overview the improved expertsearch system enables the following functionalities: automatic scraping of websites to identify faculty directory webpages and non-directory webpages automatic scraping of the classified faculty directory webpages to further identify faculty bio webpages and non-bio webpages automatic scraping of faculty bio webpages to generate one bio document per faculty and adding to the compiled bios topic mining from the compiled bios to extract research topics of the faculties display top-5 research topics associated with each retrieved faculty improved email extraction for each faculty refine search query using any of the topics from the displayed topic cloud prepopulate email content when clicked on a faculty's email address the automated scraper improves the faculty bio generation process from a vast collection of websites. the topic miner adds more structure to the unstructured faculty website data retrieved from a query. the enhanced ui enables succinct visualization of the structured faculty results and provides shortcuts for additional search filters and faculty connection. together, these new features improve the utility of the expertsearch system to the user. implementation details automated scraping process the automated scraper takes a set of known university websites and top 500 alexa websites as input, performs a series of operations to classify the directory urls and then to classify the faculty homepages. the automated scraper then scrapes the classified faculty homepages to generate faculty bio documents and adds the bios to the collection. inputs: university websites top-500 alexa websites outputs: corpus of classified faculty directory urls (classified_dir_urls.cor) corpus of classified faculty bio urls (classified_faculty_urls.cor) documents of bios for each faculty generated by scraping the classified faculty bio urls (e.g. 6530.txt) deliverables: automated scraper (auto_scraper.py) data handler (data_handler.py) scraper (scraper.py) text classifier (text_classifier.py) component design / code workflow: automated scraper (auto_scraper.py) the automated scraper module automates the whole flow of generating the faculty bios from the input mixture of ""positive"" and ""negative"" urls in the following sequence of steps: uses the data handler (data_handler.py) to prepare a train and test set of faculty directory urls uses the scraper (scraper.py) to scrape these urls to prepare the train and test corpus uses the text classifier (text_classifier.py) to build and train a doc2vec model on the documents in the train corpus of directory contents uses the text classifier to predict the category of the test urls as ""directory"" or ""non-directory"" saves the classified directory urls to a file (classified_dir_urls.cor) uses the data handler to prepare a train and test set of faculty bio urls uses the scraper to scrape these urls to prepare the train and test corpus uses the text classifier to build and train a doc2vec model on the documents in the train corpus of faculty bios uses the text classifier to predict the category of the test urls as ""faculty"" or ""non-faculty"" saves the classified bio urls to a file (classified_faculty_urls.cor) uses the scraper to scrape the faculty bios from the classified bio urls generates one document per faculty bio (e.g. 6530.txt) and saves under expertsearch/data/compiled_bios the auto_scraper.py module is the entry point for the complete automatic scraping and bio generation task. the following figure (fig. 1) shows the complete automation flow starting with the input websites till the bio generation completion. fig. 1: automation control flow / module interactions directory url classification first, let's explain the directory url classification task with the help of the modules. data handler (data_handler.py) the data handler module first takes the university websites and alexa websites as input, mixes them and partitions them into test and train urls. then uses the scraper module to extract the url contents into test and train corpus as shown in the figure below (fig. 2). fig. 2: dataset preparation for directory url classification here's a detailed explanation of the approach used by the data handler module to prepare the urls for the scraper. downloaded the known faculty directory urls from the sign-up sheet for mp 2.1. these will serve as the ""positive"" examples. about 900 urls were obtained from the sign-up sheet data, which was partitioned into 500 for training and 400 for test data. collected top urls from alexa. these will serve as the ""negative"" examples. collected the global top-50 pages of alexa. collected the top-50 pages for 14 different countries. manually verified that the pages are in english. this gave 750 ""negative"" urls. when the autoscraper is launched, it invokes the datahandler which mixes and partitions the above urls into train and test urls as follows: training urls converts the mp 2.1 sign-up sheet from csv to a file containing only the directory urls. performs any cleanup as necessary and labels them as ""directory"". combines the top-50 alexa urls for 10 countries and labels them as ""alexa_dir"". uses these 500 pages for training. mixes the 500 faculty directory training urls with the 500 alexa training urls. removes duplicates if any. this gives 734 urls as the final training urls. the training urls are saved in the file train_urls.cor. test urls combines the top-50 alexa urls for 5 countries. uses these 250 pages for testing. mixes the 400 faculty directory test urls with the 250 alexa test urls. remove duplicates if any. this gives 548 urls as the final test urls. the test urls are saved in the file test_urls.cor. scraper (scraper.py) the scraper module scrapes the contents from the above train and test urls and prepares the train and test corpus for the classification task. the scraper does the following: gets the contents of each url as text. performs clean-up of non-ascii characters from the content. performs other clean-ups such as substituting newlines, tabs, multiple whitespaces into single whitespace. substitutes contents such as ""403 forbidden"", ""404 not found"", etc. with ""error: content not found"". writes contents of each training url as a single line of space separated words to the training corpus (""train_dataset.cor""). similarly, writes contents of each test url as a single line of space separated words to the test corpus (""test_dataset.cor""). text classifier (text_classifier.py) the text classifier module uses the train and test dataset from above step to classify the faculty directory urls. the classification module does the following: uses gensim to build a doc2vec model for feature vector representation of each document. uses the train_dataset.cor to build the vocabulary and train the model. saves the model so that it can be reloaded while running next time on the same dataset. uses logisticregression as the classifier from scikit-learn module. uses logisticregression to predict the categories of the test urls given the test dataset. faculty url classification next, let's look at the faculty url classification task. data handler (data_handler.py) the data handler module now takes the existing project's known faculty bio urls and mixes with some alexa urls to prepare the train dataset. uses the classified faculty directory urls from the above step to extract potential faculty bio urls to prepare the test dataset. then uses the scraper module to extract the url contents into bio test and bio train corpus as shown in the figure below (fig. 3). fig. 3: dataset preparation for faculty bio url classification the following approach was used to prepare the dataset: training urls use the top 1000 urls from the currently existing faculty bio urls in the expertsearch project as the ""positive"" train urls. use 250 urls from the alexa test urls set as the ""negative"" train urls. combine them. tag the faculty bio urls as ""faculty"" and save to the file ""train_bio_urls.cor"". tag the alexa urls as ""alexa_faculty"" and save to the same file. this will be the final file with all the train urls. test urls use the classified faculty directory urls obtained from the directory url classification task above. use the scraper to find all potential faculty bio urls from each of these directory urls. save all these potential faculty bio urls to the file ""test_bio_urls.cor"". this will be the final file with all the test urls. scraper (scraper.py) since the expertsearch project already contains the faculty bios as documents, the contents of the top 1000 faculty bios (0.txt ... 999.txt) are copied to the train corpus file (""train_bio_dataset.cor""). then the scraper does the following: scrapes the urls from line no. 1000 till the end from the file train_bio_urls.cor and appends to the train corpus (""train_bio_dataset.cor""). scrapes the contents of the test urls (i.e. potential faculty bio urls) from the test_bio_urls.cor file above and adds those contents to the test corpus (""test_bio_dataset.cor""). text classifier (text_classifier.py) the classification module does the following: uses gensim to build a doc2vec model for feature vector representation of each document. uses the train_bio_dataset.cor to build the vocabulary and train the model. saves the model so that it can be reloaded while running next time on the same dataset. uses logisticregression as the classifier from scikit-learn module. uses logisticregression to predict the categories (bio or non-bio) of the test urls given the test dataset. finally, the scraper module scrapes these classified bio urls and saves the contents of each bio url to a new file under expertsearch/data/compiled_bios. topic mining inputs: generated faculty bio documents from the autoscraper (e.g. 6530.txt) outputs: trained topic model (lda_mallet_model) bag-of-words representation of corpus to be used with miner.py (corpus_dictionary) text representation of corpus (lda_corpus) deliverables: python script to create topic model and retrieve top-10 terms associated with query topic (miner.py) component design / code workflow: topic miner (miner.py) the topic miner pulls a topic distribution from a document already mined if the model was trained on the document, otherwise it uses gensim and mallet to create a model from the entire corpus. the process is described below: corpus preparation read in compiled bios as strings filter the string representation of each bio to: remove stop words extract html tags and elements strip non-alphanumeric characters strip numbers strip words that exist in lists of terms extracted from the bios strip words that exist in a manually defined list of words that were creating incoherent topic clusters (unwanted_words.txt) remove words shorter than four characters split all words into a list of tokens create list of documents which is comprised of lists of tokens for each document as described above append bigrams and trigrams to each token list for each document create a gensim dictionary from the above documents create a bag-of-word representation of our documents: this will be our corpus. model creation model creation required a good deal of manual work to ensure that the term clusters were understandable. the process consisted of a lot of trial and error, using the steps below (fig. 4): create a general model with gensim.models.ldamodel.ldamodel class with 10 models visually inspect term clusters to ensure they were meaningful if the above criteria were not satisfactory: tweak corpus construction after the above criteria was deemed satisfactory: using gensim.models.wrappers.ldamallet with the mallet library, i: varied number of topics to create new model assessed coherence of each model with varying number of topics manually inspected output of models with high coherence, looking for term clusters that made intuitive sense and that appeared distinct given knowledge of the separate domains chose the best model according to above criteria and saved it and the created dictionary for query inference fig. 4: workflow for building an optimal topic model. term extraction with a model and a dictionary, i wrote a method that can infer the topic of a given query and fetch the top-10 terms associated with that topic, a method that can infer the topic of a single document and fetch the top-10 terms associated with that document's topic, and a method that can infer the topics of multiple documents and fetch the top-10 terms associated with each document's topic. these terms will eventually be pushed to the user to help them potentially refine their query as shown below (fig. 5). fig. 5: extracting topics from documents not included in training set. improved email extraction inputs: generated faculty bio documents from the autoscraper (e.g. 6530.txt) outputs: extracted emails for the faculties deliverables: updated email extractor (extract-email.py) component design / code workflow: regex improvement: there are certain edge cases that we had noticed in some of the email web pages where the format was different than the traditional email formatting added more regex matches in order to match with these edge cases such as ex. rohini[@]buffalo[dot]edu ui improvements inputs: query terms in the search box topics mined by the topic miner outputs: updated ui showing top-5 research topic per faculty updated ui showing topic cloud clickable topic terms for query refinement prepopulated email template on-click email icon deliverables: updated server endpoints (server.py) updated ui (index.js) component design / code workflow: info button: information button is created at the top of each of the retrieved faculty. when the button is clicked there a table pops up that appears below the selected retrieved faculty the table will contain additional information regarding the research topics that the faculty does when one of the info buttons associated with a faculty is clicked the other one will close, and the new one will open. top 5 topics display: display the top 5 topics from the preview for each of the faculty. display these topics in a table format when the information button is clicked underneath each topic is a 'learn more' button which when clicked leads you to a page talking more about the topic in detail from the web. clicking on the ""add to query"" button will refine the current search query to include this topic. email automation: email comes pre-populated with a set subject and body. the body talks about one of the research topics that were extracted from the top 5 topics and how the user would like to connect with the faculty regarding research in this topic. usage details the modified project has been tested on mac and windows with python 2.7. here are the setup instructions for each of these platforms. setup guide (mac) repo setup run the following command on a terminal to clone the github repository. $ git clone https://github.com/sairanga123/courseproject.git the directory structure of the project is as below (listing only the files/folders relevant to this project): courseproject |__________ expertsearch |__________ autoscraper | |__________ data | |__________ auto_scraper.py | |__________ data_handler.py | |__________ scraper.py | |__________ text_classifier.py | |__________ d2v.model | |__________ d2v-bio.model | |__________ data | |__________ compiled_bios | |__________ expertsearch | |__________ mallet-2.0.8 | |__________ model_files | |__________ corpus_dictionary | |__________ lda_mallet_model | |__________ lda_corpus | |__________ miner.py | |__________ extraction |__________ mallet-2.0.8 |__________ static |__________ server.py project environment setup the project has been tested on python 2.7. please setup a python 2.7 environment for running the project. creating an environment from anaconda will make many common packages available. so a quick way to start would be to setup a python 2.7 environment from anaconda. may need to install many or all of the following python packages depending on what packages the python environment already has. gunicorn=19.10.0 flask=1.1.2 metapy=0.2.13 requests=2.25.0 pytoml=0.1.21 gensim=3.8.3 nltk=3.4 bs4=0.0.1 lxml=4.6.2 numpy=1.16.6 sklearn=0.0 setup guide (windows) windows is currently not supported. if you want to build in windows, use windows subsystem for linux and follow the steps above. usage guide running the automated scraper run the autoscraper to generate the bio documents. this step has been already performed and the generated bio documents have already been added to the expertsearch/data/compiled_bios folder. here are the instructions for running the autoscraper if it needs to be run again with additional input. to run the automated scraper, first go the expertsearch/autoscraper directory. then the automated scraper can be invoked as follows: -d option specifies to generate/regenerate the train and test dataset. if -d switch is used: if the dataset already exists, it will be regenerated if the dataset doesn't yet exist, it will be generated if -d switch is not used: if the dataset already exists, the existing dataset will be used in the subsequent flow if the dataset doesn't yet exist, it will be generated even if -d switch is not used -t option specifies to train/retrain the doc2vec model on the train dataset. if -t switch is used: if a trained and saved model already exists, the model will be retrained and saved again if a trained and saved model doesn't yet exist, it will be trained and saved if -t switch is not used: if a trained and saved model already exists, the saved model will be loaded and used for inference in the subsequent flow if a trained and saved model doesn't yet exist, it will be trained and saved even if -t switch is not used running the topic miner the steps for creating the topic model are documented in expertsearch/data/expertsearch/ldatopicmodeling.ipynb. the model construction is not something that can necessarily be automated because relying on perplexity and coherence scores alone often results in topics that don't make any meaningful sense to a human. once the topic model is constructed and saved, miner.py allows the server to load the model and make inferences. running the backend server once, the topic model has been built, we can start the server. to start the server, go to the expertsearch folder. then run the following command: $ gunicorn server:app -b 127.0.0.1:8095 running faculty search from the ui now, launch a web browser and type the following url: localhost:8095 example use cases: use case 1 - basic use to search faculties let's assume that we want to find the faculties that are working on ""text mining"". then we'd go to the ui and enter our search string as ""text mining"". the existing system would retrieve the top ranked faculty results working on ""text mining"". use case 2 - find research interests of the faculty now, the improved system will also provide an info button which will bring up an additional table of information for each faculty. this table shows the top 5 research topics the faculty is associated with. use case 3 - find faculties working on similar topics as the faculty from the initial search results we now maybe interested in learning more about who are the faculties that are working on any of these research topics. we can quickly search for all the faculties working on this new research topic by simply clicking on the ""add to query"" button for that research topic. this will automatically modify our search query by including that new research topic without having to type it in the search box. the retrieved faculty results will show the list of faculties working on that research topic. use case 4 - connecting to faculty another way we could use the system is to click on the email icon to send an email to the faculty's email address. while we may be at a loss of words for that first email, the system will provide a pre-populated template email which will automatically address the faculty's name and also include reference to the faculty's research area. this will make connecting to an expert faculty just one click away. contributions item sub-items contributor automated scraping automated scraper to automate the complete process data handler to prepare the datasets for the text classification tasks scraper to scrape the urls text classifier to classify directory and bio urls function to generate bio documents and add to compiled bios mriganka sarma topic mining topic model function to return top-10 words associated with query topic zacharia rupp improved email extraction added regular expressions to extract emails with atypical forms (e.g. person at place dot com) sai ranganathan zacharia rupp improved ui display top 5 topics associated with each faculty member display cloud of topics pre-populate email field when clicked on email address improve email extraction part 1. sai ranganathan 1 1 project report improved expertsearch system (team zms) zacharia rupp (zrupp2@illinois.edu) mriganka sarma (ms76@illinois.edu) sai ranganathan (sr50@illinois.edu) 2 introduction ................................................................................................................................. 4 1. functional overview ......................................................................................................... 4 2. implementation details .................................................................................................... 4 2.1. automated scraping process ..................................................................................... 4 2.1.1. inputs: ........................................................................................................................ 5 2.1.2. outputs: .................................................................................................................... 5 2.1.3. deliverables: ............................................................................................................ 5 2.1.4. component design / code workflow: ................................................................ 5 automated scraper (auto_scraper.py) ......................................................................... 5 directory url classification .......................................................................................... 6 data handler (data_handler.py) ................................................................................. 7 scraper (scraper.py) ..................................................................................................... 8 text classifier (text_classifier.py) ............................................................................. 9 faculty url classification .............................................................................................. 9 data handler (data_handler.py) ................................................................................. 9 scraper (scraper.py) ................................................................................................... 11 text classifier (text_classifier.py) ........................................................................... 11 2.2. topic mining .................................................................................................................. 12 2.2.1. inputs: ...................................................................................................................... 12 2.2.2. outputs: .................................................................................................................. 12 2.2.3. deliverables: .......................................................................................................... 12 2.2.4. component design / code workflow: .............................................................. 12 topic miner (miner.py) ................................................................................................... 12 corpus preparation ..................................................................................................... 12 model creation .............................................................................................................. 13 term extraction ............................................................................................................ 14 2.3. improved email extraction ........................................................................................ 16 2.3.1. inputs: ...................................................................................................................... 16 2.3.2. outputs: .................................................................................................................. 16 2.3.3. deliverables: .......................................................................................................... 16 2.3.4. component design / code workflow: .............................................................. 16 regex improvement: ................................................................................................... 16 2.4. ui improvements .......................................................................................................... 16 3 2.4.1. inputs: ...................................................................................................................... 16 2.4.2. outputs: .................................................................................................................. 16 2.4.3. deliverables: .......................................................................................................... 16 2.4.4. component design / code workflow: .............................................................. 17 info button: ................................................................................................................... 17 top 5 topics display: ................................................................................................. 17 email automation: ....................................................................................................... 17 3. usage details .................................................................................................................... 17 3.1. setup guide (mac) ....................................................................................................... 17 3.1.1. repo setup ............................................................................................................. 17 3.1.2. project environment setup ................................................................................. 18 3.2. setup guide (windows) .............................................................................................. 19 3.3. usage guide .................................................................................................................. 19 3.3.1. running the automated scraper ...................................................................... 19 3.3.2. running the topic miner .................................................................................... 20 3.3.3. running the backend server ............................................................................. 20 3.3.4. running faculty search from the ui ............................................................... 21 3.4. example use cases: ................................................................................................... 21 3.4.1. use case 1 - basic use to search faculties ................................................... 21 3.4.2. use case 2 - find research interests of the faculty .................................... 21 3.4.3. use case 3 - find faculties working on similar topics as the faculty from the initial search results ...................................................................................... 21 3.4.4. use case 4 - connecting to faculty ................................................................. 21 4. contributions .................................................................................................................... 22 4 introduction the expertsearch system is a system to search faculties who are experts in certain research areas or topics from university websites crawled from the web. the goal of our project is to improve this expertsearch system in a few ways, including automating the scraping process, adding topic mining for finding faculty research topics, and improving the ui to give improved visualizations and query refinement options. 1. functional overview the improved expertsearch system enables the following functionalities: * automatic scraping of websites to identify faculty directory webpages and non- directory webpages * automatic scraping of the classified faculty directory webpages to further identify faculty bio webpages and non-bio webpages * automatic scraping of faculty bio webpages to generate one bio document per faculty and adding to the compiled bios * topic mining from the compiled bios to extract research topics of the faculties * display top-5 research topics associated with each retrieved faculty * improved email extraction for each faculty * refine search query using any of the topics from the displayed topic cloud * prepopulate email content when clicked on a faculty's email address the automated scraper improves the faculty bio generation process from a vast collection of websites. the topic miner adds more structure to the unstructured faculty website data retrieved from a query. the enhanced ui enables succinct visualization of the structured faculty results and provides shortcuts for additional search filters and faculty connection. together, these new features improve the utility of the expertsearch system to the user. 2. implementation details 2.1. automated scraping process the automated scraper takes a set of known university websites and top 500 alexa websites as input, performs a series of operations to classify the directory urls and then to classify the faculty homepages. the automated scraper then 5 scrapes the classified faculty homepages to generate faculty bio documents and adds the bios to the collection. 2.1.1. inputs: o university websites o top-500 alexa websites 2.1.2. outputs: o corpus of classified faculty directory urls (classified_dir_urls.cor) o corpus of classified faculty bio urls (classified_faculty_urls.cor) o documents of bios for each faculty generated by scraping the classified faculty bio urls (e.g. 6530.txt) 2.1.3. deliverables: o automated scraper (auto_scraper.py) o data handler (data_handler.py) o scraper (scraper.py) o text classifier (text_classifier.py) 2.1.4. component design / code workflow: automated scraper (auto_scraper.py) the automated scraper module automates the whole flow of generating the faculty bios from the input mixture of ""positive"" and ""negative"" urls in the following sequence of steps: o uses the data handler (data_handler.py) to prepare a train and test set of faculty directory urls o uses the scraper (scraper.py) to scrape these urls to prepare the train and test corpus o uses the text classifier (text_classifier.py) to build and train a doc2vec model on the documents in the train corpus of directory contents o uses the text classifier to predict the category of the test urls as ""directory"" or ""non-directory"" o saves the classified directory urls to a file (classified_dir_urls.cor) o uses the data handler to prepare a train and test set of faculty bio urls o uses the scraper to scrape these urls to prepare the train and test corpus 6 o uses the text classifier to build and train a doc2vec model on the documents in the train corpus of faculty bios o uses the text classifier to predict the category of the test urls as ""faculty"" or ""non-faculty"" o saves the classified bio urls to a file (classified_faculty_urls.cor) o uses the scraper to scrape the faculty bios from the classified bio urls o generates one document per faculty bio (e.g. 6530.txt) and saves under expertsearch/data/compiled_bios the auto_scraper.py module is the entry point for the complete automatic scraping and bio generation task. the following figure (fig. 1) shows the complete automation flow starting with the input websites till the bio generation completion. fig. 1: automation control flow / module interactions directory url classification first, let's explain the directory url classification task with the help of the modules. 7 data handler (data_handler.py) the data handler module first takes the university websites and alexa websites as input, mixes them and partitions them into test and train urls. then uses the scraper module to extract the url contents into test and train corpus as shown in the figure below (fig. 2). fig. 2: dataset preparation for directory url classification 8 here's a detailed explanation of the approach used by the data handler module to prepare the urls for the scraper. * downloaded the known faculty directory urls from the sign-up sheet for mp 2.1. these will serve as the ""positive"" examples. o about 900 urls were obtained from the sign-up sheet data, which was partitioned into 500 for training and 400 for test data. * collected top urls from alexa. these will serve as the ""negative"" examples. o collected the global top-50 pages of alexa. o collected the top-50 pages for 14 different countries. manually verified that the pages are in english. o this gave 750 ""negative"" urls. * when the autoscraper is launched, it invokes the datahandler which mixes and partitions the above urls into train and test urls as follows: o training urls * converts the mp 2.1 sign-up sheet from csv to a file containing only the directory urls. performs any cleanup as necessary and labels them as ""directory"". * combines the top-50 alexa urls for 10 countries and labels them as ""alexa_dir"". uses these 500 pages for training. * mixes the 500 faculty directory training urls with the 500 alexa training urls. removes duplicates if any. this gives 734 urls as the final training urls. * the training urls are saved in the file train_urls.cor. o test urls * combines the top-50 alexa urls for 5 countries. uses these 250 pages for testing. * mixes the 400 faculty directory test urls with the 250 alexa test urls. remove duplicates if any. this gives 548 urls as the final test urls. * the test urls are saved in the file test_urls.cor. scraper (scraper.py) the scraper module scrapes the contents from the above train and test urls and prepares the train and test corpus for the classification task. the scraper does the following: * gets the contents of each url as text. * performs clean-up of non-ascii characters from the content. 9 * performs other clean-ups such as substituting newlines, tabs, multiple whitespaces into single whitespace. * substitutes contents such as ""403 forbidden"", ""404 not found"", etc. with ""error: content not found"". * writes contents of each training url as a single line of space separated words to the training corpus (""train_dataset.cor""). * similarly, writes contents of each test url as a single line of space separated words to the test corpus (""test_dataset.cor""). text classifier (text_classifier.py) the text classifier module uses the train and test dataset from above step to classify the faculty directory urls. the classification module does the following: * uses gensim to build a doc2vec model for feature vector representation of each document. * uses the train_dataset.cor to build the vocabulary and train the model. * saves the model so that it can be reloaded while running next time on the same dataset. * uses logisticregression as the classifier from scikit-learn module. * uses logisticregression to predict the categories of the test urls given the test dataset. faculty url classification next, let's look at the faculty url classification task. data handler (data_handler.py) the data handler module now takes the existing project's known faculty bio urls and mixes with some alexa urls to prepare the train dataset. uses the classified faculty directory urls from the above step to extract potential faculty bio urls to prepare the test dataset. then uses the scraper module to extract the url contents into bio test and bio train corpus as shown in the figure below (fig. 3). 10 fig. 3: dataset preparation for faculty bio url classification 11 the following approach was used to prepare the dataset: * training urls o use the top 1000 urls from the currently existing faculty bio urls in the expertsearch project as the ""positive"" train urls. o use 250 urls from the alexa test urls set as the ""negative"" train urls. o combine them. o tag the faculty bio urls as ""faculty"" and save to the file ""train_bio_urls.cor"". o tag the alexa urls as ""alexa_faculty"" and save to the same file. o this will be the final file with all the train urls. * test urls o use the classified faculty directory urls obtained from the directory url classification task above. o use the scraper to find all potential faculty bio urls from each of these directory urls. o save all these potential faculty bio urls to the file ""test_bio_urls.cor"". o this will be the final file with all the test urls. scraper (scraper.py) since the expertsearch project already contains the faculty bios as documents, the contents of the top 1000 faculty bios (0.txt ... 999.txt) are copied to the train corpus file (""train_bio_dataset.cor""). then the scraper does the following: * scrapes the urls from line no. 1000 till the end from the file train_bio_urls.cor and appends to the train corpus (""train_bio_dataset.cor""). * scrapes the contents of the test urls (i.e. potential faculty bio urls) from the test_bio_urls.cor file above and adds those contents to the test corpus (""test_bio_dataset.cor""). text classifier (text_classifier.py) the classification module does the following: * uses gensim to build a doc2vec model for feature vector representation of each document. * uses the train_bio_dataset.cor to build the vocabulary and train the model. 12 * saves the model so that it can be reloaded while running next time on the same dataset. * uses logisticregression as the classifier from scikit-learn module. * uses logisticregression to predict the categories (bio or non-bio) of the test urls given the test dataset. finally, the scraper module scrapes these classified bio urls and saves the contents of each bio url to a new file under expertsearch/data/compiled_bios. 2.2. topic mining 2.2.1. inputs: o generated faculty bio documents from the autoscraper (e.g. 6530.txt) 2.2.2. outputs: o trained topic model (lda_mallet_model) o bag-of-words representation of corpus to be used with miner.py (corpus_dictionary) o text representation of corpus (lda_corpus) 2.2.3. deliverables: o python script to create topic model and retrieve top-10 terms associated with query topic (miner.py) 2.2.4. component design / code workflow: topic miner (miner.py) the topic miner pulls a topic distribution from a document already mined if the model was trained on the document, otherwise it uses gensim and mallet to create a model from the entire corpus. the process is described below: corpus preparation * read in compiled bios as strings * filter the string representation of each bio to: o remove stop words o extract html tags and elements o strip non-alphanumeric characters 13 o strip numbers o strip words that exist in lists of terms extracted from the bios o strip words that exist in a manually defined list of words that were creating incoherent topic clusters (unwanted_words.txt) o remove words shorter than four characters o split all words into a list of tokens * create list of documents which is comprised of lists of tokens for each document as described above * append bigrams and trigrams to each token list for each document * create a gensim dictionary from the above documents * create a bag-of-word representation of our documents: this will be our corpus. model creation model creation required a good deal of manual work to ensure that the term clusters were understandable. the process consisted of a lot of trial and error, using the steps below (fig. 4): * create a general model with gensim.models.ldamodel.ldamodel class with 10 models * visually inspect term clusters to ensure they were meaningful * if the above criteria were not satisfactory: o tweak corpus construction * after the above criteria was deemed satisfactory: o using gensim.models.wrappers.ldamallet with the mallet library, i: a. varied number of topics to create new model b. assessed coherence of each model with varying number of topics c. manually inspected output of models with high coherence, looking for term clusters that made intuitive sense and that appeared distinct given knowledge of the separate domains 14 d. chose the best model according to above criteria and saved it and the created dictionary for query inference fig. 4: workflow for building an optimal topic model. term extraction with a model and a dictionary, i wrote a method that can infer the topic of a given query and fetch the top-10 terms associated with that topic, a method that can infer the topic of a single document and fetch the top-10 terms associated with 15 that document's topic, and a method that can infer the topics of multiple documents and fetch the top-10 terms associated with each document's topic. these terms will eventually be pushed to the user to help them potentially refine their query as shown below (fig. 5). fig. 5: extracting topics from documents not included in training set. 16 2.3. improved email extraction 2.3.1. inputs: o generated faculty bio documents from the autoscraper (e.g. 6530.txt) 2.3.2. outputs: o extracted emails for the faculties 2.3.3. deliverables: o updated email extractor (extract-email.py) 2.3.4. component design / code workflow: regex improvement: o there are certain edge cases that we had noticed in some of the email web pages where the format was different than the traditional email formatting o added more regex matches in order to match with these edge cases such as ex. rohini[@]buffalo[dot]edu 2.4. ui improvements 2.4.1. inputs: o query terms in the search box o topics mined by the topic miner 2.4.2. outputs: o updated ui showing top-5 research topic per faculty o updated ui showing topic cloud o clickable topic terms for query refinement o prepopulated email template on-click email icon 2.4.3. deliverables: o updated server endpoints (server.py) o updated ui (index.js) 17 2.4.4. component design / code workflow: info button: o information button is created at the top of each of the retrieved faculty. o when the button is clicked there a table pops up that appears below the selected retrieved faculty o the table will contain additional information regarding the research topics that the faculty does o when one of the info buttons associated with a faculty is clicked the other one will close, and the new one will open. top 5 topics display: o display the top 5 topics from the preview for each of the faculty. o display these topics in a table format when the information button is clicked o underneath each topic is a 'learn more' button which when clicked leads you to a page talking more about the topic in detail from the web. o clicking on the ""add to query"" button will refine the current search query to include this topic. email automation: o email comes pre-populated with a set subject and body. o the body talks about one of the research topics that were extracted from the top 5 topics and how the user would like to connect with the faculty regarding research in this topic. 3. usage details the modified project has been tested on mac and windows with python 2.7. here are the setup instructions for each of these platforms. 3.1. setup guide (mac) 3.1.1. repo setup run the following command on a terminal to clone the github repository. 18 $ git clone https://github.com/sairanga123/courseproject.git the directory structure of the project is as below (listing only the files/folders relevant to this project): courseproject |__________ expertsearch |__________ autoscraper | |__________ data | |__________ auto_scraper.py | |__________ data_handler.py | |__________ scraper.py | |__________ text_classifier.py | |__________ d2v.model | |__________ d2v-bio.model | |__________ data | |__________ compiled_bios | |__________ expertsearch | |__________ mallet-2.0.8 | |__________ model_files | |__________ corpus_dictionary | |__________ lda_mallet_model | |__________ lda_corpus | |__________ miner.py | |__________ extraction |__________ mallet-2.0.8 |__________ static |__________ server.py 3.1.2. project environment setup the project has been tested on python 2.7. please setup a python 2.7 environment for running the project. creating an environment from anaconda will make many common packages available. so a quick way to start would be to setup a python 2.7 environment from anaconda. 19 may need to install many or all of the following python packages depending on what packages the python environment already has. - gunicorn=19.10.0 - flask=1.1.2 - metapy=0.2.13 - requests=2.25.0 - pytoml=0.1.21 - gensim=3.8.3 - nltk=3.4 - bs4=0.0.1 - lxml=4.6.2 - numpy=1.16.6 - sklearn=0.0 3.2. setup guide (windows) windows is currently not supported. if you want to build in windows, use windows subsystem for linux and follow the steps above. 3.3. usage guide 3.3.1. running the automated scraper run the autoscraper to generate the bio documents. this step has been already performed and the generated bio documents have already been added to the expertsearch/data/compiled_bios folder. here are the instructions for running the autoscraper if it needs to be run again with additional input. to run the automated scraper, first go the expertsearch/autoscraper directory. then the automated scraper can be invoked as follows: 20 -d option specifies to generate/regenerate the train and test dataset. if -d switch is used: o if the dataset already exists, it will be regenerated o if the dataset doesn't yet exist, it will be generated if -d switch is not used: o if the dataset already exists, the existing dataset will be used in the subsequent flow o if the dataset doesn't yet exist, it will be generated even if -d switch is not used -t option specifies to train/retrain the doc2vec model on the train dataset. if -t switch is used: o if a trained and saved model already exists, the model will be retrained and saved again o if a trained and saved model doesn't yet exist, it will be trained and saved if -t switch is not used: o if a trained and saved model already exists, the saved model will be loaded and used for inference in the subsequent flow o if a trained and saved model doesn't yet exist, it will be trained and saved even if -t switch is not used 3.3.2. running the topic miner the steps for creating the topic model are documented in expertsearch/data/expertsearch/ldatopicmodeling.ipynb. the model construction is not something that can necessarily be automated because relying on perplexity and coherence scores alone often results in topics that don't make any meaningful sense to a human. once the topic model is constructed and saved, miner.py allows the server to load the model and make inferences. 3.3.3. running the backend server once, the topic model has been built, we can start the server. to start the server, go to the expertsearch folder. then run the following command: $ gunicorn server:app -b 127.0.0.1:8095 21 3.3.4. running faculty search from the ui now, launch a web browser and type the following url: localhost:8095 3.4. example use cases: 3.4.1. use case 1 - basic use to search faculties let's assume that we want to find the faculties that are working on ""text mining"". then we'd go to the ui and enter our search string as ""text mining"". the existing system would retrieve the top ranked faculty results working on ""text mining"". 3.4.2. use case 2 - find research interests of the faculty now, the improved system will also provide an info button which will bring up an additional table of information for each faculty. this table shows the top 5 research topics the faculty is associated with. 3.4.3. use case 3 - find faculties working on similar topics as the faculty from the initial search results we now maybe interested in learning more about who are the faculties that are working on any of these research topics. we can quickly search for all the faculties working on this new research topic by simply clicking on the ""add to query"" button for that research topic. this will automatically modify our search query by including that new research topic without having to type it in the search box. the retrieved faculty results will show the list of faculties working on that research topic. 3.4.4. use case 4 - connecting to faculty another way we could use the system is to click on the email icon to send an email to the faculty's email address. while we may be at a loss of words for that first email, the system will provide a pre-populated template email which will automatically address the faculty's name and also include reference to the faculty's research area. this will make connecting to an expert faculty just one click away. 22 4. contributions item sub-items contributor automated scraping * automated scraper to automate the complete process * data handler to prepare the datasets for the text classification tasks * scraper to scrape the urls * text classifier to classify directory and bio urls * function to generate bio documents and add to compiled bios mriganka sarma topic mining * topic model * function to return top-10 words associated with query topic zacharia rupp improved email extraction * added regular expressions to extract emails with atypical forms (e.g. person at place dot com) sai ranganathan zacharia rupp improved ui * display top 5 topics associated with each faculty member * display cloud of topics * pre-populate email field when clicked on email address * improve email extraction part 1. sai ranganathan improved expertsearch project source code the project's source code is available under the expertsearch folder. project documentation the project's detailed report is available as: ""project report - improved expertsearch.pdf"" the project's tutorial presentation video is available as: ""video presentation - improved expertsearch.mp4"" please read ""project report - improved expertsearch.pdf"" for the report please view ""video presentation - improved expertsearch.mp4"" for the presentation and demo improved expertsearch proposal what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. team captain: sai ranganathan (sr50) mriganka sarma (ms76) zacharia rupp (zrupp2) what system have you chosen? which subtopic(s) under the system? we have chosen to improve expertsearch. briefly describe the datasets, algorithms or techniques you plan to use datasets: faculty dataset scraped from mp2.1 for positive examples. scrape of alexa top 500 domains for negative examples. techniques: topic mining if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? additional functionality: topic mining if it works, users will be able to refine queries by selecting topics from a topic cloud impact on ndcg@k improved functionality: email extraction if it works, more faculty members will have email addresses associated with them. improved ui: more granular query refinement top-k associated topics listed under individual faculty members how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly our code will build on the expertsearch code by: adding a topic mining function improving email extraction automating scraping process improving ui which programming language do you plan to use? python javascript please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. main tasks: automatic crawler to identify faculty directory pages (10+ hrs) automatic crawler to identify faculty webpage urls (10+ hrs) improving functionality: email extraction (10+ hrs) adding functionality: topic mining (10+ hrs) ui improvements: query refinement options (10+ hrs) topic cloud from mined topics associated with retrieved faculty members. top-5 topics associated with faculty member (5+ hrs) displayed at the top of the bio excerpt prepopulated email content when a user clicks on a faculty member's email address (5+ hrs) e.g. ""dear faculty name, it's a pleasure to have gone through some of your research articles. i'd like to connect with you for discussing some ideas in the research area. i hope to hear from you soon."" 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members.  team captain: sai ranganathan (sr50)  mriganka sarma (ms76)  zacharia rupp (zrupp2) 2. what system have you chosen? which subtopic(s) under the system?  we have chosen to improve expertsearch. 3. briefly describe the datasets, algorithms or techniques you plan to use  datasets:  faculty dataset scraped from mp2.1 for positive examples.  scrape of alexa top 500 domains for negative examples.  techniques:  topic mining 4. if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better?  additional functionality:  topic mining - if it works, users will be able to refine queries by selecting topics from a topic cloud o impact on ndcg@k  improved functionality:  email extraction - if it works, more faculty members will have email addresses associated with them.  improved ui:  more granular query refinement  top-k associated topics listed under individual faculty members 5. how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly  our code will build on the expertsearch code by:  adding a topic mining function  improving email extraction  automating scraping process  improving ui 6. which programming language do you plan to use?  python  javascript 7. please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task.  main tasks:  automatic crawler to identify faculty directory pages (10+ hrs)  automatic crawler to identify faculty webpage urls (10+ hrs)  improving functionality: - email extraction (10+ hrs)  adding functionality: - topic mining (10+ hrs)  ui improvements: - query refinement options (10+ hrs) o topic cloud from mined topics associated with retrieved faculty members. - top-5 topics associated with faculty member (5+ hrs) o displayed at the top of the bio excerpt - prepopulated email content when a user clicks on a faculty member's email address (5+ hrs) o e.g. ""dear <faculty name>, it's a pleasure to have gone through some of your research articles. i'd like to connect with you for discussing some ideas in the <research area>. i hope to hear from you soon."" improved expert search team zms (zacharia rupp, mriganka sarma, sai ranganathan) z m s z m s introduction what is expertsearch system the system as it is z m s the system as it is z m s challenges of current system manual process for directory url identification manual process for faculty webpage identification need for structuring of faculty information need for improved extraction methods z m s proposed improvements automatic scraping of faculty directory and faculty webpages mining top research topics of faculty improved email extraction improved ui for better visualization of structured data z m s setup instructions clone the project repository $ git clone https://github.com/sairanga123/courseproject.git create anaconda python 2.7 environment install python packages gensim nltk gunicorn bs4 metapy z m s usage instructions main functional categories: automatic scraping topic mining faculty search in ui z m s usage instructions (contd.) automatic scraping $ cd expertsearch/autoscraper $ python ./auto_scraper.py -d -t z m s usage instructions (contd.) topic miner work in jupyter notebook (expertsearch/data/expertsearch/ldatopicmodeling.ipynb) build corpus and dictionary, and create topic model manually inspect topics with high coherence check against known document save best topic model, corpus, dictionary server.py accesses model with miner.py z m s usage instructions (contd.) email extraction $ cd expertsearch/extraction $ python extract_email.py different email formats to cover: eugene dot agichten at emory dot edu rohini [@] buffalo [dot] edu z m s usage instructions (contd.) running the backend server $ gunicorn server:app -b 127.0.0.1:8095 running faculty search from the ui localhost:8095 z m s example usage z m s example usage (contd.) z m s example usage (contd.) z m s thank you z m s z m s"	['improving', 'expertsearch', 'progress', 'report', 'plan', 'automate', 'scraping', 'process', 'perform', 'topic', 'mining', 'additional', 'improvement', 'improve', 'ui', 'automated', 'deliverables', 'outputs', 'challenges', 'scraper', 'directory', 'url', 'classification', 'dataset', 'preparation', 'text', 'faculty', 'miner', 'corpus', 'model', 'creation', 'term', 'extraction', 'improved', 'email', 'regex', 'improvements', 'info', 'button', 'top', 'topics', 'display', 'automation', 'identify', 'pages', 'home', 'topk', 'associated', 'retrieved', 'allow', 'search', 'based', 'displayed', 'cloud', 'prepopulate', 'content', 'clicked', 'facultys', 'address', 'item', 'owner', 'status', 'mriganka', 'sarma', 'completed', 'data', 'handler', 'classifier', 'remaining', 'optimizing', 'parameters', 'integration', 'testing', 'none', 'zacharia', 'rupp', 'function', 'return', 'words', 'query', 'exploration', 'best', 'clean', 'code', 'inferring', 'takes', 'considerable', 'processing', 'time', 'sai', 'ranganathan', 'member', 'field', 'part', 'detailed', 'description', 'provided', 'sections', 'auto_scraperpy', 'data_handlerpy', 'scraperpy', 'text_classifierpy', 'classified', 'urls', 'bio', 'documents', 'bios', 'generated', 'module', 'automates', 'following', 'way', 'uses', 'prepare', 'train', 'test', 'set', 'scrape', 'build', 'docvec', 'contents', 'predict', 'category', 'nondirectory', 'saves', 'file', 'nonfaculty', 'generates', 'one', 'document', 'per', 'expertsearchdatacompiled_bios', 'invoked', 'follows', 'cd', 'expertsearchautoscraper', 'python', 'option', 'specifies', 'generateregenerate', 'even', 'doesnt', 'exist', 'yet', 'existing', 'used', 'retrain', 'trained', 'wasnt', 'saved', 'loaded', 'describe', 'tasks', 'first', 'need', 'training', 'approach', 'downloaded', 'known', 'signup', 'sheet', 'mp', 'serve', 'positive', 'examples', 'collected', 'alexa', 'negative', 'global', 'different', 'countries', 'manually', 'verified', 'english', 'obtained', 'partitioned', 'total', 'gave', 'wrote', 'handling', 'converts', 'csv', 'containing', 'performs', 'cleanup', 'necessary', 'labels', 'combines', 'alexa_dir', 'test_dir', 'mix', 'remove', 'duplicates', 'gives', 'final', 'step', 'gets', 'nonascii', 'characters', 'cleanups', 'substituting', 'newlines', 'tabs', 'multiple', 'whitespaces', 'single', 'whitespace', 'substitutes', 'forbidden', 'found', 'etc', 'error', 'writes', 'webpage', 'line', 'space', 'separated', 'meant', 'done', 'train_datasetcor', 'test_datasetcor', 'performing', 'task', 'identifying', 'valid', 'gensim', 'feature', 'vector', 'representation', 'vocabulary', 'reloaded', 'running', 'next', 'logisticregression', 'scikitlearn', 'categories', 'given', 'use', 'currently', 'project', 'tag', 'save', 'alexa_faculty', 'since', 'already', 'contains', 'copied', 'train_bio_datasetcor', 'scrapes', 'appends', 'embedded', 'potential', 'adds', 'test_bio_datasetcor', 'script', 'create', 'retrieve', 'terms', 'minerpy', 'lda_mallet_model', 'bagofwords', 'corpus_dictionary', 'mallet', 'entire', 'read', 'compiled', 'strings', 'filter', 'string', 'stop', 'extract', 'html', 'tags', 'elements', 'strip', 'nonalphanumeric', 'numbers', 'lists', 'extracted', 'defined', 'list', 'creating', 'incoherent', 'clusters', 'unwanted_wordstxt', 'shorter', 'four', 'split', 'tokens', 'comprised', 'described', 'append', 'bigrams', 'trigrams', 'token', 'dictionary', 'bagofword', 'required', 'good', 'deal', 'manual', 'work', 'ensure', 'understandable', 'consisted', 'lot', 'trial', 'using', 'steps', 'general', 'gensimmodelsldamodelldamodel', 'class', 'models', 'visually', 'inspect', 'meaningful', 'visualize', 'pyldavis', 'assess', 'criteria', 'satisfactory', 'tweak', 'construction', 'deemed', 'gensimmodelswrappersldamallet', 'library', 'varied', 'number', 'new', 'assessed', 'coherence', 'varying', 'inspected', 'output', 'high', 'looking', 'made', 'intuitive', 'sense', 'appeared', 'distinct', 'knowledge', 'separate', 'domains', 'chose', 'according', 'created', 'inference', 'method', 'infer', 'fetch', 'eventually', 'pushed', 'user', 'help', 'potentially', 'refine', 'emailextractionpy', 'certain', 'edge', 'cases', 'noticed', 'web', 'format', 'traditional', 'formatting', 'added', 'matches', 'order', 'match', 'ex', 'rohinibuffalodotedu', 'server', 'serverpy', 'front', 'indexjs', 'information', 'table', 'pops', 'appears', 'selected', 'contain', 'regarding', 'research', 'buttons', 'close', 'open', 'preview', 'underneath', 'learn', 'leads', 'page', 'talking', 'detail', 'comes', 'prepopulated', 'subject', 'body', 'talks', 'would', 'like', 'connect', 'ss', 'ii', 'iii', 'iv', 'system', 'team', 'zms', 'zruppillinoisedu', 'msillinoisedu', 'srillinoisedu', 'introduction', 'functional', 'overview', 'implementation', 'details', 'inputs', 'component', 'design', 'workflow', 'usage', 'setup', 'guide', 'mac', 'repo', 'environment', 'windows', 'backend', 'example', 'case', 'basic', 'faculties', 'find', 'interests', 'working', 'similar', 'initial', 'results', 'connecting', 'contributions', 'experts', 'areas', 'university', 'websites', 'crawled', 'goal', 'ways', 'including', 'automating', 'adding', 'finding', 'give', 'visualizations', 'refinement', 'options', 'enables', 'functionalities', 'automatic', 'webpages', 'nonbio', 'generate', 'improves', 'generation', 'vast', 'collection', 'structure', 'unstructured', 'website', 'enhanced', 'succinct', 'visualization', 'structured', 'provides', 'shortcuts', 'filters', 'connection', 'together', 'features', 'utility', 'input', 'series', 'operations', 'classify', 'homepages', 'classified_dir_urlscor', 'classified_faculty_urlscor', 'eg', 'txt', 'whole', 'flow', 'generating', 'mixture', 'sequence', 'entry', 'point', 'complete', 'figure', 'fig', 'shows', 'starting', 'till', 'completion', 'control', 'interactions', 'lets', 'explain', 'modules', 'mixes', 'partitions', 'shown', 'heres', 'explanation', 'autoscraper', 'launched', 'invokes', 'datahandler', 'removes', 'train_urlscor', 'test_urlscor', 'prepares', 'similarly', 'look', 'projects', 'combine', 'train_bio_urlscor', 'test_bio_urlscor', 'end', 'ie', 'finally', 'lda_corpus', 'pulls', 'distribution', 'mined', 'otherwise', 'building', 'optimal', 'extracting', 'included', 'emails', 'updated', 'extractor', 'extractemailpy', 'box', 'showing', 'clickable', 'template', 'onclick', 'icon', 'endpoints', 'clicking', 'add', 'current', 'include', 'modified', 'tested', 'instructions', 'platforms', 'run', 'command', 'terminal', 'clone', 'github', 'repository', 'git', 'httpsgithubcomsairangacourseprojectgit', 'listing', 'filesfolders', 'relevant', 'courseproject', '__________', 'dvmodel', 'dvbiomodel', 'compiled_bios', 'model_files', 'static', 'please', 'anaconda', 'make', 'many', 'common', 'packages', 'available', 'quick', 'start', 'may', 'install', 'depending', 'gunicorn', 'flask', 'metapy', 'requests', 'pytoml', 'nltk', 'bs', 'lxml', 'numpy', 'sklearn', 'supported', 'want', 'subsystem', 'linux', 'follow', 'performed', 'folder', 'needs', 'go', 'switch', 'exists', 'regenerated', 'subsequent', 'trainretrain', 'retrained', 'documented', 'expertsearchdataexpertsearchldatopicmodelingipynb', 'something', 'necessarily', 'relying', 'perplexity', 'scores', 'alone', 'often', 'dont', 'human', 'constructed', 'allows', 'load', 'inferences', 'built', 'serverapp', 'b', 'launch', 'browser', 'type', 'localhost', 'assume', 'wed', 'enter', 'ranked', 'also', 'provide', 'bring', 'maybe', 'interested', 'learning', 'quickly', 'simply', 'automatically', 'modify', 'without', 'show', 'another', 'could', 'click', 'send', 'loss', 'name', 'reference', 'area', 'expert', 'away', 'subitems', 'contributor', 'datasets', 'regular', 'expressions', 'atypical', 'forms', 'person', 'place', 'dot', 'com', 'non', 'c', 'source', 'documentation', 'expertsearchpdf', 'tutorial', 'presentation', 'video', 'expertsearchmp', 'view', 'demo', 'proposal', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'sr', 'ms', 'zrupp', 'chosen', 'subtopics', 'briefly', 'algorithms', 'techniques', 'scraped', 'demonstrate', 'works', 'expected', 'actually', 'better', 'functionality', 'users', 'able', 'queries', 'selecting', 'impact', 'ndcgk', 'addresses', 'granular', 'listed', 'individual', 'communicate', 'utilize', 'fine', 'systems', 'state', 'clearly', 'programming', 'language', 'javascript', 'justify', 'workload', 'least', 'n', 'hours', 'students', 'main', 'estimated', 'cost', 'crawler', 'hrs', 'excerpt', 'clicks', 'dear', 'pleasure', 'gone', 'articles', 'id', 'discussing', 'ideas', 'hope', 'hear', 'soon', 'z', 'identification', 'structuring', 'methods', 'proposed', 'contd', 'jupyter', 'notebook', 'check', 'accesses', 'expertsearchextraction', 'extract_emailpy', 'formats', 'cover', 'eugene', 'agichten', 'emory', 'edu', 'rohini', 'buffalo', 'thank']
https://github.com/sajidws/CourseProject	"1. executive summary wasique ahmad and sajid shaikh formed the data miners team. we chose the project to enhance the educational web system as we saw a lot of potential in it for uiuc students. we observed the opportunity to make several changes to make the application more useful, along with adding material from more courses thus expanding the scope and reach of the application. 2. functionality completed the data miners team managed to complete the following enhancements to the educational web system. the source code is located at: https://github.com/sajidws/courseproject (branch: master) a) trim the entries in the 'lectures' dropdown so that the list is more usable and easier to scan quickly o each entry used to start with something like '02 week 1 02 week 1 lesson 01 lesson 1...'. removed the redundant parts and made it more intuitive b) make the slide material from another course (cs 425: distributed systems) available to the users so that users can expand their learning to other courses o as part of this story, added 'cs 425' in the 'courses' dropdown list c) improve presentation of information the following screens to make the application more user- friendly: o add week number, lecture number and topic to the current slide so that the user knows which week and lecture covers the current slide. o add week number and lecture number to the list of slides shown in the 'related slides' section so that the user knows which week and lecture covers each slide listed. o add miscellaneous ux improvements such as capitalize 'cs' (for computer science) wherever it appeared. d) add a home / landing page to the application that lists the courses available to that users as soon as they 'arrive' in the application. e) allow users to go back to the home / landing page from any pages so that users can navigate easily between different parts of the application. sajid shaikh completed the user stories a, b and c. wasique ahmad completed the user stories d and e. detailed instructions on how to deploy and run the application have been updated in the project 'readme.md', including updates for windows 10 platform. 3. breakdown of the tasks here's a breakdown of the amount of effort spent by the team in various activities of the project, including comparison with the original estimates. # task original estimate (hrs) actual effort (hrs) status 1 writing proposal, user stories 2 2 done 2 set up and build the code 6 20 done 3 understanding the existing system and design for the scope of our project 6 14 done design of enhancements 8 8 done development, code reviews and unit-testing 20 30 done system / qa verification 6 5 done documentation 8 10 done demonstration preparation 4 5 done communication 5 done total 60 99 4. notes and experiences as can be seen from above, we spent far more time than we had estimated. one of the primary reasons for this turned out that the project had previously been tested only on linux and macos, but not on windows and the data miners team was more familiar on windows platform. we decided to take up the challenge anyway to set up and deliver the project on windows 10. expectedly, we faced many hurdles as we were in uncharted territory, but with help from each other, course staff and a bit of luck, managed to complete the deployment of the project on windows 10. we have updated the project readme with detailed instructions (including various package versions, paths, etc.) so that future students have an easier time. even after deploying though, some of the functionality such as explanations and search didn't work as expected. we started to fix those, ran into more issues (e.g. after fixing the url for explanations, the current ranking function hung). rather than spend more time in what could have been a long and unknown effort, we decided to focus on implementing the functionality we had planned. there were some other missteps along the way (e.g. tried to change the directory names to improve the lecture name entries in the dropdown, but that broke other functionality), but each time we learned something new and continued forward. it's not unusual in any software project to have new discoveries during execution and our experience was no different. the above experience resulted in spending much more time than we had planned but it turned out to be a learning experience and we're glad if our efforts could simplify the life of future students. 5. user story details in this section, we will dive into the details of each user story implemented, including the technical portions as well as ui screen shots of the application. a majority of the changes made to the code were in the html templates (*.html) and python files, especially model.py and app.py. trim the entries in the 'lectures' dropdown so that the list is more usable and easier to scan quickly initially, we tried to simplify the directory names as that allowed us more control over the names that could be presented to the user. we then realized there are many other dependencies on the names of the directories (e.g. related slides weren't appearing). ultimately, we changed the manner in which 'lec_names' are displayed in the ui by changing 'slide.html'. the highlight of the change was: line 7: <li><a href=""{{base_url}}/slide/{{course_name}}/{{i}}"">{{' '.join(lec_names[i].split('_')[3].split('- ')).title()}}</a></li> trimmed entries, easy to read and see fully! make the slide material from another course (cs 425: distributed systems) available to the users we initially thought just adding a folder such as 'cs-425' in 'static/slides' directory will do the job. however, that didn't work and we had to make changes in 'model.py' to remove hard-coded checks of 'cs-410'. ultimately, this turned out to be a time-consuming activity. the pdf files from the cs 425 distributed systems lectures had to be split into individual pages, each named in a certain format. we have packaged a new archive 'cs-425.zip' and included its location and instructions to deploy in the readme file. cs425.zip is available here: https://drive.google.com/file/d/1iwxuyf1fghlu1vzn5xfxfycjxuv- siri/view?usp=sharing cs 425 (distributed systems) is now available via educational web! the entire cs 425 course material! add week number, lecture number and title to the current slide so that the user knows which week, lecture and topic covers the current slide while this change was relatively straightforward as we had to extract the week and lesson number by making changes in 'slide.html', it adds quite some value to the user to see which topic the current slide is covered under and to quickly determine the week and lecture number. week, lecture # and topic makes it easy to see where you are! add week number and lecture number to the list of slides shown in the 'related slides' section so that the user knows which week and lecture covers each slide listed the changes made here were similar by extracting the week and lecture number in 'slide.html' add miscellaneous ux improvements such as capitalized 'cs' (computer science) a relatively easy change by changing 'title()' to 'upper()' in multiple places where 'cs' is going to be displayed. easy to see week and lecture number in 'related slides' 'cs' appears better than 'cs' everywhere adding landing page this is will be the landing page. list of the courses offered by educationalweb application will be shown here. the file 'landingpage.html' was added in the 'templates' folder to implement the above functionality. this page extends 'base.html'. in order to load this page when the user visits the base url ('/'), 'app.py' was modified to render 'landingpage.html' instead of 'base.html'. this will be shown as a 1st slide after selecting course 'cs 410' from the above page. clicking on 'educational web' in the top bar from any page will bring users back to the landing page. in order to implement the above change, 'base.html' was modified to change the link for 'educational web' to '/' instead of '#'. team name: data miners team composition what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. wasique ahmad: wasique2 sajid shaikh: sajidas2 (captain) system and topics what system have you chosen? which subtopic(s) under the system? educational web system: improving the usability and reach of the existing system. - trim the entries in the 'lectures' dropdown. each line starts with something like '02 week 1 02 week 1 lesson 01 lesson 1...'. remove the redundant parts - add material from a couple of other courses such as cs 425: distributed systems, cs 445 computational photography, etc. with all current functionality applicable (related slides, download, explanation, ...). adding crawling or adding more courses can be considered after improving the performance of the system. - add a home / landing page that lists the courses included in this system. add a link to the home page so users can easily navigate back to the home page. - improve presentation on a few screens - add week / lecture number to 'related slides' - add week / lecture number to 'search results' - add week / lecture number to current slide shown - bulk download - download entire lecture slide and video - download entire week slides and video - download entire course slides and video (multiple files separated by each week) - explanations: add more context and improve the presentation datasets and algorithms briefly describe the datasets, algorithms or techniques you plan to use datasets: training slides for courses such as distributed systems, computational photography, ... algorithms and techniques: we will explore, understand and build on the existing algorithms and techniques that are currently employed in the system. what is the function of the tool the educational web system is a tool to help students learn from course slides. it has two main functionalities currently: 1) retrieve and 2) recommend relevant slides for each slide. who will benefit from such improvement students, educators, researchers etc. @ university of illinois demonstration if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? demonstrate live using the http://timan102.cs.illinois.edu/ system code interaction with system how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly we will add code and data sets to the existing system to enhance the functionality and usability described above. programming language which programming language do you plan to use? python work breakdown structure please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. # hours task 1 2 proposal, writing user stories 2 6 set up and build the code 3 6 understanding the existing system and design 4 8 design of enhancements 5 20 development, code reviews and unit-testing 6 6 testing: verification, load testing 7 8 documentation 8 4 demonstration preparations 9 4 presentation tota l 64 interim progress report as of 11/29/2020 the data miners team has completed writing the user stories and deployed the code in their respective local systems. based on the current understanding, design of the enhancements has started, along with some code changes and unit-testing. because the team is using a windows 10 environment (and the current application has been tested on linux and macos so far), we encountered unforeseen issues and the amount of time spent is expected to be more than estimated for most tasks. the table below illustrates all the planned tasks, the progress made thus far and the estimated remaining work (note: wip stands for work in progress). all the user stories are listed below the table on the following pages. # task original estimate (hrs) time so far (hrs) remaining estimate (hrs) progress status 1 proposal, writing user stories 2 2 0 done 2 set up and build the code 6 15 0 done 3 understanding the existing system and design 6 5 15 wip 4 design of enhancements 8 1 10 wip 5 development, code reviews and unit-testing 20 1 30 wip 6 testing: verification, load testing 6 10 not started 7 documentation 8 1 10 wip 8 demonstration preparations 4 5 not started 9 presentation 4 5 not started total 64 25 85 the audience of the following user stories is mcs students at uiuc. user stories - trim the entries in the 'lectures' dropdown so that the list is more usable and easier to scan quickly. - add week number and lecture number to the current slide so that the user knows which week and lecture covers the current slide. - add week number and lecture number to the list of slides shown in the 'related slides' section so that the user knows which week and lecture covers each slide listed. - add week number and lecture number to the list of slides shown in the 'search results' section so that the user knows which week and lecture covers each slide listed. - allow users to download all the slides of the current lecture (instead of only the current slide), so that they do not have to download each slide individually for the lecture. build this incrementally as follows: - download each page of the lecture as separate pdf files. - allow users to specify a different lecture number (defaulting to the current lecture) so that they have more flexibility of which lecture's materials to download. - allow users to specify whether all the pages of the lecture should be downloaded as a single pdf file. - allow users to download all the slides of the current week (instead of only the current slide), so that they do not have to download each slide individually for the week. build this incrementally as follows: - download each page of the week as separate pdf files. - allow users to specify a different week number (defaulting to the current week) so that they have more flexibility of which week's materials to download. - allow users to specify whether all the pages of the week should be downloaded as a single pdf file. - allow users to download the video of the current lecture - allow users to specify a different lecture for downloading a video, so that they have more flexibility of which lecture's video file to download. - allow users to download the video of the current week as separate video files. - allow users to specify a different week for downloading a video, so that they have more flexibility of which week's video files to download. - do not allow users to download the video files of the entire course as it may hog the bandwidth unnecessarily and this functionality can be achieved by downloading each week's video files separately if really required. - improve the explanations by adding more context (such as week and lecture numbers) and improve the presentation (such as paragraphs) to so that the content is more usable and easier to understand for the audience. - make the slides from another course (cs 425: distributed systems) available to the users (functionally at par with cs 410) so that users can expand their learning to other courses - as part of this story, add 'cs 425' in the 'courses' dropdown list - add a home / landing page to the application that lists the courses available so that users are aware of which courses are made available with this functionality. - add a link back to the home / landing page from all pages so that users can navigate easily between different parts of the application. challenges during setup i encountered a few challenges during setup. - in case of gulp, i had to keep path in a certain order. c:\users\<name>\appdata\roaming\npm\node_modules\ c:\users\<name>\appdata\roaming\npm - in case of numpy, numpy 1.19.4 was not compatible . so i uninstalled 1.19.4 and installed numpy 1.19.3. courseproject the project documentation is in the file 'cs410-project-documentation-data-miners.pdf'. the demo recording links for media space is in the text file 'demo-recording-link-dataminers-educational-web-enhancements.txt' the other two documents are from previous milestones: project proposal and progress report the source code for this project is in the 'master' branch."	['executive', 'summary', 'wasique', 'ahmad', 'sajid', 'shaikh', 'formed', 'data', 'miners', 'team', 'chose', 'project', 'enhance', 'educational', 'web', 'system', 'saw', 'lot', 'potential', 'uiuc', 'students', 'observed', 'opportunity', 'make', 'several', 'changes', 'application', 'useful', 'along', 'adding', 'material', 'courses', 'thus', 'expanding', 'scope', 'reach', 'functionality', 'completed', 'managed', 'complete', 'following', 'enhancements', 'source', 'code', 'located', 'httpsgithubcomsajidwscourseproject', 'branch', 'master', 'trim', 'entries', 'lectures', 'dropdown', 'list', 'usable', 'easier', 'scan', 'quickly', 'entry', 'used', 'start', 'something', 'like', 'week', 'lesson', 'removed', 'redundant', 'parts', 'made', 'intuitive', 'b', 'slide', 'another', 'course', 'cs', 'distributed', 'systems', 'available', 'users', 'expand', 'learning', 'part', 'story', 'added', 'c', 'improve', 'presentation', 'information', 'screens', 'user', 'friendly', 'add', 'number', 'lecture', 'topic', 'current', 'knows', 'covers', 'slides', 'shown', 'related', 'section', 'listed', 'miscellaneous', 'ux', 'improvements', 'capitalize', 'computer', 'science', 'wherever', 'appeared', 'home', 'landing', 'page', 'lists', 'soon', 'arrive', 'e', 'allow', 'go', 'back', 'pages', 'navigate', 'easily', 'different', 'stories', 'detailed', 'instructions', 'deploy', 'run', 'updated', 'readmemd', 'including', 'updates', 'windows', 'platform', 'breakdown', 'tasks', 'heres', 'amount', 'effort', 'spent', 'various', 'activities', 'comparison', 'original', 'estimates', 'task', 'estimate', 'hrs', 'actual', 'status', 'writing', 'proposal', 'done', 'set', 'build', 'understanding', 'existing', 'design', 'development', 'reviews', 'unittesting', 'qa', 'verification', 'documentation', 'demonstration', 'preparation', 'communication', 'total', 'notes', 'experiences', 'seen', 'far', 'time', 'estimated', 'one', 'primary', 'reasons', 'turned', 'previously', 'tested', 'linux', 'macos', 'familiar', 'decided', 'take', 'challenge', 'anyway', 'deliver', 'expectedly', 'faced', 'many', 'hurdles', 'uncharted', 'territory', 'help', 'staff', 'bit', 'luck', 'deployment', 'readme', 'package', 'versions', 'paths', 'etc', 'future', 'even', 'deploying', 'though', 'explanations', 'search', 'didnt', 'work', 'expected', 'started', 'fix', 'ran', 'issues', 'eg', 'fixing', 'url', 'ranking', 'function', 'hung', 'rather', 'spend', 'could', 'long', 'unknown', 'focus', 'implementing', 'planned', 'missteps', 'way', 'tried', 'change', 'directory', 'names', 'name', 'broke', 'learned', 'new', 'continued', 'forward', 'unusual', 'software', 'discoveries', 'execution', 'experience', 'resulted', 'spending', 'much', 'glad', 'efforts', 'simplify', 'life', 'details', 'dive', 'implemented', 'technical', 'portions', 'well', 'ui', 'screen', 'shots', 'majority', 'html', 'templates', 'python', 'files', 'especially', 'modelpy', 'apppy', 'initially', 'allowed', 'us', 'control', 'presented', 'realized', 'dependencies', 'directories', 'werent', 'appearing', 'ultimately', 'changed', 'manner', 'lec_names', 'displayed', 'changing', 'slidehtml', 'highlight', 'line', 'lia', 'hrefbase_urlslidecourse_namei', 'joinlec_namesisplit_split', 'titleali', 'trimmed', 'easy', 'read', 'see', 'fully', 'thought', 'folder', 'staticslides', 'job', 'however', 'remove', 'hardcoded', 'checks', 'timeconsuming', 'activity', 'pdf', 'split', 'individual', 'named', 'certain', 'format', 'packaged', 'archive', 'cszip', 'included', 'location', 'file', 'httpsdrivegooglecomfilediwxuyffghluvznxfxfycjxuv', 'siriviewuspsharing', 'via', 'entire', 'title', 'relatively', 'straightforward', 'extract', 'making', 'adds', 'quite', 'value', 'covered', 'determine', 'makes', 'similar', 'extracting', 'capitalized', 'upper', 'multiple', 'places', 'going', 'appears', 'better', 'everywhere', 'offered', 'educationalweb', 'landingpagehtml', 'implement', 'extends', 'basehtml', 'order', 'load', 'visits', 'base', 'modified', 'render', 'instead', 'st', 'selecting', 'clicking', 'top', 'bar', 'bring', 'link', 'composition', 'netids', 'members', 'captain', 'administrative', 'duties', 'sajidas', 'topics', 'chosen', 'subtopics', 'improving', 'usability', 'starts', 'couple', 'computational', 'photography', 'applicable', 'download', 'explanation', 'crawling', 'considered', 'performance', 'results', 'bulk', 'video', 'separated', 'context', 'datasets', 'algorithms', 'briefly', 'describe', 'techniques', 'plan', 'use', 'training', 'explore', 'understand', 'currently', 'employed', 'tool', 'learn', 'two', 'main', 'functionalities', 'retrieve', 'recommend', 'relevant', 'benefit', 'improvement', 'educators', 'researchers', 'university', 'illinois', 'demonstrate', 'works', 'show', 'implementation', 'actually', 'live', 'using', 'httptimancsillinoisedu', 'interaction', 'communicate', 'utilize', 'also', 'fine', 'please', 'state', 'clearly', 'sets', 'described', 'programming', 'language', 'structure', 'justify', 'workload', 'least', 'n', 'hours', 'may', 'cost', 'testing', 'preparations', 'tota', 'l', 'interim', 'progress', 'report', 'deployed', 'respective', 'local', 'based', 'environment', 'encountered', 'unforeseen', 'table', 'illustrates', 'remaining', 'note', 'wip', 'stands', 'audience', 'mcs', 'individually', 'incrementally', 'follows', 'separate', 'specify', 'defaulting', 'flexibility', 'materials', 'whether', 'downloaded', 'single', 'weeks', 'downloading', 'hog', 'bandwidth', 'unnecessarily', 'achieved', 'separately', 'really', 'required', 'numbers', 'paragraphs', 'content', 'functionally', 'par', 'aware', 'challenges', 'setup', 'case', 'gulp', 'keep', 'path', 'cusersnameappdataroamingnpmnode_modules', 'cusersnameappdataroamingnpm', 'numpy', 'compatible', 'uninstalled', 'installed', 'courseproject', 'csprojectdocumentationdataminerspdf', 'demo', 'recording', 'links', 'media', 'space', 'text', 'demorecordinglinkdataminerseducationalwebenhancementstxt', 'documents', 'previous', 'milestones']
https://github.com/samphadnis/TeamTextDragons	"progress report: text classification competition: twitter sarcasm detection group name: text dragons team members: chen yuan (cheny9), email: cheny9@illinois.edu sameer phadnis (phadnis3) - team leader, email: phadnis3@illinois.edu abhishek shinde (ashinde2), email: ashinde2@illinois.edu overview: we will be joining the text classification competition. the object of the competition is to identify sarcasm from a set of twitter responses. the given dataset is split into two: the train dataset (5000 observations) and the test dataset (1800 observations). for the training dataset, we are given the response (which is the tweet to be classified), the context (which is the conversation of the context) and the label. we will be using the training dataset to build the models and making predictions based on the test set. tasks completed: so far we have outperformed the baseline model with only a few attempts. models we have tried so far: 1. fasttext (did not outperform the baseline) 2. roberta + simple neural networks model (outperforms the baseline) tasks pending: 1. writing a documentation for our models 2. organize and submit code challenges: the challenge about computation power as indicated in the project proposal was addressed by using google colab. therefore, there are no remaining challenges. 1. our project team members are chen yuan (cheny9), sameer phadnis (phadnis3), and abhishek shinde (ashinde2). team name is ""text dragons"" and sameer phadnis is team captain. 2. we plan to join the text classification competition. 3. yes, we are prepared to learn state-of-the-art classifiers. some popular neural classifiers consist of lenet, alexnet, and googlenet. for a computer vision project, abhishek's team utilized a modified lenet convolutional neural network to classify images of sign language into the letters of the alphabet.we may also explore the below neural classifiers and deep learning frameworks for the project: feed forward neural networks: * deep average network * fasttext rnn (recurrent neural network) based models: * tree-lstm * multi-timescale lstm cnn (convolutional neural network) based models: * dynamic cnn capsule neural network: * capsnet transformers: * bert 4. we will use python as the programming language for the project project proposal: text classification competition: twitter sarcasm detection group name: text dragons team members: chen yuan (cheny9), email: cheny9@illinois.edu sameer phadnis (phadnis3) - team leader, email: phadnis3@illinois.edu abhishek shinde (ashinde2), email: ashinde2@illinois.edu overview: we will be joining the text classification competition. the object of the competition is to identify sarcasm from a set of twitter responses. the given dataset is split into two: the train dataset (5000 observations) and the test dataset (1800 observations). for the training dataset, we are given the response (which is the tweet to be classified), the context (which is the conversation of the context) and the label. we will be using the training dataset to build the models and making predictions based on the test set. objective: we will be using python as the main programming language for the project. we will try different models with state-of-the-art classifiers. our potential candidates includes: 1. lenet 2. alexnet 3. googlenet 4. resnet 5. lstm 6. fasttext abhishek's team has had previous experience on a computer vision project, which utilized a modified lenet convolutional neural network to classify images of sign language into the letters of the alphabet. chen has had previous experience building wide-resnet models to classify street view house numbers. challenges: there are several challenges that we need to address throughout our project: 1. the tweets may contain emojis and spam information that we need to deal with at the data preprocessing step. 2. the power of a cpu may not be sufficient to train deep neural network models. therefore, we will need to leverage some cloud computing resources, such as google colab. documentation for text classification project i. overview this program implements a model for detecting sarcasm in text. the training data consists of twitter feeds having context text, where the response to the context is labelled as sarcasm or not sarcasm. the objective is to define a model based on this training data that detects sarcasm in text, and use it to classify the responses in the test data as sarcasm or not sarcasm. ii. data profiling we conducted data profiling on both the training data and test data. the datasets provided are in json format. the training data contains the following columns: * label: indicates whether the response is sarcasm or not sarcasm. * response: a string which contains the tweet response to be classified. * context: a list which contains the conversation history in context of response. the order of the list is the same as the order of the dialogue (i.e. response directly replies to the last element of the list) the training dataset contains 5000 tweets in total and 2500 are labeled as sarcasm and the rest are labeled not. therefore, the training dataset is considered as a balanced dataset and no oversampling is required. we also conducted analysis on the response text length on both the training set and the testing set. the distribution shows that the training set and the testing set are similar in terms of response length distribution, and therefore, models based on the training set might be suitable for predicting the testing set. in addition to response length, we also conducted an analysis on the number of contexts. the distribution shows that for both the training set and the testing set, the majority of the responses have two corresponding contexts. based on our calculation, the average number for contexts for the training set is 3.87 and for the testing set is 3.16. during our data preprocessing step, we figured that keeping all contexts will draw a warning message which indicates that ""token indices sequence length is longer than the specified maximum sequence length for this model"". therefore, we decided to use the last three available contexts. percentile characters(train) characters(test) 0.1 71.0 59.0 0.2 85.8 76.0 0.3 97.0 92.0 0.4 108.0 108.0 0.5 117.0 127.0 0.6 126.0 149.4 0.7 145.0 176.0 0.8 190.0 214.0 0.9 254.0 265.0 iii. data cleaning the following approaches were tried to clean up the data to see if it improved computation efficiency and\or classification accuracy: 1. convert all text to lowercase 2. remove all punctuations (except apostrophe) 3. remove stop words 4. stemming of words a separate script clean.py was written to process the input data and write the cleaned up data in the jsonl format. however, we found that the cleaning of the data actually resulted in a loss of accuracy as compared to the original data. this could be because the cleanup process affected the sarcasm detection learning model. therefore the decision to clean the data must be carefully weighed to see if it adversely impacts the learning model, and experimentation with\without cleaning is essential. iv. model architecture there are multiple ways to build contextual sentiment analysis models. our final decision is to use the simple method: combine contexts with the response to form a single string as input to the model(amardeep kumar, 2020). throughout the process, we have considered the following models: 1. fasttext 2. roberta + 1-hidden layer neural network + relu 3. roberta + 1-hidden layer neural network + softmax 4. xlmroberta + 1-hidden layer neural network + relu 5. albert + 1-hidden layer neural network + relu we also tried different learning rates for these models. the result shows that model #2 combined with a learning rate of 1e-5 gives us the best performance on the testing set with a f1 score of 0.787. the model architecture is as below: v. implementation the program uses google colab + jupyter notebook to take advantage of the google gpu for accelerated data processing. the training and test data is stored on google drive. the pytorch library is used, which enables the usage of gpu as well as the use of various implementations of state-of-the-art nlp transformer libraries i.e. pre-trained language models (plms).transformers allow for parallelization, which makes it possible to efficiently train very big models on large amounts of data on gpu clusters.transformer-based plms use much deeper network architectures, and are pre-trained on much larger amounts of text corpora to learn contextual text representations by predicting words based on their context. one of the most popular transformers is bert, developed by google. roberta (developed by facebook) is an extension that is more robust than bert, and is trained using much more training data and dynamic masking. to investigate a lighter model, we researched and tested out albert, which is essentially a lite-bert. the benefits for training are evident; it provides two parameter reduction techniques to improve memory usage and bert speed. according to hugging face, these techniques are forming two smaller matrices from an embedding matrix and providing repeated layers split on groups. the experience with this consisted of beating the baseline, but not being one of our best models. the roberta pytorch transformer library is selected in our implementation as our top model. the data is loaded using a batch size of 16. the model is trained on the training data set using epoch count of 12. the resulting model is serialized and saved in the pytorch model format. the test data is then evaluated against the model to classify the tweets as sarcasm\not sarcasm (stored in the generated answers.txt file). vi. instructions to run code 1. in colab notebooks under google drive, create a directory called textclassification . 2. within the textclassification  directory, create another directory called data. 3. include the data files (test.jsonl and train.jsonl) in this data  directory. 4. from the github repository (https://github.com/samphadnis/teamtextdragons), open roberta_no_pretrain.ipynb from the code  directory into colab notebooks. 5. since the saved model is too large to be uploaded to github, we created a link to google drive and shared it on github readme page. download the model and save it under the textclassification  directory. 6. if you want to run the whole model, including the training portion, in the navbar, navigate to ""runtime"" and select ""run all"". the pipeline should run, and the results answer.txt should be generated under colab notebooks. 7. if you only want to generate the results with the saved model, you may skip the model training portion of the code. vii. conclusion the program is able to beat the baseline. the state-of-the-art pre-trained language models such as roberta are powerful tools for text classification. vii. team contributions sameer phadnis (phadnis3@illinois.edu): team leader - worked on and tested variations of data cleaning processes and documentation chen yuan (cheny9@illinois.edu) - led the development work by setting up project infrastructure, implementing data profiling, classification pipeline, presentation and documentation abhishek shinde (ashinde2@illinois.edu) - worked on training and testing various models, and improving the classification pipeline and documentation viii. references - kozlov, alexander. ""fine-tuning bert and roberta for high accuracy text classification in pytorch."" medium , towards data science, 7 sept. 2020, towardsdatascience.com/fine-tuning-bert-and-roberta-for-high-accuracy-text-classificatio n-in-pytorch-c9e63cf64646. - the code repository we relied on can be found here: https://github.com/aramakus/ml-and-data-analysis/blob/master/roberta%20fo r%20text%20classification.ipynb - ""transformers."" transformers - transformers 4.0.0 documentation , huggingface.co/transformers/index.html. - yinhan liu, myle ott, naman goyal, jingfei du, mandar joshi, danqi chen, omer levy, mike lewis, luke zettlemoyer, veselin stoyanov: ""roberta: a robustly optimized bert pretraining approach"", 2019; http://arxiv.org/abs/1907.11692 arxiv:1907.11692 - amardeep kumar, vivek anand: ""transformers on sarcasm detection with context"", 2020; https://www.aclweb.org/anthology/2020.figlang-1.13.pdf contextual twitter sarcasm detection cs 410: text information systems final project this repository contains the project code, data, report and video presentation for text classification competition. team members sameer phadnis: phadnis3@illinois.edu abhishek shinde: ashinde2@illinois.edu chen yuan:cheny9@illinois.edu code environment we are running our code on the google colab platform. you will need: - python 3.x - transformers - torch - pandas - sklearn all packages are pre-installed except transformers. model due to the limit of file size on github, we are not able to upload our final saved model to the github repository. therefore, we created a google drive link to share our final model: https://drive.google.com/file/d/1bfc4hk1n7pnevfdevwesm3tehek4o44w/view?usp=sharing setup in colab notebooks under google drive, create a directory called textclassification. within the textclassification directory, create another directory called data. include the data files (test.jsonl and train.jsonl) in this data directory. from the github repository (https://github.com/samphadnis/teamtextdragons), open roberta_no_pretrain.ipynb from the code directory into colab notebooks. since the saved model is too large to be uploaded to github, we created a link to google drive and shared it on github readme page. download the model and save it under the textclassification directory. if you want to run the whole model, including the training portion, in the navbar, navigate to ""runtime"" and select ""run all"". the pipeline should run, and the results answer.txt should be generated under colab notebooks. if you only want to generate the results with the saved model, you may skip the model training portion of the code. the subfolders should be organized as below: . +-- ... +-- colab notebooks | +-- textclassification | | +-- data | | | +--train.jsonl | | | +--test.jsonl | | +-- roberta_no_pretrain.ipynb | | +-- model_roberta_relu_nopretrain.pkl | +-- +-- presentation we created a video presentation to walk through the code and show how to reproduce the results. the video can be found: https://mediaspace.illinois.edu/media/1_79uj7ghe. file description reports: cs410_ project proposal_textdragons.pdf - project proposal cs410 project progress report.pdf - project progress report code: code/profiling.ipynb - pre-modeling analysis code/roberta_no_pretrain.ipynb - our best model, which uses roberta + relu code/roberta_no_pretrain_softmax.ipynb - roberta + softmax code/xlmroberta_no_pretrain.ipynb - xlmroberta + relu code/albert.ipynb - albert + relu code/fasttext.ipynb - fast text model code/clean.py - data preprocessing script data: data/train.jsonl - labeled training data data/test.jsonl - unlabeled testing data reference kozlov, alexander. ""fine-tuning bert and roberta for high accuracy text classification in pytorch."" medium, towards data science, 7 sept. 2020, towardsdatascience.com/fine-tuning-bert-and-roberta-for-high-accuracy-text-classification-in-pytorch-c9e63cf64646. - the code repository we relied on can be found here: https://github.com/aramakus/ml-and-data-analysis/blob/master/roberta%20for%20text%20classification.ipynb ""transformers."" transformers - transformers 4.0.0 documentation, huggingface.co/transformers/index.html. yinhan liu, myle ott, naman goyal, jingfei du, mandar joshi, danqi chen, omer levy, mike lewis, luke zettlemoyer, veselin stoyanov: ""roberta: a robustly optimized bert pretraining approach"", 2019; http://arxiv.org/abs/1907.11692 arxiv:1907.11692 amardeep kumar, vivek anand: ""transformers on sarcasm detection with context"", 2020; https://www.aclweb.org/anthology/2020.figlang-1.13.pdf"	['progress', 'report', 'text', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'group', 'name', 'dragons', 'team', 'members', 'chen', 'yuan', 'cheny', 'email', 'chenyillinoisedu', 'sameer', 'phadnis', 'leader', 'phadnisillinoisedu', 'abhishek', 'shinde', 'ashinde', 'ashindeillinoisedu', 'overview', 'joining', 'object', 'identify', 'set', 'responses', 'given', 'dataset', 'split', 'two', 'train', 'observations', 'test', 'training', 'response', 'tweet', 'classified', 'context', 'conversation', 'label', 'using', 'build', 'models', 'making', 'predictions', 'based', 'tasks', 'completed', 'far', 'outperformed', 'baseline', 'model', 'attempts', 'tried', 'fasttext', 'outperform', 'roberta', 'simple', 'neural', 'networks', 'outperforms', 'pending', 'writing', 'documentation', 'organize', 'submit', 'code', 'challenges', 'challenge', 'computation', 'power', 'indicated', 'project', 'proposal', 'addressed', 'google', 'colab', 'therefore', 'remaining', 'captain', 'plan', 'join', 'yes', 'prepared', 'learn', 'stateoftheart', 'classifiers', 'popular', 'consist', 'lenet', 'alexnet', 'googlenet', 'computer', 'vision', 'abhisheks', 'utilized', 'modified', 'convolutional', 'network', 'classify', 'images', 'sign', 'language', 'letters', 'alphabetwe', 'may', 'also', 'explore', 'deep', 'learning', 'frameworks', 'feed', 'forward', 'average', 'rnn', 'recurrent', 'treelstm', 'multitimescale', 'lstm', 'cnn', 'dynamic', 'capsule', 'capsnet', 'transformers', 'bert', 'use', 'python', 'programming', 'objective', 'main', 'try', 'different', 'potential', 'candidates', 'includes', 'resnet', 'previous', 'experience', 'alphabet', 'building', 'wideresnet', 'street', 'view', 'house', 'numbers', 'several', 'need', 'address', 'throughout', 'tweets', 'contain', 'emojis', 'spam', 'information', 'deal', 'data', 'preprocessing', 'step', 'cpu', 'sufficient', 'leverage', 'cloud', 'computing', 'resources', 'program', 'implements', 'detecting', 'consists', 'feeds', 'labelled', 'define', 'detects', 'ii', 'profiling', 'conducted', 'datasets', 'provided', 'json', 'format', 'contains', 'following', 'columns', 'indicates', 'whether', 'string', 'list', 'history', 'order', 'dialogue', 'ie', 'directly', 'replies', 'last', 'element', 'total', 'labeled', 'rest', 'considered', 'balanced', 'oversampling', 'required', 'analysis', 'length', 'testing', 'distribution', 'shows', 'similar', 'terms', 'might', 'suitable', 'predicting', 'addition', 'number', 'contexts', 'majority', 'corresponding', 'calculation', 'figured', 'keeping', 'draw', 'warning', 'message', 'token', 'indices', 'sequence', 'longer', 'specified', 'maximum', 'decided', 'three', 'available', 'percentile', 'characterstrain', 'characterstest', 'iii', 'cleaning', 'approaches', 'clean', 'see', 'improved', 'efficiency', 'andor', 'accuracy', 'convert', 'lowercase', 'remove', 'punctuations', 'except', 'apostrophe', 'stop', 'words', 'stemming', 'separate', 'script', 'cleanpy', 'written', 'process', 'input', 'write', 'cleaned', 'jsonl', 'however', 'found', 'actually', 'resulted', 'loss', 'compared', 'original', 'could', 'cleanup', 'affected', 'decision', 'must', 'carefully', 'weighed', 'adversely', 'impacts', 'experimentation', 'withwithout', 'essential', 'iv', 'architecture', 'multiple', 'ways', 'contextual', 'sentiment', 'final', 'method', 'combine', 'form', 'single', 'modelamardeep', 'kumar', 'hidden', 'layer', 'relu', 'softmax', 'xlmroberta', 'albert', 'rates', 'result', 'combined', 'rate', 'e', 'gives', 'us', 'best', 'performance', 'f', 'score', 'v', 'implementation', 'uses', 'jupyter', 'notebook', 'take', 'advantage', 'gpu', 'accelerated', 'processing', 'stored', 'drive', 'pytorch', 'library', 'used', 'enables', 'usage', 'well', 'various', 'implementations', 'nlp', 'transformer', 'libraries', 'pretrained', 'plmstransformers', 'allow', 'parallelization', 'makes', 'possible', 'efficiently', 'big', 'large', 'amounts', 'clusterstransformerbased', 'plms', 'much', 'deeper', 'architectures', 'larger', 'corpora', 'representations', 'one', 'developed', 'facebook', 'extension', 'robust', 'trained', 'masking', 'investigate', 'lighter', 'researched', 'tested', 'essentially', 'litebert', 'benefits', 'evident', 'provides', 'parameter', 'reduction', 'techniques', 'improve', 'memory', 'speed', 'according', 'hugging', 'face', 'forming', 'smaller', 'matrices', 'embedding', 'matrix', 'providing', 'repeated', 'layers', 'groups', 'consisted', 'beating', 'selected', 'top', 'loaded', 'batch', 'size', 'epoch', 'count', 'resulting', 'serialized', 'saved', 'evaluated', 'sarcasmnot', 'generated', 'answerstxt', 'file', 'vi', 'instructions', 'run', 'notebooks', 'create', 'directory', 'called', 'textclassification', 'within', 'another', 'include', 'files', 'testjsonl', 'trainjsonl', 'github', 'repository', 'httpsgithubcomsamphadnisteamtextdragons', 'open', 'roberta_no_pretrainipynb', 'since', 'uploaded', 'created', 'link', 'shared', 'readme', 'page', 'download', 'save', 'want', 'whole', 'including', 'portion', 'navbar', 'navigate', 'runtime', 'select', 'pipeline', 'results', 'answertxt', 'generate', 'skip', 'vii', 'conclusion', 'able', 'beat', 'powerful', 'tools', 'contributions', 'worked', 'variations', 'processes', 'led', 'development', 'work', 'setting', 'infrastructure', 'implementing', 'presentation', 'improving', 'viii', 'references', 'kozlov', 'alexander', 'finetuning', 'high', 'medium', 'towards', 'science', 'sept', 'towardsdatasciencecomfinetuningbertandrobertaforhighaccuracytextclassificatio', 'ninpytorchcecf', 'relied', 'httpsgithubcomaramakusmlanddataanalysisblobmasterrobertafo', 'rtextclassificationipynb', 'huggingfacecotransformersindexhtml', 'yinhan', 'liu', 'myle', 'ott', 'naman', 'goyal', 'jingfei', 'du', 'mandar', 'joshi', 'danqi', 'omer', 'levy', 'mike', 'lewis', 'luke', 'zettlemoyer', 'veselin', 'stoyanov', 'robustly', 'optimized', 'pretraining', 'approach', 'httparxivorgabs', 'arxiv', 'amardeep', 'vivek', 'anand', 'httpswwwaclweborganthologyfiglangpdf', 'cs', 'systems', 'video', 'yuanchenyillinoisedu', 'environment', 'running', 'platform', 'x', 'torch', 'pandas', 'sklearn', 'packages', 'preinstalled', 'due', 'limit', 'upload', 'share', 'httpsdrivegooglecomfiledbfchknpnevfdevwesmtehekowviewuspsharing', 'setup', 'subfolders', 'organized', 'model_roberta_relu_nopretrainpkl', 'walk', 'show', 'reproduce', 'httpsmediaspaceillinoisedumedia_ujghe', 'description', 'reports', 'cs_', 'proposal_textdragonspdf', 'reportpdf', 'codeprofilingipynb', 'premodeling', 'coderoberta_no_pretrainipynb', 'coderoberta_no_pretrain_softmaxipynb', 'codexlmroberta_no_pretrainipynb', 'codealbertipynb', 'codefasttextipynb', 'fast', 'codecleanpy', 'datatrainjsonl', 'datatestjsonl', 'unlabeled', 'reference', 'towardsdatasciencecomfinetuningbertandrobertaforhighaccuracytextclassificationinpytorchcecf', 'httpsgithubcomaramakusmlanddataanalysisblobmasterrobertafortextclassificationipynb']
https://github.com/samvalenp/CourseProject	project documentation | classification competition this is an individual project. samuel valenzuela (samuelv4@illinois.edu) i followed two different approaches for the classification competition. one was using bert as an embedding layer and the other was to train bert and use it as a classifier. the second attempt was the one that performed better than the baseline and the one i document more in detail in the notebook with a clear structure. i also provide the notebook for the first approach but is not very well documented or easy to follow as i tried many different things and the code is a bit of a mess. to run the models i recommend to use google colab. i always used google colab for this project as it runs much faster than on my laptop. it also avoids having to install libraries or dealing with python environments. first approach: sam_disbert.ipynb second approach: sarcasm_transformers.ipynb bert as embedding layer (sam_disbert.ipynb) my first idea to solve the classification problem was to use a pre-trained model as an embedding layer that turns the text into a vector of numbers that can be used as features for a machine learning model. i use bert to get high quality features out of the data. because bert has been already pre-trained with massive general datasets, it is useful for using it as an embedding layer that takes the tweets and outputs a vector of numbers that can be used as features. here i list the different variations i tried: * bert base and distilbert. i tried both models for the embedding layer. distilbert worked better. * logistic regression as ml model. it worked very well obtaining a 0.69 f1. * linear svc as ml model. it obtained around 0.66 f1. * random forest as ml model. it worked the best with a 0.712 f1. very close to the baseline. * convolutional neural networks. i tried many different networks with different number of layers and neurons. it worked also well but didn't get a higher f1 than random forest. * added a subset of data from ghosh dataset for training. this dataset has over 50,000 tweets. this didn't help at all and the f1 was lower. maybe the type of sarcasm is different in some way in each dataset. distilbert ml model input text feature vector sarcasm/ not sarcasm fine tune transformers (sarcasm_transformers.ipynb) my second attempt was about actually training pre-trained models and using it as a classifier instead of an embedding layer. here i only use the transformer and not an additional ml model. i tried different transformers provided from the simpletransformers library including bert, distilbert, xlm, xlnet and roberta. most of them performed better than the baseline. the one that showed better and more consistent results is roberta with 0.74 f1 score. project progress report | classification competition which tasks have been completed? * research about the problem: i have completed a research about nlp and classification problems. i am not new to machine learning but i am new to nlp, so i had to do a deep research on the current technologies used for classification problems and for problems similar to tweets classification and sarcasm detection. * find possible solutions: i research articles, githubs and papers on models that solve similar problems to the classification competition. i deeply went through three or four that i could base my models from. * implement models: i implemented some models based on the ones i found during my research. i applied them to the classification problem and found a decent result on the train data partitioned in train and test. which tasks are pending? * surpass the baseline in ranking: my f1 score is 0.678 and the baseline is 0.723. are you facing any challenges? * overwhelming start: i already went through the challenge of starting and ramping up. at the begining i had very little experience on using classification models for nlp. to overcome this challenge i did an extensive research on the current state of the art and i learnt in detail some of the most popular algorithms. * surpass the baseline in ranking: my f1 score is 0.678 and the baseline is 0.723. courseproject project proposal members: samuelv4 i would like to join the text classification competition. i am prepared to learn state-of-the-art neural network classifiers. i have worked in a nn competition before and i would love to do it again. i haven't worked a lot on text classification but i have worked with lstm networks which might help me to ramp up and learn the state-of-the-art for the competition. i am planning on using python and known libraries like tensorflow and keras.	['project', 'documentation', 'classification', 'competition', 'individual', 'samuel', 'valenzuela', 'samuelvillinoisedu', 'followed', 'two', 'different', 'approaches', 'one', 'using', 'bert', 'embedding', 'layer', 'train', 'use', 'classifier', 'second', 'attempt', 'performed', 'better', 'baseline', 'document', 'detail', 'notebook', 'clear', 'structure', 'also', 'provide', 'first', 'approach', 'well', 'documented', 'easy', 'follow', 'tried', 'many', 'things', 'code', 'bit', 'mess', 'run', 'models', 'recommend', 'google', 'colab', 'always', 'used', 'runs', 'much', 'faster', 'laptop', 'avoids', 'install', 'libraries', 'dealing', 'python', 'environments', 'sam_disbertipynb', 'sarcasm_transformersipynb', 'idea', 'solve', 'problem', 'pretrained', 'model', 'turns', 'text', 'vector', 'numbers', 'features', 'machine', 'learning', 'get', 'high', 'quality', 'data', 'already', 'massive', 'general', 'datasets', 'useful', 'takes', 'tweets', 'outputs', 'list', 'variations', 'base', 'distilbert', 'worked', 'logistic', 'regression', 'ml', 'obtaining', 'f', 'linear', 'svc', 'obtained', 'around', 'random', 'forest', 'best', 'close', 'convolutional', 'neural', 'networks', 'number', 'layers', 'neurons', 'didnt', 'higher', 'added', 'subset', 'ghosh', 'dataset', 'training', 'help', 'lower', 'maybe', 'type', 'sarcasm', 'way', 'input', 'feature', 'fine', 'tune', 'transformers', 'actually', 'instead', 'transformer', 'additional', 'provided', 'simpletransformers', 'library', 'including', 'xlm', 'xlnet', 'roberta', 'showed', 'consistent', 'results', 'score', 'progress', 'report', 'tasks', 'completed', 'research', 'nlp', 'problems', 'new', 'deep', 'current', 'technologies', 'similar', 'detection', 'find', 'possible', 'solutions', 'articles', 'githubs', 'papers', 'deeply', 'went', 'three', 'four', 'could', 'implement', 'implemented', 'based', 'ones', 'found', 'applied', 'decent', 'result', 'partitioned', 'test', 'pending', 'surpass', 'ranking', 'facing', 'challenges', 'overwhelming', 'start', 'challenge', 'starting', 'ramping', 'begining', 'little', 'experience', 'overcome', 'extensive', 'state', 'art', 'learnt', 'popular', 'algorithms', 'courseproject', 'proposal', 'members', 'samuelv', 'would', 'like', 'join', 'prepared', 'learn', 'stateoftheart', 'network', 'classifiers', 'nn', 'love', 'havent', 'lot', 'lstm', 'might', 'ramp', 'planning', 'known', 'tensorflow', 'keras']
https://github.com/savigovindarajan/CourseProject	"generating semantic annotations for frequent patterns with context analysis qiaozhu mei, dong xin, hong cheng, jiawei han, chengxiang zhai department of computer science university of illinois at urbana champaign urbana,il 61801 { qmei2, dongxin, hcheng3, hanj, czhai }@uiuc.edu abstract as a fundamental data mining task, frequent pattern mining has widespread applications in many different domains. re- search in frequent pattern mining has so far mostly focused on developing efficient algorithms to discover various kinds of frequent patterns, but little attention has been paid to the important next step - interpreting the discovered frequent patterns. although some recent work has studied the com- pression and summarization of frequent patterns, the pro- posed techniques can only annotate a frequent pattern with non-semantical information (e.g. support), which provides only limited help for a user to understand the patterns. in this paper, we propose the novel problem of generat- ing semantic annotations for frequent patterns. the goal is to annotate a frequent pattern with in-depth, concise, and structured information that can better indicate the hidden meanings of the pattern. we propose a general approach to generate such an annotation for a frequent pattern by con- structing its context model, selecting informative context indicators, and extracting representative transactions and semantically similar patterns. this general approach has po- tentially many applications such as generating a dictionary- like description for a pattern, finding synonym patterns, discovering semantic relations, and summarizing semantic classes of a set of frequent patterns. experiments on differ- ent datasets show that our approach is effective in generating semantic pattern annotations. categories and subject descriptors: h.2.8 [database management]: database applications - data mining general terms: algorithms keywords: frequent pattern, pattern annotation, pattern context, pattern semantic analysis 1. introduction with its broad applications such as association rule min- ing [2], correlation analysis [4], classification [6], and cluster- ing [19], discovering frequent patterns from large databases has been a central research topic in data mining for years. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. kdd'06, august 20-23, 2006, philadelphia, pennsylvania, usa. copyright 2006 acm 1-59593-339-5/06/0008 ...$5.00. various techniques have been developed for mining frequent item sets [2, 8], sequential patterns [3], graph patterns [22], etc. these techniques can usually output a large, complete set of frequent patterns efficiently, and provide basic statis- tic information such as support for each pattern. however, the excessive volume of the output pattern set and the lack of context information has made it difficult to interpret and explore the patterns. in most cases, a user only wants to explore a small set of most interesting patterns, and before exploring them, to have a rough idea about their hidden meanings or why they are interesting. this is analogous to literature reviewing. before deciding whether to read through a paper, a reader often wants to first look at a short summary of the main ideas of the paper. similarly, it is also highly desirable to have such a summary for a fre- quent pattern to explain or indicate the potential meanings of the pattern and to help a user decide whether and how to explore the pattern. therefore, a new major challenge in frequent pattern mining has been raised by researchers, which is how to present and interpret the patterns discov- ered, in order to support the exploration and analysis of individual patterns. to meet this challenge and facilitate pattern interpretation, we need to annotate each frequent pattern with semantically enriched, in-depth descriptions of the pattern and its associated context. researchers have employed concepts like closed frequent pattern [15], and maximum frequent pattern [16] to shrink the size of output patterns and provide more information beyond ""support"". recently, novel methods have been pro- posed either to mine a compressed set of frequent patterns [20] or to summarize a large set of patterns with the most representative ones [21]. both of them employ extra infor- mation of frequent patterns beyond the simple information of support, which is either transaction coverage [20] or pat- tern profiles [21]. these methods can successfully reduce the number of output patterns and present only the most inter- esting ones to the user. however, the information that these methods use to annotate a frequent patten is restricted to the morphological information or simple statistics (e.g. sup- port, transaction coverage, profile); from such an annota- tion, users could not infer the semantics, or hidden meanings of the pattern, thus still have to look through all the data transactions in which a pattern occurs in order to figure out whether it is worth exploring. in this paper, we study the problem of automatically gen- erating semantic annotations for frequent patterns, by which we mean to extract and provide concise and in-depth infor- mation for a frequent pattern, which indicates the semantics, or hidden meanings, of the pattern. what is an appropriate semantic annotation for a frequent pattern? generally, the hidden meaning of a pattern can be inferred from the patterns with similar meanings, the data objects co-occurring with it, and the transactions in which the pattern appears. in principle, we expect such an annotation to be compact, well structured, and indicative of the meanings of the pattern. this criterion is analogous to dictionary entries, which annotate each term with structured semantic information. example 1: an example of a dictionary entry1 dictionary term: ""pattern"" [""paet@n], noun, ... definitions: 1) a form or model proposed for imitation 2) a natural or chance configuration 3) ... example sentences: 1)... a dressmaker's pattern... 2)... the pattern of events ... synonym or thesaurus: model, archetype, design, exemplar, motif, etc in example 1, we see that in a typical dictionary entry, the annotation for a term is structured as follows. first, some basic non-semantic information is presented. second, a group of definitions are given, which suggests the semantics of the term, followed by several example sentences, which show the usage of this term in context. besides, a set of synonyms, thesaurus or semantically similar terms are pre- sented, which have similar definitions with this term. analogically, if we can extract similar types of semantic in- formation for a frequent pattern and provide such structured annotations to a user, it will be very helpful for him/her to interpret the meanings of the pattern and further ex- plore it. given a frequent pattern, it is trivial to generate non-semantic information such as basic statistics and mor- phological information, so the main challenge is to generate the semantic descriptions of a pattern, which is the goal of our work. first, we should ideally provide precise semantic definitions for a pattern like those in a dictionary. unfortu- nately, this is not practical without expertise of the domain. thus we opt to look for information that can indicate the semantics of a frequent pattern, which presumably can help a user infer the precise semantics. our idea is inspired from natural language processing, where the semantics of a word can be inferred from its context, and words sharing similar contexts tend to be semantically similar [13]. specifically, by defining and analyzing the context of a pattern, we can find strong context indicators and use them to represent the meanings of a pattern. second, we also want to extract the data transactions that best represent the meanings of the pattern, which is analogical to the example sentences. finally, semantically similar patterns (ssps) of the given pattern, i.e., patterns with similar contexts as the original pattern, can be extracted and presented. this is similar to the synonyms or thesauri of a term in dictionary. there- fore, an example of semantic pattern annotation (spa) can be shown as follows: example 2: an example of annotating a frequent pattern 1the example is selected from merriam-webster's collegiate dictionary & thesaurus pattern: ""frequent pattern"" sequential pattern; support = 0.1%; closed context indicators: ""mining"", ""constraint"", ""apriori"", ""fp-growth"" ""rakesh agrawal"", ""jiawei han"", ... example transactions: 1)mining frequent patterns without candidate... 2)... mining closed frequent graph patterns semantically similar patterns: ""frequent sequential pattern"", ""graph pattern"" ""maximum pattern"", ""frequent close pattern"", ... the term ""frequent pattern"" in this example is itself a fre- quent itemset, or a frequent sequential pattern in text. this dictionary-like annotation provides semantic information re- lated to ""frequent pattern"", consisting of its strongest con- text indicators, the most representative data transactions, and the most semantically similar patterns. despite its importance, to the best of our knowledge, the semantic annotation of frequent patterns has not been well addressed in existing work. in this work, we define the novel problem of generating semantic annotations for fre- quent patterns. we propose a general approach to auto- matically generate structured annotations as shown in ex- ample 2, by: 1) formally defining and modeling the context of a pattern; 2) weighting context indicators based on their strength to indicate pattern semantics; and 3) ranking trans- actions and semantically similar patterns based on context similarity analysis. empirical experiments on three different datasets show that our algorithm is effective for generating semantic pattern annotations and can be applied to various real world tasks. the semantic annotations generated by our algorithm have potentially many other applications, such as ranking pat- terns, categorizing and clustering patterns with semantics, and summarizing databases. applications of the proposed pattern context model and semantical analysis method are also not limited to pattern annotation; other example appli- cations include pattern compression, transaction clustering, pattern relations discovery, and pattern synonym discovery. the rest of the paper is organized as follows. in section 2, we formally define the problem of semantic pattern annota- tion and a series of its associated problems. in section 3, we introduce how the pattern context is modeled and instanti- ated. pattern semantic analysis and annotation generation is presented in section 4. we discuss our experiments and results in section 5, the related work in section 6, and our conclusions in section 7, respectively. 2. problem formulation in this section, we formally define the problem of semantic pattern annotation (spa). let d = {t1, t2, ..., tn} be a database containing a set of transactions ti, which can be itemsets, sequences, or graphs, etc. let pa be a pattern (e.g., an itemset, a subsequence, or a subgraph) in d and pd = {p1, ..., pl} be the set of all such patterns. we denote the set of transactions in which pa appears as da = {ti|pa  ti, ti  d}. definition 1 (frequent pattern): a pattern pa is fre- quent in a dataset d, if |da| |d| >= s, where s is a user-specified threshold and |da| |d| is called the support of pa, usually de- noted as s(a). definition 2 (context unit): given a dataset d and the set of frequent patterns pd, a context unit is a basic ob- ject in d which carries semantic information and co-occurs with at least one pa  pd in at least one transaction ti  d. the set of all such context units satisfying this definition is denoted as ud. with this general definition, a context unit can be an item, a pattern, or a transaction in practice, depending on the specific task and data. definition 3 (pattern context): given a dataset d and a frequent pattern pa  pd, the context of pa, denoted as c(a), is represented by a selected set of context units ua  ud such that every u  ua co-occurs with pa. each selected context unit u is also called a context indicator of pa, associated with a strength weight w(u, a), which measures how well it indicates the semantics of pa. the following is an example of the context for an item- set pattern in a small dataset with only two transactions. the possible context units for this dataset are single items, itemsets and transactions, and the context indicators of the itemset pattern are selected from the context units appear- ing with it in the same transactions. example 3: an example of pattern context transactions: t1 = {diaper, milk, baby carriage, baby lotion, ... } t2 = {digital camera, memory disk, printer, ... } context units: 1) items: diaper, milk, printer, ... 2) patterns: {diaper, baby lotion}, ... 3) transactions: t1, t2, ... an exemplary frequent pattern (s = 0.5) p = {diaper, milk} context indicators of p: diaper, baby carriage, {milk, baby lotion}, t1, ... with the definitions above, we now define the concept of semantic annotation for a frequent pattern and the related 3 subproblems. definition 4 (semantic annotation): let pa be a frequent pattern in a dataset d, ua be the set of context indicators of pa, and p be a set of patterns in d. a semantic annotation of pa consists of: 1) a set of context indicators of pa, ia  ua, s.t. u  ia and u'  ua - ia, w(u', a) <= w(u, a); 2) a set of transactions ta  da, s.t.t  ta and t'  da - ta, t is more similar to c(a) than t' under some similarity measure; and 3) a set of patterns p '  p s.t. p  p ' and p'  p - p ', c(p) is closer to c(a) than c(p'). definition 5 (context modeling): given a dataset d and a set of possible context units u, the problem of context modeling is to select a subset of context units u, define a strength measure w(*, a) for context indicators, and construct a model of c(a) for each given pattern pa. definition 6 (transaction extraction): given a dataset d, the problem of transaction extraction is to define a sim- ilarity measure sim(*, c(*)) between a transaction and a pat- tern context, and to extract a set of k transactions ta  da for frequent pattern pa, s.t.t  ta and t'  da - ta, sim(t', c(a)) <= sim(t, c(a)). definition 7 (semantically similar pattern (ssp) extraction): given a dataset d and a set of candidate pat- terns pc, the problem of semantically similar pattern (ssp) extraction is to define a similarity measure sim(c(*), c(*)) be- tween the contexts of two patterns, and to extract a set of k patterns p '  pc for any frequent pattern pa, s.t. p  p ' and p'  pc -p ', sim(c(p'), c(a)) <= sim(c(p), c(a)), where c(a) is the context of pa. with the definitions above, we may define the task of semantic pattern annotation (spa) as to: 1) select context units and design a strength weight for each unit to model the contexts of frequent patterns; 2) design similarity measures for the contexts of two pat- terns, and for a transaction and a pattern context; 3) for a given frequent pattern, extract the most significant context indicators, representative transactions and semanti- cally similar patterns to construct a structured annotation. this problem is challenging in various aspects. first, we do not have prior knowledge on how to model the context of a pattern or select context units when the complete set of possible context units is huge. second, it is not immediately clear how to analyze pattern semantics, thus the design of the strength weighting function and similarity measure is nontrivial. finally, since no training data is available, the annotation must be generated in a completely unsupervised way. these challenges, however, also indicate a great advan- tage of the spa techniques we will propose - they do not depend on any domain knowledge about the dataset or the patterns. in the following two sections, we present our approaches for modeling the context of a frequent pattern and annotat- ing patterns through semantic context analysis. 3. modeling pattern contexts in this section, we discuss how to model pattern contexts through selecting appropriate context units and defining ap- propriate strength weights. given a dataset d and a set of frequent patterns pd, our goal is to select a set of context units which carry semantic information and can discriminate the meanings of the frequent patterns. the discriminating power of each context unit will be captured by its strength weights. vector space model (vsm) [17] is commonly used in nat- ural language processing and information retrieval to model the content of a text. for example, in information retrieval, a document and a query are both represented as term vec- tors, where each term is a basic concept (i.e., word, phrase), and each element of the vector corresponds to a term weight reflecting the importance of the term. the similarity be- tween documents and queries can thus be measured by the distance between the two vectors in the vector space. for the purpose of semantic modeling, we represent a transac- tion and the context of a frequent pattern both as vectors of context units. we select vsm because it makes no assump- tion on the vector dimensions and gives the most flexibility to the selection of dimensions and weights. formally, the context of a frequent pattern is modeled as follows. context modeling: given a dataset d, a selected set of context units {u1, ..., um}, we represent the context c(a) of a frequent pattern pa as a vector <w1, w2, ..., wm> , where wi = w(ui, a) and w(*, a) is a weighting function. a transaction t is represented as a vector <v1, v2, ..., vm> , where vi = 1 iff ui  t, otherwise vi = 0. the two key issues in a vsm are to select the vector dimensions and to assign weights for each dimension [17]. specifically, the effectiveness of context modeling is highly dependent on how to select context units and design the strength weights. actually, due to the generality of vsm, the proposed vector-space pattern context model is quite general and covers different strategies for context unit selec- tion and weighing functions. in the following subsections, we first discuss the generality of the context model, and then discuss specific solutions for the two issues respectively. 3.1 the generality of context modeling some existing work has explored non-morphological infor- mation of frequent patterns with some concepts related to the ""pattern context"" defined above. we now show that the notion of ""pattern context"" is more general and can cover those concepts as special cases. in [21], yan et al. introduced the profile of an itemset for summarizing itemset patterns, which is represented as a bernoulli distribution vector. in fact, this ""profile"" of a fre- quent itemset a can be written as a vector <w(o1, a), w(o2, a), ..., w(od, a)>  over all the single items {oi} in d. here w(oi, a) =  tj da ti j |da| , where ti j = 1 if oi  tj and 0 oth- erwise. this shows that this ""profile"" is actually a special instance of the context model as we defined, where single items are selected as context units. xin and others proposed a distance measure for mining compressed frequent-pattern sets, which is computed based on the transaction coverage of two patterns [20]. inter- estingly, the ""transaction coverage"" is also a specific in- stance of ""pattern context"". given a frequent pattern pa, the transaction coverage of pa can be written as a vector <w(t1, a), w(t2, a), ..., w(tk, a)>  over all the transactions {ti} in d, where each transaction is selected as a context unit, and w(ti, a) = 1 if pa  ti and 0 otherwise. covering the concepts in existing work as specific instances, the pattern context model we proposed is general and has quite a few benefits. first, it does not assume pattern types. the pattern profile proposed in [21] assumes that both trans- actions and patterns are itemsets, thus does not work for other patterns such as sequential patterns and graph pat- terns. second, the pattern context modeling allows different granularity of context units and different weighting strate- gies. in many cases, single items are not informative in terms of carrying semantic information (e.g., single nucleotides in dna sequences), and the semantic information carried by a full transaction is too complex and noisy (e.g., a text document). the context modeling we introduced bridges this gap by allowing various granularity of semantic units, and allows the user to explore the pattern semantics at the level that corresponds to their beliefs. furthermore, this model is adaptive to different strength weighting strategies for context units, where the user's prior knowledge about the dataset and patterns can be easily plugged in. 3.2 context unit selection with the general definition presented in section 2, the selection of context units is quite flexible. in principle, any object in the database that carries semantic information or serves to discriminate patterns semantically can be a context unit, thus context units can be single items, transactions, patterns, or any group of items/patterns, depending on the characteristics of the task and data. without losing generality, in our work we assume a pat- tern is the minimal units which carries semantic information in a dataset, and thus select the context units as patterns. all kinds of units can be considered as patterns with a spe- cific granularity. for example, in a sequence database, every single item can be viewed as a sequential pattern of length 1, and every transaction can be viewed as a sequential pattern which is identical to the transactional sequence. the choos- ing of patterns as context units is task dependent, and can usually be optimized with prior knowledge about the task and the data. for example, we can use words as context units in a text database, and in a graph database, we pre- fer subgraph patterns to be context units, since single items (i.e., vertices and edges) are noninformative. this general strategy gives much freedom to select context units. however, selecting patterns of various granularity may cause the redundancy of context because these patterns are highly redundant. as discussed in previous sections, we expect the context units not only to carry semantic informa- tion but also to be as discriminative as possible to indicate the meanings of a pattern. however, when various granu- larity of patterns are selected as context units, some units will become less discriminative, and more severely, some be- comes redundant. for example, when the pattern ""mining subgraph"" is added as a context unit, the discriminating power of other units like ""mining frequent subgraph"" and ""subgraph"" would be weakened. this is because the trans- actions containing the pattern ""mining subgraph"" always contain ""subgraph"", and likely also contain ""mining frequent subgraph"", which means that these patterns are highly de- pendent and not discriminative to indicate the semantics of the frequent patterns co-occurring with them. this re- dundancy also brings a lot of unnecessary dimensions into the context vector space where the dimensionality is already very high. this redundancy in dimensions will affect both the efficiency and accuracy of distance computation between two vectors, which is essential for spa. in our work, we ex- amine different techniques to remove the redundancy of con- text units without losing the semantic discriminating power. 3.2.1 redundancy removal: existing techniques one may first think of using existing techniques such as pattern summarization and dimension reduction to remove the redundancy of context units. while the context units can be any patterns in principle, we are practically not interested in those with very low fre- quency in the databases. therefore, the context units we initially include are frequent patterns. there exist meth- ods for summarizing frequent patterns with k representative patterns [21], but they only work for itemset patterns and are not general enough for our purpose. some techniques such as lsi [5] have been developed to reduce the dimensionality in high dimensional spaces, espe- cially for text data. however, these techniques aim to mit- igate the sparseness of data vectors by reducing the dimen- sionality, and are not tuned for removing the ""redundant"" dimensions. this is because all these dimensionality reduc- tion techniques consider that each dimension is ""important"" and the information it carries will always be preserved, or propagated into the new space. this is, however, different from our goal of redundancy removal. for example, if d1 and d2 correspond to the patterns ""ab"" and ""abc"" re- spectively, and if we consider d2 to be redundant w.r.t d1, we do not expect the information of d2 to be preserved after the removal of d2. 3.2.2 redundancy removal: closed frequent pat- tern since neither the pattern summarization nor the dimen- sionality reduction technique is directly applicable to our problem, we examine alternative strategies. noticing that the redundancy of context units is likely to be caused by the inclusion of both a frequent pattern and its sub patterns, we explore closed frequent patterns [15] and maximum frequent patterns [16] to solve this problem. a maximal frequent pattern is a frequent pattern which does not have a frequent super-pattern. it is easy to show that maximum frequent pattern is not appropriate for this problem since it may lose important discriminative units. for example, the frequent pattern ""data cube"", although not a maximum frequent pattern, indicates different semantics from the frequent pattern ""prediction data cube"", and thus should not be removed. definition 8 (closed frequent pattern): a frequent pattern pa is closed if and only if there exists no super- pattern pb of pa, s.t. da = db. we assume that a context unit is not redundant only if it is a closed pattern. this assumption is reasonable because pa  pd, if pa is not closed, there is always another fre- quent pattern pb  pd, where pa  pb and ti  d, we have pa  ti = pb  ti. this indicates that we can use pb as a representative of pa and pb without losing any se- mantic discriminating power. therefore, in our work we use closed frequent patterns as our initial set of context units. the algorithms for mining different kinds of closed frequent patterns can be found in [15, 23]. 3.2.3 redundancy removal: microclustering however, as stated in [21], a small disturbance within the transactions may result in hundreds of subpatterns that could have different supports, which cannot be pruned by closed frequent pattern mining. those subpatterns are usu- ally with supports only slightly different from that of the master pattern. therefore, their discriminating power for the semantics of the frequent patterns is very weak when their master patterns are also included as a context unit. we present clustering methods to further remove redundancy from the closed frequent patterns. microclustering is usually employed as a preprocessing step to group data points from presumably the same cluster to reduce the number of data points. in our work, we first introduce a distance measure between two frequent patterns and then introduce two microclutering algorithms to further group the close frequent patterns. definition 9 (jaccard distance): let pa and pb as two frequent patterns. the jaccard distance between pa and pb is computed as: d(pa, pb) = 1 - |da  db| |da  db| jaccard distance [10] is commonly applied to cluster data based on their co-occurrence in transactions. our need is to group the patterns that tend to appear in the same transac- tions, which is well captured by jaccard distance. jaccard distance has also been applied to pattern clustering in [20]. with jaccard distance, we expect to extract clusters such that the distances between inner-cluster units are bounded. we present two microclustering algorithms as follows: in the hierarchical microclustering method presented as algorithm 1, we iteratively group two clusters of patterns with the smallest distance, where the distance between two algorithm 1 hierarchical microclustering input: transaction dataset d, a set of n closed frequent patterns, p = {p1, ..., pn} threshold of distance, g output: a set of patterns, p' = {p' 1, ..., p' k} 1: initialize n clusters ci, each as a closed frequent pattern; 2: compute the jaccard distance dij among {p1, ..., pn}; 3: set the current minimal distance d = min(dij); 4: while (d < g) 5: select dst where (s, t) = argmini,jdij; 6: merge clusters cs and ct into a new cluster cu; 7: foreach cv = cu 8: compute duv = max(dab) where pa  cu, pb  cv; 9: foreach cu; 10: foreach pa  cu; 11: compute -da = avg(dab) where pb  cu; 12: add pa into p', where a = argmini( -di); 13: return algorithm 2 one-pass microclustering input: transaction dataset d, a set of n closed frequent patterns, p = {p1, ..., pn} threshold of distance, g output: a set of patterns, p' = {p' 1, ..., p' k} 1: initialize 0 clusters; 2: compute the jaccard distance dij among {p1, ..., pn}; 3: foreach (pa  p) 4: foreach cluster cu 5: ~da,u = max(dab) where pb  cu; 6: v = argminu( ~da,u); 7: if( ~da,v < g) 8: assign pa to cv 9: else 10: initialize a new cluster c = {pa} 11: foreach cu; 12: foreach pa  cu; 13: compute -da = avg(dab) where pb  cu; 14: add pa into p', where a = argmini( -di); 15: return clusters are defined as the jaccard distance between the far- thest patterns in the two clusters. the algorithm termi- nates when the minimal distance between clusters becomes larger than a user-specified threshold g. the second algo- rithm, which we call one-pass microclustering, iteratively assigns a closed frequent pattern pa to its nearest cluster if the distance is below g, where the distance between pa and a cluster c is defined as the jaccard distance between pa and its farthest pattern in c. both algorithms give us a set of microclusters of closed frequent patterns. they both guarantee that the distance between any pair of patterns in the same cluster is below g. only the medoid of each cluster is selected as a context unit. by varying g, a user can select context units with various levels of discriminating power of pattern semantics. it is clear that algorithm 2 only passes the pattern set once and thus is more efficient than the hierarchical algorithm, at the expense that the quality of clusters depends on the order of patterns. the performance of these two methods are compared in section 5. 3.3 strength weighting for context units once the context units are selected, the remaining task is to assign a weight to each dimension of the context model, which represents how strong the context unit corresponding to this dimension indicates the meaning of a given pattern. intuitively, the strongest context indicators for a pattern pa should be those units that frequently co-occur with pa but infrequently co-occur with others. practically, many types of weighting functions can be used to measure the strength of a context indicator. for example, we can assign the weight for a context indicator u for pa as the number of transactions with both u and pa. however, in principle, a good weighting function is expected to satisfy several constraints: given a set of context indicator u and a frequent pattern pa, a strength weighting function w(*, pa) is good if ui  u 1. w(ui, pa) <= w(pa, pa): the best semantic indicator of pa is itself; 2. w(ui, pa) = w(pa, ui): two patterns are equally strong to indicate the meanings of each other; 3. w(ui, pa) = 0 if the appearance of ui and pa is inde- pendent: ui cannot indicate the semantics of pa. an obvious choice is co-occurrences, which however, may not be a good measure. one one hand, it does not satisfy constraints 3. on the other hand, we want to penalize the context units that are globally common patterns in the col- lection. which means, although they may co-occur many times with pa, it may still not be a good context indica- tor for pa because it also co-occurs frequently with others. in general, the context units that are strongly correlated to pa should be weighted higher. in our work, we introduce a more principled measure. mutual information (mi) is widely used to measure the mutual independency of two random variables in informa- tion theory, which intuitively measures how much informa- tion a random variable tells about the other. the definition of mutual information is given as definition 10: (mutual information). given two fre- quent patterns pa and pb, let x = {0, 1} and y = {0, 1} be two random variables for the appearance of pa and pb respectively. mutual information i(x; y ) is computed as: i(x; y ) =  xx  yy p(x, y)log p(x, y) p(x)p(y) where p(x = 1, y = 1) = |dadb| |d| , p(x = 0, y = 1) = |db|-|dadb| |d| , p(x = 1, y = 0) = |da|-|dadb| |d| , and p(x = 0, y = 0) = |d|-|dadb| |d| . in our experiments, we use stan- dard laplace smoothing to avoid zero probability. it can be easily proved that mutual information satisfies all the three constraints and favors the strongly correlated units. in our work, we use mutual information to model the indicative strength of the context units selected. given a set of patterns as candidate context units, we ap- ply closeness testing and microclustering to remove redun- dant units from this initial set. we then use mutual infor- mation as the weighting function for each indicator selected. given a frequent pattern, we apply semantic analysis with its context model and generate annotations for this pattern, as discussed in the following section. 4. semantic analysis and pattern annotation let u = {u1, u2, ..., uk} be a selected set of k context units and w(*, pa) be the unit weighting function w.r.t. any frequent pattern pa, i.e. i(*; pa). the context model, or con- text vector c(a) for pa is <w(u1, pa), w(u2, pa), ..., w(uk, pa)> . as introduced in section 1, we make the assumption that the frequent patterns are semantically similar if their con- texts are similar to each other. in our work, we analyze the semantics of frequent patterns by comparing their context models. formally, definition 11 (semantical similarity): let pa, pb, pd be three frequent patterns in p and c(a), c(b), c(d)  vk be their context models. let sim(c(*), c(*)) : vk xvk -- r+ be a similarity function of two context vectors. if sim(c(a), c(b)) > sim(c(a), c(d)), we say that pb is semantically more sim- ilar to pa than pd w.r.t. sim(c(*), c(*)). cosine is widely used to compute the similarity between two vectors, and is well explored in information retrieval to measure the relevance between a document and a query if both are represented with a vector space model [17]. in our work, we use cosine similarity of two context vectors to mea- sure the semantic similarity of two corresponding frequent patterns. formally, the cosine similarity of two context vec- tors is computed as sim(c(a), c(b)) = k i=1 ai * bi k i=1 a2 i * k i=1 b2 i where c(a) = <a1, a2, ..., ak>  and c(b) = <b1, b2, ..., bk> . with the context model and the semantical similarity measure, we now discuss how to generate semantic anno- tations for frequent patterns. 4.1 extracting strongest context indicators let pa be a frequent pattern and c(a) be its context model, which is defined in this work as a context vector <w1, w2, ..., wk>  over a set of context units u = {u1, u2, ..., uk}. as defined in section 2, wi is a weight for ui which tells how well ui indicates the semantics of pa. therefore, the goal of extracting strongest context indicators is to extract a sub- set of k' context units ua  u such that ui  ua and uj  u - ua, we have wi >= wj. with a strength weighting function w(*, pa), e.g., mutual information as introduced in section 3, we compute wi = w(ui, pa), rank ui  u with wi in descending order and select the top k' ui's. 4.2 extracting representative transactions let pa be a frequent pattern, c(a) be its context model, and d = {t1, ...tl} be a set of transactions, our goal is to select kt transactions ta  d with a similarity function s(*, pa), s.t. t  ta and t'  d - ta, s(t, pa) >= s(t', pa). to achieve this, we first represent a transaction as a vec- tor in the same vector space as the context model of the frequent pattern pa, i.e., over {u1, u2, ..., uk}. then, we use the cosine similarity presented in section 3 to compute the similarity between a transaction t and the context of pa. the rest is again a ranking problem. formally, let c(t) = <w' 1, w' 2, ..., w' k>  where w' i = 1 if ui  t and w' i = 0 otherwise. we compute sim(c(t), c(a)) for each t  ta, rank them in descending order and select the top kt t's. 4.3 extracting semantically similar patterns let pa be a frequent pattern, c(a) be its context model, and pc = {p1, ..., pc} be a set of frequent patterns which are believed to be good candidates for annotating the se- mantics of pa, i.e., as synonyms, thesauri, or more generally as ssps. our goal is to extract a subset of kc patterns p ' c  pc whose contexts are most similar to pa. formally, let {c(p1), ..., c(pc)} be the context vectors for {p1, ..., pc}. we compute sim(c(pi), c(a)) for each pi  pc, rank them in descending order, and select the top kc pi's. note that the candidate ssp set for annotation is quite flexible. it can be the whole set of frequent patterns in d, or a user-specified set of patterns based on his prior knowledge. it can be a set of homogenous patterns with pa, or a set of heterogenous patterns. for example, it can be a set of pat- terns or terminology from the domain that a user is familiar with, and is used to annotate patterns from an unfamiliar domain. this brings great flexibility to apply the general spa techniques to different tasks. by exploring different types of candidate ssps, we can find quite a few interest- ing applications of semantic pattern annotation, which are discussed in section 5. 5. experiments and results in this section, we present experiment results on three different datasets to show the effectiveness of the semantic pattern annotation technique for various real-world tasks. 5.1 dblp dataset the first dataset we use is a subset of the dblp dataset2. it contains papers from the proceedings of 12 major con- ferences in database and data mining. each transaction consists of two parts, the authors and the title of the cor- responding paper. we consider two types of patterns: (1) frequent co-authorship, each of which is a frequent itemset of authors and (2) frequent title terms, each of which is a frequent sequential pattern of the title words. the goal of experiments on this dataset is to show the effectiveness of the spa to generate a dictionary-like annotation for frequent patterns. our experiments are designed as follows: 1) given a set of authors/co-authors, annotate each of them with their strongest context indicators, the most repre- sentative titles from their publications, and the co-authors or title patterns which are most semantically similar to them. note that the most representative titles do not necessarily mean their most influential work, but rather the titles which best distinguish their work from others' work. 2) given a set of title terms (sequential patterns), anno- tate each of them with their strongest context indicators, the most representative titles, the most similar terms, and the most representative author/co-authors. note again that the most representative author/co-authors are not necessar- ily the most well-known ones, but rather the authors who are most strongly correlated to the topics (terms). in both experiments, we use the tools fp-close [7] and clospan [23] to generate closed frequent itemsets of co- authors and closed sequential patterns of title terms respec- tively. the title words are stemmed by krovertz stemmer [12], which converts the morphological variations of each english word to its root form. we set the minimum sup- port for frequent itemset as 10 and sequential patterns as 4, 2http://www.informatik.uni-trier.de/~ley/db/ which outputs 9926 closed sequential patterns. we use the one-pass microclustering algorithm discussed in section 3 to remove redundancy from those sequential patterns and get a smaller set of 3443 patterns, with g = 0.9 (the average jaccard distance between these patterns is > 0.95). medoids cluster members mine data, mine, data mine mine associate rule, associate, associate rule, mine rule rule mine associate, mine associate rule mine stream mine data, mine stream, data stream, mine data stream table 1: effectiveness of microclustering table 1 shows the medoids and cluster members of three microclusters generated by the one-pass microclustering al- gorithm discussed in section 3, all of which begin with the term ""mine"". we see that different variations of the same concept are grouped into the same cluster, although all of them are closed patterns. this successfully reduces the pat- tern redundancy. it is interesting to see that the pattern ""data mine"" and ""mine data"" are assigned to different clus- ters, which cannot be achieved by the existing pattern sum- marization techniques such as [21]. the results generated by hierarchical microclustering are similar. in table 2, we selectively show the results of semantic pattern annotations. we see that the spa system can auto- matically generate dictionary-like annotations for different kinds of frequent patterns. for frequent itemsets like co- authorship or single authors, the strongest context indica- tors are usually their other co-authors and discriminative ti- tle terms that appear in their work. the semantically similar patterns extracted also reflect the authors and terms related to their work. however, these ssps may not even co-occur with the given pattern in a paper. for example, the pattern ""jiayong wang"", ""jiong yang&philip s yu&wei wang"" actu- ally do not co-occur with the pattern ""xifeng yan&jiawei han"", but are extracted because their contexts are similar. for a single author, whose context is usually more diverse, the ssps are more likely to be title terms instead of authors. we also present the annotations generated for title terms, which are frequent sequential patterns. their strongest con- text indicators are usually the authors who tend to write them in the titles of their papers, or the terms that tend to co-appear with them. their ssps usually provide inter- esting concepts or descriptive terms which are close to their meanings, e.g. ""information retrieval - information filter"", ""xquery - complex language, function query language"". in both scenarios, the representative transactions extracted give us the titles of papers that well capture the meaning of the given patterns. we only show the title words in table 2 for each transaction. these experiments show that the spa can generate dic- tionary like annotations for frequent patterns effectively. in the following two experiments, we quantitatively evaluate the performance of spa, by applying it to two interesting tasks. 5.2 matching motifs and go terms a challenging and promising research topic in computa- tional biology is to predict the functions for newly discovered protein motifs, which are conserved amino acid sequence patterns characterizing the function of proteins. to solve this problem, researchers have studied how to match gene pattern type annotations xifeng yan i graph; philip s yu; mine close; mine close frequent; index approach; graph pattern; sequential pattern jiawei han t gspan graph-base substructure pattern mine t mine close relational graph connect constraint (ssp set = t clospan mine close sequential pattern large database co-author patterns) s jiawei han&philip s yu; jian pei&jiawei han; jianyong wang; jiong yang&philip s yu&wei wang i spiros papadimitriou; fast; use fractal; graph; use correlate; christos faloutso t multiattribute hash use gray code (ssp set = t recovere latent time-sery their observe sum network tomography particle filter title term patterns) t index multimedia database tutorial s use fractal; fast data mine; data graph; efficient time sequence; spatial access method; discovery correlate information i w bruce croft; web information; monika rauch henzinger; james p callan; full-text; retrieval t web information retrieval t language model information retrieval s information use; web information; probabilist information; information filter; text information i xquery stream; murali mani; jens teubner; tree efficient xquery t implement xquery t xquery query language xml s xquery stream; stream xml; complex language; function query language; estimate xml; table 2: annotations generated for frequent patterns in dblp dataset note: ""i"" means context indicators; ""t"" means representative transactions; ""s"" means semantically similar patterns. we exclude 12 most frequent and non-informative english words from the collection when extracting frequent patterns. ontology(go) terms with motifs [18]. usually, each protein sequence, which contains a number of motifs, is assigned a set of go terms that annotate its functions. the goal of the problem is to automatically match each individual mo- tif with go terms which best represent its functions. in this experiment, we formalize the problem as: given a set of transactions d (protein sequences with motifs tagged and go terms assigned), a set p of frequent patterns in d to be annotated (motifs), and a set of candidate patterns pc with explicit semantics (go terms), our goal is for pa  p, find p ' c  pc which best indicate the semantics of pa. we used the same data set and judgments (i.e., gold stan- dard) as used in [18]. the data has 12181 sequences, 1097 motifs, and 3761 go terms. we also use the same perfor- mance measure as in [18] (i.e., a variant of mean recip- rocal rank (mrr) [11], notated as mrr in the following sections for convenience) to evaluate the effectiveness of the spa technique on the motif - go term matching problem. let g = {g1, g2, ..., gc} be a set of go terms. given a motif pattern pa, g' = {g' 1, g' 2, ..., g' k}  g is a set of ""cor- rect"" go terms for pa in our judgement data. we rank g with the spa system and pick the top ranked terms, where g is treated as either context units or semantically similar patterns to pa. this will give us a rank for each gi  g, say r(gi). mrr (w.r.t. pa) is then computed as mrra = 1 k k  i=1 1 r(g' i) where r(g' i) is the ith correct go term for pa. if g' i is not in the top ranked list, we set 1/r(g' i) = 0. we take the average over all the motifs, mrr = 1/m  pap mrra to measure the overall performance, where m is the number of motifs in our judgement file. clearly, 0 <= mrr <= 1. a higher mrr value indicates a higher precision, and the top-ranked go terms have the highest influence on mrr, which is intuitively desirable. if we are ranking the full candidate go set for annotation, a ""lazy"" system may either just give them the same rank or rank them randomly. it is easy to show that the expected mrr score for these two cases are the same, which is e[mrr] = 1 |g| |g|  i=1 1 r(gi) where |g| is the number of go terms in g. e[mrr] drops monotonously when |g| increases, which indicates the larger the candidate set is, the more difficult is the ranking task. we use this value as the baseline to compare our results. we employ all the motifs and go terms as context units. since these patterns are not overlapping with each other, we do not use microclustering to preprocess the context units. we compare the ranking of go terms either as context in- dicators or as ssps. we also compare the use of mutual information and co-occurrence as strength weight for con- text units. these strategies are compared in table 3: mrr use mi use co-occurrence context strength 0.5877 0.6064 semantical similarity 0.4017 0.4681 random (|g| = 3761) 0.0023 table 3: mrr of spa on motif-go matching we see that spa is quite effective in matching motifs with go terms, consistently outperforming the baseline. rank- ing go terms as context units achieves better results than ranking them as ssps, which is reasonable because a go term usually describes only one aspect of a motif's function and is shared by a number of motifs, thus its context is likely quite different from that of a motif. interestingly, we notice that although mutual information is a better measure for the strength weight in principle, in this specific problem, using mi as strength weight for con- text units is not as good as using simple co-occurrence. this may be because there are hardly many go terms that are globally very common in this dataset, and therefore mi over penalizes the frequent patterns. a detailed discussion on why co-occurrence measure outperforms mi on motif-go matching problem is given in [18]. 5.3 matching gene synonyms as discussed in section 4.3, the algorithm for extracting semantically similar patterns aims at finding patterns whose meaning is very close to the pattern to be annotated. ideally, they would be synonyms, or thesauri of the given pattern. these patterns may not ever co-occur with the given pattern but tend to have similar contexts, thus cannot be extracted as strong context indicators. we do another experiment to test the performance of spa on extracting ssps. in biomedical literature, it is common that different terms or aliases are used in different studies to denote the same gene, which are known as gene synonyms (see e.g., table 4). these synonyms generally do not appear together but are ""replaceable"" with each other. detecting them can help many literature mining tasks. in this experiment, we test the application of spa to matching gene synonyms. gene id gene synonyms fbgn0000028 abnormal chemosensory jump 6; acj 6; ipou; i pou; cg 9151; ti pou; twin of i pou; fbgn0001000 female sterile 2 tekele; fs 2 sz 10; tek; fs 2 tek; tekele; table 4: examples of gene synonym patterns we construct the synonym list for 100 fly genes, which are randomly selected from the data provided by biocre- ative task 1b3. ling et al. collected 22092 abstracts from medline4 which contain the keyword ""drosophila"" [14]. we extract the sentences from those abstracts which con- tain at least one synonym in the synonym list. only the synonyms with support >= 3 are kept, which gives us a small set of 41 synonyms. we then mix those synonyms which belong to different genes and use the algorithm of extract- ing ssps to recover the matching of synonyms. specifically, given a synonym from the mixed list, we rank all synonyms with the ssp extraction algorithm. the performance of the system is evaluated by comparing the ranked list with the correct synonyms for the same gene. we also use mrr as the evaluation measure. the results are shown as follows. context min no micro- one-pass hierarchical units sup clustering g = 0.9 g = 0.9 closed 0.15% 0.5108 0.5161 0.5199 sequential 0.18% 0.5140 0.5191 0.5225 patterns 0.24% 0.5220 0.5245 0.5301 0.3% 0.5281 0.5292 0.5281 single words 0.4774 random 0.1049 (|g| = 41) table 5: mrr of spa on gene synonym matching 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.52 0.522 0.524 0.526 0.528 0.53 0.532 0.534 g mrr 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1000 2000 3000 4000 5000 6000 7000 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1000 2000 3000 4000 5000 6000 7000 seconds (s) time:hier mrr:hier mrr:onep time:onep figure 1: effect of microclustering algorithms hier: hierarchical microclustering; onep: one-pass microclus- tering; minsup = 0.3% avg. g = 0.96; from table 5, we see that the spa algorithm is also ef- fective for matching gene synonyms, which significantly out- performs the random baseline. when using closed sequential patterns as context units, we always achieve better results than using single words (items) as context units, where a higher minimum support (minsup) usually yields better re- sults. when closed sequential patterns are used, further microclustering indeed improves the performance of the sys- tem. however, when the minsup is higher, this improvement 3http://www.pdg.cnb.uam.es/biolink/biocreative.eval.html 4http://www.ncbi.nlm.nih.gov/entrez/query.fcgi is decaying. this is reasonable because when the minsup is higher, there is less redundancy among the output closed patterns. using hierarchical microclustering is slightly bet- ter than using the one-pass algorithm, but not always. finally, we discuss the performance of microclustering in removing redundant context units. the effectiveness and ef- ficiency are shown in figure 1. both microclustering meth- ods improve the precision (mrr score) when more redun- dant patterns are grouped into clusters. however, when g is set too large, the precision decreases. this indicates that we may have over penalized the redundancy and lost useful context units. a good g for this task is around 0.8. although the cluster quality may not be optimized, the performance of one-pass microclustering is comparable to hi- erarchical microclustering on this task. while in principle, the hierarchical clustering is not efficient, the early termi- nation by using a small g saves a lot of time. the one-pass algorithm is more efficient than the hierarchical clustering, and is not affected by g. the overhead that both algorithms suffer is the computation of jaccard distances for all pairs of patterns, i.e., o(n2) where n is the number of patterns. however, this computation can be coupled in frequent pat- tern mining, as discussed in [20]. 6. related work to the best of our knowledge, the problem of semantic pat- tern annotation has not been well studied in existing work. most frequent pattern mining work [2, 8, 3, 22] focuses on discovering frequent patterns efficiently from the database, and does not address the problem of pattern postprocess- ing. to solve the problem of high redundancy in patterns discovered, closed frequent pattern [15], maximum frequent pattern [16] and top-k closed pattern [9] are proposed to shrink the size of output patterns while keeping the impor- tant ones. however, none of this work provides additional information other than simple statistics to help users inter- pret the frequent patterns. the context information for a pattern tends to be ignored. recently, researchers develop new techniques to approx- imate, summarize a frequent pattern set [1, 21], or mine compressed frequent pattern sets [20]. although they ex- plored some kind of context information, none of the work can provide in-depth semantic annotations for frequent pat- terns as we do in our work. the context model proposed in our work covers both the pattern profile in [21] and trans- action coverage in [20] as special cases. context and semantic analysis are quite common in natu- ral language and text processing (see e.g., [17, 5, 13]). most work, however, deals with non-redundant word-based con- texts, which are quite different from pattern contexts. in specific domains, people have explored the context of specific data patterns to solve specific problems [18, 14]. although not optimally tuned, the general techniques pro- posed in our work can be well applied to those tasks. 7. conclusions existing frequent pattern mining work usually generates a huge amount of frequent patterns without providing enough information to interpret the meanings of the patterns. some recent work introduced postprocessing techniques to sum- marize and compress the pattern set, which shrinks the size of the output set of frequent patterns but does not provide semantic information for patterns. we propose the novel problem of semantic pattern an- notation (spa) - generating semantic annotations for fre- quent patterns. a semantic annotation consists of a set of strongest context indicators, a set of representative transac- tions, and a set of semantically similar patterns (ssps) to a given frequent pattern. we define a general vector-space context for a frequent pattern. we propose algorithms to exploit context modeling and semantic analysis to generate semantic annotations automatically. the context modeling and semantic analysis method we presented is quite gen- eral and can deal with any types of frequent patterns with context information. the method can be coupled with any frequent pattern mining techniques as a postprocessing step to facilitate interpretation of the discovered patterns. we evaluated our approach on three different dataset and tasks. the results show that our methods can generate se- mantic pattern annotations effectively. as shown in our ex- periments, our method can be potentially applied to many interesting real world tasks through selecting different con- text units and focusing on candidate patterns for ssps. although the proposed spa framework is quite general, in this paper, we only studied some specific instantiation of the framework based on mutual information weighting and cosine similarity measure. a major goal for future research is to fully develop the potential of the proposed framework by studying alternative instantiations. for example, we may explore other options for context unit weighting and seman- tic similarity measurement, the two key components in our framework. 8. acknowledgments we thank tao tao and xu ling for providing the datasets of motif-go matching and gene synonym matching, respec- tively. this work was in part supported by the national science foundation under award numbers 0425852. 9. references [1] f. afrati, a. gionis, and h. mannila. approximating a collection of frequent sets. in proceedings of the tenth acm sigkdd international conference on knowledge discovery and data mining, pages 12-19, 2004. [2] r. agrawal, t. imieliski, and a. swami. mining association rules between sets of items in large databases. in proceedings of the 1993 acm sigmod international conference on management of data, pages 207-216, 1993. [3] r. agrawal and r. srikant. mining sequential patterns. in proceedings of the eleventh international conference on data engineering, pages 3-14, 1995. [4] s. brin, r. motwani, and c. silverstein. beyond market baskets: generalizing association rules to correlations. in proceedings of the 1997 acm sigmod international conference on management of data, pages 265-276, 1997. [5] s. c. deerwester, s. t. dumais, t. k. landauer, g. w. furnas, and r. a. harshman. indexing by latent semantic analysis. journal of the american society of information science, 41(6):391-407, 1990. [6] m. deshpande, m. kuramochi, and g. karypis. frequent sub-structure-based approaches for classifying chemical compounds. in proceedings of icdm'03, page 35, 2003. [7] g. grahne and j. zhu. efficiently using prefix-trees in mining frequent itemsets. in fimi'03 workshop on frequent itemset mining implementations., 2003. [8] j. han, j. pei, y. yin, and r. mao. mining frequent patterns without candidate generation: a frequent-pattern tree approach. data min. knowl. discov., 8(1):53-87, 2004. [9] j. han, j. wang, y. lu, and p. tzvetkov. mining top-k frequent closed patterns without minimum support. in proceedings of icdm'02, 2002. [10] p. jaccard. nouvelles recherches sur la distribution florale. bull. soc. vaudoise sci. nat., 44:223c-270, 1908. [11] p. kantor and e. voorhees. the trec-5 confusion track: comparing retrieval methods for scanned text. information retrieval, 2:165-176, 2000. [12] r. krovetz. viewing morphology as an inference process. in proceedings of sigir '93, pages 191-202, 1993. [13] d. lin and p. pantel. induction of semantic classes from natural language text. in proceedings of kdd'01, pages 317-322, 2001. [14] x. ling, j. jiang, x. he, q. mei, c. zhai, and b. schatz. automatically generating gene summaries from biomedical literature. in proceedings of pacific symposium on biocomputing, pages 40-51, 2006. [15] n. pasquier, y. bastide, r. taouil, and l. lakhal. discovering frequent closed itemsets for association rules. in proceeding of the 7th international conference on database theory, pages 398-416, 1999. [16] j. roberto j. bayardo. efficiently mining long patterns from databases. in proceedings of the 1998 acm sigmod international conference on management of data, pages 85-93, 1998. [17] g. salton, a. wong, and c. s. yang. a vector space model for automatic indexing. commun. acm, 18(11):613-620, 1975. [18] t. tao, c. zhai, x. lu, and h. fang. a study of statistical methods for function prediction of protein motifs. applied bioinformatics, 3(2-3):115-124, 2004. [19] k. wang, c. xu, and b. liu. clustering transactions using large items. in proceedings of cikm'99, pages 483-490, 1999. [20] d. xin, j. han, x. yan, and h. cheng. mining compressed frequent-pattern sets. in proceedings of vldb'05, pages 709-720, 2005. [21] x. yan, h. cheng, j. han, and d. xin. summarizing itemset patterns: a profile-based approach. in proceeding of the eleventh acm sigkdd international conference on knowledge discovery in data mining, pages 314-323, 2005. [22] x. yan and j. han. gspan: graph-based substructure pattern mining. in proceedings icdm'02, pages 721-724, 2002. [23] x. yan, j. han, and r. afshar. clospan: mining closed sequential patterns in large datasets. in proceedings of sdm'03, pages 166-177, 2003. reproducing paper on generating semantic annotations for frequent patterns with context analysis project overview: in this project, we have tried to reproduce the model and results from the following published paper on pattern annotation. qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 the goal is to annotate a frequent pattern with in-depth, concise, and structured information that can better indicate the hidden meanings of the pattern. this model will automatically generate such annotation for a frequent pattern by constructing its context model, selecting informative context indicators, and extracting representative transactions and semantically similar patterns. this general approach has potentially many applications such as generating a dictionary like description for a pattern, finding synonym patterns, discovering semantic relations, ranking patterns, categorizing and clustering patterns with semantics, and summarizing semantic classes of a set of frequent patterns. experiment from the paper reproduced: given a set of authors/co-authors, annotate each of them with their strongest context indicators, the most representative titles from their publications, and the co-authors and title patterns which are most semantically similar to them. implementation approach: here, the general approach taken to automatically generate the frequent patterns and structured annotations for them by the following steps: 1. derive the frequent patterns author/co-author pattern from the database using fp growth algorithm. 2. define and model the context of the pattern: derive the context units for the author/co-authors by mining the closed frequent pattern to avoid any redundant pattern derive the context units for the titles by mining the sequential closed frequent pattern using prefix span algorithm select context units and design a strength weight for each unit to model the contexts of frequent pattern 3. derive the list of representative transaction by finding the cosine similarity between the frequent pattern & the frequent transactions 4. derive the semantically similar author pattern by finding the cosine similarity between the context units of the frequent pattern with the other context units and annotating it with contextually similar frequent author/co-author 5. derive the semantically similar title pattern by finding the cosine similarity between the context units of the frequent pattern with the other context units and annotating it with contextually similar title words installation and usage: the following packages must be installed for the successful execution: https://test.pypi.org/simple/ krovetz prefixspan, re, csv, pandas, numpy, mlxtend, sklearn note: to use the krovetz stemmer installed, visual studio c++ is needed to be installed. team members had issues running the program without it. input data: here the input dataset (dblp dataset) is in a specific format. dblp dataset (a subset of around 12k transactions/titles papers from the proceedings of 12 major conferences in data mining; around 1k latest transactions from each of such conference). each row represents a title presented in a conference. it has 3 fields - id (numeric), title (string) and mergedauthors (string). the authors and co-authors associated with the title has been merged into a single column for easy analysis. output: once the program patternannotation.py is executed, it takes the dblp_dataset.csv as the input and generates the output.txt file in the same path where source code exists. this output file contains all the closed frequent patterns and their most representative context indicators, most representative transactions (capped as 4), semantically similar patterns (ssps) as per co-author patterns and title term patterns. each record in the output file represents one closed frequent pattern and their associated details. manually converted output to output.xlsx, with summary information of the annotated pattern is available as well: i - context indicator; t - representative transactions; sspa - semantically similar author pattern; sspt - semantically similar title pattern implementation details: derive the frequent itemsets of author/co-author: algorithm used: fp growth output: 64 frequent author/co-author itemsets (removed any frequent author without co-author) define and model the context of the pattern: for each of the 64 frequent itemsets from the above step: derive the context units for the author/co-authors: mined closed author/co-author itemsets from already mining frequent itemsets by removing any itemset with redundant support derive the context units for the title: algorithm used: prefix span; we got limited title patterns, hence we did not need micro-clustering to further reduce the titles. final context indicator: merged the context units of the above two steps context indicator weighting: here we slightly modified our approach to weighting as the mutual information value was not giving the appropriate weightage, based on our analysis & understanding. we use an approach similar to idf, where when a context unit is present in more transaction, the weightage is reduced & any context unit that uniquely appears in the transaction will have the highest weightage. derive the list of representative transaction: based on the context indicators identified for each of the frequent itemset, we identified top 4 transactions with the highest cosine similarity derive the list of semantically similar author/co-author pattern: based on the context indicators identified for each of the frequent itemset, we identified which of the other 63 context indicators are similar using cosine similarity. we took the top 3 similar context indicators & took their author/co-author as the ssp derive the list of semantically similar author/co-author pattern: based on the context indicators identified for each of the frequent itemset, we identified which of the other 63 context indicators are similar using cosine similarity. we took the top 3 similar context indicators & took their frequent title pattern as the ssp team contribution: name id contribution bipin chandra karnati karnati3 analysis, implementation of extracting title patterns of frequent authors, context indicator identification, code integration savitha govindarajan savitha3 analysis, implementation of extracting itemsets of frequent authors, ssp author pattern, co-ordination, code integration utpal mondal umondal2 analysis, data extraction & clean up, implementation of cosine similarity, detailed analysis on mi, documentation , code integration references: qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 fp growth algorithm implementation: https://towardsdatascience.com/fp-growth-frequent-pattern-generation-in-data-mining-with-python-implementation-244e561ab1c3 prefix span: https://pypi.org/project/prefixspan/ cosine similarity: https://blog.christianperone.com/2013/09/machine-learning-cosine-similarity-for-vector-space-models-part-iii/ dblp dataset: 12 major conferences on data mining. 1000 latest titles from each conference acl - annual meeting of the association for computational linguistics (https://dblp.uni-trier.de/db/conf/acl/) adbis - symposium on advances in databases and information systems (https://dblp.uni-trier.de/db/conf/adbis/) cikm - international conference on information and knowledge management (https://dblp.uni-trier.de/db/conf/cikm/) ecir - european conference on information retrieval (https://dblp.uni-trier.de/db/conf/ecir/) icde - ieee international conference on data engineering (https://dblp.uni-trier.de/db/conf/icde/) icdm - ieee international conference on data mining (https://dblp.uni-trier.de/db/conf/icdm/) kdd - knowledge discovery and data mining (https://dblp.uni-trier.de/db/conf/kdd/) pakdd - pacific-asia conference on knowledge discovery and data mining (https://dblp.uni-trier.de/db/conf/pakdd/) sdm - siam international conference on data mining (https://dblp.uni-trier.de/db/conf/sdm/) sigir - annual international acm sigir conference on research and development in information retrieval (https://dblp.uni-trier.de/db/conf/sigir/) wsdm - web search and data mining (https://dblp.uni-trier.de/db/conf/wsdm/) www - the web conference (https://dblp.uni-trier.de/db/conf/www/) reproducing the paper on pattern annotation team members: bipin chandra karnati (karnati3@illinois.edu ) savitha govindarajan (savitha3@illinois.edu ) utpal mondal (umondal2@illiniois.edu) team leader: savitha govindarajan (savitha3@illinois.edu ) team name: avengers progress report: 1. which tasks have been completed?  reviewed the paper to understand what is implemented, how it is implemented and the experiments in the paper  made decision on which of the experiments need to be implemented using the code  collected the data required to reproduce the paper & working on the required data clean up  organized a plan and the work split up amongst each team member 2. which tasks are pending?  code implementation to reproduce the paper  validating the code to conclude the same results as in the paper 3. are you facing any challenges?  no specific open challenges at this point reproducing the paper on pattern annotation team members: bipin chandra karnati (karnati3@illinois.edu ) savitha govindarajan (savitha3@illinois.edu ) utpal mondal (umondal2@illiniois.edu) team leader: savitha govindarajan (savitha3@illinois.edu ) team name: avengers paper chosen: generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 authors: qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai year published: 2006 implementation language: python dataset used in paper: dlbp data set availability of dataset: yes. we have the data subset (https://hpi.de/naumann/projects/repeatability/datasets/dblp-dataset.html) & working on getting the exhaustive data set. courseproject: cs410 - text information systems generating semantic annotations for frequent pattern with context analysis project overview: in this project, we have tried to reproduce the model and results from the following published paper on pattern annotation. qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 the goal is to annotate a frequent pattern with in-depth, concise, and structured information that can better indicate the hidden meanings of the pattern. this model will automatically generate such annotation for a frequent pattern by constructing its context model, selecting informative context indicators, and extracting representative transactions and semantically similar patterns. this general approach has potentially many applications such as generating a dictionary like description for a pattern, finding synonym patterns, discovering semantic relations, ranking patterns, categorizing and clustering patterns with semantics, and summarizing semantic classes of a set of frequent patterns. experiment from the paper reproduced: given a set of authors/co-authors, annotate each of them with their strongest context indicators, the most representative titles from their publications, and the co-authors and title patterns which are most semantically similar to them. implementation approach: here, the general approach taken to automatically generate the frequent patterns and structured annotations for them by the following steps: 1. derive the frequent patterns author/co-author pattern from the database using fp growth algorithm. 2. define and model the context of the pattern: * derive the context units for the author/co-authors by mining the closed frequent pattern to avoid any redundant pattern * derive the context units for the titles by mining the sequential closed frequent pattern using prefix span algorithm * select context units and design a strength weight for each unit to model the contexts of frequent pattern 3. derive the list of representative transaction by finding the cosine similarity between the frequent pattern & the frequent transactions 4. derive the semantically similar author pattern by finding the cosine similarity between the context units of the frequent pattern with the other context units and annotating it with contextually similar frequent author/co-author 5. derive the semantically similar title pattern by finding the cosine similarity between the context units of the frequent pattern with the other context units and annotating it with contextually similar title words installation and usage: the following packages must be installed for the successful execution: https://test.pypi.org/simple/krovetz prefixspan, re, csv, pandas, numpy, mlxtend, sklearn note: to use the krovetz stemmer installed, visual studio c++ is needed to be installed. team members had issues running the program without it. input data: here the input dataset (dblp dataset) is in a specific format. dblp dataset (a subset of around 12k transactions/titles papers from the proceedings of 12 major conferences in data mining; around 1k latest transactions from each of such conference). each row represents a title presented in a conference. it has 3 fields - id (numeric), title (string) and mergedauthors (string). the authors and co-authors associated with the title has been merged into a single column for easy analysis. output: once the program patternannotation.py is executed, it takes the dblp_dataset.csv as the input and generates the output.txt file in the same path where source code exists. this output file contains all the closed frequent patterns and their most representative context indicators, most representative transactions (capped as 4), semantically similar patterns (ssps) as per co-author patterns and title term patterns. each record in the output file represents one closed frequent pattern and their associated details. implementation details: derive the frequent itemsets of author/co-author: * algorithm used: fp growth * output: 64 frequent author/co-author itemsets (removed any frequent author without co-author) define and model the context of the pattern: for each of the 64 frequent itemsets from the above step: * derive the context units for the author/co-authors: mined closed author/co-author itemsets from already mining frequent itemsets by removing any itemset with redundant support * derive the context units for the title: algorithm used: prefix span; we got limited title patterns, hence we did not need micro-clustering to further reduce the titles. * final context indicator: merged the context units of the above two steps * context indicator weighting: here we slightly modified our approach to weighting as the mutual information value was not giving the appropriate weightage, based on our analysis & understanding. we use an approach similar to idf, where when a context unit is present in more transaction, the weightage is reduced & any context unit that uniquely appears in the transaction will have the highest weightage. derive the list of representative transaction: * based on the context indicators identified for each of the frequent itemset, we identified top 4 transactions with the highest cosine similarity derive the list of semantically similar author/co-author pattern: * based on the context indicators identified for each of the frequent itemset, we identified which of the other 63 context indicators are similar using cosine similarity. we took the top 3 similar context indicators & took their author/co-author as the ssp derive the list of semantically similar author/co-author pattern: * based on the context indicators identified for each of the frequent itemset, we identified which of the other 63 context indicators are similar using cosine similarity. we took the top 3 similar context indicators & took their frequent title pattern as the ssp video presentation: https://mediaspace.illinois.edu/media/t/1_hdhp3434 references: qiaozhu mei, dong xin, hong cheng, jiawei han, and chengxiang zhai. 2006. generating semantic annotations for frequent patterns with context analysis. in proceedings of the 12th acm sigkdd international conference on knowledge discovery and data mining (kdd 2006). acm, new york, ny, usa, 337-346. doi=10.1145/1150402.1150441 fp growth algorithm implementation: https://towardsdatascience.com/fp-growth-frequent-pattern-generation-in-data-mining-with-python-implementation-244e561ab1c3 prefix span: https://pypi.org/project/prefixspan/ cosine similarity: https://blog.christianperone.com/2013/09/machine-learning-cosine-similarity-for-vector-space-models-part-iii/ dblp dataset: 12 major conferences on data mining. 1000 latest titles from each conference acl - annual meeting of the association for computational linguistics (https://dblp.uni-trier.de/db/conf/acl/) adbis - symposium on advances in databases and information systems (https://dblp.uni-trier.de/db/conf/adbis/) cikm - international conference on information and knowledge management (https://dblp.uni-trier.de/db/conf/cikm/) ecir - european conference on information retrieval (https://dblp.uni-trier.de/db/conf/ecir/) icde - ieee international conference on data engineering (https://dblp.uni-trier.de/db/conf/icde/) icdm - ieee international conference on data mining (https://dblp.uni-trier.de/db/conf/icdm/) kdd - knowledge discovery and data mining (https://dblp.uni-trier.de/db/conf/kdd/) pakdd - pacific-asia conference on knowledge discovery and data mining (https://dblp.uni-trier.de/db/conf/pakdd/) sdm - siam international conference on data mining (https://dblp.uni-trier.de/db/conf/sdm/) sigir - annual international acm sigir conference on research and development in information retrieval (https://dblp.uni-trier.de/db/conf/sigir/) wsdm - web search and data mining (https://dblp.uni-trier.de/db/conf/wsdm/) www - the web conference (https://dblp.uni-trier.de/db/conf/www/)"	['generating', 'semantic', 'annotations', 'frequent', 'patterns', 'context', 'analysis', 'qiaozhu', 'mei', 'dong', 'xin', 'hong', 'cheng', 'jiawei', 'han', 'chengxiang', 'zhai', 'department', 'computer', 'science', 'university', 'illinois', 'urbana', 'champaign', 'urbanail', 'qmei', 'dongxin', 'hcheng', 'hanj', 'czhai', 'uiucedu', 'abstract', 'fundamental', 'data', 'mining', 'task', 'pattern', 'widespread', 'applications', 'many', 'different', 'domains', 'search', 'far', 'mostly', 'focused', 'developing', 'efficient', 'algorithms', 'discover', 'various', 'kinds', 'little', 'attention', 'paid', 'important', 'next', 'step', 'interpreting', 'discovered', 'although', 'recent', 'work', 'studied', 'com', 'pression', 'summarization', 'pro', 'posed', 'techniques', 'annotate', 'nonsemantical', 'information', 'eg', 'support', 'provides', 'limited', 'help', 'user', 'understand', 'paper', 'propose', 'novel', 'problem', 'generat', 'ing', 'goal', 'indepth', 'concise', 'structured', 'better', 'indicate', 'hidden', 'meanings', 'general', 'approach', 'generate', 'annotation', 'con', 'structing', 'model', 'selecting', 'informative', 'indicators', 'extracting', 'representative', 'transactions', 'semantically', 'similar', 'po', 'tentially', 'dictionary', 'like', 'description', 'finding', 'synonym', 'discovering', 'relations', 'summarizing', 'classes', 'set', 'experiments', 'differ', 'ent', 'datasets', 'show', 'effective', 'categories', 'subject', 'descriptors', 'h', 'database', 'management', 'terms', 'keywords', 'introduction', 'broad', 'association', 'rule', 'min', 'correlation', 'classification', 'cluster', 'large', 'databases', 'central', 'research', 'topic', 'years', 'permission', 'make', 'digital', 'hard', 'copies', 'part', 'personal', 'classroom', 'use', 'granted', 'without', 'fee', 'provided', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'full', 'citation', 'first', 'page', 'copy', 'otherwise', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'prior', 'specific', 'andor', 'kdd', 'august', 'philadelphia', 'pennsylvania', 'usa', 'copyright', 'acm', 'developed', 'item', 'sets', 'sequential', 'graph', 'etc', 'usually', 'output', 'complete', 'efficiently', 'provide', 'basic', 'statis', 'tic', 'however', 'excessive', 'volume', 'lack', 'difficult', 'interpret', 'explore', 'cases', 'wants', 'small', 'interesting', 'exploring', 'rough', 'idea', 'analogous', 'literature', 'reviewing', 'deciding', 'whether', 'read', 'reader', 'often', 'look', 'short', 'summary', 'main', 'ideas', 'similarly', 'also', 'highly', 'desirable', 'fre', 'quent', 'explain', 'potential', 'decide', 'therefore', 'new', 'major', 'challenge', 'raised', 'researchers', 'present', 'discov', 'ered', 'order', 'exploration', 'individual', 'meet', 'facilitate', 'interpretation', 'need', 'enriched', 'descriptions', 'associated', 'employed', 'concepts', 'closed', 'maximum', 'shrink', 'size', 'beyond', 'recently', 'methods', 'either', 'mine', 'compressed', 'summarize', 'ones', 'employ', 'extra', 'infor', 'mation', 'simple', 'transaction', 'coverage', 'pat', 'tern', 'profiles', 'successfully', 'reduce', 'number', 'inter', 'esting', 'patten', 'restricted', 'morphological', 'statistics', 'sup', 'port', 'profile', 'annota', 'tion', 'users', 'could', 'infer', 'semantics', 'thus', 'still', 'occurs', 'figure', 'worth', 'study', 'automatically', 'gen', 'erating', 'mean', 'extract', 'indicates', 'appropriate', 'generally', 'meaning', 'inferred', 'objects', 'cooccurring', 'appears', 'principle', 'expect', 'compact', 'well', 'indicative', 'criterion', 'entries', 'term', 'example', 'entry', 'paetn', 'noun', 'definitions', 'form', 'proposed', 'imitation', 'natural', 'chance', 'configuration', 'sentences', 'dressmakers', 'events', 'thesaurus', 'archetype', 'design', 'exemplar', 'motif', 'see', 'typical', 'follows', 'nonsemantic', 'presented', 'second', 'group', 'given', 'suggests', 'followed', 'several', 'usage', 'besides', 'synonyms', 'pre', 'sented', 'analogically', 'types', 'formation', 'helpful', 'himher', 'ex', 'plore', 'trivial', 'mor', 'phological', 'ideally', 'precise', 'unfortu', 'nately', 'practical', 'expertise', 'domain', 'opt', 'presumably', 'inspired', 'language', 'processing', 'word', 'words', 'sharing', 'contexts', 'tend', 'specifically', 'defining', 'analyzing', 'find', 'strong', 'represent', 'want', 'best', 'analogical', 'finally', 'ssps', 'ie', 'original', 'extracted', 'thesauri', 'fore', 'spa', 'shown', 'annotating', 'selected', 'merriamwebsters', 'collegiate', 'constraint', 'apriori', 'fpgrowth', 'rakesh', 'agrawal', 'candidate', 'close', 'itemset', 'text', 'dictionarylike', 'lated', 'consisting', 'strongest', 'despite', 'importance', 'knowledge', 'addressed', 'existing', 'define', 'auto', 'matically', 'ample', 'formally', 'modeling', 'weighting', 'based', 'strength', 'ranking', 'trans', 'actions', 'similarity', 'empirical', 'three', 'algorithm', 'applied', 'real', 'world', 'tasks', 'generated', 'potentially', 'terns', 'categorizing', 'clustering', 'semantical', 'method', 'appli', 'cations', 'include', 'compression', 'discovery', 'rest', 'organized', 'section', 'series', 'problems', 'introduce', 'modeled', 'instanti', 'ated', 'generation', 'discuss', 'results', 'related', 'conclusions', 'respectively', 'formulation', 'let', 'tn', 'containing', 'ti', 'itemsets', 'sequences', 'graphs', 'pa', 'subsequence', 'subgraph', 'pd', 'p', 'pl', 'denote', 'da', 'tipa', 'definition', 'dataset', 'userspecified', 'threshold', 'called', 'de', 'noted', 'sa', 'unit', 'ob', 'ject', 'carries', 'cooccurs', 'least', 'one', 'units', 'satisfying', 'denoted', 'ud', 'practice', 'depending', 'ca', 'represented', 'ua', 'every', 'u', 'indicator', 'weight', 'wu', 'measures', 'following', 'two', 'possible', 'single', 'items', 'appear', 'diaper', 'milk', 'baby', 'carriage', 'lotion', 'camera', 'memory', 'disk', 'printer', 'exemplary', 'concept', 'subproblems', 'consists', 'ia', 'st', 'ta', 'stt', 'measure', 'cp', 'closer', 'select', 'subset', 'w', 'construct', 'extraction', 'sim', 'ilarity', 'c', 'k', 'simt', 'ssp', 'pc', 'simc', 'tween', 'simcp', 'may', 'significant', 'semanti', 'cally', 'challenging', 'aspects', 'huge', 'immediately', 'clear', 'analyze', 'function', 'nontrivial', 'since', 'training', 'available', 'must', 'completely', 'unsupervised', 'way', 'challenges', 'great', 'advan', 'tage', 'depend', 'sections', 'approaches', 'annotat', 'ap', 'propriate', 'weights', 'carry', 'discriminate', 'discriminating', 'power', 'captured', 'vector', 'space', 'vsm', 'commonly', 'used', 'nat', 'ural', 'retrieval', 'content', 'document', 'query', 'vec', 'tors', 'phrase', 'element', 'corresponds', 'reflecting', 'documents', 'queries', 'measured', 'distance', 'vectors', 'purpose', 'transac', 'makes', 'assump', 'dimensions', 'gives', 'flexibility', 'selection', 'um', 'wm', 'wi', 'wui', 'v', 'vm', 'vi', 'iff', 'ui', 'key', 'issues', 'assign', 'dimension', 'effectiveness', 'dependent', 'actually', 'due', 'generality', 'vectorspace', 'quite', 'covers', 'strategies', 'selec', 'weighing', 'functions', 'subsections', 'solutions', 'explored', 'nonmorphological', 'defined', 'notion', 'cover', 'special', 'yan', 'et', 'al', 'introduced', 'bernoulli', 'distribution', 'fact', 'written', 'wo', 'wod', 'oi', 'woi', 'tj', 'j', 'oth', 'erwise', 'shows', 'instance', 'others', 'frequentpattern', 'computed', 'estingly', 'stance', 'wt', 'wtk', 'wti', 'covering', 'instances', 'benefits', 'assume', 'assumes', 'allows', 'granularity', 'strate', 'gies', 'carrying', 'nucleotides', 'dna', 'carried', 'complex', 'noisy', 'bridges', 'gap', 'allowing', 'level', 'beliefs', 'furthermore', 'adaptive', 'easily', 'plugged', 'flexible', 'object', 'serves', 'itemspatterns', 'characteristics', 'losing', 'minimal', 'considered', 'spe', 'cific', 'sequence', 'viewed', 'length', 'identical', 'transactional', 'choos', 'optimized', 'fer', 'vertices', 'edges', 'noninformative', 'strategy', 'much', 'freedom', 'cause', 'redundancy', 'redundant', 'discussed', 'previous', 'informa', 'discriminative', 'granu', 'larity', 'become', 'less', 'severely', 'comes', 'added', 'would', 'weakened', 'always', 'contain', 'likely', 'means', 'pendent', 'dundancy', 'brings', 'lot', 'unnecessary', 'dimensionality', 'already', 'high', 'affect', 'efficiency', 'accuracy', 'computation', 'essential', 'amine', 'remove', 'removal', 'think', 'using', 'reduction', 'practically', 'interested', 'low', 'quency', 'initially', 'exist', 'meth', 'ods', 'enough', 'lsi', 'dimensional', 'spaces', 'espe', 'cially', 'aim', 'mit', 'igate', 'sparseness', 'reducing', 'dimen', 'sionality', 'tuned', 'removing', 'reduc', 'consider', 'preserved', 'propagated', 'correspond', 'ab', 'abc', 'spectively', 'wrt', 'neither', 'technique', 'directly', 'applicable', 'examine', 'alternative', 'noticing', 'caused', 'inclusion', 'sub', 'solve', 'maximal', 'superpattern', 'easy', 'lose', 'cube', 'prediction', 'removed', 'exists', 'super', 'pb', 'db', 'assumption', 'reasonable', 'another', 'se', 'mantic', 'initial', 'found', 'microclustering', 'stated', 'disturbance', 'within', 'result', 'hundreds', 'subpatterns', 'supports', 'cannot', 'pruned', 'usu', 'ally', 'slightly', 'master', 'weak', 'included', 'preprocessing', 'points', 'microclutering', 'jaccard', 'dpa', 'cooccurrence', 'tions', 'clusters', 'distances', 'innercluster', 'bounded', 'hierarchical', 'iteratively', 'smallest', 'input', 'n', 'pn', 'g', 'initialize', 'ci', 'compute', 'dij', 'among', 'current', 'mindij', 'dst', 'argminijdij', 'merge', 'cs', 'ct', 'cu', 'foreach', 'cv', 'duv', 'maxdab', 'avgdab', 'add', 'argmini', 'di', 'return', 'onepass', 'dau', 'argminu', 'dav', 'else', 'thest', 'termi', 'nates', 'becomes', 'larger', 'algo', 'rithm', 'call', 'assigns', 'nearest', 'farthest', 'give', 'us', 'microclusters', 'guarantee', 'pair', 'medoid', 'varying', 'levels', 'passes', 'expense', 'quality', 'depends', 'performance', 'compared', 'remaining', 'represents', 'corresponding', 'intuitively', 'frequently', 'cooccur', 'infrequently', 'good', 'expected', 'satisfy', 'constraints', 'wpa', 'equally', 'appearance', 'inde', 'obvious', 'choice', 'cooccurrences', 'hand', 'penalize', 'globally', 'common', 'col', 'lection', 'times', 'indica', 'tor', 'strongly', 'correlated', 'weighted', 'higher', 'principled', 'mutual', 'mi', 'widely', 'independency', 'random', 'variables', 'theory', 'variable', 'tells', 'x', 'ix', 'xx', 'yy', 'px', 'ylog', 'pxpy', 'dadb', 'dbdadb', 'dadadb', 'ddadb', 'stan', 'dard', 'laplace', 'smoothing', 'avoid', 'zero', 'probability', 'proved', 'satisfies', 'favors', 'ply', 'closeness', 'testing', 'redun', 'dant', 'apply', 'uk', 'wuk', 'texts', 'comparing', 'models', 'cb', 'cd', 'vk', 'xvk', 'r', 'simca', 'say', 'ilar', 'cosine', 'relevance', 'mea', 'sure', 'ai', 'bi', 'b', 'ak', 'bk', 'anno', 'tations', 'wk', 'uj', 'wj', 'rank', 'descending', 'top', 'uis', 'tl', 'kt', 'achieve', 'simct', 'ts', 'believed', 'candidates', 'mantics', 'kc', 'whose', 'cpc', 'simcpi', 'pi', 'pis', 'note', 'whole', 'homogenous', 'heterogenous', 'terminology', 'familiar', 'unfamiliar', 'interest', 'experiment', 'realworld', 'dblp', 'contains', 'papers', 'proceedings', 'ferences', 'parts', 'authors', 'title', 'cor', 'responding', 'coauthorship', 'designed', 'authorscoauthors', 'repre', 'sentative', 'titles', 'publications', 'coauthors', 'necessarily', 'influential', 'rather', 'distinguish', 'tate', 'authorcoauthors', 'necessar', 'ily', 'wellknown', 'topics', 'tools', 'fpclose', 'clospan', 'co', 'respec', 'tively', 'stemmed', 'krovertz', 'stemmer', 'converts', 'variations', 'english', 'root', 'minimum', 'httpwwwinformatikunitrierdeleydb', 'outputs', 'get', 'smaller', 'average', 'medoids', 'members', 'associate', 'stream', 'table', 'gorithm', 'begin', 'grouped', 'reduces', 'assigned', 'clus', 'ters', 'achieved', 'sum', 'marization', 'selectively', 'system', 'authorship', 'tle', 'reflect', 'even', 'jiayong', 'wang', 'jiong', 'yangphilip', 'yuwei', 'actu', 'xifeng', 'yanjiawei', 'author', 'diverse', 'instead', 'write', 'coappear', 'descriptive', 'filter', 'xquery', 'scenarios', 'capture', 'dic', 'tionary', 'effectively', 'quantitatively', 'evaluate', 'applying', 'matching', 'motifs', 'go', 'promising', 'computa', 'tional', 'biology', 'predict', 'newly', 'protein', 'conserved', 'amino', 'acid', 'characterizing', 'proteins', 'match', 'gene', 'type', 'philip', 'yu', 'index', 'gspan', 'graphbase', 'substructure', 'relational', 'connect', 'coauthor', 'hanphilip', 'jian', 'peijiawei', 'jianyong', 'spiros', 'papadimitriou', 'fast', 'fractal', 'correlate', 'christos', 'faloutso', 'multiattribute', 'hash', 'gray', 'code', 'recovere', 'latent', 'timesery', 'observe', 'network', 'tomography', 'particle', 'multimedia', 'tutorial', 'time', 'spatial', 'access', 'bruce', 'croft', 'web', 'monika', 'rauch', 'henzinger', 'james', 'callan', 'fulltext', 'probabilist', 'murali', 'mani', 'jens', 'teubner', 'tree', 'implement', 'xml', 'estimate', 'exclude', 'collection', 'ontologygo', 'mo', 'tif', 'formalize', 'tagged', 'annotated', 'explicit', 'judgments', 'gold', 'perfor', 'mance', 'variant', 'recip', 'rocal', 'mrr', 'notated', 'convenience', 'gc', 'rect', 'judgement', 'pick', 'ranked', 'treated', 'gi', 'rgi', 'mrra', 'rg', 'ith', 'correct', 'list', 'take', 'pap', 'overall', 'file', 'clearly', 'value', 'precision', 'topranked', 'highest', 'influence', 'lazy', 'randomly', 'score', 'emrr', 'drops', 'monotonously', 'increases', 'baseline', 'compare', 'overlapping', 'preprocess', 'dicators', 'motifgo', 'consistently', 'outperforming', 'achieves', 'describes', 'aspect', 'shared', 'interestingly', 'hardly', 'penalizes', 'detailed', 'discussion', 'outperforms', 'aims', 'ever', 'test', 'biomedical', 'aliases', 'studies', 'known', 'together', 'replaceable', 'detecting', 'application', 'id', 'fbgn', 'abnormal', 'chemosensory', 'jump', 'acj', 'ipou', 'pou', 'cg', 'twin', 'female', 'sterile', 'tekele', 'fs', 'sz', 'tek', 'examples', 'fly', 'genes', 'biocre', 'ative', 'ling', 'collected', 'abstracts', 'medline', 'keyword', 'drosophila', 'tain', 'kept', 'mix', 'belong', 'recover', 'mixed', 'evaluated', 'evaluation', 'micro', 'seconds', 'timehier', 'mrrhier', 'mrronep', 'timeonep', 'effect', 'hier', 'onep', 'microclus', 'tering', 'minsup', 'avg', 'ef', 'fective', 'significantly', 'performs', 'yields', 'sults', 'indeed', 'improves', 'sys', 'tem', 'improvement', 'httpwwwpdgcnbuamesbiolinkbiocreativeevalhtml', 'httpwwwncbinlmnihgoventrezqueryfcgi', 'decaying', 'bet', 'ter', 'ficiency', 'improve', 'decreases', 'penalized', 'lost', 'useful', 'around', 'comparable', 'hi', 'erarchical', 'early', 'nation', 'saves', 'affected', 'overhead', 'suffer', 'pairs', 'coupled', 'focuses', 'address', 'postprocess', 'topk', 'keeping', 'impor', 'tant', 'none', 'additional', 'pret', 'tends', 'ignored', 'develop', 'approx', 'imate', 'plored', 'kind', 'action', 'natu', 'ral', 'deals', 'nonredundant', 'wordbased', 'people', 'optimally', 'generates', 'amount', 'providing', 'postprocessing', 'marize', 'compress', 'shrinks', 'notation', 'exploit', 'eral', 'deal', 'periments', 'focusing', 'framework', 'instantiation', 'future', 'fully', 'studying', 'instantiations', 'options', 'seman', 'measurement', 'components', 'acknowledgments', 'thank', 'tao', 'xu', 'supported', 'national', 'foundation', 'award', 'numbers', 'references', 'f', 'afrati', 'gionis', 'mannila', 'approximating', 'tenth', 'sigkdd', 'international', 'conference', 'pages', 'imieliski', 'swami', 'rules', 'sigmod', 'srikant', 'eleventh', 'engineering', 'brin', 'motwani', 'silverstein', 'market', 'baskets', 'generalizing', 'correlations', 'deerwester', 'dumais', 'landauer', 'furnas', 'harshman', 'indexing', 'journal', 'american', 'society', 'deshpande', 'kuramochi', 'karypis', 'substructurebased', 'classifying', 'chemical', 'compounds', 'icdm', 'grahne', 'zhu', 'prefixtrees', 'fimi', 'workshop', 'implementations', 'pei', 'yin', 'mao', 'knowl', 'lu', 'tzvetkov', 'nouvelles', 'recherches', 'sur', 'la', 'florale', 'bull', 'soc', 'vaudoise', 'sci', 'kantor', 'e', 'voorhees', 'trec', 'confusion', 'track', 'scanned', 'krovetz', 'viewing', 'morphology', 'inference', 'process', 'sigir', 'lin', 'pantel', 'induction', 'jiang', 'q', 'schatz', 'summaries', 'pacific', 'symposium', 'biocomputing', 'pasquier', 'bastide', 'taouil', 'l', 'lakhal', 'proceeding', 'th', 'roberto', 'bayardo', 'long', 'salton', 'wong', 'yang', 'automatic', 'commun', 'fang', 'statistical', 'bioinformatics', 'liu', 'cikm', 'vldb', 'profilebased', 'graphbased', 'afshar', 'sdm', 'reproducing', 'project', 'overview', 'tried', 'reproduce', 'published', 'york', 'ny', 'doi', 'constructing', 'reproduced', 'implementation', 'taken', 'steps', 'derive', 'authorcoauthor', 'fp', 'growth', 'prefix', 'span', 'contextually', 'installation', 'packages', 'installed', 'successful', 'execution', 'httpstestpypiorgsimple', 'prefixspan', 'csv', 'pandas', 'numpy', 'mlxtend', 'sklearn', 'visual', 'studio', 'needed', 'team', 'running', 'program', 'format', 'transactionstitles', 'conferences', 'latest', 'row', 'fields', 'numeric', 'string', 'mergedauthors', 'merged', 'column', 'patternannotationpy', 'executed', 'takes', 'dblp_datasetcsv', 'outputtxt', 'path', 'source', 'capped', 'per', 'record', 'details', 'manually', 'converted', 'outputxlsx', 'sspa', 'sspt', 'mined', 'got', 'hence', 'final', 'modified', 'giving', 'weightage', 'understanding', 'idf', 'reduced', 'uniquely', 'identified', 'took', 'contribution', 'name', 'bipin', 'chandra', 'karnati', 'identification', 'integration', 'savitha', 'govindarajan', 'coordination', 'utpal', 'mondal', 'umondal', 'clean', 'documentation', 'httpstowardsdatasciencecomfpgrowthfrequentpatterngenerationindataminingwithpythonimplementationeabc', 'httpspypiorgprojectprefixspan', 'httpsblogchristianperonecommachinelearningcosinesimilarityforvectorspacemodelspartiii', 'acl', 'annual', 'meeting', 'computational', 'linguistics', 'httpsdblpunitrierdedbconfacl', 'adbis', 'advances', 'systems', 'httpsdblpunitrierdedbconfadbis', 'httpsdblpunitrierdedbconfcikm', 'ecir', 'european', 'httpsdblpunitrierdedbconfecir', 'icde', 'ieee', 'httpsdblpunitrierdedbconficde', 'httpsdblpunitrierdedbconficdm', 'httpsdblpunitrierdedbconfkdd', 'pakdd', 'pacificasia', 'httpsdblpunitrierdedbconfpakdd', 'siam', 'httpsdblpunitrierdedbconfsdm', 'development', 'httpsdblpunitrierdedbconfsigir', 'wsdm', 'httpsdblpunitrierdedbconfwsdm', 'www', 'httpsdblpunitrierdedbconfwww', 'karnatiillinoisedu', 'savithaillinoisedu', 'umondalillinioisedu', 'leader', 'avengers', 'progress', 'report', 'completed', 'reviewed', 'implemented', 'decision', 'required', 'working', 'plan', 'split', 'amongst', 'member', 'pending', 'validating', 'conclude', 'facing', 'open', 'point', 'chosen', 'year', 'python', 'dlbp', 'availability', 'yes', 'httpshpidenaumannprojectsrepeatabilitydatasetsdblpdatasethtml', 'getting', 'exhaustive', 'courseproject', 'httpstestpypiorgsimplekrovetz', 'video', 'presentation', 'httpsmediaspaceillinoisedumediat_hdhp']
https://github.com/sbitra2/CourseProject	"text classification sarcasm detection uiuc: cs-410 course project introduction problem: generate a model to detect the sarcasm from the list of tweets. approach: i have taken a language representation model bert(bi-directional encoder representations from transformers) with pretrained deep bi-directional representations to train the model by using google tensorflow and keras deep learning apis results: with this approach i have managed to achieve the training accuracy to ~91% and validation accuracy to ~76%, on the competition leaderboard f1 score: 0.7472 code walkthrough link: https://www.youtube.com/watch?v=dxuhx-kpfae&feature=youtu.be demo link: https://youtu.be/z3yu8vzgwmw resources https://github.com/google-research/bert https://www.tensorflow.org/tutorials/text/classify_text_with_bert https://towardsdatascience.com/bert-for-dummies-step-by-step-tutorial-fb90890ffe03 https://medium.com/atheros/text-classification-with-transformers-in-tensorflow-2-bert-2f4f16eff5ad project proposal: name: sirish c bitra netids: sbitra2 captain: sirish c bitra team type: individual planned competition: text classification competition: twitter sarcasm detection. proposal: currently, i'm going through the glove model with my technology review assignment and doing some research on how it suits with the text classification competition. i believe with the use of neural network classifiers like bi-directional lstm with glove embeddings i can achieve the expected results with this competition. prior experience: i don't have any prior experience in any of these models. programming language: python project: text classification competition: twitter sarcasm detection status: 1. using google collab and tensorflow2: tried couple of models with pre trained bert and different loss entropy like binary cross entropy and sparse categorical entropy. 2. need to fine tune the model using parse categorical loss entropy which gave better results for me but it is very slow. 3. wip - performance improvement. text classification competition: twitter sarcasm detection dataset format: each line contains a json object with the following fields : - response : the tweet to be classified - context : the conversation context of the response - note, the context is an ordered list of dialogue, i.e., if the context contains three elements, c1, c2, c3, in that order, then c2 is a reply to c1 and c3 is a reply to c2. further, the tweet to be classified is a reply to c3. - label : sarcasm or not_sarcasm id: string identifier for sample. this id will be required when making submissions. (only in test data) for instance, for the following training example : ""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""] the response tweet, ""@user @user @user i don't get this..."" is a reply to its immediate context ""@user if your child isn't..."" which is a reply to ""a minor child deserves privacy..."". your goal is to predict the label of the ""response"" while optionally using the context (i.e, the immediate or the full context). dataset size statistics : | train | test | |-------|------| | 5000 | 1800 | for test, we've provided you the response and the context. we also provide the id (i.e., identifier) to report the results. submission instructions : please add a comma separated file named answer.txt containing the predictions on the test dataset. the file should have no headers and have exactly 1800 rows. each row must have the sample id and the predicted label. for example: twitter_1,sarcasm twitter_2,not_sarcasm ..."	['text', 'classification', 'sarcasm', 'detection', 'uiuc', 'cs', 'course', 'project', 'introduction', 'problem', 'generate', 'model', 'detect', 'list', 'tweets', 'approach', 'taken', 'language', 'representation', 'bertbidirectional', 'encoder', 'representations', 'transformers', 'pretrained', 'deep', 'bidirectional', 'train', 'using', 'google', 'tensorflow', 'keras', 'learning', 'apis', 'results', 'managed', 'achieve', 'training', 'accuracy', 'validation', 'competition', 'leaderboard', 'f', 'score', 'code', 'walkthrough', 'link', 'httpswwwyoutubecomwatchvdxuhxkpfaefeatureyoutube', 'demo', 'httpsyoutubezyuvzgwmw', 'resources', 'httpsgithubcomgoogleresearchbert', 'httpswwwtensorfloworgtutorialstextclassify_text_with_bert', 'httpstowardsdatasciencecombertfordummiesstepbysteptutorialfbffe', 'httpsmediumcomatherostextclassificationwithtransformersintensorflowbertffeffad', 'proposal', 'name', 'sirish', 'c', 'bitra', 'netids', 'sbitra', 'captain', 'team', 'type', 'individual', 'planned', 'twitter', 'currently', 'im', 'going', 'glove', 'technology', 'review', 'assignment', 'research', 'suits', 'believe', 'use', 'neural', 'network', 'classifiers', 'like', 'lstm', 'embeddings', 'expected', 'prior', 'experience', 'dont', 'models', 'programming', 'python', 'status', 'collab', 'tried', 'couple', 'pre', 'trained', 'bert', 'different', 'loss', 'entropy', 'binary', 'cross', 'sparse', 'categorical', 'need', 'fine', 'tune', 'parse', 'gave', 'better', 'slow', 'wip', 'performance', 'improvement', 'dataset', 'format', 'line', 'contains', 'json', 'object', 'following', 'fields', 'response', 'tweet', 'classified', 'context', 'conversation', 'note', 'ordered', 'dialogue', 'ie', 'three', 'elements', 'order', 'reply', 'label', 'not_sarcasm', 'id', 'string', 'identifier', 'sample', 'required', 'making', 'submissions', 'test', 'data', 'instance', 'example', 'user', 'get', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'instead', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'immediate', 'goal', 'predict', 'optionally', 'full', 'size', 'statistics', 'weve', 'provided', 'also', 'provide', 'report', 'submission', 'instructions', 'please', 'add', 'comma', 'separated', 'file', 'answertxt', 'containing', 'predictions', 'headers', 'exactly', 'rows', 'row', 'must', 'predicted', 'twitter_sarcasm', 'twitter_not_sarcasm']
https://github.com/seanlai12/CourseProject	"sean lai course project cs410 documentation summary: this project is to improve the functionality of to save next slides in memory so users do not need to load each new slide every click. i have implemented this feature by using in-memory list within python when server is running, to load multiple slide pages at once, and as a queue, the system iterate through the list when the user clicks ""next"" button on the educationalweb page. in the original, the educationalweb system would resolve each slide at the moment of user click, which would only allow a page to load one at a time, causing delays and negative user experience. implementation: i have created a new function on app.py, which is the main function python file for the system, called `buffer_new_slides`. this function will iterate a number of slides, with number determined by the global variable slide_buffer_size, to fill up a python list slide_buffer_list with generated slide renders. with this, users would experience a longer load when they first click through the slides, as the system would buffer multiple slide renders at once and save it to memory, but further iteration through the slides will be very fast as it's in memory. the list will work like a queue, so whenever a slide is read and ready to move on, the rendered slide is removed from the list, and a new one will be buffered for the user. this allows an in-memory speed of slide viewing experience for the user, instead of must loading a rendered slide object with `resolve_slides`, on every click. please see my video demonstration for the code and operation for more details. challenges: because i did not a have a web server to test this on, the localhost server proved difficult to test if my change really made the slide viewing faster. this is due to the fact that original slide viewing was already fast enough since all the slide files were local. however, it is very small difference with speed with new change, and i expect it to be much more noticeable when the slides are up on a web server. out of scope: this implementation would only work on ""next"" slide button, not going backward in pages with ""prev"". the prev button would work, however would mess up the order of the list. this can be fixed by implementing similar queuing system for prev in the same way as next, however due to time constraints i am only going to demo for next button. how to use the software: # documentation/instructions the following instructions have been tested with python2.7 on linux and macos 1. you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html 2. create the index in elasticsearch by running `python create_es_index.py` from `educationalweb/` 3. download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under `educationalweb/static` 4. download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under `educationalweb/pdf.js/static/slides/` 5. from `educationalweb/pdf.js/build/generic/web` , run the following command: `gulp server` 6. on line 38 on `educationalweb/app.py`, edit the value here to an integer for ""number of slides to buffer at a time"". i have set the default to ""5"", so you can also leave it as is. 7. in another terminal window, run `python app.py` from `educationalweb/` 8. the site should be available at http://localhost:8096/ course project demo by: sean lai cs 410 improving educationalweb improve the functionality to save next slides in memory so users do not need to load each new slide every click. faster loading for slides in bulk better user experience design and implementation original design and implementation after demo faster? it is hard to prove this on local server, since slide loading is already fast to begin with. however, i added logging message to the code so you can see how often the system renders before and after. however since the rendered slides are saved in a in-memory list, by design it should be faster. challenges setting up the environment took forever! large amount of time spent on understanding the code. load time on local server vs web server differs a lot, hard to see difference from my feature. only had time to work on next slide (going forward), not prev. however, it should be implemented in a similar fashion (in-memory list rendering) thank you sean lai cs410 project progress report 1) which tasks have been completed? 2) which tasks are pending? 3) are you facing any challenges? completion summary of progresses using the task that i listed in my original proposal, spike the usage on the original system. 3h set up environment for the project. 1h (this took much longer than estimate) look for function and area that needs to be updated. 2h coding and testing. 10h (about 50% done, 5h left) collect data for time comparison. 2h create documentation, report, and presentation material. 2h currently, i used bulk of my time setting up the environment on pycharm/terminal, going through the functionality, installing dependencies, and writing few logging lines in the code for better information gathering. i was underestimating the environment setup portion which took me much longer time, where i encountered many difficulties to get the local server to actually load, due to having to reinstall python and troubleshoot few things online. however, i finally got it to work on local server and can test code now which i am happy about. i am also getting more familiar with codebase and have pretty good idea on where to add/update code to complete my project. pending tasks. currently i am still not complete in the coding and testing part, but i got good plans laid out on what to do. currently i am able to manipulate the slide pages on next and prev slides, skip a slide, etc. i am thinking to implement a list or queue dataset to pre-load multiple slides when moving slides. i am still implementing and testing so don't have much more details for now, but don't seem to face any big challenges that i know of. challenges. i think the biggest challenge is to correctly gather timing for my final report, since the local server and web server version has different timings. however, if i can compare either one of them and find my implementation speed up the program, i should be happy enough to report that as successful. please let me know if you have questions or need further details on anything. thanks for reading. sean lai cs410 project proposal improving a system: educational web system what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. what system have you chosen? which subtopic(s) under the system? briefly describe the datasets, algorithms or techniques you plan to use if you are adding a function, how will you demonstrate that it works as expected? if you are improving a function, how will you show your implementation actually works better? how will your code communicate with or utilize the system? it is also fine to build your own systems, just please state your plan clearly which programming language do you plan to use? please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. sean lai - seanlai2 (individual project) educational web system. planning to improve the functionality of allowing downloading slide in bulk. specifically, i am thinking to implement a buffer loading for previous and next slides so user experiences are better. currently the system only allow one slide loading at a time and will only load the next or previous slide if user makes a click. using data structures to store preloaded slides for the interface, possibly a list. using updated functionality to improve the system on web interface. the dataset will be the slides to load on user clicks. this can be demonstrated by comparing the average time loading a slide in the original system, to the new system. this can be done in a report, and also video demonstration if required. my code will likely update a function within the original system, replacing or adding more onto the original logic. i will fork my own repo and make my update on my own environment. python, javascript, and whatever else is needed. task and hours rough estimate spike the usage on the original system. 3h set up environment for the project. 1h look for function and area that needs to be updated. 2h coding and testing. 10h collect data for time comparison. 2h create documentation, report, and presentation material. 2h educational web - http://timan102.cs.illinois.edu/explanation//slide/cs-410/0 original github repo - https://github.com/cs410fall2020/educationalweb courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. author - sean lai email - seanlai2@illinois.edu cs410 improving the educational web system. this project is to improve the functionality of to save next slides in memory so users do not need to load each new slide every click. please read the documentation and instruction below on how to use educationalweb. please take a look at documentation.docx, for more detail on how to use the software and how the software is implemented. documentation/instructions the following instructions have been tested with python2.7 on linux and macos you should have elasticsearch installed and running -- https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html create the index in elasticsearch by running python create_es_index.py from educationalweb/ download tfidf_outputs.zip from here -- https://drive.google.com/file/d/19ia7cqahnw3kkxasbnfs2clqrigdtfiw/view?usp=sharing unzip the file and place the folder under educationalweb/static download cs410.zip from here -- https://drive.google.com/file/d/1xiw9osavooejsy_siiixpf4aqsuyuuh6/view?usp=sharing unzip the file and place the folder under educationalweb/pdf.js/static/slides/ from educationalweb/pdf.js/build/generic/web , run the following command: gulp server on line 38 on educationalweb/app.py, edit the value here to an integer for ""number of slides to buffer at a time"". i have set the default to ""5"", so you can also leave it as is. in another terminal window, run python app.py from educationalweb/ the site should be available at http://localhost:8096/"	['sean', 'lai', 'course', 'project', 'cs', 'documentation', 'summary', 'improve', 'functionality', 'save', 'next', 'slides', 'memory', 'users', 'need', 'load', 'new', 'slide', 'every', 'click', 'implemented', 'feature', 'using', 'inmemory', 'list', 'within', 'python', 'server', 'running', 'multiple', 'pages', 'queue', 'system', 'iterate', 'user', 'clicks', 'button', 'educationalweb', 'page', 'original', 'would', 'resolve', 'moment', 'allow', 'one', 'time', 'causing', 'delays', 'negative', 'experience', 'implementation', 'created', 'function', 'apppy', 'main', 'file', 'called', 'buffer_new_slides', 'number', 'determined', 'global', 'variable', 'slide_buffer_size', 'fill', 'slide_buffer_list', 'generated', 'renders', 'longer', 'first', 'buffer', 'iteration', 'fast', 'work', 'like', 'whenever', 'read', 'ready', 'move', 'rendered', 'removed', 'buffered', 'allows', 'speed', 'viewing', 'instead', 'must', 'loading', 'object', 'resolve_slides', 'please', 'see', 'video', 'demonstration', 'code', 'operation', 'details', 'challenges', 'web', 'test', 'localhost', 'proved', 'difficult', 'change', 'really', 'made', 'faster', 'due', 'fact', 'already', 'enough', 'since', 'files', 'local', 'however', 'small', 'difference', 'expect', 'much', 'noticeable', 'scope', 'going', 'backward', 'prev', 'mess', 'order', 'fixed', 'implementing', 'similar', 'queuing', 'way', 'constraints', 'demo', 'use', 'software', 'documentationinstructions', 'following', 'instructions', 'tested', 'linux', 'macos', 'elasticsearch', 'installed', 'httpswwwelasticcoguideenelasticsearchreferencecurrenttargzhtml', 'create', 'index', 'create_es_indexpy', 'download', 'tfidf_outputszip', 'httpsdrivegooglecomfilediacqahnwkkxasbnfsclqrigdtfiwviewuspsharing', 'unzip', 'place', 'folder', 'educationalwebstatic', 'cszip', 'httpsdrivegooglecomfiledxiwosavooejsy_siiixpfaqsuyuuhviewuspsharing', 'educationalwebpdfjsstaticslides', 'educationalwebpdfjsbuildgenericweb', 'run', 'command', 'gulp', 'line', 'educationalwebapppy', 'edit', 'value', 'integer', 'set', 'default', 'also', 'leave', 'another', 'terminal', 'window', 'site', 'available', 'httplocalhost', 'improving', 'bulk', 'better', 'design', 'hard', 'prove', 'begin', 'added', 'logging', 'message', 'often', 'saved', 'setting', 'environment', 'took', 'forever', 'large', 'amount', 'spent', 'understanding', 'vs', 'differs', 'lot', 'forward', 'fashion', 'rendering', 'thank', 'progress', 'report', 'tasks', 'completed', 'pending', 'facing', 'completion', 'progresses', 'task', 'listed', 'proposal', 'spike', 'usage', 'h', 'estimate', 'look', 'area', 'needs', 'updated', 'coding', 'testing', 'done', 'left', 'collect', 'data', 'comparison', 'presentation', 'material', 'currently', 'used', 'pycharmterminal', 'installing', 'dependencies', 'writing', 'lines', 'information', 'gathering', 'underestimating', 'setup', 'portion', 'encountered', 'many', 'difficulties', 'get', 'actually', 'reinstall', 'troubleshoot', 'things', 'online', 'finally', 'got', 'happy', 'getting', 'familiar', 'codebase', 'pretty', 'good', 'idea', 'addupdate', 'complete', 'still', 'part', 'plans', 'laid', 'able', 'manipulate', 'skip', 'etc', 'thinking', 'implement', 'dataset', 'preload', 'moving', 'dont', 'seem', 'face', 'big', 'know', 'think', 'biggest', 'challenge', 'correctly', 'gather', 'timing', 'final', 'version', 'different', 'timings', 'compare', 'either', 'find', 'program', 'successful', 'let', 'questions', 'anything', 'thanks', 'reading', 'educational', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'chosen', 'subtopics', 'briefly', 'describe', 'datasets', 'algorithms', 'techniques', 'plan', 'adding', 'demonstrate', 'works', 'expected', 'show', 'communicate', 'utilize', 'fine', 'build', 'systems', 'state', 'clearly', 'programming', 'language', 'justify', 'workload', 'topic', 'least', 'n', 'hours', 'total', 'students', 'may', 'estimated', 'cost', 'seanlai', 'individual', 'planning', 'allowing', 'downloading', 'specifically', 'previous', 'experiences', 'makes', 'structures', 'store', 'preloaded', 'interface', 'possibly', 'demonstrated', 'comparing', 'average', 'required', 'likely', 'update', 'replacing', 'onto', 'logic', 'fork', 'repo', 'make', 'javascript', 'whatever', 'else', 'needed', 'rough', 'httptimancsillinoiseduexplanationslidecs', 'github', 'httpsgithubcomcsfalleducationalweb', 'courseproject', 'repository', 'paste', 'link', 'microsoft', 'cmt', 'detailed', 'coursera', 'week', 'overviewweek', 'activities', 'author', 'email', 'seanlaiillinoisedu', 'instruction', 'take', 'documentationdocx', 'detail']
https://github.com/seuaciuc/CourseProject	"1 cs410 fall 2020 course project progress report author: thiago seuaciuc-osorio e-mail: thiagos2@illinois.edu netid: thiagos2 team: individual programming language: python topic: reproducing the following paper on latent aspect rating analysis hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 completed tasks the following initial tasks have been completed: * reviewed paper, identified tasks and planned approach. * obtained both relevant datasets (hotel and mp3 reviews). * extracted and reviewed both datasets to understand format and accompanying metadata. future tasks * fully ingest data and implement same pre-processing steps listed in the paper. after this step, it is expected that the dataset statistics will resemble that reported on table 1 in the subject paper.  expected timeframe: complete by december 2 * implement posterior inference and model estimation steps (sections 4.1 and 4.2 of subject paper).  expected timeframe: complete by december 7 * apply the topical latent aspect rating analysis model (laram) to both datasets (hotel and mp3 reviews) and calculate selected relevant metrics for assessment. only the experimental results related to the subject method (laram) will be reproduced; experimental results obtained with other methods for comparison and reported in the paper (such as lda, slda, lrr, etc) will not be reproduced. specifically, the following results will be reproduced: o the laram results shown in table 2 o the laram results shown in table 4 o the laram results shown in figure 3 two sets of results will not be reproduced: o the results in table 3, since they depend on ""ground truth"" generated by a lda model. o the results in table 5, from the experiment where all reviews are concatenated and which was performed only to allow comparison with a bootstrap+lrr model, since it is a degeneration of the more general case and similar metrics are already computed as part of table 4.  expected timeframe: complete by december 10 2 * prepare code documentation and presentation.  expected timeframe: complete by december 14 challenges following the initial review and planning for the project, the following challenges were encountered: * table 1 in the subject paper lists 2,232 different hotels reviewed. however, in reviewing the available dataset listed in the provided reference, review files for only 1,850 hotels were initially found. this does not pose a problem for the execution of the project, but it may lead to slightly different results than obtained in the subject paper. * the model equations described in section 4 of the subject paper are not fully clear or complete, as some are just referenced in other sources. these sources have been retrieved, but further study and analysis are necessary to fully determine the equations defining the laram model implementation. cs410 fall 2020 course project proposal author: thiago seuaciuc-osorio e-mail: thiagos2@illinois.edu netid: thiagos2 team: individual programming language: python topic: reproducing the following paper on latent aspect rating analysis hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 in this project, the latent aspect rating analysis generative model will first be implemented as described in the paper above and then applied on the same hotel and mp3 player review datasets, effectively replicating the results of the paper. the relevant datasets have been obtained from http://timan.cs.uiuc.edu/downloads.html cs410 fall 2020 course project thiago seuaciuc-osorio netid: thiagos2 topic paper * hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 * with considerable material from reference [3] in the paper on lda: d. blei, a. ng, and m. jordan. latent dirichlet allocation. the journal of machine learning research, 3:993-1022, 2003 framework data processing model building analysis raw data processed file (.pkl) model file (.pkl) * data transfer through files * no command line interface: inputs in first lines of scripts data processing data processing raw data processed file (.pkl) * input: raw file * output: processed file * reviews: list of dictionaries * reviewtext: review content (list of words) * 'author' (if available) * 'product' * 'date' * 'rating': list of floats; first is overall rating * vocabulary: list of words in corpus * term-document matrix: count of each term (column) in each document (row) * processing: * lower case = remove punctuation = word tokenize = remove stopwords (nltk) = remove non-alphabetical terms * filter reviews with less than 50 words, and terms appearing in less than 10 reviews * all files in the \data folder data processing data processing raw data processed file (.pkl) * mp3 & hotels reviews in different formats; need different processing * processhotelreviews.py * processmp3reviews.py * processmp3reviews_split.py * splits reviews based on rating (low/high) provide name of raw input file here provide name of output file to be created here data processing data processing raw data processed file (.pkl) * main available processed data files: * mp3reviews_low_100.pkl: processed data of a random sub- sample of 100 reviews with low rating (3 or lower). * mp3reviews_high_100.pkl: processed data of a random sub- sample of 100 reviews with high rating (higher than 3). * hotelreviews_100.pkl: processed data of a random sub-sample of 100 hotel reviews * main available raw data files: * amazon_mp3_redux.txt: a small sub-sample of the amazon review dataset in its raw format that can be used to test the data processing codes. * associated processing script: processmp3reviews.py or processmp3reviews_split.py * test_redux (folder): a small sub-sample of the hotel review dataset in its raw format that can be used to test the data processing codes. * associated processing script: processhotelreviews.py model building * follows process in subject paper: * initialize corpus-level parameters * compute review-level parameters * initialize review-level parameters * iteratively update until convergence * corpus-level parameters are held constant in this process * update corpus-level parameters * review-level parameters are held constant * recompute log-likelihood * iterate until convergence * input: processed data file (in \data folder) * output: model file saved to \models folder * corpus-level parameters * review-level parameters model building processed file (.pkl) model file (.pkl) model building * estimatemodel.py * data files should be in the \data folder * model file will be saved to the \models folder model building processed file (.pkl) model file (.pkl) provide name of processed data file here provide name of output file to be created here define number of aspects here model building * available models: * mp3model_low_100_3.pkl * model built with 3 aspects on dataset with 100 mp3 reviews with low rating * associated processed data file: mp3reviews_low_100.pkl * mp3model_high_100_3.pkl * model built with 3 aspects on dataset with 100 mp3 reviews with high rating * associated processed data file: mp3reviews_high_100.pkl * hotelmodel_100_7.pkl * model being built with 7 aspects on dataset with 100 hotel reviews * associated processed data file: hotelreviews_100.pkl model building processed file (.pkl) model file (.pkl) analysis * for various purposes * may take either or both of: * processed data file * model file * available codes: * getstats.py: computes basic stats on the review data * gettopaspectwords.py: retrieves the top words of each aspect (based on aspect word distribution) analysis processed file (.pkl) model file (.pkl) analysis * getstats.py * script will print on the terminal: * the number of reviews in the file * the number of unique items (products) reviewed * the average length (and standard deviation) of the reviews * the average and standard deviation of the overall ratings * no other outputs or files created * data file should be in the \data folder analysis processed file (.pkl) provide name of processed data file here * gettopaspectwords.py * script print array of words to the terminal * no other outputs or files created * data file should be in the \data folder * model file should be in the \models folder analysis analysis processed file (.pkl) provide name of processed data file here model file (.pkl) provide name of output file to be created here define number of words per aspect here some results - review statistics * compared to the reported results (see table 1 in subject report): * slightly fewer reviews. for instance, table 1 reports 2,232 reviewed hotels, but the available dataset only contains files for 1,850 (one is filtered out) * higher average review length. this is likely because of the slightly different processing. for instance, here the nltk stopwords were used, which will differ a little from that was used in the paper. * ratings statistics are very similar. dataset # items # reviews avg length (std) avg rating (std) mp3 676 16012 123.06 (98.00) 3.75 (1.42) hotels 1849 47750 125.73 (99.02) 3.96 (1.22) some results: top words in mp3 reviews low rating high rating zune like warranty would hours software bought good software use great also everything time work new use one get product apple zune itunes like people one buy device still sound like get im great player quality problem screen music easy battery get one use battery good like much ipod ipod unit player one good player player would ipod music player some results: top words in mp3 reviews * few similarities with table 2 in the subject paper: * low: problem, time, warranty * high: easy, sound, quality * despite a few similarities, this list is mainly different from the one in table 2 in the subject paper. reasons could be: * fewer aspects: the paper modeled 20 aspects and displayed the top 3, while here only 3 aspects were modeled. the higher number of aspects in the paper allow for better topic definition for each aspect, whereas here, the shown 3 topics need to account for all the content in the corpus. * the much smaller dataset. this was built on 100 reviews, while the paper used 16,680 divided between the two sub-groups (low/high rating) * the different list of stopwords; the list used here may have left more common english words than the list used in the paper. note: time for model computation is the reason to have reduced the dataset (number of reviews) and the number of aspects modeled. challenges * model complexity * a number of high dimensional numerical optimizations at repeated iterations leads to high computation time to build models * this gets worse as the dataset and number of aspects increase * this has hampered the development of the model on the hotel dataset, where at least 7 aspects are needed for meaning assessment * model build code has not finished running (on set with 100 reviews) * not possible yet to perform the aspect rating analysis * even when the model finishes, the low number of reviews will likely make the results not very robust * to solve this, efforts are needed for code optimization * most of the time in the project was spent on research to understand the model and approach to be able to make an initial implementation of it * better computation resources would also help suggested testing procedure the steps below allow for all scripts provided to be tested without taking too much time. they are already set with the inputs corresponding to this, so they can be run without changes. * data processing scripts * run processmp3reviews.py to process the mp3 reviews in amazon_mp3_redux.txt. this will generate the mp3reviews_redux.pkl. all these files are in the \data folder. * run processhotelreviews.py to process the hotels reviews in the folder \texts_redux. this will generate the hotelreviews_redux.pkl. all these files are in the \data folder. * model building scripts * run estimatemodel.py on the reduced mp3 dataset (mp3reviews_redux.pkl) to generate the model file mp3model_redux.pkl. the suggested number of aspects is 3. * analysis scripts * run the getstats.py on mp3reviews_high_100.pkl to obtain the statistics on that smaller set of reviews. * run the gettopaspectwords.py using the data mp3reviews_high_100.pkl and model mp3model_high_100_3.pkl to obtain the top 10 words in each of the 3 aspects of this model on these reviews. cs410 fall 2020 course project thiago seuaciuc-osorio netid: thiagos2 topic paper hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 with considerable material from reference [3] in the paper on lda: d. blei, a. ng, and m. jordan. latent dirichlet allocation. the journal of machine learning research, 3:993-1022, 2003 framework raw data processed file (.pkl) model file (.pkl) data transfer through files no command line interface: inputs in first lines of scripts data processing raw data processed file (.pkl) input: raw file output: processed file reviews: list of dictionaries reviewtext: review content (list of words) 'author' (if available) 'product' 'date' 'rating': list of floats; first is overall rating vocabulary: list of words in corpus term-document matrix: count of each term (column) in each document (row) processing: lower case  remove punctuation  word tokenize  remove stopwords (nltk)  remove non-alphabetical terms filter reviews with less than 50 words, and terms appearing in less than 10 reviews all files in the \data folder data processing raw data processed file (.pkl) mp3 & hotels reviews in different formats; need different processing processhotelreviews.py processmp3reviews.py processmp3reviews_split.py splits reviews based on rating (low/high) provide name of raw input file here provide name of output file to be created here data processing raw data processed file (.pkl) main available processed data files: mp3reviews_low_100.pkl: processed data of a random sub-sample of 100 reviews with low rating (3 or lower). mp3reviews_high_100.pkl: processed data of a random sub-sample of 100 reviews with high rating (higher than 3). hotelreviews_100.pkl: processed data of a random sub-sample of 100 hotel reviews main available raw data files: amazon_mp3_redux.txt: a small sub-sample of the amazon review dataset in its raw format that can be used to test the data processing codes. associated processing script: processmp3reviews.py or processmp3reviews_split.py test_redux (folder): a small sub-sample of the hotel review dataset in its raw format that can be used to test the data processing codes. associated processing script: processhotelreviews.py model building follows process in subject paper: initialize corpus-level parameters compute review-level parameters initialize review-level parameters iteratively update until convergence corpus-level parameters are held constant in this process update corpus-level parameters review-level parameters are held constant recompute log-likelihood iterate until convergence input: processed data file (in \data folder) output: model file saved to \models folder corpus-level parameters review-level parameters processed file (.pkl) model file (.pkl) model building estimatemodel.py data files should be in the \data folder model file will be saved to the \models folder processed file (.pkl) model file (.pkl) provide name of processed data file here provide name of output file to be created here define number of aspects here model building available models: mp3model_low_100_3.pkl model built with 3 aspects on dataset with 100 mp3 reviews with low rating associated processed data file: mp3reviews_low_100.pkl mp3model_high_100_3.pkl model built with 3 aspects on dataset with 100 mp3 reviews with high rating associated processed data file: mp3reviews_high_100.pkl hotelmodel_100_7.pkl model being built with 7 aspects on dataset with 100 hotel reviews associated processed data file: hotelreviews_100.pkl processed file (.pkl) model file (.pkl) analysis for various purposes may take either or both of: processed data file model file available codes: getstats.py: computes basic stats on the review data gettopaspectwords.py: retrieves the top words of each aspect (based on aspect word distribution) processed file (.pkl) model file (.pkl) analysis getstats.py script will print on the terminal: the number of reviews in the file the number of unique items (products) reviewed the average length (and standard deviation) of the reviews the average and standard deviation of the overall ratings no other outputs or files created data file should be in the \data folder processed file (.pkl) provide name of processed data file here gettopaspectwords.py script print array of words to the terminal no other outputs or files created data file should be in the \data folder model file should be in the \models folder analysis processed file (.pkl) provide name of processed data file here model file (.pkl) provide name of output file to be created here define number of words per aspect here some results - review statistics compared to the reported results (see table 1 in subject report): slightly fewer reviews. for instance, table 1 reports 2,232 reviewed hotels, but the available dataset only contains files for 1,850 (one is filtered out) higher average review length. this is likely because of the slightly different processing. for instance, here the nltk stopwords were used, which will differ a little from that was used in the paper. ratings statistics are very similar. some results: top words in mp3 reviews some results: top words in mp3 reviews few similarities with table 2 in the subject paper: low: problem, time, warranty high: easy, sound, quality despite a few similarities, this list is mainly different from the one in table 2 in the subject paper. reasons could be: fewer aspects: the paper modeled 20 aspects and displayed the top 3, while here only 3 aspects were modeled. the higher number of aspects in the paper allow for better topic definition for each aspect, whereas here, the shown 3 topics need to account for all the content in the corpus. the much smaller dataset. this was built on 100 reviews, while the paper used 16,680 divided between the two sub-groups (low/high rating) the different list of stopwords; the list used here may have left more common english words than the list used in the paper. note: time for model computation is the reason to have reduced the dataset (number of reviews) and the number of aspects modeled. challenges model complexity a number of high dimensional numerical optimizations at repeated iterations leads to high computation time to build models this gets worse as the dataset and number of aspects increase this has hampered the development of the model on the hotel dataset, where at least 7 aspects are needed for meaning assessment model build code has not finished running (on set with 100 reviews) not possible yet to perform the aspect rating analysis even when the model finishes, the low number of reviews will likely make the results not very robust to solve this, efforts are needed for code optimization most of the time in the project was spent on research to understand the model and approach to be able to make an initial implementation of it better computation resources would also help suggested testing procedure the steps below allow for all scripts provided to be tested without taking too much time. they are already set with the inputs corresponding to this, so they can be run without changes. data processing scripts run processmp3reviews.py to process the mp3 reviews in amazon_mp3_redux.txt. this will generate the mp3reviews_redux.pkl. all these files are in the \data folder. run processhotelreviews.py to process the hotels reviews in the folder \texts_redux. this will generate the hotelreviews_redux.pkl. all these files are in the \data folder. model building scripts run estimatemodel.py on the reduced mp3 dataset (mp3reviews_redux.pkl) to generate the model file mp3model_redux.pkl. the suggested number of aspects is 3. analysis scripts run the getstats.py on mp3reviews_high_100.pkl to obtain the statistics on that smaller set of reviews. run the gettopaspectwords.py using the data mp3reviews_high_100.pkl and model mp3model_high_100_3.pkl to obtain the top 10 words in each of the 3 aspects of this model on these reviews. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. general info project material is structured in 3 folders: - data: contains all data, both raw and processed. smaller sub-samples of the datasets are provided. - models: contains all models (pickle files with estimated model paramters). - codes: all scripts are here. each folder contains a readme.md with specific information about their contents and structure. all code is done in python 3.8. data (information from one step to another) is shared through pickle files, so typically the codes take one file as input and generate others as output. codes are set to the folder structure of this repository, so it needs to be maintained to be able to run the scripts without modification. interface there is no command line interface built for this yet. inputs are provided directly in the files, by modifying the first few lines of the scripts. the most common inputs are clearly identified in the beginning of the scripts. other ""hyper-parameters"" (such as maximum number of iterations, minimum review length, etc) will appear immediately after the primary input section of the code. these typically do not need to be changed unless fine-tuning is desired. whenever the first import command is reached, all possible inputs are done. in general, the scripts are ready to be run on some of the sample files provided if the folder structure of this repository is maintained. most of the information in this readme and the others is summarized in the accompanying presentation slides (cs410_fall2020_courseproject_tutorial.pdf or .pptx). that is probably the best place to start. suggested testing procedure because of the time for computation and size of some of the files, not all aspects of the project can be reproduced. below is a suggested testing procedure that uses all scripts in the project to assess their functionality. the scripts provided are set to run the steps in this procedure without change if the folder structure is maintained. data processing scripts processing the entire datasets take considerable time and resources. this has been done, but the resulting files are larger than the allowable limite in github. to test the codes, you can run the data processing scripts on the provided smaller datasets. these two steps will run the scripts provided to process each of the two datasets: - run processmp3reviews.py to process the mp3 reviews in amazon_mp3_redux.txt. this will generate the mp3reviews_redux.pkl. all these files are in the \data folder. - run processhotelreviews.py to process the hotels reviews in the folder \texts_redux. this will generate the hotelreviews_redux.pkl. all these files are in the \data folder. model building building the model takes time. because of this, a pre-model was built on a random sample of 100 reviews. that can be done, but it still takes a little time. to test the functionality of the model building code, you can build a model on one of the reduced datasets. - run estimatemodel.py on the reduced mp3 dataset (mp3reviews_redux.pkl) to generate the model file mp3model_redux.pkl. the suggested number of aspects is 3. analysis run the getstats.py on mp3reviews_high_100.pkl to obtain the statistics on that smaller set of reviews. run the gettopaspectwords.py using the data mp3reviews_high_100.pkl and model mp3model_high_100_3.pkl to obtain the top 10 words in each of the 3 aspects of this model on these reviews."	['cs', 'fall', 'course', 'project', 'progress', 'report', 'author', 'thiago', 'seuaciucosorio', 'email', 'thiagosillinoisedu', 'netid', 'thiagos', 'team', 'individual', 'programming', 'language', 'python', 'topic', 'reproducing', 'following', 'paper', 'latent', 'aspect', 'rating', 'analysis', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'without', 'keyword', 'supervision', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'completed', 'tasks', 'initial', 'reviewed', 'identified', 'planned', 'approach', 'obtained', 'relevant', 'datasets', 'hotel', 'mp', 'reviews', 'extracted', 'understand', 'format', 'accompanying', 'metadata', 'future', 'fully', 'ingest', 'data', 'implement', 'preprocessing', 'steps', 'listed', 'step', 'expected', 'dataset', 'statistics', 'resemble', 'reported', 'table', 'subject', 'timeframe', 'complete', 'december', 'posterior', 'inference', 'model', 'estimation', 'sections', 'apply', 'topical', 'laram', 'calculate', 'selected', 'metrics', 'assessment', 'experimental', 'results', 'related', 'method', 'reproduced', 'methods', 'comparison', 'lda', 'slda', 'lrr', 'etc', 'specifically', 'shown', 'figure', 'two', 'sets', 'since', 'depend', 'ground', 'truth', 'generated', 'experiment', 'concatenated', 'performed', 'allow', 'bootstraplrr', 'degeneration', 'general', 'case', 'similar', 'already', 'computed', 'part', 'prepare', 'code', 'documentation', 'presentation', 'challenges', 'review', 'planning', 'encountered', 'lists', 'different', 'hotels', 'however', 'reviewing', 'available', 'provided', 'reference', 'files', 'initially', 'found', 'pose', 'problem', 'execution', 'may', 'lead', 'slightly', 'equations', 'described', 'section', 'clear', 'referenced', 'sources', 'retrieved', 'study', 'necessary', 'determine', 'defining', 'implementation', 'proposal', 'generative', 'first', 'implemented', 'applied', 'player', 'effectively', 'replicating', 'httptimancsuiucedudownloadshtml', 'considerable', 'material', 'blei', 'ng', 'jordan', 'dirichlet', 'allocation', 'journal', 'machine', 'learning', 'research', 'framework', 'processing', 'building', 'raw', 'processed', 'file', 'pkl', 'transfer', 'command', 'line', 'interface', 'inputs', 'lines', 'scripts', 'input', 'output', 'list', 'dictionaries', 'reviewtext', 'content', 'words', 'product', 'date', 'floats', 'overall', 'vocabulary', 'corpus', 'termdocument', 'matrix', 'count', 'term', 'column', 'document', 'row', 'lower', 'remove', 'punctuation', 'word', 'tokenize', 'stopwords', 'nltk', 'nonalphabetical', 'terms', 'filter', 'less', 'appearing', 'folder', 'formats', 'need', 'processhotelreviewspy', 'processmpreviewspy', 'processmpreviews_splitpy', 'splits', 'based', 'lowhigh', 'provide', 'name', 'created', 'main', 'mpreviews_low_pkl', 'random', 'sub', 'sample', 'low', 'mpreviews_high_pkl', 'high', 'higher', 'hotelreviews_pkl', 'subsample', 'amazon_mp_reduxtxt', 'small', 'amazon', 'used', 'test', 'codes', 'associated', 'script', 'test_redux', 'follows', 'process', 'initialize', 'corpuslevel', 'parameters', 'compute', 'reviewlevel', 'iteratively', 'update', 'convergence', 'held', 'constant', 'recompute', 'loglikelihood', 'iterate', 'saved', 'models', 'estimatemodelpy', 'define', 'number', 'aspects', 'mpmodel_low__pkl', 'built', 'mpmodel_high__pkl', 'hotelmodel__pkl', 'various', 'purposes', 'take', 'either', 'getstatspy', 'computes', 'basic', 'stats', 'gettopaspectwordspy', 'retrieves', 'top', 'distribution', 'print', 'terminal', 'unique', 'items', 'products', 'average', 'length', 'standard', 'deviation', 'ratings', 'outputs', 'array', 'per', 'compared', 'see', 'fewer', 'instance', 'reports', 'contains', 'one', 'filtered', 'likely', 'differ', 'little', 'avg', 'std', 'zune', 'like', 'warranty', 'would', 'hours', 'software', 'bought', 'good', 'use', 'great', 'also', 'everything', 'time', 'work', 'new', 'get', 'apple', 'itunes', 'people', 'buy', 'device', 'still', 'sound', 'im', 'quality', 'screen', 'music', 'easy', 'battery', 'much', 'ipod', 'unit', 'similarities', 'despite', 'mainly', 'reasons', 'could', 'modeled', 'displayed', 'better', 'definition', 'whereas', 'topics', 'account', 'smaller', 'divided', 'subgroups', 'left', 'common', 'english', 'note', 'computation', 'reason', 'reduced', 'complexity', 'dimensional', 'numerical', 'optimizations', 'repeated', 'iterations', 'leads', 'build', 'gets', 'worse', 'increase', 'hampered', 'development', 'least', 'needed', 'meaning', 'finished', 'running', 'set', 'possible', 'yet', 'perform', 'even', 'finishes', 'make', 'robust', 'solve', 'efforts', 'optimization', 'spent', 'able', 'resources', 'help', 'suggested', 'testing', 'procedure', 'tested', 'taking', 'corresponding', 'run', 'changes', 'generate', 'mpreviews_reduxpkl', 'texts_redux', 'hotelreviews_reduxpkl', 'mpmodel_reduxpkl', 'obtain', 'using', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'overviewweek', 'activities', 'info', 'structured', 'folders', 'subsamples', 'pickle', 'estimated', 'paramters', 'readmemd', 'specific', 'information', 'contents', 'structure', 'done', 'another', 'shared', 'typically', 'others', 'needs', 'maintained', 'modification', 'directly', 'modifying', 'clearly', 'beginning', 'hyperparameters', 'maximum', 'minimum', 'appear', 'immediately', 'primary', 'changed', 'unless', 'finetuning', 'desired', 'whenever', 'import', 'reached', 'ready', 'readme', 'summarized', 'slides', 'cs_fall_courseproject_tutorialpdf', 'pptx', 'probably', 'best', 'place', 'start', 'size', 'uses', 'assess', 'functionality', 'change', 'entire', 'resulting', 'larger', 'allowable', 'limite', 'takes', 'premodel']
https://github.com/shashivrat/CourseProject	project proposal - text classification competition 1. team name: ssw classifiers members: * saravana somasundaram (captain) - ss129 * shashivrat pandey - spandey6 * walter tan - wstan2 2. competition - text classification 3. neural networks: a. convolutional neural network (cnn) b. recurrent neural network (rnn) c. hierarchical attention network (han) 4. references: a. https://keras.io/examples/nlp/text_classification_from_scratch/ b. https://medium.com/jatana/report-on-text-classification-using-cnn-rnn-han- f0e887214d5f c. https://realpython.com/python-keras-text-classification/#convolutional-neural- networks-cnn 5. the programming language we will be using is python. our group is prepared to learn state-of-the art network classifiers. we are excited to learn techniques to improve our ml skillset and will apply what we learned to our current/future work projects. some deep learning frameworks we've heard of include pytorch, tensorflow, kearas, and sonnet. tensorflow and pytorch seem to be the most popular and used by many users and institutions worldwide. our group has never worked with these technologies, but are excited to learn these new technologies for this competition. we will be using python for this project and we will try our best to come up with an optimized code to improve the performance of application. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['project', 'proposal', 'text', 'classification', 'competition', 'team', 'name', 'ssw', 'classifiers', 'members', 'saravana', 'somasundaram', 'captain', 'ss', 'shashivrat', 'pandey', 'spandey', 'walter', 'tan', 'wstan', 'neural', 'networks', 'convolutional', 'network', 'cnn', 'b', 'recurrent', 'rnn', 'c', 'hierarchical', 'attention', 'han', 'references', 'httpskerasioexamplesnlptext_classification_from_scratch', 'httpsmediumcomjatanareportontextclassificationusingcnnrnnhan', 'fedf', 'httpsrealpythoncompythonkerastextclassificationconvolutionalneural', 'networkscnn', 'programming', 'language', 'using', 'python', 'group', 'prepared', 'learn', 'stateofthe', 'art', 'excited', 'techniques', 'improve', 'ml', 'skillset', 'apply', 'learned', 'currentfuture', 'work', 'projects', 'deep', 'learning', 'frameworks', 'weve', 'heard', 'include', 'pytorch', 'tensorflow', 'kearas', 'sonnet', 'seem', 'popular', 'used', 'many', 'users', 'institutions', 'worldwide', 'never', 'worked', 'technologies', 'new', 'try', 'best', 'come', 'optimized', 'code', 'performance', 'application', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/sitajothi/CourseProject	"an overview of the function of the code our project aims to analyze stock sentiment from twitter data to help our users understand whether or not to buy or sell stocks. understanding sentiment from tweets is very helpful as it provides textual context to the market outlook of different stocks. we started by running a pre-existing sentiment analyzer, vader, to have a baseline performance. then, we did research into different methods of sentiment analysis to build our own sentiment analyzer, which we trained on a kaggle dataset, and later tested on the twitter api using recent tweets. we wanted our user to easily understand the sentiment of a stock's set of tweets, so we added a pie graph as a visualization for user's to make the stock purchasing decisions. how software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. we can consider the code to be in two different portions: creating and training the sentiment analyzer and actually running it with the tweets pulled from the twitter api. for our sentiment analyzer, we used knowledge from class to create a sentiment analyzer that utilizes tf-idf and a bag-of-words model. from mp1, we realized that tokenizing and lemmatizing the words and then using n-gram on words would be effective. we tried many tutorials to understand how to use spacy, but utilized https://www.dataquest.io/blog/tutorial-text-classification-in-python-using-spacy/ the most as it incorporated tf-idf and the bag-of-words model. while testing the model, we also played around with the n-gram_range that was fed into the bow-vector and found that unigrams gave the best results. figure 1: model results we used a kaggle dataset to train our model, which performed above the vader benchmark. we ended up using logistic regression because it gave the best result compared to the other models on scikit-learn. we then used the twitter api to pull the most recent tweets from twitter pertaining to a certain stock ticker (input as '$tickername'), run it through the model, and then output a pie chart that shows the user the percentage of tweets that had a positive and negative connotation. based on this chart, the user can then make a judgement as to whether or not they want to short or long the stock. in order to test the overall precision/recall/f1 of the entire program, we established the ground truths of the tweets that were pulled by ourselves and then calculated the metrics. figure 2: performance metrics of entire program documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. firstly, the user must have access to jupyter notebook. there is a browser version, which the user can find with a google search for ""jupyter notebook browser."" our application also uses the twitter api. to be able to receive real time information, the user must create a developer portal on twitter and gain access tokens and keys. additionally, the user must save their credentials in a json format to a file called: twitter_credentials.json so that the application can pull them. (e.g. {""consumer_key"": """", ""consumer_secret"": """", ""access_token"": """", ""access_secret"": """"}) once these two steps are complete, the user can proceed to the last cell of the jupyter notebook to change the ticker name. the ticker name must be in a string format with a preceding '$'. to run our application, the user can click on cell -> run all, and they will see a pie graph with the sentiment distribution corresponding to that stock (an example can be seen below). figure 3: example of sentiment distribution of tesla brief description of contribution of each team member in case of a multi-person team. both members of the team had a very nice and collaborative experience with this project. in the first few weeks, both asha and sita researched different methods of sentiment analysis and tried to find tutorials that would be most helpful for them while creating it. once the research phase was over, asha mainly worked with coding the first part of the project as well as finding the benchmark metrics with vader while sita worked with the twitter and graphing portion as she had a twitter account. the full breakdown of tasks can be found below. task asha sita researching about sentiment analysis/analyzer tutorials yes yes vader benchmark with kaggle dataset yes coding sentiment analyzer yes yes fine-tuning sentiment analyzer yes research about pulling tweets yes yes coding real-time twitter pull yes coding data visualization yes creating ground truths for testing/accuracy purposes with the twitter results yes yes progress made thus far: so far, we have completed what we believe to be the hardest part of the project - creating and training the sentiment analyzer and the testing model. we first ran the vader sentimentanalyzer on a kaggle dataset to use as a benchmark. its f1 score came out to be 0.40, so we wanted to make sure that the analyzer that we create beats this score. when we used a limit of 200 out of the +5000 columns in the kaggle dataset, its f1 score was 0.475. we have tried to run it on the entire set and got an f1 score of 0.54! we probably will not be running it on a dataset that big again since it took a very long time, and crashed multiple times before a successful run. remaining tasks: * connect to twitter api to test model on real-time data * figure out how to filter tweets based on a stock ticker that the user inputs * run the test model created on these tweets and find if the sentiment regarding the particular stock is positive or negative and if the user should buy/sell respectively * verify the output of the model (will have to establish ground truths ourselves) challenges/issues (being) faced: * training/testing kaggle dataset was very large, causing the program to crash multiple times * precision/recall/f1_score are all turning out to be the same number on each run. we need to figure out if this is accurate. project coordinator: sita jothishankar (slj2@illinois.edu), asha agrawal (ashaa2@illinois.edu) what is your free topic? twitter sentiment analysis for stock price direction. please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? what is the function of the tool and its output? this tool will scrape twitter for a stock ticker name and then perform sentiment analysis to see how much positive and negative news there is regarding the term. who will benefit from such a tool? our main audience will be banks, investors, and shareholders. after finding the ratio of positive/negative news, they can incorporate this data into their views to make more robust and preemptive decisions for different commodities, stocks, companies, etc. this can help investors either buy low - sell high, or mitigate losses early on. does this kind of tool already exist? if similar tools exist, how is your tool different from them? would people care about the difference? we were not able to find an actual tool that found the sentiments, but found a study that showed that there is a correlation between between tweets and stock performance: https://towardsdatascience.com/stock-prediction-using-twitter-e432b35e14bd and http://cs229.stanford.edu/proj2011/goelmittal-stockmarketpredictionusingtwittersentimentanal ysis.pdf. with this supporting study, we believe that our project has a potential to make an impact. what existing resources can you use? https://github.com/cjhutto/vadersentiment/blob/master/vadersentiment/vadersentiment.py and https://github.com/satishrath185/movie-review-sentiment-analysis/blob/master/sentiment%20a nalysis.ipynb can give us a launching pad for a sentiment analyzer. we will be adding to it to create a more robust analyzer. what techniques/algorithms will you use to develop the tool? (it's fine if you just mention some vague idea.) we will use cross validation to create a sentiment analyzer on a dataset from kaggle: https://www.kaggle.com/yash612/stockmarket-sentiment-dataset once we have created the analyzer we will use the twitter api to perform sentiment analysis on current tweets to provide users with the most up to date information. as mentioned above, we will be using existing resources and studies to help us figure out which algorithms would be best to use. how will you demonstrate the usefulness of your tool? we will want to show correlation between stock price and the sentiment of news stories. with this correlation, we will be able to demonstrate the usefulness as the analyzer will provide our audience a preemptive measure for their stocks. which programming language do you plan to use? python please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. there are 2 students on this team, so we will work on this project for 40 hours. we first have to research what algorithm we plan to use to create the analyzer and then we have to implement the algorithm. once this is done, we have to test and train our analyzer. after this, we will use our analyzer to perform sentiment analysis on current tweets and create a user interface for the user to interact with the analyzer for most up to date information. each part of the project (listed below in the rough timeline) will be approximately 10 hours. a very rough timeline to show when you expect to finish what. (the timeline doesn't have to be accurate.) part 1: oct 26 - nov 2 research algorithms and learn more about sentiment analysis part 2: nov 2 - nov 16 create and train sentiment analyzer part 3: nov 16 - nov 25 perform sentiment analysis on current tweets using our sentiment analyzer and twitter api part 4: nov 25 - dec 9 create user interface for user to interact with analyzer + write out documentation of our project overview of our stock sentiment analyzer our project aims to analyze stock sentiment from twitter data to help our users understand whether or not to buy or sell stocks. understanding sentiment from tweets is very helpful as it provides textual context to the market outlook of different stocks. we started by running a pre-existing sentiment analyzer, vader, to have a baseline performance. then, we did research into different methods of sentiment analysis to build our own sentiment analyzer, which we trained on a kaggle dataset, and later tested on the twitter api using recent tweets. we wanted our user to easily understand the sentiment of a stock's set of tweets, so we added a pie graph as a visualization for user's to make the stock purchasing decisions. stock sentiment analyzer setup and usage firstly, the user must have access to jupyter notebook. there is a browser version, which the user can find with a google search for ""jupyter notebook browser."" our application also uses the twitter api. to be able to receive real time information, the user must create a developer portal on twitter and gain access tokens and keys. additionally, the user must save their credentials in a json format to a file called: twitter_credentials.json so that the application can pull them. (e.g. {""consumer_key"": """", ""consumer_secret"": """", ""access_token"": """", ""access_secret"": """"}) once these two steps are complete, the user can proceed to the last cell of the jupyter notebook to change the ticker name. the ticker name must be in a string format with a preceding '$'. to run our application, the user can click on cell -> run all, and they will see a pie graph with the sentiment distribution corresponding to that stock."	['overview', 'function', 'code', 'project', 'aims', 'analyze', 'stock', 'sentiment', 'twitter', 'data', 'help', 'users', 'understand', 'whether', 'buy', 'sell', 'stocks', 'understanding', 'tweets', 'helpful', 'provides', 'textual', 'context', 'market', 'outlook', 'different', 'started', 'running', 'preexisting', 'analyzer', 'vader', 'baseline', 'performance', 'research', 'methods', 'analysis', 'build', 'trained', 'kaggle', 'dataset', 'later', 'tested', 'api', 'using', 'recent', 'wanted', 'user', 'easily', 'set', 'added', 'pie', 'graph', 'visualization', 'make', 'purchasing', 'decisions', 'software', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'future', 'extension', 'improvement', 'consider', 'two', 'portions', 'creating', 'training', 'actually', 'pulled', 'used', 'knowledge', 'class', 'create', 'utilizes', 'tfidf', 'bagofwords', 'model', 'mp', 'realized', 'tokenizing', 'lemmatizing', 'words', 'ngram', 'would', 'effective', 'tried', 'many', 'tutorials', 'use', 'spacy', 'utilized', 'httpswwwdataquestioblogtutorialtextclassificationinpythonusingspacy', 'incorporated', 'testing', 'also', 'played', 'around', 'ngram_range', 'fed', 'bowvector', 'found', 'unigrams', 'gave', 'best', 'results', 'figure', 'train', 'performed', 'benchmark', 'ended', 'logistic', 'regression', 'result', 'compared', 'models', 'scikitlearn', 'pull', 'pertaining', 'certain', 'ticker', 'input', 'tickername', 'run', 'output', 'chart', 'shows', 'percentage', 'positive', 'negative', 'connotation', 'based', 'judgement', 'want', 'short', 'long', 'order', 'test', 'overall', 'precisionrecallf', 'entire', 'program', 'established', 'ground', 'truths', 'calculated', 'metrics', 'documentation', 'usage', 'including', 'either', 'usages', 'apis', 'detailed', 'instructions', 'install', 'whichever', 'applicable', 'firstly', 'must', 'access', 'jupyter', 'notebook', 'browser', 'version', 'find', 'google', 'search', 'application', 'uses', 'able', 'receive', 'real', 'time', 'information', 'developer', 'portal', 'gain', 'tokens', 'keys', 'additionally', 'save', 'credentials', 'json', 'format', 'file', 'called', 'twitter_credentialsjson', 'eg', 'consumer_key', 'consumer_secret', 'access_token', 'access_secret', 'steps', 'complete', 'proceed', 'last', 'cell', 'change', 'name', 'string', 'preceding', 'click', 'see', 'distribution', 'corresponding', 'example', 'seen', 'tesla', 'brief', 'description', 'contribution', 'team', 'member', 'case', 'multiperson', 'members', 'nice', 'collaborative', 'experience', 'first', 'weeks', 'asha', 'sita', 'researched', 'phase', 'mainly', 'worked', 'coding', 'part', 'well', 'finding', 'graphing', 'portion', 'account', 'full', 'breakdown', 'tasks', 'task', 'researching', 'analysisanalyzer', 'yes', 'finetuning', 'pulling', 'realtime', 'testingaccuracy', 'purposes', 'progress', 'made', 'thus', 'far', 'completed', 'believe', 'hardest', 'ran', 'sentimentanalyzer', 'f', 'score', 'came', 'sure', 'beats', 'limit', 'columns', 'got', 'probably', 'big', 'since', 'took', 'crashed', 'multiple', 'times', 'successful', 'remaining', 'connect', 'filter', 'inputs', 'created', 'regarding', 'particular', 'buysell', 'respectively', 'verify', 'establish', 'challengesissues', 'faced', 'trainingtesting', 'large', 'causing', 'crash', 'precisionrecallf_score', 'turning', 'number', 'need', 'accurate', 'coordinator', 'jothishankar', 'sljillinoisedu', 'agrawal', 'ashaaillinoisedu', 'free', 'topic', 'price', 'direction', 'please', 'give', 'important', 'interesting', 'planned', 'approach', 'tools', 'systems', 'datasets', 'involved', 'expected', 'outcome', 'going', 'evaluate', 'work', 'tool', 'scrape', 'perform', 'much', 'news', 'term', 'benefit', 'main', 'audience', 'banks', 'investors', 'shareholders', 'ratio', 'positivenegative', 'incorporate', 'views', 'robust', 'preemptive', 'commodities', 'companies', 'etc', 'low', 'high', 'mitigate', 'losses', 'early', 'kind', 'already', 'exist', 'similar', 'people', 'care', 'difference', 'actual', 'sentiments', 'study', 'showed', 'correlation', 'httpstowardsdatasciencecomstockpredictionusingtwitterebebd', 'httpcsstanfordeduprojgoelmittalstockmarketpredictionusingtwittersentimentanal', 'ysispdf', 'supporting', 'potential', 'impact', 'existing', 'resources', 'httpsgithubcomcjhuttovadersentimentblobmastervadersentimentvadersentimentpy', 'httpsgithubcomsatishrathmoviereviewsentimentanalysisblobmastersentimenta', 'nalysisipynb', 'us', 'launching', 'pad', 'adding', 'techniquesalgorithms', 'develop', 'fine', 'mention', 'vague', 'idea', 'cross', 'validation', 'httpswwwkagglecomyashstockmarketsentimentdataset', 'current', 'provide', 'date', 'mentioned', 'studies', 'algorithms', 'demonstrate', 'usefulness', 'show', 'stories', 'measure', 'programming', 'language', 'plan', 'python', 'justify', 'workload', 'least', 'n', 'hours', 'total', 'students', 'may', 'list', 'estimated', 'cost', 'algorithm', 'implement', 'done', 'interface', 'interact', 'listed', 'rough', 'timeline', 'approximately', 'expect', 'finish', 'doesnt', 'oct', 'nov', 'learn', 'dec', 'write', 'setup']
https://github.com/sjma3/CourseProject	"1) which tasks have been completed? as of now, little actual code has been written, but solid foundational knowledge has been established in improving this ui with past examples that are similar in scope/nature. in particular, the javascript plugin infinite scroll comes to the foreground as a solid candidate to work off of. however, it remains to be seen if infinite scroll can work feasibly in the actual implementation of this improvement. 2) which tasks are pending? feasibility has yet to be confirmed with infinite scroll as a plug-in for the ui implementation/improvement. however, if infinite scroll cannot be integrated with this program, a similarly functioning minimally-viable solution will be created or utilized/cited in the native language of the expertsearch system. after developing a solution it will be rigorously tested to ensure that it works for as many edge cases as the scope of this project allows before the final deadline. 3) are you facing any challenges? as of now there are no particular challenges that are outside of the bounds of expectations for a project of this nature. if there are any in the future, they may be noted when the time comes. improvement of the expertsearch system group: steven ma (captain) netid: sjma3 this project qualifies under option 2, improving an existing system. for this project, i would like to add a function to the expertsearch system. this added function is auto-scroll of results when a user looks through the query. this means that when the user reaches the bottom of the page, the page will automatically populate new results onto the end of it, resulting in a much smoother experience than having to repeatedly click ""load more"" for the results. the function will work if a user is able to enter their query and get a small batch of results, then when reaching the bottom of their first batch of results, get more results automatically. this will continue until no more results remain to be shown. in reality, we will be getting a comprehensive list of results and simply adding these results in chunks to the page for the user to see. i do not want the web page to pre-load all of them beforehand and have it hidden; that would be an unrefined and expensive implementation. rather, i wish to add to the end of the page as the user needs. further research into this will dictate whether such an approach is feasible or not. to implement such functionality successfully, i currently plan to use the same code as the original project, python. ideally, i would be able to work through the current repository and extract out the necessary files, make changes to them, and return the results. i believe this implementation will take five hours to search through/comprehensively understand the working code, five hours to research similar approaches like mine and determine what is and isn't feasible for the working library, another three or four hours to build out the functionality, and an additional six or seven hours to make tests and ensure proper functionality. thus, this will take 20 hours to complete, in my reasonable belief. note that this project falls under 3.3, ""adding an unlisted function to a listed system."" ""at the final stage of your project, you need to deliver the following: your documented source code. explain how your code communicates with or utilize the system. a demo that shows your implementation actually works."" expertsearch setup (copy-paste from https://github.com/cs410fall2020/expertsearch/) to run the code, run the following command from expertsearch (tested with python2.7 on macos and linux): gunicorn server:app -b 127.0.0.1:8095 the site should be available at http://localhost:8095/ live demo there will not be live demos scheduled for this project, unless a reviewer is absolutely unable to get the code running on their own. instead, there is a video available to view with uiuc school credentials at https://drive.google.com/file/d/10hnojzrpq2llqydfic213ddogachqev7/view?usp=sharing. please note the quality through video preview is quite low; downloading the video will result in higher quality results, though core functionality can still be verified at lower quality. it should be noted that the page that is shown in the first part is the current expertsearch website http://timan102.cs.illinois.edu/expertsearch/. the added functionality program is run locally through my personal computer. we can see how the new functionality allows users the convenience of not having to click the ""load more"" button, while the program is simultaneously not burdensome by loading all the results at once. if reviewers want to personally run the code, they can simply download the repository and run it per the instructions above (may need to pip install some packages) to achieve/replicate the results. if issues occur, please message/email me as the author and we will get things sorted out. please not that you should absolutely use linux or macos, as gunicorn will not run in windows, and install python 2.7 (not any python3 distributions). i personally used ubuntu in developing this project. if, for any reason, one needs to access the expertsearch github, it can be found at https://github.com/cs410fall2020/expertsearch/ explanation of how code utilizes system the code's primary functionality is in-built to the system, such that if pushed to the master project of expertsearch, it would integrate perfectly with no issues. the simple change made was to add a function that checked for if the user's screen was close to the bottom; if so, it would scroll automatically. one caveat of this approach is that it will not work until the user first clicks the ""load more"" button. however, after contemplating, it was decided this was actually the correct functionality; if a user clicks load more, we can assume that only then they want to see more results. perhaps some users may only wish to see the first five results and not be bombarded with an excessive number of results until they click the ""load more"" button themselves."	['tasks', 'completed', 'little', 'actual', 'code', 'written', 'solid', 'foundational', 'knowledge', 'established', 'improving', 'ui', 'past', 'examples', 'similar', 'scopenature', 'particular', 'javascript', 'plugin', 'infinite', 'scroll', 'comes', 'foreground', 'candidate', 'work', 'however', 'remains', 'seen', 'feasibly', 'implementation', 'improvement', 'pending', 'feasibility', 'yet', 'confirmed', 'implementationimprovement', 'cannot', 'integrated', 'program', 'similarly', 'functioning', 'minimallyviable', 'solution', 'created', 'utilizedcited', 'native', 'language', 'expertsearch', 'system', 'developing', 'rigorously', 'tested', 'ensure', 'works', 'many', 'edge', 'cases', 'scope', 'project', 'allows', 'final', 'deadline', 'facing', 'challenges', 'outside', 'bounds', 'expectations', 'nature', 'future', 'may', 'noted', 'time', 'group', 'steven', 'captain', 'netid', 'sjma', 'qualifies', 'option', 'existing', 'would', 'like', 'add', 'function', 'added', 'autoscroll', 'results', 'user', 'looks', 'query', 'means', 'reaches', 'bottom', 'page', 'automatically', 'populate', 'new', 'onto', 'end', 'resulting', 'much', 'smoother', 'experience', 'repeatedly', 'click', 'load', 'able', 'enter', 'get', 'small', 'batch', 'reaching', 'first', 'continue', 'remain', 'shown', 'reality', 'getting', 'comprehensive', 'list', 'simply', 'adding', 'chunks', 'see', 'want', 'web', 'preload', 'beforehand', 'hidden', 'unrefined', 'expensive', 'rather', 'wish', 'needs', 'research', 'dictate', 'whether', 'approach', 'feasible', 'implement', 'functionality', 'successfully', 'currently', 'plan', 'use', 'original', 'python', 'ideally', 'current', 'repository', 'extract', 'necessary', 'files', 'make', 'changes', 'return', 'believe', 'take', 'five', 'hours', 'search', 'throughcomprehensively', 'understand', 'working', 'approaches', 'mine', 'determine', 'isnt', 'library', 'another', 'three', 'four', 'build', 'additional', 'six', 'seven', 'tests', 'proper', 'thus', 'complete', 'reasonable', 'belief', 'note', 'falls', 'unlisted', 'listed', 'stage', 'need', 'deliver', 'following', 'documented', 'source', 'explain', 'communicates', 'utilize', 'demo', 'shows', 'actually', 'setup', 'copypaste', 'httpsgithubcomcsfallexpertsearch', 'run', 'command', 'macos', 'linux', 'gunicorn', 'serverapp', 'b', 'site', 'available', 'httplocalhost', 'live', 'demos', 'scheduled', 'unless', 'reviewer', 'absolutely', 'unable', 'running', 'instead', 'video', 'view', 'uiuc', 'school', 'credentials', 'httpsdrivegooglecomfiledhnojzrpqllqydficddogachqevviewuspsharing', 'please', 'quality', 'preview', 'quite', 'low', 'downloading', 'result', 'higher', 'though', 'core', 'still', 'verified', 'lower', 'part', 'website', 'httptimancsillinoiseduexpertsearch', 'locally', 'personal', 'computer', 'users', 'convenience', 'button', 'simultaneously', 'burdensome', 'loading', 'reviewers', 'personally', 'download', 'per', 'instructions', 'pip', 'install', 'packages', 'achievereplicate', 'issues', 'occur', 'messageemail', 'author', 'things', 'sorted', 'windows', 'distributions', 'used', 'ubuntu', 'reason', 'one', 'access', 'github', 'found', 'explanation', 'utilizes', 'codes', 'primary', 'inbuilt', 'pushed', 'master', 'integrate', 'perfectly', 'simple', 'change', 'made', 'checked', 'screen', 'close', 'caveat', 'clicks', 'contemplating', 'decided', 'correct', 'assume', 'perhaps', 'bombarded', 'excessive', 'number']
https://github.com/skuretski/CourseProject	"susan kuretski skure2@illinois.edu cs410 - fall 2020 course project progress report overview this course project uses a dataset from kaggle [https://www.kaggle.com/sayangoswami/reddit-memes-dataset] to perform optical character recognition on reddit memes and do cluster analysis. the original proposal stated doing sentiment analysis, but as the reviewer suggested i have switched to cluster analysis via k-means since upvotes and downvotes are affected by multiple factors. i hope cluster analysis on these memes will uncover unlikely themes. tasks completed tasks completed to this day are: * download and clean data * uploaded images to google cloud platform storage * performed optical character recognition with google cloud vision and translate to determine which language * stored results in gcp pending tasks * evaluation of ocr data * processing data to do cluster analysis - make each meme into a term vector * perform cluster analysis * plot out clusters * evaluation * determining a ""good"" number of clusters via elbow method * silhouette analysis to see how ""good"" the clusters are challenges my biggest challenge is my unfamiliarity with k-means and unsupervised learning. i chose k-means since i don't have a ground truth or labelled dataset. i pondered halving the dataset of ~3,000 images to label it, but i don't see it as the best use of my time for this project. while k-means may seem straightforward for those experienced with it, i would imagine it will take some time for me to fine tune the number of clusters, perform evaluation, and plot the results out. as it stands now, i have spent about four hours doing the completed tasks. another challenge is working with ocr text data which has originated from memes, which often is sarcastic, misspelled, and infers cultural or societal knowledge. there are multiple layers of ambiguity and room for error. susan kuretski skure2@illinois.edu cs410 - fall 2020 course project proposal team members team of one: susan kuretski (de facto captain) - skure2@illinois.edu description - option 5: free topic task the objective of this project is to do sentiment analysis on images, also known as memes, from reddit. using google vision ocr, the characters from the image will be processed to tokenized strings/words, essentially this transforms the text from the meme into a bag of words. using a probabilistic approach to sentiment analysis, i would ideally like to use naive bayes with laplace estimation to avoid the assignment of zero probabilities. i have never implemented an application using naive bayes, so if this ends up being a rabbit hole, i may have to switch gears to a probabilistic semantic analysis (plsa). importance/interesting in general, sentiment analysis is useful in determining users' feelings and attitudes towards certain items, whether it is a review, comment, or product. in regards to reddit, it would be interesting to see which memes gather positive or negative sentiment and whether it correlates to upvotes or downvotes. planned approach (tools, systems, datasets, evaluation) with time estimates task time estimate 1. get dataset from kaggle here: https://www.kaggle.com/sayangoswami/reddit-memes-data set - 2. do a data cleaning pass to ensure all urls of images are seemingly correct in terms of structure, downvotes and upvotes are integers >= 0. 0.5 hour 3. the dataset has 3327 images to be downloaded and/or stored in the cloud. iterate through each entry in the dataset to fetch the image and store. discard invalid images. 3 hour 4. run images through google vision ocr. https://cloud.google.com/vision/docs/ocr 3 hour 5. evaluate accuracy 6. store results of ocr. i want to minimize the need for repeat ocr processing since it can become expensive. 1 hour 7. transform data from ocr to usable dataset for naive bayes (bag of words, maybe try n-grams). 4 hour 8. define and fit the model. use scikit-learn for python. 10 hour ** no previous experience with naive bayes or scikit-learn 9. evaluate model using scikit-learn metrics and comparing with upvote/downvotes. 4 hour ** no previous experience with evaluation of this 10. attempt to make the model better (iterate steps 6 - 8). 10+ hours? total: 35.5 hrs expected outcomes the expected outcomes are: 1. have a final percentage of accuracy from using naive bayes with hopes of it being greater than 50% 2. implement improvements to accuracy if initial accuracy <= 60% 3. possible factors affecting results: slang and intentional misspellings in memes, inaccuracy of ocr programming languages and systems python with scikit-learn aws s3 storage or google cloud storage google vision api cs410 fall 2020 course project written by susie kuretski (skure2@illinois.edu) video link here youtube (https://www.youtube.com/watch?v=kleddgqizya) the best way to contact me is via slack in #cs-410-text-info-syst @susie kuretski you can also contact me at skuretski@gmail.com or skure2@illinois.edu (not as quick). topic utilizing google vision's optical character recognition to perform k-means cluster analysis on reddit memes overview from this kaggle dataset, which includes data for ~3300 reddit memes, i extracted the images and uploaded them to a google cloud platform storage bucket. then, i ran these images through optical character recognition and translation using google vision and translate. link to api docs here. once this was done, the results were stored in a gcp bucket as json data. an example would be: the starting image the json result after ocr { ""src_lang"": ""en"", ""text"": ""when you don't study for a test\nand get all the answers right\nso this is the power of ultra instinct?\n"", ""file_name"": ""85805u.jpg"", ""id"": ""85805u"" } the goal after this was to perform k-means cluster analysis to discover groups or common themes in the memes. step-by-step details for steps 3-7, i used code from kaggle - use dfoly1 1. preprocessing the data once the kaggle set was downloaded, i did a quick check on the data to make sure each row had an id and link to an image with tableau prep. i did not find any rows without these properties. then, i downloaded all the images to my local machine and uploaded them to google cloud platform storage. because of the way i uploaded them, i had to fix the directories with script.sh. this was a minor setback which took a couple hours to complete. 2. performing optical character recognition once the images were in storage, i wrote a python script to perform ocr and translation -- ocrprocessing.py. i decided to do translation as well so that i could filter out non-english text. out of the 3327 images, 3031 met the criteria of non-null english text. some of the memes were just images with no text in them, or they had another language as their primary text. 3. cleaning text data after doing ocr, it was important to do some regular expressions to clean up things like: - contractions - newlines and whitespace - numbers - non-alphabetical characters - commonly found slang or misspellings e.g. shes -> she is or ur -> you are 4. stop words and stemming for stop words and stemming, i used natural language toolkit (nltk) for python. i did add some additional stop words based on my findings with the memes, like ""meme"" and ""rdankmemes"" which was a reddit tag. for stemming, i used a porter stemmer since it is relatively fast and works well with the english language. the porter stemmer is: ""based on the idea that the suffixes in the english language are made up of a combination of smaller and simpler suffixes."" 1 5. tf-idf vectorization once stop words and stemming was done, i transformed the text from the memes into a tf-idf vector using sklearn. this method has many options like n-gram range, maximum or minimum document frequency, maximum features, smoothing, and using sublinear term frequency. i tried different variations of tf-idf vectorization to see how that would affect k-means clustering. with this specific dataset, the maximum number of features seemed to be optimal around 1000-1500. anything beyond this would cause the clustering to have a lot of outliers, resulting in imbalanced and poorly grouped clusters. i also tried the sublinear term frequency option, but that caused some irregularities as well, similar to increasing number of features. 6. principal component analysis before doing k-means, i did do pca to reduce dimensionality in the tf-idf vector. if we look at the tf-idf vector, the x axis is the meme text and the y axis is one of the 1500 features or terms. where [x,y] meet is the term frequency. with 1500 features and 3031 meme text data segments, it's useful to construct a new feature subspace to reduce the risk of overfitting because the data is too generalized. 7. k-means k-means is an algorithm very similar to em algorithm where there is an assignment-like phase and then a maximize phase. in k-means, we first initialize cluster centroids randomly. then, repeat this until convergence: - for every data point, assign to nearest centroid via euclidean distance - move the centroids to the center of data points assigned to it for k-means clustering, i did do multiple runs with 2-6 clusters. i set maximum iterations to 600, but generally, it converged in < 100 iterations. with sklearn, it can do multiple randomized initializations in order to find the best possible local maxima, which may or may not be the global maxima. the default is 10, but i tried different ranges which usually didn't have much variance. 8. what is a good number of clusters? i used 2 methods in determining what might a good number of clusters look like: 1. elbow method 2. silhouette analysis the elbow method is a heuristic approach in which the number of clusters is plotted against the function of variance. a ""good"" number is where the curve has a definitive bend, resembling the shape of a human arm with an elbow. generally, 3 clusters provided the best elbow. however, with some different variations of the tf-idf vector and k-means, the bend was not explicit and was actually a smooth curve, which is one of the drawbacks of using the elbow method. the silhouette analysis measures the separation distance between clusters. the range of silhouette analysis can range from -1 to 1. - a value of 1 suggests the sample is far away from neighboring clusters. - a value of zero suggests the sample is very close to the boundary between two clusters. - a negative value suggests the sample may have been assigned to the wrong cluster. my results usually had values of > 0.75 for n clusters of 2-3, while it dropped off to < 0.5 for > 5 clusters. i did not observe any negative or zero values. i used code from scikit learn to do my silhouette analysis. with the elbow method and silhouette analysis, it seemed that 3 was a good number of clusters for this data. 9. evaluation and results overall, 3 clusters seemed to be the magic number based on evaluation. selecting features > 1500 seemed to be detrimental to clustering where the clusters were very skewed and had many outliers, even with pca dimensionality reduction. the 3 clusters had these top words: 1. will, people, now, see, man, know, time 2. win, boi, years, body, entire, million, master 3. pm, likes retweets, trump, follow, donald, will while some themes were not extremely clear like in cluster 1 and cluster 2, the third cluster was quite clear in terms of having a social media vibe. other top words in this third cluster were realdonaldtrump, elonmusk, and replying. for improvements, it might be useful to try different stemming methods and adding more stopwords like ""will"" or ""us."" but here is where ambiguity comes into play. without looking at each meme individually, it's hard to tell if will was in the context of an auxillary verb like ""will travel,"" or a noun like a legal document. the same goes for ""us."" does this mean us, like the group of us, or us like the united states? it would also be interesting to see bi-grams of this. when i did the tf-idf vectorization, i stuck with unigrams since i just wanted to use bag of words representation before getting ahead of myself. overall, this project has been a great learning experience in terms of working with real data, using google vision, seeing how k-means works especially after doing em algorithm work, and evaluation of clusters. despite deviating from the original plan of sentiment analysis, i did get the general outcomes i wanted with cluster analysis. it would have been nice to see more clusters or more clearly defined feature words, but i think that would have come with more refinement. how to run anaconda if you're interested in setting this up yourself, some test data is provided. here is what my environment looks like: - anaconda v4.9.2 - download here - python v3.7.9 - anaconda environment file here - os: windows subsystem linux 18.04 ubuntu (optional) git clone the repository or download the zip. navigate to the directory where it is saved. with the environment.yml file, change the prefix to where your anaconda environments are stored. for me, it is /home/skuretski/anaconda3/envs/cs410. so for you, it might be /your/directorytoanacondaenv/anacondaversion/envs/cs410 run command conda env create -f environment.yml run conda activate cs410 run jupyter notebook navigate to whatever url the jupyter notebook command logged. it is usually something like http://localhost:8888/?token=somestringhere navigate to kmeans.ipynb from the localhost page. i've included a directory called test_data which includes some resulting ocr json files locally. it is not all of them, but will give you a sense of how the code works. make sure the first cell is selected and then hit run. continue this in sequence. without anaconda without anaconda is possible, however, you will have to globally install some dependencies. - python v3.7.9 - matplotlib v3.3.2 - numpy v1.19.2 - pandas v1.1.3 - seaborn v0.11.0 - nltk v3.5 - scikit-learn v0.23.2 - scipy v1.5.2 - wordcloud v1.8.1 - jupyter notebook this project is powered by python, those listed libraries, and jupyter notebook."	['susan', 'kuretski', 'skureillinoisedu', 'cs', 'fall', 'course', 'project', 'progress', 'report', 'overview', 'uses', 'dataset', 'kaggle', 'httpswwwkagglecomsayangoswamiredditmemesdataset', 'perform', 'optical', 'character', 'recognition', 'reddit', 'memes', 'cluster', 'analysis', 'original', 'proposal', 'stated', 'sentiment', 'reviewer', 'suggested', 'switched', 'via', 'kmeans', 'since', 'upvotes', 'downvotes', 'affected', 'multiple', 'factors', 'hope', 'uncover', 'unlikely', 'themes', 'tasks', 'completed', 'day', 'download', 'clean', 'data', 'uploaded', 'images', 'google', 'cloud', 'platform', 'storage', 'performed', 'vision', 'translate', 'determine', 'language', 'stored', 'results', 'gcp', 'pending', 'evaluation', 'ocr', 'processing', 'make', 'meme', 'term', 'vector', 'plot', 'clusters', 'determining', 'good', 'number', 'elbow', 'method', 'silhouette', 'see', 'challenges', 'biggest', 'challenge', 'unfamiliarity', 'unsupervised', 'learning', 'chose', 'dont', 'ground', 'truth', 'labelled', 'pondered', 'halving', 'label', 'best', 'use', 'time', 'may', 'seem', 'straightforward', 'experienced', 'would', 'imagine', 'take', 'fine', 'tune', 'stands', 'spent', 'four', 'hours', 'another', 'working', 'text', 'originated', 'often', 'sarcastic', 'misspelled', 'infers', 'cultural', 'societal', 'knowledge', 'layers', 'ambiguity', 'room', 'error', 'team', 'members', 'one', 'de', 'facto', 'captain', 'description', 'option', 'free', 'topic', 'task', 'objective', 'also', 'known', 'using', 'characters', 'image', 'processed', 'tokenized', 'stringswords', 'essentially', 'transforms', 'bag', 'words', 'probabilistic', 'approach', 'ideally', 'like', 'naive', 'bayes', 'laplace', 'estimation', 'avoid', 'assignment', 'zero', 'probabilities', 'never', 'implemented', 'application', 'ends', 'rabbit', 'hole', 'switch', 'gears', 'semantic', 'plsa', 'importanceinteresting', 'general', 'useful', 'users', 'feelings', 'attitudes', 'towards', 'certain', 'items', 'whether', 'review', 'comment', 'product', 'regards', 'interesting', 'gather', 'positive', 'negative', 'correlates', 'planned', 'tools', 'systems', 'datasets', 'estimates', 'estimate', 'get', 'httpswwwkagglecomsayangoswamiredditmemesdata', 'set', 'cleaning', 'pass', 'ensure', 'urls', 'seemingly', 'correct', 'terms', 'structure', 'integers', 'hour', 'downloaded', 'andor', 'iterate', 'entry', 'fetch', 'store', 'discard', 'invalid', 'run', 'httpscloudgooglecomvisiondocsocr', 'evaluate', 'accuracy', 'want', 'minimize', 'need', 'repeat', 'become', 'expensive', 'transform', 'usable', 'maybe', 'try', 'ngrams', 'define', 'fit', 'model', 'scikitlearn', 'python', 'previous', 'experience', 'metrics', 'comparing', 'upvotedownvotes', 'attempt', 'better', 'steps', 'total', 'hrs', 'expected', 'outcomes', 'final', 'percentage', 'hopes', 'greater', 'implement', 'improvements', 'initial', 'possible', 'affecting', 'slang', 'intentional', 'misspellings', 'inaccuracy', 'programming', 'languages', 'aws', 'api', 'written', 'susie', 'video', 'link', 'youtube', 'httpswwwyoutubecomwatchvkleddgqizya', 'way', 'contact', 'slack', 'cstextinfosyst', 'skuretskigmailcom', 'quick', 'utilizing', 'visions', 'includes', 'extracted', 'bucket', 'ran', 'translation', 'docs', 'done', 'json', 'example', 'starting', 'result', 'src_lang', 'en', 'study', 'testnand', 'answers', 'rightnso', 'power', 'ultra', 'instinctn', 'file_name', 'ujpg', 'id', 'u', 'goal', 'discover', 'groups', 'common', 'stepbystep', 'details', 'used', 'code', 'dfoly', 'preprocessing', 'check', 'sure', 'row', 'tableau', 'prep', 'find', 'rows', 'without', 'properties', 'local', 'machine', 'fix', 'directories', 'scriptsh', 'minor', 'setback', 'took', 'couple', 'complete', 'performing', 'wrote', 'script', 'ocrprocessingpy', 'decided', 'well', 'could', 'filter', 'nonenglish', 'met', 'criteria', 'nonnull', 'english', 'primary', 'important', 'regular', 'expressions', 'things', 'contractions', 'newlines', 'whitespace', 'numbers', 'nonalphabetical', 'commonly', 'found', 'eg', 'shes', 'ur', 'stop', 'stemming', 'natural', 'toolkit', 'nltk', 'add', 'additional', 'based', 'findings', 'rdankmemes', 'tag', 'porter', 'stemmer', 'relatively', 'fast', 'works', 'idea', 'suffixes', 'made', 'combination', 'smaller', 'simpler', 'tfidf', 'vectorization', 'transformed', 'sklearn', 'many', 'options', 'ngram', 'range', 'maximum', 'minimum', 'document', 'frequency', 'features', 'smoothing', 'sublinear', 'tried', 'different', 'variations', 'affect', 'clustering', 'specific', 'seemed', 'optimal', 'around', 'anything', 'beyond', 'cause', 'lot', 'outliers', 'resulting', 'imbalanced', 'poorly', 'grouped', 'caused', 'irregularities', 'similar', 'increasing', 'principal', 'component', 'pca', 'reduce', 'dimensionality', 'look', 'x', 'axis', 'xy', 'meet', 'segments', 'construct', 'new', 'feature', 'subspace', 'risk', 'overfitting', 'generalized', 'algorithm', 'em', 'assignmentlike', 'phase', 'maximize', 'first', 'initialize', 'centroids', 'randomly', 'convergence', 'every', 'point', 'assign', 'nearest', 'centroid', 'euclidean', 'distance', 'move', 'center', 'points', 'assigned', 'runs', 'iterations', 'generally', 'converged', 'randomized', 'initializations', 'order', 'maxima', 'global', 'default', 'ranges', 'usually', 'didnt', 'much', 'variance', 'methods', 'might', 'heuristic', 'plotted', 'function', 'curve', 'definitive', 'bend', 'resembling', 'shape', 'human', 'arm', 'provided', 'however', 'explicit', 'actually', 'smooth', 'drawbacks', 'measures', 'separation', 'value', 'suggests', 'sample', 'far', 'away', 'neighboring', 'close', 'boundary', 'two', 'wrong', 'values', 'n', 'dropped', 'observe', 'scikit', 'learn', 'overall', 'magic', 'selecting', 'detrimental', 'skewed', 'even', 'reduction', 'top', 'people', 'man', 'know', 'win', 'boi', 'years', 'body', 'entire', 'million', 'master', 'pm', 'likes', 'retweets', 'trump', 'follow', 'donald', 'extremely', 'clear', 'third', 'quite', 'social', 'media', 'vibe', 'realdonaldtrump', 'elonmusk', 'replying', 'adding', 'stopwords', 'us', 'comes', 'play', 'looking', 'individually', 'hard', 'tell', 'context', 'auxillary', 'verb', 'travel', 'noun', 'legal', 'goes', 'mean', 'group', 'united', 'states', 'bigrams', 'stuck', 'unigrams', 'wanted', 'representation', 'getting', 'ahead', 'great', 'real', 'seeing', 'especially', 'work', 'despite', 'deviating', 'plan', 'nice', 'clearly', 'defined', 'think', 'come', 'refinement', 'anaconda', 'youre', 'interested', 'setting', 'test', 'environment', 'looks', 'v', 'file', 'os', 'windows', 'subsystem', 'linux', 'ubuntu', 'optional', 'git', 'clone', 'repository', 'zip', 'navigate', 'directory', 'saved', 'environmentyml', 'change', 'prefix', 'environments', 'homeskuretskianacondaenvscs', 'yourdirectorytoanacondaenvanacondaversionenvscs', 'command', 'conda', 'env', 'create', 'f', 'activate', 'jupyter', 'notebook', 'whatever', 'url', 'logged', 'something', 'httplocalhosttokensomestringhere', 'kmeansipynb', 'localhost', 'page', 'ive', 'included', 'called', 'test_data', 'files', 'locally', 'give', 'sense', 'cell', 'selected', 'hit', 'continue', 'sequence', 'globally', 'install', 'dependencies', 'matplotlib', 'numpy', 'pandas', 'seaborn', 'scipy', 'wordcloud', 'powered', 'listed', 'libraries']
https://github.com/sonalsharma5990/CourseProject	"project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. sonal sharma sonals3 (captain) maneesh kumar singh mksingh4 kamlesh chegondi kamlesh2 2. which paper have you chosen? subtopic: causal topic modeling paper: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? we have registered on the ldc site and are awaiting access. tas are notified on same via piazza@770 post 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? topic-level causality analysis from topic modeling results -> generate topic curve over time topic's coverage on each time unit (e.g. one day) consider a weighted coverage count. specifically compute the coverage of a topic in each document p(topic_j|document_d) => theta_j estimate the coverage of topic j at t_i t_c_i_j as sum of thera_j over all documents with t_i timestamp. t_c_i_j = sum(theta_j) ts_j => list of t_c_j for all the timestamps creates topic stream time series that, combined with non-textual time series data lends itself to standard time series causality measures c and testing. select lag value is important? how => chose lag with highest significance word-level causality and prior generation chose topics with highest causality scores and further analyze the words withing each topic to generate topic proors for each word, generate a word count stream w s_w by counting frequencies in the input document collection for each day: w_c_i = sum c(w,d) measure correlation and significance between word streams and external non-textual time series. then wemeasure correlations and significance between word streams andthe external non-textdual time series. this identifys words that aresignificantly correlated and their impact values. project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. sonal sharma sonals3 (captain) maneesh kumar singh mksingh4 kamlesh chegondi kamlesh2 2. which paper have you chosen? subtopic: causal topic modeling paper: hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? we have registered on the ldc site and are awaiting access. tas are notified on same via piazza@770 post 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? project progress report team: best bots s.no. task current status remarks/impediments 1 access to dataset by all members completed 2 understanding the dataset completed how to deal with gaps in dataset. raised @1273 on piazza 3 find parallel time series dataset completed 4 finding the libraries required for implementation completed 5 perform preprocessing of data 90% completed 6 perform lda on news data set 10% completed currently performing lda on may data 7 apply granger test to determine causality relationship. 75% completed matrix multiplication not providing expected results. trying to do this using for loops 9 for each candidate topic apply causality measure to find most significant causal words among top words in each topic. 75% completed matrix multiplication not providing expected results. trying to do this using for loops 10 record the impact values of these significance words using pearson correlations not started currently being done in granger test. yet to implement pearson coefficients. we may not need it. 11 separate positive impact terms and negative impact terms 75% completed implementation is done. testing in progress with actual data. 12 if orientation of words in prior step is very weak, ignore minor group 75% completed implementation is done. testing in progress with actual data. 13 assign prior probabilities proportions according to significance levels 75% completed implementation is done. testing in progress. 14 apply lda to documents using prior obtained 10% completed research on parameters for gensim lda. 15 repeat until satisfying stopping criteria (e.g. reach topic quality at some point, no more significant topic change). completed in our experiment iteration count is 5 16. make final project documentation report. not started 17. software usage tutorial presentation not started iterative topic modeling framework with time series feedback abstract as part of our final project for cs410 text information systems, we are reproducing paper ""topic modeling framework with time series feedback"". we chose to reproduce experiment of 2000 u.s. presidential election campaign due to its low data size. we followed the steps and algorithm as mentioned in the paper and were able to get results which are very similar to results provided in the paper. with this project, we learnt about topic modeling and how topic modeling combined with timeseries feedback can be used to explain the relation between text and non-text time series. authors team bestbots | name | netid | | ------------------- | --------------------- | | maneesh kumar singh | mksingh4@illinois.edu | | sonal sharma | sonals3@illinois.edu | | kamlesh chegondi | kamlesh2@illinois.edu | table of contents iterative topic modeling framework with time series feedback abstract authors team bestbots table of contents project video algorithm parameters time series data collection of documents with ts from same period topic modeling method m causality measure c tn mu m gamma  delta d output steps how to run? initial setup run program dataset nyt corpus data iem 2000 winner takes all data data preprocessing ny times corpus iem winner takes all data handling of missing data stop words removal implementation hurdles and ladders final results significant topics 2000 presidential election quantitative evaluation results conclusion acknowledgments references appendix evaluation system software/tools used project video https://youtu.be/bp7ekocasvu algorithm parameters time series data x = x_1, ... , x_n with timestamp (t_1, t_2, ..., t_n) collection of documents with ts from same period d = {(d1,td1),..,(dm,tdm)} topic modeling method m identifies topics causality measure c significance measures (e.g. p-value) and impact orientation tn how many topics to model mu m strength of the prior gamma  significance threshold delta d impact threshold output k potentially causal topics (k<=tn): (t1,l1),... (tk, lk) steps apply m to d to generate tn topics t1,..,tn use c to find topics with significance value sig(c,x,t) > gamma(95%) ct: set of candidates causal topics with lags {(tc1, l1),..,(tck,lk)}. for each candidate topic ct, apply c to find most significant causal words among top words w subset of t. record the impact values of these significance words (e.g. word-leave pearson correlations with time series variable) define a prior on the topic model parameters using significant terms and impact values separate positive impact terms and negative impact terms if orientation is very weak ( delta < 10%) ignore minor group assign prior probabilities proportions according to significance levels apply m to d using prior obtained in step 4. repeat 2-5 until satisfying stopping criteria (e.g. reach topic quality at some point, no more significant topic change). when the process stops, ct is the output causal topic list. how to run? this program has been tested for python 3.8.5. it may work for older version of python (>=3.6), but was not tested. here are the instructions to run this program. initial setup this program can be run with or without virtual environment setup. however virtual environment is highly recommended. below are the steps required for ubuntu 20.04.1 lts. ```bash install virtualenvwrapper pip3 install virtualenvwrapper --user setup virtualenvwrapper path if not already done export path=""$home/.local/bin:$path"" if python3 is aliased on your system, you need to setup environment variable for virtualenvwrapper to know where to pick python export virtualenvwrapper_python=/usr/bin/python3 source virtualenvwrapper.sh so that all helper commands are added to path source ~/.local/bin/virtualenvwrapper.sh make virtualenv. demo can be any name. mkvirtualenv demo clone the repository git clone https://github.com/sonalsharma5990/courseproject.git install dependencies cd courseproject/src pip install -r requirements.txt ``` run program there are three options to run the program. below command uses the saved model to find significant topics and words. as it does not need to train the model, it is the fastest option and finishes in less than 5 minutes. bash python main.py you can also train the model again. below command trains the model using the prior strength mu and eta (topic_word_prob) for 5 iterations. please note currently it is not possible to set the mu, eta or number of iteration options from command line. these must be changed in code. as this option trains the model five times (five iterations). it takes 12 to 15 minutes to run the program. bash python main.py retrain you can run topic causal modeling for various prior strength (mu) and number of clusters (tn), as mentioned in the section 5.2.2 quantitative evaluation results. this generates graphs between various mu, tn and average causal significance and purity. as this program runs model training for each mu/tn combination five times. this takes 40 minutes to run on a large aws ec2 instance. ```bash python main.py graph ``` dataset nyt corpus data new york times corpus was provided by ta's based on request by each team member. the dataset due to its huge size and access restriction is not included in this repository. iem 2000 winner takes all data the data from may-2000 to nov-2000 was manually selected from iem website iem 2000 u.s. presidential election: winner-takes-all market the data for each month was selected using dropdown and copied to a spreadsheet. after data for all months have been collected, the spreadsheet is saved as an csv file. data preprocessing 2000 presidential election campaign experiment required ny times corpus and iem winner takes all data from may-2000 to oct-2000. in additional ny times corpus data is in xml so it was required to parse and extract required component. we wrote pre_processing.py module to take care for both tasks. it performs following tasks ny times corpus using lxml library, extract body of ny corpus dataset between 01-may-2000 to 31-oct-2000. check if body contains gore or bush, if yes extract only the paragraph containing bush and gore. combine all paragraphs for single article and write it as a single line ny times output is gzipped to save space. it is stored as data.txt.gz in data/experiment_1 folder. ny times output file contains each document as line, so line index is treated as document id using line index (starts from 0), a document and date mapping file is created. this file is required in order to count documents/words for causal processing. iem winner takes all data using pandas, the iem winner takes csv is read filter dates between 01-may-2000 to 31-oct-2000. using gore as baseline, the lastprice column is normalized goreprice = goreprice/(goreprice + bushprice) only date and lastprice column is kept. as this file is small it is kept in memory for whole run. handling of missing data on analysis of iem data with ny times corpus data, we found that iem data is missing values for two dates 07-jun-2000, 08-jun-2000. these dates are filled with values from next (future) available last price which was available for 09-jun-2000. stop words removal on running the topic modeling several times we realized the initial and significant topics are dominated by most occurred terms in the corpus. e.g. almost every topic had bush said with highest probability. we had to either implement some kind of tf-idf for topic modeling or ignore the common words altogether. after some review we decided to go with removal of these words from the corpus as stop words. names of candidates as they are frequently used e.g. bush, gore common political words e.g. president, presidential, campaign parties e.g. republican, democratic states e.g. new york, florida. these states were home states for the candidates. common verbs and words e.g. said, asked, told, went time words e.g today, yesterday, wednesday implementation our goal was to reproduce experiment-1 involving 2000 u.s. presidential election campaign. we took the various parameter values as mentioned in the paper to find significant topics in causal analysis. the parameters used are number of topics (tn) = 30 prior strength (m) = 50 significance threshold () = 95% (0.95) delta threshold (to ignore topic based on impact) (d) = 10% (0.10) number of iterations = 5 we also tried to analyse our topic modeling results quantitatively. for this we ran our experiment with different values for prior strength m and number of topics tn. we fixed tn = 5 during run for testing different m. m values tested: 10, 50, 100, 500, 1000 we fixed prior strength m = 50 to test different values for tn. tn values tested: 10, 20, 30, 40 1) gensim lda is used for topic modeling. that represents m in the algorithm. eta parameter was used for priors and delay is used for prior. delay may not be correct parameter for prior strength, but after weighing other options and discussions with students, we decided to use it. @1378 on piazza. 2) statsmodel library granger test function. this function allowed us to test correlation with different lag. we tried granger test with up to 5 day delay and took the best lag for both topic and word significance. 3) for impact value, we calculated the average of lagged x coefficients as mentioned in the paper. if the impact was positive, we interpreted as +1 and negative value as -1. as we were only interested in most significant topic and words we didn't get a result with 0 impact. we used 1 - p value as significance score. 4) in order to select top words for causal analysis, the paper discusses using mass probability cutoff (probm). its value was not provided. after trying with various values for probm we settled on 0.40. this cutoff allowed us to select most important words for causal analysis. increasing this from 0.40 doesn't give any better results. hurdles and ladders 1) algorithm to implement topic modelling: we had a tough call between plsa and lda here. mp3 plsa is heavily un-optimized. it even fails with memory error with experiment-1 document data. (presidential campaign vs iowa market), whereas lda using gensim library uses a lot of inner dependencies and the m step is not as clear(as in lectures) to incorporate mu.(question @1378 on piazza) post feedback and discussion with professor and students we used the decay parameter as mu to implement the paper. 2) missing data for some dates in non-text series we have used future value in this case after research.to justify the same, in case of stock data in week 9/11, we would miss the impact in stock if using previous values. 3) granger test to determine causality relationship we used 1- p value for score which amounts to almost 0 values getting 100% score. 4) add customized stop words in data preprocessing we removed words that were not adding any value to topics found. names of candidates as they are frequently used e.g. bush, gore political words e.g. president, presidential parties e.g. republican, democratic states e.g. new york, florida common verbs and words e.g. said, asked, told, went time words e.g today, yesterday, wednesday final results significant topics 2000 presidential election after training the lda model for several times, we were able to match few important topics of 2000 presidential election campaign. tax cut, healthcare, abortion played a major role during the campaign and we can see our method was able to find some of these major topics. | top 3 words in significant topics | | --------------------------------- | | tax lazio house | | national know administration | | tax aides advisers | | security social american | | officials aides american | | medicare tax security | | tax federal polls | | national house tax | | abortion american national | | drug american tax | quantitative evaluation results as discussed in the paper, we also tried validating our results with various values of prior strength mu and number of topics (tn) with average causality and purity. in the paper, increasing values of mu and tn causes a mostly upward trend in average causality and and purity. our reproduction however could not see the same relation. we got the highest causality and purity with the initial values of mu and tn and it mostly remains constant after that. this is something that we would like to further research. conclusion using iterative topic modeling with time series feedback (itmtf) for causal topic mining, we were able to reproduce the paper. we were able to successfully get topics which were prominent in 2000 presidential election. we also tried to quantitative evaluate the topic mining results and unlike paper, our results saw little gain in confidence and purity with increasing values of prior strength (mu) and number of topics(tn). as a future task, the quantitative results need to be further researched and the findings can be utilized to improve our algorithm. acknowledgments we would like to thank professor chengxiang zhai for a great course and guidance to complete this project. we would also like to thank our tas for always being available for any questions and issues. we are also grateful for fellow students on piazza and slack for motivation and fruitful discussion in completing this project. references [kim et al. 13] hyun dukkim, malucastellanos, meichunhsu, chengxiangzhai, thomas rietz, and daniel diermeier. 2013. mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management(cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 appendix evaluation system the algorithm was evaluated on aws ec2 c5.12xlarge ubuntu instance. software/tools used | tool | usage | version | link | | -------------- | ------------------------- | ------- | ----------------------------------------------- | | python | programming language | 3.8.5 | https://www.python.org/ | | statsmodel | granger test | 0.12.1 | https://www.statsmodels.org/stable/index.html | | gensim library | lda topic modeling | 3.8.3 | https://radimrehurek.com/gensim/ | | pandas | csv and data processing | 1.1.5 | https://pandas.pydata.org/ | | numpy | array/matrix manipulation | 1.19.4 | https://numpy.org/ | | tabulate | printing results in table | 0.8.7 | https://github.com/astanin/python-tabulate | | lxml | parse ny times xml corpus | 4.6.2 | https://pypi.org/project/lxml/ | | matplotlib | draw evaluation plots | 3.3.3 | https://pypi.org/project/matplotlib/ |"	['project', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'sonal', 'sharma', 'sonals', 'maneesh', 'kumar', 'singh', 'mksingh', 'kamlesh', 'chegondi', 'paper', 'chosen', 'subtopic', 'causal', 'topic', 'modeling', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'mining', 'topics', 'text', 'data', 'iterative', 'time', 'series', 'feedback', 'proceedings', 'nd', 'acm', 'international', 'conference', 'information', 'knowledge', 'management', 'cikm', 'new', 'york', 'ny', 'usa', 'doi', 'programming', 'language', 'plan', 'use', 'python', 'obtain', 'datasets', 'used', 'evaluation', 'registered', 'ldc', 'site', 'awaiting', 'access', 'tas', 'notified', 'via', 'piazza', 'post', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'topiclevel', 'causality', 'analysis', 'results', 'generate', 'curve', 'coverage', 'unit', 'one', 'day', 'consider', 'weighted', 'count', 'specifically', 'compute', 'document', 'ptopic_jdocument_d', 'theta_j', 'estimate', 'j', 't_i', 't_c_i_j', 'sum', 'thera_j', 'documents', 'timestamp', 'sumtheta_j', 'ts_j', 'list', 't_c_j', 'timestamps', 'creates', 'stream', 'combined', 'nontextual', 'lends', 'standard', 'measures', 'c', 'testing', 'select', 'lag', 'value', 'important', 'chose', 'highest', 'significance', 'wordlevel', 'prior', 'generation', 'scores', 'analyze', 'words', 'withing', 'proors', 'word', 'w', 's_w', 'counting', 'frequencies', 'input', 'collection', 'w_c_i', 'cwd', 'measure', 'correlation', 'streams', 'external', 'wemeasure', 'correlations', 'andthe', 'nontextdual', 'identifys', 'aresignificantly', 'correlated', 'impact', 'values', 'progress', 'report', 'best', 'bots', 'sno', 'task', 'current', 'status', 'remarksimpediments', 'completed', 'understanding', 'deal', 'gaps', 'raised', 'find', 'parallel', 'finding', 'libraries', 'required', 'implementation', 'perform', 'preprocessing', 'lda', 'news', 'set', 'currently', 'performing', 'may', 'apply', 'granger', 'test', 'determine', 'relationship', 'matrix', 'multiplication', 'providing', 'expected', 'trying', 'using', 'loops', 'candidate', 'significant', 'among', 'top', 'record', 'pearson', 'started', 'done', 'yet', 'implement', 'coefficients', 'need', 'separate', 'positive', 'terms', 'negative', 'actual', 'orientation', 'step', 'weak', 'ignore', 'minor', 'group', 'assign', 'probabilities', 'proportions', 'according', 'levels', 'obtained', 'research', 'parameters', 'gensim', 'repeat', 'satisfying', 'stopping', 'criteria', 'reach', 'quality', 'point', 'change', 'experiment', 'iteration', 'make', 'final', 'documentation', 'software', 'usage', 'tutorial', 'presentation', 'framework', 'abstract', 'part', 'cs', 'systems', 'reproducing', 'reproduce', 'us', 'presidential', 'election', 'campaign', 'due', 'low', 'size', 'followed', 'steps', 'algorithm', 'mentioned', 'able', 'get', 'provided', 'learnt', 'timeseries', 'explain', 'relation', 'nontext', 'authors', 'bestbots', 'name', 'netid', 'mksinghillinoisedu', 'sonalsillinoisedu', 'kamleshillinoisedu', 'table', 'contents', 'video', 'ts', 'period', 'tn', 'mu', 'gamma', 'delta', 'output', 'run', 'initial', 'setup', 'program', 'nyt', 'corpus', 'iem', 'winner', 'takes', 'times', 'handling', 'missing', 'stop', 'removal', 'hurdles', 'ladders', 'quantitative', 'conclusion', 'acknowledgments', 'references', 'appendix', 'system', 'softwaretools', 'httpsyoutubebpekocasvu', 'x', 'x_', 'x_n', 't_', 't_n', 'dtddmtdm', 'identifies', 'pvalue', 'many', 'model', 'strength', 'threshold', 'k', 'potentially', 'ktn', 'tl', 'tk', 'lk', 'ttn', 'sigcxt', 'ct', 'candidates', 'lags', 'tc', 'ltcklk', 'subset', 'wordleave', 'variable', 'define', 'process', 'stops', 'tested', 'work', 'older', 'instructions', 'without', 'virtual', 'environment', 'however', 'highly', 'recommended', 'ubuntu', 'lts', 'bash', 'install', 'virtualenvwrapper', 'pip', 'user', 'path', 'already', 'export', 'pathhomelocalbinpath', 'aliased', 'know', 'pick', 'virtualenvwrapper_pythonusrbinpython', 'source', 'virtualenvwrappersh', 'helper', 'commands', 'added', 'localbinvirtualenvwrappersh', 'virtualenv', 'demo', 'mkvirtualenv', 'clone', 'repository', 'git', 'httpsgithubcomsonalsharmacourseprojectgit', 'dependencies', 'cd', 'courseprojectsrc', 'r', 'requirementstxt', 'three', 'options', 'command', 'uses', 'saved', 'train', 'fastest', 'option', 'finishes', 'less', 'minutes', 'mainpy', 'also', 'trains', 'eta', 'topic_word_prob', 'iterations', 'please', 'note', 'possible', 'number', 'line', 'must', 'changed', 'code', 'five', 'retrain', 'various', 'clusters', 'section', 'generates', 'graphs', 'average', 'purity', 'runs', 'training', 'mutn', 'combination', 'large', 'aws', 'ec', 'instance', 'graph', 'based', 'request', 'member', 'huge', 'restriction', 'included', 'nov', 'manually', 'selected', 'website', 'winnertakesall', 'market', 'month', 'dropdown', 'copied', 'spreadsheet', 'months', 'collected', 'csv', 'file', 'oct', 'additional', 'xml', 'parse', 'extract', 'component', 'wrote', 'pre_processingpy', 'module', 'take', 'care', 'tasks', 'performs', 'following', 'lxml', 'library', 'body', 'check', 'contains', 'gore', 'bush', 'yes', 'paragraph', 'containing', 'combine', 'paragraphs', 'single', 'article', 'write', 'gzipped', 'save', 'space', 'stored', 'datatxtgz', 'dataexperiment_', 'folder', 'index', 'treated', 'id', 'starts', 'date', 'mapping', 'created', 'order', 'documentswords', 'processing', 'pandas', 'read', 'filter', 'dates', 'baseline', 'lastprice', 'column', 'normalized', 'goreprice', 'gorepricegoreprice', 'bushprice', 'kept', 'small', 'memory', 'whole', 'found', 'two', 'jun', 'filled', 'next', 'future', 'available', 'last', 'price', 'running', 'several', 'realized', 'dominated', 'occurred', 'almost', 'every', 'said', 'probability', 'either', 'kind', 'tfidf', 'common', 'altogether', 'review', 'decided', 'go', 'frequently', 'political', 'president', 'parties', 'republican', 'democratic', 'states', 'florida', 'home', 'verbs', 'asked', 'told', 'went', 'today', 'yesterday', 'wednesday', 'goal', 'involving', 'took', 'parameter', 'tried', 'analyse', 'quantitatively', 'ran', 'different', 'fixed', 'represents', 'priors', 'delay', 'correct', 'weighing', 'discussions', 'students', 'statsmodel', 'function', 'allowed', 'calculated', 'lagged', 'interpreted', 'interested', 'didnt', 'result', 'p', 'score', 'discusses', 'mass', 'cutoff', 'probm', 'settled', 'increasing', 'doesnt', 'give', 'better', 'modelling', 'tough', 'call', 'plsa', 'mp', 'heavily', 'unoptimized', 'even', 'fails', 'error', 'vs', 'iowa', 'whereas', 'lot', 'inner', 'clearas', 'lectures', 'incorporate', 'muquestion', 'discussion', 'professor', 'decay', 'case', 'researchto', 'justify', 'stock', 'week', 'would', 'miss', 'previous', 'amounts', 'getting', 'add', 'customized', 'removed', 'adding', 'match', 'tax', 'cut', 'healthcare', 'abortion', 'played', 'major', 'role', 'see', 'lazio', 'house', 'national', 'administration', 'aides', 'advisers', 'security', 'social', 'american', 'officials', 'medicare', 'federal', 'polls', 'drug', 'discussed', 'validating', 'causes', 'mostly', 'upward', 'trend', 'reproduction', 'could', 'got', 'remains', 'constant', 'something', 'like', 'itmtf', 'prominent', 'evaluate', 'unlike', 'saw', 'little', 'gain', 'confidence', 'topicstn', 'researched', 'findings', 'utilized', 'improve', 'thank', 'great', 'course', 'guidance', 'complete', 'always', 'issues', 'grateful', 'fellow', 'slack', 'motivation', 'fruitful', 'completing', 'et', 'al', 'dukkim', 'malucastellanos', 'meichunhsu', 'chengxiangzhai', 'managementcikm', 'evaluated', 'cxlarge', 'tool', 'link', 'httpswwwpythonorg', 'httpswwwstatsmodelsorgstableindexhtml', 'httpsradimrehurekcomgensim', 'httpspandaspydataorg', 'numpy', 'arraymatrix', 'manipulation', 'httpsnumpyorg', 'tabulate', 'printing', 'httpsgithubcomastaninpythontabulate', 'httpspypiorgprojectlxml', 'matplotlib', 'draw', 'plots', 'httpspypiorgprojectmatplotlib']
https://github.com/soumya834-msit/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/srashee2/CourseProject	cs410 progress report team starks saad rasheed - srashee2 - javier huamani - huamani2 sai allu - allu2 which tasks have been completed? our team has currently taken the the new york times annotated corpus dataset and extracted the data given to us into more useful excel and csv files. our team has taken these csv files and have used different libraries (gensim, pandas, sklearn, and nltk) to create an example of topic modelling with time series feedback. which tasks are pending? to successfully recreate the paper our team still needs to find the stock time series data and run that against our code, while refining the code to find the optimal execution. lastly, we have to implement measures of quality such as a granger test. 3) are you facing any challenges? the stock time series data seems to be not referenced in the paper. we also have an issue with deterministic / non-deterministic results when running our code. project proposal submission 1. saad rasheed - srashee2 - team leader javier huamani - huamani2 sai allu - allu2 2. mining causal topics in text data: iterative topic modeling with time series feedback a. https://www.biz.uiowa.edu/faculty/trietz/papers/itmtf.pdf 3. python 4. yes a. https://catalog.ldc.upenn.edu/ldc2008t19 cs410 final project: iterative topic modeling with time series feedback team starks saad rasheed - srashee2 javier huamani - huamani2 sai allu - allu2 demonstration https://youtu.be/bc6qcxof8xq purpose team starks set out to recreate mining causal topics in text data title mining causal topics in text data: iterative topic modeling with time series feedback authors hyun duk kim, malu castellanos, meichun hsu, chengxiang zhai, thomas rietz, and daniel diermeier citation mining causal topics in text data: iterative topic modeling with time series feedback. in proceedings of the 22nd acm international conference on information & knowledge management (cikm 2013). acm, new york, ny, usa, 885-890. doi=10.1145/2505515.2505612 introduction in our final project we create a text mining application to find causal topics from corpus data. our application takes a probabilistic topic model and using time-series data we explore topics that are causally correlated with said time-series data. we improve on the topics at each iteration by using prior distributions. to determine causality we are using granger causality tests which is a popular testing mechanism used with lead and lag relationships across time series. libraries pandas - used for data manipulation and analysis scikit-learn - used for classification, regression and clustering algorithms nltk - used for symbolic and statistical natural language processesing pyldavis - used to help interptret topics from a lda topic model statsmodels - used for statistical computations files corpus data * nyt2000_1.csv * nyt2000_2.csv iem stock data * iem2000.xlsx main application * lda.py code walkthrough we begin by reading in the corpus data that we segmented into two files to be able to store alongside the code. we then clean the data by removing nan values and other filtering. we do more filtering and remove unneccesary characters and then lemmatize the data. we then read in the iem data and normalize it. we then take the corpus data and generate the counts and vocabulary to create a document term matrix now we're able to fit the lda model, we use 15 topics and have found that number to be optimal. for each date we create a topic stream and aggregate topic coverages and plot them. to evaluate causality we then run granger tests against each topic and output the p values for the f tests against each lag. to determine the optimal lag value we aggregate p values. we sort the p values in ascending order. of the top 25 words for each topic we run granger causality tests and pearson coefficient tests. we only continue if we get a p value of less than .05. to actually create the priors we evaluate a topic based on its negative or positive bias. if a topic has a dominated negative or positive bias we create a prior for each word and assign it to a single topic. conversely, if there is no negative or positive bias we split the word into two topics and assign it to a single topic. our code then iterates using the generated prior (on the first iteration the priors are empty) and fits the lda model again according to the max iteration. how to run the easiest way to run our code is to download anaconda and run it through jupyter notebook $ git clone https://github.com/srashee2/courseproject.git $ cd courseproject $ jupyter notebook you can now click on lda.ipynb and click run all cells. it will take some time to run through the code, approximately 1 hour. contributions team starks came together over the course of a few months with weekly meetings to understand, learn and recreate iterative topic modeling with time series feedback. more specific contributions for the team members can be found below. all team members did the following: library research, paper breakdown and documentation. saad rasheed - logistical work, corpus text extraction, presentation, and lda modeling iteration javier huamani - text filtering and manipulation, lda modeling, granger causality, and pearson coefficient tests sai allu - text filtering and manipulation, lda modeling, granger causality, and presentation	['cs', 'progress', 'report', 'team', 'starks', 'saad', 'rasheed', 'srashee', 'javier', 'huamani', 'sai', 'allu', 'tasks', 'completed', 'currently', 'taken', 'new', 'york', 'times', 'annotated', 'corpus', 'dataset', 'extracted', 'data', 'given', 'us', 'useful', 'excel', 'csv', 'files', 'used', 'different', 'libraries', 'gensim', 'pandas', 'sklearn', 'nltk', 'create', 'example', 'topic', 'modelling', 'time', 'series', 'feedback', 'pending', 'successfully', 'recreate', 'paper', 'still', 'needs', 'find', 'stock', 'run', 'code', 'refining', 'optimal', 'execution', 'lastly', 'implement', 'measures', 'quality', 'granger', 'test', 'facing', 'challenges', 'seems', 'referenced', 'also', 'issue', 'deterministic', 'nondeterministic', 'results', 'running', 'project', 'proposal', 'submission', 'leader', 'mining', 'causal', 'topics', 'text', 'iterative', 'modeling', 'httpswwwbizuiowaedufacultytrietzpapersitmtfpdf', 'python', 'yes', 'httpscatalogldcupenneduldct', 'final', 'demonstration', 'httpsyoutubebcqcxofxq', 'purpose', 'set', 'title', 'authors', 'hyun', 'duk', 'kim', 'malu', 'castellanos', 'meichun', 'hsu', 'chengxiang', 'zhai', 'thomas', 'rietz', 'daniel', 'diermeier', 'citation', 'proceedings', 'nd', 'acm', 'international', 'conference', 'information', 'knowledge', 'management', 'cikm', 'ny', 'usa', 'doi', 'introduction', 'application', 'takes', 'probabilistic', 'model', 'using', 'timeseries', 'explore', 'causally', 'correlated', 'said', 'improve', 'iteration', 'prior', 'distributions', 'determine', 'causality', 'tests', 'popular', 'testing', 'mechanism', 'lead', 'lag', 'relationships', 'across', 'manipulation', 'analysis', 'scikitlearn', 'classification', 'regression', 'clustering', 'algorithms', 'symbolic', 'statistical', 'natural', 'language', 'processesing', 'pyldavis', 'help', 'interptret', 'lda', 'statsmodels', 'computations', 'nyt_csv', 'iem', 'iemxlsx', 'main', 'ldapy', 'walkthrough', 'begin', 'reading', 'segmented', 'two', 'able', 'store', 'alongside', 'clean', 'removing', 'nan', 'values', 'filtering', 'remove', 'unneccesary', 'characters', 'lemmatize', 'read', 'normalize', 'take', 'generate', 'counts', 'vocabulary', 'document', 'term', 'matrix', 'fit', 'use', 'found', 'number', 'date', 'stream', 'aggregate', 'coverages', 'plot', 'evaluate', 'output', 'p', 'f', 'value', 'sort', 'ascending', 'order', 'top', 'words', 'pearson', 'coefficient', 'continue', 'get', 'less', 'actually', 'priors', 'based', 'negative', 'positive', 'bias', 'dominated', 'word', 'assign', 'single', 'conversely', 'split', 'iterates', 'generated', 'first', 'empty', 'fits', 'according', 'max', 'easiest', 'way', 'download', 'anaconda', 'jupyter', 'notebook', 'git', 'clone', 'httpsgithubcomsrasheecourseprojectgit', 'cd', 'courseproject', 'click', 'ldaipynb', 'cells', 'approximately', 'hour', 'contributions', 'came', 'together', 'course', 'months', 'weekly', 'meetings', 'understand', 'learn', 'specific', 'members', 'following', 'library', 'research', 'breakdown', 'documentation', 'logistical', 'work', 'extraction', 'presentation']
https://github.com/srivardhansajja/tangy	"text information systems : cs410 project documentation ""2.2 expertsearch system"" -- navyaa sanan (navyaas2) srivardhan sajja (sajja3) team o navyaa sanan (navyaas2) o srivardhan sajja (sajja3) : team captain overview in our project, we were able to augment the expertsearch system by adding functionality which makes the system automatically crawl through faculty webpages given the primary university link/url (illinois.edu, berkeley.edu, etc.), instead of having to explicitly identify them. our project has two main components. first, we implemented our own classifier, which given any url uses text classification techniques mentioned in this course to judge whether the given url is that of a faculty directory page. second, given a primary university link we find all directory pages associated with that primary url. we used the classifier built in part 1 for implementing part 2. software implementation datasets: to train the extension, we used 800 manually labelled urls. to test the extension, we used another 800 manually labelled urls to check for accuracy. we were able to achieve 83.875% accuracy, 89.28% precision, 77% recall and 82.68% f1-score. algorithms/techniques: to get the list of all urls from a university website, we used spider from scrapy package. we implemented a spider using the python scrapy package to recursively crawl through and identify all pages of a website with either 'faculty' or 'staff' in the url, given the primary url of the university (example: illinois.edu, berkeley.edu). parameters such as time limit, page crawl limit, and results count limit can be set manually. to make the classifier, we used classification techniques like using stop words and filter words. we also used statistical indicators like mean length of urls and standard deviation of the training set urls. lastly, we used a dictionary to look at the most common words in positive training samples to help us build a classification model. additionally, we would like mention that our extension is independent of the system. we consider this project to be an independent feature addition, which is inspired by the expertsearch system but does not directly rely on any preexisting code. we drew inspiration from mp2 and used the techniques taught to us in this course, but we did not have any direct reliance on any preexisting code whatsoever (aside from external python packages). software implementation details crawler: to get the list of all urls from a university website, we used spider from scrapy package. we implemented a spider using the python scrapy package to recursively crawl through and identify all pages of a website with either 'faculty' or 'staff' in the url, given the primary url of the university (example: illinois.edu, berkeley.edu). parameters such as time limit, page crawl limit, and results count limit for the crawler can be set manually. model training: to train the model, we looked at used classification techniques like using stop words and filter words. we also used statistical indicators like mean length of urls and standard deviation of the training set urls. lastly, we used a dictionary to look at the most common words in positive training samples to help us build a classification model. we have a list of words we ignore in model_train/crawler.py. any url that contains a word also contained in ignore is automatically pulled out of consideration. the rest of the training is done in model_train/trainer.py and model_train.py where we calculate the statistical indicators and return those urls which have the same words contained as the most popular words from the positively labelled training data. to train the extension, we used 800 manually labelled urls. to test the extension, we used another 800 manually labelled urls to check for accuracy. we were able to achieve 83.875% accuracy, 89.28% precision, 77% recall and 82.68% f1-score. model deploying: to deploy the model, most of the work is done in model_deploy /model_dep.py. there we use the model generated by us (model_deploy/ model_testing.json) and carry out the same classification process as we did to test our classification model. flask app: the flask app refers mostly to the frontend work we did. it connects the deployed model to the website we made and provides a framework for piping input and output. installation and setup clone repository on your local machine and enter the project directory: - git clone https://github.com/srivardhansajja/courseproject.git - cd courseproject/ setup a virtual environment. executing the following two lines in a terminal will set up an environment using venv within the project directory. - python 3 -m venv venv - source venv/bin/activate we have used python3 for running and testing the project. install all required packages by executing: - python3 -m pip install -r requirements.txt change line 11 in crawler/crawler_handler.py to the python version that you are using. for example, python3.8, python3, python3.6 or py. the project is now set up for you to use and test. execute - python3 main.py from the primary project directory and access the locally hosted flask website by visiting http://127.0.0.1:3000/ from a browser window. you can enter university domain names and the appropriate faculty directory urls will be shown to you along with the crawling statistics. the program by default uses our pre-generated model. if you wish to update the parameters or tweak the model, go to model_train/trainer.py, make your required changes, and run - python3 model_train/model_train.py this will output your testing statistics, including accuracy, precision, recall and f1 score, and generate model_testing.json. once you are satisfied with your changes, if you wish to use your model in the crawling process instead, replace model_testing.json in line 50 of model_train/model_train.py with model.json and rerun the above statement in your terminal. be careful as this will replace our original model, and re-cloning the project is the only way to revert it, unless you make a backup of it. project structure * source code: o crawler ss /crawler/crawler.py ss /crawler/crawler_handler.py o model training ss /model_train/trainer.py ss /model_train/model_train.py ss /model_train/train_data.txt ss /model_train/dev_data.txt o model deployment ss /model_deploy/model_dep.py ss /model_deploy/model.json o flask app ss /main.py ss /templates/ ss /static/ * documentation: o projectproposal.pdf o projectprogressreport.pdf o projectdocumentation.pdf * readme.md o / team contributions throughout the course of this project, the team worked very closely and even though most of the tasks were divided by person both of us ended up working on everything in some capacity. srivardhan focused more on implementing the web crawler, setting up the website, and making training/testing data sets. navyaa focused mainly on doing research on url classification, building the machine learning model, and integrating the classification model into the website. text information systems : cs410 project progress report ""2.2 expertsearch system"" -- navyaa sanan (navyaas2) srivardhan sajja (sajja3) progress made thus far * enlisted some common faculty directory urls to give us a general sense of what they look like. this would later help us in identifying some common features. * determined some common features of faculty directory urls which act as starting points for the classifier we are writing. we took the main features of urls like word staff or directory in them and started with these obvious features. we also identified words and features that would never be part of a faculty directory page url. * implemented a spider using the python scrapy package to recursively crawl through and identify all pages of a website with either 'faculty' or 'staff' in the url, given the primary url of the university (example: illinois.edu, berkeley.edu). parameters such as time limit, page crawl limit, and results count limit can be set manually. * added some preliminary filters within the spider to not allow urls with certain keywords such as 'mail', 'publish', 'calendar', 'research', etc., to make crawling process more efficient. * developed a website using the flask web framework to showcase model's results, and to amplify user experience. * looked at some research done in similar areas (classification of urls) but were not able to find much that is directly relevant. the main issue we face is figuring out common features of a general faculty directory page (length of the url, important terms to look for etc.) remaining tasks * create a testing / training data set for training our model. * finalizing some research papers which would be the inspiration for building our classifier. * base our classifier off of what results we see in the training data set. * fine tune our classifier to tell with greater confidence whether a website is a faculty directory url or not. issues and challenges faced * tons of literature, scholarly articles and papers on the internet - there are tons of papers which seem relevant prima facie but turn out to be not as useful when we go into the details. this has made the task of searching for what we need for sure longer than we had anticipated. * too many potential urls associated with a primary url. a primary url like ""illinois.edu"" has several valid urls associated with it so we have to manually stop looking at valid urls after a certain point. * scraping websites with a lot of pages takes time so fine-tuning certain aspects becomes a very time-consuming task. text information systems : cs410 project proposal ""2.2 expertsearch system"" -- navyaa sanan (navyaas2) srivardhan sajja (sajja3) team  navyaa sanan (navyaas2)  srivardhan sajja (sajja3) : team captain system 2.2 expertsearch system: automatically crawling faculty webpages we plan on augmenting the expertsearch system by adding functionality which would make the system automatically crawl through faculty webpages given the primary university link/url (illinois.edu, berkeley.edu, etc.), instead of having to explicitly identify them. our project will have two main components. first, we plan to implement our own classifier, which given any url will use text classification techniques mentioned in this course to judge whether the given url is that of a faculty directory page. second, given a primary university link we will find all directory pages associated with that primary url. we will be using the classifier built in part 1 for implementing part 2. datasets, algorithms and techniques datasets: to train the extension, we shall be using the starting half of urls list fro mthe google sheets spreadsheet of mp2.1 as positive examples, and automatically generated non-faculty directory pages of university websites as negative examples. similarly, to test our extension, we shall be using the 2nd half of the urls in the spreadsheet for positive examples, and randomly generated real urls as negative examples. algorithms/techniques: to get the list of all urls from a university website, we shall use simple web crawling techniques using the built-in python packages but might dip into external packages if required. to make the classifier, we shall be using basic classification techniques and algorithms taught in this course. if we feel the need to use algorithms and techniques that are not mentioned in lectures, we will be sure to use techniques taught to us in the mps. overall, we will ensure that any algorithms used by us are directly or indirectly related to this course. primary function we are adding a function to automatically compile a list of all faculty directory pages from a given university home page url. this can be tested by comparing the generated list of urls with a list of manually compiled faculty directory page urls from different universities. the closer the pre- compiled list is to the generated one, the higher the accuracy of the web crawler and classifier is. communication with the system our extension is independent of the system. we consider this project to be an independent feature addition, which is inspired by the goal of this project but does not directly rely on any preexisting code. we will draw inspiration from mp2 and use the techniques taught to us in this course, but we will not have any direct reliance on any preexisting code whatsoever. programming language we plan to use python3 for all developmental activities, including building the classifier and the web crawler. work justification since there are 2 team members in this group, we planned this project to be 40 hours of work. here is a breakdown of all tasks with the estimated time we expect each task to take: 1. developing a classifier which, given a url tells us if the url is that of a faculty directory web page (23 hours) a. subtask 1: research and enlist at least 200 types of faculty directory urls (2.5 hours) b. subtask 2: determine common/ identifying features of these faculty directory urls (3 hours) c. subtask 3: look at research papers/scholarly texts that deal with similar classification problems and choose a classifier accordingly. potentially write some pseudo code/ starter code for our classifier (7 hours) d. subtask 4: develop a training and testing data set and manually flag all websites we use. (2.5 hours) e. subtask 5: write the code of our classifier based on the reference. (5 hours) f. subtask 6 : based on the results, modify and fine tune our classifier. (3 hours) 2. given a primary url (eg. illinois.edu) identify all possible faculty directory pages. (17 hours) a. subtask 1: make a training testing data set of at least 10 primary urls and as many directory urls associated with the primary url (2 hours) b. subtask 2: identify all the possible directory page associated urls with our training/testing data set. (3 hours) c. subtask 3: read research papers / scholarly literature on how to tell whether a given url is valid or not (4 hours) d. subtask 4: devise a method to find all valid urls associated with the given primary url. (5 hours) e. subtask 5: find a way to determine which subset of valid urls are faculty directory pages. (should be just using the classifier that we built in task 1 but since generating all possible combinations and testing out whether they are valid or not can take time, 3 hours to run the whole thing) university faculty directory page crawler this is the course project for cs 410 text information systems course at the university of illinois at urbana champaign. usage tutorial: https://youtu.be/tn551fluyks overview we were able to augment the expertsearch system by adding functionality which makes the system automatically crawl through faculty webpages given the primary university link/url (illinois.edu, berkeley.edu, etc.), instead of having to explicitly identify them. our project has two main components. first, we implemented our own classifier, which given any url uses text classification techniques mentioned in this course to judge whether the given url is that of a faculty directory page. second, given a primary university link we find all directory pages associated with that primary url. we used the classifier built in part 1 for implementing part 2. team srivardhan sajja navyaa sanan project setup instructions clone repository on your local machine and enter the project directory: git clone https://github.com/srivardhansajja/courseproject.git cd courseproject/ setup a virtual environment. executing the following two lines in a terminal will set up an environment using venv within the project directory. python3 -m venv venv source venv/bin/activate we have used python3 for running and testing the project. install all required packages by executing: python3 -m pip install -r requirements.txt change line 11 in crawler/crawler_handler.py to the python version that you are using. for example, python, python3.8, python3, python3.6 or py the project is now set up for you to use and test. execute python3 main.py from the primary project directory and access the locally hosted flask website by visiting http://127.0.0.1:3000/ from a browser window. you can enter university domain names and the appropriate faculty directory urls will be shown to you along with the crawling statistics. the program by default uses our pre-generated model. if you wish to update the parameters or tweak the model, go to model_train/trainer.py, make your required changes, and run python3 model_train/model_train.py this will output your testing statistics, including accuracy, precision, recall and f1 score, and generate model_testing.json. once you are satisfied with your changes, if you wish to use your model in the crawling process instead, replace model_testing.json in line 50 of model_train/model_train.py with model.json and rerun the above statement in your terminal. be careful as this will replace our original model, and re-cloning the project is the only way to revert it, unless you make a backup of it project structure source code: crawler /crawler/crawler.py /crawler/crawler_handler.py model training /model_train/trainer.py /model_train/model_train.py /model_train/train_data.txt /model_train/dev_data.txt model deployment /model_deploy/model_dep.py /model_deploy/model.json flask app /main.py /templates/ /static/ documentation: projectproposal.pdf projectprogressreport.pdf projectdocumentation.pdf readme .md / demo and tutorial we made a tutorial for ease of use of the software, and is hosted at https://youtu.be/tn551fluyks model statistics these are the statistics of our generated model, based on training and testing data sets with 800 urls each. accuracy: 0.83875 f1-score: 0.8268456375838926 precision: 0.8927536231884058 recall: 0.77"	['text', 'information', 'systems', 'cs', 'project', 'documentation', 'expertsearch', 'system', 'navyaa', 'sanan', 'navyaas', 'srivardhan', 'sajja', 'team', 'captain', 'overview', 'able', 'augment', 'adding', 'functionality', 'makes', 'automatically', 'crawl', 'faculty', 'webpages', 'given', 'primary', 'university', 'linkurl', 'illinoisedu', 'berkeleyedu', 'etc', 'instead', 'explicitly', 'identify', 'two', 'main', 'components', 'first', 'implemented', 'classifier', 'url', 'uses', 'classification', 'techniques', 'mentioned', 'course', 'judge', 'whether', 'directory', 'page', 'second', 'link', 'find', 'pages', 'associated', 'used', 'built', 'part', 'implementing', 'software', 'implementation', 'datasets', 'train', 'extension', 'manually', 'labelled', 'urls', 'test', 'another', 'check', 'accuracy', 'achieve', 'precision', 'recall', 'fscore', 'algorithmstechniques', 'get', 'list', 'website', 'spider', 'scrapy', 'package', 'using', 'python', 'recursively', 'either', 'staff', 'example', 'parameters', 'time', 'limit', 'results', 'count', 'set', 'make', 'like', 'stop', 'words', 'filter', 'also', 'statistical', 'indicators', 'mean', 'length', 'standard', 'deviation', 'training', 'lastly', 'dictionary', 'look', 'common', 'positive', 'samples', 'help', 'us', 'build', 'model', 'additionally', 'would', 'mention', 'independent', 'consider', 'feature', 'addition', 'inspired', 'directly', 'rely', 'preexisting', 'code', 'drew', 'inspiration', 'mp', 'taught', 'direct', 'reliance', 'whatsoever', 'aside', 'external', 'packages', 'details', 'crawler', 'looked', 'ignore', 'model_traincrawlerpy', 'contains', 'word', 'contained', 'pulled', 'consideration', 'rest', 'done', 'model_traintrainerpy', 'model_trainpy', 'calculate', 'return', 'popular', 'positively', 'data', 'deploying', 'deploy', 'work', 'model_deploy', 'model_deppy', 'use', 'generated', 'model_testingjson', 'carry', 'process', 'flask', 'app', 'refers', 'mostly', 'frontend', 'connects', 'deployed', 'made', 'provides', 'framework', 'piping', 'input', 'output', 'installation', 'setup', 'clone', 'repository', 'local', 'machine', 'enter', 'git', 'httpsgithubcomsrivardhansajjacourseprojectgit', 'cd', 'courseproject', 'virtual', 'environment', 'executing', 'following', 'lines', 'terminal', 'venv', 'within', 'source', 'venvbinactivate', 'running', 'testing', 'install', 'required', 'pip', 'r', 'requirementstxt', 'change', 'line', 'crawlercrawler_handlerpy', 'version', 'py', 'execute', 'mainpy', 'access', 'locally', 'hosted', 'visiting', 'http', 'browser', 'window', 'domain', 'names', 'appropriate', 'shown', 'along', 'crawling', 'statistics', 'program', 'default', 'pregenerated', 'wish', 'update', 'tweak', 'go', 'changes', 'run', 'model_trainmodel_trainpy', 'including', 'f', 'score', 'generate', 'satisfied', 'replace', 'modeljson', 'rerun', 'statement', 'careful', 'original', 'recloning', 'way', 'revert', 'unless', 'backup', 'structure', 'ss', 'crawlercrawlerpy', 'model_traintrain_datatxt', 'model_traindev_datatxt', 'deployment', 'model_deploymodel_deppy', 'model_deploymodeljson', 'templates', 'static', 'projectproposalpdf', 'projectprogressreportpdf', 'projectdocumentationpdf', 'readmemd', 'contributions', 'throughout', 'worked', 'closely', 'even', 'though', 'tasks', 'divided', 'person', 'ended', 'working', 'everything', 'capacity', 'focused', 'web', 'setting', 'making', 'trainingtesting', 'sets', 'mainly', 'research', 'building', 'learning', 'integrating', 'progress', 'report', 'thus', 'far', 'enlisted', 'give', 'general', 'sense', 'later', 'identifying', 'features', 'determined', 'act', 'starting', 'points', 'writing', 'took', 'started', 'obvious', 'identified', 'never', 'added', 'preliminary', 'filters', 'allow', 'certain', 'keywords', 'mail', 'publish', 'calendar', 'efficient', 'developed', 'showcase', 'models', 'amplify', 'user', 'experience', 'similar', 'areas', 'much', 'relevant', 'issue', 'face', 'figuring', 'important', 'terms', 'remaining', 'create', 'finalizing', 'papers', 'base', 'see', 'fine', 'tune', 'tell', 'greater', 'confidence', 'issues', 'challenges', 'faced', 'tons', 'literature', 'scholarly', 'articles', 'internet', 'seem', 'prima', 'facie', 'turn', 'useful', 'task', 'searching', 'need', 'sure', 'longer', 'anticipated', 'many', 'potential', 'several', 'valid', 'looking', 'point', 'scraping', 'websites', 'lot', 'takes', 'finetuning', 'aspects', 'becomes', 'timeconsuming', 'proposal', 'plan', 'augmenting', 'implement', 'algorithms', 'shall', 'half', 'fro', 'mthe', 'google', 'sheets', 'spreadsheet', 'examples', 'nonfaculty', 'negative', 'similarly', 'nd', 'randomly', 'real', 'simple', 'builtin', 'might', 'dip', 'basic', 'feel', 'lectures', 'mps', 'overall', 'ensure', 'indirectly', 'related', 'function', 'compile', 'home', 'tested', 'comparing', 'compiled', 'different', 'universities', 'closer', 'pre', 'one', 'higher', 'communication', 'goal', 'draw', 'programming', 'language', 'developmental', 'activities', 'justification', 'since', 'members', 'group', 'planned', 'hours', 'breakdown', 'estimated', 'expect', 'take', 'developing', 'tells', 'subtask', 'enlist', 'least', 'types', 'b', 'determine', 'c', 'papersscholarly', 'texts', 'deal', 'problems', 'choose', 'accordingly', 'potentially', 'write', 'pseudo', 'starter', 'develop', 'flag', 'e', 'based', 'reference', 'modify', 'eg', 'possible', 'read', 'devise', 'method', 'subset', 'generating', 'combinations', 'whole', 'thing', 'illinois', 'urbana', 'champaign', 'usage', 'tutorial', 'httpsyoutubetnfluyks', 'instructions', 'readme', 'md', 'demo', 'ease']
https://github.com/srzn/CourseProject	"project documentation srujan netid:ssg7 livelab id:srzn december 13, 2020 included is the project flow, definition and function of each module and usage details 1 project flow i participated in the ir competition. i used mp2.4 code template to implement various state of the art ranking functions for ir evaluation and ranking 1.1 converting data format of the data provided is incompatible with that of my code. so, the first step is data conversion. queries are provided in xml and need to be converted into a text file, each query per line. actual documents are provided as a csv file with duplicate entries per document and a lot of irrlevant information. each document is identified by an alphanumeric id. relevant data from the csv file need to be extracted and populated as document data with each document occupying one line in the final .dat file. my code takes document ids as numbers. so, a dictionary with uid to number mapping needed to be built. the entire process needed to be implemented for both training and testing data. this concludes data conversion. 1.2 training step i used 6 ir ranking functions to train on the dataset to extract optimal param- eters for each of the ranking functions. the user running my training program is given a choice/option to select any one of these ranking functions. one of the ranking function,inl2 ranker, was overloaded with my custom scoring func- tion. i swept each ranking function with a number of parameters over the given training dataset and labels. the combination of parameters that lead to the best ndcg@20 were saved to a file named ""option< num >.txt"" these were the ranking functions used:  option 0 : bm25 1  option 1: inl2 ranker  option 2: inl2 ranker  option 3: jelinek-mercer smoothing  option 4: dirichlet prior smoothing  option 5: absolute discounting smoothing 1.3 testing step from the ""option< num >.txt"" i obtained from the training step, we use corresponding ranking functions to obtain ranking scores of each document w.r.t a query. test data is slightly different from training dataset. so, inverted indices were built separately for training dataset as well. 2 module definitions the code files in both testing and training have similar names and functions. following code files can be found in my software package: 2.1 queryextr.py this file is used to convert query.xml into queries.txt and queries-test.txt 2.2 convert-dat1.py this file is used to extract data from metadata.csv and document jsons to build sarscov.dat file which is inturn used to build inverted index and used to evaulate the ranking functions 2.3 uidmap.py this file is used to build dictionaries ""uidmap.txt"", ""uidrevmap.txt"". these dictionaries contain docid to uid mappings and vice-versa. 2.4 search eval.py this is the main program that runs the training phase to output best parameters that generate the highest ndcg 2.5 search test.py this is the main program that ranks and scores each document from test set against the test queries and outputs a ""testpredictions.txt"" output which has docids instead of uids 2 2.6 predictgen.py uses the dictionaries obtained from ""uidmap.py"" and produces the final output ""predictions.txt"" that has uids 3 usage 3.1 training in the directory that has search eval.py, run python search eval.py config.toml 'option' where 'option' has the same range as described in ""training step"". you'll obtain a text file ""option0.txt"" (if you chose option 0). please copy this file over to the ""test"" directory that has ""search test.py"" 3.2 testing after the above step, in the directory that has ""search test.py"", run python search test.py config-test.toml 'option' where 'option' can take any integer value between 0 and 5. please refer the documentation to know more about each choice. for example, if you chose option 0 then you'll run python search test.py config-test.toml 0 and then run, python predictgen.py the above code must be executed to obtain the final predictions in a text file. if you chose option 0 you would obtain ""prediction0.txt"" as your final predictions for all the queries capping at 1000 top documents per query. 4 leaderboard 3 figure 1: leaderboard as of 12/13/2020 9:38 pm est 4 project progress report srujan netid:ssg7 november 29, 2020 1 introduction to project i chose to participate in the information retrieval competition. i proposed using a learning-to-rank methodology for ir as opposed to standalone rankers. i also proposed to first explore evaluating using combination of rankers rather than one ranking methodology to produce rankings. finally, i proposed using sv mmap, a supervised learning based ranking technique for ir. 2 estimated steps in the project timeline 2.1 step 1: choosing metapy for a preliminary analysis status: completed on: 11/27/2020 i decided to use metapy to get an understanding for the data (cord-19 set) and how classical rankers we used through the course behave with this enormous dataset. this means using the ranking template from mp2.4 to see how that implementation performs with the new dataset (includes train and test folders from here on) instead of cranfield data. 2.2 step 2: converting data into meta format status: completed on: 11/29/2020 using metadata.csv and documents folder, the dataset needs to be created as a "".dat"" file with documents separated by a new line. queries should be extracted from the given xml document and converted into a text file that metapy.index.ireval can read. relevance judgement file must have ""doc id"" 1 as uint64 instead of the alphanumeric format given in the cord-19 dataset. finally, building an inverted index to be used by metapy rankers. figure 1: extracted queries from xml figure 2: extracted data in meta format 2.2.1 step 3: evaluating with known rankers status: pending estimated completion: 12/04/2020 after completing the data conversion, using classical and custom rankers 2 (bm25+, inl2 ranker etc.) to evaluate their performance with cord-19 dataset. 2.2.2 step 4: evaluate with a combination of rankers status: pending estimated completion: 12/04/2020 depending on the individual rankers' performance, choose a combination of top rankers based on the data at hand. theoretically, this implementation changes the combination weights depending on the dataset. 2.3 step 5: convert data for sv m map compatibility status: pending estimated completion: 12/09/2020 2.4 step 6: evaluate using sv m map status: pending estimated completion: 12/09/2020 2.5 step 7: produce final results based on steps 3, 4, and 6 status: pending estimated completion: 12/12/2020 3 challenges data format conversions are pretty challenging owing to lot of exception handling. the final results need to be in the competition format which means the data need to be converted back again. it's difficult to comprehend the embeddings data without going through specter project implementation. so, the data will have to go unused if i rely entirely on introduction section for each paper. there are also a few missing data fields in the dataset collection which need to be handled. the implementation would still work if i ignore missing data but would be incomplete. 3 project proposal for cs 410 october 25, 2020 1. name, netid and captain *this is a one member team* name: sai srujan gudibandi netid: ssg7 captain: sai srujan gudibandi 2. competition selection i choose to participate in the information retrieval competition 3. implementation and ideas for the project i plan to use a supervised learning approach owing to the fact that ir is more amenable to empirical tuning over a completely black-box approach of constructing an unsupervised mathematical model i) from the experience of constructing an ir system for mp2.4, i have realized that okapi-bm25 per- formed best for the cranfield dataset. while constructing different rankers, i have cycled through various models like pivoted length normalization, inl2 ranking, zhai's bm25+, jelinek-mercer, and dirichlet smoothing models. after extensive and exhaustive tuning on each and every model, okapi-bm25 emerged victorious over the others. i, however, didn't have the chance to implement learning-to-rank methods by combining more than one ranking models to obtain a superior perfor- mance. i would start with implementing one of the learning-to-rank methodologies described in the optional module of the course to pitch it against individual models to compare their performances. ii) in implementing learing-to-rank, i wish to choose a classification based learning to rank from among the different approaches. for this purpose, i'm currently exploring svmmap. i may change my choice of ltrs and choose another model if i'm not satisfied with the performance of a previously chosen one. in addition to working on the datasets provided for the competition, i plan on using letor as a benchmark dataset for my model. iii) 4. programming language option i wish to implement the majority of the project in python. however, i may use c++ and/or r in the due course of the project if need be the details of which i will thoroughly document in the user guide. references liu,""learning to rank for information retrieval"", foundations and trends(r) in information retrieval, vol. 3 no. 3 (2009) pp. 225-331, 2009 http://projects.yisongyue.com/svmmap/ https://www.microsoft.com/en-us/research/publication/letor-benchmark-collection-research-learning-rank- information-retrieval/ 1 courseproject project proposal.pdf is the project proposal document progressreport.pdf is project progress report as of 11/29/2020 9:00 pm et ==========for running the code================= all the software content is in the file code.zip. the link to the same is https://drive.google.com/file/d/1xep48h-o4vur2wzna2ltugpvpyauiywu/view?usp=sharing due to github restrictions, i was unable to upload the zip file directly here. please use the link above to get the file. thanks! when you uncompress code.zip you'll have two folders - train and test. please do not delete any file. important files are illustrated below ---train--- queryextr.py uidmap.py convert-dat1.py search-eval.py ---test--- queryextr.py uidmap.py convert-dat1.py search_test.py predictgen.py ====usage=== if you're skipping the training, run the following from ""test"" folder on your command prompt: python search_test.py config-test.toml 'option' where 'option' can take any integer value between 0 and 5. please refer the documentation to know more about each choice. for example, if you chose option 0 then you'll run python search_test.py config-test.toml 0 and then run, python predictgen.py the above code must be executed to obtain the final predictions in a text file. if you chose option 0 you would obtain ""prediction0.txt"" as your final predictions for all the queries capping at 1000 top documents per query. if you want use the training phase: from ""train"" folder, run python search_eval.py config.toml 'option' where 'option' has the same range as described above. you'll obtain a text file ""option0.txt"" (if you chose option 0). please copy this file over to the ""test"" folder and repeat the instructions above to obtain final predictions. ---end"	['project', 'documentation', 'srujan', 'netidssg', 'livelab', 'idsrzn', 'december', 'included', 'flow', 'definition', 'function', 'module', 'usage', 'details', 'participated', 'ir', 'competition', 'used', 'mp', 'code', 'template', 'implement', 'various', 'state', 'art', 'ranking', 'functions', 'evaluation', 'converting', 'data', 'format', 'provided', 'incompatible', 'first', 'step', 'conversion', 'queries', 'xml', 'need', 'converted', 'text', 'file', 'query', 'per', 'line', 'actual', 'documents', 'csv', 'duplicate', 'entries', 'document', 'lot', 'irrlevant', 'information', 'identified', 'alphanumeric', 'id', 'relevant', 'extracted', 'populated', 'occupying', 'one', 'final', 'dat', 'takes', 'ids', 'numbers', 'dictionary', 'uid', 'number', 'mapping', 'needed', 'built', 'entire', 'process', 'implemented', 'training', 'testing', 'concludes', 'train', 'dataset', 'extract', 'optimal', 'param', 'eters', 'user', 'running', 'program', 'given', 'choiceoption', 'select', 'functioninl', 'ranker', 'overloaded', 'custom', 'scoring', 'func', 'tion', 'swept', 'parameters', 'labels', 'combination', 'lead', 'best', 'ndcg', 'saved', 'named', 'option', 'num', 'txt', 'bm', 'inl', 'jelinekmercer', 'smoothing', 'dirichlet', 'prior', 'absolute', 'discounting', 'obtained', 'use', 'corresponding', 'obtain', 'scores', 'wrt', 'test', 'slightly', 'different', 'inverted', 'indices', 'separately', 'well', 'definitions', 'files', 'similar', 'names', 'following', 'found', 'software', 'package', 'queryextrpy', 'convert', 'queryxml', 'queriestxt', 'queriestesttxt', 'convertdatpy', 'metadatacsv', 'jsons', 'build', 'sarscovdat', 'inturn', 'index', 'evaulate', 'uidmappy', 'dictionaries', 'uidmaptxt', 'uidrevmaptxt', 'contain', 'docid', 'mappings', 'viceversa', 'search', 'evalpy', 'main', 'runs', 'phase', 'output', 'generate', 'highest', 'testpy', 'ranks', 'set', 'outputs', 'testpredictionstxt', 'docids', 'instead', 'uids', 'predictgenpy', 'uses', 'produces', 'predictionstxt', 'directory', 'run', 'python', 'configtoml', 'range', 'described', 'youll', 'optiontxt', 'chose', 'please', 'copy', 'configtesttoml', 'take', 'integer', 'value', 'refer', 'know', 'choice', 'example', 'must', 'executed', 'predictions', 'would', 'predictiontxt', 'capping', 'top', 'leaderboard', 'figure', 'pm', 'est', 'progress', 'report', 'november', 'introduction', 'participate', 'retrieval', 'proposed', 'using', 'learningtorank', 'methodology', 'opposed', 'standalone', 'rankers', 'also', 'explore', 'evaluating', 'rather', 'produce', 'rankings', 'finally', 'sv', 'mmap', 'supervised', 'learning', 'based', 'technique', 'estimated', 'steps', 'timeline', 'choosing', 'metapy', 'preliminary', 'analysis', 'status', 'completed', 'decided', 'get', 'understanding', 'cord', 'classical', 'course', 'behave', 'enormous', 'means', 'see', 'implementation', 'performs', 'new', 'includes', 'folders', 'cranfield', 'meta', 'folder', 'needs', 'created', 'separated', 'metapyindexireval', 'read', 'relevance', 'judgement', 'doc', 'uint', 'building', 'known', 'pending', 'completion', 'completing', 'etc', 'evaluate', 'performance', 'depending', 'individual', 'choose', 'hand', 'theoretically', 'changes', 'weights', 'map', 'compatibility', 'results', 'challenges', 'conversions', 'pretty', 'challenging', 'owing', 'exception', 'handling', 'back', 'difficult', 'comprehend', 'embeddings', 'without', 'going', 'specter', 'go', 'unused', 'rely', 'entirely', 'section', 'paper', 'missing', 'fields', 'collection', 'handled', 'still', 'work', 'ignore', 'incomplete', 'proposal', 'cs', 'october', 'name', 'netid', 'captain', 'member', 'team', 'sai', 'gudibandi', 'ssg', 'selection', 'ideas', 'plan', 'approach', 'fact', 'amenable', 'empirical', 'tuning', 'completely', 'blackbox', 'constructing', 'unsupervised', 'mathematical', 'model', 'experience', 'system', 'realized', 'okapibm', 'formed', 'cycled', 'models', 'like', 'pivoted', 'length', 'normalization', 'zhais', 'extensive', 'exhaustive', 'every', 'emerged', 'victorious', 'others', 'however', 'didnt', 'chance', 'methods', 'combining', 'superior', 'perfor', 'mance', 'start', 'implementing', 'methodologies', 'optional', 'pitch', 'compare', 'performances', 'ii', 'learingtorank', 'wish', 'classification', 'rank', 'among', 'approaches', 'purpose', 'im', 'currently', 'exploring', 'svmmap', 'may', 'change', 'ltrs', 'another', 'satisfied', 'previously', 'chosen', 'addition', 'working', 'datasets', 'letor', 'benchmark', 'iii', 'programming', 'language', 'majority', 'c', 'andor', 'r', 'due', 'thoroughly', 'guide', 'references', 'liulearning', 'foundations', 'trendsr', 'vol', 'pp', 'httpprojectsyisongyuecomsvmmap', 'httpswwwmicrosoftcomenusresearchpublicationletorbenchmarkcollectionresearchlearningrank', 'informationretrieval', 'courseproject', 'proposalpdf', 'progressreportpdf', 'et', 'content', 'codezip', 'link', 'httpsdrivegooglecomfiledxephovurwznaltugpvpyauiywuviewuspsharing', 'github', 'restrictions', 'unable', 'upload', 'zip', 'directly', 'thanks', 'uncompress', 'two', 'delete', 'important', 'illustrated', 'searchevalpy', 'search_testpy', 'youre', 'skipping', 'command', 'prompt', 'want', 'search_evalpy', 'repeat', 'instructions', 'end']
https://github.com/ss129/CourseProject	"text classification competition: twitter sarcasm detection cs410 - course project document team - ssw classifiers * saravana somasundaram (ss129@illinois.edu) * shashivrat pandey (spandey6@illinois.edu) * walter tan (wstan2@illinois.edu) table of contents 1) introduction to team: ......................................................................................................................... 2 2) selection of project: ............................................................................................................................ 2 3) project background: ............................................................................................................................ 2 4) steps followed during implementation: ............................................................................................. 2 5) code walkthrough:.............................................................................................................................. 3 6) steps to run the application: ............................................................................................................... 3 7) references: ......................................................................................................................................... 3 1) introduction to team: we formed a team of three people to work on this project. all of us are passionate about the data mining concepts were interested on exploring more knowledge around data mining and apply our learning from this course. our team includes below set of people from fall season of course cs410 from university of illinois at urbana-champaign: * saravana somasundaram (ss129) * shashivrat pandey (spandey6) * walter tan (wstan2) 2) selection of project: after discussions, as a team we decided to proceed with text classification competition: twitter sarcasm detection project. other project topics that we considered are: * automatically crawling faculty webpages * extracting relevant information from faculty bios 3) project background: in this project there were two sets of data file provided to us to use in our application: * training data (train.jsonl) * test data(test.jsonl) we are supposed to build an application to do a prediction for sarcasm or not sarcasm. the data files provided to us are twitter responses. these response texts are in context to some conversation happening in twitter feed. we were supposed to use these two datasets for training our model for this classification. since this was a classification task, the training file also had the label for each data point as ""sarcasm"" or ""not_sarcasm"". our job was to predict the same thing for all the records present in the testing file. training file had 5000 labelled dataset and testing set had 1800 dataset. the project required some machine learning task to train the model using the training data and finally predict the outcome for test-data set using that trained classification model. the output of the application will be a text file that capture all the 1800 rows from test-data and sarcasm vs not_sarcasm label. the name of the file is supposed to answer.txt. 4) steps followed during implementation: * analyzed the requirements for the project completion captured under document (cs 410 project topics - google docs) provided by instructors * setup environment to execute the projects o download train.jsonl and test.jsonl data under a folder called data o install all the packages required for project using pip install command # sklearn # pandas # nltk # numpy * design a framework to read train.jsonl and test.jsonl files and parse data * process the data to remove words such as '@user' and use the lemmatize function to clean up the data * initialize tfidfvectorizer with the appropriate parameters * initialize gaussiannb model and train the model using the training data * perform predictions of labels using the test data * write the results into answer.txt 5) code walkthrough: we created and uploaded a video under github account that covers step by step walkthrough of our code implementation. below is the url and name of the file for code walkthrough video: * url: github - ss129/courseproject * name: courseproject_demo.mp4 6) steps to run the application: please follow the below steps to run the application and generate the results. * clone the below github repository into your local machine - github - ss129/courseproject * install the below packages using pip install command o sklearn o pandas o nltk o numpy * execute the python program twitter_sarcasm_classification.py * the results will be available in the file data/answer.txt 7) references: a. https://keras.io/examples/nlp/text_classification_from_scratch/ b. https://realpython.com/python-keras-text-classification/#convolutional-neuralnetworks-cnn c. https://towardsdatascience.com/classification-using-neural-networks-b8e98f3a904f d. https://towardsdatascience.com/sarcasm-detection-step-towards-sentiment-analysis- 84cb013bb6db project proposal - text classification competition 1. team name: ssw classifiers members: * saravana somasundaram (captain) - ss129 * shashivrat pandey - spandey6 * walter tan - wstan2 2. competition - text classification 3. neural networks we are looking to explore for text classification: a. convolutional neural network (cnn) b. recurrent neural network (rnn) c. hierarchical attention network (han) 4. references we have looked so far: a. https://keras.io/examples/nlp/text_classification_from_scratch/ b. https://medium.com/jatana/report-on-text-classification-using-cnn-rnn-han- f0e887214d5f c. https://realpython.com/python-keras-text-classification/#convolutional-neural- networks-cnn d. https://towardsdatascience.com/classification-using-neural-networks-b8e98f3a904f 5. the programming language we will be using is python. our group is prepared to learn how text classification algorithms can be implemented using state-of-the art neural networks such as convolutional neural network, recurrent neural network and hierarchical attention network. we are excited to learn techniques to improve our ml skillset and will apply what we learned to our current/future work projects. some deep learning frameworks we've heard of include pytorch, tensorflow, keras, and sonnet. tensorflow and pytorch seem to be the most popular and used by many users and institutions worldwide. our group has never worked with these technologies, but are excited to learn these new technologies for this competition. we will be using python for this project and we are confident that we will come up with an optimized code to improve the performance of application. project progress report: below is the progress we made so far on our project: 1) which tasks have been completed? * read through the instructions for text classification project. * had few meetings with all group member to understand the requirements and instructions * created a github repository for project, cloned it from original repository and read through readme.md file * analyzed train and test data 2) which tasks are pending? * working on framework to read the file and scan through each json document * next step is to apply a text classification logic to decide each document as sarcasm vs not_sarcasm 3) are you facing any challenges? * we did not face any challenges as of now courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['text', 'classification', 'competition', 'twitter', 'sarcasm', 'detection', 'cs', 'course', 'project', 'document', 'team', 'ssw', 'classifiers', 'saravana', 'somasundaram', 'ssillinoisedu', 'shashivrat', 'pandey', 'spandeyillinoisedu', 'walter', 'tan', 'wstanillinoisedu', 'table', 'contents', 'introduction', 'selection', 'background', 'steps', 'followed', 'implementation', 'code', 'walkthrough', 'run', 'application', 'references', 'formed', 'three', 'people', 'work', 'us', 'passionate', 'data', 'mining', 'concepts', 'interested', 'exploring', 'knowledge', 'around', 'apply', 'learning', 'includes', 'set', 'fall', 'season', 'university', 'illinois', 'urbanachampaign', 'ss', 'spandey', 'wstan', 'discussions', 'decided', 'proceed', 'topics', 'considered', 'automatically', 'crawling', 'faculty', 'webpages', 'extracting', 'relevant', 'information', 'bios', 'two', 'sets', 'file', 'provided', 'use', 'training', 'trainjsonl', 'test', 'datatestjsonl', 'supposed', 'build', 'prediction', 'files', 'responses', 'response', 'texts', 'context', 'conversation', 'happening', 'feed', 'datasets', 'model', 'since', 'task', 'also', 'label', 'point', 'not_sarcasm', 'job', 'predict', 'thing', 'records', 'present', 'testing', 'labelled', 'dataset', 'required', 'machine', 'train', 'using', 'finally', 'outcome', 'testdata', 'trained', 'output', 'capture', 'rows', 'vs', 'name', 'answertxt', 'analyzed', 'requirements', 'completion', 'captured', 'google', 'docs', 'instructors', 'setup', 'environment', 'execute', 'projects', 'download', 'testjsonl', 'folder', 'called', 'install', 'packages', 'pip', 'command', 'sklearn', 'pandas', 'nltk', 'numpy', 'design', 'framework', 'read', 'parse', 'process', 'remove', 'words', 'user', 'lemmatize', 'function', 'clean', 'initialize', 'tfidfvectorizer', 'appropriate', 'parameters', 'gaussiannb', 'perform', 'predictions', 'labels', 'write', 'results', 'created', 'uploaded', 'video', 'github', 'account', 'covers', 'step', 'url', 'sscourseproject', 'courseproject_demomp', 'please', 'follow', 'generate', 'clone', 'repository', 'local', 'python', 'program', 'twitter_sarcasm_classificationpy', 'available', 'dataanswertxt', 'httpskerasioexamplesnlptext_classification_from_scratch', 'b', 'httpsrealpythoncompythonkerastextclassificationconvolutionalneuralnetworkscnn', 'c', 'httpstowardsdatasciencecomclassificationusingneuralnetworksbefaf', 'httpstowardsdatasciencecomsarcasmdetectionsteptowardssentimentanalysis', 'cbbbdb', 'proposal', 'members', 'captain', 'neural', 'networks', 'looking', 'explore', 'convolutional', 'network', 'cnn', 'recurrent', 'rnn', 'hierarchical', 'attention', 'han', 'looked', 'far', 'httpsmediumcomjatanareportontextclassificationusingcnnrnnhan', 'fedf', 'httpsrealpythoncompythonkerastextclassificationconvolutionalneural', 'networkscnn', 'programming', 'language', 'group', 'prepared', 'learn', 'algorithms', 'implemented', 'stateofthe', 'art', 'excited', 'techniques', 'improve', 'ml', 'skillset', 'learned', 'currentfuture', 'deep', 'frameworks', 'weve', 'heard', 'include', 'pytorch', 'tensorflow', 'keras', 'sonnet', 'seem', 'popular', 'used', 'many', 'users', 'institutions', 'worldwide', 'never', 'worked', 'technologies', 'new', 'confident', 'come', 'optimized', 'performance', 'progress', 'report', 'made', 'tasks', 'completed', 'instructions', 'meetings', 'member', 'understand', 'cloned', 'original', 'readmemd', 'pending', 'working', 'scan', 'json', 'next', 'logic', 'decide', 'facing', 'challenges', 'face', 'courseproject', 'fork', 'paste', 'link', 'microsoft', 'cmt', 'detailed', 'coursera', 'week', 'overviewweek', 'activities']
https://github.com/ssquires/CourseProject	"cs410 final project documentation squires4 | samantha squires contents project summary 1 how to run the code 1 project summary i trained a bert text classification model to identify tweets as 'sarcasm' or 'not_sarcasm' using python/tensorflow/keras and google colab. i found this tutorial very helpful in the process of writing my code, and directly used some of the code provided in the tutorial-i've also noted this directly in my code in the relevant functions. the code can be found in the google colab notebook in this repo (filename textclassificationcompetitionfinal.ipynb). bert was the first model i even attempted for this project, because i had heard of its success in text classification tasks. i didn't have much previous experience with tensorflow, so the main challenges that arose were understanding the formats and shapes required for model input and output. to complete the project, i first utilized the tensorflow bert tutorial mentioned above to write a function for building a keras model using a pre-trained bert model, and then a function to fit this model to the tweet classification training set, then make predictions on the test data and return those predictions. finally, i wrote a function to transform the model's predictions (log-odds values) to the format required by livedatalab, and save the result to a text file for downloading. finally, i wrote the main code pipeline, which loads the train and test data, preprocesses it by con- catenating the 'response' and 'context' columns into a single feature and transforming the labels from 'not_sarcasm'/'sarcasm' into 0/1, and finally calls the functions that i wrote earlier to create, fit, and predict using the model. after the code is finished running, it outputs a file named answer.txt, which is in the proper format to be submitted via livedatalab. how to run the code all project code is located in textclassificationcompetitionfinal.ipynb. please run the code in google colab by following the steps below (or watch the demo video tutorial here): 1. download this repo. 2. go to http://colab.research.google.com/ and click upload, then select the downloaded file textclassificationcompetitionfinal.ipynb. this should open the notebook in colab. the rest of these instructions are also included in the notebook itself, but for completeness: 3. in the colab ""edit"" menu, go to ""notebook settings"" and select ""gpu"" from the hardware accelerator dropdown. 4. upload the train and test data files provided with the competition (make sure they're named train.jsonl and test.jsonl) by going to ""files"" in the left-hand sidebar, clicking the upload icon, 1 and selecting train.jsonl and test.jsonl. these two data files are included in the repo, so you should already have them downloaded. 5. to run the code, select ""runtime"" from the colab menu and click ""run all"". the first few cells should run quite quickly: the final cell, which trains the model and predicts labels for the test data, takes much longer (in my experience, 10-12 minutes). after a minute or so, you should start to see output tracking the training progress of the model. after the code finishes running, the output file, answer.txt, should be visible under ""files"" in the left-hand sidebar. if you'd like to save this file, make sure to download it before the runtime disconnects. 2 cs410 final project progress report squires4 | samantha squires which tasks have been completed? i trained a bert text classification model to identify tweets as 'sarcasm' or 'not_sarcasm' using python/tensorflow/keras and google colab. i found this tutorial very helpful in the process. as of today (11/29/20), my second submission has successfully passed the baseline f1 score performance on livedatalab, with a precision of 0.699, recall of 0.768, and f1 of 0.732. which tasks are pending? although my code is functional at this point, i still need to: - clean up the code and write documentation - automate the final step of creating answer.txt (i did this manually in excel for my first two submissions) - create my tutorial presentation. if i have additional time, i would also like to continue to improve the performance of my model. are you facing any challenges? since i am fairly new to tensorflow and keras, my primary challenges so far have been getting the inputs and outputs of the model into the proper shapes and formats. i don't anticipate significant challenges moving forward with the documentation and presentation. 1 cs410 final project proposal squires4 | samantha squires team this will be an individual project (samantha squires, netid: squires4). competition i plan to join the text classification competition (twitter sarcasm detection). potential nn classifiers / dl frameworks i plan to look into a variety of neural-network based classifiers (cnn, lstm, bert, etc.). i plan to use the keras library, which i have used before for small neural network classification projects and tutorials. programming language the project will be completed in python. 1 courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities."	['cs', 'final', 'project', 'documentation', 'squires', 'samantha', 'contents', 'summary', 'run', 'code', 'trained', 'bert', 'text', 'classification', 'model', 'identify', 'tweets', 'sarcasm', 'not_sarcasm', 'using', 'pythontensorflowkeras', 'google', 'colab', 'found', 'tutorial', 'helpful', 'process', 'writing', 'directly', 'used', 'provided', 'tutorialive', 'also', 'noted', 'relevant', 'functions', 'notebook', 'repo', 'filename', 'textclassificationcompetitionfinalipynb', 'first', 'even', 'attempted', 'heard', 'success', 'tasks', 'didnt', 'much', 'previous', 'experience', 'tensorflow', 'main', 'challenges', 'arose', 'understanding', 'formats', 'shapes', 'required', 'input', 'output', 'complete', 'utilized', 'mentioned', 'write', 'function', 'building', 'keras', 'pretrained', 'fit', 'tweet', 'training', 'set', 'make', 'predictions', 'test', 'data', 'return', 'finally', 'wrote', 'transform', 'models', 'logodds', 'values', 'format', 'livedatalab', 'save', 'result', 'file', 'downloading', 'pipeline', 'loads', 'train', 'preprocesses', 'con', 'catenating', 'response', 'context', 'columns', 'single', 'feature', 'transforming', 'labels', 'not_sarcasmsarcasm', 'calls', 'earlier', 'create', 'predict', 'finished', 'running', 'outputs', 'named', 'answertxt', 'proper', 'submitted', 'via', 'located', 'please', 'following', 'steps', 'watch', 'demo', 'video', 'download', 'go', 'httpcolabresearchgooglecom', 'click', 'upload', 'select', 'downloaded', 'open', 'rest', 'instructions', 'included', 'completeness', 'edit', 'menu', 'settings', 'gpu', 'hardware', 'accelerator', 'dropdown', 'files', 'competition', 'sure', 'theyre', 'trainjsonl', 'testjsonl', 'going', 'lefthand', 'sidebar', 'clicking', 'icon', 'selecting', 'two', 'already', 'runtime', 'cells', 'quite', 'quickly', 'cell', 'trains', 'predicts', 'takes', 'longer', 'minutes', 'minute', 'start', 'see', 'tracking', 'progress', 'finishes', 'visible', 'youd', 'like', 'disconnects', 'report', 'completed', 'today', 'second', 'submission', 'successfully', 'passed', 'baseline', 'f', 'score', 'performance', 'precision', 'recall', 'pending', 'although', 'functional', 'point', 'still', 'need', 'clean', 'automate', 'step', 'creating', 'manually', 'excel', 'submissions', 'presentation', 'additional', 'time', 'would', 'continue', 'improve', 'facing', 'since', 'fairly', 'new', 'primary', 'far', 'getting', 'inputs', 'dont', 'anticipate', 'significant', 'moving', 'forward', 'proposal', 'team', 'individual', 'netid', 'plan', 'join', 'twitter', 'detection', 'potential', 'nn', 'classifiers', 'dl', 'frameworks', 'look', 'variety', 'neuralnetwork', 'based', 'cnn', 'lstm', 'etc', 'use', 'library', 'small', 'neural', 'network', 'projects', 'tutorials', 'programming', 'language', 'python', 'courseproject', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'coursera', 'week', 'course', 'overviewweek', 'activities']
https://github.com/steve303/CourseProject	courseproject summary in this project we trained a pre-built model (bert) using the transformers library from hugging face on a dataset of labeled tweets, labeled for sarcasm (sarcastic/not sarcastic). we then used this model to predict the class (sarcastic/not sarcastic) of a set of provided unlabeled tweets for comparison to a competitive baseline score. we were able to beat the baseline with our model. see ./project documentation/final_summary.pdf for a full report. repository contents ./alternative methods & models/: contains additional models that we built and trained but which were unsuccessful at beating the baseline score. ./data/: contains the test and train data provided for the competition. ./project documentation/: contains the final report, demo, and other project deliverables. answer.txt: our final file containing the classification of the test tweets which outperformed the f1 score of the baseline. bert.ipynb: our notebook file in which we build, train, and test the model. text_preprocessing.py: a dependecy of bert.ipynb, used to preprocess the text for tokenization.	['courseproject', 'summary', 'project', 'trained', 'prebuilt', 'model', 'bert', 'using', 'transformers', 'library', 'hugging', 'face', 'dataset', 'labeled', 'tweets', 'sarcasm', 'sarcasticnot', 'sarcastic', 'used', 'predict', 'class', 'set', 'provided', 'unlabeled', 'comparison', 'competitive', 'baseline', 'score', 'able', 'beat', 'see', 'documentationfinal_summarypdf', 'full', 'report', 'repository', 'contents', 'alternative', 'methods', 'models', 'contains', 'additional', 'built', 'unsuccessful', 'beating', 'data', 'test', 'train', 'competition', 'documentation', 'final', 'demo', 'deliverables', 'answertxt', 'file', 'containing', 'classification', 'outperformed', 'f', 'bertipynb', 'notebook', 'build', 'text_preprocessingpy', 'dependecy', 'preprocess', 'text', 'tokenization']
https://github.com/subhasishb-coder/CourseProject	"project: text classification competition team: subhasish bose (sbose4) and soumya kanti dutta (skdutta2) this documentation is created during cs 410: text information system final project and it contains the details of the project. table of contents introduction ............................................................................................................................... 1 the training dataset content ........................................................................................................................ 1 the test dataset content ............................................................................................................................... 2 dataset size statistics .................................................................................................................................... 2 project objective ........................................................................................................................................... 2 approach and workflow ............................................................................................................ 2 data preprocessing and feature engineering ................................................................................................ 2 training models............................................................................................................................................. 3 validation of training data ............................................................................................................................ 3 running code on test data and leaderboard score ...................................................................................... 4 contribution .................................................................................................................................................. 4 setup and usage instructions..................................................................................................... 4 software dependencies ................................................................................................................................. 4 setup and usage instructions ........................................................................................................................ 5 references .................................................................................................................................. 5 introduction as final project for cs 410 text information system, we participated in text classification competition to detect twitter sarcasm. we were given both training and test datasets. the training dataset content label: sarcasm or not_sarcasm response: the tweet to be classified context: the conversation context of the response example: {""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""]} the test dataset content id: string identifier for sample. this id is required for project submission and grading. response: the tweet to be classified context: the conversation context of the response example: {""id"": ""twitter_1"", ""response"": ""@user @user @user my 3 year old , that just finished reading nietzsche and then asked me : \"" ayo papa why these people always trying to cancel someone on twitter , trying to pretend like that makes them better themselves ? \"" . to which i replied \"" idk \"" , and he just \"" cuz hoes mad \"" . im so proud . <url>"", ""context"": [""well now that \u2019 s problematic af <url>"", ""@user @user my 5 year old ... asked me why they are making fun of native americans .."", ""@user @user @user i will take shit that didn't happen for $ 100"", ""@user @user @user no .. he actually in the gifted program and reads on second grade level . ... and he knows kansas city is in missouri""]} dataset size statistics train test 5000 1800 project objective our project objective is to learn from the training dataset and predict the labels of test dataset (sarcasm or not_sarcasm). approach and workflow data preprocessing and feature engineering - first, we read the training and test data of jsonl format to pandas data frame. function: read_jsonl_to_dataframe - then we applied the following data cleaning and feature engineering steps on the training and test data. function: simple_feature_engieering_and_data_cleansing 1) combined response and context tweets in the data frame both in training and test data. 2) converted the dataset to lower case. 3) got rid of '@user', '<url>', web url links, hashtags. 4) next, we got rid of stop words. we used nltk.corpus.stopwords for this purpose. 5) we removed the emojis as well. 6) we removed all punctuations and special characters. 7) lastly, we stripped each word to get rid of additional 'space'. - we also used sklearn.feature_extraction.text.tfidfvectorizer to incorporate additional feature engineering with the following parameters: * max_features =20000 * min_df=1 * max_df=0.5 * binary=1 * use_idf=1 * smooth_idf=1 * sublinear_tf=1 * ngram_range=(1,3) training models we have tried the following algorithms on training data. a) linear svc b) naive bayes c) logistic regression d) random forest e) neural network - bert these experimentation code can be found in code/other_model_experimentation folder. https://github.com/subhasishb-coder/courseproject/tree/main/code/other_model_experiments to run the bert code the following file needs to be downloaded separately - glove.twitter.27b.100d.txt needs to be downloaded for neural network among these logistic regression provided us the best performance. so, we designed our final code with logistic regression. we used sklearn.linear_model.logisticregression, with the following parameters. * class_weight='balanced' * solver='newton-cg' * c=1 validation of training data we got the following performance matrix, doing a train test split of 80/20: classification result for logistic regression precision recall f1-score support not_sarcasm 0.78 0.72 0.75 519 sarcasm 0.72 0.78 0.75 481 accuracy 0.75 1000 macro avg 0.75 0.75 0.75 1000 weighted avg 0.75 0.75 0.75 1000 overall accuracy for logistic regression 0.75 running code on test data and leaderboard score once we validated the performance of logistic regression on training data, we applied it on test dataset. functions: write_prediction_results_in_list and final_prediction_calculation. we created answer.txt file with test dataset labels which we uploaded for grading. we were able to beat the baseline. we tried with multiple times adjusting the feature vector. leaderboard snapshot: contribution data preprocessing - subhasish feature engineering - soumya model training - soumya validation and adjustment of feature vector - subhasish setup and usage instructions software dependencies * python==3.8.3 * nltk==3.5 * pandas==1.0.5 * scikit_learn==0.23.2 setup and usage instructions 1. conda create -n ""project_demo"" python=3.8.3 2. conda activate project_demo 3. git clone https://github.com/subhasishb-coder/courseproject.git 4. cd courseproject 5. pip install nltk==3.5 6. pip install pandas==1.0.5 7. pip install scikit_learn==0.23.2 8. cd code 9. python testclassficationcompetion_sarcasm_detection.py references https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.logisticregression.html https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.tfidfvectorizer.html https://towardsdatascience.com/sarcasm-detection-step-towards-sentiment-analysis-84cb013bb6db project: text classification competition team: subhasish bose (sbose4) and soumya kanti dutta (skdutta2) this report contains information on project progress as of 11/25/2020. progress: we have completed the following steps: 1) get train and test datasets from github repo. 2) inspect the datasets to understand the format and relation. 3) performed data cleaning steps on the dataset. 4) performed train-test split on training dataset to test accuracy. 5) tested the dataset with the following algorithms: a) linear svc b) naive bayes c) logistic regression d) random forest e) neural network - bert remaining tasks: the following tasks are pending: 1) run the above-mentioned algorithms on test dataset. 2) our software will go with the majority decision found from these 5 algorithms mentioned above. for example, if any 3/4/5 of these algorithms find the tweet as 'sarcasm' - our code with tag it as 'sarcasm'. 3) create output in desired format. 4) create project report. 5) create software usage tutorial presentation. 6) code, project report and presentation submission. issues/ challenges: as the test dataset is not labeled, it is difficult for us to judge accuracy of our code on it. final project proposal document topic: competitions 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. subhasish bose (captain) - sbose4@illinois.edu soumya kanti dutta - skdutta2@illinois.edu 2. which competition do you plan to join? text classification competition 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods we are prepared to learn state-of-the-art neural network classifiers. we have heard of classifiers like cnn (convolution neural network), rnn (recurrent neural network) and frameworks/ libraries like keras, spacy, nltk, scikit-learn. we don't have any prior experience with these. 4. which programming language do you plan to use? python courseproject introduction as final project for cs 410 text information system, we participated in text classification competition to detect twitter sarcasm. we were given both training and test datasets. the training dataset content label: sarcasm or not_sarcasm response: the tweet to be classified context: the conversation context of the response example: {""label"": ""sarcasm"", ""response"": ""@user @user @user i don't get this .. obviously you do care or you would've moved right along .. instead you decided to care and troll her .."", ""context"": [""a minor child deserves privacy and should be kept out of politics . pamela karlan , you should be ashamed of your very angry and obviously biased public pandering , and using a child to do it ."", ""@user if your child isn't named barron ... #bebest melania couldn't care less . fact . ""]} the test dataset content id: string identifier for sample. this id is required for project submission and grading. response: the tweet to be classified context: the conversation context of the response example: {""id"": ""twitter_1"", ""response"": ""@user @user @user my 3 year old , that just finished reading nietzsche and then asked me : \"" ayo papa why these people always trying to cancel someone on twitter , trying to pretend like that makes them better themselves ? \"" . to which i replied \"" idk \"" , and he just \"" cuz hoes mad \"" . im so proud . "", ""context"": [""well now that \u2019 s problematic af "", ""@user @user my 5 year old ... asked me why they are making fun of native americans .."", ""@user @user @user i will take shit that didn't happen for $ 100"", ""@user @user @user no .. he actually in the gifted program and reads on second grade level . ... and he knows kansas city is in missouri""]} dataset size statistics train test 5000 1800 project objective our project objective is to learn from the training dataset and predict the labels of test dataset (sarcasm or not_sarcasm). setup and usage instructions software dependencies: 1) python==3.8.3 2) nltk==3.5 3) pandas==1.0.5 4) scikit_learn==0.23.2 setup and usage instructions: 1) conda create -n ""project_demo"" python=3.8.3 2) conda activate project_demo 3) git clone https://github.com/subhasishb-coder/courseproject.git 4) cd courseproject 5) pip install nltk==3.5 6) pip install pandas==1.0.5 7) pip install scikit_learn==0.23.2 8) cd code 9) python testclassficationcompetion_sarcasm_detection.py software usage tutorial link: https://mediaspace.illinois.edu/media/t/1_xwb0wmzt"	['project', 'text', 'classification', 'competition', 'team', 'subhasish', 'bose', 'sbose', 'soumya', 'kanti', 'dutta', 'skdutta', 'documentation', 'created', 'cs', 'information', 'system', 'final', 'contains', 'details', 'table', 'contents', 'introduction', 'training', 'dataset', 'content', 'test', 'size', 'statistics', 'objective', 'approach', 'workflow', 'data', 'preprocessing', 'feature', 'engineering', 'models', 'validation', 'running', 'code', 'leaderboard', 'score', 'contribution', 'setup', 'usage', 'instructions', 'software', 'dependencies', 'references', 'participated', 'detect', 'twitter', 'sarcasm', 'given', 'datasets', 'label', 'not_sarcasm', 'response', 'tweet', 'classified', 'context', 'conversation', 'example', 'user', 'dont', 'get', 'obviously', 'care', 'wouldve', 'moved', 'right', 'along', 'instead', 'decided', 'troll', 'minor', 'child', 'deserves', 'privacy', 'kept', 'politics', 'pamela', 'karlan', 'ashamed', 'angry', 'biased', 'public', 'pandering', 'using', 'isnt', 'named', 'barron', 'bebest', 'melania', 'couldnt', 'less', 'fact', 'id', 'string', 'identifier', 'sample', 'required', 'submission', 'grading', 'twitter_', 'year', 'old', 'finished', 'reading', 'nietzsche', 'asked', 'ayo', 'papa', 'people', 'always', 'trying', 'cancel', 'someone', 'pretend', 'like', 'makes', 'better', 'replied', 'idk', 'cuz', 'hoes', 'mad', 'im', 'proud', 'url', 'well', 'u', 'problematic', 'af', 'making', 'fun', 'native', 'americans', 'take', 'shit', 'didnt', 'happen', 'actually', 'gifted', 'program', 'reads', 'second', 'grade', 'level', 'knows', 'kansas', 'city', 'missouri', 'train', 'learn', 'predict', 'labels', 'first', 'read', 'jsonl', 'format', 'pandas', 'frame', 'function', 'read_jsonl_to_dataframe', 'applied', 'following', 'cleaning', 'steps', 'simple_feature_engieering_and_data_cleansing', 'combined', 'tweets', 'converted', 'lower', 'case', 'got', 'rid', 'web', 'links', 'hashtags', 'next', 'stop', 'words', 'used', 'nltkcorpusstopwords', 'purpose', 'removed', 'emojis', 'punctuations', 'special', 'characters', 'lastly', 'stripped', 'word', 'additional', 'space', 'also', 'sklearnfeature_extractiontexttfidfvectorizer', 'incorporate', 'parameters', 'max_features', 'min_df', 'max_df', 'binary', 'use_idf', 'smooth_idf', 'sublinear_tf', 'ngram_range', 'tried', 'algorithms', 'linear', 'svc', 'b', 'naive', 'bayes', 'c', 'logistic', 'regression', 'random', 'forest', 'e', 'neural', 'network', 'bert', 'experimentation', 'found', 'codeother_model_experimentation', 'folder', 'httpsgithubcomsubhasishbcodercourseprojecttreemaincodeother_model_experiments', 'run', 'file', 'needs', 'downloaded', 'separately', 'glovetwitterbdtxt', 'among', 'provided', 'us', 'best', 'performance', 'designed', 'sklearnlinear_modellogisticregression', 'class_weightbalanced', 'solvernewtoncg', 'matrix', 'split', 'result', 'precision', 'recall', 'fscore', 'support', 'accuracy', 'macro', 'avg', 'weighted', 'overall', 'validated', 'functions', 'write_prediction_results_in_list', 'final_prediction_calculation', 'answertxt', 'uploaded', 'able', 'beat', 'baseline', 'multiple', 'times', 'adjusting', 'vector', 'snapshot', 'model', 'adjustment', 'python', 'nltk', 'scikit_learn', 'conda', 'create', 'n', 'project_demo', 'activate', 'git', 'clone', 'httpsgithubcomsubhasishbcodercourseprojectgit', 'cd', 'courseproject', 'pip', 'install', 'testclassficationcompetion_sarcasm_detectionpy', 'httpsscikitlearnorgstablemodulesgeneratedsklearnlinear_modellogisticregressionhtml', 'httpsscikitlearnorgstablemodulesgeneratedsklearnfeature_extractiontexttfidfvectorizerhtml', 'httpstowardsdatasciencecomsarcasmdetectionsteptowardssentimentanalysiscbbbdb', 'report', 'progress', 'completed', 'github', 'repo', 'inspect', 'understand', 'relation', 'performed', 'traintest', 'tested', 'remaining', 'tasks', 'pending', 'abovementioned', 'go', 'majority', 'decision', 'mentioned', 'find', 'tag', 'output', 'desired', 'tutorial', 'presentation', 'issues', 'challenges', 'labeled', 'difficult', 'judge', 'proposal', 'document', 'topic', 'competitions', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'sboseillinoisedu', 'skduttaillinoisedu', 'plan', 'join', 'choose', 'ir', 'prepared', 'stateoftheart', 'methods', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'learning', 'etc', 'name', 'concrete', 'tools', 'may', 'heard', 'classifiers', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'cnn', 'convolution', 'rnn', 'recurrent', 'libraries', 'keras', 'spacy', 'scikitlearn', 'programming', 'language', 'use', 'link', 'httpsmediaspaceillinoisedumediat_xwbwmzt']
https://github.com/surajbisht1809/CourseProject	"team amazings3 progress report * our team is amazing s3 * following are the team members o sithira s serasinghe sithira2@illinois.edu o santosh kore kore3@illinois.edu o suraj bisht surajb2@illinois.edu (team leader) * project: text classification competition task completed: team tried various models i.e. lstm, sequence, rnn, spacy, naive, embedding, logistic regression, randomforest, svc and bert after performing pre-processing and data cleaning with bert model our team have crossed baseline, following is the current view pending task: team is currently working to optimization model i.e. using different bert variant, tuning parameters and including context challenges: after working on various model, bert is working well for current assignment. bert model requires heavy computing resources hence on desktop building and training model takes around three hrs. our team is looking for some resources specially gpus for tuning parameters and optimizing model project proposal our team is amazing s3 following are the team members sithira s serasinghe sithira2@illinois.edu santosh kore kore3@illinois.edu suraj bisht surajb2@illinois.edu (team leader) we are joining text classification competition prior experience in keras, tensorflow and pytorch frameworks python will be used for this competition cs410 - text classification competition overview we participated in the text classification competition for sarcasm detection in tweets. our team beat the baseline (0.723) and achieved an f1 score of 0.7542963307013469. the code can be used for training a preprocessing the given dataset (train.jsonl and test.jsonl) and train a bert model. the usage of our solution can be found in the ""source code walkthrough section"". our team: amazings3 suraj bisht surajb2@illinois.edu (team leader) sithira serasinghe sithira2@illinois.edu santosh kore kore3@illinois.edu source code walkthrough 1. prerequisites anaconda 1.9.12 python 3.8.3 pytorch 1.7.0 transformers 3.0.0 2. install dependencies make sure to run this program in an ananconda environment (i.e. conda console). this has been tested on *nix and windows systems. 1. libs ```bash pip install tweet-preprocessor textblob wordsegment contractions tqdm ```` 2. download textblob corpora bash python -m textblob.download_corpora 3. install pytorch & transformers bash conda install pytorch torchvision torchaudio cpuonly -c pytorch transformers if it complains that the transformers lib's not installed, try this command: bash conda install -c conda-forge transformers 3. usage first, cd src and run the following commands, tl;dr bash python clean.py && python train.py && python eval.py this will preprocess, train and generate the answer.txt model which can be then submitted to the grader for evaluation. description of each step: 1. clean the dataset python clean.py train the model python train.py once the model is trained it will create an input/model.bin file which saves our model to a binary file. we can later load this file (in the evaluation step) to make predictions. make predictions & create the answer.txt file python eval.py the answer.txt file is created at the output folder. the following section describes each of these steps in-depth. data cleaning / preprocessing we perform data cleaning steps for both train.jsonl and test.jsonl so that they are normalized for training and evaluation purposes. the algorithm for cleaning the data is as follows: for each tweet: 1. append all context to become one sentence and prefix it to the response. 2. fix the tweet if it has special characters to support better expansion of contractions. 3. remove all digits from the tweets. 4. remove <url> and @user as they do not add any value. 5. convert all tweets to lowercase. 6. use nltk's tweet processor to remove emojis, urls, smileys, and '@' mentions 7. do hashtag segmentation to expand any hashtags to words. 8. expand contracted words. 9. remove all special symbols. 10. perform lemmatization on the words. model training a model can be built and trained with the provided parameters by issuing a python train.py command. the following steps are run in sequence during the model training. 1. read in the train.csv from the prior step. 2. training dataset (5000 records) is split into training and validation as 80:20 ratio. 3. feed in the parameters to the model. 4. perform model training for the given number of epochs. 5. calculate validation accuracy for each run and save the best model as a bin file tuning the model the following can be considered as parameters that could be optimized to achieve a better result. src/config.py python device = ""cpu"" # if you have cuda gpu, change this to 'cuda' max_len = 256 # max length of the tokens in a given document epochs = 5 # number of epochs to train the model for bert_path = ""bert-base-uncased"" # our base bert model. can plug in different models such as bert-large-uncased train_batch_size = 8 # size of the training dataset batch valid_batch_size = 4 # size of the validation dataset batch src/train.py python l25: test_size=0.15 # size of the validation dataset l69: optimizer = adamw(optimizer_parameters, lr=2e-5) # a different optimizer can be plugging or a learning rate can be defined here l71: num_warmup_steps=2 # no. of warmup steps that need to run before the actual training step src/model.py python l13: nn.dropout(0.1) # configure the dropout value evaluation of the model a high-level view of the sequence of operations run during the evaluation step is as follows. load the test.csv file from the data transformation step. load the best performing model from the training step. perform predictions for each test tweet (1800 total records) generate answer.txt that will be submitted to the grader to the ""output"" folder. contributions of the team members suraj bisht surajb2@illinois.edu (team leader) improve the initial coding workflow (google colab, local setup etc.). investigating sequential model, logistic regression, svc etc. investigating bert-base-uncased model. investigating data preprocessing options. hyperparameter tuning to improve the current model. sithira serasinghe sithira2@illinois.edu setting up the initial workflow. investigating lstm/bidirectional lstm, random forest etc. investigating various data preprocessing options. investigating bert-base-uncased model. hyperparameter tuning to improve the current model. santosh kore kore3@illinois.edu improve the initial coding workflow (google colab, local setup etc.). investigating sequential models, simplernn, cnn etc. investigating bert-large-uncased model. investigating data preprocessing options. hyperparameter tuning to improve the current model. future enhancements cleaning data further with different methods. optimizing bert model parameters and trying different bert model (eg. roberta) re-use some of the tried models and optimizing to beat f1 scores. extract emoji's to add more meaning to the sentiments of the tweets. data augmentation steps to prevent overfitting. try an ensemble of models (eg. bert + vlad etc. ) run our model on different test data and compare results against state-of-art. references/credits the usage of bert model is inspired by https://github.com/abhishekkrthakur/bert-sentiment"	['team', 'amazings', 'progress', 'report', 'amazing', 'following', 'members', 'sithira', 'serasinghe', 'sithiraillinoisedu', 'santosh', 'kore', 'koreillinoisedu', 'suraj', 'bisht', 'surajbillinoisedu', 'leader', 'project', 'text', 'classification', 'competition', 'task', 'completed', 'tried', 'various', 'models', 'ie', 'lstm', 'sequence', 'rnn', 'spacy', 'naive', 'embedding', 'logistic', 'regression', 'randomforest', 'svc', 'bert', 'performing', 'preprocessing', 'data', 'cleaning', 'model', 'crossed', 'baseline', 'current', 'view', 'pending', 'currently', 'working', 'optimization', 'using', 'different', 'variant', 'tuning', 'parameters', 'including', 'context', 'challenges', 'well', 'assignment', 'requires', 'heavy', 'computing', 'resources', 'hence', 'desktop', 'building', 'training', 'takes', 'around', 'three', 'hrs', 'looking', 'specially', 'gpus', 'optimizing', 'proposal', 'joining', 'prior', 'experience', 'keras', 'tensorflow', 'pytorch', 'frameworks', 'python', 'used', 'cs', 'overview', 'participated', 'sarcasm', 'detection', 'tweets', 'beat', 'achieved', 'f', 'score', 'code', 'given', 'dataset', 'trainjsonl', 'testjsonl', 'train', 'usage', 'solution', 'found', 'source', 'walkthrough', 'section', 'prerequisites', 'anaconda', 'transformers', 'install', 'dependencies', 'make', 'sure', 'run', 'program', 'ananconda', 'environment', 'conda', 'console', 'tested', 'nix', 'windows', 'systems', 'libs', 'bash', 'pip', 'tweetpreprocessor', 'textblob', 'wordsegment', 'contractions', 'tqdm', 'download', 'corpora', 'textblobdownload_corpora', 'torchvision', 'torchaudio', 'cpuonly', 'c', 'complains', 'installed', 'try', 'command', 'condaforge', 'first', 'cd', 'src', 'commands', 'tldr', 'cleanpy', 'trainpy', 'evalpy', 'preprocess', 'generate', 'answertxt', 'submitted', 'grader', 'evaluation', 'description', 'step', 'clean', 'trained', 'create', 'inputmodelbin', 'file', 'saves', 'binary', 'later', 'load', 'predictions', 'created', 'output', 'folder', 'describes', 'steps', 'indepth', 'perform', 'normalized', 'purposes', 'algorithm', 'follows', 'tweet', 'append', 'become', 'one', 'sentence', 'prefix', 'response', 'fix', 'special', 'characters', 'support', 'better', 'expansion', 'remove', 'digits', 'url', 'user', 'add', 'value', 'convert', 'lowercase', 'use', 'nltks', 'processor', 'emojis', 'urls', 'smileys', 'mentions', 'hashtag', 'segmentation', 'expand', 'hashtags', 'words', 'contracted', 'symbols', 'lemmatization', 'built', 'provided', 'issuing', 'read', 'traincsv', 'records', 'split', 'validation', 'ratio', 'feed', 'number', 'epochs', 'calculate', 'accuracy', 'save', 'best', 'bin', 'considered', 'could', 'optimized', 'achieve', 'result', 'srcconfigpy', 'device', 'cpu', 'cuda', 'gpu', 'change', 'max_len', 'max', 'length', 'tokens', 'document', 'bert_path', 'bertbaseuncased', 'base', 'plug', 'bertlargeuncased', 'train_batch_size', 'size', 'batch', 'valid_batch_size', 'srctrainpy', 'l', 'test_size', 'optimizer', 'adamwoptimizer_parameters', 'lre', 'plugging', 'learning', 'rate', 'defined', 'num_warmup_steps', 'warmup', 'need', 'actual', 'srcmodelpy', 'nndropout', 'configure', 'dropout', 'highlevel', 'operations', 'testcsv', 'transformation', 'test', 'total', 'contributions', 'improve', 'initial', 'coding', 'workflow', 'google', 'colab', 'local', 'setup', 'etc', 'investigating', 'sequential', 'options', 'hyperparameter', 'setting', 'lstmbidirectional', 'random', 'forest', 'simplernn', 'cnn', 'future', 'enhancements', 'methods', 'trying', 'eg', 'roberta', 'reuse', 'scores', 'extract', 'meaning', 'sentiments', 'augmentation', 'prevent', 'overfitting', 'ensemble', 'vlad', 'compare', 'results', 'stateofart', 'referencescredits', 'inspired', 'httpsgithubcomabhishekkrthakurbertsentiment']
https://github.com/tgw4uiuc/CourseProject	"metapy: (experimental) python bindings for meta diff - author tgw4's note regarding attribution: i created the os - specific sections of this, and the note regarding python 2.7 and - 3.4-3.7 being easier to use, the rest was created by the - previous tutorial author(s) who created https://github.com/meta-toolkit/metapy/blob/master/readme.md. this project provides python (2.7 and 3.x are supported) bindings for the meta toolkit. they are still very much under construction, but the goal is to make it seamless to use meta's components within any python application (e.g., a django or flask web app). this project is made possible by the excellent pybind11 library. outline generic instructions os specific instructions chromebook ubuntu 20.04lts centos 8.2.2004 windows 10 note that metapy will be much easier to install in python verisons 2.7 or 3.4 through 3.7, while later versions require compiling all the source code. generic setup notes (the easy way) ```bash ensure your pip is up to date pip install --upgrade pip install metapy! pip install metapy ``` this should work on linux, os x, and windows with pretty much any recent python version >= 2.7. on linux, make sure to update your pip to version 8.1 (or newer) so you can install from a binary package---this will save you a lot of time. compiling it yourself (the hard way) you will, of course, need python installed. you will also need its headers to be installed as well, so look for a python-dev or similar package for your system. beyond that, you'll of course need to satisfy the requirements for building meta itself. this repository should have everything you need to get started. you should ensure that you've fetched all of the submodules first, though: bash git submodule update --init --recursive once that's done, you should be able to build the library like so: bash mkdir build cd build cmake .. -dcmake_build_type=release make you can force building against a specific version of python if you happen to have multiple versions installed by specifying -dmetapy_python_version=x.y when invoking cmake. the module should be written to metapy.so in the build directory. os specific instructions chromebook setup recently released chromebooks (in the last couple of years as of december 2020) have a option to run a linux beta. metapy can be installed on these chromebooks. check here for a list of compatible chromebooks: https://www.chromium.org/chromium-os/chrome-os-systems-supporting-linux if your chromebook is compatible, see this page to turn on the linux beta mode: chomebook linux beta mode once you have linux beta installed and working, these are the steps to install metapy: open a linux terminal then: ``` update package lists sudo apt-get update install python3.7 sudo apt-get install python3.7 install pip sudo apt-get install python3-pip update pip pip3 install --upgrade pip install metapy pip3 install metapy ``` that's it, metapy is now installed. ubuntu setup version 20.04 lts ubuntu 20.04 lts comes wiht python 3.8 installed, which will not make it easy to install metapy. the easy way: (using a previous version of python) install python version 3.4 through 3.7 from python.org. make python3.7 your active version. see the instructions here for help switching versions: https://linuxconfig.org/ubuntu-20-04-python-version-switch-manager now install pip: ``` install pip sudo apt-get install python3-pip update pip pip3 install --upgrade pip install metapy pip3 install metapy ``` that's it, metapy is now installed! the hard way: (sticking with python 3.8) first lets update the list of packages available to install: ``` update package lists sudo apt update install pip sudo apt install python3-pip update pip pip3 install --upgrade pip make an install file directory mkdir metapy cd metapy pip3 download metapy ls (to see the filename it downloaded .. should be metapy(something).tar.gz tar -xvf metapy-0.2.13.tar.gz (or whatever your filename is you downloaded above) ls (to see the name of the directory it created) cd (directory name from above, will be metapy-(something)) cd deps mkdir icu-61.1 now download the ""icu4c-61_1-src.tgz"" file from https://github.com/unicode-org/icu/releases/tag/release-61-1 and copy it to the icu-61.1 directory you created above. move back up to the directory above the meta directory cd .. cd .. cd .. when you 'ls' you should see ""metapy"" as one of the subdirectories install metapy pip3 install metapy (this will takeawhile as the metapy package is compiled). ``` once its completed, that's it, metapy is now installed. centos setup version 8.2.2004 centos is quite easy, as python 3.6 and pip are installed by default. all you need to do is: make sure your user account is in the ""sudoers"" group, see this tutorial here: https://linuxize.com/post/how-to-add-user-to-sudoers-in-centos/ then to install metapy: sudo pip3 install --upgrade pip sudo pip3 install metapy that's it, you now have metapy installed! windows 10 setup first, be sure to have python version 2.7 or 3.4-3.7 installed. to check if python is installed, open a command prompt window an type: `` check if proper version of python is installed python --version `` if it is not, download it from python.org (be sure to grab one of the versions mentioned above, not necessarily the latest version.) once python is installed, check if pip is installed: ``` check for pip pip --version ``` if pip is not installed, get it from https://pypi.org/project/pip/. once pip is installed, upgrade it to the latest version, and install metapy: ``` upgrade pip pip install --upgrade pip install metapy pip install metapy ``` that's it, you now have metapy installed! meta: modern text analysis please visit our web page for information and tutorials about meta! build status (by branch) master: develop: diff - author tgw4's note regarding attribution: i created the - following os specific sections of this tutorial: - chromebook - ubuntu 20.04 lts - centos 8.2.2004 - and also added the icu4c and xlocale.h info to the ""generic setup notes"" as well as some general editing and reordering. - the rest was created by the previous tutorial author(s) who created https://github.com/meta-toolkit/metapy/blob/master/readme.md. outline intro documentation tutorials citing project setup generic setup notes mac os x chromebook ubuntu arch linux fedora centos ews/engrit (this is uiuc-specific) windows intro meta is a modern c++ data sciences toolkit featuring text tokenization, including deep semantic features like parse trees inverted and forward indexes with compression and various caching strategies a collection of ranking functions for searching the indexes topic models classification algorithms graph algorithms language models crf implementation (pos-tagging, shallow parsing) wrappers for liblinear and libsvm (including libsvm dataset parsers) utf8 support for analysis on various languages multithreaded algorithms documentation doxygen documentation can be found here. tutorials we have walkthroughs for a few different parts of meta on the meta homepage. citing if you used meta in your research, we would greatly appreciate a citation for our acl demo paper: latex @inproceedings{meta-toolkit, author = {massung, sean and geigle, chase and zhai, cheng{x}iang}, title = {{meta: a unified toolkit for text retrieval and analysis}}, booktitle = {proceedings of acl-2016 system demonstrations}, month = {august}, year = {2016}, address = {berlin, germany}, publisher = {association for computational linguistics}, pages = {91--96}, url = {http://anthology.aclweb.org/p16-4016} } project setup generic setup notes there are rules for clean, tidy, and doc. after you run the cmake command once, you will be able to just run make as usual when you're developing---it'll detect when the cmakelists.txt file has changed and rebuild makefiles if it needs to. to compile in debug mode, just replace release with debug in the appropriate cmake command for your os above and rebuild using make after. note: as of december 2020, the icu4c repository moved from icu-porject.org to github.com/unicode-org/icu. meta requires icu4c to compile, so you will likely need to download it manually to allow meta to successfully compile. the ubuntu 20.04 lts, centos 8.2.2004, and chromebook sections were updated in december 2020, and address this specifically, but for other os versions, as a general guide the process is (do this before you do the final ""make"" step): `download the ""icu4c-58_2-src.tgz"" file from here: github icu4c 58-2 page (direct link to file) now copy the file from your download location to the correct directory where you've downloaded the meta source. copy it to the meta/deps/icu-58.2/ directory (create those deps and icu-58.2 directories if they don't exist yet.) one other thing that may cause issues in newer os distributions: the meta source uses xlocale.h, which is no longer included in many newer os distributions. we can use locale.h instead, so this will link it to there: ``` link xlocale.h to locale.h sudo ln -s /usr/include/locale.h /usr/local/include/xlocale.h ``` don't hesitate to reach out on the forum if you encounter problems getting set up. we routinely build with a wide variety of compilers and operating systems through our continuous integration setups (travis-ci for linux and os x and appveyor for windows), so we can be fairly certain that things should build on nearly all major platforms. mac os x build guide mac os x 10.6 or higher is required. you may have success with 10.5, but this is not tested. you will need to have homebrew installed, as well as the command line tools for xcode (homebrew requires these as well, and it will prompt for them during install, or you can install them with xcode-select --install on recent versions of os x). once you have homebrew installed, run the following commands to get the dependencies for meta: bash brew update brew install cmake jemalloc lzlib icu4c to get started, run the following commands: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cxx=clang++ cmake ../ -dcmake_build_type=release -dicu_root=/usr/local/opt/icu4c make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. chromebook build guide recently released chromebooks (in the last couple of years as of december 2020) have a option to run a linux beta. meta can be built on these chromebooks. check here for a list of compatible chromebooks: https://www.chromium.org/chromium-os/chrome-os-systems-supporting-linux if your chromebook is compatible, see this page to turn on the linux beta mode: chomebook linux beta mode once you have linux beta installed and working, these are the steps to install meta: ``` need gcc/g++-7, gcc/g++-8 or later will not work sudo apt-get update sudo apt-get install gcc-7 g++-7 next update the system and get needed files sudo apt-get update sudo apt-get install software-properties-common install dependencies sudo apt-get install cmake libicu-dev git libjemalloc-dev zlib1g-dev ``` now we need to make sure that we use gcc/g++-7 and not the newer version that is installed by default on the system. (you may want to remove these links after you are finished successfully building meta). ``` sudo ln -s /usr/bin/gcc-7 /usr/local/bin/gcc sudo ln -s /usr/bin/g++-7 /usr/local/bin/g++ ``` now quit and restart the linux beta terminal window. next lets download the meta files: ``` clone the project git clone https://github.com/meta-toolkit/meta.git cd meta set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . ``` since the repository for the icu4c files has changed since the meta package was created, we will need to manually download the file and place it in the right directory for the build process to pick up. now we need to download the ""icu4c-58_2-src.tgz"" file from here: github icu4c 58-2 page (direct link to file) now copy the file from your download location to the correct directory. copy it to the meta/deps/icu-58.2/ directory (create those directories if they don't exist yet) next, the meta source uses xlocale.h, which is no longer included in many newer linux distributions. we can use locale.h instead, so we will link it to there: ``` link xlocale.h to locale.h sudo ln -s /usr/include/locale.h /usr/local/include/xlocale.h ``` now we'll configure move back to the build directory, configure the makefile with cmake, and then make the project: ``` configure and build the project cd .. (make sure you are in the meta/build/ directory) cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. ubuntu build guide the directions here depend greatly on your installed version of ubuntu. to check what version you are on, run the following command: bash cat /etc/issue based on what you see, you should proceed with one of the following guides: ubuntu 20.04 lts build guide older ubuntu versions (no longer supported, instructions remain for reference purposes) - ubuntu 15.10 build guide - ubuntu 14.04 lts build guide - ubuntu 12.04 lts build guide ubuntu 20.04 lts build guide update the list of available packages, and then install gcc-7, g++-7 and other prerequisites. sudo apt update sudo apt install gcc-7 sudo apt install g++-7 sudo apt install git cmake make libjemalloc-dev zlib1g-dev once the dependencies are all installed, you should be ready to build. run the following commands to get started: ``` clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . ``` since the repository for the icu4c files has changed since the meta package was created, we will need to manually download the file and place it in the right directory for the build process to pick up. now we need to download the ""icu4c-58_2-src.tgz"" file from here: github icu4c 58-2 page (direct link to file) now copy the file from your download location to the correct directory. copy it to the meta/deps/icu-58.2/ directory (create those directories if they don't exist yet) next, the meta source uses xlocale.h, which is no longer included in many newer linux distributions. we can use locale.h instead, so we will link it to there: ``` link xlocale.h to locale.h sudo ln -s /usr/include/locale.h /usr/local/include/xlocale.h ``` now we'll configure move back to the build directory, configure the makefile with cmake, and then make the project: ``` configure and build the project, make sure we're using gcc/g++ version 7 cmake ../ -dcmake_build_type=release -dcmake_c_compiler=gcc-7 -dcmake_cxx_compiler=g++-7 make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. ubuntu 15.10 build guide ubuntu's non-lts desktop offering in 15.10 has enough modern software in its repositories to build meta without much trouble. to install the dependencies, run the following commands. bash apt update apt install g++ git cmake make libjemalloc-dev zlib1g-dev once the dependencies are all installed, you should be ready to build. run the following commands to get started: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. ubuntu 14.04 lts build guide ubuntu 14.04 has a recent enough gcc for building meta, but we'll need to add a ppa for a more recent version of cmake. start by running the following commands to install the dependencies for meta. ```bash this might take a while sudo apt-get update sudo apt-get install software-properties-common add the ppa for cmake sudo add-apt-repository ppa:george-edison55/cmake-3.x sudo apt-get update install dependencies sudo apt-get install g++ cmake libicu-dev git libjemalloc-dev zlib1g-dev ``` once the dependencies are all installed, you should double check your versions by running the following commands. bash g++ --version should output g++ (ubuntu 4.8.2-19ubuntu1) 4.8.2 copyright (c) 2013 free software foundation, inc. this is free software; see the source for copying conditions. there is no warranty; not even for merchantability or fitness for a particular purpose. and bash cmake --version should output cmake version 3.2.2 cmake suite maintained and supported by kitware (kitware.com/cmake). once the dependencies are all installed, you should be ready to build. run the following commands to get started: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. ubuntu 12.04 lts build guide building on ubuntu 12.04 lts requires more work than its more up-to-date 14.04 sister, but it can be done relatively easily. you will, however, need to install a newer c++ compiler from a ppa, and switch to it in order to build meta. we will also need to install a newer cmake version than is natively available. start by running the following commands to get the dependencies that we will need for building meta. ```bash this might take a while sudo apt-get update sudo apt-get install python-software-properties add the ppa that contains an updated g++ sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt-get update this will probably take a while sudo apt-get install g++ g++-4.8 git make wget libjemalloc-dev zlib1g-dev wget http://www.cmake.org/files/v3.2/cmake-3.2.0-linux-x86_64.sh sudo sh cmake-3.2.0-linux-x86_64.sh --prefix=/usr/local ``` during cmake installation, you should agree to the license and then say ""n"" to including the subdirectory. you should be able to run the following commands and see the following output: bash g++-4.8 --version should print g++-4.8 (ubuntu 4.8.1-2ubuntu1~12.04) 4.8.1 copyright (c) 2013 free software foundation, inc. this is free software; see the source for copying conditions. there is no warranty; not even for merchantability or fitness for a particular purpose. and bash /usr/local/bin/cmake --version should print cmake version 3.2.0 cmake suite maintained and supported by kitware (kitware.com/cmake). once the dependencies are all installed, you should be ready to build. run the following commands to get started: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project (set c and cxx flags to use the gcc/g++ 7 compiler we installed earlier. cxx=g++-4.8 /usr/local/bin/cmake ../ -dcmake_build_type=release -d cmake_c_compiler=gcc-7 -d cmake_cxx_compiler=g++-7 make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. arch linux build guide arch linux consistently has the most up to date packages due to its rolling release setup, so it's often the easiest platform to get set up on. to install the dependencies, run the following commands. bash sudo pacman -sy sudo pacman -s clang cmake git icu libc++ make jemalloc zlib once the dependencies are all installed, you should be ready to build. run the following commands to get started: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cxx=clang++ cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. fedora build guide this has been tested with fedora 22+ (the oldest currently supported fedora as of the time of writing). you may have success with earlier versions, but this is not tested. (if you're on an older version of fedora, use yum instead of dnf for the commands given below.) to get started, install some dependencies: ```bash these may be already installed sudo dnf install make git wget gcc-c++ jemalloc-devel cmake zlib-devel ``` you should be able to run the following commands and see the following output: bash g++ --version should print g++ (gcc) 5.3.1 20151207 (red hat 5.3.1-2) copyright (c) 2015 free software foundation, inc. this is free software; see the source for copying conditions. there is no warranty; not even for merchantability or fitness for a particular purpose. and bash cmake --version should print cmake version 3.3.2 cmake suite maintained and supported by kitware (kitware.com/cmake). once the dependencies are all installed, you should be ready to build. run the following commands to get started: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cmake ../ -dcmake_build_type=release make ``` you can now test the system with the following command: bash ./unit-test --reporter=spec centos build guide centos 8.2.2004 the first step is to install gcc/g++ 7.5.0 (or any version between 4.8.5 and 7.5.0, inclusive). meta won't compile properly with gcc 8.0 or higher. once that is installed, this is how to setup meta: sudo yum install git cmake make libjemalloc-dev zlib1g-dev ``` clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . ``` since the repository for the icu4c files has changed since the meta package was created, we will need to manually download the file and place it in the right directory for the build process to pick up. now we need to download the ""icu4c-58_2-src.tgz"" file from here: github icu4c 58-2 page (direct link to file) now copy the file from your download location to the correct directory. copy it to the meta/deps/icu-58.2/ directory (create those directories if they don't exist yet) next, the meta source uses xlocale.h, which is no longer included in many newer linux distributions. we can use locale.h instead, so we will link it to there: ``` link xlocale.h to locale.h sudo ln -s /usr/include/locale.h /usr/local/include/xlocale.h ``` now we'll configure move back to the build directory, configure the makefile with cmake, and then make the project: ``` configure and build the project cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. older versions of centos: meta can be built in centos 7 and above. centos 7 comes with a recent enough compiler (gcc 4.8.5), but too old a version of cmake. we'll thus install the compiler and related libraries from the package manager and install our own more recent cmake ourselves. ```bash install build dependencies (this will probably take a while) sudo yum install gcc gcc-c++ git make wget zlib-devel epel-release sudo yum install jemalloc-devel wget http://www.cmake.org/files/v3.2/cmake-3.2.0-linux-x86_64.sh sudo sh cmake-3.2.0-linux-x86_64.sh --prefix=/usr/local --exclude-subdir ``` you should be able to run the following commands and see the following output: bash g++ --version should print g++ (gcc) 4.8.5 20150623 (red hat 4.8.5-4) copyright (c) 2015 free software foundation, inc. this is free software; see the source for copying conditions. there is no warranty; not even for merchantability or fitness for a particular purpose. and bash /usr/local/bin/cmake --version should print cmake version 3.2.0 cmake suite maintained and supported by kitware (kitware.com/cmake). once the dependencies are all installed, you should be ready to build. run the following commands to get started: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project /usr/local/bin/cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. ews/engrit build guide note: please don't do this if you are able to get meta working in any other possible way, as the ews filesystem has a habit of being unbearably slow and increasing compile times by several orders of magnitude. for example, comparing the cmake, make, and unit-test steps on my desktop vs. ews gives the following: | system | cmake time | make time | unit-test time | | -------------- | ----------- | ----------- | ---------------- | | my desktop | 0m7.523s | 2m30.715s | 0m36.631s | | ews | 1m28s | 11m28.473s | 1m25.326s | if you are on a machine managed by engineering it at uiuc, you should follow this guide. these systems have software that is much too old for building meta, but engrit has been kind enough to package updated versions of research software as modules. the modules provided for gcc and cmake are recent enough to build meta, so it is actually mostly straightforward. to set up your dependencies (you will need to do this every time you log back in to the system), run the following commands: bash module load gcc module load cmake/3.5.0 once you have done this, double check your versions by running the following commands. bash g++ --version should output g++ (gcc) 5.3.0 copyright (c) 2015 free software foundation, inc. this is free software; see the source for copying conditions. there is no warranty; not even for merchantability or fitness for a particular purpose. and bash cmake --version should output cmake version 3.5.0 cmake suite maintained and supported by kitware (kitware.com/cmake). if your versions are correct, you should be ready to build. to get started, run the following commands: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta/ set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cxx=which g++ cc=which gcc cmake ../ -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. windows build guide meta can be built on windows using the mingw-w64 toolchain with gcc. we strongly recommend using msys2 as this makes fetching the compiler and related libraries significantly easier than it would be otherwise, and it tends to have very up-to-date packages relative to other similar mingw distributions. note: if you find yourself confused or lost by the instructions below, please refer to our visual setup guide for windows which includes screenshots for every step, including updating msys2 and the mingw-w64 toolchain. to start, download the installer for msys2 from the linked website and follow the instructions on that page. once you've got it installed, you should use the mingw shell to start a new terminal, in which you should run the following commands to download dependencies and related software needed for building: bash pacman -syu git make patch mingw-w64-x86_64-{gcc,cmake,icu,jemalloc,zlib} --force (the --force is needed to work around a bug with the latest msys2 installer as of the time of writing.) then, exit the shell and launch the ""mingw-w64 win64"" shell. you can obtain the toolkit and get started with: ```bash clone the project git clone https://github.com/meta-toolkit/meta.git cd meta set up submodules git submodule update --init --recursive set up a build directory mkdir build cd build cp ../config.toml . configure and build the project cmake .. -g ""msys makefiles"" -dcmake_build_type=release make ``` you can now test the system by running the following command: bash ./unit-test --reporter=spec if everything passes, congratulations! meta seems to be working on your system. thomas wright tgw4@illinois.edu cs410 progress update the project chosen was: 2.1 meta toolkit - enhance available tutorials for installing and using the tool on different platforms. 1) which tasks have been completed? to ensure that nothing is left over from previous installations and make sure the tutorials will work starting from zero, multiple spare pcs were set up with ssd drives to allow quick, fresh installations of operating systems and the meta code. 3 pcs have thus been set up to allow working on them in parallel, so what while one is busy installing or compiling, work can be done on another. the latest versions of two popular linux distribution (centos 8.2.2004 and ubuntu 20.04 lts) and the latest version of windows 10 (october 2020 release) were downloaded, usb installation media created, and the oses installed. meta was successfully installed on both of the above linux versions after significant troubleshooting (see section #3 below). metapy and pytoml were successfully installed on centos. troubleshooting is still underway to try to get it working on ubuntu. detailed notes were taken on the installing and troubleshooting efforts (and the discovered workarounds) so far, which will be turned into html tutorials for the meta toolkit webpage. 2) which tasks are pending? the next task which is pending is to further troubleshoot and find a way to get metapy to install on ubuntu. there have been significant challenges to doing this, see part 3 below for details. another task that is pending is to try to installing meta and metapy on windows. with all of the problems discovered trying to get it working on the linux versions, it was not possible to get to the windows attempt yet, but hopefully in the next several days that will be possible. next, as mentioned in the project proposal, investigation will be done into whether meta and/or metapy can be installed on a chromebook. given all of the issues uncovered in just getting it to work on newer versions of linux where it had worked before, it is looking less likely to be able to get it working on a chromebook, but a good attempt will be made to see if its workable. then html versions of the installation notes will need to be created and placed on the project github site, and following that the installation instructions will be followed one more time from scratch to ensure they work correctly. finally, the final project writeup/documentation will need to be completed. 3) are you facing any challenges? yes, several challenges have risen causing significant challenges related to installing meta and metapy. meta/metapy don't seem to have been maintained recently. in the case of meta, i would estimate around 5 years, given that the existing tutorials refer to ubuntu version 14.04 lts and gcc version 4.8.5, which were released 6 and 5 years ago respectively. metapy seems to be more recently maintained, within the past couple of years. quite a few things have changed in those past several years that make it difficult to install meta and metapy. first, the source files for meta and metapy both download and compile versions of the unicode utility icu4c (version 58-2 for meta, 61-1 for metapy). icu4c is no longer hosted at the site given in the sourcecode (icu-project.org), the source code is now hosted on github instead. i needed to go through the error logs from the compiler to see where it was calling that, and then adjust the source files to point to the new github location. this affected meta on both centos and ubuntu, but only metapy on ubuntu. metapy for centos appears to use a pre-compiled version, but for ubuntu it wants to compile the source code to install it. i am still working on changing the source code to fix this (it is not as easy to work with the source code for metapy, as the pip installer tries to do it all in one operation, i'm working on how to break this into a download step and then a compile/installation step so that the source code can be modified in-between those two steps. this code repository change appears to have been a recent change (in the last month or two), as i used metapy on ubuntu 20.04 lts to do mp2.2 for the class, and it installed with no issues then, but won't install now on a fresh installation of ubuntu 20.04 lts. next, the meta source code includes xlocale.h. this was part of the glibc library, but was removed a few years ago, and is not included in current linux distributions. in troubleshooting this, it was determined that for centos, it needed to be pointed to /usr/include/bits/types/__locale_t.h instead, while for ubuntu, it should be redirected to /usr/include/locale.h. finally, meta's source code is not compatible with the gcc 8 (centos) and gcc 9 (ubuntu) versions that are part of the modern linux distributions. the way that operator overloading is handled changed between gcc 7 and 8, and since the meta sourcecode uses this, it will not compile. gcc 7 had to be installed and used to compile meta instead of the version 8 or 9 that came with the oses. this was easier done on ubuntu than on centos. on ubuntu, it was possible to point the package installer apt-get to use an archive site and install a gcc 7 package relatively easily. for centos, there did not seem to be any equivalent archive for the yum package installer used by that os. the source code for gcc 7 had to be downloaded and compiled from scratch to install it. given the enormous size and complexity of gcc, this took several hours to compile. hours spent so far: installing ssds and ram in pcs: 1 hour downloading install isos and creating install usb sticks for several oses: 1 hour installing oses: 1 hour installing meta: general installation testing: 1 hour installing and troubleshooting meta installation: icu4u repository change: 3 hours installing and troubleshooting meta installation: xlocale.h fix: 1 hour installing and troubleshooting meta installation: gcc version issues fix: 6 hours installing metapy/troubleshooting on ubuntu: 2 hours so far (ongoing) writing this summary report: 2 hours estimated time spent so far: 18 hours thomas wright tgw4@illinois.edu cs410 project documentaon and final report part 1 - documentaon 1. installaon instrucons - this project was quite different from most of the others. it was not about coding, but rather to improve the meta and metapy tutorials. therefore, there is no code to install. rather, the product of this project was to produce installaon instrucons for meta and metapy for various operang systems. these instrucons have been created in the form of github .md files, so they can be transferred to the meta and metapy github sites to replace or augment the tutorial instrucons already there. the locaon of these .md tutorial files are in the directory here: hps://github.com/tgw4uiuc/courseproject the files are meta_tutorial.md and metapy_tutorial.md. click on either of these files to open them and display the tutorial instrucons. 2. source code - this project doesn't have formal source code, per se. that was not the goal of this project, creang tutorial instrucons was the goal. thus, the deliverables are the .md files, which take the place of the 'code' deliverable. ""the documentaon is the code, and the code is the documentaon."" please note that this project was to improve the exisng tutorials, so much of the older tutorial informaon is sll there. for the purposes of the ""plagarism"" queson on part 6 of the grading rubric, i am only claiming the centos 8.2.2004, ubuntu 20.04 lts, chromebook and some notes in the general setup secons as my own for the meta instrucons, and the centos 8.2.2004, ubuntu 20.04 lts, chromebook and windows 10 instrucons in the metapy tutorial as my own. the rest of the documentaon is from the previous author(s) of the tutorials. 3. soware usage tutorial - there is a link to the usage video in the video_link.md file in the hps://github.com/tgw4uiuc/courseproject directory. click that file to see the link to the video. part 2 - project report project goal: the goal of this project was to improve the exisng tutorials for installing meta and metapy on various operang systems. the exisng tutorials were outdated and hadn't been updated in several years, and as a consequence, i found many obstacles that had to be overcome to install meta and metapy, as many changes had occurred since then that had prevented easy installaon. in most cases, those problems were overcome, and both meta and metapy were installed successfully. in addion, since recently produced chromebooks can now have a beta feature that allows them to use a linux shell, i wanted to invesgate the possibility of geng meta and metapy working on a chromebook. this was also achieved successfully. project results: meta was successfully installed on these oses: (all newer versions of oses already in the tutorial, or a whole new os in the case of the chromebooks): chromeos ubuntu 20.04 lts centos 8.2.2004 metapy was successfully installed on the above oses as well, and also confirmed that is it sll installable under win10, with some caveats (python versions 2.7 or 3.4-3.7). the only one that failed was installing meta on windows 10. i tried the msys2 method as described in the exisng tutorial, trying different versions of gcc/g++ and much debugging me, but could not get it to successfully compile. i also tried cygwin, as it is another linux-like environment similar to msys2, but i could not get it to install there either. i had already spent more than half a day trying to get it to work there, and had to give up on that part of the project, as there was no more me for further experimentaon there. overall, i would say the project was quite successful, and has provided working tutorials for several updated and new oses that will allow people to get meta successfully installed. i would have liked to do tutorials for even more os versions, but with all of the unexpected problems that were found and the troubleshoong me that was required to find workarounds for them, there was no me to do any others. as it was, just doing these took far more me than the required 20 hours for the project. problems encountered: there were several problems encountered during the project related to the age of the meta and metapy packages and the evoluon of newer os versions since the meta and metapy packages were last updated. those problems are as follows: 1. gcc/g++ incompability - the way that gcc/g++ handle operator overflow was changed between gcc/g++ versions 7 and 8. this causes problems for the meta source code, and it will not successfully compile on versions 8 and above. thus earlier versions of the compilers must be installed to successfully compile the code. 2. xlocale.h no longer supported. this .h file does not exist on many newer linux versions, and thus the meta code will error out when trying to compile as it looks for this file. the fix for this is to point xlocale.h to locale.h, which provides the funconality for meta to compile successfully. 3. the icu4c source repository has moved from icu-project.org to github.com/unicode-org. this causes both the meta and metapy code to fail because the make process can no longer download the required source file. the fix for this is to either download the file manually and copy it into the proper directory in the build files (which is what is done in the tutorials) or to edit the makefiles to point them to the new repository. 4. metapy is harder to install on python version 3.8 and higher, as .whl ('wheel') preprocessed code packages are available for python version 2.7 and 3.4 through 3.7, but not 3.8 and up. these 'wheels' make installaon easy, as they do not need to be compiled from scratch, just downloaded and installed. when installing on python 3.8 and higher, they need to be compiled from the source code, which runs into the icu4c repository problem noted above. suggesons for improvement of meta and metapy (and possible project ideas for future students): there are several things that would greatly improve the usability of meta and metapy, especially for new users. these ideas might make good project oportunies for future students to cs410, especially if they have experience with c++ and makefiles/cmake. these would be addressing the problems noted above. 1. update for modern versions of gcc/g++. update the code to fix the incompabilies with versions of the compiler ranging from version 8.0 and up. 2. switch the code from using xlocale.h to locale.h. from what i found researching xlocale vs. locale.h online, there is no funconal difference between them for meta's needs, but this should of course be confirmed further by the project team. 3. point the code/makefiles to the new icu4c source repository. change the references from the old icu-project.org repository to the new github.com/unicode-org repository. 4. for metapy, create new 'wheel' .whl packages for python 3.8 and up. this will greatly simplify installaon for new users. time spent: installing ssds and ram in test pcs: 1 hour downloading install isos and creang install usb scks for several oses: 1 hour installing oses: 1 hour installing meta: general installaon tesng: 1 hour installing and troubleshoong meta installaon: icu4u repository change: 3 hours installing and troubleshoong meta installaon: xlocale.h fix: 1 hour installing and troubleshoong meta installaon: gcc version issues fix: 6 hours installing metapy/troubleshoong on ubuntu: 3 hours installing metapy/troubleshoong on centos:  1/2  hour invesgang which chromebooks i had access to could support the beta linux mode, and seng that up: 1 hour installing and troubleshoong meta on the chromebook: 4.5 hours installing and troubleshoong metapy on the chromebook: 1 hour clean re-install of oses and verifying tutorials work: 5 hours wring .md tutorial files: 4 hours wring summary report: 2 hours wring this final report: 3 hours creang, processing and uploading soware usage video: 2 hours total me spent: 40 hours (at least, some of the above are fairly conservave esmates). thomas g wright tgw4@illinois.edu cs410 fall 2020 project proposal option 2: improving a system * 2.1 meta toolkit * enhance available tutorials for installing and using the tool on different platforms this project will cover improving (or creating from scratch if not currently existant) the installation/setup tutorials for meta-metapy on several different platforms. oses which will be considered in improving these tutorials include windows and multiple linux versions (ubuntu, redhat, amazon aws linux, and perhaps others as time allows) and hopefully chromeos if i can get it working (see next to last paragraph below). the current meta setup guide tutorials on meta-toolkit.org (or the meta-toolkit section on github) seem to have been done quite some time ago, judging by the fact that the latest ubuntu version listed is 14.04 and the current version is 20.04. the existing tutorials will be reviewed and tested to be sure that they still work, correcting and enhancing where needed. instructions for newer versions of software, such as ubuntu 20.04 will be added, as well as instructions for other linux distributions. also, there seems to be very little documentation for installing/setting up metapy. this project will add tutorials for that on several oses. these will start from the assumption of a fresh os install, unlike what instructions seem to exist online, which are very sparse and assume you have pip, git, etc. already installed on your computer. how to get to that stage seems to be a cause of frustration for several that have had problems. these tutorials would be set up to be a link off the tutorials section of the main page, in a section called something like ""metapy setup guide"". all of these tutorials will be written in html, and will aim to stay consistent with the style of the current page, which is nealy all text. some enhancements with screenshots may be added to clarify things where needed, such is currently being done in the ""visual setup guide for windows"" tutorial currently on the site. in addition to os types which already exist in the tutorials, i will try to see if it is possible to put metapy and/or meta on chromeos. online searches reveal that it is possible to put python and gcc on chromeos, i will experiment to see if that can be extended to include meta or metapy. this will be a whole new os where it hasn't been done before, which i feel will be a nice addition to the meta/metapy universe, especially as the popularity of chromebooks grows. regarding whether this fulfills the 20 hours per team member, i believe this will easily do that. this is a 1 person team, so it only needs to cover 20 hours total. to ensure that the results from the tutorials are correct and repeatable, i will be sure to use fresh os installs so that nothing that was already on an existing system from previous installs would cause erroneous results. in the case of writing a whole new tutorial, once it is complete, it will be repeated following the tutorial exactly on a new fresh install, this takes extra time, but i feel it is necessary to be sure the tutorial is accurate. i have a few old pcs that aren't being used for anything at the moment, so this way one can be re-imaged with a fresh os install in parallel while working with another one, so it will take some time to do that , but it won't be too excessive. by also trying to make it work on chromeos, i feel this will easily go over 20 hours total of work, as i expect that experiment to take quite a bit of time. time spent will be tracked, so that if the total time is under 20 hours, more oses/linux versions will be added to ensure well over 20 hours of time was put into the project. files for the cs410 course project: (see above file list) the software usage tutorial video is located here: (and a link is also in the video_link.md file) https://youtu.be/nbpwsqbnid0 the meta_tutorial.md and metapy_tutorial.md files are the main deliverables for this project, and can be viewed by clicking on them. the ""project final report and documentation.pdf"" file contains the final report as well as some suggested future fixes for meta and metapy, as well as some suggested meta and metapy improvements for following cs410 classes. finally, there are also the projectproposal.pdf and progressreport.pdf files that were submitted previously. video is located here: https://youtu.be/nbpwsqbnid0"	['metapy', 'experimental', 'python', 'bindings', 'meta', 'diff', 'author', 'tgws', 'note', 'regarding', 'attribution', 'created', 'os', 'specific', 'sections', 'easier', 'use', 'rest', 'previous', 'tutorial', 'authors', 'httpsgithubcommetatoolkitmetapyblobmasterreadmemd', 'project', 'provides', 'x', 'supported', 'toolkit', 'still', 'much', 'construction', 'goal', 'make', 'seamless', 'metas', 'components', 'within', 'application', 'eg', 'django', 'flask', 'web', 'app', 'made', 'possible', 'excellent', 'pybind', 'library', 'outline', 'generic', 'instructions', 'chromebook', 'ubuntu', 'lts', 'centos', 'windows', 'install', 'verisons', 'later', 'versions', 'require', 'compiling', 'source', 'code', 'setup', 'notes', 'easy', 'way', 'bash', 'ensure', 'pip', 'date', 'upgrade', 'work', 'linux', 'pretty', 'recent', 'version', 'sure', 'update', 'newer', 'binary', 'packagethis', 'save', 'lot', 'time', 'hard', 'course', 'need', 'installed', 'also', 'headers', 'well', 'look', 'pythondev', 'similar', 'package', 'system', 'beyond', 'youll', 'satisfy', 'requirements', 'building', 'repository', 'everything', 'get', 'started', 'youve', 'fetched', 'submodules', 'first', 'though', 'git', 'submodule', 'init', 'recursive', 'thats', 'done', 'able', 'build', 'like', 'mkdir', 'cd', 'cmake', 'dcmake_build_typerelease', 'force', 'happen', 'multiple', 'specifying', 'dmetapy_python_versionxy', 'invoking', 'module', 'written', 'metapyso', 'directory', 'recently', 'released', 'chromebooks', 'last', 'couple', 'years', 'december', 'option', 'run', 'beta', 'check', 'list', 'compatible', 'httpswwwchromiumorgchromiumoschromeossystemssupportinglinux', 'see', 'page', 'turn', 'mode', 'chomebook', 'working', 'steps', 'open', 'terminal', 'lists', 'sudo', 'aptget', 'pythonpip', 'comes', 'wiht', 'using', 'pythonorg', 'active', 'help', 'switching', 'httpslinuxconfigorgubuntupythonversionswitchmanager', 'sticking', 'lets', 'packages', 'available', 'apt', 'file', 'download', 'ls', 'filename', 'downloaded', 'metapysomethingtargz', 'tar', 'xvf', 'metapytargz', 'whatever', 'name', 'metapysomething', 'deps', 'icu', 'icuc_srctgz', 'httpsgithubcomunicodeorgicureleasestagrelease', 'copy', 'move', 'back', 'one', 'subdirectories', 'takeawhile', 'compiled', 'completed', 'quite', 'default', 'user', 'account', 'sudoers', 'group', 'httpslinuxizecomposthowtoaddusertosudoersincentos', 'command', 'prompt', 'window', 'type', 'proper', 'grab', 'mentioned', 'necessarily', 'latest', 'httpspypiorgprojectpip', 'modern', 'text', 'analysis', 'please', 'visit', 'information', 'tutorials', 'status', 'branch', 'master', 'develop', 'following', 'added', 'icuc', 'xlocaleh', 'info', 'general', 'editing', 'reordering', 'intro', 'documentation', 'citing', 'mac', 'arch', 'fedora', 'ewsengrit', 'uiucspecific', 'c', 'data', 'sciences', 'featuring', 'tokenization', 'including', 'deep', 'semantic', 'features', 'parse', 'trees', 'inverted', 'forward', 'indexes', 'compression', 'various', 'caching', 'strategies', 'collection', 'ranking', 'functions', 'searching', 'topic', 'models', 'classification', 'algorithms', 'graph', 'language', 'crf', 'implementation', 'postagging', 'shallow', 'parsing', 'wrappers', 'liblinear', 'libsvm', 'dataset', 'parsers', 'utf', 'support', 'languages', 'multithreaded', 'doxygen', 'found', 'walkthroughs', 'different', 'parts', 'homepage', 'used', 'research', 'would', 'greatly', 'appreciate', 'citation', 'acl', 'demo', 'paper', 'latex', 'inproceedingsmetatoolkit', 'massung', 'sean', 'geigle', 'chase', 'zhai', 'chengxiang', 'title', 'unified', 'retrieval', 'booktitle', 'proceedings', 'demonstrations', 'month', 'august', 'year', 'address', 'berlin', 'germany', 'publisher', 'association', 'computational', 'linguistics', 'pages', 'url', 'httpanthologyaclweborgp', 'rules', 'clean', 'tidy', 'doc', 'usual', 'youre', 'developingitll', 'detect', 'cmakeliststxt', 'changed', 'rebuild', 'makefiles', 'needs', 'compile', 'debug', 'replace', 'release', 'appropriate', 'moved', 'icuporjectorg', 'githubcomunicodeorgicu', 'requires', 'likely', 'manually', 'allow', 'successfully', 'updated', 'specifically', 'guide', 'process', 'final', 'step', 'github', 'direct', 'link', 'location', 'correct', 'metadepsicu', 'create', 'directories', 'dont', 'exist', 'yet', 'thing', 'may', 'cause', 'issues', 'distributions', 'uses', 'longer', 'included', 'many', 'localeh', 'instead', 'ln', 'usrincludelocaleh', 'usrlocalincludexlocaleh', 'hesitate', 'reach', 'forum', 'encounter', 'problems', 'getting', 'set', 'routinely', 'wide', 'variety', 'compilers', 'operating', 'systems', 'continuous', 'integration', 'setups', 'travisci', 'appveyor', 'fairly', 'certain', 'things', 'nearly', 'major', 'platforms', 'higher', 'required', 'success', 'tested', 'homebrew', 'line', 'tools', 'xcode', 'xcodeselect', 'commands', 'dependencies', 'brew', 'jemalloc', 'lzlib', 'clone', 'httpsgithubcommetatoolkitmetagit', 'cp', 'configtoml', 'configure', 'cxxclang', 'dicu_rootusrlocalopticuc', 'test', 'running', 'unittest', 'reporterspec', 'passes', 'congratulations', 'seems', 'built', 'gccg', 'gcc', 'g', 'next', 'needed', 'files', 'softwarepropertiescommon', 'libicudev', 'libjemallocdev', 'zlibgdev', 'want', 'remove', 'links', 'finished', 'usrbingcc', 'usrlocalbingcc', 'usrbing', 'usrlocalbing', 'quit', 'restart', 'since', 'place', 'right', 'pick', 'makefile', 'metabuild', 'directions', 'depend', 'cat', 'etcissue', 'based', 'proceed', 'guides', 'older', 'remain', 'reference', 'purposes', 'prerequisites', 'ready', 'dcmake_c_compilergcc', 'dcmake_cxx_compilerg', 'ubuntus', 'nonlts', 'desktop', 'offering', 'enough', 'software', 'repositories', 'without', 'trouble', 'add', 'ppa', 'start', 'might', 'take', 'addaptrepository', 'ppageorgeedisoncmakex', 'double', 'output', 'copyright', 'free', 'foundation', 'inc', 'copying', 'conditions', 'warranty', 'even', 'merchantability', 'fitness', 'particular', 'purpose', 'suite', 'maintained', 'kitware', 'kitwarecomcmake', 'uptodate', 'sister', 'relatively', 'easily', 'however', 'compiler', 'switch', 'order', 'natively', 'pythonsoftwareproperties', 'contains', 'ppaubuntutoolchainrtest', 'probably', 'wget', 'httpwwwcmakeorgfilesvcmakelinuxx_sh', 'sh', 'cmakelinuxx_sh', 'prefixusrlocal', 'installation', 'agree', 'license', 'say', 'n', 'subdirectory', 'print', 'usrlocalbincmake', 'cxx', 'flags', 'earlier', 'cxxg', 'cmake_c_compilergcc', 'cmake_cxx_compilerg', 'consistently', 'due', 'rolling', 'often', 'easiest', 'platform', 'pacman', 'sy', 'clang', 'libc', 'zlib', 'oldest', 'currently', 'writing', 'yum', 'dnf', 'given', 'already', 'gccc', 'jemallocdevel', 'zlibdevel', 'red', 'hat', 'inclusive', 'wont', 'properly', 'old', 'thus', 'related', 'libraries', 'manager', 'epelrelease', 'excludesubdir', 'ews', 'filesystem', 'habit', 'unbearably', 'slow', 'increasing', 'times', 'several', 'orders', 'magnitude', 'example', 'comparing', 'vs', 'gives', 'ms', 'machine', 'managed', 'engineering', 'uiuc', 'follow', 'engrit', 'kind', 'modules', 'provided', 'actually', 'mostly', 'straightforward', 'every', 'log', 'load', 'cxxwhich', 'ccwhich', 'mingww', 'toolchain', 'strongly', 'recommend', 'msys', 'makes', 'fetching', 'significantly', 'otherwise', 'tends', 'relative', 'mingw', 'find', 'confused', 'lost', 'refer', 'visual', 'includes', 'screenshots', 'updating', 'installer', 'linked', 'website', 'got', 'shell', 'new', 'syu', 'patch', 'mingwwx_gcccmakeicujemalloczlib', 'around', 'bug', 'exit', 'launch', 'win', 'obtain', 'thomas', 'wright', 'tgwillinoisedu', 'cs', 'progress', 'chosen', 'enhance', 'installing', 'tool', 'tasks', 'nothing', 'left', 'installations', 'starting', 'zero', 'spare', 'pcs', 'ssd', 'drives', 'quick', 'fresh', 'parallel', 'busy', 'another', 'two', 'popular', 'distribution', 'october', 'usb', 'media', 'oses', 'significant', 'troubleshooting', 'section', 'pytoml', 'underway', 'try', 'detailed', 'taken', 'efforts', 'discovered', 'workarounds', 'far', 'turned', 'html', 'webpage', 'pending', 'task', 'troubleshoot', 'challenges', 'part', 'details', 'trying', 'attempt', 'hopefully', 'days', 'proposal', 'investigation', 'whether', 'andor', 'uncovered', 'worked', 'looking', 'less', 'good', 'workable', 'placed', 'site', 'followed', 'scratch', 'correctly', 'finally', 'writeupdocumentation', 'facing', 'yes', 'risen', 'causing', 'metametapy', 'seem', 'case', 'estimate', 'existing', 'ago', 'respectively', 'past', 'difficult', 'unicode', 'utility', 'hosted', 'sourcecode', 'icuprojectorg', 'go', 'error', 'logs', 'calling', 'adjust', 'point', 'affected', 'appears', 'precompiled', 'wants', 'changing', 'fix', 'tries', 'operation', 'im', 'break', 'compileinstallation', 'modified', 'inbetween', 'change', 'mp', 'class', 'glibc', 'removed', 'current', 'determined', 'pointed', 'usrincludebitstypes__locale_th', 'redirected', 'operator', 'overloading', 'handled', 'came', 'archive', 'equivalent', 'enormous', 'size', 'complexity', 'took', 'hours', 'spent', 'ssds', 'ram', 'hour', 'downloading', 'isos', 'creating', 'sticks', 'testing', 'icuu', 'metapytroubleshooting', 'ongoing', 'summary', 'report', 'estimated', 'documentaon', 'installaon', 'instrucons', 'others', 'coding', 'rather', 'improve', 'therefore', 'product', 'produce', 'operang', 'form', 'md', 'transferred', 'sites', 'augment', 'locaon', 'hpsgithubcomtgwuiuccourseproject', 'meta_tutorialmd', 'metapy_tutorialmd', 'click', 'either', 'display', 'doesnt', 'formal', 'per', 'se', 'creang', 'deliverables', 'deliverable', 'exisng', 'informaon', 'sll', 'plagarism', 'queson', 'grading', 'rubric', 'claiming', 'secons', 'soware', 'usage', 'video', 'video_linkmd', 'outdated', 'hadnt', 'consequence', 'obstacles', 'overcome', 'changes', 'occurred', 'prevented', 'cases', 'addion', 'produced', 'feature', 'allows', 'wanted', 'invesgate', 'possibility', 'geng', 'achieved', 'results', 'whole', 'chromeos', 'confirmed', 'installable', 'caveats', 'failed', 'tried', 'method', 'described', 'debugging', 'could', 'cygwin', 'linuxlike', 'environment', 'half', 'day', 'give', 'experimentaon', 'overall', 'successful', 'people', 'liked', 'unexpected', 'troubleshoong', 'encountered', 'age', 'evoluon', 'follows', 'incompability', 'handle', 'overflow', 'causes', 'must', 'h', 'looks', 'funconality', 'githubcomunicodeorg', 'fail', 'edit', 'harder', 'whl', 'wheel', 'preprocessed', 'wheels', 'runs', 'problem', 'noted', 'suggesons', 'improvement', 'ideas', 'future', 'students', 'usability', 'especially', 'users', 'oportunies', 'experience', 'makefilescmake', 'addressing', 'incompabilies', 'ranging', 'researching', 'xlocale', 'online', 'funconal', 'difference', 'team', 'codemakefiles', 'references', 'simplify', 'scks', 'tesng', 'metapytroubleshoong', 'invesgang', 'access', 'seng', 'reinstall', 'verifying', 'wring', 'processing', 'uploading', 'total', 'least', 'conservave', 'esmates', 'fall', 'improving', 'cover', 'existant', 'installationsetup', 'considered', 'include', 'redhat', 'amazon', 'aws', 'perhaps', 'paragraph', 'metatoolkitorg', 'metatoolkit', 'judging', 'fact', 'listed', 'reviewed', 'correcting', 'enhancing', 'little', 'installingsetting', 'assumption', 'unlike', 'sparse', 'assume', 'etc', 'computer', 'stage', 'frustration', 'main', 'called', 'something', 'aim', 'stay', 'consistent', 'style', 'nealy', 'enhancements', 'clarify', 'addition', 'types', 'put', 'searches', 'reveal', 'experiment', 'extended', 'hasnt', 'feel', 'nice', 'universe', 'popularity', 'grows', 'fulfills', 'member', 'believe', 'person', 'repeatable', 'installs', 'erroneous', 'complete', 'repeated', 'exactly', 'takes', 'extra', 'necessary', 'accurate', 'arent', 'anything', 'moment', 'reimaged', 'excessive', 'expect', 'bit', 'tracked', 'oseslinux', 'located', 'httpsyoutubenbpwsqbnid', 'viewed', 'clicking', 'documentationpdf', 'suggested', 'fixes', 'improvements', 'classes', 'projectproposalpdf', 'progressreportpdf', 'submitted', 'previously']
https://github.com/theRocket/CourseProject	"arxiv:1607.01759v3 [cs.cl] 9 aug 2016 bag of tricks for efficient text classification armand joulin edouard grave piotr bojanowski tomas mikolov facebook ai research {ajoulin,egrave,bojanowski,tmikolov}@fb.com abstract this paper explores a simple and efficient baseline for text classification. our ex- periments show that our fast text classi- fier fasttext is often on par with deep learning classifiers in terms of accuracy, and many orders of magnitude faster for training and evaluation. we can train fasttext on more than one billion words in less than ten minutes using a standard multicore cpu, and classify half a million sentences among 312k classes in less than a minute. 1 introduction text classification is an important task in natural language processing with many applications, such as web search, information retrieval, ranking and document classification (deerwester et al., 1990; pang and lee, 2008). recently, models based on neural networks have become increasingly popular (kim, 2014; zhang and lecun, 2015; conneau et al., 2016). while these models achieve very good performance in practice, they tend to be relatively slow both at train and test time, limiting their use on very large datasets. meanwhile, linear classifiers are of- ten considered as strong baselines for text classification problems (joachims, 1998; mccallum and nigam, 1998; fan et al., 2008). despite their simplicity, they often obtain state- of-the-art performances if the right features are used (wang and manning, 2012). they also have the potential to scale to very large cor- pus (agarwal et al., 2014). in this work, we explore ways to scale these baselines to very large corpus with a large output space, in the context of text classification. inspired by the recent work in efficient word representation learning (mikolov et al., 2013; levy et al., 2015), we show that linear models with a rank constraint and a fast loss approximation can train on a billion words within ten minutes, while achieving perfor- mance on par with the state-of-the-art. we evalu- ate the quality of our approach fasttext1 on two different tasks, namely tag prediction and sentiment analysis. 2 model architecture a simple and efficient baseline for sentence classification is to represent sentences as bag of words (bow) and train a linear classifier, e.g., a logistic regression or an svm (joachims, 1998; fan et al., 2008). however, linear classifiers do not share parameters among features and classes. this possibly limits their generalization in the context of large output space where some classes have very few examples. common solutions to this problem are to factorize the linear clas- sifier into low rank matrices (schutze, 1992; mikolov et al., 2013) or to use multilayer neural networks (collobert and weston, 2008; zhang et al., 2015). figure 1 shows a simple linear model with rank constraint. the first weight matrix a is a look-up table over the words. the word representations are then averaged into a text representation, which is in turn fed to a linear classifier. the text representa- 1https://github.com/facebookresearch/fasttext x1 x2 . . . xn-1 xn hidden output figure 1: model architecture of fasttext for a sentence with n ngram features x1, . . . , xn. the features are embedded and averaged to form the hidden variable. tion is an hidden variable which can be potentially be reused. this architecture is similar to the cbow model of mikolov et al. (2013), where the middle word is replaced by a label. we use the softmax function f to compute the probability distribution over the predefined classes. for a set of n doc- uments, this leads to minimizing the negative log- likelihood over the classes: - 1 n n  n=1 yn log(f(baxn)), where xn is the normalized bag of features of the n- th document, yn the label, a and b the weight matri- ces. this model is trained asynchronously on mul- tiple cpus using stochastic gradient descent and a linearly decaying learning rate. 2.1 hierarchical softmax when the number of classes is large, computing the linear classifier is computationally expensive. more precisely, the computational complexity is o(kh) where k is the number of classes and h the di- mension of the text representation. in order to im- prove our running time, we use a hierarchical soft- max (goodman, 2001) based on the huffman cod- ing tree (mikolov et al., 2013). during training, the computational complexity drops to o(h log2(k)). the hierarchical softmax is also advantageous at test time when searching for the most likely class. each node is associated with a probability that is the probability of the path from the root to that node. if the node is at depth l + 1 with parents n1, . . . , nl, its probability is p(nl+1) = l i=1 p(ni). this means that the probability of a node is always lower than the one of its parent. exploring the tree with a depth first search and tracking the maximum probability among the leaves allows us to discard any branch associated with a small probability. in practice, we observe a reduction of the complexity to o(h log2(k)) at test time. this approach is fur- ther extended to compute the t-top targets at the cost of o(log(t)), using a binary heap. 2.2 n-gram features bag of words is invariant to word order but taking explicitly this order into account is often computa- tionally very expensive. instead, we use a bag of n-grams as additional features to capture some par- tial information about the local word order. this is very efficient in practice while achieving compa- rable results to methods that explicitly use the or- der (wang and manning, 2012). we maintain a fast and memory efficient mapping of the n-grams by using the hashing trick (weinberger et al., 2009) with the same hash- ing function as in mikolov et al. (2011) and 10m bins if we only used bigrams, and 100m otherwise. 3 experiments we evaluate fasttext on two different tasks. first, we compare it to existing text classifers on the problem of sentiment analysis. then, we evaluate its capacity to scale to large output space on a tag prediction dataset. note that our model could be im- plemented with the vowpal wabbit library,2 but we observe in practice, that our tailored implementation is at least 2-5x faster. 3.1 sentiment analysis datasets and baselines. we employ the same 8 datasets and evaluation protocol of zhang et al. (2015). we report the n-grams and tfidf baselines from zhang et al. (2015), as well as the character level convolutional model (char-cnn) of zhang and lecun (2015), the character based convolution recurrent net- work (char-crnn) of (xiao and cho, 2016) and the very deep convolutional network (vdcnn) of conneau et al. (2016). we also compare 2using the options --nn, --ngrams and --log multi model ag sogou dbp yelp p. yelp f. yah. a. amz. f. amz. p. bow (zhang et al., 2015) 88.8 92.9 96.6 92.2 58.0 68.9 54.6 90.4 ngrams (zhang et al., 2015) 92.0 97.1 98.6 95.6 56.3 68.5 54.3 92.0 ngrams tfidf (zhang et al., 2015) 92.4 97.2 98.7 95.4 54.8 68.5 52.4 91.5 char-cnn (zhang and lecun, 2015) 87.2 95.1 98.3 94.7 62.0 71.2 59.5 94.5 char-crnn (xiao and cho, 2016) 91.4 95.2 98.6 94.5 61.8 71.7 59.2 94.1 vdcnn (conneau et al., 2016) 91.3 96.8 98.7 95.7 64.7 73.4 63.0 95.7 fasttext, h = 10 91.5 93.9 98.1 93.8 60.4 72.0 55.8 91.2 fasttext, h = 10, bigram 92.5 96.8 98.6 95.7 63.9 72.3 60.2 94.6 table 1: test accuracy [%] on sentiment datasets. fasttext has been run with the same parameters for all the datasets. it has 10 hidden units and we evaluate it with and without bigrams. for char-cnn, we show the best reported numbers without data augmentation. zhang and lecun (2015) conneau et al. (2016) fasttext small char-cnn big char-cnn depth=9 depth=17 depth=29 h = 10, bigram ag 1h 3h 24m 37m 51m 1s sogou - - 25m 41m 56m 7s dbpedia 2h 5h 27m 44m 1h 2s yelp p. - - 28m 43m 1h09 3s yelp f. - - 29m 45m 1h12 4s yah. a. 8h 1d 1h 1h33 2h 5s amz. f. 2d 5d 2h45 4h20 7h 9s amz. p. 2d 5d 2h45 4h25 7h 10s table 2: training time for a single epoch on sentiment analysis datasets compared to char-cnn and vdcnn. to tang et al. (2015) following their evaluation protocol. we report their main baselines as well as their two approaches based on recurrent networks (conv-grnn and lstm-grnn). results. we present the results in figure 1. we use 10 hidden units and run fasttext for 5 epochs with a learning rate selected on a valida- tion set from {0.05, 0.1, 0.25, 0.5}. on this task, adding bigram information improves the perfor- mance by 1-4%. overall our accuracy is slightly better than char-cnn and char-crnn and, a bit worse than vdcnn. note that we can increase the accuracy slightly by using more n-grams, for example with trigrams, the performance on sogou goes up to 97.1%. finally, figure 3 shows that our method is competitive with the methods pre- sented in tang et al. (2015). we tune the hyper- parameters on the validation set and observe that using n-grams up to 5 leads to the best perfor- mance. unlike tang et al. (2015), fasttext does not use pre-trained word embeddings, which can be explained the 1% difference in accuracy. model yelp'13 yelp'14 yelp'15 imdb svm+tf 59.8 61.8 62.4 40.5 cnn 59.7 61.0 61.5 37.5 conv-grnn 63.7 65.5 66.0 42.5 lstm-grnn 65.1 67.1 67.6 45.3 fasttext 64.2 66.2 66.6 45.2 table 3: comparision with tang et al. (2015). the hyper- parameters are chosen on the validation set. we report the test accuracy. training time. both char-cnn and vdcnn are trained on a nvidia tesla k40 gpu, while our models are trained on a cpu using 20 threads. ta- ble 2 shows that methods using convolutions are sev- eral orders of magnitude slower than fasttext. while it is possible to have a 10x speed up for char-cnn by using more recent cuda implemen- tations of convolutions, fasttext takes less than a minute to train on these datasets. the grnns method of tang et al. (2015) takes around 12 hours per epoch on cpu with a single thread. our speed- input prediction tags taiyoucon 2011 digitals: individuals digital pho- tos from the anime convention taiyoucon 2011 in mesa, arizona. if you know the model and/or the character, please comment. #cosplay #24mm #anime #animeconvention #arizona #canon #con #convention #cos #cosplay #costume #mesa #play #taiyou #taiyoucon 2012 twin cities pride 2012 twin cities pride pa- rade #minneapolis #2012twincitiesprideparade #min- neapolis #mn #usa beagle enjoys the snowfall #snow #2007 #beagle #hillsboro #january #maddison #maddy #oregon #snow christmas #christmas #cameraphone #mobile euclid avenue #newyorkcity #cleveland #euclidavenue table 4: examples from the validation set of yfcc100m dataset obtained with fasttext with 200 hidden units and bigrams. we show a few correct and incorrect tag predictions. up compared to neural network based methods in- creases with the size of the dataset, going up to at least a 15,000x speed-up. 3.2 tag prediction dataset and baselines. to test scalability of our approach, further evaluation is carried on the yfcc100m dataset (thomee et al., 2016) which consists of almost 100m images with cap- tions, titles and tags. we focus on predicting the tags according to the title and caption (we do not use the images). we remove the words and tags occurring less than 100 times and split the data into a train, validation and test set. the train set contains 91,188,648 examples (1.5b tokens). the validation has 930,497 examples and the test set 543,424. the vocabulary size is 297,141 and there are 312,116 unique tags. we will release a script that recreates this dataset so that our numbers could be reproduced. we report precision at 1. we consider a frequency-based baseline which predicts the most frequent tag. we also com- pare with tagspace (weston et al., 2014), which is a tag prediction model similar to ours, but based on the wsabie model of weston et al. (2011). while the tagspace model is described using convolutions, we consider the linear version, which achieves com- parable performance but is much faster. results and training time. table 5 presents a comparison of fasttext and the baselines. we run fasttext for 5 epochs and compare it to tagspace for two sizes of the hidden layer, i.e., 50 model prec@1 running time train test freq. baseline 2.2 - - tagspace, h = 50 30.1 3h8 6h tagspace, h = 200 35.6 5h32 15h fasttext, h = 50 31.2 6m40 48s fasttext, h = 50, bigram 36.7 7m47 50s fasttext, h = 200 41.1 10m34 1m29 fasttext, h = 200, bigram 46.1 13m38 1m37 table 5: prec@1 on the test set for tag prediction on yfcc100m. we also report the training time and test time. test time is reported for a single thread, while training uses 20 threads for both models. and 200. both models achieve a similar perfor- mance with a small hidden layer, but adding bi- grams gives us a significant boost in accuracy. at test time, tagspace needs to compute the scores for all the classes which makes it relatively slow, while our fast inference gives a significant speed-up when the number of classes is large (more than 300k here). overall, we are more than an order of mag- nitude faster to obtain model with a better quality. the speedup of the test phase is even more signifi- cant (a 600x speedup). table 4 shows some quali- tative examples. 4 discussion and conclusion in this work, we propose a simple baseline method for text classification. unlike unsupervisedly trained word vectors from word2vec, our word features can be averaged together to form good sentence repre- sentations. in several tasks, fasttext obtains per- formance on par with recently proposed methods in- spired by deep learning, while being much faster. although deep neural networks have in theory much higher representational power than shallow models, it is not clear if simple text classification problems such as sentiment analysis are the right ones to eval- uate them. we will publish our code so that the research community can easily build on top of our work. acknowledgement. we thank gabriel synnaeve, herv'e g'egou, jason weston and l'eon bottou for their help and comments. we also thank alexis con- neau, duyu tang and zichao zhang for providing us with information about their methods. references [agarwal et al.2014] alekh agarwal, olivier chapelle, miroslav dud'ik, and john langford. 2014. a reliable effective terascale linear learning system. jmlr. [collobert and weston2008] ronan collobert and jason weston. 2008. a unified architecture for natural lan- guage processing: deep neural networks with multi- task learning. in icml. [conneau et al.2016] alexis conneau, holger schwenk, lo""ic barrault, and yann lecun. 2016. very deep con- volutional networks for natural language processing. arxiv preprint arxiv:1606.01781. [deerwester et al.1990] scott deerwester, susan t du- mais, george w furnas, thomas k landauer, and richard harshman. 1990. indexing by latent semantic analysis. journal of the american society for informa- tion science. [fan et al.2008] rong-en fan, kai-wei chang, cho-jui hsieh, xiang-rui wang, and chih-jen lin. 2008. li- blinear: a library for large linear classification. jmlr. [goodman2001] joshua goodman. 2001. classes for fast maximum entropy training. in icassp. [joachims1998] thorsten joachims. 1998. text catego- rization with support vector machines: learning with many relevant features. springer. [kim2014] yoon kim. 2014. convolutional neural net- works for sentence classification. in emnlp. [levy et al.2015] omer levy, yoav goldberg, and ido dagan. 2015. improving distributional similarity with lessons learned from word embeddings. tacl. [mccallum and nigam1998] andrew mccallum and ka- mal nigam. 1998. a comparison of event models for naive bayes text classification. in aaai workshop on learning for text categorization. [mikolov et al.2011] tom'avs mikolov, anoop deoras, daniel povey, luk'avs burget, and jan vcernock`y. 2011. strategies for training large scale neural network lan- guage models. in workshop on automatic speech recognition and understanding. ieee. [mikolov et al.2013] tomas mikolov, kai chen, greg corrado, and jeffrey dean. 2013. efficient estimation of word representations in vector space. arxiv preprint arxiv:1301.3781. [pang and lee2008] bo pang and lillian lee. 2008. opinion mining and sentiment analysis. foundations and trends in information retrieval. [schutze1992] hinrich schutze. 1992. dimensions of meaning. in supercomputing. [tang et al.2015] duyu tang, bing qin, and ting liu. 2015. document modeling with gated recurrent neural network for sentiment classification. in emnlp. [thomee et al.2016] bart thomee, david a shamma, gerald friedland, benjamin elizalde, karl ni, dou- glas poland, damian borth, and li-jia li. 2016. yfcc100m: the new data in multimedia research. vol- ume 59, pages 64-73. acm. [wang and manning2012] sida wang and christopher d manning. 2012. baselines and bigrams: simple, good sentiment and topic classification. in acl. [weinberger et al.2009] kilian weinberger, anirban das- gupta, john langford, alex smola, and josh atten- berg. 2009. feature hashing for large scale multitask learning. in icml. [weston et al.2011] jason weston, samy bengio, and nicolas usunier. 2011. wsabie: scaling up to large vocabulary image annotation. in ijcai. [weston et al.2014] jason weston, sumit chopra, and keith adams. 2014. #tagspace: semantic embed- dings from hashtags. in emnlp. [xiao and cho2016] yijun xiao and kyunghyun cho. 2016. efficient character-level document classification by combining convolution and recurrent layers. arxiv preprint arxiv:1602.00367. [zhang and lecun2015] xiang zhang and yann lecun. 2015. text understanding from scratch. arxiv preprint arxiv:1502.01710. [zhang et al.2015] xiang zhang, junbo zhao, and yann lecun. 2015. character-level convolutional networks for text classification. in nips. cs 410 final project gluon nlp with mxnet on aws sagemaker training for yelp sentiment analysis text information systems fall 2020 ryan rickerts (ryanjr3) https://github.com/therocket/courseproject cs 410 final project uiuc mcs-ds 1 cs 410 final project gluon nlp with mxnet on aws sagemaker yelp sentiment analysis motivation state-of-the-art deep learning models in natural language processing (nlp) are fascinating to read about and try to understand for a graduate-level computer science student. it is also possible for a hobbyist or student to obtain pre-trained models from these research breakthroughs and perform inference using the meager hardware at their disposal while working and studying from home (i.e. no access to lab clusters at an institution). perhaps a deeper and more satisfying approach for investigating this multi-layered architecture with broad areas of application is to train a dataset by one's self, much like raising your own puppy to learn preferred tricks. however, time and compute resources can be an intimidating constraint in these compute-intensive algorithms. for this project, i aimed to find a relatively cutting edge approach in nlp where the training can be replicated by a hobbyist developer. the gluon project aims to meet this need. according to this blog post:  symptom: natural language processing papers are difficult to reproduce. the quality of open source implementations available on github varies a lot, and maintainers can stop supporting the projects.  gluonnlp prescription: reproduction of latest research results. frequent updates of the reproduction code, which comes with training scripts, hyper-parameters, runtime logs etc. 1 a broad description from the gluonnlp website is as follows: https://medium.com/apache-mxnet/gluonnlp-deep-learning-toolkit-for-natural-language- 1 processing-98e684131c8a cs 410 final project uiuc mcs-ds 2 gluonnlp provides implementations of the state-of-the-art (sota) deep learning models in nlp, and build blocks for text data pipelines and models. it is designed for engineers, researchers, and students to fast prototype research ideas and products based on these models. 2 from their model zoo, we selected the text classification example, which trains the fasttext classification model on the yelp review dataset. this is a binary classification dataset (positive vs. negative sentiment), and we aim to replicate their validation accuracy score of 94% in a reasonable time frame and cost. for optimum training times, we turned to nvidia tesla v100 gpus available on amazon web services (or aws) sagemaker instances. these are available on- demand and can be powered up just for training times to keep costs at a minimum. we investigate adapting the fasttext scripts provided by the gluon project to the aws environment, such as loading required jupyter kernels and dependent libraries for this algorithm, reading and writing data from s3 buckets, and of course keeping compute regions and permissions (or roles) in good order. https://nlp.gluon.ai/#about-gluonnlp 2 cs 410 final project uiuc mcs-ds 3 fast-text word n-gram this model is a slight variation of the one published by the facebook ai research team in 2016 in a paper called ""bag of tricks for efficient text classification"" by armand joulin, edouard grave, piotr bojanowski, and tomas mikolov. the aim of this approach, which they call fasttext or a ""library for efficient text classification and representation learning,"" is also to increase training speed over the dominant deep learning algorithms of the day. the abstract states: our experiments show that our fast text classifier fasttext is often on par with deep learning classifiers in terms of accuracy, and many orders of magnitude faster for training and evaluation. we can train fasttext on more than one billion words in less than ten minutes using a standard multicore cpu, and classify half a million sentences among ~312k classes in less than a minute. 3 the gluon-provided code used in this project, found at text_classification/ fasttext_word_ngram.py in the repo, does not reference any code from the fasttext project. it uses only gluonnlp and mxnet python libraries, so it appears to be a complete rewrite of the approach. it is modified here to meet the requirements of running on aws infrastructure, which we cover in the next section, and becomes text_classification/fasttext_word_ngram_aws.py in the github repo. apache mxnet is an open-source deep learning framework that is well supported on aws and is rivaled by tensorflow and pytorch in popularity and performance on nlp. the advantage of mxnet (short for mix net) is the broad language support of python, r, c++, julia, and scala. it also scales well: ""another advantage is that the models built using mxnet are portable such that they can fit in small amounts of memory. so, once your model is trained and tested, it can be easily deployed to mobile devices or connected systems. mxnets are scalable to be https://arxiv.org/abs/1607.01759 3 cs 410 final project uiuc mcs-ds 4 used on multiple machines and gpu simultaneously. this is why amazon has chosen this framework for its deep learning web services."" 4 in this code, the gluon authors create two classes: * a meanpoolinglayer -- a block for mean pooling of encoder features -- which takes a gluon.hybridblock as a parameter. * a fasttextclassificationmodel--the trained embeddings layer--which takes a hybridblock as a parameter. the rest of the logic centers around argument parsing to the main function, the creation of n-grams (defaults to 1 and recommended <=2 for large datasets), data loading, preprocessing, labeling, and evaluating accuracy of the training against a test dataset. scripts to fetch the the training and test datasets from google drive are hosted at fasttext's github repo , but these proved problematic given the response time of 5 the downloads. i manually fetched the yelp review polarity set only, then modified the code to normalize the text. this modified bash script is at text_classification/ data_fetch.sh in the project repo, and the csv files are placed in the data/ sub- directory. once this was prepared, we can start running the python script locally with the recommended parameters as follows: python fasttext_word_ngram.py --input data/yelp_review_polarity.train \ --output data/yelp_review_polarity.gluon \ --validation data/yelp_review_polarity.test \ --ngrams 1 --epochs 10 --lr 0.1 --emsize 100 this set of parameters is notably missing the '--gpu=0' flag for the local run only. this is because my laptop, a 2019 macbook pro with a 6-core intel i7 cpu, has a amd radeon pro 5300m graphics card that does not implement cuda architecture. this job will run on the cpu instead, and while threading does not appear to be implemented, according to mxnet documentation: https://analyticsindiamag.com/mxnet-tutorial-complete-guide-with-hands-on-implementation-of-deep-learning- 4 framework/ https://github.com/facebookresearch/fasttext/blob/master/classification-example.sh 5 cs 410 final project uiuc mcs-ds 5 ""for a cpu, mxnet will allocate data on main memory, and try to use all cpu cores as possible, even if there is more than one cpu socket."" 6 the activity monitor on the laptop shows the cpu being pegged at 100% and no use of the gpu: with 35000 batches configured to run on 464402 vocabulary words and 560000 sentences, the first attempt never even completed a single epoch. i quit the job after 8 hours of processing time and only 17000 batches completed. so now we move this workload to the gpus hosted on the cloud! aws sagemaker and nvidia tesla v100 gpus i implement this training job using high-end p3 aws sagemaker instances. 7 according to the table of instance sizes listed at the bottom of the above linked page, the cheapest instance offered - p3.2xlarge - provides one tesla v100 gpu with 16gb of gpu memory for $3.07/hr on demand. a helpful reference were these published benchmarks of nvidia gpus provided in tensorflops, which are units of floating-point arithmetic performance aimed at nvidia gpu hardware called tensor cores: ""a new, specialized tensor core unit was introduced with ""volta"" generation gpus. it combines a multiply of two fp16 units (into a full precision product) with a fp32 accumulate operation--the exact operations used in deep learning training https://mxnet.apache.org/versions/1.7.0/api/python/docs/tutorials/getting-started/crash-course/6- 6 use_gpus.html https://aws.amazon.com/ec2/instance-types/p3/ 7 cs 410 final project uiuc mcs-ds 6 computation. nvidia is now measuring gpus with tensor cores by a new deep learning performance metric: a new unit called tensortflops."" 8 according to that metric, the tesla v100 gpu rates around 112-125 tensortflops (exact figure depending on the use of pci-express or sxm2 sku interfaces). for comparison, the maximum known deep learning performance at any precision of the tesla k80 is 5.6 tflops for fp32. this gpu is provided on the p2 sagemaker instances, and for 1 gpu on the p2.xlarge instance size, the cost is $0.90/hr. if we can attain a 20x performance increase on our training job for approx. 4x compute resource cost, that seems like a great win! the clock time used by the p3.2xlarge instance and costs incurred for several training runs is discussed in the results sub-section below. data workflow the first step on aws services is to select a region for all our work, in this case us east (ohio) or us-east-2. this is important for several reasons: one, the data transferred between amazon s3 buckets and amazon ec2 instances in the same region and account is relatively straightforward and free, and our training data sizes are significant (where i live in a remote area, it took 30 minutes to upload due to low bandwidth). two, the cost of the p3 instances (also significant) are determined by region, and we want to accurately estimate our costs for this workload to avoid a surprise bill. furthermore, i had to request access to these highly specialized machines on my account via a support ticket, and their staff response time was not immediate. on the first attempt, they enabled a different region than i had uploaded the training data, so i had to sync it across to another s3 bucket, now called sagemaker-cs410-finalproj and pictured below. sagemaker has an s3 uploader library available for outputting the model parameters (a local file save is first required first) and returning the training results --net.params-- to the s3 bucket under a yelp_sentiment_polarity.gluon directory, as pictured below. these parameters will be needed for later inference use cases outside this jupyternotebook instance, so they must offloaded for access. https://www.microway.com/knowledge-center-articles/comparison-of-nvidia-geforce-gpus-and-nvidia-tesla-gpus/ 8 cs 410 final project uiuc mcs-ds 7 def save_model(net, output_file): file_name = ""net.params"" # local version net.save_parameters(file_name) s3uploader.upload(file_name,output_file) since we established this bucket in the same region, the s3 uploader utility only requires the bucket name to perform this work. that variable was configured in the first jupyternotebook cell, with: bucket = 'sagemaker-cs410-finalproj' although you can also use a default bucket for the session, which is initialized like this: bucket = session().default_bucket() for streaming lines from the data in s3 to the data parsing method, we used a library called smart_open which simulates reading in data from a local file in an 9 iterable function such as a for-in loop, like: for line in open(filename): tokens = line.split(',', 1) labels.append(tokens[0].strip()) data.append(tokens[1].strip()) return labels, data https://pypi.org/project/smart-open/ 9 cs 410 final project uiuc mcs-ds 8 this proved very effective and the data was parsed quickly into labels and normalized text data for the training run. training results the one tesla v100 gpu performing text classification on our p3.2xlarge instance exceeded expectations and churned out training and test results for 10 epochs in under 20 mins. furthermore, the same accuracy of 94% was achieved as mentioned on the gluon page where we sourced this code. sgd performed slightly better than adam as an optimizer, and this is discussed in the further work section below. jupyter notebook run 1 with `adam` as optimizer, 10 epochs * highest test accuracy: 0.9401578947368421 (epoch 8) * final test accuracy: 0.939921052631579, test loss: 0.17803387705344548 (epoch 10) jupyter notebook run 2 with `sgd` as optimizer, 10 epochs * highest test accuracy: 0.9403157894736842 (epoch 8) * final test accuracy: 0.9400526315789474, test loss: 0.17815197125596924 (epoch 10) jupyter notebook run 3 with `sgd` as optimizer, 25 epochs * highest test accuracy: 0.9403157894736842 (epoch 8) * final test accuracy: 0.9397105263157894, test loss: 0.17758843273002864 (epoch 25) * note, the accuracy above was reached at epoch 18 and remained stable. cs 410 final project uiuc mcs-ds 9 to reiterate, my macbook pro cpu (ctx=cpu(0)) never completed a single epoch after 8 hours of run time, and the v100 gpu (ctx=gpu(0)) finished one epoch in less than 2 minutes! the entire job run of 10 epochs required only 17 minutes total, which is very satisfying. the costs incurred for several hours of experimenting with the aws sagemaker jupyternotebook environment, plus the three training runs above (and a few failed ones when parameter output to file was not configured correctly) remained under $10. so we were able to capture reliable and conclusive training work at the expected cost of around $3/hr! the cost explorer returns this data analysis by service typically the next day. importantly, i shut off my p3 ec2 instance whenever i was not using it, and i deleted other experimental instances, such as p2, when i moved onto another solution. not performing this cleanup task is a painful way to discover an exorbitant bill from aws at the end of the month! cs 410 final project uiuc mcs-ds 10 further work 1) the gluon team notes that they simplified the model somewhat for training speed as follows: ""we have added dropout to the final layer, and the optimizer is changed from 'sgd' to 'adam' these are made for demo purposes and we can get very good numbers with original settings too, but a complete async sgd with batch size = 1, might be very slow for training using a gpu."" 10 i was able to pass 'sgd' (or stochastic gradient descent) as an optimizer parameter and get slightly better testing accuracy over 'adam' (0.94032 vs. .94016) with no noticeable decrease in training speed. i did not remove the dropout, increase the size of n-grams, nor change the batch size, so these could be restored to the original fasttext algorithm for more benchmarking on this particular gpu instance. 2) rather than firing up jupyterlab in our p3 instance and copy/pasting in the custom algorithm for our training job, amazon sagemaker can interact with a docker container based on a pre-built image. this would be a better practice for continued use of this approach, since it can easily be deployed into different regions and scaled up or down on different ec2 instances for more or less gpu power. 11 this workflow is covered in more detail here, which was also an early inspiration for this project (although they use gluoncv): deploying custom models built with gluon and apache mxnet on amazon sagemaker ""when you build models with the apache mxnet deep learning framework, you can take advantage of the expansive model zoo provided by gluoncv to quickly train state-of-the-art computer vision algorithms for image and video processing. a typical development environment for training consists of a jupyter notebook hosted on a https://nlp.gluon.ai/model_zoo/text_classification/index.html 10 https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo.html 11 cs 410 final project uiuc mcs-ds 11 compute instance configured by the operating data scientist. to make sure this environment is replicated during use in production, the environment is wrapped inside a docker container, which is launched and scaled according to the expected load."" 12 3) elastic inference mxnet on amazon sagemaker has support for elastic inference, which allows for inference acceleration to a hosted endpoint for a fraction of the cost of using a full gpu instance. in order to attach an elastic inference accelerator to your endpoint provide the accelerator type to accelerator_type to your deploy call. predictor = mxnet_estimator.deploy(instance_type='ml.m4.xlarge', initial_instance_count=1, accelerator_type='ml.eia1.medium') i felt great enjoyment in this implementing this project and learned a lot about nlp using aws sagemaker gpus. i look forward to experimenting more with gluon and mxnet to obtain rapid training times on state-of-the-art deep learning algorithms. https://aws.amazon.com/blogs/machine-learning/deploying-custom-models-built-with-gluon-and-apache- 12 mxnet-on-amazon-sagemaker/ cs 410 final project uiuc mcs-ds 12 training fasttext ""bag of tricks"" using gluon & mxnet on aws gpus (ryanjr3) cs 410 - text information systems (mcs-ds at uiuc) final project report: gluon nlp with mxnet on aws sagemaker (pdf) aws services presentation (youtube) the project formerly known as bert & ernie (benchmarking on google cloud tpus): please see the october readme commit for the original project proposal. training times and cloud compute costs for this model were discovered to be too prohibitive for our project timeline and resources. gluon for nlp and mxnet the aim of my project is to become better acquainted with the gluon api for natural language processing (nlp). gluonnlp provides implementations of the state-of-the-art (sota) deep learning models in nlp, and build blocks for text data pipelines and models. it is designed for engineers, researchers, and students to fast prototype research ideas and products based on these models. for example, it can easily provide the cosine similarity of two word vectors with the following simple python function, cos_similarity(): ``` import mxnet as mx import gluonnlp as nlp glove = nlp.embedding.create('glove', source='glove.6b.50d') def cos_similarity(embedding, word1, word2): vec1, vec2 = embedding[word1], embedding[word2] return mx.nd.dot(vec1, vec2) / (vec1.norm() * vec2.norm()) print('similarity between ""baby"" and ""infant"": ', cos_similarity(glove, 'baby', 'infant').asnumpy()[0]) ``` the gluon api provides user-friendly access to the apache mxnet library for deep learning, which advertises itself as being a ""truly open source deep learning framework suited for flexible research prototyping and production."" the amazon web services (aws) sagemaker instances support mxnet running on python 3.6 with the conda_mxnet_p36 kernel selected for the jupyter notebook. gluon nlp dependencies are easily added to the notebook by running a cell with: !pip install gluonnlp aws sagemaker dl performance on nvidia gpus i plan to implement the training job using high-end p3 aws sagemaker instances to benchmark rapid training of models using python v3.6. according to the table of instance sizes listed at the bottom of the above linked page, the cheapest instance offered - p3.2xlarge - provides 1 tesla v100 gpu with 16gb of gpu memory for $3.07/hr on demand. we have published benchmarks of nvidia gpus provided in tensorflops, which are units of floating-point arithmetic performance aimed at nvidia gpu hardware called tensor cores: a new, specialized tensor core unit was introduced with ""volta"" generation gpus. it combines a multiply of two fp16 units (into a full precision product) with a fp32 accumulate operation--the exact operations used in deep learning training computation. nvidia is now measuring gpus with tensor cores by a new deep learning performance metric: a new unit called tensortflops. according to that metric, the tesla v100 gpu rates around 112-125 tensortflops (exact figure depending on the use of pci-express or sxm2 sku interfaces). for comparison, the maximum known deep learning performance at any precision of the tesla k80 is 5.6 tflops for fp32. this gpu is provided on the p2 sagemaker instances, and for 1 gpu on the p2.xlarge instance size, the cost is $0.90/hr. if we can attain a 20x performance increase on our training job for approx. 4x compute resource cost, that seems like a great win! i also compare running this training job on my macbook pro cpu - a 2.6 ghz 6-core intel core i7. since the included amd radeon pro 5300m graphics card does not implement cuda architecture, we must deleted the following option when running the training job: --gpu=0. otherwise, this signals the index number of the gpu to use. since we selected aws instances with only one gpu, this flag will always be zero. fasttext ""bag of tricks"" and yelp sentiment classification the primary influence for this project was an entry hosted at nlp.gluon.ai for text classification called fast-text word n-gram. it leverages the fasttext python library used for ""efficient text classification and representation learning"" and developed at facebook research. the paper was also published by the facebook ai research team in 2016 and is called bag of tricks for efficient text classification (the full pdf is included in this repo). they claim in the abstract: our experiments show that our fast text classifier fasttext is often on par with deep learning classifiers in terms of accuracy, and many orders of magnitude faster for training and evaluation. in this project, i begin by training the model on aws using the yelp sentiment (binary classification) data to establish a workflow. once the architecture is in place and proven to achieve timely results, we can expand into the other datasets. each are manually uploaded to s3 buckets to make them accessible to our sagemaker instance, rather than using the script provided by fasttext (although we do use their text normalization function). output from aws sagemaker: jupyter notebook run 1 with adam as optimizer, 10 epochs - highest test accuracy: 0.9401578947368421 (epoch 8) - final test accuracy: 0.939921052631579, test loss: 0.17803387705344548 (epoch 10) jupyter notebook run 2 with sgd as optimizer, 10 epochs - highest test accuracy: 0.9403157894736842 (epoch 8) - final test accuracy: 0.9400526315789474, test loss: 0.17815197125596924 (epoch 10) jupyter notebook run 3 with sgd as optimizer, 25 epochs - highest test accuracy: 0.9403157894736842 (epoch 8) - final test accuracy: 0.9397105263157894, test loss: 0.17758843273002864 (epoch 25) - note, the accuracy above was reached at epoch 18 and remained stable. other resources: deploying custom models built with gluon and apache mxnet on amazon sagemaker use mxnet with the sagemaker python sdk sagemaker mxnet inference toolkit another possible compute resource are the aws deep learning containers. amazon claims that: aws dl containers include awsoptimizations and improvements to the latest versions of popular frameworks, like tensorflow, pytorch, and apache mxnet, and libraries to deliver the highest performance for training and inference in the cloud. for example, aws tensorflow optimizations allow models to train up to twice as fast through significantly improved gpu scaling."	['arxivv', 'cscl', 'aug', 'bag', 'tricks', 'efficient', 'text', 'classification', 'armand', 'joulin', 'edouard', 'grave', 'piotr', 'bojanowski', 'tomas', 'mikolov', 'facebook', 'ai', 'research', 'ajoulinegravebojanowskitmikolovfbcom', 'abstract', 'paper', 'explores', 'simple', 'baseline', 'ex', 'periments', 'show', 'fast', 'classi', 'fier', 'fasttext', 'often', 'par', 'deep', 'learning', 'classifiers', 'terms', 'accuracy', 'many', 'orders', 'magnitude', 'faster', 'training', 'evaluation', 'train', 'one', 'billion', 'words', 'less', 'ten', 'minutes', 'using', 'standard', 'multicore', 'cpu', 'classify', 'half', 'million', 'sentences', 'among', 'k', 'classes', 'minute', 'introduction', 'important', 'task', 'natural', 'language', 'processing', 'applications', 'web', 'search', 'information', 'retrieval', 'ranking', 'document', 'deerwester', 'et', 'al', 'pang', 'lee', 'recently', 'models', 'based', 'neural', 'networks', 'become', 'increasingly', 'popular', 'kim', 'zhang', 'lecun', 'conneau', 'achieve', 'good', 'performance', 'practice', 'tend', 'relatively', 'slow', 'test', 'time', 'limiting', 'use', 'large', 'datasets', 'meanwhile', 'linear', 'considered', 'strong', 'baselines', 'problems', 'joachims', 'mccallum', 'nigam', 'fan', 'despite', 'simplicity', 'obtain', 'state', 'oftheart', 'performances', 'right', 'features', 'used', 'wang', 'manning', 'also', 'potential', 'scale', 'cor', 'pus', 'agarwal', 'work', 'explore', 'ways', 'corpus', 'output', 'space', 'context', 'inspired', 'recent', 'word', 'representation', 'levy', 'rank', 'constraint', 'loss', 'approximation', 'within', 'achieving', 'perfor', 'mance', 'stateoftheart', 'evalu', 'ate', 'quality', 'approach', 'two', 'different', 'tasks', 'namely', 'tag', 'prediction', 'sentiment', 'analysis', 'model', 'architecture', 'sentence', 'represent', 'bow', 'classifier', 'eg', 'logistic', 'regression', 'svm', 'however', 'share', 'parameters', 'possibly', 'limits', 'generalization', 'examples', 'common', 'solutions', 'problem', 'factorize', 'clas', 'sifier', 'low', 'matrices', 'schutze', 'multilayer', 'collobert', 'weston', 'figure', 'shows', 'first', 'weight', 'matrix', 'lookup', 'table', 'representations', 'averaged', 'turn', 'fed', 'representa', 'httpsgithubcomfacebookresearchfasttext', 'x', 'xn', 'hidden', 'n', 'ngram', 'embedded', 'form', 'variable', 'tion', 'potentially', 'reused', 'similar', 'cbow', 'middle', 'replaced', 'label', 'softmax', 'function', 'f', 'compute', 'probability', 'distribution', 'predefined', 'set', 'doc', 'uments', 'leads', 'minimizing', 'negative', 'log', 'likelihood', 'yn', 'logfbaxn', 'normalized', 'th', 'b', 'matri', 'ces', 'trained', 'asynchronously', 'mul', 'tiple', 'cpus', 'stochastic', 'gradient', 'descent', 'linearly', 'decaying', 'rate', 'hierarchical', 'number', 'computing', 'computationally', 'expensive', 'precisely', 'computational', 'complexity', 'okh', 'h', 'di', 'mension', 'order', 'im', 'prove', 'running', 'soft', 'max', 'goodman', 'huffman', 'cod', 'ing', 'tree', 'drops', 'oh', 'logk', 'advantageous', 'searching', 'likely', 'class', 'node', 'associated', 'path', 'root', 'depth', 'l', 'parents', 'nl', 'pnl', 'pni', 'means', 'always', 'lower', 'parent', 'exploring', 'tracking', 'maximum', 'leaves', 'allows', 'us', 'discard', 'branch', 'small', 'observe', 'reduction', 'fur', 'ther', 'extended', 'ttop', 'targets', 'cost', 'ologt', 'binary', 'heap', 'invariant', 'taking', 'explicitly', 'account', 'computa', 'tionally', 'instead', 'ngrams', 'additional', 'capture', 'tial', 'local', 'compa', 'rable', 'results', 'methods', 'der', 'maintain', 'memory', 'mapping', 'hashing', 'trick', 'weinberger', 'hash', 'bins', 'bigrams', 'otherwise', 'experiments', 'evaluate', 'compare', 'existing', 'classifers', 'capacity', 'dataset', 'note', 'could', 'plemented', 'vowpal', 'wabbit', 'library', 'tailored', 'implementation', 'least', 'employ', 'protocol', 'report', 'tfidf', 'well', 'character', 'level', 'convolutional', 'charcnn', 'convolution', 'recurrent', 'net', 'charcrnn', 'xiao', 'cho', 'network', 'vdcnn', 'options', 'nn', 'multi', 'ag', 'sogou', 'dbp', 'yelp', 'p', 'yah', 'amz', 'bigram', 'run', 'units', 'without', 'best', 'reported', 'numbers', 'data', 'augmentation', 'big', 'dbpedia', 'single', 'epoch', 'compared', 'tang', 'following', 'main', 'approaches', 'convgrnn', 'lstmgrnn', 'present', 'epochs', 'selected', 'valida', 'adding', 'improves', 'overall', 'slightly', 'better', 'bit', 'worse', 'increase', 'example', 'trigrams', 'goes', 'finally', 'method', 'competitive', 'pre', 'sented', 'tune', 'hyper', 'validation', 'unlike', 'pretrained', 'embeddings', 'explained', 'difference', 'imdb', 'svmtf', 'cnn', 'comparision', 'chosen', 'nvidia', 'tesla', 'gpu', 'threads', 'ta', 'ble', 'convolutions', 'sev', 'eral', 'slower', 'possible', 'speed', 'cuda', 'implemen', 'tations', 'takes', 'grnns', 'around', 'hours', 'per', 'thread', 'input', 'tags', 'taiyoucon', 'digitals', 'individuals', 'digital', 'pho', 'tos', 'anime', 'convention', 'mesa', 'arizona', 'know', 'andor', 'please', 'comment', 'cosplay', 'mm', 'animeconvention', 'canon', 'con', 'cos', 'costume', 'play', 'taiyou', 'twin', 'cities', 'pride', 'pa', 'rade', 'minneapolis', 'twincitiesprideparade', 'min', 'neapolis', 'mn', 'usa', 'beagle', 'enjoys', 'snowfall', 'snow', 'hillsboro', 'january', 'maddison', 'maddy', 'oregon', 'christmas', 'cameraphone', 'mobile', 'euclid', 'avenue', 'newyorkcity', 'cleveland', 'euclidavenue', 'yfccm', 'obtained', 'correct', 'incorrect', 'predictions', 'creases', 'size', 'going', 'speedup', 'scalability', 'carried', 'thomee', 'consists', 'almost', 'images', 'cap', 'tions', 'titles', 'focus', 'predicting', 'according', 'title', 'caption', 'remove', 'occurring', 'times', 'split', 'contains', 'tokens', 'vocabulary', 'unique', 'release', 'script', 'recreates', 'reproduced', 'precision', 'consider', 'frequencybased', 'predicts', 'frequent', 'com', 'pare', 'tagspace', 'wsabie', 'described', 'version', 'achieves', 'parable', 'much', 'presents', 'comparison', 'sizes', 'layer', 'ie', 'prec', 'freq', 'uses', 'bi', 'grams', 'gives', 'significant', 'boost', 'needs', 'scores', 'makes', 'inference', 'mag', 'nitude', 'phase', 'even', 'signifi', 'cant', 'quali', 'tative', 'discussion', 'conclusion', 'propose', 'unsupervisedly', 'vectors', 'wordvec', 'together', 'repre', 'sentations', 'several', 'obtains', 'formance', 'proposed', 'spired', 'although', 'theory', 'higher', 'representational', 'power', 'shallow', 'clear', 'ones', 'eval', 'uate', 'publish', 'code', 'community', 'easily', 'build', 'top', 'acknowledgement', 'thank', 'gabriel', 'synnaeve', 'herve', 'gegou', 'jason', 'leon', 'bottou', 'help', 'comments', 'alexis', 'neau', 'duyu', 'zichao', 'providing', 'references', 'alekh', 'olivier', 'chapelle', 'miroslav', 'dudik', 'john', 'langford', 'reliable', 'effective', 'terascale', 'system', 'jmlr', 'ronan', 'unified', 'lan', 'guage', 'icml', 'holger', 'schwenk', 'loic', 'barrault', 'yann', 'volutional', 'arxiv', 'preprint', 'scott', 'susan', 'du', 'mais', 'george', 'w', 'furnas', 'thomas', 'landauer', 'richard', 'harshman', 'indexing', 'latent', 'semantic', 'journal', 'american', 'society', 'informa', 'science', 'rongen', 'kaiwei', 'chang', 'chojui', 'hsieh', 'xiangrui', 'chihjen', 'lin', 'li', 'blinear', 'joshua', 'entropy', 'icassp', 'thorsten', 'catego', 'rization', 'support', 'vector', 'machines', 'relevant', 'springer', 'yoon', 'works', 'emnlp', 'omer', 'yoav', 'goldberg', 'ido', 'dagan', 'improving', 'distributional', 'similarity', 'lessons', 'learned', 'tacl', 'andrew', 'ka', 'mal', 'event', 'naive', 'bayes', 'aaai', 'workshop', 'categorization', 'tomavs', 'anoop', 'deoras', 'daniel', 'povey', 'lukavs', 'burget', 'jan', 'vcernocky', 'strategies', 'automatic', 'speech', 'recognition', 'understanding', 'ieee', 'kai', 'chen', 'greg', 'corrado', 'jeffrey', 'dean', 'estimation', 'bo', 'lillian', 'opinion', 'mining', 'foundations', 'trends', 'hinrich', 'dimensions', 'meaning', 'supercomputing', 'bing', 'qin', 'ting', 'liu', 'modeling', 'gated', 'bart', 'david', 'shamma', 'gerald', 'friedland', 'benjamin', 'elizalde', 'karl', 'ni', 'dou', 'glas', 'poland', 'damian', 'borth', 'lijia', 'new', 'multimedia', 'vol', 'ume', 'pages', 'acm', 'sida', 'christopher', 'topic', 'acl', 'kilian', 'anirban', 'das', 'gupta', 'alex', 'smola', 'josh', 'atten', 'berg', 'feature', 'multitask', 'samy', 'bengio', 'nicolas', 'usunier', 'scaling', 'image', 'annotation', 'ijcai', 'sumit', 'chopra', 'keith', 'adams', 'embed', 'dings', 'hashtags', 'yijun', 'kyunghyun', 'characterlevel', 'combining', 'layers', 'xiang', 'scratch', 'junbo', 'zhao', 'nips', 'cs', 'final', 'project', 'gluon', 'nlp', 'mxnet', 'aws', 'sagemaker', 'systems', 'fall', 'ryan', 'rickerts', 'ryanjr', 'httpsgithubcomtherocketcourseproject', 'uiuc', 'mcsds', 'motivation', 'fascinating', 'read', 'try', 'understand', 'graduatelevel', 'computer', 'student', 'hobbyist', 'breakthroughs', 'perform', 'meager', 'hardware', 'disposal', 'working', 'studying', 'home', 'access', 'lab', 'clusters', 'institution', 'perhaps', 'deeper', 'satisfying', 'investigating', 'multilayered', 'broad', 'areas', 'application', 'self', 'like', 'raising', 'puppy', 'learn', 'preferred', 'resources', 'intimidating', 'computeintensive', 'algorithms', 'aimed', 'find', 'cutting', 'edge', 'replicated', 'developer', 'aims', 'meet', 'need', 'blog', 'post', 'symptom', 'papers', 'difficult', 'reproduce', 'open', 'source', 'implementations', 'available', 'github', 'varies', 'lot', 'maintainers', 'stop', 'supporting', 'projects', 'gluonnlp', 'prescription', 'reproduction', 'latest', 'updates', 'comes', 'scripts', 'hyperparameters', 'runtime', 'logs', 'etc', 'description', 'website', 'follows', 'httpsmediumcomapachemxnetgluonnlpdeeplearningtoolkitfornaturallanguage', 'processingeca', 'provides', 'sota', 'blocks', 'pipelines', 'designed', 'engineers', 'researchers', 'students', 'prototype', 'ideas', 'products', 'zoo', 'trains', 'review', 'positive', 'vs', 'aim', 'replicate', 'score', 'reasonable', 'frame', 'optimum', 'turned', 'v', 'gpus', 'amazon', 'services', 'instances', 'demand', 'powered', 'keep', 'costs', 'minimum', 'investigate', 'adapting', 'provided', 'environment', 'loading', 'required', 'jupyter', 'kernels', 'dependent', 'libraries', 'algorithm', 'reading', 'writing', 'buckets', 'course', 'keeping', 'regions', 'permissions', 'roles', 'httpsnlpgluonaiaboutgluonnlp', 'slight', 'variation', 'published', 'team', 'called', 'call', 'dominant', 'day', 'states', 'gluonprovided', 'found', 'text_classification', 'fasttext_word_ngrampy', 'repo', 'reference', 'python', 'appears', 'complete', 'rewrite', 'modified', 'requirements', 'infrastructure', 'cover', 'next', 'section', 'becomes', 'text_classificationfasttext_word_ngram_awspy', 'apache', 'opensource', 'framework', 'supported', 'rivaled', 'tensorflow', 'pytorch', 'popularity', 'advantage', 'short', 'mix', 'r', 'c', 'julia', 'scala', 'scales', 'another', 'built', 'portable', 'fit', 'amounts', 'tested', 'deployed', 'devices', 'connected', 'mxnets', 'scalable', 'httpsarxivorgabs', 'multiple', 'simultaneously', 'authors', 'create', 'meanpoolinglayer', 'block', 'mean', 'pooling', 'encoder', 'gluonhybridblock', 'parameter', 'fasttextclassificationmodelthe', 'layerwhich', 'hybridblock', 'rest', 'logic', 'centers', 'argument', 'parsing', 'creation', 'defaults', 'recommended', 'preprocessing', 'labeling', 'evaluating', 'fetch', 'google', 'drive', 'hosted', 'fasttexts', 'proved', 'problematic', 'given', 'response', 'downloads', 'manually', 'fetched', 'polarity', 'normalize', 'bash', 'data_fetchsh', 'csv', 'files', 'placed', 'sub', 'directory', 'prepared', 'start', 'locally', 'datayelp_review_polaritytrain', 'datayelp_review_polaritygluon', 'datayelp_review_polaritytest', 'lr', 'emsize', 'notably', 'missing', 'flag', 'laptop', 'macbook', 'pro', 'core', 'intel', 'amd', 'radeon', 'graphics', 'card', 'implement', 'job', 'threading', 'appear', 'implemented', 'documentation', 'httpsanalyticsindiamagcommxnettutorialcompleteguidewithhandsonimplementationofdeeplearning', 'httpsgithubcomfacebookresearchfasttextblobmasterclassificationexamplesh', 'allocate', 'cores', 'socket', 'activity', 'monitor', 'pegged', 'batches', 'configured', 'attempt', 'never', 'completed', 'quit', 'move', 'workload', 'cloud', 'highend', 'instance', 'listed', 'bottom', 'linked', 'page', 'cheapest', 'offered', 'pxlarge', 'gb', 'hr', 'helpful', 'benchmarks', 'tensorflops', 'floatingpoint', 'arithmetic', 'tensor', 'specialized', 'unit', 'introduced', 'volta', 'generation', 'combines', 'multiply', 'fp', 'full', 'product', 'accumulate', 'operationthe', 'exact', 'operations', 'httpsmxnetapacheorgversionsapipythondocstutorialsgettingstartedcrashcourse', 'use_gpushtml', 'httpsawsamazoncomecinstancetypesp', 'computation', 'measuring', 'metric', 'tensortflops', 'rates', 'depending', 'pciexpress', 'sxm', 'sku', 'interfaces', 'known', 'tflops', 'attain', 'approx', 'resource', 'seems', 'great', 'win', 'clock', 'incurred', 'runs', 'discussed', 'subsection', 'workflow', 'step', 'select', 'region', 'case', 'east', 'ohio', 'useast', 'reasons', 'transferred', 'ec', 'straightforward', 'free', 'live', 'remote', 'area', 'took', 'upload', 'due', 'bandwidth', 'determined', 'want', 'accurately', 'estimate', 'avoid', 'surprise', 'bill', 'furthermore', 'request', 'highly', 'via', 'ticket', 'staff', 'immediate', 'enabled', 'uploaded', 'sync', 'across', 'bucket', 'sagemakercsfinalproj', 'pictured', 'uploader', 'outputting', 'file', 'save', 'returning', 'netparams', 'yelp_sentiment_polaritygluon', 'needed', 'later', 'cases', 'outside', 'jupyternotebook', 'must', 'offloaded', 'httpswwwmicrowaycomknowledgecenterarticlescomparisonofnvidiageforcegpusandnvidiateslagpus', 'def', 'save_modelnet', 'output_file', 'file_name', 'netsave_parametersfile_name', 'suploaderuploadfile_nameoutput_file', 'since', 'established', 'utility', 'requires', 'name', 'cell', 'default', 'session', 'initialized', 'sessiondefault_bucket', 'streaming', 'lines', 'smart_open', 'simulates', 'iterable', 'forin', 'loop', 'line', 'openfilename', 'linesplit', 'labelsappendtokensstrip', 'dataappendtokensstrip', 'return', 'labels', 'httpspypiorgprojectsmartopen', 'parsed', 'quickly', 'performing', 'exceeded', 'expectations', 'churned', 'mins', 'achieved', 'mentioned', 'sourced', 'sgd', 'performed', 'adam', 'optimizer', 'notebook', 'highest', 'reached', 'remained', 'stable', 'reiterate', 'ctxcpu', 'ctxgpu', 'finished', 'entire', 'total', 'experimenting', 'plus', 'three', 'failed', 'correctly', 'able', 'conclusive', 'expected', 'explorer', 'returns', 'service', 'typically', 'importantly', 'shut', 'whenever', 'deleted', 'experimental', 'moved', 'onto', 'solution', 'cleanup', 'painful', 'way', 'discover', 'exorbitant', 'end', 'month', 'notes', 'simplified', 'somewhat', 'added', 'dropout', 'changed', 'made', 'demo', 'purposes', 'get', 'original', 'settings', 'async', 'batch', 'might', 'pass', 'testing', 'noticeable', 'decrease', 'change', 'restored', 'benchmarking', 'particular', 'rather', 'firing', 'jupyterlab', 'copypasting', 'custom', 'interact', 'docker', 'container', 'prebuilt', 'would', 'continued', 'scaled', 'covered', 'detail', 'early', 'inspiration', 'gluoncv', 'deploying', 'take', 'expansive', 'vision', 'video', 'typical', 'development', 'httpsnlpgluonaimodel_zootext_classificationindexhtml', 'httpsdocsawsamazoncomsagemakerlatestdgyouralgorithmstrainingalgohtml', 'operating', 'scientist', 'make', 'sure', 'production', 'wrapped', 'inside', 'launched', 'load', 'elastic', 'acceleration', 'endpoint', 'fraction', 'attach', 'accelerator', 'provide', 'type', 'accelerator_type', 'deploy', 'predictor', 'mxnet_estimatordeployinstance_typemlmxlarge', 'initial_instance_count', 'accelerator_typemleiamedium', 'felt', 'enjoyment', 'implementing', 'look', 'forward', 'rapid', 'httpsawsamazoncomblogsmachinelearningdeployingcustommodelsbuiltwithgluonandapache', 'mxnetonamazonsagemaker', 'pdf', 'presentation', 'youtube', 'formerly', 'bert', 'ernie', 'tpus', 'see', 'october', 'readme', 'commit', 'proposal', 'discovered', 'prohibitive', 'timeline', 'acquainted', 'api', 'cosine', 'cos_similarity', 'import', 'mx', 'glove', 'nlpembeddingcreateglove', 'sourceglovebd', 'cos_similarityembedding', 'vec', 'embeddingword', 'mxnddotvec', 'vecnorm', 'printsimilarity', 'baby', 'infant', 'cos_similarityglove', 'infantasnumpy', 'userfriendly', 'advertises', 'truly', 'suited', 'flexible', 'prototyping', 'conda_mxnet_p', 'kernel', 'dependencies', 'pip', 'install', 'dl', 'plan', 'benchmark', 'ghz', 'included', 'option', 'signals', 'index', 'zero', 'primary', 'influence', 'entry', 'nlpgluonai', 'leverages', 'developed', 'claim', 'begin', 'establish', 'place', 'proven', 'timely', 'expand', 'accessible', 'normalization', 'sdk', 'toolkit', 'containers', 'claims', 'include', 'awsoptimizations', 'improvements', 'versions', 'frameworks', 'deliver', 'optimizations', 'allow', 'twice', 'significantly', 'improved']
https://github.com/tmm-ai/CourseProject	"cs 410: final project progress report: sarcasm detection in twitter posts date: november 29, 2020 team: tardy slackers progress thus far: we have a decent ""first draft"" python code that is working with the provided training set. for the input of the model, we are combining the response and context tweet. we then use a huggingface tokenizer to get the tokens, masks, and special token objects. we started working with the roberta model that was developed by google. since we were working with the free version of google colab, we froze all the parameters to use as embeddings and then ran it with another lstm layer, which means we are only changing lstm weights at this point, to fit the model into memory. the results of this locally got a .8 f1 but on the official test set, we only got around .65 f1 which is about 0.08 below the baseline score. remaining tasks upgrade to a paid plan of google colab gpu so we get more processing capability run our program with the full bert/roberta model, and possibly other models. experiment with different values for epochs, multiple gpus, various learning rates, stacking models together, and using external data to see what delivers better/best performance to reach the baseline threshold. current challenges the familiarity and comfort with google colab, bert/roberta model, and nlp programming tasks such as this project vary significantly across team members. those will less familiarity will be focused on getting more fully up to speed in the coming weeks and adjusting our model to achieve sota. cs410 final project: text classification / twitter sarcasm team: the tardy slackers wei dai:  weidai6@illinois.edu michael huang:  mh54@illinois.edu tom mcnulty:  tmcnu3@illinois.edu demo video / code walkthrough:  https://youtu.be/ouu71eapo5u an overview of the function of the code (i.e., what it does and what it can be used for). the function of the code provided is text classification. specifically, the model is meant for classifying whether a response tweet given its context is sarcastic or not. while this code can be used for classifying any type of text into any number of classifications with some minor adjustments, the code has been specifically designed to fit the text in the provided testing and training files. the program takes in the provided 3-part twitter interactions made up of 1 tweet that is a potentially sarcastic response and two tweets that occurred just before the response. these two tweets are collectively the ""context"". we use the roberta pretraining language model. roberta builds on the original bert program which stands for bidirectional encoder representations from transformers, or bert, is a revolutionary self-supervised pretrained architecture that has learned to predict intentionally hidden (masked) sections of text. roberta builds on bert's language masking strategy and modifies key hyperparameters in bert, including removing bert's next-sentence pretraining objective, and training with much larger mini-batches and learning rates. roberta was also trained on an order of magnitude more data than bert, for a longer amount of time. this allows roberta representations to generalize even better to downstream tasks compared to bert. after reading in and preparing the data, we tokenize the data, train the roberta model, do a prediction on the validation set, prepare the test input, perform a prediction on the test set and then prepare the output, which is a text document simply listing out where each line in the test file is sarcasm or not. documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. code: all code is labeled with comments for easy understanding. we extensively use the huggingface library for tokenization and model loading. we use tensorflow to train the model. data preparation: 1. have train.jsonl and test.jsonl in folder called data in present working directory 2. we used an 80-20 train-val split 3. we simply combined the context together and appended it to the response tweet and used that as a string, using only the first 128 tokens in our model as max input sequence length training: 1. tokenize data with huggingface tokenizer to get encodings, then put in a tensorflow dataset for training 2. start training from pretrained roberta-large and finetune with our dataset for 3 epochs with adam optimizer with learning rate of 2e-5 with batch size of 16. validation and test results: 1. predict on validation and get f1 score, then predict on test set and write to answer.txt file and upload to leaderboard 2. model achieves .84 f1 score on validation set(internally) and .78396226 f1 on test set / leaderboard(under tmmai) experimentation: for the parameters, we adjusted the max length for tokenization, training encodings and validation encodings. we tried lengths of 64, 80, 128, 150, 256. we also experimented with adjusted the learning rates from 2e-5 up and down just slightly, such as 1e-5 and 3e-5 but these met with poor results. we also tried bert-large, but this gave worse results than roberta-large. maxlength of 128 for tokenization, training and validation with a learning rate of 2e-5 delivered the best results. documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run the software, whichever is applicable. two ways to run code: as python scripts or on google colab as notebook for running python scripts: 1. clone the repo 2. cd into repo and run pip install --upgrade -r requirements.txt, make sure you are using python3 3. run python cs410_final.py for training and testing. if you want to simply test on validation data and test data, then run python cs410_final_eval.py 4. both codes will evaluate on validation set and print f1 score 5. it will also write a data/answer.txt file with predictions on tests 6. if you use the training script, it will also save the model in huggingface hf format as data/roberta_model. in this folder, it will contain the tensorflow .h5 model 7. if using validation script, download our model from here: https://drive.google.com/drive/folders/1racd-g4chwuufv1jbdnxynxitjdmk_k2 . place these files in a folder called roberta_model within the data subdirectory i.e. data/roberta_model for running the colab notebook: 1. download our model from here: https://drive.google.com/drive/folders/1racd-g4chwuufv1jbdnxynxitjdmk_k2 . 2. get our train.jsonl and test.jsonl files and place them in your google drive in subdirectory called data i.e. drive/mydrive/data/train.jsonl 3. run through our notebook, https://colab.research.google.com/drive/1zcmmw8xe6vh9rmplbb_i-hzgrxsk5ujj#scroll to=qbr6a4lycl_w , but skip training step. instead, load our model into your drive and run on validation and test set. then, submit answer.txt from last cell to livedatalab. link to the demonstration video / code walkthrough: https://youtu.be/ouu71eapo5u brief description of the contribution of each team member in case of a multi-person team. wei dai: researched ideas, attempted to develop code in parallel to the team. studied theories under bert and roberta. actively discuss questions with other team members. learned tensorflow, transformers and other libraries. tried to discover parameters following michael and tom's draft. michael huang: researched ideas/models and determined roberta was likely our best model to use. developed the best working code of the team, trained the roberta model to beat baseline, and provided good resources for the team to learn more about implementing bert and roberta. also created python script to run model and contributed heavily to documentation showing how to run software. tom mcnulty: team captain, set up meetings, drafted the first drafts of all deliverables and requested team members to edit. researched initial ideas and models, tried to develop a decent draft of text classification code in parallel with other team members but michael developed the superior draft. extensively experimented with various hyper parameter and colab settings to get to optimal results. contributed heavily to final documentation. citations / resources roberta model:  https://arxiv.org/abs/1907.11692 bert model:  https://www.aclweb.org/anthology/n19-1423/ huggingface blog / libraries:  https://huggingface.co/transformers/model_doc/roberta.html keras:  https://keras.io/api/ ** a lot of code utilizes huggingface and keras api's cs410 final project proposal 10/25/2020 team name: the tardy slackers what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. tom mcnulty - captain netid: tmcnu3 tmcnu3@illinois.edu wei dai netid: weidai6 weidai6@illinois.edu michael huang netid: mh54 mh54@illinois.edu which competition do you plan to join? the text classification competition - identifying sarcasm on twitter are you prepared to learn state-of-the-art neural network classifiers?: yes - of course! name some neural classifiers and deep learning frameworks that you may have heard of. we have done some research to identify good classifiers, but have not chosen exactly which one(s) we will actually use yet. those we have heard of are transformer-based models such as bert, albert, roberta, xlnet, unilm, multi-task dnn lstms, gru, rnn word embeddings i.e. word2vec, glove, elmo cnns describe any relevant prior experience with such methods michael has experience with using these architectures. in undergrad, he participated in research projects that utilized lstms for ner tasks and also cnns for some computer vision research. also at work, he utilizes many transformer-based models to solve text-classification tasks as well as language generation tasks. (side note: although he does have this experience, he still finds this project appealing as it allows him to focus on improving other areas he's been meaning to work on such as writing good software, scripts, and documentation that makes it easy to install, use, and maintain) wei has experience with data collection. at work, she utilizes many tools such as json, goose-extractor to web scrape and crawl to build datasets for further use. which programming language do you plan to use? - python, most likely with tensorflow for modeling additional if we are able to achieve state-of-the-art performance in a reasonable amount of time, we would like to expand the capabilities of our program to do one or more of the following: identify a rate of sarcasm or create a sarcasm score on the twitter accounts of some well-known people such as comedians, politicians, flamboyant business people, etc. the score would be based on the person's entire tweeting history - or as much as we can get a hold of. develop a capability to determine metaphors / idioms based on comparing figurative and literal interpretations of tweets. these concepts were presented at a recent uiuc presentation by suma bhat who is an assistant professor in ece at illinois https://mediaspace.illinois.edu/media/t/1_0db6ad18 deploy our model with a rest api, so that it is easily interactable and usable by others, and it would also make for a cool demo text classification competition: twitter sarcasm detection evaluation please look at ""cs410 final project: text classification / twitter sarcasm.pdf"" for all documentation deliverables and if you want details about our code and training. this readme.md is a brief summary on how to evaluate our model results. this assumes you are running our model and not training your own model to validate our results, since training your own model may give different results due to changes in initialization. more details about how to evaluate model results if anything is not clear may be present in pdf mentioned above. we provided our answer.txt in this repo. if you add this to livedatalab, you can confirm our rank on the leaderboard (under username tmmai). if you want to evaluate our results by having the model predict on the test set, then there are two options you can take: run our notebook on google colab or clone this repo and run our python scripts. run on google colab download our model from here: https://drive.google.com/drive/folders/1racd-g4chwuufv1jbdnxynxitjdmk_k2. get our train.jsonl and test.jsonl files and place them in your google drive in subdirectory called data i.e. drive/mydrive/data/train.jsonl run through our notebook, https://colab.research.google.com/drive/1zcmmw8xe6vh9rmplbb_i-hzgrxsk5ujj#scrollto=qbr6a4lycl_w, but skip training step. instead, load our model into your drive and run on validation and test set. then, submit answer.txt from last cell to livedatalab. demo video / code walkthrough of colab verion: https://youtu.be/ouu71eapo5u run with python scripts clone this repo and cd into it run pip install --upgrade -r requirements.txt (make sure you are using python3) download our model from here: https://drive.google.com/drive/folders/1racd-g4chwuufv1jbdnxynxitjdmk_k2. place these files in a folder called roberta_model within the data subdirectory i.e. data/roberta_model run python cs410_final_eval.py. this code will evaluate on validation set and print f1 score. it will also write in the data folder a answer.txt file with predictions on tests"	['cs', 'final', 'project', 'progress', 'report', 'sarcasm', 'detection', 'twitter', 'posts', 'date', 'november', 'team', 'tardy', 'slackers', 'thus', 'far', 'decent', 'first', 'draft', 'python', 'code', 'working', 'provided', 'training', 'set', 'input', 'model', 'combining', 'response', 'context', 'tweet', 'use', 'huggingface', 'tokenizer', 'get', 'tokens', 'masks', 'special', 'token', 'objects', 'started', 'roberta', 'developed', 'google', 'since', 'free', 'version', 'colab', 'froze', 'parameters', 'embeddings', 'ran', 'another', 'lstm', 'layer', 'means', 'changing', 'weights', 'point', 'fit', 'memory', 'results', 'locally', 'got', 'f', 'official', 'test', 'around', 'baseline', 'score', 'remaining', 'tasks', 'upgrade', 'paid', 'plan', 'gpu', 'processing', 'capability', 'run', 'program', 'full', 'bertroberta', 'possibly', 'models', 'experiment', 'different', 'values', 'epochs', 'multiple', 'gpus', 'various', 'learning', 'rates', 'stacking', 'together', 'using', 'external', 'data', 'see', 'delivers', 'betterbest', 'performance', 'reach', 'threshold', 'current', 'challenges', 'familiarity', 'comfort', 'nlp', 'programming', 'vary', 'significantly', 'across', 'members', 'less', 'focused', 'getting', 'fully', 'speed', 'coming', 'weeks', 'adjusting', 'achieve', 'sota', 'text', 'classification', 'wei', 'dai', 'weidaiillinoisedu', 'michael', 'huang', 'mhillinoisedu', 'tom', 'mcnulty', 'tmcnuillinoisedu', 'demo', 'video', 'walkthrough', 'httpsyoutubeouueapou', 'overview', 'function', 'ie', 'used', 'specifically', 'meant', 'classifying', 'whether', 'given', 'sarcastic', 'type', 'number', 'classifications', 'minor', 'adjustments', 'designed', 'testing', 'files', 'takes', 'part', 'interactions', 'made', 'potentially', 'two', 'tweets', 'occurred', 'collectively', 'pretraining', 'language', 'builds', 'original', 'bert', 'stands', 'bidirectional', 'encoder', 'representations', 'transformers', 'revolutionary', 'selfsupervised', 'pretrained', 'architecture', 'learned', 'predict', 'intentionally', 'hidden', 'masked', 'sections', 'berts', 'masking', 'strategy', 'modifies', 'key', 'hyperparameters', 'including', 'removing', 'nextsentence', 'objective', 'much', 'larger', 'minibatches', 'also', 'trained', 'order', 'magnitude', 'longer', 'amount', 'time', 'allows', 'generalize', 'even', 'better', 'downstream', 'compared', 'reading', 'preparing', 'tokenize', 'train', 'prediction', 'validation', 'prepare', 'perform', 'output', 'document', 'simply', 'listing', 'line', 'file', 'documentation', 'software', 'implemented', 'sufficient', 'detail', 'others', 'basic', 'understanding', 'future', 'extension', 'improvement', 'labeled', 'comments', 'easy', 'extensively', 'library', 'tokenization', 'loading', 'tensorflow', 'preparation', 'trainjsonl', 'testjsonl', 'folder', 'called', 'present', 'directory', 'trainval', 'split', 'combined', 'appended', 'string', 'max', 'sequence', 'length', 'encodings', 'put', 'dataset', 'start', 'robertalarge', 'finetune', 'adam', 'optimizer', 'rate', 'e', 'batch', 'size', 'write', 'answertxt', 'upload', 'leaderboard', 'achieves', 'setinternally', 'leaderboardunder', 'tmmai', 'experimentation', 'adjusted', 'tried', 'lengths', 'experimented', 'slightly', 'met', 'poor', 'bertlarge', 'gave', 'worse', 'maxlength', 'delivered', 'best', 'usage', 'either', 'usages', 'apis', 'detailed', 'instructions', 'install', 'whichever', 'applicable', 'ways', 'scripts', 'notebook', 'running', 'clone', 'repo', 'cd', 'pip', 'r', 'requirementstxt', 'make', 'sure', 'cs_finalpy', 'want', 'cs_final_evalpy', 'codes', 'evaluate', 'print', 'dataanswertxt', 'predictions', 'tests', 'script', 'save', 'hf', 'format', 'dataroberta_model', 'contain', 'h', 'download', 'httpsdrivegooglecomdrivefoldersracdgchwuufvjbdnxynxitjdmk_k', 'place', 'roberta_model', 'within', 'subdirectory', 'drive', 'drivemydrivedatatrainjsonl', 'httpscolabresearchgooglecomdrivezcmmwxevhrmplbb_ihzgrxskujjscroll', 'toqbralycl_w', 'skip', 'step', 'instead', 'load', 'submit', 'last', 'cell', 'livedatalab', 'link', 'demonstration', 'brief', 'description', 'contribution', 'member', 'case', 'multiperson', 'researched', 'ideas', 'attempted', 'develop', 'parallel', 'studied', 'theories', 'actively', 'discuss', 'questions', 'libraries', 'discover', 'following', 'toms', 'ideasmodels', 'determined', 'likely', 'beat', 'good', 'resources', 'learn', 'implementing', 'created', 'contributed', 'heavily', 'showing', 'captain', 'meetings', 'drafted', 'drafts', 'deliverables', 'requested', 'edit', 'initial', 'superior', 'hyper', 'parameter', 'settings', 'optimal', 'citations', 'httpsarxivorgabs', 'httpswwwaclweborganthologyn', 'blog', 'httpshuggingfacecotransformersmodel_docrobertahtml', 'keras', 'httpskerasioapi', 'lot', 'utilizes', 'proposal', 'name', 'names', 'netids', 'administrative', 'duties', 'netid', 'tmcnu', 'weidai', 'mh', 'competition', 'join', 'identifying', 'prepared', 'stateoftheart', 'neural', 'network', 'classifiers', 'yes', 'course', 'deep', 'frameworks', 'may', 'heard', 'done', 'research', 'identify', 'chosen', 'exactly', 'ones', 'actually', 'yet', 'transformerbased', 'albert', 'xlnet', 'unilm', 'multitask', 'dnn', 'lstms', 'gru', 'rnn', 'word', 'wordvec', 'glove', 'elmo', 'cnns', 'describe', 'relevant', 'prior', 'experience', 'methods', 'architectures', 'undergrad', 'participated', 'projects', 'utilized', 'ner', 'computer', 'vision', 'work', 'many', 'solve', 'textclassification', 'well', 'generation', 'side', 'note', 'although', 'still', 'finds', 'appealing', 'focus', 'improving', 'areas', 'hes', 'meaning', 'writing', 'makes', 'maintain', 'collection', 'tools', 'json', 'gooseextractor', 'web', 'scrape', 'crawl', 'build', 'datasets', 'modeling', 'additional', 'able', 'reasonable', 'would', 'like', 'expand', 'capabilities', 'one', 'create', 'accounts', 'wellknown', 'people', 'comedians', 'politicians', 'flamboyant', 'business', 'etc', 'based', 'persons', 'entire', 'tweeting', 'history', 'hold', 'determine', 'metaphors', 'idioms', 'comparing', 'figurative', 'literal', 'interpretations', 'concepts', 'presented', 'recent', 'uiuc', 'presentation', 'suma', 'bhat', 'assistant', 'professor', 'ece', 'illinois', 'httpsmediaspaceillinoisedumediat_dbad', 'deploy', 'rest', 'api', 'easily', 'interactable', 'usable', 'cool', 'evaluation', 'please', 'look', 'sarcasmpdf', 'details', 'readmemd', 'summary', 'assumes', 'validate', 'give', 'due', 'changes', 'initialization', 'anything', 'clear', 'pdf', 'mentioned', 'add', 'confirm', 'rank', 'username', 'options', 'take', 'httpscolabresearchgooglecomdrivezcmmwxevhrmplbb_ihzgrxskujjscrolltoqbralycl_w', 'verion']
https://github.com/toskaushik/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/tpjwm/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/varunhari2020/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/vickyli99/CourseProject	progress report we have implemented the 5.1 mentioned in the paper, which includes importing data set downloaded from the website, converting word into lower cases, removing punctuations, stop words, and stemming each word to its root. our remaining task is to implement the rest of the functions from the paper, including 5.2 - 5.4, and get the result from our program by the end of this project. the formulas mentioned in the paper are a bit confusing to us, and we will make sure we can understand the math behind it so that we can finish this project. courseproject course project for cs 410: reproducing a paper, latent aspect rating analysis without aspect keyword supervision. paper link: https://www.cs.virginia.edu/~hw5x/paper/p618.pdf stage 1 by nov 29 reproduce of step 5.1 file: test.py first we remove the reviews with any missing aspect rating or document length less than 50 words (to keep the content coverage of all possible aspects). then we convert all the words into lower cases and remove punctuations and stop words. in vocab.txt we write vocabulary appearance based on reviews. if a word appears several times in the same review, it would only be counted as once. we then filtered out words that have less than ten occurrences. step 5.2 in progress documentation 1.overview this project consists of tasks of preprocessing data and implementing lara functions. we get the data from http://timan.cs.uiuc.edu/ downloads.html and we focused on tripadvisor data for this project. 2.programming language and packages python 3.x packages: numpy, scipy, math, re, random, nltk 3.implementation clean.py this is the python program for preprocessing the data, we did the following for this part: 1) remove the reviews with any missing aspect rating or document length less than 50 words (to keep the content coverage of all possible aspects); 2) convert all the words into lower cases; and 3) removing punctuations, stop words, and the terms occurring in less than 10 reviews in the collection. lara.py this is the main program we implemented all the functions for building this lara model. in this program, we implemented function such as update_mu, update_beta, e_step, m_step etc. load.py this is the python program we have to load our data and build our vocabulary. 4.project members ziyuan wei (ziyuan3@illinois.edu) xinyi he (xinyihe4@illinois.edu) weijiang li (wl13@illinois.edu) dingsen shi (dingsen2@illinois.edu) qunyu shen (qunyus2@illinois.edu) we decided to collaborate with another team, led by xinyi he, half way through the project since we met some challenges when understanding the methods used in the paper. then we splitted our tasks between two groups, our group (led by weijiang li, collaborating with ziyuan wei) focuses on the implementation of preprocessing and em steps in the building up the model, and the other group contributed to the rest of the functions such as negative likelihood, and another main part of this project is the implementation of bootstrap. team members from both team worked hard to try to get the code done based on the method description from the paper. when implementing em steps, we separate the procedure into two functions, e-step() and m-step(), before adopting a new function runem() to combine and output the previous data. 5. video link here is the link to the demo video on mediaspace: https://mediaspace.illinois.edu/media/t/1_fo2gtfej the proposal names: weijiang li, ziyuan wei netid: wl13, ziyuan3 captain: weijiang li paper: hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 progaming language: python dataset: yes both datasets used in the paper can be obtained from http://sifaka.cs.uiuc.edu/~wang296/data/index.html the proposal names: weijiang li, ziyuan wei netid: wl13, ziyuan3 captain: weijiang li paper: hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 progaming language: python dataset: yes both datasets used in the paper can be obtained from http://sifaka.cs.uiuc.edu/~wang296/data/index.html	['progress', 'report', 'implemented', 'mentioned', 'paper', 'includes', 'importing', 'data', 'set', 'downloaded', 'website', 'converting', 'word', 'lower', 'cases', 'removing', 'punctuations', 'stop', 'words', 'stemming', 'root', 'remaining', 'task', 'implement', 'rest', 'functions', 'including', 'get', 'result', 'program', 'end', 'project', 'formulas', 'bit', 'confusing', 'us', 'make', 'sure', 'understand', 'math', 'behind', 'finish', 'courseproject', 'course', 'cs', 'reproducing', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'link', 'httpswwwcsvirginiaeduhwxpaperppdf', 'stage', 'nov', 'reproduce', 'step', 'file', 'testpy', 'first', 'remove', 'reviews', 'missing', 'document', 'length', 'less', 'keep', 'content', 'coverage', 'possible', 'aspects', 'convert', 'vocabtxt', 'write', 'vocabulary', 'appearance', 'based', 'appears', 'several', 'times', 'review', 'would', 'counted', 'filtered', 'ten', 'occurrences', 'documentation', 'overview', 'consists', 'tasks', 'preprocessing', 'implementing', 'lara', 'httptimancsuiucedu', 'downloadshtml', 'focused', 'tripadvisor', 'programming', 'language', 'packages', 'python', 'x', 'numpy', 'scipy', 'random', 'nltk', 'implementation', 'cleanpy', 'following', 'part', 'terms', 'occurring', 'collection', 'larapy', 'main', 'building', 'model', 'function', 'update_mu', 'update_beta', 'e_step', 'm_step', 'etc', 'loadpy', 'load', 'build', 'members', 'ziyuan', 'wei', 'ziyuanillinoisedu', 'xinyi', 'xinyiheillinoisedu', 'weijiang', 'li', 'wlillinoisedu', 'dingsen', 'shi', 'dingsenillinoisedu', 'qunyu', 'shen', 'qunyusillinoisedu', 'decided', 'collaborate', 'another', 'team', 'led', 'half', 'way', 'since', 'met', 'challenges', 'understanding', 'methods', 'used', 'splitted', 'two', 'groups', 'group', 'collaborating', 'focuses', 'em', 'steps', 'contributed', 'negative', 'likelihood', 'bootstrap', 'worked', 'hard', 'try', 'code', 'done', 'method', 'description', 'separate', 'procedure', 'estep', 'mstep', 'adopting', 'new', 'runem', 'combine', 'output', 'previous', 'video', 'demo', 'mediaspace', 'httpsmediaspaceillinoisedumediat_fogtfej', 'proposal', 'names', 'netid', 'wl', 'captain', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'progaming', 'dataset', 'yes', 'datasets', 'obtained', 'httpsifakacsuiuceduwangdataindexhtml']
https://github.com/violetta-ta/CourseProject	"final project - proposal team information: team name: the west coasters team members * marina polupanova - marinap2 [captain] * tirthankar bhakta - tbhakta2 * savita manghnani - savitam2 selected competition: option4 - text classification competition state and goals of the project: our team has almost no experience with any of the neural networks and machine learning frameworks. for this program we intend to explore on following techniques and machine learning frameworks: * random forest * logistic regression * support vector machine * recurrent neural network machine learning frameworks * tensorflow tensoflow is an end-to-end open source platform for machine learning. it has a comprehensive, flexible ecosystem of tools, libraries, and community resources that let researchers push the state-of-the-art in ml and developers easily build and deploy ml-powered applications. the system is general enough to be applicable in a wide variety of other domains, as well. we will pick up one ml model in the tensorflow library for our classification task. * keras the keras neural networks library supports both convolutional and recurrent networks that are capable of running on either tensorflow or theano. keras deep learning framework was built to provide a simplistic interface for quick prototyping by constructing active neural networks that can work with tensorflow. in a nutshell, keras is lightweight, easy-to-use, and has a minimalist approach. these are the very reasons as to why keras is a part of tensorflow's core api. the primary usage of keras is in classification, text generation, and summarization, tagging, translation along with speech recognition, and others. * scikit-learn scikit-learn provides a range of supervised and unsupervised learning algorithms via a consistent interface in python. it is licensed under a permissive simplified bsd license and is distributed under many linux distributions. we are planning to use the scikit's robust set of algorithm for: ss regression: fitting logistic regression models. for logistic regression we will as well try glmnet library, and will submit the results of the library which will look more competitive. ss decision trees: tree induction and pruning for both classification and regression tasks ss svms: for learning decision boundaries programming language: * python cs 410: project progress report the west coasters | 28-nov-2020 text classification competition team: the west coasters 2020 project progress report cs410: text information systems final project: text classification competition - sarcasm detection date: saturday, nov. 29, 2020 team members: * marina polupanova ( university of illinois at urbana-champaign) - marinap2@illinois.edu * savita manghnani ( university of illinois at urbana-champaign) - savitam2@illinois.edu * tirthankar bhakta ( university of illinois at urbana-champaign) - tbhakta2@illinois.edu approaches considered for 'sarcasm detection': we have considered the following ideas to implement text classification in order to detect sarcasm. 1. text classification and sarcasm detection with cnn: we want to try a model, which can be made with parallel convolutional neural networks, where different kernel sizes used in parallel convolutional layers. this gives a multichannel input of text, that in fact uses different n-gram sizes. the network type was chosen, as over all the tutorials, it gave one of the best result on the text data, and also, logically, it should grab maximum information having in mind using different n-ngrams. the neural network will be built using tensorflow and keras libraries. 2. text classification and sarcasm detection with bert: the idea here is to build a classifier with bert. bert or bidirectional encoder representations from transformers is considered as a choice to do text classification as it can do compute vector-space representations of natural language that are suitable for use in deep learning models. the bert family of models uses the transformer encoder architecture to process each token of input text in the full context of all tokens before and after. we plan to use tensorflow and keras libraries to create the basic machine learning models and then pre-train the dataset with bert, fine-tune the model and use it on the test data. 3. text classification and sarcasm detection with dnn: tensorflow library contains multiple estimators which can be used without building the complex models. here i tried one such pre-made estimator, dnnclassifier, available in tensorflow python library for the classification task. dnnclassifier is an tensorflow implementation of deep neural network model. it is capable of accepting text in its raw format than required preprocessing to convert in numbers. paired with adagard, a gradient based optimization, dnnclassifier provides high recall. 4. text classification and sarcasm detection with bidirectional lstm long short term memory networks - usually just called ""lstms"" - are a special kind of rnn, capable of learning long-term dependencies. the classification task requires the model to learn from various language usages, tones in the sentences, etc. the amount of learning for this supervised task requires, neural network needs to memorize the decisions from short term to long term. lstm, as the name suggests fits the requirements very well. as there is no pre-estimator or readily available model available for lstm in tensorflow, requires creation of neural network model using tensorflow library. implementation & current status: 1. text classification and sarcasm detection with cnn: the implementation steps for the model include following: a) import required libraries - tensorflow, keras, numpy, pandas, json, re, string b) load the 'train.jsonl' and 'test.jsonl' file and read the file c) create the train and validation labels and feature arrays from 'train.jsonl', and test label and feature arrays from 'test.jsonl'. d) convert all the resulting arrays to tensors e) pre-process all the feature train, test, and validation tensors to get a numeric input to embedding layer and cnn. f) create a model with embedding and cnn layers g) use model to train the data h) to evaluate the model i) to test the model on test data, and check the results vs leaderboard. status: currently, the steps up to ""e"" are passed, now we are in the process of model creation and training. challenges: there was a challenge to load the data from jsonl files to tensors, and it was multiple time failing as it was the first our experience with pandas and tensorflow data structures. after some efforts, the expected input was received. current challenge is to create the embedding/cnn of a structure, which will count towards the highest score. possible issue can be that we have chosen to merge ""response"" and ""context"" in one variable, but so far we haven't yet understood how to make it a multichannel tensor. 2. text classification and sarcasm detection with bert: the idea is to use tensorflow and keras to create a ml model and use bert pre- training models to perform pre-training on the data, fine tune it, optimize the output and create the final model. here are the implementation steps taken into consideration: j) import required libraries - tensorflow, keras, numpy, pandas, jsonlines, tensorflow-hub k) load the 'train.jsonl' file and read the file l) create the train dataset from 'train.jsonl'. m) split the dataset into train and validation datasets n) load models from tensorflow hub o) choose bert models and determine the best fit to fine-tune p) use bert models to pre-train the data q) build own model by combining bert with a classifier r) train a model, including the preprocessing module, bert encoder, data, and classifier s) use an optimizer like adaptive moments to fine-tune the model t) run the test data and analyze data. status: currently, we are in the process of creating the dataset to train the model. the bert models for pre-training and training are selected and also the model is built. challenges: using tensorflow-hub was giving an error - ""importerror: cannot import name 'feature_column_v2' from 'tensorflow-hub"". resolved the error by setting up a new environment and installing tensorflow ver. 1.14. the current challenge is to create the expected dataset that bert encoder and classifier can understand. 3. text classification and sarcasm detection with dnn current state: dnnclassifier is a pre-made estimator available in tensorflow library. the classifier is capable of supporting multiple classes for categorization. implementation steps: a) import required libraries, as it's a pre-made estimator not many libraries are required for making it work. libraries it requires are tensorflow, numpy, pandas, sklearn, tensorflow_hub. b) load the training dataset and split it into training and validation datasets as pandas dataframes. c) use tfhub sentence encoder to encode the datasets from pandas dataframes. d) created embeddings from above step are fed to dnnclassifier for training and evaluation. e) use the trained model, categorize the test data set and generate answer.txt file. the latest submission with dnnclassifier, livelab reports f1 measure of 0.7073684210526316. challenges: one of the challenge i faced with the approach was to embed text data to the classifier. next steps: train the model with ""attention"" to improve on the performance. 4. text classification and sarcasm detection with bidirectional lstm current state: unlike dnnclassifier where one does not have to build a model, lstm requires creation of a neural network model. to create the model, we use tensorflow keras apis. the generic apis accept the data set in numeric format, thus preprocessing of input will not just involve cleaning of data but also converting data from text to numeric representation. following steps were performed to achieve the task: a) import required libraries like tensorflow, numpy, sklearn, textvectorization, keras layers and losses. b) load the training data set and split the data set into training and validation data sets. c) preprocess data set to remove unwanted characters and words; convert the data set into numeric format as expected by keras apis. d) build neural network model with different layers including bidirectional lstm. e) train and evaluate the model. f) when satisfied with evaluation, use the model to predict for test data set. the latest submission with this model resulted in f1 measure of 0.6917372881355932. challenges: once the dnnclassifier implementation was done, this implementation did not take much time. the only challenge i faced was to vectorize the text in format understood by keras apis. next steps: train the model with ""attention"" to improve on the performance. courseproject the project for text classification competition from the team ""the west coasters"": tirthankar bhakta tbhakta2@illinois.edu marina polupanova marinap2@illinois.edu savita manghnani savitam2@illinois.edu we planed to classify tweets to predict the ones which can be qualified as sarcasm using following methods: * random forest * logistic regression * support vector machine * recurrent neural network instead, after feedback on the project proposal submission, we used following methods: * lstm * dnn classifier with dan sentence encoder (hit the livedatalab threshold). please note, that in the demo video we have told that we use transformer sentence encoder, but in fact the one which hit the performance baseline was dan sentence encoder, and it is posted in the dnn.py file. * multi-channel cnn model * bert project tutorial: https://mediaspace.illinois.edu/media/1_uscvryhp project documentation file: documentation/projectdocumentation.pdf installation instructions: documentation/installation_and_execution_instructions.txt the account on the livedatalab for submitting the ""answers.txt"" was ""marina_polupanova""."	['final', 'project', 'proposal', 'team', 'information', 'name', 'west', 'coasters', 'members', 'marina', 'polupanova', 'marinap', 'captain', 'tirthankar', 'bhakta', 'tbhakta', 'savita', 'manghnani', 'savitam', 'selected', 'competition', 'option', 'text', 'classification', 'state', 'goals', 'almost', 'experience', 'neural', 'networks', 'machine', 'learning', 'frameworks', 'program', 'intend', 'explore', 'following', 'techniques', 'random', 'forest', 'logistic', 'regression', 'support', 'vector', 'recurrent', 'network', 'tensorflow', 'tensoflow', 'endtoend', 'open', 'source', 'platform', 'comprehensive', 'flexible', 'ecosystem', 'tools', 'libraries', 'community', 'resources', 'let', 'researchers', 'push', 'stateoftheart', 'ml', 'developers', 'easily', 'build', 'deploy', 'mlpowered', 'applications', 'system', 'general', 'enough', 'applicable', 'wide', 'variety', 'domains', 'well', 'pick', 'one', 'model', 'library', 'task', 'keras', 'supports', 'convolutional', 'capable', 'running', 'either', 'theano', 'deep', 'framework', 'built', 'provide', 'simplistic', 'interface', 'quick', 'prototyping', 'constructing', 'active', 'work', 'nutshell', 'lightweight', 'easytouse', 'minimalist', 'approach', 'reasons', 'part', 'tensorflows', 'core', 'api', 'primary', 'usage', 'generation', 'summarization', 'tagging', 'translation', 'along', 'speech', 'recognition', 'others', 'scikitlearn', 'provides', 'range', 'supervised', 'unsupervised', 'algorithms', 'via', 'consistent', 'python', 'licensed', 'permissive', 'simplified', 'bsd', 'license', 'distributed', 'many', 'linux', 'distributions', 'planning', 'use', 'scikits', 'robust', 'set', 'algorithm', 'ss', 'fitting', 'models', 'try', 'glmnet', 'submit', 'results', 'look', 'competitive', 'decision', 'trees', 'tree', 'induction', 'pruning', 'tasks', 'svms', 'boundaries', 'programming', 'language', 'cs', 'progress', 'report', 'nov', 'systems', 'sarcasm', 'detection', 'date', 'saturday', 'university', 'illinois', 'urbanachampaign', 'marinapillinoisedu', 'savitamillinoisedu', 'tbhaktaillinoisedu', 'approaches', 'considered', 'ideas', 'implement', 'order', 'detect', 'cnn', 'want', 'made', 'parallel', 'different', 'kernel', 'sizes', 'used', 'layers', 'gives', 'multichannel', 'input', 'fact', 'uses', 'ngram', 'type', 'chosen', 'tutorials', 'gave', 'best', 'result', 'data', 'also', 'logically', 'grab', 'maximum', 'mind', 'using', 'nngrams', 'bert', 'idea', 'classifier', 'bidirectional', 'encoder', 'representations', 'transformers', 'choice', 'compute', 'vectorspace', 'natural', 'suitable', 'family', 'transformer', 'architecture', 'process', 'token', 'full', 'context', 'tokens', 'plan', 'create', 'basic', 'pretrain', 'dataset', 'finetune', 'test', 'dnn', 'contains', 'multiple', 'estimators', 'without', 'building', 'complex', 'tried', 'premade', 'estimator', 'dnnclassifier', 'available', 'implementation', 'accepting', 'raw', 'format', 'required', 'preprocessing', 'convert', 'numbers', 'paired', 'adagard', 'gradient', 'based', 'optimization', 'high', 'recall', 'lstm', 'long', 'short', 'term', 'memory', 'usually', 'called', 'lstms', 'special', 'kind', 'rnn', 'longterm', 'dependencies', 'requires', 'learn', 'various', 'usages', 'tones', 'sentences', 'etc', 'amount', 'needs', 'memorize', 'decisions', 'suggests', 'fits', 'requirements', 'preestimator', 'readily', 'creation', 'current', 'status', 'steps', 'include', 'import', 'numpy', 'pandas', 'json', 'string', 'b', 'load', 'trainjsonl', 'testjsonl', 'file', 'read', 'c', 'train', 'validation', 'labels', 'feature', 'arrays', 'label', 'resulting', 'tensors', 'e', 'preprocess', 'get', 'numeric', 'embedding', 'layer', 'f', 'g', 'h', 'evaluate', 'check', 'vs', 'leaderboard', 'currently', 'passed', 'training', 'challenges', 'challenge', 'jsonl', 'files', 'time', 'failing', 'first', 'structures', 'efforts', 'expected', 'received', 'embeddingcnn', 'structure', 'count', 'towards', 'highest', 'score', 'possible', 'issue', 'merge', 'response', 'variable', 'far', 'havent', 'yet', 'understood', 'make', 'tensor', 'pre', 'perform', 'pretraining', 'fine', 'tune', 'optimize', 'output', 'taken', 'consideration', 'j', 'jsonlines', 'tensorflowhub', 'k', 'l', 'split', 'datasets', 'n', 'hub', 'choose', 'determine', 'fit', 'p', 'q', 'combining', 'r', 'including', 'module', 'optimizer', 'like', 'adaptive', 'moments', 'run', 'analyze', 'creating', 'giving', 'error', 'importerror', 'cannot', 'feature_column_v', 'resolved', 'setting', 'new', 'environment', 'installing', 'ver', 'understand', 'supporting', 'classes', 'categorization', 'making', 'sklearn', 'tensorflow_hub', 'dataframes', 'tfhub', 'sentence', 'encode', 'created', 'embeddings', 'step', 'fed', 'evaluation', 'trained', 'categorize', 'generate', 'answertxt', 'latest', 'submission', 'livelab', 'reports', 'measure', 'faced', 'embed', 'next', 'attention', 'improve', 'performance', 'unlike', 'apis', 'generic', 'accept', 'thus', 'involve', 'cleaning', 'converting', 'representation', 'performed', 'achieve', 'textvectorization', 'losses', 'sets', 'remove', 'unwanted', 'characters', 'words', 'satisfied', 'predict', 'resulted', 'done', 'take', 'much', 'vectorize', 'courseproject', 'planed', 'classify', 'tweets', 'ones', 'qualified', 'methods', 'instead', 'feedback', 'dan', 'hit', 'livedatalab', 'threshold', 'please', 'note', 'demo', 'video', 'told', 'baseline', 'posted', 'dnnpy', 'tutorial', 'httpsmediaspaceillinoisedumedia_uscvryhp', 'documentation', 'documentationprojectdocumentationpdf', 'installation', 'instructions', 'documentationinstallation_and_execution_instructionstxt', 'account', 'submitting', 'answerstxt', 'marina_polupanova']
https://github.com/vkreiden/CourseProject	"progress report: applying ml to log analysis for anomalies detection progress made so far: * deepening knowledge in the area. the technology review in the related area as well as some video-courses on nlp and leveraging nlp and word embeddings in ml. * dependencies for the project. python libraries: spacy (text parsing), pandas, numpy (data manipulation), gensim (word2vec embedding), sklearn (ml models, validations, ...) * installing and configuring dev env. * breaking down the tasks and creating the backlog. backlog: * (in background) data acquisition. work to obtain real log files * skeleton. build a skeleton of the steps w/stubs (+ some tests) * 1st implementation. implement word2vec embedding w/small synthetic log files; kfold of the first ml algorithm (tbd); implement perf. reporting (e.g. accuracy, runtime) * refactor to oop. should enable an easy extension at least with a different ml algorithm; (optionally embeddings as well) * extend the implementation with at least one more model. ideally should be able to run a comparison of models (details tbd) * run the tool on the real log files. run and compare models performance * documentation. [optional] * dockerization. for more convenient tool usage * non-functional requirements. look at the performance optimization * hyperparameters tuning. challenges so far: * real data acquisition. if no real data achieved the fallback would be to use a synthetically generated dataset * env tech issues. some issue w/scapy corpus load - troubleshooting in progress... tool: applying ml to log analysis for anomalies detection team (c) valeryk2 (valery kreidenko) what is the function of the tool the tool is a thematic continuation of the technology review. the tool will allow to train and evaluate performance of different machine learning models on the datasets of the labeled log files. who will benefit from such a tool sres, data scientists and researchers who would like to experiment and test different ml models for anomalies detection from the log files. does this kind of tools already exist some work has been already done in this area to support the research brought in the technology review though not sure what exactly since the code isn't publicly available. what existing resources can be used we'll use the approach which was researched and suggested by the authors of https://hal.laas.fr/hal-01576291/document. we'll try to acquire some real existing datasets from the real system. what techniques/ algorithms will be used the current plan is: - to use word2vec or other nlp technique(s) to map text data into the ml models consumable data - we'll implement at least 2 supervised ml methods - per performance evaluation o for effectiveness we'll use f-measure and maybe others o for efficiency we'll compute model training and classification times for models comparison - for validation we plan to implement 10-fold or other method - finally, we'll try to apply oop design patterns to make this tool extensible for easy plugging of more ml models, etc. - implementation language: python + its ml libraries how the usefulness of the tool will be demonstrated we'll run at least 2 models of the tool on the same data and we'll evaluate and compare the relative performance in terms of the effectiveness and efficiency. we hope to demo this tool on the real dataset, otherwise we'll synthesize some. timeline this is estimated as a ~3 weeks project. courseproject this is an #uiuc #mcs_ds text information systems course final project. the developed tool is based on the technology review. table of contents functionality implementation details usage usage presentation functionality this tool provides a functionality of assessing performance as well as performing comparison of supervised learning classifiers when applied to the log files or chunks of log files for anomalies detection. it is mostly based on the approach described in this paper. at high level, the tool receives 2 lists of text files as input - one dataset corresponds to the system in error state (e.g. under stress, performance issues, security incidents, etc.) and the second set corresponds to a benign work of the system. each file represents one data item (document) in one of the two lists thus the dataset items are prelabeled with either ""fail"" or ""normal"" labels. after the data is read and preprocessed, an nlp method is applied to transform each data item (log file) into a vector space. the received matrix along with labels is fed into each of of the supervised machine learning models to evaluate the performance. the output of the tool run is a scatter chart displaying each tested classifier over 2 dimensions - classification accuracy vs. runtime. the tool is implemented in python (see implementation details) and runs using the configuration provided in the ini format config file (see usage). implementation details general the tool is implemented in python and uses a number of standard python modules for data consumption and processing as well as specialized modules for applying nlp, ml methods and plotting the results as detailed below. reading the configuration the standard configparser is used to read the following configuration items form the configuration file file: locations of the two sets of files, preprocessing directives on how to optionally drop the ""standard"" prefix, a list of classifiers to assess along with the k-fold test set size parameter. there's also a file format parameter which used when plotted into a file. datasets and preprocessing the expected datasets are two sets of log files (one corresponding to a normal state of the system and the other one during abnormal work). each file contains a number of log messages. there are two preprocessing steps which are performed on the input data using standard string manipulation functions: 1 drop a standard prefix of a log message using delimeters 2 remove non-alphanumerical characters nlp to prepare the data for ml algorithms we start with applying the word2vec word embedding to vectorize the words. we train the word2vec model on the vocabulary generated from all the words appearing in the log messages. we use gensim library to build the word2vec model over default number of dimensions (100) of the vector space. to calculate the positions of the files in the vector space we use a centroid approach twice: we first calculate an average postion vector per log message over all the mesage words vectors. then we find a position of each file in the vector space by calculating the average of all the file's log messages vectors. ml estimators assessment and comparison we use scikit-learn library to build and evaluate ml models. specifically, we use k-fold validation. when enumerating a list of the fully-qualified class names of the estimators the reflection is used to instantiate an instance of each. we capture accuracy and a model evaluation time measurement for plotting the results at the next step. results presentation we use a matplotlib module to plot a scatter chart presenting the results of the run. x axe shows the classification accuracy vs. model evaluation runtime on the y axe. usage describes two ways of using the tools. when the tool is run on the host os the chart will be displayed onto the display. this may not be easily achieved if the tool is run in the container. in this case the tool will save the chart into figures folder in the format specified by user in the config. testing datasets we provide two sample datasets ""perfect split"" and ""mix"". these datasets are mostly synthetic. they were generated from the real httpd error log files in the following way: the notice level messages are separated into the ""notice"" files while error level messages are separated into the ""error"" files. ""perfect split"" dataset includes strictly separated notice and error files while the ""mix"" contains a ~70%-30% mixes of two kinds. this allows to see the implemented approach works from the perspective of expected accuracy: with the perfect split all the classifiers are 100% accurate while when we use a mixed dataset the accuracy drops below 100%. perfect split dataset mix dataset usage we prepared and tested two running configurations below. clone this project and cd into it. docker (recommended) build docker container: docker build -t ad_app . (on linux/ mac) run: docker run -d --mount type=bind,src=""$(pwd)""/config,target=/config \ --mount type=bind,src=""$(pwd)""/datasets,target=/datasets \ --mount type=bind,src=""$(pwd)""/figures,target=/figures ad_app (on windows) substitute ""$(pwd)"" in the above command with the current directory path using pip package manager in virtual environment python -m ensurepip --default-pip python -m venv test_ad_app (on linux/ mac): source test_ad_app/bin/activate (on windows): test_ad_app\scripts\activate pip install -r requirements.txt using conda package manager configure: conda update conda conda install -c anaconda gensim scikit-learn conda install -c conda-forge matplotlib conda update -y smart_open run: python anomaly_detector.py usage presentation recording"	['progress', 'report', 'applying', 'ml', 'log', 'analysis', 'anomalies', 'detection', 'made', 'far', 'deepening', 'knowledge', 'area', 'technology', 'review', 'related', 'well', 'videocourses', 'nlp', 'leveraging', 'word', 'embeddings', 'dependencies', 'project', 'python', 'libraries', 'spacy', 'text', 'parsing', 'pandas', 'numpy', 'data', 'manipulation', 'gensim', 'wordvec', 'embedding', 'sklearn', 'models', 'validations', 'installing', 'configuring', 'dev', 'env', 'breaking', 'tasks', 'creating', 'backlog', 'background', 'acquisition', 'work', 'obtain', 'real', 'files', 'skeleton', 'build', 'steps', 'wstubs', 'tests', 'st', 'implementation', 'implement', 'wsmall', 'synthetic', 'kfold', 'first', 'algorithm', 'tbd', 'perf', 'reporting', 'eg', 'accuracy', 'runtime', 'refactor', 'oop', 'enable', 'easy', 'extension', 'least', 'different', 'optionally', 'extend', 'one', 'model', 'ideally', 'able', 'run', 'comparison', 'details', 'tool', 'compare', 'performance', 'documentation', 'optional', 'dockerization', 'convenient', 'usage', 'nonfunctional', 'requirements', 'look', 'optimization', 'hyperparameters', 'tuning', 'challenges', 'achieved', 'fallback', 'would', 'use', 'synthetically', 'generated', 'dataset', 'tech', 'issues', 'issue', 'wscapy', 'corpus', 'load', 'troubleshooting', 'team', 'c', 'valeryk', 'valery', 'kreidenko', 'function', 'thematic', 'continuation', 'allow', 'train', 'evaluate', 'machine', 'learning', 'datasets', 'labeled', 'benefit', 'sres', 'scientists', 'researchers', 'like', 'experiment', 'test', 'kind', 'tools', 'already', 'exist', 'done', 'support', 'research', 'brought', 'though', 'sure', 'exactly', 'since', 'code', 'isnt', 'publicly', 'available', 'existing', 'resources', 'used', 'approach', 'researched', 'suggested', 'authors', 'httpshallaasfrhaldocument', 'try', 'acquire', 'system', 'techniques', 'algorithms', 'current', 'plan', 'map', 'consumable', 'supervised', 'methods', 'per', 'evaluation', 'effectiveness', 'fmeasure', 'maybe', 'others', 'efficiency', 'compute', 'training', 'classification', 'times', 'validation', 'fold', 'method', 'finally', 'apply', 'design', 'patterns', 'make', 'extensible', 'plugging', 'etc', 'language', 'usefulness', 'demonstrated', 'relative', 'terms', 'hope', 'demo', 'otherwise', 'synthesize', 'timeline', 'estimated', 'weeks', 'courseproject', 'uiuc', 'mcs_ds', 'information', 'systems', 'course', 'final', 'developed', 'based', 'table', 'contents', 'functionality', 'presentation', 'provides', 'assessing', 'performing', 'classifiers', 'applied', 'chunks', 'mostly', 'described', 'paper', 'high', 'level', 'receives', 'lists', 'input', 'corresponds', 'error', 'state', 'stress', 'security', 'incidents', 'second', 'set', 'benign', 'file', 'represents', 'item', 'document', 'two', 'thus', 'items', 'prelabeled', 'either', 'fail', 'normal', 'labels', 'read', 'preprocessed', 'transform', 'vector', 'space', 'received', 'matrix', 'along', 'fed', 'output', 'scatter', 'chart', 'displaying', 'tested', 'classifier', 'dimensions', 'vs', 'implemented', 'see', 'runs', 'using', 'configuration', 'provided', 'ini', 'format', 'config', 'general', 'uses', 'number', 'standard', 'modules', 'consumption', 'processing', 'specialized', 'plotting', 'results', 'detailed', 'reading', 'configparser', 'following', 'form', 'locations', 'sets', 'preprocessing', 'directives', 'drop', 'prefix', 'list', 'assess', 'size', 'parameter', 'theres', 'also', 'plotted', 'expected', 'corresponding', 'abnormal', 'contains', 'messages', 'performed', 'string', 'functions', 'message', 'delimeters', 'remove', 'nonalphanumerical', 'characters', 'prepare', 'start', 'vectorize', 'words', 'vocabulary', 'appearing', 'library', 'default', 'calculate', 'positions', 'centroid', 'twice', 'average', 'postion', 'mesage', 'vectors', 'find', 'position', 'calculating', 'estimators', 'assessment', 'scikitlearn', 'specifically', 'enumerating', 'fullyqualified', 'class', 'names', 'reflection', 'instantiate', 'instance', 'capture', 'time', 'measurement', 'next', 'step', 'matplotlib', 'module', 'plot', 'presenting', 'x', 'axe', 'shows', 'describes', 'ways', 'host', 'os', 'displayed', 'onto', 'display', 'may', 'easily', 'container', 'case', 'save', 'figures', 'folder', 'specified', 'user', 'testing', 'provide', 'sample', 'perfect', 'split', 'mix', 'httpd', 'way', 'notice', 'separated', 'includes', 'strictly', 'mixes', 'kinds', 'allows', 'works', 'perspective', 'accurate', 'mixed', 'drops', 'prepared', 'running', 'configurations', 'clone', 'cd', 'docker', 'recommended', 'ad_app', 'linux', 'mac', 'mount', 'typebindsrcpwdconfigtargetconfig', 'typebindsrcpwddatasetstargetdatasets', 'typebindsrcpwdfigurestargetfigures', 'windows', 'substitute', 'pwd', 'command', 'directory', 'path', 'pip', 'package', 'manager', 'virtual', 'environment', 'ensurepip', 'defaultpip', 'venv', 'test_ad_app', 'source', 'test_ad_appbinactivate', 'test_ad_appscriptsactivate', 'install', 'r', 'requirementstxt', 'conda', 'configure', 'update', 'anaconda', 'condaforge', 'smart_open', 'anomaly_detectorpy', 'recording']
https://github.com/vs27-illinois/CourseProject	"recipefinder software code submission with documentation by team ""tastebuddies"" vijayaragavan selvaraj (vs27) - team leader sathyanarayanan gokarnesan (sg53) karthika gopalakrishnan (kg24) 1 | page 1. application - live demo link please see the live demo of the ""recipefinder"" application running at the following location. http://54.81.52.188/ 2. overview ""recipefinder"" is a web-based tool built using novel information retrieval techniques to search popular recipes. it searches recipes based on the ingredients of the recipes. when the user searches with an ingredient name, it lists the top 20 recipes that contain the given ingredient. for each of the recipes in the search results, users can also see recipe details including the cooking directions, other ingredients of the recipe, nutritional values, timings, and ratings of the recipe. users are also recommended with 4 similar recipes based on the nutritional value. content based similarity approach has been used for this project. 3. architecture and source code following is the high-level architecture of ""recipefinder"". front end angular web app 2 | page source code for the ""recipe finder"" application is present in the following github location: https://github.com/vs27-illinois/courseproject.git source code for our project can be broadly categorized into three sections.  backend  frontend  infrastructure backend: following are the main files in the backend system. 1. indexer.py this python file is responsible for taking the ""recipe finder"" dataset, parsing the csv file for different fields, creating indexes on different fields, and writing the same in an index document. we used apache pylucene to index the dataset. the indexed dataset contains 49,698 records in total. we used the dataset from kaggle at the following location for our project: https://www.kaggle.com/elisaxxygao/foodrecsysv1?select=raw-data_recipe.csv following are the columns in the index. 3 | page s.no column index type 1 id indexoptions.docs 2 name indexoptions.none 3 image indexoptions.none 4 avg_rating indexoptions.none 5 total_reviews indexoptions.none 6 ingredients indexoptions.docs_and_freqs_and_positions 7 time_taken indexoptions.none 8 nutrition indexoptions.none 9 calories indexoptions.none we used mmapdirectory to load the index files and indexed the ingredients and recipe id field by using englishanalyzer since the dataset is in english. we stored the rest of the fields in the indexed document. following are some of the main code snippets of indexer.py. 4 | page 10 carbohydrates indexoptions.none 11 protein indexoptions.none 12 fat indexoptions.none 2. retriever.py following are the functionalities of retriever.py. # it is responsible for taking the ""ingredient"" input from the user, searching the index for 20 popular recipes based on the ingredient, converting the results (list of recipes) into json format to be rendered in the ui. # it is responsible for taking the recipe id from the user to provide a detailed view of the recipe. # it also returns the list of top 4 recipes based on similar nutritional value for the recipe which the user wants to see the details. following are the api calls involved. 5 | page s.no end point method output 1 http://<ipaddress>/recipe/sear ch/{ingredient} ex: http://54.81.52.188/recipe/se arch/chocolate get [ { ""avg_rating"": 4.34615373611, ""calories"": 274.0809, ""carbohydrates"": 45.78727, ""fat"": 10.5331, ""id"": 32482, ""image"": ""https://images.media-allrecipes.com/userphotos/ 250x250/710487.jpg"", ""ingredients"": [ ""<strong>chocolate</strong> chips"", ""powdered <strong>chocolate</strong> drink mix"", ""<strong>chocolate</strong> syrup"", ""scoops <strong>chocolate</strong> ice cream"", ""milk"", ""ice"" ], ""name"": ""chocolate surprise milkshake"", ""protein"": 3.052425, ""total_reviews"": 17 },... ] 2 http://<ipaddress> /recipe/details/{recipeid} ex: http://54.81.52.188/recipe/det ails/220725 get { ""avg_rating"": 4.26016616821, ""calories"": 123.5964, ""carbohydrates"": 19.74722, ""directions"": [ ""prepare the cake mix according to package directions using any of the recommended pan sizes. when cake is done, crumble while warm into a large bowl, and stir in the frosting until well blended."", ""melt chocolate coating in a glass bowl in the microwave, or in a metal bowl over a pan of simmering water, stirring occasionally until smooth."", ""use a melon baller or small scoop to form balls of the chocolate cake mixture. dip the balls in 6 | page chocolate using a toothpick or fork to hold them. place on waxed paper to set."" ], ""fat"": 5.188236, ""id"": 67656, ""image"": ""http://images.media-allrecipes.com/userphotos/7 20x405/599097.jpg"", ""ingredients"": [ ""chocolate cake mix"", ""prepared chocolate frosting"", ""bar chocolate flavored confectioners coating"" ], ""name"": ""cake balls"", ""nutrition"": { ""calcium"": { ""amount"": 27.23583, ""displayvalue"": ""27"", ""hascompletedata"": true, ""name"": ""calcium"", ""percentdailyvalue"": ""3"", ""unit"": ""mg"" }, ""calories"": { ""amount"": 123.5964, ""displayvalue"": ""124"", ""hascompletedata"": true, ""name"": ""calories"", ""percentdailyvalue"": ""6"", ""unit"": ""kcal"" },.. }, ""protein"": 1.122792, ""time_taken"": [ ""prep"", ""40 m"", ""cook"", ""30 m"", ""ready in"", ""3 h 10 m"" ], ""total_reviews"": 1867 } 3 http://<ipaddress>/recipe/reco mmend/{recipeid} ex: http://54.81.52.188/recipe/rec ommend/220725 get [ { ""avg_rating"": 3.5, ""calories"": 124.4117, ""carbohydrates"": 19.98162, ""fat"": 4.989575, ""id"": 15463, ""image"": ""http://images.media-allrecipes.com/userphotos/7 20x405/1115423.jpg"", ""ingredients"": [ ""canola oil"", ""honey"", ""packed brown sugar"", ""egg whites"", ""vanilla extract"", ""water"", ""wheat flour"", ""all-purpose flour"", ""baking powder"", ""salt"", ""ground cinnamon"", ""semisweet chocolate chips"" we maintained the indexsearcher object as a global variable to boost the performance of the search. we used lucene highlighter to highlight the search terms in the search results in the website. we maintained a global variable of pandas dataframe with all the records that is the l2 normalized form of nutritional values that we used in the recommendation service. the recommendation is done based on the nutritional values of calories and macronutrients (i.e., protein, carbohydrates and fat) by calculating euclidean distance between the record of the given recipe id and the other records. following are some of the main code snippets for retriever.py. 7 | page ], ""name"": ""no cholesterol chocolate chip"", ""protein"": 1.515088, ""total_reviews"": 15 }, 8 | page frontend: the frontend of the code to display the search results and recommended recipes are based on angular 11. it makes http get requests to the backend to retrieve the search results, recipe details and recommended recipes. the frontend is a single page application and the code is located in the ""src/app"" folder. we used the angular material module as a base to build the ui. infrastructure: following are the infrastructure related files. 1. dockerfile we used docker to containerize our application and used the following image as the base to install pylucene: https://hub.docker.com/r/coady/pylucene. the dockerfile in the project folder copies all the required backend and frontend files and deploys them in a standalone container. 2. startup.sh this shell script file is responsible for creating the docker image (recipefinder:1.0) and running the image as a docker container. 9 | page 4. setup and installation instructions following are the technologies used in the project. * python 3.9.0 * apache pylucene 8.6.1 * flask 1.1.2 * angular 11.0 * docker 2.5 some of the python packages used are: * numpy 1.19.4 * pandas 1.1.5 * scikit-learn 0.23.2 * sklearn * scipy 1.5.4 angular modules used: * angular-material * ng-bootstrap since we used docker, the project can be installed in either a local environment or on any cloud instances. following are the steps: 1. install and set up docker. 2. clone the project from the github location https://github.com/vs27-illinois/courseproject.git 3. open the shell script and run the following command: sh startup.sh 4. if the application is running on a cloud environment, enable the http port (80) in the host machine, so that the flask application running in the docker container can be exposed to the internet. sample image below. 10 | page 5. open your favorite browser and go to http://127.0.0.1/ (if the app is running in a local environment) or http://<ipaddress>/ (if the app is running in a cloud environment). 5. snapshots following are the snapshots of the ""recipe finder"" application. 11 | page 12 | page 6. further improvements within the given timeframe, we implemented all the functionalities that we have initially proposed for this project. we even fairly optimized the response time of the apis by improving the performance of the search and recommendation service of the application. as a future enhancement, the performance of the recommendation service can be improved (currently it takes ~20 seconds to provide results). moreover, we attempted to modify the recommendation service to use other fields like ingredients and faced memory limitations in our ec2 instance (we used free tier). it can also be tried as a further development of this project. 7. references https://lucene.apache.org/core/8_6_1/ https://docs.scipy.org/doc/scipy/reference/spatial.distance.html https://www.kaggle.com/elisaxxygao/foodrecsysv1 https://github.com/coady/docker https://material.angular.io/ 13 | page 8. contribution of team members vijayaragavan selvaraj (vs27) - team leader * retriever (search) * docker * angular sathyanarayanan gokarnesan (sg53) * indexer * ec2 setup * angular karthika gopalakrishnan (kg24) * retriever (recommendation service) * documentation * presentation 14 | page project progress report: recipe finder team tastebuddies, net ids: vs27, kg24, sg53 1) which tasks have been completed?  installed pylucene using docker in the local environment and did a test run in ec2.  development of python code completed for the following:  parsing and cleansing of recipe dataset.  indexing and storing of recipe dataset.  enhanced performance of indexing using pandas.  while implementing the indexer, we evaluated different indexing options and field types like multivalued fields given in the lucene library.  retriever to search the recipes based on given 'ingredient' query term.  while implementing the retriever, we evaluated different query parser options and analyzers to search the data using a single term or a phrase.  development of api's using flask. 2) which tasks are pending?  development of web pages using polymer is in progress. (vs27, expected to be completed by 12/02)  development of the content based recommender system is in progress. (kg24, expected to be completed by 12/03)  deployment of pylucene in ec2 using docker. (sg53, expected to be completed by 12/04)  deployment of api's and web pages in a web server in ec2. (vs27, expected to be completed by 12/05)  documentation and presentation. (expected to be completed by 12/10)  planning to do the final submission by 12/10. 3) are you facing any challenges?  in our project proposal, we mentioned that we would be using apache solr to index and store the data. however, we later found that apache pylucene is sufficient for our use case and used it for indexing and storing the dataset.  we have faced a lot of issues in installing pylucene in the local environment as well as ec2. as a solution to those issues, we found an open source docker based pylucene repository that helped us in automating the installation of pylucene.  we are not facing any challenges as of now. project proposal: recipe finder what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. - team: tastebuddies - vijayaragavan selvaraj (vs27) - team lead - karthika gopalakrishnan (kg24) - sathyanarayanan gokarnesan (sg53) what is your free topic? please give a detailed description. what is the task? why is it important or interesting? what is your planned approach? what tools, systems or datasets are involved? what is the expected outcome? how are you going to evaluate your work? - free topic: recipe finder - description: it is a search tool to find the most popular recipes based on an ingredient. for each recipe in the search result, the users can see the cooking directions, nutritional value and a list of recommended recipes. - task: we are going to use the novel information retrieval techniques to build a web-based search engine that allows users search for the recipes based on their preferred ingredient, and a recommendation service that suggests users a list of similar recipes based on a combination of ingredients and nutritional value. - motivation: allrecipes.com is a recipe curation website and has curated over thousands of recipes from all over the world. our ultimate goal is to develop a recipe finder to enhance the recipe search process by retrieving top 20 popular recipes using the ingredient entered by the user and recommend similar recipes for each recipe viewed by the user. - approach: we are going to use apache solr as the backend layer for the search. we will index the data in solr and fine tune the parameters for better search experience. for the recommender system, we are going to adopt content-based filtering mechanism and use the columns, nutritional value and ingredients, to suggest similar recipes to the user. - dataset: allrecipes.com dataset from kaggle - outcome: a website where users would be able to enter an ingredient in a search bar and the system would return the top 20 popular recipes and along with recommendations of similar recipes for each recipe in the top 20 list. - evaluation: user needs to enter an ingredient (eg. potato) in a search bar and the system would list the top 20 popular recipes for the ingredient. if the users select a recipe from the 20 recipes, they can see the cooking directions and nutrition value for the recipe. in addition to that, the users would also see a list of similar recipes that have similar ingredients and better nutritional value. which programming language do you plan to use? - python, apache solr, scikits (learn, surprise), pandas, numpy, html, javascript, css project proposal: recipe finder please justify that the workload of your topic is at least 20*n hours, n being the total number of students in your team. you may list the main tasks to be completed, and the estimated time cost for each task. our estimate for the project would be 80 hours approximately and below is the breakup of the workload for the project. - oct 26 - nov 9: import dataset in apache solr (~20 hours) - setup solr in ec2 - data cleansing & ingestion - fine tuning and performance analysis - nov 10 - nov 22: recipe recommendation model (~30 hours) - design content-based filtering system to recommend similar recipes to the user based on the ingredient and nutritional value - performance analysis and fine tuning of the model - nov 23 - dec 4: web application (~25 hours) - design backend and frontend for the web application - scenario 1: - input: user enters ingredient in search bar - output: top 20 recipes that has the ingredient - scenario 2: - input: user opens a recipe from the top 20 list - output: cooking directions, nutritional value and recommendations of similar recipes - dec 5 - dec 8: documentation & presentation preparation (~5 hours) recipe finder cooking has become a survival skill for everyone now and every day, people search for recipes using their preferred ingredient. allrecipes.com is a website which has curated thousands of recipes from all over the world in different cuisines and cooking methods. our recipefinder application will be an enhancement to the existing system and helps their users to search for recipes using their preferred ingredient and get recommended recipes based on the ingredient and nutritional value."	['recipefinder', 'software', 'code', 'submission', 'documentation', 'team', 'tastebuddies', 'vijayaragavan', 'selvaraj', 'vs', 'leader', 'sathyanarayanan', 'gokarnesan', 'sg', 'karthika', 'gopalakrishnan', 'kg', 'page', 'application', 'live', 'demo', 'link', 'please', 'see', 'running', 'following', 'location', 'http', 'overview', 'webbased', 'tool', 'built', 'using', 'novel', 'information', 'retrieval', 'techniques', 'search', 'popular', 'recipes', 'searches', 'based', 'ingredients', 'user', 'ingredient', 'name', 'lists', 'top', 'contain', 'given', 'results', 'users', 'also', 'recipe', 'details', 'including', 'cooking', 'directions', 'nutritional', 'values', 'timings', 'ratings', 'recommended', 'similar', 'value', 'content', 'similarity', 'approach', 'used', 'project', 'architecture', 'source', 'highlevel', 'front', 'end', 'angular', 'web', 'app', 'finder', 'present', 'github', 'httpsgithubcomvsillinoiscourseprojectgit', 'broadly', 'categorized', 'three', 'sections', 'backend', 'frontend', 'infrastructure', 'main', 'files', 'system', 'indexerpy', 'python', 'file', 'responsible', 'taking', 'dataset', 'parsing', 'csv', 'different', 'fields', 'creating', 'indexes', 'writing', 'index', 'document', 'apache', 'pylucene', 'indexed', 'contains', 'records', 'total', 'kaggle', 'httpswwwkagglecomelisaxxygaofoodrecsysvselectrawdata_recipecsv', 'columns', 'sno', 'column', 'type', 'id', 'indexoptionsdocs', 'indexoptionsnone', 'image', 'avg_rating', 'total_reviews', 'indexoptionsdocs_and_freqs_and_positions', 'time_taken', 'nutrition', 'calories', 'mmapdirectory', 'load', 'field', 'englishanalyzer', 'since', 'english', 'stored', 'rest', 'snippets', 'carbohydrates', 'protein', 'fat', 'retrieverpy', 'functionalities', 'input', 'searching', 'converting', 'list', 'json', 'format', 'rendered', 'ui', 'provide', 'detailed', 'view', 'returns', 'wants', 'api', 'calls', 'involved', 'point', 'method', 'output', 'httpipaddressrecipesear', 'chingredient', 'ex', 'httprecipese', 'archchocolate', 'get', 'httpsimagesmediaallrecipescomuserphotos', 'xjpg', 'strongchocolatestrong', 'chips', 'powdered', 'drink', 'mix', 'syrup', 'scoops', 'ice', 'cream', 'milk', 'chocolate', 'surprise', 'milkshake', 'httpipaddress', 'recipedetailsrecipeid', 'httprecipedet', 'ails', 'prepare', 'cake', 'according', 'package', 'pan', 'sizes', 'done', 'crumble', 'warm', 'large', 'bowl', 'stir', 'frosting', 'well', 'blended', 'melt', 'coating', 'glass', 'microwave', 'metal', 'simmering', 'water', 'stirring', 'occasionally', 'smooth', 'use', 'melon', 'baller', 'small', 'scoop', 'form', 'balls', 'mixture', 'dip', 'toothpick', 'fork', 'hold', 'place', 'waxed', 'paper', 'set', 'httpimagesmediaallrecipescomuserphotos', 'prepared', 'bar', 'flavored', 'confectioners', 'calcium', 'amount', 'displayvalue', 'hascompletedata', 'true', 'percentdailyvalue', 'unit', 'mg', 'kcal', 'prep', 'cook', 'ready', 'h', 'httpipaddressrecipereco', 'mmendrecipeid', 'httpreciperec', 'ommend', 'canola', 'oil', 'honey', 'packed', 'brown', 'sugar', 'egg', 'whites', 'vanilla', 'extract', 'wheat', 'flour', 'allpurpose', 'baking', 'powder', 'salt', 'ground', 'cinnamon', 'semisweet', 'maintained', 'indexsearcher', 'object', 'global', 'variable', 'boost', 'performance', 'lucene', 'highlighter', 'highlight', 'terms', 'website', 'pandas', 'dataframe', 'l', 'normalized', 'recommendation', 'service', 'macronutrients', 'ie', 'calculating', 'euclidean', 'distance', 'record', 'cholesterol', 'chip', 'display', 'makes', 'requests', 'retrieve', 'single', 'located', 'srcapp', 'folder', 'material', 'module', 'base', 'build', 'related', 'dockerfile', 'docker', 'containerize', 'install', 'httpshubdockercomrcoadypylucene', 'copies', 'required', 'deploys', 'standalone', 'container', 'startupsh', 'shell', 'script', 'setup', 'installation', 'instructions', 'technologies', 'flask', 'packages', 'numpy', 'scikitlearn', 'sklearn', 'scipy', 'modules', 'angularmaterial', 'ngbootstrap', 'installed', 'either', 'local', 'environment', 'cloud', 'instances', 'steps', 'clone', 'open', 'run', 'command', 'sh', 'enable', 'port', 'host', 'machine', 'exposed', 'internet', 'sample', 'favorite', 'browser', 'go', 'snapshots', 'improvements', 'within', 'timeframe', 'implemented', 'initially', 'proposed', 'even', 'fairly', 'optimized', 'response', 'time', 'apis', 'improving', 'future', 'enhancement', 'improved', 'currently', 'takes', 'seconds', 'moreover', 'attempted', 'modify', 'like', 'faced', 'memory', 'limitations', 'ec', 'instance', 'free', 'tier', 'tried', 'development', 'references', 'httpsluceneapacheorgcore__', 'httpsdocsscipyorgdocscipyreferencespatialdistancehtml', 'httpswwwkagglecomelisaxxygaofoodrecsysv', 'httpsgithubcomcoadydocker', 'httpsmaterialangulario', 'contribution', 'members', 'retriever', 'indexer', 'presentation', 'progress', 'report', 'net', 'ids', 'tasks', 'completed', 'test', 'cleansing', 'indexing', 'storing', 'enhanced', 'implementing', 'evaluated', 'options', 'types', 'multivalued', 'library', 'query', 'term', 'parser', 'analyzers', 'data', 'phrase', 'pending', 'pages', 'polymer', 'expected', 'recommender', 'deployment', 'server', 'planning', 'final', 'facing', 'challenges', 'proposal', 'mentioned', 'would', 'solr', 'store', 'however', 'later', 'found', 'sufficient', 'case', 'lot', 'issues', 'installing', 'solution', 'repository', 'helped', 'us', 'automating', 'names', 'netids', 'captain', 'administrative', 'duties', 'lead', 'topic', 'give', 'description', 'task', 'important', 'interesting', 'planned', 'tools', 'systems', 'datasets', 'outcome', 'going', 'evaluate', 'work', 'find', 'result', 'engine', 'allows', 'preferred', 'suggests', 'combination', 'motivation', 'allrecipescom', 'curation', 'curated', 'thousands', 'world', 'ultimate', 'goal', 'develop', 'enhance', 'process', 'retrieving', 'entered', 'recommend', 'viewed', 'layer', 'fine', 'tune', 'parameters', 'better', 'experience', 'adopt', 'contentbased', 'filtering', 'mechanism', 'suggest', 'able', 'enter', 'return', 'along', 'recommendations', 'evaluation', 'needs', 'eg', 'potato', 'select', 'addition', 'programming', 'language', 'plan', 'scikits', 'learn', 'html', 'javascript', 'css', 'justify', 'workload', 'least', 'n', 'hours', 'number', 'students', 'may', 'estimated', 'cost', 'estimate', 'approximately', 'breakup', 'oct', 'nov', 'import', 'ingestion', 'tuning', 'analysis', 'model', 'design', 'dec', 'scenario', 'enters', 'opens', 'preparation', 'become', 'survival', 'skill', 'everyone', 'every', 'day', 'people', 'cuisines', 'methods', 'existing', 'helps']
https://github.com/wdchild/CourseProject	"thursday, december 3, 2020 course project: final report w. daniel child notes on setup to run this code on your own computer you will need to install stanza, chromedriver, search engine parser, and beautifulsoup. installing chromedriver. you must also have the correct version of chromedriver according to your os. i can only speak for my own system, but if using this code on a mac with catalina (macos 10.15.x), then it is critical that you have the appropriate version of chromedriver installed in the folder where the python code is running. also, because catalina has strict developer recognition requirements, you may have to give the driver permission to run. under system preferences / security, you must explicitly bless chromedriver. for details https:// stackoverflow.com/questions/60362018/macos-catalinav-10-15-3-error-chromedriver-cannot- be-opened-because-the-de for details. the version of chromedriver i am uploading to github may not be the one you need for your own computer. installing stanza. theoretically, installation is simple enough using pip. simply run >>> pip install stanza although stanza can be installed using anaconda for python 3.7 or earlier, conda installs will not work if using python 3.8. (i inadvertently tried running stanza from python 3.7 within conda after a pip install and promptly received missing resource errors. so if you use anaconda regularly and want to use stanza, you should install it as follows: >>> conda install -c stanfordnlp stanza taking this step resolves error messages involving missing resources. search engine parser. it appears that google has discontinued free options for using their search api. another option has been developed for python, however, and it seems to work perfectly well. so i have used that as my starting point. you can install the search engine parser as follows: warren daniel child progress report of 1 9 thursday, december 3, 2020 >>> pip install search-engine-parser this search-engine-parser supports different search engines, including google, yahoo, and (allegedly) bing. however, during tests, bing failed miserably, flagging searches as possibly illegal, so i chose not to use it. i did compare yahoo and google for the query `zi ' (literally ""black characters"" but also the name of a flower, in japanese) and found that they had very different results. accordingly, i wrote code that made it possible to use either or both of those engines. project objective as delineated in the project proposal, the purpose of this project is to develop an application that can help japanese translators search for contextual information on rare japanese patent terms and expressions, and to show those terms and expressions in the context where they are used. when one searches for rare patent terms, search engines routinely return irrelevant pages, and one has to hunt for relevant information out of a large number of retrieved urls. from a translator's perspective, it would be extremely helpful to have concise term reports that contain extracts showing exactly where the expression is used. as a bonus, this project also includes automatically generated syntactic analyses of the extracts that are retrieved. why is finding terms problematic in japanese patents, one frequently encounters obscure terms that are not readily found in dictionaries. in addition, because japanese does not partition words by spaces, parsers routinely make mistakes in determining word boundaries. in the case of rare terms, the tendency is to break a longer term into something shorter. as a result, search engines like google frequently return text retrieval results that do not in fact contain the full term in question. for example, imagine you want to find an expression that contained the characters abcde. as it turns out, if bc is considered to be a word, and if de is considered to be a word, then a typical browser search is liable to return urls that match bc, de, or even bcde, but not the full expression abcde. such returned urls are often unhelpful. because so many pages end up being off topic, the translator is frequently forced to browse a large number of irrelevant pages before finding one that contains the term of interest. the purpose of this project is to make it easy to locate pages that actually contain the full term in warren daniel child progress report of 2 9 thursday, december 3, 2020 question (abcde) and to then use stanza's nlp parser to analyze passages that actually contain the data. application structure there are three main pieces of code: analyzer.py scraper.py search.py now, search.py is basically a main function where one can adjust parameters before running a search and conducting an analysis. the other files  namely, scraper.py and analyzer.py,  implement classes that respectively perform the scraping and analysis methods. running the application the analyzer and scraper files serve to implement analyzer and scraper classes that i created. creating classes in this way made it possible for me to encapsulate nearly all of the functionality that is needed for this project. this makes running the code is extremely simple. to run the application, you simply need to set three parameters or variables within search.py: (1) the expression to search (e.g. target = zi ) (2) whether you want to use a google or yahoo engine for the search (3) the maximum depth of the search the expression here should be japanese. i have provided a number of expressions for testing purposes directly into the code. to run one program, you simply need to copy the correct variable names into the class constructor: scraper = scraper(target = <target variable name here>, max_depth = <set depth value here>, engine = <""google"", ""yahoo"", or ""both"" (default)>) the search engine parser returns a page of results that one would see on a normal browser. because i am using a headless browser, one page of results corresponds to approximately 8 - warren daniel child progress report of 3 9 thursday, december 3, 2020 10 urls. the max_depth variable indicates how many pages of urls you want to explore (a depth of 5 would correspond to approximately 50 urls). to avoid long runtimes during project exploration, you may want to keep this to 1. operation once these parameters have been set, the line scraper.run_search() will run code to search each page for the target expression. there is a lot that goes on behind the scenes. scraper operations can be summarized as follows: until max depth is reached or while no matches are found... process a set of pages by obtaining the html (""soup"") for each page searching for the expression on each page collecting text passages where the expression is found the biggest issue here was cleaning up the ""soup"" produced by beautifulsoup. most sources recommend ""decompose"" but it turned out to not be that helpful. a more productive approach was to regular expressions to find if the expression was found, and to indicate which element contained the target expression, and then return that element's text. the results will indicate whether a given url has matches, as follows: url 0 has matches for chu lai xing  a chu lai xing  url 1 has no matches for chu lai xing  url 2 has matches for chu lai xing  h3 2014.12.02 chu lai xing tochu lai gao nowei i p tu mu jian zhu yong yu ni, [chu lai xing ] to[chu lai gao ] gaarimasuga, kono2tsuhatotemoyokusi tayan xie desuga, yi wei hayi na rimasu.  warren daniel child progress report of 4 9 thursday, december 3, 2020 syntactic analysis after the max depth has been reached and all urls have been explored, then operations are conducted by the analyzer, whose main function is to utilize stanza functions. the analyzer obtains the data that was stored by the scraper under its ""results"" instance variable and applies stanza parsing and analysis to that data. this analysis shows that the word in question is similar to another but has a different meaning. 2014.12.02 cd num chu lai  vv verb xing  nn noun to ps adp chu lai gao  nn noun no pn adp wei i nn noun tu mu  nn noun  sym sym jian zhu  nn noun yong yu  nn noun ni ps adp ,  sym punct [ sym punct chu lai xing  nn noun ]  sym punct to pq adp [ sym punct chu lai gao  nn noun ]  sym punct ga ps adp ari vv verb masu av aux ga pc sconj ,  sym punct kono jr det 2 cd num tsu xsc noun ha pk adp totemo rb adv yoku rb adv si  vv verb warren daniel child progress report of 5 9 thursday, december 3, 2020 ta av aux yan xie  nn noun desu av aux ga pc sconj ,  sym punct yi wei  nn noun ha pk adp yi nari vv verb masu av aux .  sym punct parts of speech are indicated in the analysis. because the default printout is rather long, i have used a more tabular approach then the default approach used by stanza at the end, the extracted text and stanza analysis are written to file, and if all goes well, the program terminates. project evaluation being able to get clean text containing the target expression is a huge win. the analysis from stanza (shown above on this page) is helpful as well. the project has been successful in that it does what it is supposed to do. avoiding occasional pitfalls * chromedriver errors twenty hours is not enough time to develop a truly robust parsing function. things sometimes go wrong when scraping. the page may no longer exist, or it may have an anti-scraping function embedded in it. such issues seem to throw an error within chromedriver itself. here is an example of what can happen: traceback (most recent call last): file ""search.py"", line 29, in <module> scraper.run_search() file ""/users/danielchild/desktop/tis/project/courseproject/projectcode/scraper.py"", line 106, in run_search self.process_page_set(self.current_page_set) warren daniel child progress report of 6 9 thursday, december 3, 2020 file ""/users/danielchild/desktop/tis/project/courseproject/projectcode/scraper.py"", line 99, in process_page_set self.get_soup(retrieved_urls[url_num]) file ""/users/danielchild/desktop/tis/project/courseproject/projectcode/scraper.py"", line 64, in get_soup self.driver.get(url) (entering google code below) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/selenium/webdriver/ remote/webdriver.py"", line 333, in get self.execute(command.get, {'url': url}) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/selenium/webdriver/ remote/webdriver.py"", line 321, in execute self.error_handler.check_response(response) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/selenium/webdriver/ remote/errorhandler.py"", line 242, in check_response raise exception_class(message, screen, stacktrace) selenium.common.exceptions.webdriverexception: message: unknown error: net::err_connection_closed (session info: headless chrome=87.0.4280.67) there is not much i can do about errors internal to chromedriver, so to handle the issue more gracefully, i wrapped the driver's get(url) function in a try-except block. if html retrieval fails, then the program will move on to the next url. this seems to have solved the problem, though many more hours of testing would be needed to make sure every conceivable problem could be anticipated. * stanza errors it turns out that stanford's stanza wrapper for corenlp is also buggy. consider this error: traceback (most recent call last): file ""search.py"", line 44, in <module> analyzer.analyze_data() file ""/users/danielchild/desktop/tis/project/courseproject/projectcode/analyzer.py"", line 24, in analyze_data doc = self.nlp(d) (entering stanza code below) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/pipeline/core.py"", line 166, in __call__ doc = self.process(doc) warren daniel child progress report of 7 9 thursday, december 3, 2020 file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/pipeline/core.py"", line 160, in process doc = self.processors[processor_name].process(doc) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/pipeline/ pos_processor.py"", line 30, in process sort_during_eval=true) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/models/pos/ data.py"", line 48, in __init__ self.data = self.chunk_batches(data) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/models/pos/ data.py"", line 150, in chunk_batches (data, ), self.data_orig_idx = sort_all([data], [len(x[0]) for x in data]) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/models/ common/data.py"", line 39, in sort_all return sorted_all[2:], sorted_all[1] indexerror: list index out of range this seems to have occurred because stanza got confused when parsing a very long text passage. to circumvent such errors, i similarly employed a try-except block. * file write errors because the data that is written to file for future analysis is based on stanza, analogous errors can appear when writing to file. *** writing data to file: chu lai gao  analysis.txt *** traceback (most recent call last): file ""search.py"", line 45, in <module> analyzer.write_analysis() file ""/users/danielchild/desktop/tis/project/courseproject/projectcode/analyzer.py"", line 41, in write_analysis doc = self.nlp(d) (entering stanza code below) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/pipeline/core.py"", line 166, in __call__ doc = self.process(doc) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/pipeline/core.py"", line 160, in process doc = self.processors[processor_name].process(doc) warren daniel child progress report of 8 9 thursday, december 3, 2020 file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/pipeline/ pos_processor.py"", line 30, in process sort_during_eval=true) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/models/pos/ data.py"", line 48, in __init__ self.data = self.chunk_batches(data) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/models/pos/ data.py"", line 150, in chunk_batches (data, ), self.data_orig_idx = sort_all([data], [len(x[0]) for x in data]) file ""/users/danielchild/opt/anaconda3/lib/python3.7/site-packages/stanza/models/ common/data.py"", line 39, in sort_all return sorted_all[2:], sorted_all[1] indexerror: list index out of range once again, to make sure that the program exits gracefully, i used a try-except block. assessment of the analysis being able to quickly isolate instances where a particular expression is used, while bypassing web pages that contain portions of the expression but not the entire expression, is highly useful. the stanza analysis is somewhat erratic: given two different text passages, a portion of the expression may sometimes be interpreted as a verb, and elsewhere as a noun, even though the usage is exactly the same in both contexts. clearly more work needs to be done on stanza's end. future avenues of development i have already gone well over 30 hours on this project, but if i had more time i would add functions to check for definitions specifically, as well for english translations of the terms. i would also like to explore other japanese morphological analyzers to see if they perform better. still, in its current form, this project does what it is supposed to, and should provide a solid foundation for people who want to develop a more robust and function-filled application. warren daniel child progress report of 9 9 captain: warren d. child (only member) uiuc id: wchild2 email: wchild2@illinois.edu please note: my original cmt link had an incorrect email address and is invalid. the email above is correct. topic: japanese patent term retrieval: identifying the immediate context in which japanese patent terms are used for linguistic comparison language: python other tools: google programmable search engine kuromoji (japanese morphological analyzer) stanza (python wrapper for stanford core nlp) abstract: japanese patents use a large number of fairly esoteric terms and expressions that are not found in standard dictionaries, and that can therefore be tricky to translate. such terms are a headache for patent translators, and typically one needs to look at a number of documents where the word is employed to understand its significance. this project seeks to build on top of the standard text retrieval capacities of a major search engine like google and add functionality that will make it easy to quickly compare sentences containing such a term. providing laser-focused contextual usage should prove beneficial for technical translators. discussion: unlike normal text retrieval, where one is looking for topic relevance in documents, here one is looking for the correct usage of terms in context. for example, in normal text retrieval, the presence of a term within the title might suggest a higher level of relevance. but from the standpoint of understanding how a word is used in context, it is actual sentences that one hopes to find. the topic and the term are not necessarily that closely related. difficulties: obviously, one diffi culty will be with accurately parsing words in japanese, which does not employ spaces to parse separate words. japanese kanji (hiragana and katakana) can sometimes help to indicate word boundaries, though as often as not, hiragana is used in place of kanji. equally troublesome is the tendency to sometimes use hiragana (or even katakana) in place of characters, or to use variant characters for the same character. i will be researching ways to address this issue. it is unclear how successful kuromoji will be with more esoteric patent terms. if it does not work or does not allow one to supplement their dictionaries, i may have to use another tool (stanford's stanza being a possible alternative). added functionality: taking the search results from the initial search, i will be parsing the retrieved documents to identify context sentences where the critical term occurs. those sentences will be retrieved in a single document for comparison purposes. search results that do not have the requisite vocabulary, or only have it in a non-sentence, will be eliminated from the results. success benchmarks: if i am able to routinely prepare clean sets of sample sentences for problematic japanese patent-specific terms, i will consider this successful. often, search results return a potentially useful document, but because of document length, it is hard to see where the relevant portion or portions are. having cleanly parsed relevant sample sentences would be a great time-saver for translators and other linguists. hours expended: between having to learn the kuromoji api, possibly stanza, features of the google programmable search engine, and writing scripts to parse the relevant parts of the returned documents should take more than 20 hours. note: i discussed this topic proposal with the professor, and the idea of adding functionality to google was actually his suggestion. i am open to more suggestions on how to make this a useful tool for persons like myself who work as translators. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. saturday, november 28, 2020 course project progress report w. daniel child project objective as delineated in the project proposal, my goal is to develop a suite of search functions that make it easier to search for rare japanese patent terms and to show those terms in context. with rare terms like this, search engines often return irrelevant pages, and one has to hunt for the immediate context in question. from a translator's perspective, it would be extremely helpful to have concise reports on term contexts to understand how the terms are used. the following is a report on what i have accomplished so far. setting up search engine capabilities it appears that google has discontinued free options for using their search api. another option has been developed for python, however, and it seems to work perfectly well. so i am using that as my starting point. so i installed the search engine parser as follows: pip install search-engine-parser it turns out that this search-engine-parser supports different search engines, including google, yahoo, and (allegedly) bing. however, bing failed miserably, flagging searches as possibly illegal, and so i didn't use it. i did compare yahoo and google for the query `zi ' (""black characters"" in japanese) and found that they had very different results. google top 3 'https://www.google.com/url?q=http://verdure.tyanoyu.net/ kuromoji.html&sa=u&ved=2ahukewjinaflt6btahwdfvkfheg5c2e4chawmaz6bagheae&usg=a ovvaw1bg6rjjulckadfysl1shwf' 'https://www.google.com/url?q=http://www.jugemusha.com/jumoku-zz- kuromoji.htm&sa=u&ved=2ahukewjinaflt6btahwdfvkfheg5c2e4chawmad6bagieae&usg=ao vvaw17dfx2w6l1a6nug5sqgjt6' warren daniel child progress report of 1 3 saturday, november 28, 2020 'https://www.google.com/url?q=https://www.nakagawa-masashichi.jp/shop/g/ g4547639507716/ &sa=u&ved=2ahukewjinaflt6btahwdfvkfheg5c2e4chawmah6bagjeae&usg=aovvaw2jvwx- z7pwg8sewu7vb9su' yahoo top 3 'https://ja.wikipedia.org/wiki/ %25e3%2582%25af%25e3%2583%25ad%25e3%2583%25a2%25e3%2582%25b8' 'https://www.weblio.jp/content/ %25e9%25bb%2592%25e6%2596%2587%25e5%25ad%2597' 'https://search.rakuten.co.jp/search/mall/ %25e9%25bb%2592%25e6%2596%2587%25e5%25ad%2597/' spot-checking the different websites, i actually found some of the yahoo websites more helpful. i have therefore decided to incorporate both search engines into the patent search system. parser once you have a list of web pages, the next step is, of course, to be able to parse these individual pages. i am currently developing the parser (based on beautifulsoup) to look for the target terms. since the point is to understand rare terms from context, i need to see sentences and not just headings or titles, which will not be of much help from a context standpoint. i am also going to develop a capability that is sensitive to the possibility of the term being defined, and i am also entertaining the possibility of looking for cases where the term is actually translated into english. text analysis and issues being faced i have already tested stanza (stanford's python wrapper for stanford corenlp) and it is looks to be capable of handling japanese so long as you install it correctly (you need to pay attention to whether you are using vanilla python or python via an anaconda environment) and utilize the right module. given its inability to properly parse some fairly straightforward terms, however, it is equally clear that the terms i will be testing against will not tend to be in the stanza dictionaries, meaning that they will not be parsed correctly. warren daniel child progress report of 2 3 saturday, november 28, 2020 that may not matter. i will be able to recognize such terms as appearing in consecutive lemmas. stanza has a function that enables you to parse sentences, so once i have identified the surrounding context, i should be to pull the context that i am looking for. i have not yet decided whether to it will be necessary to incorporate alternative japanese tokenizers such as juman or kuromoji. what remains to be done obviously, i need to continue working on the parser, and to make it successfully pulls out the information i need from each of the web pages returned by the search engine parser. stanza sentence identification needs to be smoothly integrated so that it goes to work on the data extracted by the web parser. once this has been done, i want to demonstrate how many websites could be bypassed by using this system, and how much easier it is for a translator like myself to find contextual information about rare terms. the final step will be to generate clean reports based on the data that i have extracted. warren daniel child progress report of 3 3"	['thursday', 'december', 'course', 'project', 'final', 'report', 'w', 'daniel', 'child', 'notes', 'setup', 'run', 'code', 'computer', 'need', 'install', 'stanza', 'chromedriver', 'search', 'engine', 'parser', 'beautifulsoup', 'installing', 'must', 'also', 'correct', 'version', 'according', 'os', 'speak', 'system', 'using', 'mac', 'catalina', 'macos', 'x', 'critical', 'appropriate', 'installed', 'folder', 'python', 'running', 'strict', 'developer', 'recognition', 'requirements', 'may', 'give', 'driver', 'permission', 'preferences', 'security', 'explicitly', 'bless', 'details', 'https', 'stackoverflowcomquestionsmacoscatalinaverrorchromedrivercannot', 'beopenedbecausethede', 'uploading', 'github', 'one', 'theoretically', 'installation', 'simple', 'enough', 'pip', 'simply', 'although', 'anaconda', 'earlier', 'conda', 'installs', 'work', 'inadvertently', 'tried', 'within', 'promptly', 'received', 'missing', 'resource', 'errors', 'use', 'regularly', 'want', 'follows', 'c', 'stanfordnlp', 'taking', 'step', 'resolves', 'error', 'messages', 'involving', 'resources', 'appears', 'google', 'discontinued', 'free', 'options', 'api', 'another', 'option', 'developed', 'however', 'seems', 'perfectly', 'well', 'used', 'starting', 'point', 'warren', 'progress', 'searchengineparser', 'supports', 'different', 'engines', 'including', 'yahoo', 'allegedly', 'bing', 'tests', 'failed', 'miserably', 'flagging', 'searches', 'possibly', 'illegal', 'chose', 'compare', 'query', 'zi', 'literally', 'black', 'characters', 'name', 'flower', 'japanese', 'found', 'results', 'accordingly', 'wrote', 'made', 'possible', 'either', 'objective', 'delineated', 'proposal', 'purpose', 'develop', 'application', 'help', 'translators', 'contextual', 'information', 'rare', 'patent', 'terms', 'expressions', 'show', 'context', 'routinely', 'return', 'irrelevant', 'pages', 'hunt', 'relevant', 'large', 'number', 'retrieved', 'urls', 'perspective', 'would', 'extremely', 'helpful', 'concise', 'term', 'reports', 'contain', 'extracts', 'showing', 'exactly', 'expression', 'bonus', 'includes', 'automatically', 'generated', 'syntactic', 'analyses', 'finding', 'problematic', 'patents', 'frequently', 'encounters', 'obscure', 'readily', 'dictionaries', 'addition', 'partition', 'words', 'spaces', 'parsers', 'make', 'mistakes', 'determining', 'word', 'boundaries', 'case', 'tendency', 'break', 'longer', 'something', 'shorter', 'result', 'like', 'text', 'retrieval', 'fact', 'full', 'question', 'example', 'imagine', 'find', 'contained', 'abcde', 'turns', 'bc', 'considered', 'de', 'typical', 'browser', 'liable', 'match', 'even', 'bcde', 'returned', 'often', 'unhelpful', 'many', 'end', 'topic', 'translator', 'forced', 'browse', 'contains', 'interest', 'easy', 'locate', 'actually', 'stanzas', 'nlp', 'analyze', 'passages', 'data', 'structure', 'three', 'main', 'pieces', 'analyzerpy', 'scraperpy', 'searchpy', 'basically', 'function', 'adjust', 'parameters', 'conducting', 'analysis', 'files', 'namely', 'implement', 'classes', 'respectively', 'perform', 'scraping', 'methods', 'analyzer', 'scraper', 'serve', 'created', 'creating', 'way', 'encapsulate', 'nearly', 'functionality', 'needed', 'makes', 'set', 'variables', 'eg', 'target', 'whether', 'maximum', 'depth', 'provided', 'testing', 'purposes', 'directly', 'program', 'copy', 'variable', 'names', 'class', 'constructor', 'scrapertarget', 'max_depth', 'value', 'default', 'returns', 'page', 'see', 'normal', 'headless', 'corresponds', 'approximately', 'indicates', 'explore', 'correspond', 'avoid', 'long', 'runtimes', 'exploration', 'keep', 'operation', 'line', 'scraperrun_search', 'lot', 'goes', 'behind', 'scenes', 'operations', 'summarized', 'max', 'reached', 'matches', 'process', 'obtaining', 'html', 'soup', 'searching', 'collecting', 'biggest', 'issue', 'cleaning', 'produced', 'sources', 'recommend', 'decompose', 'turned', 'productive', 'approach', 'regular', 'indicate', 'element', 'elements', 'given', 'url', 'chu', 'lai', 'xing', 'h', 'tochu', 'gao', 'nowei', 'p', 'tu', 'mu', 'jian', 'zhu', 'yong', 'yu', 'ni', 'gaarimasuga', 'konotsuhatotemoyokusi', 'tayan', 'xie', 'desuga', 'yi', 'wei', 'hayi', 'na', 'rimasu', 'explored', 'conducted', 'whose', 'utilize', 'functions', 'obtains', 'stored', 'instance', 'applies', 'parsing', 'shows', 'similar', 'meaning', 'cd', 'num', 'vv', 'verb', 'nn', 'noun', 'ps', 'adp', 'pn', 'sym', 'punct', 'pq', 'ga', 'ari', 'masu', 'av', 'aux', 'pc', 'sconj', 'kono', 'jr', 'det', 'tsu', 'xsc', 'ha', 'pk', 'totemo', 'rb', 'adv', 'yoku', 'si', 'ta', 'yan', 'desu', 'nari', 'parts', 'speech', 'indicated', 'printout', 'rather', 'tabular', 'extracted', 'written', 'file', 'terminates', 'evaluation', 'able', 'get', 'clean', 'containing', 'huge', 'win', 'shown', 'successful', 'supposed', 'avoiding', 'occasional', 'pitfalls', 'twenty', 'hours', 'time', 'truly', 'robust', 'things', 'sometimes', 'go', 'wrong', 'exist', 'antiscraping', 'embedded', 'issues', 'seem', 'throw', 'happen', 'traceback', 'recent', 'call', 'last', 'module', 'usersdanielchilddesktoptisprojectcourseprojectprojectcodescraperpy', 'run_search', 'selfprocess_page_setselfcurrent_page_set', 'process_page_set', 'selfget_soupretrieved_urlsurl_num', 'get_soup', 'selfdrivergeturl', 'entering', 'usersdanielchildoptanacondalibpythonsitepackagesseleniumwebdriver', 'remotewebdriverpy', 'selfexecutecommandget', 'execute', 'selferror_handlercheck_responseresponse', 'remoteerrorhandlerpy', 'check_response', 'raise', 'exception_classmessage', 'screen', 'stacktrace', 'seleniumcommonexceptionswebdriverexception', 'message', 'unknown', 'neterr_connection_closed', 'session', 'info', 'chrome', 'much', 'internal', 'handle', 'gracefully', 'wrapped', 'drivers', 'geturl', 'tryexcept', 'block', 'fails', 'move', 'next', 'solved', 'problem', 'though', 'sure', 'every', 'conceivable', 'could', 'anticipated', 'stanfords', 'wrapper', 'corenlp', 'buggy', 'consider', 'analyzeranalyze_data', 'usersdanielchilddesktoptisprojectcourseprojectprojectcodeanalyzerpy', 'analyze_data', 'doc', 'selfnlpd', 'usersdanielchildoptanacondalibpythonsitepackagesstanzapipelinecorepy', '__call__', 'selfprocessdoc', 'selfprocessorsprocessor_nameprocessdoc', 'usersdanielchildoptanacondalibpythonsitepackagesstanzapipeline', 'pos_processorpy', 'sort_during_evaltrue', 'usersdanielchildoptanacondalibpythonsitepackagesstanzamodelspos', 'datapy', '__init__', 'selfdata', 'selfchunk_batchesdata', 'chunk_batches', 'selfdata_orig_idx', 'sort_alldata', 'lenx', 'usersdanielchildoptanacondalibpythonsitepackagesstanzamodels', 'commondatapy', 'sort_all', 'sorted_all', 'indexerror', 'list', 'index', 'range', 'occurred', 'got', 'confused', 'passage', 'circumvent', 'similarly', 'employed', 'write', 'future', 'based', 'analogous', 'appear', 'writing', 'analysistxt', 'analyzerwrite_analysis', 'write_analysis', 'exits', 'assessment', 'quickly', 'isolate', 'instances', 'particular', 'bypassing', 'web', 'portions', 'entire', 'highly', 'useful', 'somewhat', 'erratic', 'two', 'portion', 'interpreted', 'elsewhere', 'usage', 'contexts', 'clearly', 'needs', 'done', 'avenues', 'development', 'already', 'gone', 'add', 'check', 'definitions', 'specifically', 'english', 'translations', 'morphological', 'analyzers', 'better', 'still', 'current', 'form', 'provide', 'solid', 'foundation', 'people', 'functionfilled', 'captain', 'member', 'uiuc', 'id', 'wchild', 'email', 'wchildillinoisedu', 'please', 'note', 'original', 'cmt', 'link', 'incorrect', 'address', 'invalid', 'identifying', 'immediate', 'linguistic', 'comparison', 'language', 'tools', 'programmable', 'kuromoji', 'stanford', 'core', 'abstract', 'fairly', 'esoteric', 'standard', 'therefore', 'tricky', 'translate', 'headache', 'typically', 'look', 'documents', 'understand', 'significance', 'seeks', 'build', 'top', 'capacities', 'major', 'sentences', 'providing', 'laserfocused', 'prove', 'beneficial', 'technical', 'discussion', 'unlike', 'looking', 'relevance', 'presence', 'title', 'might', 'suggest', 'higher', 'level', 'standpoint', 'understanding', 'actual', 'hopes', 'necessarily', 'closely', 'related', 'difficulties', 'obviously', 'diffi', 'culty', 'accurately', 'employ', 'parse', 'separate', 'kanji', 'hiragana', 'katakana', 'place', 'equally', 'troublesome', 'variant', 'character', 'researching', 'ways', 'unclear', 'allow', 'supplement', 'tool', 'alternative', 'added', 'initial', 'identify', 'occurs', 'single', 'document', 'requisite', 'vocabulary', 'nonsentence', 'eliminated', 'success', 'benchmarks', 'prepare', 'sets', 'sample', 'patentspecific', 'potentially', 'length', 'hard', 'cleanly', 'parsed', 'great', 'timesaver', 'linguists', 'expended', 'learn', 'features', 'scripts', 'take', 'discussed', 'professor', 'idea', 'adding', 'suggestion', 'open', 'suggestions', 'persons', 'courseproject', 'fork', 'repository', 'paste', 'microsoft', 'detailed', 'instructions', 'coursera', 'week', 'overviewweek', 'activities', 'saturday', 'november', 'goal', 'suite', 'easier', 'following', 'accomplished', 'far', 'setting', 'capabilities', 'didnt', 'httpswwwgooglecomurlqhttpverduretyanoyunet', 'kuromojihtmlsauvedahukewjinafltbtahwdfvkfhegcechawmazbagheaeusga', 'ovvawbgrjjulckadfyslshwf', 'httpswwwgooglecomurlqhttpwwwjugemushacomjumokuzz', 'kuromojihtmsauvedahukewjinafltbtahwdfvkfhegcechawmadbagieaeusgao', 'vvawdfxwlanugsqgjt', 'httpswwwgooglecomurlqhttpswwwnakagawamasashichijpshopg', 'g', 'sauvedahukewjinafltbtahwdfvkfhegcechawmahbagjeaeusgaovvawjvwx', 'zpwgsewuvbsu', 'httpsjawikipediaorgwiki', 'eafeadeaeb', 'httpswwwwebliojpcontent', 'ebbeead', 'httpssearchrakutencojpsearchmall', 'spotchecking', 'websites', 'decided', 'incorporate', 'individual', 'currently', 'developing', 'since', 'headings', 'titles', 'going', 'capability', 'sensitive', 'possibility', 'defined', 'entertaining', 'cases', 'translated', 'faced', 'tested', 'looks', 'capable', 'handling', 'correctly', 'pay', 'attention', 'vanilla', 'via', 'environment', 'right', 'inability', 'properly', 'straightforward', 'clear', 'tend', 'matter', 'recognize', 'appearing', 'consecutive', 'lemmas', 'enables', 'identified', 'surrounding', 'pull', 'yet', 'necessary', 'tokenizers', 'juman', 'remains', 'continue', 'working', 'successfully', 'pulls', 'sentence', 'identification', 'smoothly', 'integrated', 'demonstrate', 'bypassed', 'generate']
https://github.com/wfcwfcwfcwfc/CourseProject	"cs 410 course project - final report source code and test set predictions code: https://github.com/wfcwfcwfcwfc/courseproject/blob/main/cs410-classification-contest.ipynb test set predictions: https://github.com/wfcwfcwfcwfc/courseproject/blob/main/cs410-classification-contest-result.txt explain your model, and how you perform the training. describe your experiments with other methods that you may have tried and any hyperparameter tuning. the classifier uses bert transformer deep learning framework at its core. bert is a recent nlp framework based on transformer and self-attention architecture. it serves the ""encoder"" in the transformer model and is widely adopted in text generation and text classification. training a bert model generally has two stages: pre-training and fine-tuning. pre-training aims at providing bert a general understanding of a language. this step builds the embeddings and trains the parameters. fine-tuning is optimizing bert for certain specific tasks. pre-training requires large language corpus and tremendous computing power. a common practice is to use existing pre-trained model and fine-tuning for the specific task. in this scenario, i use ""bert-large-cased-whole-word- masking"" from hugging-face as pre-trained model, then fine-tuned with the training data provided. after fine-tuning, the model is capable to perform predictions. the performance with default parameters beats the baseline. i also explored other pre-trained models like ""distilbert-base-uncased"", ""roberta-base"", ""xlnet-base- cased"". they all have smaller number of parameters compared to ""bert-large-cased-whole-word- masking"". the performance is good on training set but does not pass the baseline in test data. on engineering side, the model was implemented with pytorch and deployed on microsoft azure ml studio. it provided convenient middleware for ml tasks for easy deployment and prototyping. all the fine-tuning was done on a single compute, gpu instance and running time is less than 10 minutes. compute gpu instance pre-installed with cuda 10.1. all code is contained in the notebook shown in the beginning of this document. i used the ""nlp best practices"" library as well as ""nlp utilities"" library to build the classifier. these libraries also provided example templates which is referenced in this project. demo and tutorial environment setup sign up for microsoft azure. create a subscription that allows you to use gpu instances. student email get $100 free credit. create resource group and ml workspace in the created workspace, launch ml studio. create gpu compute instance and start. upload notebook file, data file and clone the nlp library. update conda: conda update -n base -c defaults conda generate conda env config: cd nlp-recipes python tools/generate_conda_file.py --gpu open nlp_gpu.yaml, update pytorch version from 1.4.0 to 1.5.1 create anaconda env conda env create -n nlp_gpu -f nlp_gpu.yaml conda activate nlp_gpu register this virtual env to notebook python -m ipykernel install --user --name nlp_gpu --display-name ""python (nlp_gpu)"" the environment setup is complete at this point. running the notebook open notebook and set kernel as 'nlp_gpu'. run the notebook, and the result shows up in ""answer.txt"" intermediate output can be seen in the notebook. performance passed the baseline. cs 410 course project progress report classification competition - twitter sarcasm detection which tasks have been completed? overall design, implementation and testing. bert was decided as the core language model. using pre-training then fine-tuning is the primary strategy. pytorch as the implementation framework. microsoft azure ml platform as the deployment environment. which tasks are pending? fine-tuning data to beat the baseline. using context data to improve the scores. are you facing any challenges? no cs 410 project proposal fengchao wang, fw9@illinois.edu 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. fengchao wang - captain 2. which competition do you plan to join? text classification competition: twitter sarcasm detection 3. 1. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. n/a 2. if you choose the classification competition, are you prepared to learn state-of- the-art neural network classifiers? yes 3. name some neural classifiers and deep learning frameworks that you may have heard of. rnn, lstm, gan, cnn. tensorflow, keras, pytorch 4. describe any relevant prior experience with such methods used lstm model to predict stock price and performed operational metric anomaly detection. implemented with facebook's prophet package. 4. which programming language do you plan to use? python courseproject feel free to reach out if any explnation needed. slack: fw9 final report code result demo video"	['cs', 'course', 'project', 'final', 'report', 'source', 'code', 'test', 'set', 'predictions', 'httpsgithubcomwfcwfcwfcwfccourseprojectblobmaincsclassificationcontestipynb', 'httpsgithubcomwfcwfcwfcwfccourseprojectblobmaincsclassificationcontestresulttxt', 'explain', 'model', 'perform', 'training', 'describe', 'experiments', 'methods', 'may', 'tried', 'hyperparameter', 'tuning', 'classifier', 'uses', 'bert', 'transformer', 'deep', 'learning', 'framework', 'core', 'recent', 'nlp', 'based', 'selfattention', 'architecture', 'serves', 'encoder', 'widely', 'adopted', 'text', 'generation', 'classification', 'generally', 'two', 'stages', 'pretraining', 'finetuning', 'aims', 'providing', 'general', 'understanding', 'language', 'step', 'builds', 'embeddings', 'trains', 'parameters', 'optimizing', 'certain', 'specific', 'tasks', 'requires', 'large', 'corpus', 'tremendous', 'computing', 'power', 'common', 'practice', 'use', 'existing', 'pretrained', 'task', 'scenario', 'bertlargecasedwholeword', 'masking', 'huggingface', 'finetuned', 'data', 'provided', 'capable', 'performance', 'default', 'beats', 'baseline', 'also', 'explored', 'models', 'like', 'distilbertbaseuncased', 'robertabase', 'xlnetbase', 'cased', 'smaller', 'number', 'compared', 'good', 'pass', 'engineering', 'side', 'implemented', 'pytorch', 'deployed', 'microsoft', 'azure', 'ml', 'studio', 'convenient', 'middleware', 'easy', 'deployment', 'prototyping', 'done', 'single', 'compute', 'gpu', 'instance', 'running', 'time', 'less', 'minutes', 'preinstalled', 'cuda', 'contained', 'notebook', 'shown', 'beginning', 'document', 'used', 'best', 'practices', 'library', 'well', 'utilities', 'build', 'libraries', 'example', 'templates', 'referenced', 'demo', 'tutorial', 'environment', 'setup', 'sign', 'create', 'subscription', 'allows', 'instances', 'student', 'email', 'get', 'free', 'credit', 'resource', 'group', 'workspace', 'created', 'launch', 'start', 'upload', 'file', 'clone', 'update', 'conda', 'n', 'base', 'c', 'defaults', 'generate', 'env', 'config', 'cd', 'nlprecipes', 'python', 'toolsgenerate_conda_filepy', 'open', 'nlp_gpuyaml', 'version', 'anaconda', 'nlp_gpu', 'f', 'activate', 'register', 'virtual', 'ipykernel', 'install', 'user', 'name', 'displayname', 'complete', 'point', 'kernel', 'run', 'result', 'shows', 'answertxt', 'intermediate', 'output', 'seen', 'passed', 'progress', 'competition', 'twitter', 'sarcasm', 'detection', 'completed', 'overall', 'design', 'implementation', 'testing', 'decided', 'using', 'primary', 'strategy', 'platform', 'pending', 'beat', 'context', 'improve', 'scores', 'facing', 'challenges', 'proposal', 'fengchao', 'wang', 'fwillinoisedu', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'plan', 'join', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'etc', 'concrete', 'tools', 'heard', 'na', 'stateof', 'theart', 'neural', 'network', 'classifiers', 'yes', 'frameworks', 'rnn', 'lstm', 'gan', 'cnn', 'tensorflow', 'keras', 'relevant', 'prior', 'experience', 'predict', 'stock', 'price', 'performed', 'operational', 'metric', 'anomaly', 'facebooks', 'prophet', 'package', 'programming', 'courseproject', 'feel', 'reach', 'explnation', 'needed', 'slack', 'fw', 'video']
https://github.com/williamdlupo/CourseProject	polititweet application suite polititweet is an application suite that mines us politician tweets, builds a lucene index and provides a web based application for querying and displaying results. the deployed, working appliation s located at: https://polititweetui.azurewebsites.net tweetminer - a c# azure function that runs at 12pm est to extract and store the previous 24 hours of tweets of us politicians. leverages the twitter api and stores tweets in an azure database. repo url: https://github.com/williamdlupo/tweetminer searchapi - a java azure function application that builds and queries a lucene index built upon tweets stored in an azure database. repo url: https://github.com/williamdlupo/searchapi polititweet-ui - a .net core 3 mvc application that accepts user queries, sends queries to deployed searchapi and displays matching tweets.	['polititweet', 'application', 'suite', 'mines', 'us', 'politician', 'tweets', 'builds', 'lucene', 'index', 'provides', 'web', 'based', 'querying', 'displaying', 'results', 'deployed', 'working', 'appliation', 'located', 'httpspolititweetuiazurewebsitesnet', 'tweetminer', 'c', 'azure', 'function', 'runs', 'pm', 'est', 'extract', 'store', 'previous', 'hours', 'politicians', 'leverages', 'twitter', 'api', 'stores', 'database', 'repo', 'url', 'httpsgithubcomwilliamdlupotweetminer', 'searchapi', 'java', 'queries', 'built', 'upon', 'stored', 'httpsgithubcomwilliamdluposearchapi', 'polititweetui', 'net', 'core', 'mvc', 'accepts', 'user', 'sends', 'displays', 'matching']
https://github.com/woshinisenbaba/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/xiang-wang2020/CourseProject	"1) progress made thus far the website is deployed. front-end is near finished. the database is built. it is based on university, location, name, and other information. 2) remaining tasks the backend and the search function. 3) any challenges/issues being faced. based on the ta's instruction, i have narrowed my goal into ""replicate expertsearch,"" and i would like to make sure if this is sufficient. i find my peers say the course ta could provide the existing data. i wonder if this is true. project proposal i. team information this will be an individual team. project name: individual project topic: 2.2 expertsearch system team member: xiang wang (xiangw3@illinois.edu) project leader/coordinator: xiang wang ii. details brief idea: i have chosen to work on the expertsearch system. i would like to write a my own version of the expertsearch system, and the system will have functions includes: a website supporting search functions, a database filled with crawled data from testing university, and a new function to support automatically crawling data from a given university. usefulness demonstration: if anyone ever need to quickly look up a professor, this website will save them time from search themselves, and the new function will make the whole website live, because it expands over time and will be improved every time a user use it. about tools: i would like to use python for backend, and mysql for database. i do not have an idea about search algorithm yet, but i will have it figured out soon. how to show my function work as expected: my plan includes adding a new function, and i crawl some data (university faculty info) as my test data and test them against my function. about time: i think building the website, from front end to back end will take at least 15 hours, build the new function will take 10 hours, and testing and other stuff will take 10 hours. together they are about 35 hours. about timeline: by week 12: have the website ready. by week 14: have the new function ready. video demo https://drive.google.com/file/d/1x6jixafp2zzaarohjzvi2y-yqfiez-sr/view?usp=sharing how to set up: download the package to your local computer open a terminal and move into the folder run ""pip install -r packages.txt"" run python start.py go to http://127.0.0.1:5000/ in your browser what does it do: the goal is to replicate expertsearch system, a course project built by former cs410 students (original link: http://timan102.cs.illinois.edu/expertsearch//#). the essential function is to search and display ranked information of faculties from many universities. the algorithm behind expertsearch is relevance ranker. in this version, i used cosine similarity to rank the documents. the documents are turned into vectors, following the guidance of tf*idf algorithm, and ranked based on how similar they are from the query. meanwhile, you are able to set up the must-include and must-exclude keywords and set up the number of results you want to see. introduce my files: most of the data cleaning and processing work is in process.py. start.py handles the backend, and templates/index.html handles the frontend. the search result will be displayed by templates/result. html. faculties.py includes 999 lines of crawled data from different universities, and every line is one section/person. testcase.txt includes some sample testcases for the grader."	['progress', 'made', 'thus', 'far', 'website', 'deployed', 'frontend', 'near', 'finished', 'database', 'built', 'based', 'university', 'location', 'name', 'information', 'remaining', 'tasks', 'backend', 'search', 'function', 'challengesissues', 'faced', 'tas', 'instruction', 'narrowed', 'goal', 'replicate', 'expertsearch', 'would', 'like', 'make', 'sure', 'sufficient', 'find', 'peers', 'say', 'course', 'ta', 'could', 'provide', 'existing', 'data', 'wonder', 'true', 'project', 'proposal', 'team', 'individual', 'topic', 'system', 'member', 'xiang', 'wang', 'xiangwillinoisedu', 'leadercoordinator', 'ii', 'details', 'brief', 'idea', 'chosen', 'work', 'write', 'version', 'functions', 'includes', 'supporting', 'filled', 'crawled', 'testing', 'new', 'support', 'automatically', 'crawling', 'given', 'usefulness', 'demonstration', 'anyone', 'ever', 'need', 'quickly', 'look', 'professor', 'save', 'time', 'whole', 'live', 'expands', 'improved', 'every', 'user', 'use', 'tools', 'python', 'mysql', 'algorithm', 'yet', 'figured', 'soon', 'show', 'expected', 'plan', 'adding', 'crawl', 'faculty', 'info', 'test', 'think', 'building', 'front', 'end', 'back', 'take', 'least', 'hours', 'build', 'stuff', 'together', 'timeline', 'week', 'ready', 'video', 'demo', 'httpsdrivegooglecomfiledxjixafpzzaarohjzviyyqfiezsrviewuspsharing', 'set', 'download', 'package', 'local', 'computer', 'open', 'terminal', 'move', 'folder', 'run', 'pip', 'install', 'r', 'packagestxt', 'startpy', 'go', 'http', 'browser', 'former', 'cs', 'students', 'original', 'link', 'httptimancsillinoiseduexpertsearch', 'essential', 'display', 'ranked', 'faculties', 'many', 'universities', 'behind', 'relevance', 'ranker', 'used', 'cosine', 'similarity', 'rank', 'documents', 'turned', 'vectors', 'following', 'guidance', 'tfidf', 'similar', 'query', 'meanwhile', 'able', 'mustinclude', 'mustexclude', 'keywords', 'number', 'results', 'want', 'see', 'introduce', 'files', 'cleaning', 'processing', 'processpy', 'handles', 'templatesindexhtml', 'result', 'displayed', 'templatesresult', 'html', 'facultiespy', 'lines', 'different', 'line', 'one', 'sectionperson', 'testcasetxt', 'sample', 'testcases', 'grader']
https://github.com/xw23/CourseProject	"software implementation: the implementation for this program comes in two parts. we decided to use a naive bayes methodology, which starts with a training method and then uses that data to predict classifications onto a testing dataset. we use a bag of words model in which we consider each tweet to be represented as a bag of independent words, meaning that we will ignore the position that the words appear and only deal with the frequency that they appear. using a unigram model, the program first calls the training function found in training.py, which goes through the training data given and creates a bag of words model. because each tweet is pre labeled as either sarcasm or not sarcasm, we can treat each tweet as a list of words using the nltk tweettokenizer. this method returns a list of sarcastic words and their frequencies, a list of non-sarcastic words and their frequencies, as well as totals for both sarcastic and non sarcastic words. after that, during the classification phase, the program calculates the probability for each tweet to be sarcastic or non-sarcastic based on the probabilities that were developed from the training set. the program develops a posterior probability for each tweet, and based on which is higher, classifies the tweet as either sarcastic or non-sarcastic. in order to avoid zero probabilities, we have a smoothing parameter in place, which has been optimized to give the best results. installation and running: to install the software, first clone this git repository: https://github.com/shail4221/classification-competition.git once finished, you can run the program inside by running python classify.py. this will train the data on the train.jsonl file, run the classification on the test.jsonl file, and output the results into answer.txt description of contribution: both members worked together mostly equally, with xuechen focusing primarily on the training side of the program and shail focusing on the classification side. both team members worked together to refine and test the program for accuracy. team25 progress report team name: team25 team members: xuechen wang(xuechen5), shail desai(shailrd2) project topic: reproducing a paper * subtopic: pattern annotation * paper to be recreated: latent aspect rating analysis without aspect keyword supervision (by hongning wang, yue lu, and chengxiang zhai. 2011) progress made thus far: we retrieved the dataset, and looked in and did preliminary processing of the dataset. we read through the research paper and made some notes, and communicated our ideas about how to build the laram model. remaining tasks: write python scripts to build the laram model. compare our results with the authors' results. write and submit our project report. challenges/issues faced: we are having a hard time to understand and implement the functions for mining latent topics and the lara function. team25 project proposal team name: team25 team members: xuechen wang(xuechen5), shail desai(shailrd2) captain: xuechen wang(xuechen5) project topic: reproducing a paper * subtopic: pattern annotation * paper to be recreated: latent aspect rating analysis without aspect keyword supervision (by hongning wang, yue lu, and chengxiang zhai. 2011) programming language to use: python the datasets used in the paper for evaluation: can be found in http://sifaka.cs.uiuc.edu/~wang296/data/index.html courseproject software implementation: the implementation for this program comes in two parts. we decided to use a naive bayes methodology, which starts with a training method and then uses that data to predict classifications onto a testing dataset. we use a bag of words model in which we consider each tweet to be represented as a bag of independent words, meaning that we will ignore the position that the words appear and only deal with the frequency that they appear. using a unigram model, the program first calls the training function found in train.py, which goes through the training data given and creates a bag of words model. because each tweet is pre-labeled as either ""sarcasm"" or ""not_sarcasm"", we can treat each tweet as a list of words using the nltk tweettokenizer. this method returns a list of sarcastic words and their frequencies, a list of non-sarcastic words and their frequencies, as well as totals for both sarcastic and non sarcastic words. after that, during the classification phase, the program calculates the probability for each tweet to be ""sarcasm"" or ""not_sarcasm"" based on the probabilities that were developed from the training set. the program develops a posterior probability for each tweet, and based on which is higher, classifies the tweet as either ""sarcasm""or ""not_sarcasm"". in order to avoid zero probabilities, we have a smoothing parameter in place, which has been optimized to give the best results. installation and running: to install the software, first clone this git repository: https://github.com/shail4221/classification-competition.git once finished, you can run the program inside by running python classify.py. this will train the data on the train.jsonl file, run the classification on the test.jsonl file, and output the results into answer.txt the video demo for running the code could be found at: https://drive.google.com/file/d/14abgsfp8gjn4irpimjk375e4egvlowgn/view?usp=sharing description of contribution: both members worked together mostly equally, with xuechen focusing primarily on the training side of the program and shail focusing on the classification side. both team members worked together to refine and test the program for accuracy. the training file is train.py, the classification file is classify.py, and the output file is answer.txt. the link to video demo is also in videolink.txt. thank you."	['software', 'implementation', 'program', 'comes', 'two', 'parts', 'decided', 'use', 'naive', 'bayes', 'methodology', 'starts', 'training', 'method', 'uses', 'data', 'predict', 'classifications', 'onto', 'testing', 'dataset', 'bag', 'words', 'model', 'consider', 'tweet', 'represented', 'independent', 'meaning', 'ignore', 'position', 'appear', 'deal', 'frequency', 'using', 'unigram', 'first', 'calls', 'function', 'found', 'trainingpy', 'goes', 'given', 'creates', 'pre', 'labeled', 'either', 'sarcasm', 'treat', 'list', 'nltk', 'tweettokenizer', 'returns', 'sarcastic', 'frequencies', 'nonsarcastic', 'well', 'totals', 'non', 'classification', 'phase', 'calculates', 'probability', 'based', 'probabilities', 'developed', 'set', 'develops', 'posterior', 'higher', 'classifies', 'order', 'avoid', 'zero', 'smoothing', 'parameter', 'place', 'optimized', 'give', 'best', 'results', 'installation', 'running', 'install', 'clone', 'git', 'repository', 'httpsgithubcomshailclassificationcompetitiongit', 'finished', 'run', 'inside', 'python', 'classifypy', 'train', 'trainjsonl', 'file', 'testjsonl', 'output', 'answertxt', 'description', 'contribution', 'members', 'worked', 'together', 'mostly', 'equally', 'xuechen', 'focusing', 'primarily', 'side', 'shail', 'team', 'refine', 'test', 'accuracy', 'progress', 'report', 'name', 'wangxuechen', 'desaishailrd', 'project', 'topic', 'reproducing', 'paper', 'subtopic', 'pattern', 'annotation', 'recreated', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'made', 'thus', 'far', 'retrieved', 'looked', 'preliminary', 'processing', 'read', 'research', 'notes', 'communicated', 'ideas', 'build', 'laram', 'remaining', 'tasks', 'write', 'scripts', 'compare', 'authors', 'submit', 'challengesissues', 'faced', 'hard', 'time', 'understand', 'implement', 'functions', 'mining', 'topics', 'lara', 'proposal', 'captain', 'programming', 'language', 'datasets', 'used', 'evaluation', 'httpsifakacsuiuceduwangdataindexhtml', 'courseproject', 'trainpy', 'prelabeled', 'not_sarcasm', 'sarcasmor', 'video', 'demo', 'code', 'could', 'httpsdrivegooglecomfiledabgsfpgjnirpimjkeegvlowgnviewuspsharing', 'link', 'also', 'videolinktxt', 'thank']
https://github.com/yangyangsquare/CourseProject	classification competition: twitter sarcasm detection cs 410 final project documentation yang yang yangy19@illinois.edu abstract sarcasm detection is a specific case of sentiment analysis where instead of detecting a sentiment in the whole spectrum, the focus is on sarcasm. in this classification competition, the task is to detect sarcasm in contextual twitter text. in order to beat the baseline f1 score and improve the performance, the main model used in this project is one of the state-of-the-art nlp models, bert. i adapt the off-the-shelf bert classifier model by hug- gingface, modify and expand the use of fine-tuning for other bert-based models. further more, i investigate the bert model performance when context information is used in different manners. the result interestingly shows that doing this specific task as a sentence pair classification outperforms it as a normal text classification. 1. introduction with the growing role of social media across the world, sarcasm in tweets has raised more attention. thus, how to use nlp models to efficiently detect sarcasm in tweets also has been a hot topic in both academia and industry. in this project, i first use a couple of bert-based pre-trained models, such as bert, albert, distilbert and squeezebert, to understand language and beat the baseline performance. then i start to look at the methods of utilizing context information in tweets. sarcasm detection, from the topic name itself, sounds like a very typical binary text classification. since we have context information together with response, i use context sentence(s) in three different methods to run the hyperparameter tuning under bert pre-trained model. 2. approach overall, i follow the procedures below to fine-tune and improve the model performance in this project: (1) adapt bert classifier from google research and bert example by huggingface transformers [6]; (2) modify bert model code to make it applicable for other bert-based models; (3) load the train and test dataset and split original train dataset in 80 : 20 for train and validation; (4) run pre-trained models from bert, albert, distilbert, squeezebert and xlnet with same hyperpa- rameter setting and compare performances; (5) compare bert model performances with different context methods; (6) fine-tune hyperparameters for bert model with best context method. 2.1. bert classifier adaption and expansion inspired by rajapakse [3] using one of the state-of-the-art nlp model, bert, i first look into google's original bert paper [7], and then notice the off-the-shelf bert classifier from google research github [1]. while some tensorflow bert packages have revision issues and haven't been solved for a while. so i switch some functions to similar ones in pytorch to fix incompatible issues in the code, luckily because nlp researchers from huggingface have developed a pytorch version of bert. 1 the next step is to expand the bert classifier for other bert-based model fine-tuning for model performance comparison. thanks to pytorch autoclasses model, it can automatically recognize the architecture from pre-trained model id to extract tokenizer and configuration file accordingly. in order to make the training portion compatible, i dig into other four models' sequenceclassification functions on huggingface transformers documentation website [2]. it turns out that not all sequenceclassification functions are able to accept same inputs: the sequenceclassification functions for bert, albert and squeezebert all take input ids, attention mask and token type ids tokens. while the sequenceclassification functions for distilbert and xlnet both can only read input ids and attention mask tokens, no token type ids tokens. so i need to differentiate these two situations and supply different inputs. 2.2. bert-based models after adaption and modification, the code can run to fine-tune other pre-trained models like bert, albert, squeezebert, distilbert and xlnet. to begin with a basic comparison, i go through the pre-trained models hub and list hosted by huggingface [4]. based on the model description and community results, i select following models from these five architectures: 1. bert: a transformers model pre-trained on a large corpus of english data in a self-supervised fashion. * bert-base-uncased is the most popular bert model and trained on lower cased english text. 2. albert: a lite bert for self-supervised learning of language representations. it uses repeating layers which results in a small memory footprint, however the computational cost remains similar to a bert-like architecture with the same number of hidden layers as it has to iterate through the same number of (repeating) layers. * albert-base-v2 is trained on albert base model with no dropout, additional training data and longer training. 3. distilbert: a transformers model, smaller and faster than bert, which was pretrained on the same corpus in a self-supervised fashion, using the bert base model as a teacher. * distilbert-base-uncased is distilled from bert-base-uncased checkpoint. 4. squeezebert: a bidirectional transformer similar to the bert model. the key difference be- tween the bert architecture and the squeezebert architecture is that squeezebert uses grouped convolutions instead of fully-connected layers for the q, k, v and ffn layers. * squeezebert-mnli-headless is the squeezebert-uncased model finetuned on mnli sentence pair classification task with distillation from electra-base. this pre- trained model is specifically recommended on huggingface squeezebert site [5] for best results when fine-tuning on sequence classification tasks. 5. xlnet: an extension of the transformer-xl model pre-trained using an autoregressive method to learn bidirectional contexts by maximizing the expected likelihood over all permutations of the input sequence factorization order. * xlnet-base-cased is the xlnet base english model. 2 architecture model id model size hidden layer (l) hidden size (h) attention heads (a) parameters bert bert-base-uncased 12 768 12 110m albert albert-base-v2 12 (repeating) 768 12 11m distilbert distilbert-base-uncased 6 768 12 66m squeezebert squeezebert-mnli-headless 12 768 12 51m xlnet xlnet-base-cased 12 768 12 110m table 1: model size summary of selected pre-trained models these five pre-trained models are selected from each of the architecture because they are either the most efficient or best for the task among all in the architecture. table 1 shows a model size summary of the pre-trained models i use in the project. 2.3. methods to use context info when adapting bert classifier, i notice that the inputexample class has two different string attributes text a and text b for sequence text. apparently, response information always goes into text a. so i can implement context information in three different methods: * method 1 - use no context info: only use response information in text a and ignore context informa- tion. * method 2 - concatenate context with response (used in 2.2): concatenate context string after response string in text a and run it as a normal text classification task. * method 3 - use context as separate sentence info: use response information in text a and context information in text b. now when running sequenceclassification, it is actually a sequence pair classification. 2.4. bert model hyperparameter fine-tuning for hyperparameter fine-tuning, i sweep the batch size in {8, 16, 32}, learning rate in {2*10-5, 5*10-5, 1*10-4}, gradient accumulation steps in {1, 2, 3}, and number of epochs in {1, 2, 3} for all three methods. 3. experiments and results 3.1. data in this project, instructors provide us the dataset from twitter. the train dataset has 5000 sarcastic or non- sarcastic posts labeled with sarcasm or not sarcasm. there are in total of 2010 not sarcasm posts and 1990 sarcasm in train dataset, which constructs a balanced dataset for binary classification. the test dataset has 1800 posts without labels. both datasets include response and context information. response is the tweet to be classified and the context is the conversation context of the response, which i place in three methods. 3.2. evaluation metrics for evaluation, i use f1 score as my primary metric since it is the criteria to beat the baseline. since f1 is calculated based on precision and recall, i generate all three metrics in my code. 3 3.3. performances from different pre-trained models to compare the five selected models, i sweep the number of epochs in {1, 2, 3, 4, 5} for all models with same remaining hyperparameters as shown below: * maximum sequence length = 128 * warmup proportion = 0.1 * batch size = 16 * learning rate = 2 * 10-5 * gradient accumulation steps = 1 * context method: concatenate after response figure 1 shows the learning curves on validation dataset for the selected models from five architectures. in f1 plot, bert shows a high and stable f1 score, even though the highest f1 score is not from bert. although the highest f1 score happens with xlnet pre-trained model, it only happens when epochs reaches at 5 with large fluctuation. figure 1: learning curves of selected models. overall bert model shows the best performance. although the highest f1 score happens with xlnet pre-trained model, it only happens when epochs reaches at 5 with large fluctuation. considering recall and the impact of random seeds on fine-tuning, the bert model is better. since it is a sarcasm detection task, the goal is to detect more positive cases. so the cost of missing a positive case is more problematic than the cost of including a negative case. that means recall is more important precision. looking at the recall plot, it is clear that bert model is the best one. in dodge's paper [8], he mentioned that even with the same hyperparameter values, distinct random seeds can lead to substantially different results due to weight initialization, training data order and other reasons. it tells us that users may not be able to generate such high f1 score with xlnet model every single time by looking at its unstable learning curve. considering both recall learning curve and the impact of random seeds on fine-tuning, i choose the bert model bert-base-uncased as the best model among all. 3.4. performances from different context methods as mentioned in 2.3, i use three different methods for context information, they are: * response only denotes to method 1: use no context info * responsecontext connect denotes to method 2: concatenate context with response * responsecontext separate denotes to method 3: use context as separate sentence info 4 figure 2 shows the performance metrics of three context methods. in f1 score histogram, more than 80% of method 3 iterations reach 0.8 of f1, which is the best method in terms of f1 score. while surprisingly method 1, which does not use context info is even better than method 2 - concatenate context with response. looking at the precision vs. recall plot, most of method 3 dots have both high precision and recall, which result in high f1 score, whereas dots of the other two methods have either low precision or low recall. overall, the bert model using method 3 - use context as separate sentence info, has the best performance on average. figure 2: performance metrics for three context methods. 3.5. bert model hyperparameter fine-tuning with method 3 after selecting pre-trained model and context method, i sweep hyperparameters of batch size, learning rate, number of epochs and gradient accumulation steps. figure 3 shows the hyperparameter optimization sweep result. figure 3: hyperparameter fine-tuning for bert model with context method 3. more red(ish) dots indicate higher f1 scores, whereas more blue(ish) dots indicate lower f1 scores. 5 precision recall f1 validation 0.783 0.892 0.834 test 0.708 0.827 0.763 table 2: final result based on the optimization result, i select the following hyperparameters as my final bert model hyperparam- eters: * maximum sequence length = 128 * warmup proportion = 0.1 * batch size = 16 * learning rate = 2 * 10-5 * gradient accumulation steps = 2 * number of epochs = 2 by using this hyperparameter set, my model is able to reach f1 score at 0.763 for test dataset. details are shown in table 2. 4. conclusion in this classification competition, i use pre-trained base models of bert, albert, distilbert, squeeze- bert and xlnet for contextual twitter sarcasm detection. among those base models with same hyperparam- eters, bert shows the best performance. in the further discussion of context information use, i place context sentences in three different methods. after hyperparameter tuning with all three, the bert model using context as separate sentence information shows the best performance on average. the best result from the best bert model reaches on the test dataset 0.763 as f1 score and beat the baseline f1 score of 0.723. 5. github repo the whole project is developed with pytorch framework in google colab environment. the source code, voiced presentation and this project documentation are all available in this courseproject github repo. (https: //github.com/yangyangsquare/courseproject). 6 references [1] google-research/bert/run classifier.py. https://github.com/google-research/bert/blob/master/ run_classifier.py. accessed: 2020-12-10. 1 [2] huggingface transformers documentations. https://huggingface.co/transformers/index.html. ac- cessed: 2020-12-10. 2 [3] a simple guide on using bert for binary text classification. https://medium.com/swlh/ a-simple-guide-on-using-bert-for-text-classification-bbf041ac8d04. accessed: 2020- 12-10. 1 [4] transformers pre-trained models. https://huggingface.co/transformers/pretrained_models. html. accessed: 2020-12-10. 2 [5] transformers squeezebert model. https://huggingface.co/transformers/model_doc/ squeezebert.html. accessed: 2020-12-10. 2 [6] transformers/examples/movement-pruning. https://github.com/huggingface/transformers/blob/ 67ff1c314a61a2d5949b3bb48fa3ec7e9b697d7e/examples/movement-pruning/masked_run_ glue.py. accessed: 2020-12-10. 1 [7] jacob devlin, ming-wei chang, kenton lee, and kristina toutanova. bert: pre-training of deep bidirectional transform- ers for language understanding. arxiv preprint arxiv:1810.04805, 2018. 1 [8] jesse dodge, gabriel ilharco, roy schwartz, ali farhadi, hannaneh hajishirzi, and noah smith. fine-tuning pretrained language models: weight initializations, data orders, and early stopping, 2020. 4 7 cs 410 course project progress report yang yang (netid: yangy19) project topic: text classification competition 1. which tasks have been completed? i have implemented pre-trained bert models from pytorch on google colab for twitter sarcasm detection dataset and beat the baseline. 2. which tasks are pending? i am finalizing the documented source code with explanations. then i will focus on creating the tutorial demo. 3. are you facing any challenges? it was taking too much time when i was trying to train the model on my laptop (cpu) due to size of the dataset. but it got fixed after i switched to google colab (gpu). cs 410 course project proposal project topic: text classification competition 1. what are the names and netids of all your team members? who is the captain? individual team name: yang, yang netid: yangy19 2. which competition do you plan to join? text classification competition 3. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods neural network classifiers:  fully connected neural networks  cnn (convolutional neural networks)  rnn (recurrent neural networks)  lstm (long short-term memory)  bert (bidirectional encoder representations from transformers)  attention-based networks  graph-based networks deep learning frameworks:  pytorch  tensorflow  keras  caffe  cntk  mxnet  dl4j i don't have much practical prior experience with the methods mentioned above. i am ready to learn more state-of-the-art neural network classifiers. 4. which programming language do you plan to use? i will use python for this project competition. text classification competition - twitter scarcasm detection this task is to detect sarcasm from contextual tweets and beat the baseline performance of f1 = 0.723. voiced presentation (demo) link https://mediaspace.illinois.edu/media/t/1_685r9kih setup for prediction generation on test dataset please open the twitter_scarcasm_detection_source_code.ipynb file from google colab. (link directly to colab) go to runtime -> change runtime type, and make sure it has gpu selected as hardware accelerator and high-ram as runtime shape. go to runtime -> run all. it takes approximately 5 minutes to complete. before you download the answer.txt, you can also look at the validation f1 score, which is usually ~0.83. you can use the table of contents toolbar on the left to navigate to section 7. evaluation. use the files toolbar on the left, go to outputs -> twitter_sarcasm_detection, and you should be able to see answer.txt. final result on test dataset f1 = 0.7626858 more details please review the project documentation file, which includes all models i have tried and three different methods i used for context text string. it also covers model performance comparison and different method comparison specification for this task.	['classification', 'competition', 'twitter', 'sarcasm', 'detection', 'cs', 'final', 'project', 'documentation', 'yang', 'yangyillinoisedu', 'abstract', 'specific', 'case', 'sentiment', 'analysis', 'instead', 'detecting', 'whole', 'spectrum', 'focus', 'task', 'detect', 'contextual', 'text', 'order', 'beat', 'baseline', 'f', 'score', 'improve', 'performance', 'main', 'model', 'used', 'one', 'stateoftheart', 'nlp', 'models', 'bert', 'adapt', 'offtheshelf', 'classifier', 'hug', 'gingface', 'modify', 'expand', 'use', 'finetuning', 'bertbased', 'investigate', 'context', 'information', 'different', 'manners', 'result', 'interestingly', 'shows', 'sentence', 'pair', 'outperforms', 'normal', 'introduction', 'growing', 'role', 'social', 'media', 'across', 'world', 'tweets', 'raised', 'attention', 'thus', 'efficiently', 'also', 'hot', 'topic', 'academia', 'industry', 'first', 'couple', 'pretrained', 'albert', 'distilbert', 'squeezebert', 'understand', 'language', 'start', 'look', 'methods', 'utilizing', 'name', 'sounds', 'like', 'typical', 'binary', 'since', 'together', 'response', 'sentences', 'three', 'run', 'hyperparameter', 'tuning', 'approach', 'overall', 'follow', 'procedures', 'finetune', 'google', 'research', 'example', 'huggingface', 'transformers', 'code', 'make', 'applicable', 'load', 'train', 'test', 'dataset', 'split', 'original', 'validation', 'xlnet', 'hyperpa', 'rameter', 'setting', 'compare', 'performances', 'hyperparameters', 'best', 'method', 'adaption', 'expansion', 'inspired', 'rajapakse', 'using', 'googles', 'paper', 'notice', 'github', 'tensorflow', 'packages', 'revision', 'issues', 'havent', 'solved', 'switch', 'functions', 'similar', 'ones', 'pytorch', 'fix', 'incompatible', 'luckily', 'researchers', 'developed', 'version', 'next', 'step', 'comparison', 'thanks', 'autoclasses', 'automatically', 'recognize', 'architecture', 'id', 'extract', 'tokenizer', 'configuration', 'file', 'accordingly', 'training', 'portion', 'compatible', 'dig', 'four', 'sequenceclassification', 'website', 'turns', 'able', 'accept', 'inputs', 'take', 'input', 'ids', 'mask', 'token', 'type', 'tokens', 'read', 'need', 'differentiate', 'two', 'situations', 'supply', 'modification', 'begin', 'basic', 'go', 'hub', 'list', 'hosted', 'based', 'description', 'community', 'results', 'select', 'following', 'five', 'architectures', 'large', 'corpus', 'english', 'data', 'selfsupervised', 'fashion', 'bertbaseuncased', 'popular', 'trained', 'lower', 'cased', 'lite', 'learning', 'representations', 'uses', 'repeating', 'layers', 'small', 'memory', 'footprint', 'however', 'computational', 'cost', 'remains', 'bertlike', 'number', 'hidden', 'iterate', 'albertbasev', 'base', 'dropout', 'additional', 'longer', 'smaller', 'faster', 'teacher', 'distilbertbaseuncased', 'distilled', 'checkpoint', 'bidirectional', 'transformer', 'key', 'difference', 'tween', 'grouped', 'convolutions', 'fullyconnected', 'q', 'k', 'v', 'ffn', 'squeezebertmnliheadless', 'squeezebertuncased', 'finetuned', 'mnli', 'distillation', 'electrabase', 'pre', 'specifically', 'recommended', 'site', 'sequence', 'tasks', 'extension', 'transformerxl', 'autoregressive', 'learn', 'contexts', 'maximizing', 'expected', 'likelihood', 'permutations', 'factorization', 'xlnetbasecased', 'size', 'layer', 'l', 'h', 'heads', 'parameters', 'table', 'summary', 'selected', 'either', 'efficient', 'among', 'info', 'adapting', 'inputexample', 'class', 'string', 'attributes', 'b', 'apparently', 'always', 'goes', 'implement', 'ignore', 'informa', 'tion', 'concatenate', 'separate', 'running', 'actually', 'sweep', 'batch', 'rate', 'gradient', 'accumulation', 'steps', 'epochs', 'experiments', 'instructors', 'provide', 'us', 'sarcastic', 'non', 'posts', 'labeled', 'total', 'constructs', 'balanced', 'without', 'labels', 'datasets', 'include', 'tweet', 'classified', 'conversation', 'place', 'evaluation', 'metrics', 'primary', 'metric', 'criteria', 'calculated', 'precision', 'recall', 'generate', 'remaining', 'shown', 'maximum', 'length', 'warmup', 'proportion', 'figure', 'curves', 'plot', 'high', 'stable', 'even', 'though', 'highest', 'although', 'happens', 'reaches', 'fluctuation', 'considering', 'impact', 'random', 'seeds', 'better', 'goal', 'positive', 'cases', 'missing', 'problematic', 'including', 'negative', 'means', 'important', 'looking', 'clear', 'dodges', 'mentioned', 'values', 'distinct', 'lead', 'substantially', 'due', 'weight', 'initialization', 'reasons', 'tells', 'users', 'may', 'every', 'single', 'time', 'unstable', 'curve', 'choose', 'denotes', 'responsecontext', 'connect', 'histogram', 'iterations', 'reach', 'terms', 'surprisingly', 'vs', 'dots', 'whereas', 'low', 'average', 'selecting', 'optimization', 'redish', 'indicate', 'higher', 'scores', 'blueish', 'hyperparam', 'eters', 'set', 'details', 'conclusion', 'squeeze', 'discussion', 'repo', 'framework', 'colab', 'environment', 'source', 'voiced', 'presentation', 'available', 'courseproject', 'https', 'githubcomyangyangsquarecourseproject', 'references', 'googleresearchbertrun', 'classifierpy', 'httpsgithubcomgoogleresearchbertblobmaster', 'run_classifierpy', 'accessed', 'documentations', 'httpshuggingfacecotransformersindexhtml', 'ac', 'cessed', 'simple', 'guide', 'httpsmediumcomswlh', 'asimpleguideonusingbertfortextclassificationbbfacd', 'httpshuggingfacecotransformerspretrained_models', 'html', 'httpshuggingfacecotransformersmodel_doc', 'squeezeberthtml', 'transformersexamplesmovementpruning', 'httpsgithubcomhuggingfacetransformersblob', 'ffcaadbbbfaecebdeexamplesmovementpruningmasked_run_', 'gluepy', 'jacob', 'devlin', 'mingwei', 'chang', 'kenton', 'lee', 'kristina', 'toutanova', 'pretraining', 'deep', 'transform', 'ers', 'understanding', 'arxiv', 'preprint', 'jesse', 'dodge', 'gabriel', 'ilharco', 'roy', 'schwartz', 'ali', 'farhadi', 'hannaneh', 'hajishirzi', 'noah', 'smith', 'initializations', 'orders', 'early', 'stopping', 'course', 'progress', 'report', 'netid', 'yangy', 'completed', 'implemented', 'pending', 'finalizing', 'documented', 'explanations', 'creating', 'tutorial', 'demo', 'facing', 'challenges', 'taking', 'much', 'trying', 'laptop', 'cpu', 'got', 'fixed', 'switched', 'gpu', 'proposal', 'names', 'netids', 'team', 'members', 'captain', 'individual', 'plan', 'join', 'prepared', 'neural', 'network', 'classifiers', 'frameworks', 'heard', 'describe', 'relevant', 'prior', 'experience', 'fully', 'connected', 'networks', 'cnn', 'convolutional', 'rnn', 'recurrent', 'lstm', 'long', 'shortterm', 'encoder', 'attentionbased', 'graphbased', 'keras', 'caffe', 'cntk', 'mxnet', 'dlj', 'dont', 'practical', 'ready', 'programming', 'python', 'scarcasm', 'link', 'httpsmediaspaceillinoisedumediat_rkih', 'setup', 'prediction', 'generation', 'please', 'open', 'twitter_scarcasm_detection_source_codeipynb', 'directly', 'runtime', 'change', 'sure', 'hardware', 'accelerator', 'highram', 'shape', 'takes', 'approximately', 'minutes', 'complete', 'download', 'answertxt', 'usually', 'contents', 'toolbar', 'left', 'navigate', 'section', 'files', 'outputs', 'twitter_sarcasm_detection', 'see', 'review', 'includes', 'tried', 'covers', 'specification']
https://github.com/yhui288/CourseProject	"documentation 1. project submission * project code: https://github.com/yhui288/classificationcompetition * presentation video: https://drive.google.com/file/d/1wlluubaauce_yqbeowxbl8yxxz wsveqf/view?usp=sharing 2. overview of the function of the project our team participated in the text classification competition. this competition aims to predict if tweets with given context are sarcasm. we are given training data with labels. the goal is to correctly predict if tweets in test data are sarcasm. team member: changcheng fu (cf7), jiaying li (jl63), yanghui pang (yanghui2) leaderboard name: yanghui pang rank: ~55 project file structure (download our project here): * train.py/train.ipynb: the program we train the classifier and predict the results for test data * answer.txt: the file storing predicted results for test data * saved_weight.pt: the saved model (the file is too large, we didn't push it to github) 3. code implementation * the process of training (what train.py/train.ipynb does): 1) install packages and import necessary packages 2) preprocessing data: data loading + data cleaning 3) import the pre-trained bert model and tokenizer 4) tokenize the data 5) create train/validate dataloaders 6) initialize a bert model, optimizer and loss function 7) define functions for training and evaluating 8) start training the model (also save the best model) 9) predict the test data with the saved model * the models we tried to beat the baseline: first, we try to use traditional models from sklearn to access this problem. we tried naive bayes, svm, logisticregression, randomforestclassifier, kneighborsclassifier and sgdclassifier from sklearn. among all these classifiers, the sgdclassifier performed the best which has the highest f1 among them, but the score still cannot beat the baseline. then, we analyzed the data we have and decided to train a convolutional neural net with pooling, but still found the result is not ideal. we also tried to use fine-tune bert model with linear layer and dropout layer, but we found that the loss rate is relatively high. finally, we tried the pre-trained bert basic model from huggingface. by referencing the research papers, we adjusted the some hyperparameters such as learning rate and the number of epochs, and also tried various loss function. this pre- trained bert model with adjusted parameters give us prediction that could beat the baseline. 4. usage of software (how to run our code) * run locally (with python version 3.8) pip3 install -r requirements.txt python3 train.py or * run on colab (tutorial for running our code on colab) 1) upload ""train.ipynb"" from our project 2) create ""data"" folder, and upload ""train.jsonl"" and ""test.jsonl"" to ""data"" folder 3) run the code block step by step * the trained model will be saved in ""saved_weight.pt""; predicted results for test data will be saved in ""answer.txt"" 5. division of labor * changcheng fu: tried training a neutral network with cnn and pooling layer; tried bert with linear and dropout layer; tried a pretrained bert basic model, achieved the best performance and beat the baseline; wrote the progress report. * jiaying li: tried built-in modules from sklearn such as randomforestclassifier, kneighborsclassifier, logisticregression; wrote documentation; presentation. * yanghui pang: wrote the proposal; tried built-in modules from sklearn such as naive bayes, svm, sgdclassifier; revised documentation; presentation. cs 410 progress report 1. progress made thus far we have already implemented the bert-based pre-trained model using python and then using linear transformation with train and validation set to fine-tuned the model for text classification. we've already finished the majority of our code but got f1 score of 70.14, which is below the baseline. 2. remaining tasks we still need to make improvements to our code: adding cnn or doing data cleaning for our training and test set. in addition, we still need to make full documentation for our code and optimize our code if possible after beating the baseline. also, we need to make our own tutorial video at the end to show our functionality and code. 3. any challenges/issues being faced. currently, we can not simply improve our f1 score by adding epoch or simply changing hyperparameter like learning rate, l2 regulation rate, or batch size to improve our performance. as a result, we need more efficient and effective method to increase our model's precision and recall. cs 410 final project proposal - team1 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. captain: yanghui pang (yanghui2) member: changcheng fu (cf7), jiaying li (jl63) 2. which competition do you plan to join? text classification competition 3. if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods. we choose the text classification competition, and we are prepared to learn state-of-the- art neural network classifiers. some neural classifiers that we heard of are the mlp classfier and keras neural network classifier. we also heard of deep learning frameworks such as pytorch, tensorflow. however, none of us have any relevant prior experience with such methods except mp assignments written in cs440: artificial intelligence. 4. which programming language do you plan to use? python courseproject - text classification competition team member: changcheng fu (cf7), jiaying li (jl63), yanghui pang (yanghui2) code submission find it in ""code"" directory, or click here to download our project project code: containing the code for training model, saved model, predicted results - train.ipynb/train.py: model training (instruction to run it can be found in ""documentation.pdf"") - answer.txt: predicted reuslts - saved_weights.pt: the saved model (the file is too large, we didn't push it to github) presentation video click here to watch the presentation video documentation find it in ""documentation.pdf"". containing the overview of the project, description of our code, instruction to run code, what we did, the division fo labor file structure documentation.pdf proposal.pdf progress report.pdf"	['documentation', 'project', 'submission', 'code', 'httpsgithubcomyhuiclassificationcompetition', 'presentation', 'video', 'httpsdrivegooglecomfiledwlluubaauce_yqbeowxblyxxz', 'wsveqfviewuspsharing', 'overview', 'function', 'team', 'participated', 'text', 'classification', 'competition', 'aims', 'predict', 'tweets', 'given', 'context', 'sarcasm', 'training', 'data', 'labels', 'goal', 'correctly', 'test', 'member', 'changcheng', 'fu', 'cf', 'jiaying', 'li', 'jl', 'yanghui', 'pang', 'leaderboard', 'name', 'rank', 'file', 'structure', 'download', 'trainpytrainipynb', 'program', 'train', 'classifier', 'results', 'answertxt', 'storing', 'predicted', 'saved_weightpt', 'saved', 'model', 'large', 'didnt', 'push', 'github', 'implementation', 'process', 'install', 'packages', 'import', 'necessary', 'preprocessing', 'loading', 'cleaning', 'pretrained', 'bert', 'tokenizer', 'tokenize', 'create', 'trainvalidate', 'dataloaders', 'initialize', 'optimizer', 'loss', 'define', 'functions', 'evaluating', 'start', 'also', 'save', 'best', 'models', 'tried', 'beat', 'baseline', 'first', 'try', 'use', 'traditional', 'sklearn', 'access', 'problem', 'naive', 'bayes', 'svm', 'logisticregression', 'randomforestclassifier', 'kneighborsclassifier', 'sgdclassifier', 'among', 'classifiers', 'performed', 'highest', 'f', 'score', 'still', 'cannot', 'analyzed', 'decided', 'convolutional', 'neural', 'net', 'pooling', 'found', 'result', 'ideal', 'finetune', 'linear', 'layer', 'dropout', 'rate', 'relatively', 'high', 'finally', 'basic', 'huggingface', 'referencing', 'research', 'papers', 'adjusted', 'hyperparameters', 'learning', 'number', 'epochs', 'various', 'pre', 'trained', 'parameters', 'give', 'us', 'prediction', 'could', 'usage', 'software', 'run', 'locally', 'python', 'version', 'pip', 'r', 'requirementstxt', 'trainpy', 'colab', 'tutorial', 'running', 'upload', 'trainipynb', 'folder', 'trainjsonl', 'testjsonl', 'block', 'step', 'division', 'labor', 'neutral', 'network', 'cnn', 'achieved', 'performance', 'wrote', 'progress', 'report', 'builtin', 'modules', 'proposal', 'revised', 'cs', 'made', 'thus', 'far', 'already', 'implemented', 'bertbased', 'using', 'transformation', 'validation', 'set', 'finetuned', 'weve', 'finished', 'majority', 'got', 'remaining', 'tasks', 'need', 'make', 'improvements', 'adding', 'addition', 'full', 'optimize', 'possible', 'beating', 'end', 'show', 'functionality', 'challengesissues', 'faced', 'currently', 'simply', 'improve', 'epoch', 'changing', 'hyperparameter', 'like', 'l', 'regulation', 'batch', 'size', 'efficient', 'effective', 'method', 'increase', 'precision', 'recall', 'final', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'plan', 'join', 'choose', 'ir', 'prepared', 'learn', 'stateoftheart', 'methods', 'query', 'expansion', 'feedback', 'fusion', 'etc', 'concrete', 'tools', 'may', 'heard', 'deep', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'stateofthe', 'art', 'mlp', 'classfier', 'keras', 'pytorch', 'tensorflow', 'however', 'none', 'except', 'mp', 'assignments', 'written', 'artificial', 'intelligence', 'programming', 'language', 'courseproject', 'find', 'directory', 'click', 'containing', 'trainipynbtrainpy', 'instruction', 'documentationpdf', 'reuslts', 'saved_weightspt', 'watch', 'description', 'fo', 'proposalpdf', 'reportpdf']
https://github.com/yil7/CourseProject	"text classification competition the main goal of this project is to develop a learning system that predicts the label of response on tweet to be 'sarcasm' or 'not sarcasm' while optionally using the context by learning from responses labeled already. the trained model should achieve a fa score above 0.723 on the test data. we trained a machine learning model first, which is xgboost as our baseline model. it can only achieve a 0.65 f1 score and overfit a lot. therefore, we have been focused on deep learning models and tuning the parameter after more than 140 times, and we finally beat the baseline. we used the convolutional neural network (cnn) to accomplish this text classification task and achieve an accuracy of 0.7247, which beats the baseline of 0.723. cnn is a class of deep neural network that can take in an input, assign importance to various objects in the input, and be able to differentiate one from the other. it can automatically learn a large number of filters in parallel specific to a training dataset under the constraints of a particular predictive modeling problem. we utilized python and jupyter notebook to develop our learning system. the libraries related were json, pandas, string, nltk, numpy, matplotlib, sklearn, re, keras, genism, etc. the steps are as follows: load data: we loaded the data line by line and converted the raw train.jsonl data to a data frame called ""reviews"". clean and pre-process the data: we made a clean function to remove url text such as http, @, #, and any numbers. the information from ""response"" and ""context"" was combined into a new column: ""text"". then we tokenized the texts by using nltk's word_tokenize so that a sentence is divided into single words. we also turned all letters to lower case. next, we added two new columns to the 'reviews' data frame to prepare for the binary classification. prepare tain and test sets: there were 5000 objects to train the system and 1800 objects to test. we built training vocabulary and got maximum training sentence length (73) and the total number of words in the training set (12526). load google news word2vec model and trained word embeddings: after that, we loaded the google news word2vec model and trained our word embeddings. tokenize and pad sequences: we assigned an integer to each word and put that integer in a list. we padded the sentences so that all training sentences had the same input shape (50). we got embeddings from the google news word2vec model and saved them corresponding to the sequence integer assigned to each word. if there were no embeddings, a random vector was saved for that word. define cnn: the content of 'text' as a sequence was passed to a cnn. the embeddings matrix was passed to embedding_layer. we applied five different filter sizes to each content and globalmaxpooling1d layers to each layer. outputs were concatenated. dropout layer - dense layer - dropout layer - final dense layer was applied. we also printed a summary of all the layers with corresponding output shapes. train cnn: the number of epochs and batch size we utilized were 3 and 80, which means our model will loop around and learn three times, and eighty data will be viewed at a single time. since the training dataset was small, we took this relatively small number of epochs to avoid overfitting. since sarcasm is hard to detect, we also lower the confidence level from 0.5 to 0.38 during the inference phase, which means if the classifier is 38 percent sure this sentence is sarcastic, then this sentence will be predicted as sarcasm. test: we used the model to predict the label of data in the test set and get an accuracy of 0.7247. the cnn system could be utilized on other tasks, such as image recognition, electromyography (emg) recognition, which relates to identifying human intention to control assistive devices, video analysis, drug discovery, health risk assessment, and biomarkers of aging discovery, etc. except for the cnn model, we have also tried another deep learning model: bert (bidirectional encoder representations from transformers) model, though it didn't beat the baseline score. bert model is a pre-trained model, and it typically has several advantages over other nlp models, including quicker training, smaller data size requirement, and higher prediction result. it is widely used in text feature extraction and text classification tasks. however, it performed well in our validation datasets but had inferior prediction results on the test data, which was surprising. to run a bert model, we utilized the free gpu offered by google colab. the libraries we mainly used were tensorflow, torch, and transformers package from hugging face library. we used the same data cleaning approaches as the cnn model and did not remove the stop words. we then used the pretrained bert tokenizer method to convert the response into tokens. each response was split into tokens of the same length. the shorter response text would be padded with token zero, and we added attention masks to differentiate the padded tokens from the true tokens. the maximum response size was 85, and we set the fixed size to be 120 in case the size of test text data is larger. we split the 5000 training data into 80% training data and 20% test data. the classification model we chose is bertforsequenceclassification. we tried to tune the hyperparameters such as batch size, learning rate, and the number of epochs. however, the best-tuned parameters made the test prediction results worse. in the end, we used batch size = 16, learning rate lr = 2e-5, eps = 1e-8 and epochs = 2. the metric we used to evaluate was the f1 score. when validating the model results from training, the f1 score we had was around 80%. finally, we did the same procedure to the test data before modeling, and as mentioned above, the results were surprisingly not satisfactory. data cleaning techniques and tuning parameters also didn't improve the results. future attempts might include trying different bert models and padding choices. reference: cnn: https://towardsdatascience.com/cnn-sentiment-analysis-1d16b7c5a0e7 bert: https://colab.research.google.com/drive/1ptuqhug6dhl9xalkb0zugf4fidyflpcx#scrollto=defsbaa4qhas 1. what we have done? we imported twelve necessary packages. we loaded data line by line and convert the raw train.jsonl data to a data frame called ""reviews"". next, we made a clean function to remove url text such as http, @, #, and any numbers. the information from ""response"" and ""context"" was combined into a new column: ""text"". we processed the information from ""text"" with our clean function. we also turned the ""label"" to 0-1 from ""sarcasm/not_sarcasm"". then we separated both information from ""text"" and ""label"" into two sets: ""test"" set with 20% of raw data and ""train"" set with 80% of raw data for validation test. we transformed information from text train set and text test to vector with tfidfvectorizer (stopword-'english', range of words to be extracted is 1-3). we then applied the xg boost model and find out the training accuracy is 0.96125 and test accuracy is 0.665. we also loaded raw test.jsonl data in to a data frame called ""test"" to do the predicted test and processed it with in the same way. we applied the xg boost model to predict the label and convert 0-1 to sarcasm/not_sarcasm. 2. remaining task we will try to find out whether more pre-processing could be done. the parameters of vectorizer may still be adjusted. we will also try to build a deep learning model - lstm to better improve the accuracy of our model. 3. challenges the accuracy of train set is good enough whereas the accuracy of test set is much lower. that means we might overfit. in your project proposal, please answer the following questions: what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. which competition do you plan to join? if you choose the ir competition, are you prepared to learn state-of-the-art ir methods like query expansion, feedback, rank fusion, learning to rank, etc.? name some more concrete methods or tools that you may have heard of. if you choose the classification competition, are you prepared to learn state-of-the-art neural network classifiers? name some neural classifiers and deep learning frameworks that you may have heard of. describe any relevant prior experience with such methods which programming language do you plan to use? 1. team members wenxin fang wenxinf2 shengyi wang shengyi4 (captain) yi li yil7 2. text classification competition 3. baseline model: logistic regression, naive bayes our deep learning framework: lstm deep learning we have some experience in implementing and training logistic regression on a toy dataset. however, we never train and test this model on text data before. we haven't had some experience in naive bayes and lstm deep learning framework. but we are thrilled to learn more about these machine learning approaches and look forward to seeing how it performs on the tweet dataset. 4. python cs 410 final project: classification competition preparation datasets used are test.jsonl and train.jsonl in the data folder. required packages scikit learn numpy xgboost pytorch matplotlib seaborn nltk json pickle pandas re math tensorflow sys string gensim os keras baseline model all the work done within the jupyter notebook text classification baseline.ipynb cnn model all the work done within the jupyter notebook cnn-final.ipynb bert model all the work done within the jupyter notebook bert.ipynb documentation documentation.docx video illustration https://youtu.be/ujcdloyoazy reference cnn: https://towardsdatascience.com/cnn-sentiment-analysis-1d16b7c5a0e7 bert: https://colab.research.google.com/drive/1ptuqhug6dhl9xalkb0zugf4fidyflpcx#scrollto=defsbaa4qhas"	['text', 'classification', 'competition', 'main', 'goal', 'project', 'develop', 'learning', 'system', 'predicts', 'label', 'response', 'tweet', 'sarcasm', 'optionally', 'using', 'context', 'responses', 'labeled', 'already', 'trained', 'model', 'achieve', 'fa', 'score', 'test', 'data', 'machine', 'first', 'xgboost', 'baseline', 'f', 'overfit', 'lot', 'therefore', 'focused', 'deep', 'models', 'tuning', 'parameter', 'times', 'finally', 'beat', 'used', 'convolutional', 'neural', 'network', 'cnn', 'accomplish', 'task', 'accuracy', 'beats', 'class', 'take', 'input', 'assign', 'importance', 'various', 'objects', 'able', 'differentiate', 'one', 'automatically', 'learn', 'large', 'number', 'filters', 'parallel', 'specific', 'training', 'dataset', 'constraints', 'particular', 'predictive', 'modeling', 'problem', 'utilized', 'python', 'jupyter', 'notebook', 'libraries', 'related', 'json', 'pandas', 'string', 'nltk', 'numpy', 'matplotlib', 'sklearn', 'keras', 'genism', 'etc', 'steps', 'follows', 'load', 'loaded', 'line', 'converted', 'raw', 'trainjsonl', 'frame', 'called', 'reviews', 'clean', 'preprocess', 'made', 'function', 'remove', 'url', 'http', 'numbers', 'information', 'combined', 'new', 'column', 'tokenized', 'texts', 'nltks', 'word_tokenize', 'sentence', 'divided', 'single', 'words', 'also', 'turned', 'letters', 'lower', 'case', 'next', 'added', 'two', 'columns', 'prepare', 'binary', 'tain', 'sets', 'train', 'built', 'vocabulary', 'got', 'maximum', 'length', 'total', 'set', 'google', 'news', 'wordvec', 'word', 'embeddings', 'tokenize', 'pad', 'sequences', 'assigned', 'integer', 'put', 'list', 'padded', 'sentences', 'shape', 'saved', 'corresponding', 'sequence', 'random', 'vector', 'define', 'content', 'passed', 'matrix', 'embedding_layer', 'applied', 'five', 'different', 'filter', 'sizes', 'globalmaxpoolingd', 'layers', 'layer', 'outputs', 'concatenated', 'dropout', 'dense', 'final', 'printed', 'summary', 'output', 'shapes', 'epochs', 'batch', 'size', 'means', 'loop', 'around', 'three', 'eighty', 'viewed', 'time', 'since', 'small', 'took', 'relatively', 'avoid', 'overfitting', 'hard', 'detect', 'confidence', 'level', 'inference', 'phase', 'classifier', 'percent', 'sure', 'sarcastic', 'predicted', 'predict', 'get', 'could', 'tasks', 'image', 'recognition', 'electromyography', 'emg', 'relates', 'identifying', 'human', 'intention', 'control', 'assistive', 'devices', 'video', 'analysis', 'drug', 'discovery', 'health', 'risk', 'assessment', 'biomarkers', 'aging', 'except', 'tried', 'another', 'bert', 'bidirectional', 'encoder', 'representations', 'transformers', 'though', 'didnt', 'pretrained', 'typically', 'several', 'advantages', 'nlp', 'including', 'quicker', 'smaller', 'requirement', 'higher', 'prediction', 'result', 'widely', 'feature', 'extraction', 'however', 'performed', 'well', 'validation', 'datasets', 'inferior', 'results', 'surprising', 'run', 'free', 'gpu', 'offered', 'colab', 'mainly', 'tensorflow', 'torch', 'package', 'hugging', 'face', 'library', 'cleaning', 'approaches', 'stop', 'tokenizer', 'method', 'convert', 'tokens', 'split', 'shorter', 'would', 'token', 'zero', 'attention', 'masks', 'true', 'fixed', 'larger', 'chose', 'bertforsequenceclassification', 'tune', 'hyperparameters', 'rate', 'besttuned', 'parameters', 'worse', 'end', 'lr', 'e', 'eps', 'metric', 'evaluate', 'validating', 'procedure', 'mentioned', 'surprisingly', 'satisfactory', 'techniques', 'improve', 'future', 'attempts', 'might', 'include', 'trying', 'padding', 'choices', 'reference', 'httpstowardsdatasciencecomcnnsentimentanalysisdbcae', 'httpscolabresearchgooglecomdriveptuqhugdhlxalkbzugffidyflpcxscrolltodefsbaaqhas', 'done', 'imported', 'twelve', 'necessary', 'packages', 'processed', 'sarcasmnot_sarcasm', 'separated', 'transformed', 'tfidfvectorizer', 'stopwordenglish', 'range', 'extracted', 'xg', 'boost', 'find', 'testjsonl', 'way', 'remaining', 'try', 'whether', 'preprocessing', 'vectorizer', 'may', 'still', 'adjusted', 'build', 'lstm', 'better', 'challenges', 'good', 'enough', 'whereas', 'much', 'proposal', 'please', 'answer', 'following', 'questions', 'names', 'netids', 'team', 'members', 'captain', 'administrative', 'duties', 'plan', 'join', 'choose', 'ir', 'prepared', 'stateoftheart', 'methods', 'like', 'query', 'expansion', 'feedback', 'rank', 'fusion', 'name', 'concrete', 'tools', 'heard', 'classifiers', 'frameworks', 'describe', 'relevant', 'prior', 'experience', 'programming', 'language', 'use', 'wenxin', 'fang', 'wenxinf', 'shengyi', 'wang', 'yi', 'li', 'yil', 'logistic', 'regression', 'naive', 'bayes', 'framework', 'implementing', 'toy', 'never', 'havent', 'thrilled', 'look', 'forward', 'seeing', 'performs', 'cs', 'preparation', 'folder', 'required', 'scikit', 'pytorch', 'seaborn', 'pickle', 'math', 'sys', 'gensim', 'os', 'work', 'within', 'baselineipynb', 'cnnfinalipynb', 'bertipynb', 'documentation', 'documentationdocx', 'illustration', 'httpsyoutubeujcdloyoazy']
https://github.com/yiz9/CourseProject	"a cross-collection mixture model for comparative text mining chengxiang zhai department of computer science university of illinois at urbana champaign atulya velivelli department of electrical and computer engineering university of illinois at urbana champaign bei yu graduate school of library and information science university of illinois at urbana champaign abstract in this paper, we define and study a novel text mining problem, which we refer to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent com- mon themes across all collections as well as summarize the similarity and differences of these collections along each com- mon theme. this general problem subsumes many interest- ing applications, including business intelligence and opinion summarization. we propose a generative probabilistic mix- ture model for comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the model can be estimated efficiently using the expectation-maximization (em) algo- rithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. categories and subject descriptors: h.3.3 [informa- tion search and retrieval]: text mining general terms: algorithms keywords: comparative text mining, mixture models, clus- tering 1. introduction text mining is concerned with extracting knowledge and patterns from text [5, 6]. while there has been much re- search in text mining, most existing research is focused on one single collection of text. the goals are often to extract basic semantic units such as named entities, to extract rela- tions between information units, or to extract topic themes. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. kdd'04, august 22-25, 2004, seattle, washington, usa. copyright 2004 acm 1-58113-888-1/04/0008 ...$5.00. in this paper, we study a novel problem of text mining re- ferred to as comparative text mining (ctm). given a set of comparable text collections, the task of comparative text mining is to discover any latent common themes across all collections as well as summarize the similarity and differ- ences of these collections along each common theme. specif- ically, the task involves: (1) discovering the different com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. the need for comparative text mining exists in many different applica- tions, including business intelligence, summarizing reviews of similar products, and comparing different opinions about a common topic in general. in this paper, we study the ctm problem and propose a generative probabilistic mixture model for ctm. the model simultaneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. the mixture model is based on component multinomial distribution models, each characterizing a different theme. the common themes and collection-specific themes are explicitly modeled. the pro- posed model can be estimated efficiently using the expectation- maximization (em) algorithm. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method also based on a mixture model. experiment results show that the model is quite effective in discovering the latent common themes across collections and performs significantly better than our baseline mixture model. the rest of the paper is organized as follows. in section 2, we briefly introduce the problem of ctm. we then present a baseline simple mixture model and a new cross-collection mixture model in section 3 and section 4. we discuss the experiment results in section 5. 2. comparative text mining 2.1 a motivating example with the popularity of e-commerce, online customer eval- uations are becoming widely provided by online stores and third-party websites. pioneers like amazon.com and epin- ions.com have accumulated large amounts of customer input including reviews, comments, recommendations and advice, etc. for example, the number of reviews in epinions.com 743 research track poster is more than one million[4]. given a product, there could be up to hundreds of reviews, which is impossible for the readers to go through. it is thus desirable to summarize a collection of reviews for a certain type of products in order to provide the readers the most salient feedbacks from the peers. for review summarization, the most important task is to identify different semantic aspects of a product that the reviewers mentioned and to group the opinions accord- ing to these aspects to show similarities and differences in the opinions. for example, suppose we have reviews of three different brands of laptops (dell, ibm, and apple), and we want to summarize the reviews. a useful summary would be a tab- ular representation of the opinions as shown in table 1, in which each row represents one aspect (subtopic) and differ- ent columns correspond to different opinions. table 1: a tabular summary subtopics dell ibm apple battery life long enough short short memory good bad good speed slow fast fast it is, of course, very difficult, if not impossible to pro- duce such a table completely automatically. however, we can achieve a less ambitious goal - identifying the semantic aspects and identifying the common and specific character- istics of each product in an unsupervised way. this is a concrete example of comparative text mining. 2.2 the general problem the example above is only one of the many possible appli- cations of comparative text mining. in general, the task of comparative text mining involves: (1) discovering the com- mon themes across all the collections; (2) for each discovered theme, characterize what is in common among all the col- lections and what is unique to each collection. it is very hard to precisely define what a theme is, but it corresponds roughly to a topic or subtopic. the granularity of themes is application-specific. ctm is a fundamental task in ex- ploratory text analysis. in addition to opinion comparison and summarization, it has many other applications, such as business intelligence (comparing different companies), cus- tomer relationship management (comparing different groups of customers), and semantic integration of text (comparing component text collections). ctm is challenging in several ways: (1) it is a completely unsupervised learning task; no training data is available. (it is for the same reason that ctm can be very useful for many different purposes - it makes minimum assumptions about the collections and in principle we can compare any arbitrary partition of text.) (2) we need to identify themes across different collections, which is more challenging than identifying topic themes in one single collection. (3) the task involves a discrimination component - for each discov- ered theme, we also want to identify the unique information specific to each collection. such a discrimination task is dif- ficult given that we do not have training data. in a way, ctm goes beyond the regular one-collection text mining by requiring an ""alignment"" of multiple collections based on common themes. since no training data is available, in general, we must rely on unsupervised learning methods, such as clustering, to perform ctm. in this paper, we study how to use prob- abilistic mixture models to perform ctm. below we first describe a simple mixture model for clustering, which repre- sents a straightforward application of an existing text min- ing method, and then present a more sophisticated mixture model specifically designed for ctm. 3. clustering with a simple mixture model   th  th  th "" $ % th ' th figure 1: the simple mixture model a naive solution to ctm is to treat the multiple collec- tions as one single collection and perform clustering. our hope is that some clusters would represent the common themes across the collections, while some others would rep- resent themes specific to one collection (see figure 1). we now present a simple multinomial mixture model for clus- tering an arbitrary collection of documents, in which we assume there are k latent common themes in all collections, and each is characterized by a multinomial word distribu- tion (also called a unigram language model). a document is regarded as a sample of a mixture model with these theme models as components. we fit such a mixture model to the union of all the text collections we have, and the obtained component multinomial models can be used to analyze the common themes and differences among the collections. formally, let c = {c1, c2, ..., cm} be m comparable col- lections of documents. let th1, ..., thk be k theme unigram language models and thb be the background model for all the collections. a document d is regarded as a sample of the following mixture model (based on word generation). pd(w) = lbp(w|thb) + (1 - lb) k j=1 [pd,jp(w|thj)] where w is a word, pd,j is a document-specific mixing weight for the j-th aspect theme, and k j=1 pd,j = 1. lb is the mix- ing weight of the background model thb. the log-likelihood of all the collections c is log p(c|l) = m i=1 dci wv [c(w, d) x log(lbp(w|thb) + (1 - lb) k j=1 (pd,jp(w|thj)))] where v is the set of all the words (i.e., vocabulary), c(w, d) is the count of word w in document d, and l = ({thj, pd,j}k j=1 744 research track poster is the set of all the theme model parameters. the purpose of using a background model is to ""force"" clustering to be done based on more discriminative words, leading to more informative and more discriminative component models. we control this effect through thb. the model can be estimated using any estimator. for example, the expectation-maximization (em) algorithm [3] can be used to compute a maximum likelihood estimate with the following updating formulas: p(zd,w = j) = p(n) d,j p(n)(w|thj) k j'=1 p(n) d,j'p(n)(w|thj') p(zd,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j p(n)(w|thj) p(n+1) d,j = wv c(w, d)p(zd,w = j) j' wv c(w, d)p(zd,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,w = b))p(zd,w = j) w'v m i=1 dci c(w', d)(1 - p(zd,w' = b))p(zd,w' = j) this mixture model is closely related to the probabilis- tic latent semantic indexing model (plsi) proposed in [7] and treats ctm as a single-collection text mining problem. however, such a simple model is inadequate for ctm for two reasons: (1) we have completely ignored the structure of collections. as a result, we may have clusters that repre- sent only some, not all of the collections. (2) there is no easy way to identify which theme cluster represents the common information across collections and which represents specific information to a particular collection. below we present a more sophisticated coordinated mixture model, which is specifically designed for ctm and addresses these two defi- ciencies. 4. clustering with a cross- collection mixture model  th th    th     th    th    th    th    th    th figure 2: the cross-collection mixture model 4.1 the model our main idea for improving the simple mixture model for comparative text mining is to explicitly distinguish com- mon theme clusters that characterize common information across all collections from special theme clusters that char- acterize collection-specific information. thus we now con- sider k latent common themes as well as a potentially dif- ferent set of k collection-specific themes for each collection (illustrated in figure 2). these component models directly correspond to all the information we are interested in discov- ering. the sampling distribution of a word in document d (from collection ci) is now collection-specific. specifically, it involves the background model (thb), k common theme models (th1, ..., thk), and k collection-specific theme models (th1,i, ..., thk,i), which are to capture the unique information about the k themes in collection ci. that is, pd(w|ci) = (1 - lb) k j=1 [pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))] +lbp(w|thb) where lb is the weight on the background model thb and lc is the weight on the common theme model thj (as opposed to the collection-specific theme model thj,i). intuitively, when we ""generate"" a word, we first decide whether to use the background model thb according to lb; the larger lb is, the more likely we will use thb. if we decide not to use thb, then we need to decide which theme to use; this is controlled by pd,j, the probability of using theme j when generating words in d. finally, once we decide which theme to use, we still need to decide whether we should use the common theme model or the collection-specific theme model, and this is con- trolled by lc, the probability of using the common model. the weighting parameters lb and lc are intentionally to be set by the user, and their interpretation is as follows. lb reflects our knowledge about how noisy the collections are. if we believe the text is verbose, then lb should be set to a larger value. in our experiments, a value of 0.9 - 0.95 often works well. lc indicates our emphasis on the commonality, as opposed to the speciality in comparative text mining. a larger lc would allow us to learn a richer common theme model, whereas a smaller one would learn a weaker com- mon theme model, but stronger special models. the optimal value depends on the specific applications. according to this generative model, the log-likelihood of the whole set of collections is log p(c) = m i=1 dci wv [c(w, d) log[lbp(w|thb) +(1 - lb) k j=1 pd,j(lcp(w|thj) + (1 - lc)p(w|thj,i))]] 4.2 parameter estimation we estimate the background model thb using all the avail- able text in the m text collections. that is, ^p(w|thb) = m i=1 dci c(w, d) m i=1 dci w'v c(w', d) since lb and lc are set manually, this leaves us with the following parameters to estimate: (1) the common theme models, th = {th1, ..., thk}; (2) the special theme models for each collection ci, thci = {th1,i, ..., thk,i}; and (3) the theme mixing weights for each document d: pd = {pd,1, ..., pd,k}. 745 research track poster p(zd,ci,w = j) = p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) k j'=1 p(n) d,j'(lcp(n)(w|thj') + (1 - lc)p(n)(w|thj',i)) p(zd,ci,w = b) = lbp(w|thb) lbp(w|thb) + (1 - lb) k j=1 p(n) d,j (lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i)) p(zd,ci,j,w = c) = lcp(n)(w|thj) lcp(n)(w|thj) + (1 - lc)p(n)(w|thj,i) p(n+1) d,j = wv c(w, d)p(zd,ci,w = j) j' wv c(w, d)p(zd,ci,w = j') p(n+1)(w|thj) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)p(zd,ci,j,w = c) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)p(zd,ci,j,w' = c) p(n+1)(w|thj,i) = m i=1 dci c(w, d)(1 - p(zd,ci,w = b))p(zd,ci,w = j)(1 - p(zd,ci,j,w = c)) w'v m i=1 dci c(w', d)(1 - p(zd,ci,w' = b))p(zd,ci,w' = j)(1 - p(zd,ci,j,w' = c)) figure 3: em updating formulas for the cross-collection mixture model as in the simple mixture model, we can also use the em algorithm to compute a maximum likelihood estimate. the updating formulas are shown in figure 3. each em iteration involves scanning all the text once, so the algorithm is quite scalable. 4.3 using the model once the model is estimated, we will have k collection- specific models for each of the m collections and k common theme models across all collections. each of these mod- els is a word distribution or unigram language model. the high probability words can characterize the theme/cluster extracted. such words can often be used directly as a sum- mary or indirectly (e.g., through a hidden markov model) to extract relevant sentences to form a summary of the cor- responding theme. the extracted word distributions can also be used in many other ways, e.g., to classify other text documents or to link the related passages in the text collec- tions so that a user can navigate the information space for comparative analysis. we can input our bias for ctm through setting lb and lc manually. specifically, lb allows us to input our knowledge about the noise (stop words) in the data - if we know the text data is verbose, then we should set lb to a high value, whereas if the data is concise and mostly content-bearing keywords, then we need to set lb to a smaller value. sim- ilarly, lc allows us to input a trade-off between extracting common theme models (setting lc to a higher value) vs. ex- tracting collection-specific models (setting lc to a smaller value). such biases cannot be learned by the maximum like- lihood estimator. indeed, maximizing the data likelihood is only a means to achieve our ultimate goal, which is why we want to regularize our model in a meaningful way so that we can impose certain preferences while maximizing the data likelihood. the flexibility and control provided by lb and lc make it possible for a user to control the focus of the results of comparative text mining. 5. experiments and result analysis we evaluated the simple mixture model (simpmix) and the cross-collection mixture model (ccmix) on two do- mains - war news and laptop reviews. 5.1 war news the war news data consists of news excerpts on two com- parable events: (1) iraq war and (2) afghanistan war, both of which occurred in the last two years. the iraq war news excerpts were a combination of 30 articles from the cnn and bbc web sites over the last one year span. the afghanistan war data consists of 26 news articles downloaded from the cnn and bbc web sites for one year starting from nov. 2001. our goal is to compare these two wars and find out their common and specific characteristics. the results of using either the simple mixture model or the cross-collection mixture model are shown in table 2, where the top words of each theme model are listed along with their probabilities. we set lb = 0.95 for simpmix and set lb = 0.9, lc = 0.25 for ccmix; in both cases, the number of clusters is fixed to 5. variations of these parameters are discussed later. we see that although there are some interesting themes in the results of simpmix (e.g., cluster3 and cluster4 appear to be about american and british inquiry into the pres- ence of weapons in iraq, respectively, while cluster2 suggests the presence of british soldier in basra, a town in southern iraq), they are all about iraq war. we do not see any obvi- ous theme common to both iraq war and afghanistan war. this is expected given that simpmix pools all documents together without exploiting the collection structure. in contrast, the results of ccmix explicitly suggest the common themes and the corresponding collection-specific themes. for example, cluster3 clearly suggests that in both wars, there has been loss of lives. furthermore, the top words in the corresponding iraq theme include names of some key defense people that are involved in the iraq war (e.g., ""hoon"" is the last name of the british defense secre- tary and ""sanchez"" is the last name of the u.s general in iraq). in comparison, the top words in the corresponding afghanistan theme includes the name of the u.s defense secretary who had an important role in the afghan war. cluster4 and cluster5 are also meaningful themes. the common theme captured in cluster4 is the monday briefings by an official spokesman of a political administration during both wars; the corresponding special themes indicate the dif- ference in the topics discussed in the briefings (e.g., weapon inquiry for iraq war and bin laden for afghanistan war). the common theme of cluster5 is about the diplomatic role 746 research track poster table 2: war news results using simpmix model (top) vs. ccmix model (bottom) cluster1 cluster2 cluster3 cluster4 cluster5 common will 0.019 british 0.017 weapons 0.022 inquiry 0.052 countries 0.026 theme let 0.012 soldiers 0.015 kay 0.021 intelligence 0.036 contracts 0.023 words united 0.012 baghdad 0.015 rumsfeld 0.017 dossier 0.024 allawi 0.012 god 0.011 air 0.011 commission 0.014 hutton 0.021 hoon 0.012 inspectors 0.011 basra 0.011 group 0.014 claim 0.019 russian 0.010 your 0.010 mosque 0.010 senate 0.011 wmd 0.019 international 0.010 nation 0.010 southern 0.01 survey 0.010 mps 0.018 russia 0.009 n 0.010 fired 0.010 paper 0.010 committee 0.017 reconstruction 0.009 cluster1 cluster2 cluster3 cluster4 cluster5 common us 0.042 mr 0.029 killed 0.036 monday 0.036 united 0.042 theme nation 0.030 marines 0.025 month 0.032 official 0.032 nations 0.04 words will 0.024 dead 0.023 deaths 0.023 i 0.029 with 0.03 action 0.022 general 0.022 one 0.023 would 0.028 is 0.025 re 0.022 defense 0.019 died 0.022 where 0.025 it 0.024 border 0.019 key 0.018 been 0.022 do 0.025 they 0.023 its 0.017 since 0.018 drive 0.018 spokesman 0.022 diplomatic 0.023 ve 0.016 first 0.016 according 0.015 political 0.021 blair 0.022 iraq god 0.022 iraq 0.022 troops 0.016 intelligence 0.049 n 0.03 theme saddam 0.016 us 0.021 hoon 0.015 weapons 0.034 weapons 0.024 words baghdad 0.013 baghdad 0.017 sanchez 0.012 inquiry 0.028 inspectors 0.023 your 0.012 nato 0.015 billion 0.01 commission 0.017 council 0.016 live 0.01 iraqi 0.013 spokeswoman 0.008 independent 0.016 declaration 0.015 afghan paper 0.021 story 0.028 taleban 0.026 bin 0.031 northern 0.040 theme afghan 0.019 full 0.026 rumsfeld 0.020 laden 0.031 alliance 0.040 words meeting 0.014 saturday 0.016 hotel 0.012 steinberg 0.027 kabul 0.030 euro 0.012 e 0.015 front 0.011 taliban 0.023 taleban 0.025 highway 0.012 rabbani 0.012 dropped 0.010 chat 0.019 aid 0.020 played by the united nations (un). the corresponding spe- cial themes again suggest the difference between the two wars. the iraq theme indicates the role of un in sending weapon inspectors to iraq; the afghanistan theme refers to northern alliance that received aid from the un and came to power in afghanistan after the defeat of taliban. 5.2 laptop customer reviews this data set was constructed to test our models for com- paring opinions of customers on different laptops. we man- ually downloaded the following 3 review sets from epin- ions.com [4], filtering out the misplaced ones: apple ibook (m8598ll/a) mac notebook (34 reviews), dell inspiron 8200 (8tworh) pc notebook (22 reviews), ibm thinkpad t20 2647 (264744u) pc notebook (42 reviews). the results on this data set are generally similar to those on war news. due to the limit of space, we only show the ccmix results in table 3, which are obtained by setting lc=.7 and lb=.96 and fixing the number of clusters to 8. here we again see many very interesting common themes; in- deed, the top two words in the common themes can provide a very good summary of the themes (e.g., ""sound and speak- ers"" for cluster1, ""battery hours"" for cluster5, and ""mi- crosoft office"" for cluster8). however, the special themes, although suggesting some differences among the three lap- tops, are much harder to interpret. this may be because there is a great deal of variation in product-specific opin- ions in the data, which makes the data extremely sparse for learning a coherent collection-specific theme for each of the eight themes. 5.3 parameter tuning when we vary lb and lc in ccmix, the results are gen- erally different. specifically, when lb is set to a small value, non-informative stop words tend to show up in common themes. a reasonable value for lb is generally higher than 0.9 - in that case, the model automatically eliminates the non-informative words from the theme clusters, allowing for more discriminative clustering. indeed, in all our experi- ments, we have intentionally retained all the stop words, and the model is clearly able to filter out non-informative words, though in some cases, they still show up as top words in the common themes of the news data. they can be ""eliminated"" by using an even higher lb, but then we may end up having insufficient information to learn a common theme reliably. lc affects the vocabulary allocation between the common and collection-specific themes. in the news data experiments, when we change lc to a value above 0.4, the collection-specific terms would dominate the common theme models. in the laptop data experiments, when lc is less than 0.7, we lose many content keywords of the com- mon themes to the corresponding collection-specific themes. both lb and lc are intentionally left for a user to tune so that we can incorporate application-specific bias into the model. 6. related work the most related work to our work is the coupled clus- tering method presented in [8], which appears to be one of the very few studies considering the clustering problem in multiple collections. they extend the information bottle- neck approach to discover common clusters across different collections. comparative text mining goes beyond this by analyzing both the similarities and collection-specific differ- ences. we also use a completely different approach based on probabilistic mixture models. another related work is [10], where cross-training is used for learning classifiers from mul- tiple document sets. our work differs from it in that we per- form unsupervised learning. the aspect models studied in [7, 2] are also related to our work but they are closer to our baseline model and are not designed for comparing multiple collections. there are many studies in document clustering [1]. again, the difference lies in that they consider only one collection and thus are similar to the baseline model. our work is also related to document summarization, es- pecially multiple document summarization (e.g.,[9, 12]). in- deed, we can the results of ctm as a special form of sum- mary of multiple text collections. however, an important difference is that while a summary intends to retain the ex- plicit information in text (to maintain fidelity), ctm aims at extracting non-obvious implicit patterns. 7. conclusions and future work in this paper, we define and study a novel text mining problem referred to as comparative text mining. it is con- 747 research track poster table 3: laptop review results using ccmix model cluster1 cluster2 cluster3 cluster4 cluster5 cluster6 cluster7 cluster8 c sound 0.035 port 0.023 ram 0.105 m 0.027 battery 0.129 t 0.039 cd 0.095 office 0.037 o speakers 0.035 jack 0.021 mb 0.037 trackpad 0.018 hours 0.080 modem 0.017 drive 0.076 microsoft 0.021 m playback 0.034 ports 0.018 memory 0.034 chip 0.013 life 0.060 internet 0.017 rw 0.055 little 0.018 m feel 0.019 will 0.018 256mb 0.027 improved 0.012 5 0.038 later 0.014 dvd 0.049 basic 0.015 o pros 0.017 your 0.017 128mb 0.021 volume 0.012 end 0.016 configuration 0.014 combo 0.025 6 0.014 n cons 0.017 warm 0.013 tech 0.020 did 0.011 3 0.016 free 0.013 drives 0.023 under 0.013 market 0.017 keep 0.012 128 0.020 latch 0.011 high 0.015 vga 0.012 rom 0.020 mhz 0.012 size 0.014 down 0.012 support 0.018 make 0.010 processor 0.014 were 0.012 floppy 0.017 word 0.011 d rests 0.026 banias 0.019 options 0.039 inspiron 0.061 dells 0.032 fans 0.019 apoint 0.017 0 0.046 e palm 0.022 svga 0.014 sodimm 0.025 pentium 0.052 ran 0.017 shipping 0.017 blah 0.015 angle 0.018 l 9000 0.020 record 0.014 eraser 0.021 8200 0.03 prong 0.015 2nd 0.016 hook 0.011 portion 0.0154 l smart 0.018 supposedly 0.013 crucial 0.018 toshiba 0.027 requiring 0.014 tracking 0.015 tug 0.011 usb 0.0153 reader 0.018 rebate 0.013 sdram 0.018 440 0.026 second 0.011 spoke 0.015 2499 0.011 specials 0.014 a magazine 0.011 osx 0.040 macos 0.019 macos0.016 g4 0.016 iphoto 0.031 airport 0.075 appleworks 0.060 p ipod 0.010 quartz 0.015 personal 0.018 netscape 0.013 interlaced 0.016 itunes 0.027 burn 0.035 word 0.021 p strong 0.01 instance 0.014 shield 0.016 apache 0.009 mac 0.016 import 0.021 4x 0.018 result 0.016 l icon 0.009 underneath 0.012 airport 0.016 ie5 0.008 imac 0.014 book 0.018 reads 0.014 spreadsheet 0.013 e choppy 0.008 cooling 0.012 installation 0.015 ll 0.008 powermac 0.012 quicktime 0.016 schools 0.013 excel 0.012 i technology 0.023 rj 0.033 exchange 0.023 company 0.021 thinkpad 0.077 thinkpads 0.020 t20 0.04 list 0.015 b outdated 0.020 chik 0.018 hassle 0.016 570 0.017 ibm 0.047 connector 0.018 ultrabay 0.030 factor 0.013 m surprisingly 0.018 dsl 0.017 disc 0.015 turn 0.017 covers 0.029 connectors 0.018 tells 0.021 months 0.013 trackpoint 0.014 45 0.015 t23 0.012 buttons 0.015 lightest 0.028 bluetoot 0.018 device 0.021 cap 0.013 recommend 0.013 pacbell 0.012 cdrw 0.015 numlock 0.012 3000 0.027 sturdy 0.011 number 0.020 helpdesk 0.0128 cerned with discovering any latent common themes across a set of comparable collections of text as well as summariz- ing the similarities and differences of these collections along each theme. we propose a generative cross-collection mixture model for performing comparative text mining. the model simul- taneously performs cross-collection clustering and within- collection clustering, and can be applied to an arbitrary set of comparable text collections. we define the model and present the em algorithm that can estimate the model ef- ficiently. we evaluate the model on two different text data sets (i.e., a news article data set and a laptop review data set), and compare it with a baseline clustering method based on a simple mixture model. experiment results show that the cross-collection mixture model is quite effective in dis- covering the latent common themes across collections and performs significantly better than the baseline simple mix- ture model. the proposed model has many obvious applica- tions in opinion summarization and business intelligence. it also has many other less obvious applications in the general area of text mining and semantic integration of text. for example, our model can be used to compare the course web pages from the major computer science department web sites to discover core computer science topics. it can also be used to compare literature collections in different communities to support concept switching [11]. the work reported in this paper is just an initial step toward a promising new direction. there are many interest- ing future research directions. first, it may be interesting to explore how we can further improve the ccmix model and its estimation. one interesting direction is to explore the maximum a posterior (map) estimator, which would allow us to incorporate more prior knowledge in a princi- pled way. for example, a user may already have certain thematic aspects in mind. with map estimation, we can easily add that bias to the component models. second, we can generalize our model to model semi-structured data to perform more general comparative data mining. one way to achieve this goal is to introduce additional random variables in each component model so that we can model any struc- tured data. finally, it would be very interesting to explore how we could exploit the learned theme models to provide additional help to a user who wants to perform comparative analysis. for example, the learned common theme models can be used to construct a hidden markov model (hmm) to identify the parts in the text collections about the common themes, and to connect them through automatically gener- ated hyperlinks. this would allow a user to easily navigate through the common themes. 8. references [1] d. baker and a. mccallum. distributional clustering of words for text classification. in proceedings of acm sigir 1998, 1998. [2] d. blei, a. ng, and m. jordan. latent dirichlet allocation. journal of machine learning research, 3:993-1022, 2003. [3] a. p. dempster, n. m. laird, and d. b. rubin. maximum likelihood from incomplete data via the em algorithm. journal of royal statist. soc. b, 39:1-38, 1977. [4] epinions.com, 2003. http://www.epinions.com/. [5] r. feldman and i. dagan. knowledge discovery in textual databases. in proceedings of the international conference on knowledge discovery and data mining, 1995. [6] m. a. hearst. untangling text data mining. in proceedings of acl'99, 1999. [7] t. hofmann. probabilistic latent semantic indexing. in proceedings of acm sigir'99, pages 50-57, 1999. [8] z. marx, i. dagan, j. buhmann, and e. shamir. coupled clustering: a method for detecting structural correspondence. journal of machine learning research, 3:747-780, 2002. [9] k. mckeown, j. l. klavans, v. hatzivassiloglou, r. barzilay, and e. e. towards multidocument summarization by reformulation: progress and prospects. in proceedings of aaai-99. [10] s. sarawagi, s. chakrabarti, and s. godbole. cross-training: learning probabilistic mappings between topics. in proceedings of acm sigkdd 2003. [11] b. r. schatz. the interspace: concept navigation across distributed communities. computer, 35(1):54-62, 2002. [12] h. zha. generic summarization and keyphrase extraction using mutual reinforcement principle and sentence clustering. in proceedings of acm sigir 2002. 748 research track poster we will briefly address the 4 questions posted on piazza in this document. note that this is not our project report, for a detailed report of our work, please see the project report file. an overview of the function of the code (i.e., what it does and what it can be used for) the python scripts in the datasets folders are used to obtain the two datasets. using our own work in mp2, we were able to retrieve text data from news articles reporting covid-19 and sars. the python scripts in the models and analysis folder are used to generate and run the models. our inputs are the datasets we obtained. our outputs are clusters of words and their probabilities. they are presented both in the project report file and the models and analysis folder. documentation of how the software is implemented with sufficient detail so that others can have a basic understanding of your code for future extension or any further improvement. please watch the demo provided in the video presentation. the use of our code is straight forward. documentation of the usage of the software including either documentation of usages of apis or detailed instructions on how to install and run a software, whichever is applicable. please watch the demo provided in the video presentation. the use of our code is straight forward. brief description of the contribution of each team member in case of a multi-person team. each team member contributed equally to the program. we had multiple group meetings to assign tasks and made sure that everyone was on the same page. dongni yang: studied the paper, obtained the covid-19 dataset, obtained the sars dataset, generated and improved the models, ran the model. the main contributor to the demo of our source code. zhaoyuan yang: studied the paper, helped to generate the models, analyzed the results, and provided conclusion. the main contributor to the project report. yi zhou: studied the paper, explained the em algorithm used to improve the ccmix model, helped the running of the model, administrative tasks (cmt, github, presentations, etc.) cluster1 cluster2 cluster3 cluster4 cluster5 common theme words coffee people students sars sars students rules vaccine china china people wales firms disease health workers lockdown vaccines april outbreak universities covid pandemic travel people university government people health virus health restrictions support chinese kong beans england governments hong hong ccmix cluster1 cluster2 cluster3 cluster4 cluster5 common theme words firms sars people health people vaccine china rules virus covid vaccines disease lockdown people dr animals coffee wales kong hospital governments beijing restrictions students south christmas workers government hong health prices officials support china infection pandemic authorities university canada patients progress report group members: yi zhou zhaoyuan yang dongni yang the project of our group focuses on reproducing the results of the paper ""a cross-collection mixture model for comparative text mining"" by zhai and his co-workers. in the paper, zhai used his model to examine two sets of news data, one on the iraq war and the other on the afghanistan war. specifically, the iraq war news excerpts were a combination of 30 articles from the cnn, bbc websites over 2013-2014. the afghanistan war data consists of 26 news articles downloaded from the cnn and bbc websites for one year starting from nov. 2001. to examine the robustness of the model, we decided to use different news data for our project. the covid-19 pandemic is an event that we believe is both appropriate and comparable. with the help of our work and experiences from mp2, we extracted 35 articles from cnn, bbc, and huffpost websites to form our dataset. (work completed) we have also begun to input the modeling formulas into our scripts. the large number of unfamiliar concepts and variables have caused us some problems. we also found some of the formulas difficult to understand, but we believe we can fix this problem by further studying the paper and doing research on the related topics. (challenges encountered) our next steps would be to finish the modeling and run the dataset. plotting and analyzing the data may involve the usage of r markdown. after analyzing the data, we will check if our results correspond to the conclusions from the paper. (work pending) to view our work in detail, please take a look at the ""progress report"" folder. project report our project aims to reproduce the results in the paper by zhai and coworkers, ""a cross-collection mixture model for comparative text mining"". in this paper, the author developed an efficient text mining model, the cross-collection mixture model (ccmix), using the expectation-maximization (em) algorithm for comparative text mining (ctm). the simple mixture model was originally used as a naive solution to ctm. this method treats the multiple collections as one single collection and performs clustering. the ccmix model, however, uses latent common themes as well as a potentially different set of collection-specific themes for each collection. these component models directly correspond to all the information we are interested in discovering. in the paper, the authors used new articles from bbc and cnn as datasets to test this model. the comparison was taken between results from news on the iraq war and news on the afghanistan war. unfortunately, we are unable to obtain the same dataset for this project. instead, we chose the covid-19 pandemic and the sars outbreak in 2003 as the comparing events. we extracted 35 news articles from cnn, bbc, and huffpost to form our dataset. to build the model, we used an open-source code on github as the basis, with added features on theme clustering to let it behave as similarly in the paper. the paper suggested that the ccmix model can help reveal many interesting common aspects between the iraq war and the afghanistan war that the simpmix model failed to do. the results presented by simpmix were less meaningful, making it hard for people to extract useful information from the common words. in contrast, we were able to gather useful information from the ccmix results. for example, from cluster 5 we knew that the news about both events mentioned the diplomatic role played by the united nations, and from cluster 4 we knew that there were monday briefings by an official spokesman of a political administration during both wars. our attempt in comparing the simpmix and ccmix model also led to meaningful results. we set lb = 0:95 for simpmix and set lb = 0:9, lc = 0:25 for ccmix; in both cases, the number of clusters is fixed to 5. these parameters are exactly the same as in the paper. the results are tabulated below: simpmix cluster1 cluster2 cluster3 cluster4 cluster5 common theme words coffee people students sars sars students rules vaccine china china people wales firms disease health workers lockdown vaccines april outbreak universities covid pandemic travel people university government people health virus health restrictions support chinese kong beans england governments hong hong ccmix cluster1 cluster2 cluster3 cluster4 cluster5 common theme words firms sars people health people vaccine china rules virus covid vaccines disease lockdown people dr animals coffee wales kong hospital governments beijing restrictions students south christmas workers government hong health prices officials support china infection pandemic authorities university canada patients although there were some interesting themes from the simpmix results (for instance, cluster 2 mentioned the lockdown policies in britain, and cluster 3 indicates the government's effort in inventing vaccines), we could not find common themes to both events. it appears that cluster 1 to 3 solely described themes on covid-19 and cluster 4 and 5 only covered the sars pandemic. the ccmix results gave us more information on the similarities between sars and covid-19. in cluster 1, ""vaccine"", ""firms"" and ""animals"" suggest that there had been attempts for animal trials on vaccines in both cases. in cluster 4, we were able to tell that both pandemics involved an outburst of infected cases in hong kong, which allowed the events to draw global attention. the common theme captured in cluster 5 simply told us that a lot of patients went to the hospitals because of the diseases. the term ""dr"" also implied that there are large portions of interviews and advice of doctors in the news articles. overall, our reproduction work using ccmix model gave us similar results as in the paper. however, it was evident that there were aspects that our model failed to do. for example, words such as ""coffee"" and ""beans"" that were unrelated to our topic appear in the common theme words section in our results. one possible explanation is that we falsely collected words in the advertisement into our dataset. since our new articles mainly came from bbc news, the article websites may be displaying the same advertisement on coffee which let ""coffee"" being the most popular theme word. lacking information on specific events was another drawback of our research. in the paper, the authors were able to gather detailed information on the themes (for example, the name of the spokesman, the name of the commander, etc.). our results, however, only contained general aspects of the events. we were unable to figure out what exactly happened by just looking at the common theme words. this might be caused by the inherent difference of our dataset compared to the one in the paper. as the geographic scale and timescale are much larger in the case of the pandemic than the war, the focus on the news articles tends to be diverse. therefore, it can be hard for a word that is only important to a specific event to stand out in the common theme words list in our case. one possible solution we can think of is to set a lower lb value to let uncommon words more favored that set a higher lc to make the collection more collection-specific. project report our project aims to reproduce the results in the paper by zhai and coworkers, ""a cross- collection mixture model for comparative text mining"". in this paper, the author developed an efficient text mining model, the cross-collection mixture model (ccmix), using the expectation-maximization (em) algorithm for comparative text mining (ctm). the simple mixture model was originally used as a naive solution to ctm. this method treats the multiple collections as one single collection and performs clustering. the ccmix model, however, uses latent common themes as well as a potentially different set of collection-specific themes for each collection. these component models directly correspond to all the information we are interested in discovering. in the paper, the authors used new articles from bbc and cnn as datasets to test this model. the comparison was taken between results from news on the iraq war and news on the afghanistan war. unfortunately, we are unable to obtain the same dataset for this project. instead, we chose the covid-19 pandemic and the sars outbreak in 2003 as the comparing events. we extracted 35 news articles from cnn, bbc, and huffpost to form our dataset. to build the model, we used an open-source code on github as the basis, with added features on theme clustering to let it behave as similarly in the paper. the paper suggested that the ccmix model can help reveal many interesting common aspects between the iraq war and the afghanistan war that the simpmix model failed to do. the results presented by simpmix were less meaningful, making it hard for people to extract useful information from the common words. in contrast, we were able to gather useful information from the ccmix results. for example, from cluster 5 we knew that the news about both events mentioned the diplomatic role played by the united nations, and from cluster 4 we knew that there were monday briefings by an official spokesman of a political administration during both wars. our attempt in comparing the simpmix and ccmix model also led to meaningful results. we set lb = 0:95 for simpmix and set lb = 0:9, lc = 0:25 for ccmix; in both cases, the number of clusters is fixed to 5. these parameters are exactly the same as in the paper. the results are tabulated below: simpmix cluster1 cluster2 cluster3 cluster4 cluster5 common theme words coffee people students sars sars students rules vaccine china china people wales firms disease health workers lockdown vaccines april outbreak universities covid pandemic travel people university government people health virus health restrictions support chinese kong beans england governments hong hong ccmix cluster1 cluster2 cluster3 cluster4 cluster5 common theme words firms sars people health people vaccine china rules virus covid vaccines disease lockdown people dr animals coffee wales kong hospital governments beijing restrictions students south christmas workers government hong health prices officials support china infection pandemic authorities university canada patients although there were some interesting themes from the simpmix results (for instance, cluster 2 mentioned the lockdown policies in britain, and cluster 3 indicates the government's effort in inventing vaccines), we could not find common themes to both events. it appears that cluster 1 to 3 solely described themes on covid-19 and cluster 4 and 5 only covered the sars pandemic. the ccmix results gave us more information on the similarities between sars and covid-19. in cluster 1, ""vaccine"", ""firms"" and ""animals"" suggest that there had been attempts for animal trials on vaccines in both cases. in cluster 4, we were able to tell that both pandemics involved an outburst of infected cases in hong kong, which allowed the events to draw global attention. the common theme captured in cluster 5 simply told us that a lot of patients went to the hospitals because of the diseases. the term ""dr"" also implied that there are large portions of interviews and advice of doctors in the news articles. overall, our reproduction work using ccmix model gave us similar results as in the paper. however, it was evident that there were aspects that our model failed to do. for example, words such as ""coffee"" and ""beans"" that were unrelated to our topic appear in the common theme words section in our results. one possible explanation is that we falsely collected words in the advertisement into our dataset. since our new articles mainly came from bbc news, the article websites may be displaying the same advertisement on coffee which let ""coffee"" being the most popular theme word. lacking information on specific events was another drawback of our research. in the paper, the authors were able to gather detailed information on the themes (for example, the name of the spokesman, the name of the commander, etc.). our results, however, only contained general aspects of the events. we were unable to figure out what exactly happened by just looking at the common theme words. this might be caused by the inherent difference of our dataset compared to the one in the paper. as the geographic scale and timescale are much larger in the case of the pandemic than the war, the focus on the news articles tends to be diverse. therefore, it can be hard for a word that is only important to a specific event to stand out in the common theme words list in our case. one possible solution we can think of is to set a lower lb value to let uncommon words more favored that set a higher lc to make the collection more collection-specific. reproducing a paper: contextual text mining the team captain is yi zhou. netid is yiz9. team members are: yi zhou. netid is yiz9. (captain) zhaoyuan yang. netid is zy7. dongni yang. netid is dongniy2. our chosen paper is a crosscollection mixture model for comparative text mining. we are going to use python in this project. we can't obtain the exact same dataset used in the paper. however, we can use other datasets to achieve similar goals. courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. progress report updated. (used part of our work from mp2. i hope that's ok.) project completed. make sure you check out our project report and our project presentation, which includes a demo of our source code. source code for each part can be found in each folder. we used our own works in mps and also some online resources. the references can be found in the main branch. thank you for grading! if needed, please contact us through the emails provided on the cmt. just added an addition to our documentation, which answers the 4 questions on piazza. thank you for grading!"	['crosscollection', 'mixture', 'model', 'comparative', 'text', 'mining', 'chengxiang', 'zhai', 'department', 'computer', 'science', 'university', 'illinois', 'urbana', 'champaign', 'atulya', 'velivelli', 'electrical', 'engineering', 'bei', 'yu', 'graduate', 'school', 'library', 'information', 'abstract', 'paper', 'define', 'study', 'novel', 'problem', 'refer', 'ctm', 'given', 'set', 'comparable', 'collections', 'task', 'discover', 'latent', 'com', 'mon', 'themes', 'across', 'well', 'summarize', 'similarity', 'differences', 'along', 'theme', 'general', 'subsumes', 'many', 'interest', 'ing', 'applications', 'including', 'business', 'intelligence', 'opinion', 'summarization', 'propose', 'generative', 'probabilistic', 'mix', 'ture', 'simul', 'taneously', 'performs', 'clustering', 'within', 'collection', 'applied', 'arbitrary', 'estimated', 'efficiently', 'using', 'expectationmaximization', 'em', 'algo', 'rithm', 'evaluate', 'two', 'different', 'data', 'sets', 'ie', 'news', 'article', 'laptop', 'review', 'compare', 'baseline', 'method', 'also', 'based', 'experiment', 'results', 'show', 'quite', 'effective', 'discovering', 'common', 'significantly', 'better', 'categories', 'subject', 'descriptors', 'h', 'informa', 'tion', 'search', 'retrieval', 'terms', 'algorithms', 'keywords', 'models', 'clus', 'tering', 'introduction', 'concerned', 'extracting', 'knowledge', 'patterns', 'much', 'existing', 'research', 'focused', 'one', 'single', 'goals', 'often', 'extract', 'basic', 'semantic', 'units', 'named', 'entities', 'rela', 'tions', 'topic', 'permission', 'make', 'digital', 'hard', 'copies', 'part', 'work', 'personal', 'classroom', 'use', 'granted', 'without', 'fee', 'provided', 'made', 'distributed', 'profit', 'commercial', 'advantage', 'bear', 'notice', 'full', 'citation', 'first', 'page', 'copy', 'otherwise', 'republish', 'post', 'servers', 'redistribute', 'lists', 'requires', 'prior', 'specific', 'andor', 'kdd', 'august', 'seattle', 'washington', 'usa', 'copyright', 'acm', 'ferred', 'differ', 'ences', 'specif', 'ically', 'involves', 'discovered', 'characterize', 'among', 'col', 'lections', 'unique', 'need', 'exists', 'applica', 'summarizing', 'reviews', 'similar', 'products', 'comparing', 'opinions', 'simultaneously', 'component', 'multinomial', 'distribution', 'characterizing', 'collectionspecific', 'explicitly', 'modeled', 'pro', 'posed', 'expectation', 'maximization', 'algorithm', 'rest', 'organized', 'follows', 'section', 'briefly', 'introduce', 'present', 'simple', 'new', 'discuss', 'motivating', 'example', 'popularity', 'ecommerce', 'online', 'customer', 'eval', 'uations', 'becoming', 'widely', 'stores', 'thirdparty', 'websites', 'pioneers', 'like', 'amazoncom', 'epin', 'ionscom', 'accumulated', 'large', 'amounts', 'input', 'comments', 'recommendations', 'advice', 'etc', 'number', 'epinionscom', 'track', 'poster', 'million', 'product', 'could', 'hundreds', 'impossible', 'readers', 'go', 'thus', 'desirable', 'certain', 'type', 'order', 'provide', 'salient', 'feedbacks', 'peers', 'important', 'identify', 'aspects', 'reviewers', 'mentioned', 'group', 'accord', 'similarities', 'suppose', 'three', 'brands', 'laptops', 'dell', 'ibm', 'apple', 'want', 'useful', 'summary', 'would', 'tab', 'ular', 'representation', 'shown', 'table', 'row', 'represents', 'aspect', 'subtopic', 'ent', 'columns', 'correspond', 'tabular', 'subtopics', 'battery', 'life', 'long', 'enough', 'short', 'memory', 'good', 'bad', 'speed', 'slow', 'fast', 'course', 'difficult', 'duce', 'completely', 'automatically', 'however', 'achieve', 'less', 'ambitious', 'goal', 'identifying', 'character', 'istics', 'unsupervised', 'way', 'concrete', 'possible', 'appli', 'cations', 'precisely', 'corresponds', 'roughly', 'granularity', 'applicationspecific', 'fundamental', 'ex', 'ploratory', 'analysis', 'addition', 'comparison', 'companies', 'cus', 'tomer', 'relationship', 'management', 'groups', 'customers', 'integration', 'challenging', 'several', 'ways', 'learning', 'training', 'available', 'reason', 'purposes', 'makes', 'minimum', 'assumptions', 'principle', 'partition', 'discrimination', 'discov', 'ered', 'dif', 'ficult', 'goes', 'beyond', 'regular', 'onecollection', 'requiring', 'alignment', 'multiple', 'since', 'must', 'rely', 'methods', 'perform', 'prob', 'abilistic', 'describe', 'repre', 'sents', 'straightforward', 'application', 'min', 'sophisticated', 'specifically', 'designed', 'th', 'figure', 'naive', 'solution', 'treat', 'collec', 'hope', 'clusters', 'represent', 'others', 'rep', 'resent', 'see', 'documents', 'assume', 'k', 'characterized', 'word', 'distribu', 'called', 'unigram', 'language', 'document', 'regarded', 'sample', 'components', 'fit', 'union', 'obtained', 'used', 'analyze', 'formally', 'let', 'c', 'cm', 'thk', 'thb', 'background', 'following', 'generation', 'pdw', 'lbpwthb', 'lb', 'j', 'pdjpwthj', 'w', 'pdj', 'documentspecific', 'mixing', 'weight', 'jth', 'loglikelihood', 'log', 'pcl', 'dci', 'wv', 'cw', 'x', 'loglbpwthb', 'v', 'words', 'vocabulary', 'count', 'l', 'thj', 'pdjk', 'parameters', 'purpose', 'force', 'done', 'discriminative', 'leading', 'informative', 'control', 'effect', 'estimator', 'compute', 'maximum', 'likelihood', 'estimate', 'updating', 'formulas', 'pzdw', 'pn', 'dj', 'pnwthj', 'djpnwthj', 'b', 'dpzdw', 'bpzdw', 'closely', 'related', 'probabilis', 'tic', 'indexing', 'plsi', 'proposed', 'treats', 'singlecollection', 'inadequate', 'reasons', 'ignored', 'structure', 'result', 'may', 'sent', 'easy', 'cluster', 'particular', 'coordinated', 'addresses', 'defi', 'ciencies', 'cross', 'main', 'idea', 'improving', 'distinguish', 'special', 'char', 'acterize', 'con', 'sider', 'potentially', 'ferent', 'illustrated', 'directly', 'interested', 'ering', 'sampling', 'ci', 'thi', 'thki', 'capture', 'pdwci', 'pdjlcpwthj', 'lcpwthji', 'lc', 'opposed', 'thji', 'intuitively', 'generate', 'decide', 'whether', 'according', 'larger', 'likely', 'controlled', 'probability', 'generating', 'finally', 'still', 'trolled', 'weighting', 'intentionally', 'user', 'interpretation', 'reflects', 'noisy', 'believe', 'verbose', 'value', 'experiments', 'works', 'indicates', 'emphasis', 'commonality', 'speciality', 'allow', 'us', 'learn', 'richer', 'whereas', 'smaller', 'weaker', 'stronger', 'optimal', 'depends', 'whole', 'pc', 'parameter', 'estimation', 'avail', 'able', 'pwthb', 'manually', 'leaves', 'thci', 'weights', 'pd', 'pdk', 'pzdciw', 'lcpnwthj', 'lcpnwthji', 'djlcpnwthj', 'pzdcijw', 'dpzdciw', 'bpzdciw', 'jpzdcijw', 'pnwthji', 'iteration', 'scanning', 'scalable', 'mod', 'els', 'high', 'themecluster', 'extracted', 'sum', 'mary', 'indirectly', 'eg', 'hidden', 'markov', 'relevant', 'sentences', 'form', 'cor', 'responding', 'distributions', 'classify', 'link', 'passages', 'navigate', 'space', 'bias', 'setting', 'allows', 'noise', 'stop', 'know', 'concise', 'mostly', 'contentbearing', 'sim', 'ilarly', 'tradeoff', 'higher', 'vs', 'tracting', 'biases', 'cannot', 'learned', 'lihood', 'indeed', 'maximizing', 'means', 'ultimate', 'regularize', 'meaningful', 'impose', 'preferences', 'flexibility', 'focus', 'evaluated', 'simpmix', 'ccmix', 'mains', 'war', 'consists', 'excerpts', 'parable', 'events', 'iraq', 'afghanistan', 'occurred', 'last', 'years', 'combination', 'articles', 'cnn', 'bbc', 'web', 'sites', 'year', 'span', 'downloaded', 'starting', 'nov', 'wars', 'find', 'characteristics', 'either', 'top', 'listed', 'probabilities', 'cases', 'fixed', 'variations', 'discussed', 'later', 'although', 'interesting', 'appear', 'american', 'british', 'inquiry', 'pres', 'ence', 'weapons', 'respectively', 'suggests', 'presence', 'soldier', 'basra', 'town', 'southern', 'obvi', 'ous', 'expected', 'pools', 'together', 'exploiting', 'contrast', 'suggest', 'corresponding', 'clearly', 'loss', 'lives', 'furthermore', 'include', 'names', 'key', 'defense', 'people', 'involved', 'hoon', 'name', 'secre', 'tary', 'sanchez', 'includes', 'secretary', 'role', 'afghan', 'captured', 'monday', 'briefings', 'official', 'spokesman', 'political', 'administration', 'indicate', 'ference', 'topics', 'weapon', 'bin', 'laden', 'diplomatic', 'bottom', 'countries', 'soldiers', 'kay', 'contracts', 'united', 'baghdad', 'rumsfeld', 'dossier', 'allawi', 'god', 'air', 'commission', 'hutton', 'inspectors', 'claim', 'russian', 'mosque', 'senate', 'wmd', 'international', 'nation', 'survey', 'mps', 'russia', 'n', 'fired', 'committee', 'reconstruction', 'mr', 'killed', 'marines', 'month', 'nations', 'dead', 'deaths', 'action', 'died', 'border', 'drive', 'blair', 'troops', 'saddam', 'nato', 'billion', 'council', 'live', 'iraqi', 'spokeswoman', 'independent', 'declaration', 'story', 'taleban', 'northern', 'alliance', 'meeting', 'saturday', 'hotel', 'steinberg', 'kabul', 'euro', 'e', 'front', 'taliban', 'highway', 'rabbani', 'dropped', 'chat', 'aid', 'played', 'un', 'spe', 'cial', 'difference', 'sending', 'refers', 'received', 'came', 'power', 'defeat', 'constructed', 'test', 'paring', 'man', 'ually', 'filtering', 'misplaced', 'ones', 'ibook', 'mlla', 'mac', 'notebook', 'inspiron', 'tworh', 'thinkpad', 'u', 'generally', 'due', 'limit', 'fixing', 'deed', 'sound', 'speak', 'ers', 'hours', 'mi', 'crosoft', 'office', 'suggesting', 'lap', 'tops', 'harder', 'interpret', 'great', 'deal', 'variation', 'productspecific', 'opin', 'ions', 'extremely', 'sparse', 'coherent', 'eight', 'tuning', 'vary', 'gen', 'erally', 'small', 'noninformative', 'tend', 'reasonable', 'case', 'eliminates', 'allowing', 'experi', 'ments', 'retained', 'filter', 'though', 'eliminated', 'even', 'end', 'insufficient', 'reliably', 'affects', 'allocation', 'change', 'dominate', 'lose', 'content', 'left', 'tune', 'incorporate', 'coupled', 'presented', 'appears', 'studies', 'considering', 'extend', 'bottle', 'neck', 'approach', 'analyzing', 'another', 'crosstraining', 'classifiers', 'mul', 'tiple', 'differs', 'per', 'studied', 'closer', 'lies', 'consider', 'es', 'pecially', 'intends', 'retain', 'plicit', 'maintain', 'fidelity', 'aims', 'nonobvious', 'implicit', 'conclusions', 'future', 'referred', 'port', 'ram', 'cd', 'speakers', 'jack', 'mb', 'trackpad', 'modem', 'microsoft', 'playback', 'ports', 'chip', 'internet', 'rw', 'little', 'feel', 'improved', 'dvd', 'pros', 'volume', 'configuration', 'combo', 'cons', 'warm', 'tech', 'free', 'drives', 'market', 'keep', 'latch', 'vga', 'rom', 'mhz', 'size', 'support', 'processor', 'floppy', 'rests', 'banias', 'options', 'dells', 'fans', 'apoint', 'palm', 'svga', 'sodimm', 'pentium', 'ran', 'shipping', 'blah', 'angle', 'record', 'eraser', 'prong', 'nd', 'hook', 'portion', 'smart', 'supposedly', 'crucial', 'toshiba', 'tracking', 'tug', 'usb', 'reader', 'rebate', 'sdram', 'second', 'spoke', 'specials', 'magazine', 'osx', 'macos', 'g', 'iphoto', 'airport', 'appleworks', 'p', 'ipod', 'quartz', 'netscape', 'interlaced', 'itunes', 'burn', 'strong', 'instance', 'shield', 'apache', 'import', 'icon', 'underneath', 'imac', 'book', 'reads', 'spreadsheet', 'choppy', 'cooling', 'installation', 'powermac', 'quicktime', 'schools', 'excel', 'technology', 'rj', 'exchange', 'company', 'thinkpads', 'list', 'outdated', 'chik', 'hassle', 'connector', 'ultrabay', 'factor', 'surprisingly', 'dsl', 'disc', 'turn', 'covers', 'connectors', 'tells', 'months', 'trackpoint', 'buttons', 'lightest', 'bluetoot', 'device', 'cap', 'recommend', 'pacbell', 'cdrw', 'numlock', 'sturdy', 'helpdesk', 'cerned', 'summariz', 'performing', 'ef', 'ficiently', 'dis', 'covering', 'obvious', 'area', 'pages', 'major', 'core', 'literature', 'communities', 'concept', 'switching', 'reported', 'initial', 'step', 'toward', 'promising', 'direction', 'directions', 'explore', 'improve', 'posterior', 'map', 'princi', 'pled', 'already', 'thematic', 'mind', 'easily', 'add', 'generalize', 'semistructured', 'additional', 'random', 'variables', 'struc', 'tured', 'exploit', 'help', 'wants', 'construct', 'hmm', 'parts', 'connect', 'gener', 'ated', 'hyperlinks', 'references', 'baker', 'mccallum', 'distributional', 'classification', 'proceedings', 'sigir', 'blei', 'ng', 'jordan', 'dirichlet', 'journal', 'machine', 'dempster', 'laird', 'rubin', 'incomplete', 'via', 'royal', 'statist', 'soc', 'httpwwwepinionscom', 'r', 'feldman', 'dagan', 'discovery', 'textual', 'databases', 'conference', 'hearst', 'untangling', 'acl', 'hofmann', 'z', 'marx', 'buhmann', 'shamir', 'detecting', 'structural', 'correspondence', 'mckeown', 'klavans', 'hatzivassiloglou', 'barzilay', 'towards', 'multidocument', 'reformulation', 'progress', 'prospects', 'aaai', 'sarawagi', 'chakrabarti', 'godbole', 'mappings', 'sigkdd', 'schatz', 'interspace', 'navigation', 'zha', 'generic', 'keyphrase', 'extraction', 'mutual', 'reinforcement', 'sentence', 'address', 'questions', 'posted', 'piazza', 'note', 'project', 'report', 'detailed', 'please', 'file', 'overview', 'function', 'code', 'python', 'scripts', 'datasets', 'folders', 'obtain', 'mp', 'retrieve', 'reporting', 'covid', 'sars', 'folder', 'run', 'inputs', 'outputs', 'documentation', 'software', 'implemented', 'sufficient', 'detail', 'understanding', 'extension', 'improvement', 'watch', 'demo', 'video', 'presentation', 'straight', 'forward', 'usage', 'usages', 'apis', 'instructions', 'install', 'whichever', 'applicable', 'brief', 'description', 'contribution', 'team', 'member', 'multiperson', 'contributed', 'equally', 'program', 'meetings', 'assign', 'tasks', 'sure', 'everyone', 'dongni', 'yang', 'dataset', 'generated', 'contributor', 'source', 'zhaoyuan', 'helped', 'analyzed', 'conclusion', 'yi', 'zhou', 'explained', 'running', 'administrative', 'cmt', 'github', 'presentations', 'coffee', 'students', 'rules', 'vaccine', 'china', 'wales', 'firms', 'disease', 'health', 'workers', 'lockdown', 'vaccines', 'april', 'outbreak', 'universities', 'pandemic', 'travel', 'government', 'virus', 'restrictions', 'chinese', 'kong', 'beans', 'england', 'governments', 'hong', 'dr', 'animals', 'hospital', 'beijing', 'south', 'christmas', 'prices', 'officials', 'infection', 'authorities', 'canada', 'patients', 'members', 'focuses', 'reproducing', 'coworkers', 'examine', 'robustness', 'decided', 'event', 'appropriate', 'experiences', 'huffpost', 'completed', 'begun', 'modeling', 'unfamiliar', 'concepts', 'caused', 'problems', 'found', 'understand', 'fix', 'studying', 'challenges', 'encountered', 'next', 'steps', 'finish', 'plotting', 'involve', 'markdown', 'check', 'pending', 'view', 'take', 'look', 'reproduce', 'author', 'developed', 'efficient', 'originally', 'uses', 'authors', 'taken', 'unfortunately', 'unable', 'instead', 'chose', 'build', 'opensource', 'basis', 'added', 'features', 'behave', 'similarly', 'suggested', 'reveal', 'failed', 'making', 'gather', 'knew', 'attempt', 'led', 'exactly', 'tabulated', 'policies', 'britain', 'effort', 'inventing', 'solely', 'described', 'covered', 'gave', 'attempts', 'animal', 'trials', 'tell', 'pandemics', 'outburst', 'infected', 'allowed', 'draw', 'global', 'attention', 'simply', 'told', 'lot', 'went', 'hospitals', 'diseases', 'term', 'implied', 'portions', 'interviews', 'doctors', 'overall', 'reproduction', 'evident', 'unrelated', 'explanation', 'falsely', 'collected', 'advertisement', 'mainly', 'displaying', 'popular', 'lacking', 'drawback', 'commander', 'contained', 'happened', 'looking', 'might', 'inherent', 'compared', 'geographic', 'scale', 'timescale', 'tends', 'diverse', 'therefore', 'stand', 'think', 'lower', 'uncommon', 'favored', 'contextual', 'captain', 'netid', 'yiz', 'zy', 'dongniy', 'chosen', 'going', 'cant', 'exact', 'courseproject', 'fork', 'repository', 'paste', 'coursera', 'week', 'overviewweek', 'activities', 'updated', 'thats', 'ok', 'resources', 'branch', 'thank', 'grading', 'needed', 'contact', 'emails', 'answers']
https://github.com/yuanchung1987/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/yukuo78/CourseProject	"monday, november 30, 2020 progress report subject: reproducing paper: hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. 1) progress made thus far finished reading this paper and the original paper first paper. acquired the datasets needed for the paper experiments. 2) remaining tasks the remaining tasks would be actually understand the described model and try to reproduce the algorithm and experiment in time, hopefully. 3) any challenges/issues being faced. since previously i'm quite busy with some other study in parallel with this course. except for keeping up with the lesson and mps, and also the taking exam, i hadn't have enough time to work on the project, or to join a team. so i'm working alone now. this is also why i chose this reproducing paper as project, since i figured this requires least creativity thus effort, and might get some help from classmates and tas. 1 sunday, october 25, 2020 project proposal 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. kuoyu2 2. which paper have you chosen? hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. 3. which programming language do you plan to use? python 4 can you obtain the datasets used in the paper for evaluation? maybe not all. 5. if you answer ""no"" to question 4, can you obtain a similar dataset (e.g. a more recent version of the same dataset, or another dataset that is similar in nature)? i belive i can with some help from tas. 6. if you answer ""no"" to questions 4 & 5, how are you going to demonstrate that you have successfully reproduced the method introduced in the paper? 1 courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. please check the docs directory for all progress report, documentation and video presentation."	['monday', 'november', 'progress', 'report', 'subject', 'reproducing', 'paper', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'latent', 'aspect', 'rating', 'analysis', 'without', 'keyword', 'supervision', 'made', 'thus', 'far', 'finished', 'reading', 'original', 'first', 'acquired', 'datasets', 'needed', 'experiments', 'remaining', 'tasks', 'would', 'actually', 'understand', 'described', 'model', 'try', 'reproduce', 'algorithm', 'experiment', 'time', 'hopefully', 'challengesissues', 'faced', 'since', 'previously', 'im', 'quite', 'busy', 'study', 'parallel', 'course', 'except', 'keeping', 'lesson', 'mps', 'also', 'taking', 'exam', 'hadnt', 'enough', 'work', 'project', 'join', 'team', 'working', 'alone', 'chose', 'figured', 'requires', 'least', 'creativity', 'effort', 'might', 'get', 'help', 'classmates', 'tas', 'sunday', 'october', 'proposal', 'names', 'netids', 'members', 'captain', 'administrative', 'duties', 'kuoyu', 'chosen', 'programming', 'language', 'plan', 'use', 'python', 'obtain', 'used', 'evaluation', 'maybe', 'answer', 'question', 'similar', 'dataset', 'eg', 'recent', 'version', 'another', 'nature', 'belive', 'questions', 'going', 'demonstrate', 'successfully', 'reproduced', 'method', 'introduced', 'courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'overviewweek', 'activities', 'check', 'docs', 'directory', 'documentation', 'video', 'presentation']
https://github.com/yunfeim2/CourseProject	courseproject this project is about reproducing the results for latent aspect analysis. the source code is from the paper provided with the data. software installation first we should install the nltk tool using the command: import nltk nltk.download() the project will be base on a mix of java and python run the project first we should generator the key work for our latent aspect analysis by using the code python key_generator.py the stopwords.txt is for the stop work that will like occur in all kinds of documents. therefore we ignore the exsitence of the those words to produce a better keyword collection. after that, download the nlp from https://opennlp.apache.org/ to install and put the enviromental variable to path to the folder you installed next, we should using java platform to run the analyse.java under src and the final result of the hotel data will be listed under vectors folder in vector_chi_4000.dat presentation vedio : https://mediaspace.illinois.edu/media/1_64gzbvp4 sources http://sifaka.cs.uiuc.edu/~wang296/data/index.html http://sifaka.cs.uiuc.edu/~wang296/ https://www.cs.virginia.edu/~hw5x/paper/p618.pdf	['courseproject', 'project', 'reproducing', 'results', 'latent', 'aspect', 'analysis', 'source', 'code', 'paper', 'provided', 'data', 'software', 'installation', 'first', 'install', 'nltk', 'tool', 'using', 'command', 'import', 'nltkdownload', 'base', 'mix', 'java', 'python', 'run', 'generator', 'key', 'work', 'key_generatorpy', 'stopwordstxt', 'stop', 'like', 'occur', 'kinds', 'documents', 'therefore', 'ignore', 'exsitence', 'words', 'produce', 'better', 'keyword', 'collection', 'download', 'nlp', 'httpsopennlpapacheorg', 'put', 'enviromental', 'variable', 'path', 'folder', 'installed', 'next', 'platform', 'analysejava', 'src', 'final', 'result', 'hotel', 'listed', 'vectors', 'vector_chi_dat', 'presentation', 'vedio', 'httpsmediaspaceillinoisedumedia_gzbvp', 'sources', 'httpsifakacsuiuceduwangdataindexhtml', 'httpsifakacsuiuceduwang', 'httpswwwcsvirginiaeduhwxpaperppdf']
https://github.com/yunhezhang/CourseProject	courseproject final report - https://github.com/yunhezhang/courseproject/blob/main/doc/final_report.pdf. demo is at https://github.com/yunhezhang/courseproject/blob/main/demo.mp4. directory structure: doc - documentations src - source code for the svm model and web crawler trainingdata - training data for the svm model	['courseproject', 'final', 'report', 'httpsgithubcomyunhezhangcourseprojectblobmaindocfinal_reportpdf', 'demo', 'httpsgithubcomyunhezhangcourseprojectblobmaindemomp', 'directory', 'structure', 'doc', 'documentations', 'src', 'source', 'code', 'svm', 'model', 'web', 'crawler', 'trainingdata', 'training', 'data']
https://github.com/yuranw3/CourseProject	"courseproject team-rpdd please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities. group name: team-rpdd presentation link https://mediaspace.illinois.edu/media/t/1_fylki6t8 team name: team-rpdd team member: yuran wang netid: yuranw3 [captain] hongru wang netid:hongru2 zhengyu li netid: zhengyu6 1) progress made thus far we've read the papers.we have started writing code. we have not finished the coding session and still in progress. 2) remaining tasks we will debug our program soon once we finish it. 3) any challenges/issues being faced we have not encountered any specific challenges yet. documentation team: team-rpdd team member:yuran wang (netid:yuranw3) [captain] zhengyu li (netid:zhengyu6) hongru wang (netid:hongru2) project: reproducing a paper(latent aspect rating analysis) 1) an overview of the functions of the code: a) create vocabulary from the dataset. b) use stemmer on the dataset to create a vocabulary corpus of the reviews, which will be used for aspect mining and rating. c) use bootstrapping to mine aspects(stored in\data\seeds\hotel_bootstrapping.dat ), use regression to calculate weight for each aspect. d) calculate rating per minded aspects. e) the results are in data/vectors/vector_chi_4000.dat"" 2) implementation documentation: a) acknowledgment: the authors of the paper released the codes for lara on his personal website(http://sifaka.cs.uiuc.edu/~wang296/) . we modified the original version of the code for our projects. b) review dataset sources: http://sifaka.cs.uiuc.edu/~wang296/data/index.html c) setup instructions: i) add colt.jar, concurrent.jar, opennlp-maxent-3.0.1-incubating.jar, opennlp-tools-1.5.1-incubating.jar, and jre system library[java-se-1.7] to the libraries of java build path. then run the ""analyzer"" file. 3) usage documentations: a) in order to run the code, the user needs to import tools from opennlp. you can import the core toolkit directly from maven. then run mvn install. the detailed dolumentation can be found here https://github.com/apache/opennlp. b) it requires tools from ntlk c) in order to run the code, the user also needs python3 and java. 4) work distribution: a) we worked together so everyone on the team participated. 5) final report: the authors of the paper developed the laram to effectively solve the problem of lara, including automatically identifying meaningful topical aspects, inferring interesting differences in aspect ratings within reviews, and modeling users' preferences with the inferred relative emphasis on different aspects. such detailed analysis of opinions at the level of topical aspects enabled by laram can support multiple application tasks, including aspect opinion summarization, ranking of entities based on aspect ratings, and analysis of reviewers rating behavior. our project borrowed the ideas from the author's work about lara, and our work is mainly based on aspects-mining. 1. what are the names and netids of all your team members? who is the captain? the captain will have more administrative duties than team members. team member1:yuran wang (netid:yuranw3) [captain] team member2:zhengyu li (netid:zhengyu6) team member3:hongru wang (netid:hongru2) 2. which paper have you chosen? we choose option 1: reproducing a paper as our project. and we choose paper latent aspect rating analysis hongning wang, yue lu, and chengxiang zhai. 2011. latent aspect rating analysis without aspect keyword supervision. in proceedings of acm kdd 2011, pp. 618-626. doi=10.1145/2020408.2020505 3. which programming language do you plan to use? python 4. can you obtain the datasets used in the paper for evaluation? yes"	['courseproject', 'teamrpdd', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities', 'group', 'name', 'presentation', 'httpsmediaspaceillinoisedumediat_fylkit', 'team', 'member', 'yuran', 'wang', 'netid', 'yuranw', 'captain', 'hongru', 'netidhongru', 'zhengyu', 'li', 'progress', 'made', 'thus', 'far', 'weve', 'read', 'paperswe', 'started', 'writing', 'code', 'finished', 'coding', 'session', 'still', 'remaining', 'tasks', 'debug', 'program', 'soon', 'finish', 'challengesissues', 'faced', 'encountered', 'specific', 'challenges', 'yet', 'documentation', 'memberyuran', 'netidyuranw', 'netidzhengyu', 'reproducing', 'paperlatent', 'aspect', 'rating', 'analysis', 'overview', 'functions', 'create', 'vocabulary', 'dataset', 'b', 'use', 'stemmer', 'corpus', 'reviews', 'used', 'mining', 'c', 'bootstrapping', 'mine', 'aspectsstored', 'indataseedshotel_bootstrappingdat', 'regression', 'calculate', 'weight', 'per', 'minded', 'aspects', 'e', 'results', 'datavectorsvector_chi_dat', 'implementation', 'acknowledgment', 'authors', 'paper', 'released', 'codes', 'lara', 'personal', 'websitehttpsifakacsuiuceduwang', 'modified', 'original', 'version', 'projects', 'review', 'sources', 'httpsifakacsuiuceduwangdataindexhtml', 'setup', 'add', 'coltjar', 'concurrentjar', 'opennlpmaxentincubatingjar', 'opennlptoolsincubatingjar', 'jre', 'system', 'libraryjavase', 'libraries', 'java', 'build', 'path', 'run', 'analyzer', 'file', 'usage', 'documentations', 'order', 'user', 'needs', 'import', 'tools', 'opennlp', 'core', 'toolkit', 'directly', 'maven', 'mvn', 'install', 'dolumentation', 'found', 'httpsgithubcomapacheopennlp', 'requires', 'ntlk', 'also', 'python', 'work', 'distribution', 'worked', 'together', 'everyone', 'participated', 'final', 'report', 'developed', 'laram', 'effectively', 'solve', 'problem', 'including', 'automatically', 'identifying', 'meaningful', 'topical', 'inferring', 'interesting', 'differences', 'ratings', 'within', 'modeling', 'users', 'preferences', 'inferred', 'relative', 'emphasis', 'different', 'opinions', 'level', 'enabled', 'support', 'multiple', 'application', 'opinion', 'summarization', 'ranking', 'entities', 'based', 'reviewers', 'behavior', 'borrowed', 'ideas', 'mainly', 'aspectsmining', 'names', 'netids', 'members', 'administrative', 'duties', 'memberzhengyu', 'memberhongru', 'chosen', 'choose', 'option', 'latent', 'hongning', 'yue', 'lu', 'chengxiang', 'zhai', 'without', 'keyword', 'supervision', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'programming', 'language', 'plan', 'obtain', 'datasets', 'evaluation', 'yes']
https://github.com/yy228731/CourseProject	courseproject please fork this repository and paste the github link of your fork on microsoft cmt. detailed instructions are on coursera under week 1: course project overview/week 9 activities.	['courseproject', 'please', 'fork', 'repository', 'paste', 'github', 'link', 'microsoft', 'cmt', 'detailed', 'instructions', 'coursera', 'week', 'course', 'project', 'overviewweek', 'activities']
https://github.com/zachdick93/CourseProject	"code documentation project directory structure: the code implemented for this project is in the lara directory. in this directory you will find the makefile that is used to compile and build this code. if the project has been built you will also see the object files (e.g. main.o), and the executable prog.exe. the src directory contains the source files for this project, and the include directory includes the header files. the file src/main.cpp is used to test the classes implemented in this project. the main class in this project is the lrr class. the code for this class can be found in the src/lara directory. in src/optimization is an implementation of the lbfgs optimization algorithm (https://en.wikipedia.org/wiki/limited-memory_bfgs for more information). the directories src/utilities and src/algebra have some utility like functions used to perform frequently used calculations throughout the rest of the code. to learn more about the theoretical aspects of the implemented functionality in this project i recommend reading the document titled manual.pdf. building and running: this code was developed on windows 10 and compiled using the mingw64 implementation of the g++ compiler tools. there is no guarantee that this will work on other operating systems, but i would expect that it will work with any g++ version on any os. to build this code open a command prompt, go into the lara, and run the command make all. once the project has built you will see an executable named prog.exe. to run this code, using that same command prompt window, type in the command ./prog.exe. testing the code there is a test function for the lrr functionality in the main.cpp folder (see image below). this function initializes the model with the same parameters used in the document manual.pdf which was provided by the original project implementation. then this function calls the emest function passing a file of vectors, also from the original project. at the end of the em estimation step, this function will save the predictions in lara/data/results/prediction.dat and it will save the model, which can be loaded as a 5th parameter to the constructor, in lara/data/model/model_hotel.dat. cs410 course project: implement lrr for meta by zachariah dick project description implement the aspect segmentation and latent rating regression model in c++ from the paper ""latent aspect rating analysis on review text data: a rating regression approach"". developed with the intent to be easily ported into the meta codebase. i was able to use the original java project code as a reference for this. so, ultimately the project was rewriting the java code in c++. development environment os: windows 10 build tools: mingw64 implementation of g++. ide: visual studio code in this repository the c++ code can be found in the lara directory. the original java code can be found in the oldjavalaraproject directory. the project directory structure is the same between the two. src: contains the source code files. includes: contains header files. data: includes the data input and output files used by the project. the next slide has a picture of the directory tree structure. challenges the meta project had too much technical debt for me to build it locally on my machine without many errors. the original lara java code project files were not recognizable by my intellij ide, so i was not able to use it as a debugging tool for my c++ implementation. the java code referenced some jar file java specific libraries that i was not able to replace properly. one was a linear algebra library that i replaced by implementing the functionality. state of the project i can build and run the program, but the results are not recognizable by the ""topics.py"" script in the data file, which is used to print out the top m topics. with some investigation it is due to the f value and gnorm values being insanely large as they are going through the ""optimizer"" code. example of the values on next slide displayed in picture of the output from a run of the program (e.g. gnorm printed as ""inf""). building the code ensure you have a version of mingw64 installed with g++. open a command prompt and go to the courseproject/lara directory and run the command ""make all"" (or whatever make-like command your version of mingw64 uses for running makefiles). the program will build into the executable ""prog.exe"". see next slide for example picture. running the code there is a test function in ./lara/src/main.cpp call lrr_test(), where you can modify the parameters for this function. you will find a document in this code called ""manual.pdf"" which comes from the original java project and contains more detail about the lara implementation in these projects. unfortunately running the c++ project does not currently produce any meaningful results. you can see the saved model, and predictions in the ./lara/data directory. see next slide for example picture. next steps (if i had more time!) upgrade the java project so that i can run it as a reference of comparison to the c++ project. upgrade the meta project so that it can be built with updated tools. replace the algebra implementation with an optimized library, maybe a boost library. replace the lbfgs code with an updated optimizer quasi-newton algorithm. develop a dataset with expected output for each function using the what has been output by the java code. references hongning wang, yue lu, and chengxiang zhai, latent aspect rating analysis on review text data: a rating regression approach. in proceedings of acm kdd 2010, pp. 783-792, 2010. doi=10.1145/1835804.1835903 progress report which tasks have been completed? i currently have set up my development environment using vscode and by following the setup instructions for the meta project. i have reviewed the meta project and the lara project from the paper. due to being given the location of the data and code from the paper i have decided to convert the java project from the paper to c++ and to hopefully be able to recreate the results from the paper using the same dataset. i have begun converting the java code to c++. which tasks are pending? i need to finish converting the java code to c++. i also need to setup the c++ repo as a cmake project. i then need to complete the documentation and presentation. are you facing any challenges? i attempted to build the meta package, but it failed. i even debugged it and updated it a bit, but the technical debt of that project seems to have built up to a point where it would not be worth continuing with that. another challenge that will likely present itself soon is in finding a c++ equivalent for each of the java libraries used in the paper. project proposal team captain: zachariah dick, netid: zdick2 (one-person team) topic: improving a system: meta toolkit sub-topic: add text mining functions to the meta toolkit main proposal: i propose implementing the aspect segmentation and latent rating regression model (lrr) in c++ from the paper ""latent aspect rating analysis on review text data: a rating regression approach"" mentioned in the project topics document. this functionality will be developed with the intent to be easily ported into the meta codebase. due to time constraints and the fact that i am a one person team i do not intend on fully integrating this functionality into the meta repository, but instead applying an mit license to this repository and leaving it public to allow for future integration into the meta project. task list estimate: setup development environment based on that of the meta-toolkit/meta. review the structure of the meta repository to gather needed namespaces, data structures, testing setup, and other necessary information to ensure compatibility in my setup. dissect and analyze the mentioned paper to develop the pseudo code for the implementation and fully understand the algorithm. gather testing datasets and process them using python tools that have been used in mps. use metapy wherever possible to ensure compatibility with meta. the link to the dataset used in the paper is no longer valid so i will need to put together my own test data. write the functions needed to do the implementation. attempt to maintain the same pattern used for functions in meta repository for ease of portability. write automated tests for the functionality developed. continuous development of documentation. create demo presentation. deliverables: the deliverables for this project are the source code implementing functionality for latent aspect rating analysis, an automated test suite to demonstrate the functionality, usage documentation, and any other project requirements listed in the project overview. resources to be used: hongning wang, yue lu, and chengxiang zhai, latent aspect rating analysis on review text data: a rating regression approach. in proceedings of acm kdd 2010, pp. 783-792, 2010. doi=10.1145/1835804.1835903 meta-toolkit. https://github.com/meta-toolkit/meta constraint-free implementation of lrr hongning wang department of computer science university of illinois at urbana-champaign urbana il, 61801 usa wang296@illinois.edu 1 overview in this constraint-free implementation of latent rating regression (lrr) [wang et al., 2010], auxiliary variables are introduced to get rid of constraints in the original lrr model, where aspect weights a should be positive and sum up to one. the new implementation performs closely as the original lrr model and can be used as a replacement of it. 2 latent rating regression model in the work of latent aspect rating analysis (lara) [wang et al., 2010], we assume in each review: 1) the overall rating is the weighted sum of the individual aspect ratings; 2) the aspect ratings can be predicted by the words associated with each aspect. intuitively, we can formalize these assumptions as follows: p(td|u, s, d, s) =  p(ad|u, s)p(rd|at d sd, d)dad where rd is the overall rating for review d, sd = {sd1, sd2, . . . , sdk} are the predicted ratings for each aspect where sdi = bt i wi, and ad is the corresponding inferred aspect weight; d is the standard deviation of overall rating prediction. in the original lrr model, we require i, adi >= 0 and k i=1 adi = 1. the constraint on ad greatly increases the computational complexity. to avoid solving a constraint optimization problem, we introduce a set of auxiliary variables {^ad1, ^ad2, . . . , ^adk} for each review d, and set adi = exp(^adi) k j=1 exp(^adj) . (1) furthermore, we will assume ^adi is drawn from n(u, s) rather than adi as in the original lrr model. similar trick can be applied on the aspect rating sdi to avoid negative predicted ratings: sdi = exp(bt i wi). (2) 1 hongning wang implementation of lrr 3 em updating formulas the complete-data log-likelihood function for the newly derived problem is very similar as that in the original lrr model: l(rd, ^ad, sd, u, s, s2, b) = - log s2-(at d sd - rd)2 s2 -log s-(^ad-u)ts-1(^ad-u)-lbtb (3) where ad is a function of ^ad as defined in eq (1). hard-em is performed to iteratively optimize the complete-data log-likelihood over the training corpus. most procedures are the same as we have derived in [wang et al., 2010], and we will only list the updating formulas for ^a and b in this manual. besides, in order to ensure numerical stability and provide good initialization of the random variables, we add an additional term in the log-likelihood function for each review document d, laux(rd, ad, sd) = p k  i=1 adi(sdi - rd)2 (4) where p is a predefined confidence parameter to control the influence of the newly introduced term in the log-likelihood function. intuitive, laux(rd, ^ad, sd) guides the optimization proce- dure to estimate a better starting point of ^ad and b from the overall rating rd. empirically, p should be much smaller than 1/s2. 3.1 updating ^a in e-step, ^ad is inferred for every review document d by maximizing the following objective function: l(^ad) = (at d sd - rd)2 s2 + p k  i=1 adi(sdi - rd)2 + (^ad - u)ts-1(^ad - u) (5) the gradient with respect to ^adi is, l(^ad)  ^adi = 2(at d sd - rd) s2 at d sd  ^ai + p  k j=1 adi(sdj - rd)2  ^ai + 2 k  j=1 s-1 ij (^adj - uj) (6) where at d sd  ^ai = adi k  j=1 [ d(i = j)sdi(1 - adi) - d(i = j)sdjadj ] (7) and  k j=1 adi(sdj - rd)2  ^ai = adi k  j=1 [ d(i = j)(sdi - rd)2(1 - adi) - d(i = j)(sdj - rd)2adj ] (8) 2 hongning wang implementation of lrr 3.2 updating b in m-step, the optimal b is estimated over the whole corpus by maximizing the following objective function: l(b) = d  d [(at d sd - rd)2 s2 + p k  i=1 adi(sdi - rd)2] + lbtb (9) taking derivative with respect to bi, we get, l(b) bi = 2 d  d adi [(at d sd - rd) s2 + p(sdi - rd) ]sdi bi + 2lbi (10) where sdi bi = sdiwdi according to eq (2). 4 package details the code implements the keyword-based bootstrapping aspect segmentation and latent rat- ing regression (lrr) model originally published in [wang et al., 2010]. in particular, the lrr model is slightly changed to avoid solving constrained optimization as described above. 4.1 dependency there are two external libraries used in the implementation: 1. opennlp: it is used to extract and tokenize the sentences in the review content. both the lib and trained model files are needed. latest update of this toolkit can be found in http://opennlp.apache.org/. 2. colt: it is used for the matrix operations in lrr, e.g., matrix inverse. latest update for this toolkit can be found in http://acs.lbl.gov/software/colt/. in this package, the required files are located at ./libs and ./data/model/nlp. 4.2 aspect segmentation the keyword-based bootstrapping aspect segmentation is implemented in the same way as in [wang et al., 2010]. to apply bootstrapping for aspect keyword extraction, call the following methods: analyzer analyzer = new analyzer(""data/seeds/hotel_bootstrapping.dat"", ""data/seeds/stopwords.dat"", ""data/model/nlp/en-sent.zip"", ""data/model/nlp/en-token.zip"", ""data/model/nlp/en-pos-maxent.bin""); analyzer.loaddirectory(""data/reviews/"", "".dat""); analyzer.bootstrapping(""data/seeds/hotel_bootstrapping_sel.dat""); 3 hongning wang implementation of lrr where the file ""hotel bootstrapping.dat"" is your initial aspect keyword list, one aspect per row and keywords are separated by ""0x09."" ""data/reviewss"" is the folder contains your target review files with fixed format. and ""data/seeds/hotel bootstrapping sel.dat"" is the result aspect keyword list expanded by bootstrapping. to segment the aspects in review text document and generate the corresponding vec- tor representation of each hotel (i.e., hreviews as defined in [wang et al., 2010]), call the following methods: analyzer analyzer = new analyzer(""data/seeds/hotel_bootstrapping_sel.dat"", ""data/seeds/stopwords.dat"", ""data/model/nlp/en-sent.zip"", ""data/model/nlp/en-token.zip"", ""data/model/nlp/en-pos-maxent.bin""); analyzer.loaddirectory(""data/reviews/"", "".dat""); analyzer.save2vectors(""data/vectors/vector_chi_4000.dat""); sample codes can be found in ""src/aspectsegmenter/analyzer.java"". 4.3 latent rating regression model the lrr model can be simply executed by the following lines: lrr model = new lrr(500, 1e-2, 5000, 1e-2, 2.0); model.em_est(""data/vectors/vector_chi_4000.dat"", 10, 1e-4); model.saveprediction(""data/results/prediction.dat""); model.savemodel(""data/model/model_hotel.dat""); in the constructor of lrr model, you need to specify the following parameters: max iteration of a update, a's convergence criterion, max iteration of b update, b's convergence criterion, and b's regularization parameter l. besides, the lrr model can also be initialized previously trained model: lrr model = new lrr(500, 1e-2, 5000, 1e-2, 2.0, ""data/model/model_hotel.dat""); sample codes can be found in ""src/lara/lrr.java"". 4.4 baselines in this package, there are also implementations of the baseline methods, svr-o and svr-a, as described and compared in [wang et al., 2010]. the only difference is we used logistic regression rather than svr in this implementation. these baselines can be executed in a similar way as lrr model: ratingregression model = new ratingregression(500, 5e-2, 5000, 1e-4, 1.0); model.estimateaspectmodel(""data/vectors/vector_chi_4000.dat""); model.saveprediction(""data/results/prediction_baseline.dat""); model.savemodel(""data/model/model_base_hotel.dat""); the parameter ""ratingregression.by overall"" specifies the choice of svr-o (true) or svr-a (false). and the parameters in the constructor of ratingregression model are the same as in lrr model. sample codes can be found in ""src/lara/ratingregression.java"". 4 hongning wang implementation of lrr 4.5 miscellaneous 1. the trade-off parameter p for controlling the importance of the newly introduced term laux(rd, ad, sd) (as defined in eq (4)) can be set in ""lrr.pi"". default value is 0.5. 2. the predicted score mapping can also be achieved by square function, i.e., sdi = (bt i wdi)2. this variation is also implemented in the package and can be enabled by the setting of ""ratingregression.score square"": true for square mapping and false for exponential mapping. 3. i have included a parsed vector file for 4000 hotels (i.e., hreviews) for testing purpose. it can be found in the folder of ""data/vectors."" 4. the corresponding 4000 selected words for building the hreview vectors are stored in the file ""data/seeds/hotel vocabulary chi.dat,"" scripts are provided to list the learned top ranked opinion words under each aspect (""data/topics.py"" and ""data/run.sh""). 5. 21 sample hotel review text documents are included in the folder of ""data/reviews"" for illustrating the required format in the aspect segmentation module. 6. note: in the current implementation, the loaded corpus is split into train/test with ratio 0.75, and the performance printed during model training is computed based on the testing corpus. this setting is different from our original setting in [wang et al., 2010], where we train and test on the same data set for lrr evaluation. references [wang et al., 2010] wang, h., lu, y., and zhai, c. (2010). latent aspect rating analysis on review text data: a rating regression approach. in proceedings of the 16th acm sigkdd international conference on knowledge discovery and data mining, pages 783-792. acm. 5 courseproject attention: the presentation slides have a voice narration added to it, so make sure to open in powerpoint and click start presentation! the document ""code documentation.docx"" has the documentation to go with this project. the document ""manual.pdf"" is the original document provided with the original java source code from the previous implementation of this lrr model."	['code', 'documentation', 'project', 'directory', 'structure', 'implemented', 'lara', 'find', 'makefile', 'used', 'compile', 'build', 'built', 'also', 'see', 'object', 'files', 'eg', 'maino', 'executable', 'progexe', 'src', 'contains', 'source', 'include', 'includes', 'header', 'file', 'srcmaincpp', 'test', 'classes', 'main', 'class', 'lrr', 'found', 'srclara', 'srcoptimization', 'implementation', 'lbfgs', 'optimization', 'algorithm', 'httpsenwikipediaorgwikilimitedmemory_bfgs', 'information', 'directories', 'srcutilities', 'srcalgebra', 'utility', 'like', 'functions', 'perform', 'frequently', 'calculations', 'throughout', 'rest', 'learn', 'theoretical', 'aspects', 'functionality', 'recommend', 'reading', 'document', 'titled', 'manualpdf', 'building', 'running', 'developed', 'windows', 'compiled', 'using', 'mingw', 'g', 'compiler', 'tools', 'guarantee', 'work', 'operating', 'systems', 'would', 'expect', 'version', 'os', 'open', 'command', 'prompt', 'go', 'run', 'make', 'named', 'window', 'type', 'testing', 'function', 'maincpp', 'folder', 'image', 'initializes', 'model', 'parameters', 'provided', 'original', 'calls', 'emest', 'passing', 'vectors', 'end', 'em', 'estimation', 'step', 'save', 'predictions', 'laradataresultspredictiondat', 'loaded', 'th', 'parameter', 'constructor', 'laradatamodelmodel_hoteldat', 'cs', 'course', 'implement', 'meta', 'zachariah', 'dick', 'description', 'aspect', 'segmentation', 'latent', 'rating', 'regression', 'c', 'paper', 'analysis', 'review', 'text', 'data', 'approach', 'intent', 'easily', 'ported', 'codebase', 'able', 'use', 'java', 'reference', 'ultimately', 'rewriting', 'development', 'environment', 'ide', 'visual', 'studio', 'repository', 'oldjavalaraproject', 'two', 'input', 'output', 'next', 'slide', 'picture', 'tree', 'challenges', 'much', 'technical', 'debt', 'locally', 'machine', 'without', 'many', 'errors', 'recognizable', 'intellij', 'debugging', 'tool', 'referenced', 'jar', 'specific', 'libraries', 'replace', 'properly', 'one', 'linear', 'algebra', 'library', 'replaced', 'implementing', 'state', 'program', 'results', 'topicspy', 'script', 'print', 'top', 'topics', 'investigation', 'due', 'f', 'value', 'gnorm', 'values', 'insanely', 'large', 'going', 'optimizer', 'example', 'displayed', 'printed', 'inf', 'ensure', 'installed', 'courseprojectlara', 'whatever', 'makelike', 'uses', 'makefiles', 'larasrcmaincpp', 'call', 'lrr_test', 'modify', 'called', 'comes', 'detail', 'projects', 'unfortunately', 'currently', 'produce', 'meaningful', 'saved', 'laradata', 'steps', 'time', 'upgrade', 'comparison', 'updated', 'optimized', 'maybe', 'boost', 'quasinewton', 'develop', 'dataset', 'expected', 'references', 'hongning', 'wang', 'yue', 'lu', 'chengxiang', 'zhai', 'proceedings', 'acm', 'kdd', 'pp', 'doi', 'progress', 'report', 'tasks', 'completed', 'set', 'vscode', 'following', 'setup', 'instructions', 'reviewed', 'given', 'location', 'decided', 'convert', 'hopefully', 'recreate', 'begun', 'converting', 'pending', 'need', 'finish', 'repo', 'cmake', 'complete', 'presentation', 'facing', 'attempted', 'package', 'failed', 'even', 'debugged', 'bit', 'seems', 'point', 'worth', 'continuing', 'another', 'challenge', 'likely', 'present', 'soon', 'finding', 'equivalent', 'proposal', 'team', 'captain', 'netid', 'zdick', 'oneperson', 'topic', 'improving', 'system', 'toolkit', 'subtopic', 'add', 'mining', 'propose', 'mentioned', 'constraints', 'fact', 'person', 'intend', 'fully', 'integrating', 'instead', 'applying', 'mit', 'license', 'leaving', 'public', 'allow', 'future', 'integration', 'task', 'list', 'estimate', 'based', 'metatoolkitmeta', 'gather', 'needed', 'namespaces', 'structures', 'necessary', 'compatibility', 'dissect', 'analyze', 'pseudo', 'understand', 'datasets', 'process', 'python', 'mps', 'metapy', 'wherever', 'possible', 'link', 'longer', 'valid', 'put', 'together', 'write', 'attempt', 'maintain', 'pattern', 'ease', 'portability', 'automated', 'tests', 'continuous', 'create', 'demo', 'deliverables', 'suite', 'demonstrate', 'usage', 'requirements', 'listed', 'overview', 'resources', 'metatoolkit', 'httpsgithubcommetatoolkitmeta', 'constraintfree', 'department', 'computer', 'science', 'university', 'illinois', 'urbanachampaign', 'urbana', 'il', 'usa', 'wangillinoisedu', 'et', 'al', 'auxiliary', 'variables', 'introduced', 'get', 'rid', 'weights', 'positive', 'sum', 'new', 'performs', 'closely', 'replacement', 'assume', 'overall', 'weighted', 'individual', 'ratings', 'predicted', 'words', 'associated', 'intuitively', 'formalize', 'assumptions', 'follows', 'ptdu', 'padu', 'sprdat', 'sd', 'ddad', 'rd', 'sdk', 'sdi', 'bt', 'wi', 'ad', 'corresponding', 'inferred', 'weight', 'standard', 'deviation', 'prediction', 'require', 'adi', 'k', 'constraint', 'greatly', 'increases', 'computational', 'complexity', 'avoid', 'solving', 'problem', 'introduce', 'adk', 'expadi', 'j', 'expadj', 'furthermore', 'drawn', 'nu', 'rather', 'similar', 'trick', 'applied', 'negative', 'expbt', 'updating', 'formulas', 'completedata', 'loglikelihood', 'newly', 'derived', 'lrd', 'u', 'b', 'log', 'sat', 'sadutsadulbtb', 'defined', 'eq', 'hardem', 'performed', 'iteratively', 'optimize', 'training', 'corpus', 'procedures', 'manual', 'besides', 'order', 'numerical', 'stability', 'provide', 'good', 'initialization', 'random', 'additional', 'term', 'lauxrd', 'p', 'adisdi', 'predefined', 'confidence', 'control', 'influence', 'intuitive', 'guides', 'proce', 'dure', 'better', 'starting', 'empirically', 'smaller', 'estep', 'every', 'maximizing', 'objective', 'lad', 'utsad', 'gradient', 'respect', 'ai', 'adisdj', 'ij', 'adj', 'uj', 'di', 'jsdi', 'jsdjadj', 'jsdj', 'rdadj', 'mstep', 'optimal', 'estimated', 'whole', 'lb', 'lbtb', 'taking', 'derivative', 'bi', 'psdi', 'lbi', 'sdiwdi', 'according', 'details', 'implements', 'keywordbased', 'bootstrapping', 'rat', 'ing', 'originally', 'published', 'particular', 'slightly', 'changed', 'constrained', 'described', 'dependency', 'external', 'opennlp', 'extract', 'tokenize', 'sentences', 'content', 'lib', 'trained', 'latest', 'update', 'httpopennlpapacheorg', 'colt', 'matrix', 'operations', 'inverse', 'httpacslblgovsoftwarecolt', 'required', 'located', 'libs', 'datamodelnlp', 'way', 'apply', 'keyword', 'extraction', 'methods', 'analyzer', 'analyzerdataseedshotel_bootstrappingdat', 'dataseedsstopwordsdat', 'datamodelnlpensentzip', 'datamodelnlpentokenzip', 'datamodelnlpenposmaxentbin', 'analyzerloaddirectorydatareviews', 'dat', 'analyzerbootstrappingdataseedshotel_bootstrapping_seldat', 'hotel', 'bootstrappingdat', 'initial', 'per', 'row', 'keywords', 'separated', 'x', 'datareviewss', 'target', 'fixed', 'format', 'dataseedshotel', 'seldat', 'result', 'expanded', 'segment', 'generate', 'vec', 'tor', 'representation', 'ie', 'hreviews', 'analyzerdataseedshotel_bootstrapping_seldat', 'analyzersavevectorsdatavectorsvector_chi_dat', 'sample', 'codes', 'srcaspectsegmenteranalyzerjava', 'simply', 'executed', 'lines', 'e', 'modelem_estdatavectorsvector_chi_dat', 'modelsavepredictiondataresultspredictiondat', 'modelsavemodeldatamodelmodel_hoteldat', 'specify', 'max', 'iteration', 'convergence', 'criterion', 'bs', 'regularization', 'l', 'initialized', 'previously', 'datamodelmodel_hoteldat', 'srclaralrrjava', 'baselines', 'implementations', 'baseline', 'svro', 'svra', 'compared', 'difference', 'logistic', 'svr', 'ratingregression', 'modelestimateaspectmodeldatavectorsvector_chi_dat', 'modelsavepredictiondataresultsprediction_baselinedat', 'modelsavemodeldatamodelmodel_base_hoteldat', 'ratingregressionby', 'specifies', 'choice', 'true', 'false', 'srclararatingregressionjava', 'miscellaneous', 'tradeoff', 'controlling', 'importance', 'lrrpi', 'default', 'score', 'mapping', 'achieved', 'square', 'wdi', 'variation', 'enabled', 'setting', 'ratingregressionscore', 'exponential', 'included', 'parsed', 'vector', 'hotels', 'purpose', 'datavectors', 'selected', 'hreview', 'stored', 'vocabulary', 'chidat', 'scripts', 'learned', 'ranked', 'opinion', 'datatopicspy', 'datarunsh', 'documents', 'datareviews', 'illustrating', 'module', 'note', 'current', 'split', 'traintest', 'ratio', 'performance', 'computed', 'different', 'train', 'evaluation', 'h', 'sigkdd', 'international', 'conference', 'knowledge', 'discovery', 'pages', 'courseproject', 'attention', 'slides', 'voice', 'narration', 'added', 'sure', 'powerpoint', 'click', 'start', 'documentationdocx', 'previous']
https://github.com/zen030/CourseProject	"project progress report project topic: bert sentiment analysis to detect twitter sarcasm project team member name: zainal hakim netid: zainalh2 result (answer.txt) progress status: 100% (completed) the project scores (beating the baseline): f1-score recall precision project result 0.757905138339921 0.8522222222222222 0.6823843416370107 baseline 0.723 0.723 0.723 software code progress status: 100% (completed) source code files: training and evaluation (link) evaluation (for demo) (link) documentation progress status: 100% (completed) the document files: proposal (link) project documentation (link) demo video progress status: 100% (completed) demo video url: https://www.youtube.com/watch?v=psyn2luwpqg challenges in the project to train and evaluate the bert model requires computing power: a fast cpu and a large ram size. it needs a dedicated environment such as google colab. to train the large models in my experiments, it requires a google colab pro, which is the paid version. it is not easy to predict the results of the experiments since bert is one of the deep learning algorithms that involves many hidden parameters. we can easily overfit the model with the given parameters and text inputs. there is no easy way to explain why one parameter performs better than the other parameter. selecting a feature from the tweet to identify the sentiment is one of the most challenging parts of the project. project progress report project topic: bert sentiment analysis to detect twitter sarcasm project team member * name: zainal hakim * netid: zainalh2 result (answer.txt) * progress status: 100% (completed) * the project scores (beating the baseline): f1-score recall precision project result 0.757905138339921 0.8522222222222222 0.6823843416370107 baseline 0.723 0.723 0.723 software code * progress status: 100% (completed) * source code files: o training and evaluation (link) o evaluation (for demo) (link) documentation * progress status: 100% (completed) * the document files: o proposal (link) o project documentation (link) demo video * progress status: 100% (completed) * demo video url: https://www.youtube.com/watch?v=psyn2luwpqg challenges in the project * to train and evaluate the bert model requires computing power: a fast cpu and a large ram size. it needs a dedicated environment such as google colab. to train the large models in my experiments, it requires a google colab pro, which is the paid version. * it is not easy to predict the results of the experiments since bert is one of the deep learning algorithms that involves many hidden parameters. we can easily overfit the model with the given parameters and text inputs. there is no easy way to explain why one parameter performs better than the other parameter. * selecting a feature from the tweet to identify the sentiment is one of the most challenging parts of the project. bert sentiment analysis to detect twitter sarcasm (naive approach) zainal hakim zainalh2@illinois.edu table of content a. introduction 3 b. bidirectional encoder representations from transformers (bert) 3 c. dataset description 4 d. the naive approach 4 e. the model, training, and evaluation 5 f. the software code 6 f.1. naive_bert_sentiment_analysis.ipynb code review 6 1. colab configuration 6 2. mounting google drive to colab session (to save result files) 9 3. the main python class 10 4. training and evaluation experiments 13 5. save the result files to google drive 14 f.2. demo_model_evaluation.ipynb code review 15 1. the first 3-steps are already explained in detail in the previous section 15 2. preparing the encoded testing dataset and data loader 15 3. run the evaluation batch iteration 16 4. generate the 'anwer.txt' file 17 5. post 'answer.txt' to livedatalab for scoring 17 g. result and conclusion 18 reference 18 appendix 19 1. answer.txt 19 introduction sarcasm is a form of figurative language that implies a negative sentiment while displaying a positive sentiment on the surface (joshi et al., 2017). i present a naive approach to detect twitter tweet sarcasm sentiment using a transformers-based pre-trained model that considers only the response tweet. this approach completely ignores the context of the response tweet to train the model. the model uses a transformer encoder to generate the embedding representation for the response. the model is trained and evaluated on the given training and testing datasets. my best performance model gives an f1-score of 75.79%, beating the classification competition baseline score after four epoch iterations (epoch # 4). ""c. dataset description"" section of this document explains further the response and context relationship. important files in the project: documented software code training and evaluation (link) evaluation of a trained-model for demo purpose (link) best performance testing set predictions (answer.txt) (link) best performance trained-model (link) training dataset (link) testing dataset (link) bidirectional encoder representations from transformers (bert) this project uses bert, a transformer-based technique for natural language processing pre-training developed by a team in google. the original english language bert model comes with two pre-trained model types: model type layer hidden head parameter corpus word base 12 768 12 110 m 800 m large 24 1024 16 340 m 2.500 m table 1: bert original model types bert large model essentially has better computing leverage than the base model. google team trained the large model using a larger corpus word size than the base model. the large model is expected to perform better than the base model in most of the nlp tasks such as sentiment analysis. original bert paper is available here (link). dataset description there are two twitter tweet datasets available for this project: training dataset: a labeled dataset to train the model testing dataset: tweet with a unique id to evaluate the trained-model for the training dataset, each line contains a json object with the following columns: label: sarcasm or not_sarcasm response: the classified tweet context: the conversation context of the response for the testing/evaluation dataset, each line contains a json object with the following columns: id: unique identifier for the sample response: the tweet to be classified context: the conversation context of the response training dataset testing dataset 5000 lines 1800 lines table 2: dataset size statistics a more detailed dataset description is available in the project competition github repository (link). the naive approach i hypothesize the context does not always support the sentiment of a response. context can have an opposing effect on the sentiment of a response. i hypothesize there are 2 types of context: a positive context is a context that supports the sentiment of a response. a negative context is a context that does not support the sentiment of a response. sentiment negative context sentiment negative context fig.1: illustration of context reduces sentiment quality positive context s e n t i m e n t positive context s e n t i m e n t fig.2: illustration of context increase sentiment quality it is critical to utilize the context to support the response's sentiment. for this project, i consider only the sentiment-labeled response to training the model, and i completely ignore the context. i call this a naive approach. in the future project, i can use advanced machine learning techniques to utilize response and context to train the model by selectively reconstruct the context to support the sentiment of a response. the model, training, and evaluation in this project, i use the datasets to train and evaluate bert large uncased and base uncased models. i use the original bert paper as a reference (a.3 fine-tuning procedure) to choose hyperparameters for my experiments. the hyperparameters in my experiments are: learning rate: 2e-5 batch size: 5 (considering memory size) epochs: 4 iterations epsilon: 1e-8 random seed value: 17 bert model can handle a text with a maximum of 512 characters. if the input text is more than 512 characters, the model truncates the text to 512 characters. response text in training and testing datasets is less than 512 characters, in this case, we are guaranteed to consider all words in the response text to train and evaluate the model. the python source code below prints the response maximum characters for training and testing datasets. fig.3: source code to check maximum training and evaluation response characters length response max. chars training dataset 315 testing dataset 310 table 3: maximum response characters length the software code for the software code of this project, i implemented two google colab notebooks: naive_bert_sentiment_analysis.ipynb: training and evaluation notebook (link) demo_model_evaluation.ipynb: evaluation of selected trained-model notebook (for demo purpose) (link) i use the google colab pro environment to implement and test the software code. introduction about google colab is available here link. software code uses the following main python libraries: numpy 1.18.5 pytorch 1.7.0+cu101 huggingface transformers 3.5.0 f.1. naive_bert_sentiment_analysis.ipynb code review this notebook trains and evaluates the bert large uncased and base uncased models using the provided datasets. in the end, the trained-model and evaluation results are copied and stored in the project google drive folder. colab configuration install python modules required for the notebook. copy train.jsonl and test.jsonl files from google drive to colab session i have already copied train.jsonl and test.jsonl files to a google drive account created for this project. the files are shared with the public. the following code will copy the files from google drive to the colab session. the source code above will prompt a url. click the url, it will prompt the google account login page. select the google account to run the notebook: click the ""allow"" button to allow google cloud sdk to access the google account. that finally prompts the verification code. copy the code and paste it in the ""enter verification code"" text box. press ""enter"" that will copy the training and testing datasets to the colab session! we are ready to train and evaluate the model using the datasets. mounting google drive to colab session (to save result files) to save the result files (the trained-model and answer.txt) to google drive, we need to mount google drive to the colab session. in this project, i mount the google drive directory to the './content/uiuc' folder. at the end of this notebook code execution, the google drive mounted folder in the colab session will look like the following: mounted google drive in colab session where to keep result files permanently the main python class this project implements a python class, bert_model, that handles the following tasks: read the dataset from jsonl files into a list of json convert list of json to pandas dataframe create the bert model run the training and save the model for each epoch evaluate the model and store the result into a file below are the class signatures: for details please check the source code here link. the source code comment describes what each step does. the main algorithm of the training: create a bert tokenizer. we use the tokenizer to encode the text and prepare the dataset. create a bert model using the chosen hyperparameter. create adamw optimizer (link), it is used to calculate the convergence in the model. it is considered the fastest convergence algorithm. create a data loader. the data loader main task is passing dataset batch to model. it will make sure all the text in the dataset is processed by the model. set the model to train mode. iterate the data loader to pass the dataset batch to the model until the training is completed. after the training is completed, save the trained model to a file. the main algorithm of testing: load the model file to the memory and set the model to evaluation mode. create the tokenizer, encode the input data for testing, and prepare the dataset. create the data loader to handle the evaluation batch. run the evaluation. one of the most important outputs from the model is logits. in this project, logits is an array of two elements. the model is configured to have the first element of logits represents sarcasm, and the second element represents not_sarcasm. we use the numpy argmax function to return the index of the maximum value in logits. if the maximum value is the first element, the function returns the index array of 0 (sarcasm) if the maximum value is the second element, the function returns the index array of 1 (not_sarcasm) the final step is to write the output to a file (answer.txt) training and evaluation experiments to test my naive hypothesis, i run experiments with the same hyperparameters on two bert models. experiment-1: bert base uncased experiment-2: bert large uncased both experiments code above will generate result files in the colab session folder below: save the result files to google drive colab deletes result files when the session ends. we need to store the files permanently in other locations, in this project i use google drive. the code below will copy the result files to the project google drive folder (the google drive folder has been mounted in the earlier step). in this project, i save the epoch # 4 model file only. we use the files stored in the project google drive folder to run a project demo. the next section will illustrate how to use the trained-model file to evaluate the testing dataset. f.2. demo_model_evaluation.ipynb code review in the demo notebook, i demonstrate how to generate 'answer.txt' from the bert large uncased trained model stored in the project google drive folder. the trained-model is available to the public here link. with this model, we will reproduce the evaluation result which is available to the public here link. the demo video is available here link. the main algorithm in the notebook demo: the first 3-steps are already explained in detail in the previous section colab configuration (python modules import and installation) copy the trained-model and testing dataset files from google drive to the colab session. we need to authorize colab to access the google account described in the previous section. prepare panda dataframe for the testing dataset. preparing the encoded testing dataset and data loader the main steps: create the bert tokenizer to encode the testing dataset. create the data loader to run the evaluation in batches. preparing the python objects for the evaluation run the evaluation batch iteration the main steps: set the device to gpu, if applicable. load the trained model from file to memory. set the model to evaluation mode. data loader iteration to pass text to evaluate in batches to the model. the model output logits (how to process logits is described in the previous section) generate the 'anwer.txt' file generate the sentiment output to the screen and 'answer.txt' file. the previous section describes the source code snippet. post 'answer.txt' to livedatalab for scoring for f1, precision, and recall scores evaluation, i post the 'answer.txt' to livedatalab. leaderboard snapshot on 03-nov-2020 result and conclusion in summary, the testing (evaluation) results from bert large and base models: model f1-score recall precision bert large uncased 0.757905138339921 0.8522222222222222 0.6823843416370107 bert base uncased 0.7458777885548012 0.8544444444444445 0.6617900172117039 surprisingly, the base model performs almost as good as the large model. in this project, i did try to use different trained model such as roberta and xlnet (and different hyperparameters), but i could not produce a result higher than bert large uncased score. the project scope as proposed in the project proposal is to explore bert hence, i am reporting the result for bert models only. in the future, i would like to explore more on the following topics: to use advanced machine learning techniques to explore other hyperparameters for bert models. to utilize both the context and response to training the models. i hypothesize that the context can be used as an additional dataset to train the model. to explore another model, such as roberta and xlnet. reference aditya joshi, pushpak bhattacharyya, and mark j. car- man. 2017. automatic sarcasm detection: a survey. acm computing surveys, 50(5):1-22. jacob devlin, ming-wei chang, kenton lee, and kristina toutanova. 2019. bert: pre-training of deep bidirectional transformers for language understanding. appendix answer.txt twitter_1,not_sarcasm twitter_2,sarcasm twitter_3,sarcasm twitter_4,not_sarcasm twitter_5,sarcasm twitter_6,sarcasm twitter_7,not_sarcasm twitter_8,sarcasm twitter_9,not_sarcasm twitter_10,sarcasm twitter_11,not_sarcasm twitter_12,sarcasm twitter_13,sarcasm twitter_14,not_sarcasm twitter_15,sarcasm twitter_16,sarcasm twitter_17,sarcasm twitter_18,sarcasm twitter_19,sarcasm twitter_20,not_sarcasm twitter_21,not_sarcasm twitter_22,sarcasm twitter_23,not_sarcasm twitter_24,sarcasm twitter_25,sarcasm twitter_26,sarcasm twitter_27,not_sarcasm twitter_28,not_sarcasm twitter_29,sarcasm twitter_30,not_sarcasm twitter_31,sarcasm twitter_32,not_sarcasm twitter_33,not_sarcasm twitter_34,sarcasm twitter_35,not_sarcasm twitter_36,sarcasm twitter_37,sarcasm twitter_38,sarcasm twitter_39,sarcasm twitter_40,sarcasm twitter_41,sarcasm twitter_42,not_sarcasm twitter_43,sarcasm twitter_44,not_sarcasm twitter_45,sarcasm twitter_46,not_sarcasm twitter_47,sarcasm twitter_48,sarcasm twitter_49,not_sarcasm twitter_50,sarcasm twitter_51,not_sarcasm twitter_52,not_sarcasm twitter_53,sarcasm twitter_54,sarcasm twitter_55,sarcasm twitter_56,sarcasm twitter_57,not_sarcasm twitter_58,not_sarcasm twitter_59,sarcasm twitter_60,sarcasm twitter_61,not_sarcasm twitter_62,sarcasm twitter_63,sarcasm twitter_64,sarcasm twitter_65,sarcasm twitter_66,not_sarcasm twitter_67,sarcasm twitter_68,not_sarcasm twitter_69,sarcasm twitter_70,sarcasm twitter_71,not_sarcasm twitter_72,sarcasm twitter_73,sarcasm twitter_74,sarcasm twitter_75,not_sarcasm twitter_76,not_sarcasm twitter_77,sarcasm twitter_78,sarcasm twitter_79,not_sarcasm twitter_80,sarcasm twitter_81,not_sarcasm twitter_82,not_sarcasm twitter_83,sarcasm twitter_84,not_sarcasm twitter_85,sarcasm twitter_86,sarcasm twitter_87,not_sarcasm twitter_88,sarcasm twitter_89,sarcasm twitter_90,not_sarcasm twitter_91,not_sarcasm twitter_92,sarcasm twitter_93,sarcasm twitter_94,sarcasm twitter_95,sarcasm twitter_96,sarcasm twitter_97,sarcasm twitter_98,not_sarcasm twitter_99,not_sarcasm twitter_100,not_sarcasm twitter_101,sarcasm twitter_102,sarcasm twitter_103,not_sarcasm twitter_104,not_sarcasm twitter_105,sarcasm twitter_106,sarcasm twitter_107,not_sarcasm twitter_108,not_sarcasm twitter_109,sarcasm twitter_110,sarcasm twitter_111,sarcasm twitter_112,sarcasm twitter_113,sarcasm twitter_114,sarcasm twitter_115,sarcasm twitter_116,not_sarcasm twitter_117,not_sarcasm twitter_118,sarcasm twitter_119,not_sarcasm twitter_120,not_sarcasm twitter_121,sarcasm twitter_122,sarcasm twitter_123,not_sarcasm twitter_124,sarcasm twitter_125,not_sarcasm twitter_126,not_sarcasm twitter_127,sarcasm twitter_128,not_sarcasm twitter_129,not_sarcasm twitter_130,sarcasm twitter_131,not_sarcasm twitter_132,sarcasm twitter_133,not_sarcasm twitter_134,not_sarcasm twitter_135,sarcasm twitter_136,not_sarcasm twitter_137,sarcasm twitter_138,not_sarcasm twitter_139,not_sarcasm twitter_140,sarcasm twitter_141,sarcasm twitter_142,sarcasm twitter_143,sarcasm twitter_144,sarcasm twitter_145,sarcasm twitter_146,sarcasm twitter_147,sarcasm twitter_148,sarcasm twitter_149,sarcasm twitter_150,sarcasm twitter_151,sarcasm twitter_152,not_sarcasm twitter_153,not_sarcasm twitter_154,sarcasm twitter_155,sarcasm twitter_156,not_sarcasm twitter_157,sarcasm twitter_158,sarcasm twitter_159,sarcasm twitter_160,sarcasm twitter_161,not_sarcasm twitter_162,sarcasm twitter_163,sarcasm twitter_164,sarcasm twitter_165,sarcasm twitter_166,sarcasm twitter_167,sarcasm twitter_168,sarcasm twitter_169,not_sarcasm twitter_170,not_sarcasm twitter_171,not_sarcasm twitter_172,not_sarcasm twitter_173,sarcasm twitter_174,sarcasm twitter_175,sarcasm twitter_176,sarcasm twitter_177,sarcasm twitter_178,not_sarcasm twitter_179,sarcasm twitter_180,sarcasm twitter_181,sarcasm twitter_182,not_sarcasm twitter_183,sarcasm twitter_184,sarcasm twitter_185,not_sarcasm twitter_186,sarcasm twitter_187,sarcasm twitter_188,sarcasm twitter_189,not_sarcasm twitter_190,not_sarcasm twitter_191,not_sarcasm twitter_192,not_sarcasm twitter_193,sarcasm twitter_194,not_sarcasm twitter_195,not_sarcasm twitter_196,sarcasm twitter_197,not_sarcasm twitter_198,sarcasm twitter_199,sarcasm twitter_200,sarcasm twitter_201,sarcasm twitter_202,sarcasm twitter_203,not_sarcasm twitter_204,not_sarcasm twitter_205,sarcasm twitter_206,not_sarcasm twitter_207,sarcasm twitter_208,sarcasm twitter_209,sarcasm twitter_210,sarcasm twitter_211,sarcasm twitter_212,not_sarcasm twitter_213,not_sarcasm twitter_214,not_sarcasm twitter_215,not_sarcasm twitter_216,sarcasm twitter_217,sarcasm twitter_218,sarcasm twitter_219,sarcasm twitter_220,sarcasm twitter_221,sarcasm twitter_222,not_sarcasm twitter_223,not_sarcasm twitter_224,sarcasm twitter_225,not_sarcasm twitter_226,sarcasm twitter_227,not_sarcasm twitter_228,not_sarcasm twitter_229,sarcasm twitter_230,not_sarcasm twitter_231,sarcasm twitter_232,sarcasm twitter_233,sarcasm twitter_234,not_sarcasm twitter_235,sarcasm twitter_236,not_sarcasm twitter_237,sarcasm twitter_238,not_sarcasm twitter_239,sarcasm twitter_240,sarcasm twitter_241,sarcasm twitter_242,sarcasm twitter_243,not_sarcasm twitter_244,not_sarcasm twitter_245,not_sarcasm twitter_246,not_sarcasm twitter_247,sarcasm twitter_248,sarcasm twitter_249,sarcasm twitter_250,sarcasm twitter_251,sarcasm twitter_252,sarcasm twitter_253,not_sarcasm twitter_254,not_sarcasm twitter_255,sarcasm twitter_256,not_sarcasm twitter_257,not_sarcasm twitter_258,sarcasm twitter_259,sarcasm twitter_260,sarcasm twitter_261,not_sarcasm twitter_262,sarcasm twitter_263,not_sarcasm twitter_264,sarcasm twitter_265,sarcasm twitter_266,sarcasm twitter_267,sarcasm twitter_268,not_sarcasm twitter_269,sarcasm twitter_270,not_sarcasm twitter_271,not_sarcasm twitter_272,not_sarcasm twitter_273,not_sarcasm twitter_274,sarcasm twitter_275,sarcasm twitter_276,not_sarcasm twitter_277,not_sarcasm twitter_278,sarcasm twitter_279,sarcasm twitter_280,not_sarcasm twitter_281,sarcasm twitter_282,not_sarcasm twitter_283,sarcasm twitter_284,sarcasm twitter_285,not_sarcasm twitter_286,not_sarcasm twitter_287,not_sarcasm twitter_288,not_sarcasm twitter_289,not_sarcasm twitter_290,sarcasm twitter_291,sarcasm twitter_292,sarcasm twitter_293,sarcasm twitter_294,sarcasm twitter_295,not_sarcasm twitter_296,sarcasm twitter_297,sarcasm twitter_298,sarcasm twitter_299,sarcasm twitter_300,not_sarcasm twitter_301,sarcasm twitter_302,not_sarcasm twitter_303,sarcasm twitter_304,sarcasm twitter_305,not_sarcasm twitter_306,sarcasm twitter_307,not_sarcasm twitter_308,sarcasm twitter_309,sarcasm twitter_310,not_sarcasm twitter_311,sarcasm twitter_312,not_sarcasm twitter_313,sarcasm twitter_314,not_sarcasm twitter_315,sarcasm twitter_316,sarcasm twitter_317,not_sarcasm twitter_318,not_sarcasm twitter_319,sarcasm twitter_320,sarcasm twitter_321,not_sarcasm twitter_322,not_sarcasm twitter_323,not_sarcasm twitter_324,sarcasm twitter_325,not_sarcasm twitter_326,not_sarcasm twitter_327,sarcasm twitter_328,not_sarcasm twitter_329,sarcasm twitter_330,sarcasm twitter_331,sarcasm twitter_332,sarcasm twitter_333,sarcasm twitter_334,not_sarcasm twitter_335,not_sarcasm twitter_336,sarcasm twitter_337,not_sarcasm twitter_338,sarcasm twitter_339,not_sarcasm twitter_340,sarcasm twitter_341,not_sarcasm twitter_342,sarcasm twitter_343,sarcasm twitter_344,not_sarcasm twitter_345,sarcasm twitter_346,not_sarcasm twitter_347,sarcasm twitter_348,sarcasm twitter_349,sarcasm twitter_350,sarcasm twitter_351,sarcasm twitter_352,sarcasm twitter_353,not_sarcasm twitter_354,sarcasm twitter_355,sarcasm twitter_356,sarcasm twitter_357,sarcasm twitter_358,not_sarcasm twitter_359,sarcasm twitter_360,not_sarcasm twitter_361,sarcasm twitter_362,sarcasm twitter_363,sarcasm twitter_364,sarcasm twitter_365,not_sarcasm twitter_366,sarcasm twitter_367,sarcasm twitter_368,sarcasm twitter_369,not_sarcasm twitter_370,not_sarcasm twitter_371,sarcasm twitter_372,sarcasm twitter_373,sarcasm twitter_374,not_sarcasm twitter_375,sarcasm twitter_376,not_sarcasm twitter_377,sarcasm twitter_378,not_sarcasm twitter_379,not_sarcasm twitter_380,sarcasm twitter_381,sarcasm twitter_382,not_sarcasm twitter_383,sarcasm twitter_384,not_sarcasm twitter_385,not_sarcasm twitter_386,sarcasm twitter_387,sarcasm twitter_388,sarcasm twitter_389,not_sarcasm twitter_390,not_sarcasm twitter_391,sarcasm twitter_392,sarcasm twitter_393,not_sarcasm twitter_394,sarcasm twitter_395,sarcasm twitter_396,sarcasm twitter_397,not_sarcasm twitter_398,not_sarcasm twitter_399,sarcasm twitter_400,sarcasm twitter_401,sarcasm twitter_402,not_sarcasm twitter_403,sarcasm twitter_404,not_sarcasm twitter_405,not_sarcasm twitter_406,sarcasm twitter_407,sarcasm twitter_408,sarcasm twitter_409,sarcasm twitter_410,sarcasm twitter_411,sarcasm twitter_412,not_sarcasm twitter_413,sarcasm twitter_414,sarcasm twitter_415,sarcasm twitter_416,sarcasm twitter_417,sarcasm twitter_418,sarcasm twitter_419,not_sarcasm twitter_420,not_sarcasm twitter_421,sarcasm twitter_422,not_sarcasm twitter_423,sarcasm twitter_424,sarcasm twitter_425,sarcasm twitter_426,not_sarcasm twitter_427,sarcasm twitter_428,sarcasm twitter_429,not_sarcasm twitter_430,sarcasm twitter_431,sarcasm twitter_432,sarcasm twitter_433,sarcasm twitter_434,sarcasm twitter_435,not_sarcasm twitter_436,sarcasm twitter_437,sarcasm twitter_438,not_sarcasm twitter_439,not_sarcasm twitter_440,sarcasm twitter_441,sarcasm twitter_442,sarcasm twitter_443,sarcasm twitter_444,sarcasm twitter_445,sarcasm twitter_446,sarcasm twitter_447,sarcasm twitter_448,sarcasm twitter_449,sarcasm twitter_450,not_sarcasm twitter_451,not_sarcasm twitter_452,not_sarcasm twitter_453,sarcasm twitter_454,sarcasm twitter_455,not_sarcasm twitter_456,not_sarcasm twitter_457,sarcasm twitter_458,sarcasm twitter_459,sarcasm twitter_460,sarcasm twitter_461,sarcasm twitter_462,sarcasm twitter_463,sarcasm twitter_464,sarcasm twitter_465,not_sarcasm twitter_466,sarcasm twitter_467,not_sarcasm twitter_468,sarcasm twitter_469,sarcasm twitter_470,sarcasm twitter_471,sarcasm twitter_472,sarcasm twitter_473,not_sarcasm twitter_474,sarcasm twitter_475,not_sarcasm twitter_476,sarcasm twitter_477,not_sarcasm twitter_478,sarcasm twitter_479,sarcasm twitter_480,sarcasm twitter_481,not_sarcasm twitter_482,not_sarcasm twitter_483,not_sarcasm twitter_484,sarcasm twitter_485,not_sarcasm twitter_486,sarcasm twitter_487,not_sarcasm twitter_488,sarcasm twitter_489,sarcasm twitter_490,not_sarcasm twitter_491,not_sarcasm twitter_492,not_sarcasm twitter_493,sarcasm twitter_494,sarcasm twitter_495,sarcasm twitter_496,sarcasm twitter_497,not_sarcasm twitter_498,sarcasm twitter_499,sarcasm twitter_500,sarcasm twitter_501,sarcasm twitter_502,sarcasm twitter_503,sarcasm twitter_504,sarcasm twitter_505,sarcasm twitter_506,sarcasm twitter_507,sarcasm twitter_508,not_sarcasm twitter_509,not_sarcasm twitter_510,sarcasm twitter_511,not_sarcasm twitter_512,not_sarcasm twitter_513,sarcasm twitter_514,sarcasm twitter_515,not_sarcasm twitter_516,not_sarcasm twitter_517,sarcasm twitter_518,sarcasm twitter_519,not_sarcasm twitter_520,sarcasm twitter_521,sarcasm twitter_522,sarcasm twitter_523,not_sarcasm twitter_524,sarcasm twitter_525,sarcasm twitter_526,sarcasm twitter_527,sarcasm twitter_528,sarcasm twitter_529,not_sarcasm twitter_530,not_sarcasm twitter_531,not_sarcasm twitter_532,sarcasm twitter_533,not_sarcasm twitter_534,sarcasm twitter_535,sarcasm twitter_536,sarcasm twitter_537,not_sarcasm twitter_538,not_sarcasm twitter_539,sarcasm twitter_540,sarcasm twitter_541,sarcasm twitter_542,sarcasm twitter_543,not_sarcasm twitter_544,not_sarcasm twitter_545,sarcasm twitter_546,sarcasm twitter_547,sarcasm twitter_548,not_sarcasm twitter_549,not_sarcasm twitter_550,sarcasm twitter_551,sarcasm twitter_552,not_sarcasm twitter_553,sarcasm twitter_554,sarcasm twitter_555,not_sarcasm twitter_556,sarcasm twitter_557,sarcasm twitter_558,sarcasm twitter_559,sarcasm twitter_560,sarcasm twitter_561,not_sarcasm twitter_562,sarcasm twitter_563,sarcasm twitter_564,sarcasm twitter_565,sarcasm twitter_566,sarcasm twitter_567,sarcasm twitter_568,sarcasm twitter_569,not_sarcasm twitter_570,sarcasm twitter_571,sarcasm twitter_572,sarcasm twitter_573,sarcasm twitter_574,sarcasm twitter_575,not_sarcasm twitter_576,sarcasm twitter_577,sarcasm twitter_578,not_sarcasm twitter_579,not_sarcasm twitter_580,not_sarcasm twitter_581,not_sarcasm twitter_582,not_sarcasm twitter_583,sarcasm twitter_584,sarcasm twitter_585,sarcasm twitter_586,sarcasm twitter_587,sarcasm twitter_588,sarcasm twitter_589,not_sarcasm twitter_590,not_sarcasm twitter_591,sarcasm twitter_592,sarcasm twitter_593,not_sarcasm twitter_594,sarcasm twitter_595,sarcasm twitter_596,not_sarcasm twitter_597,not_sarcasm twitter_598,sarcasm twitter_599,not_sarcasm twitter_600,sarcasm twitter_601,not_sarcasm twitter_602,sarcasm twitter_603,not_sarcasm twitter_604,sarcasm twitter_605,not_sarcasm twitter_606,not_sarcasm twitter_607,sarcasm twitter_608,sarcasm twitter_609,not_sarcasm twitter_610,not_sarcasm twitter_611,not_sarcasm twitter_612,sarcasm twitter_613,sarcasm twitter_614,not_sarcasm twitter_615,not_sarcasm twitter_616,sarcasm twitter_617,sarcasm twitter_618,not_sarcasm twitter_619,sarcasm twitter_620,not_sarcasm twitter_621,sarcasm twitter_622,not_sarcasm twitter_623,sarcasm twitter_624,not_sarcasm twitter_625,sarcasm twitter_626,sarcasm twitter_627,not_sarcasm twitter_628,not_sarcasm twitter_629,sarcasm twitter_630,sarcasm twitter_631,not_sarcasm twitter_632,sarcasm twitter_633,not_sarcasm twitter_634,sarcasm twitter_635,sarcasm twitter_636,not_sarcasm twitter_637,sarcasm twitter_638,not_sarcasm twitter_639,sarcasm twitter_640,not_sarcasm twitter_641,not_sarcasm twitter_642,sarcasm twitter_643,sarcasm twitter_644,sarcasm twitter_645,not_sarcasm twitter_646,not_sarcasm twitter_647,not_sarcasm twitter_648,not_sarcasm twitter_649,sarcasm twitter_650,not_sarcasm twitter_651,sarcasm twitter_652,not_sarcasm twitter_653,not_sarcasm twitter_654,sarcasm twitter_655,not_sarcasm twitter_656,not_sarcasm twitter_657,sarcasm twitter_658,not_sarcasm twitter_659,sarcasm twitter_660,sarcasm twitter_661,sarcasm twitter_662,sarcasm twitter_663,not_sarcasm twitter_664,sarcasm twitter_665,not_sarcasm twitter_666,not_sarcasm twitter_667,sarcasm twitter_668,sarcasm twitter_669,sarcasm twitter_670,not_sarcasm twitter_671,sarcasm twitter_672,sarcasm twitter_673,sarcasm twitter_674,sarcasm twitter_675,sarcasm twitter_676,not_sarcasm twitter_677,not_sarcasm twitter_678,sarcasm twitter_679,sarcasm twitter_680,not_sarcasm twitter_681,not_sarcasm twitter_682,sarcasm twitter_683,not_sarcasm twitter_684,not_sarcasm twitter_685,sarcasm twitter_686,sarcasm twitter_687,not_sarcasm twitter_688,sarcasm twitter_689,sarcasm twitter_690,sarcasm twitter_691,not_sarcasm twitter_692,sarcasm twitter_693,sarcasm twitter_694,not_sarcasm twitter_695,sarcasm twitter_696,not_sarcasm twitter_697,sarcasm twitter_698,not_sarcasm twitter_699,not_sarcasm twitter_700,not_sarcasm twitter_701,sarcasm twitter_702,not_sarcasm twitter_703,sarcasm twitter_704,sarcasm twitter_705,not_sarcasm twitter_706,sarcasm twitter_707,not_sarcasm twitter_708,sarcasm twitter_709,not_sarcasm twitter_710,sarcasm twitter_711,sarcasm twitter_712,sarcasm twitter_713,sarcasm twitter_714,sarcasm twitter_715,sarcasm twitter_716,sarcasm twitter_717,sarcasm twitter_718,sarcasm twitter_719,not_sarcasm twitter_720,not_sarcasm twitter_721,sarcasm twitter_722,not_sarcasm twitter_723,sarcasm twitter_724,sarcasm twitter_725,sarcasm twitter_726,not_sarcasm twitter_727,not_sarcasm twitter_728,sarcasm twitter_729,sarcasm twitter_730,sarcasm twitter_731,not_sarcasm twitter_732,sarcasm twitter_733,not_sarcasm twitter_734,not_sarcasm twitter_735,sarcasm twitter_736,sarcasm twitter_737,sarcasm twitter_738,sarcasm twitter_739,sarcasm twitter_740,sarcasm twitter_741,sarcasm twitter_742,sarcasm twitter_743,sarcasm twitter_744,not_sarcasm twitter_745,not_sarcasm twitter_746,sarcasm twitter_747,sarcasm twitter_748,not_sarcasm twitter_749,not_sarcasm twitter_750,not_sarcasm twitter_751,sarcasm twitter_752,not_sarcasm twitter_753,sarcasm twitter_754,sarcasm twitter_755,not_sarcasm twitter_756,sarcasm twitter_757,not_sarcasm twitter_758,not_sarcasm twitter_759,sarcasm twitter_760,sarcasm twitter_761,not_sarcasm twitter_762,sarcasm twitter_763,not_sarcasm twitter_764,sarcasm twitter_765,sarcasm twitter_766,sarcasm twitter_767,sarcasm twitter_768,not_sarcasm twitter_769,not_sarcasm twitter_770,not_sarcasm twitter_771,sarcasm twitter_772,not_sarcasm twitter_773,sarcasm twitter_774,not_sarcasm twitter_775,sarcasm twitter_776,sarcasm twitter_777,not_sarcasm twitter_778,sarcasm twitter_779,not_sarcasm twitter_780,sarcasm twitter_781,not_sarcasm twitter_782,not_sarcasm twitter_783,sarcasm twitter_784,sarcasm twitter_785,not_sarcasm twitter_786,sarcasm twitter_787,sarcasm twitter_788,not_sarcasm twitter_789,sarcasm twitter_790,sarcasm twitter_791,not_sarcasm twitter_792,not_sarcasm twitter_793,sarcasm twitter_794,not_sarcasm twitter_795,sarcasm twitter_796,sarcasm twitter_797,sarcasm twitter_798,sarcasm twitter_799,sarcasm twitter_800,not_sarcasm twitter_801,not_sarcasm twitter_802,not_sarcasm twitter_803,sarcasm twitter_804,not_sarcasm twitter_805,sarcasm twitter_806,sarcasm twitter_807,not_sarcasm twitter_808,sarcasm twitter_809,sarcasm twitter_810,not_sarcasm twitter_811,sarcasm twitter_812,sarcasm twitter_813,sarcasm twitter_814,sarcasm twitter_815,sarcasm twitter_816,sarcasm twitter_817,sarcasm twitter_818,not_sarcasm twitter_819,sarcasm twitter_820,not_sarcasm twitter_821,not_sarcasm twitter_822,not_sarcasm twitter_823,sarcasm twitter_824,not_sarcasm twitter_825,not_sarcasm twitter_826,sarcasm twitter_827,sarcasm twitter_828,not_sarcasm twitter_829,sarcasm twitter_830,sarcasm twitter_831,not_sarcasm twitter_832,not_sarcasm twitter_833,not_sarcasm twitter_834,not_sarcasm twitter_835,sarcasm twitter_836,sarcasm twitter_837,sarcasm twitter_838,sarcasm twitter_839,sarcasm twitter_840,sarcasm twitter_841,sarcasm twitter_842,sarcasm twitter_843,sarcasm twitter_844,sarcasm twitter_845,not_sarcasm twitter_846,not_sarcasm twitter_847,sarcasm twitter_848,not_sarcasm twitter_849,not_sarcasm twitter_850,sarcasm twitter_851,sarcasm twitter_852,not_sarcasm twitter_853,not_sarcasm twitter_854,not_sarcasm twitter_855,not_sarcasm twitter_856,sarcasm twitter_857,sarcasm twitter_858,sarcasm twitter_859,not_sarcasm twitter_860,not_sarcasm twitter_861,not_sarcasm twitter_862,not_sarcasm twitter_863,sarcasm twitter_864,not_sarcasm twitter_865,sarcasm twitter_866,sarcasm twitter_867,sarcasm twitter_868,sarcasm twitter_869,sarcasm twitter_870,sarcasm twitter_871,sarcasm twitter_872,not_sarcasm twitter_873,sarcasm twitter_874,not_sarcasm twitter_875,not_sarcasm twitter_876,not_sarcasm twitter_877,not_sarcasm twitter_878,sarcasm twitter_879,not_sarcasm twitter_880,sarcasm twitter_881,not_sarcasm twitter_882,not_sarcasm twitter_883,sarcasm twitter_884,sarcasm twitter_885,sarcasm twitter_886,sarcasm twitter_887,not_sarcasm twitter_888,sarcasm twitter_889,not_sarcasm twitter_890,sarcasm twitter_891,sarcasm twitter_892,not_sarcasm twitter_893,sarcasm twitter_894,not_sarcasm twitter_895,sarcasm twitter_896,not_sarcasm twitter_897,not_sarcasm twitter_898,sarcasm twitter_899,sarcasm twitter_900,not_sarcasm twitter_901,sarcasm twitter_902,sarcasm twitter_903,sarcasm twitter_904,sarcasm twitter_905,sarcasm twitter_906,sarcasm twitter_907,sarcasm twitter_908,sarcasm twitter_909,sarcasm twitter_910,not_sarcasm twitter_911,not_sarcasm twitter_912,not_sarcasm twitter_913,sarcasm twitter_914,sarcasm twitter_915,sarcasm twitter_916,sarcasm twitter_917,sarcasm twitter_918,not_sarcasm twitter_919,sarcasm twitter_920,not_sarcasm twitter_921,sarcasm twitter_922,sarcasm twitter_923,not_sarcasm twitter_924,sarcasm twitter_925,not_sarcasm twitter_926,not_sarcasm twitter_927,not_sarcasm twitter_928,not_sarcasm twitter_929,not_sarcasm twitter_930,not_sarcasm twitter_931,sarcasm twitter_932,sarcasm twitter_933,not_sarcasm twitter_934,not_sarcasm twitter_935,sarcasm twitter_936,sarcasm twitter_937,sarcasm twitter_938,sarcasm twitter_939,sarcasm twitter_940,sarcasm twitter_941,sarcasm twitter_942,not_sarcasm twitter_943,not_sarcasm twitter_944,sarcasm twitter_945,sarcasm twitter_946,sarcasm twitter_947,not_sarcasm twitter_948,sarcasm twitter_949,sarcasm twitter_950,sarcasm twitter_951,not_sarcasm twitter_952,sarcasm twitter_953,not_sarcasm twitter_954,sarcasm twitter_955,sarcasm twitter_956,sarcasm twitter_957,sarcasm twitter_958,sarcasm twitter_959,not_sarcasm twitter_960,sarcasm twitter_961,sarcasm twitter_962,sarcasm twitter_963,not_sarcasm twitter_964,not_sarcasm twitter_965,sarcasm twitter_966,sarcasm twitter_967,sarcasm twitter_968,sarcasm twitter_969,sarcasm twitter_970,sarcasm twitter_971,sarcasm twitter_972,not_sarcasm twitter_973,sarcasm twitter_974,not_sarcasm twitter_975,sarcasm twitter_976,not_sarcasm twitter_977,sarcasm twitter_978,sarcasm twitter_979,sarcasm twitter_980,sarcasm twitter_981,sarcasm twitter_982,not_sarcasm twitter_983,sarcasm twitter_984,sarcasm twitter_985,sarcasm twitter_986,not_sarcasm twitter_987,not_sarcasm twitter_988,sarcasm twitter_989,not_sarcasm twitter_990,not_sarcasm twitter_991,sarcasm twitter_992,sarcasm twitter_993,sarcasm twitter_994,sarcasm twitter_995,sarcasm twitter_996,sarcasm twitter_997,sarcasm twitter_998,sarcasm twitter_999,not_sarcasm twitter_1000,not_sarcasm twitter_1001,not_sarcasm twitter_1002,sarcasm twitter_1003,sarcasm twitter_1004,sarcasm twitter_1005,sarcasm twitter_1006,sarcasm twitter_1007,sarcasm twitter_1008,not_sarcasm twitter_1009,not_sarcasm twitter_1010,sarcasm twitter_1011,not_sarcasm twitter_1012,sarcasm twitter_1013,sarcasm twitter_1014,sarcasm twitter_1015,not_sarcasm twitter_1016,not_sarcasm twitter_1017,not_sarcasm twitter_1018,sarcasm twitter_1019,not_sarcasm twitter_1020,sarcasm twitter_1021,not_sarcasm twitter_1022,not_sarcasm twitter_1023,sarcasm twitter_1024,sarcasm twitter_1025,not_sarcasm twitter_1026,not_sarcasm twitter_1027,sarcasm twitter_1028,sarcasm twitter_1029,not_sarcasm twitter_1030,sarcasm twitter_1031,not_sarcasm twitter_1032,not_sarcasm twitter_1033,not_sarcasm twitter_1034,sarcasm twitter_1035,not_sarcasm twitter_1036,sarcasm twitter_1037,not_sarcasm twitter_1038,sarcasm twitter_1039,sarcasm twitter_1040,sarcasm twitter_1041,not_sarcasm twitter_1042,sarcasm twitter_1043,sarcasm twitter_1044,not_sarcasm twitter_1045,sarcasm twitter_1046,sarcasm twitter_1047,not_sarcasm twitter_1048,sarcasm twitter_1049,not_sarcasm twitter_1050,sarcasm twitter_1051,not_sarcasm twitter_1052,not_sarcasm twitter_1053,sarcasm twitter_1054,sarcasm twitter_1055,not_sarcasm twitter_1056,sarcasm twitter_1057,not_sarcasm twitter_1058,sarcasm twitter_1059,sarcasm twitter_1060,not_sarcasm twitter_1061,sarcasm twitter_1062,sarcasm twitter_1063,not_sarcasm twitter_1064,not_sarcasm twitter_1065,sarcasm twitter_1066,not_sarcasm twitter_1067,sarcasm twitter_1068,not_sarcasm twitter_1069,sarcasm twitter_1070,sarcasm twitter_1071,sarcasm twitter_1072,not_sarcasm twitter_1073,not_sarcasm twitter_1074,sarcasm twitter_1075,not_sarcasm twitter_1076,sarcasm twitter_1077,not_sarcasm twitter_1078,sarcasm twitter_1079,sarcasm twitter_1080,sarcasm twitter_1081,sarcasm twitter_1082,not_sarcasm twitter_1083,sarcasm twitter_1084,sarcasm twitter_1085,sarcasm twitter_1086,sarcasm twitter_1087,not_sarcasm twitter_1088,not_sarcasm twitter_1089,not_sarcasm twitter_1090,not_sarcasm twitter_1091,sarcasm twitter_1092,sarcasm twitter_1093,not_sarcasm twitter_1094,not_sarcasm twitter_1095,sarcasm twitter_1096,not_sarcasm twitter_1097,not_sarcasm twitter_1098,not_sarcasm twitter_1099,not_sarcasm twitter_1100,sarcasm twitter_1101,sarcasm twitter_1102,sarcasm twitter_1103,sarcasm twitter_1104,sarcasm twitter_1105,sarcasm twitter_1106,not_sarcasm twitter_1107,sarcasm twitter_1108,sarcasm twitter_1109,sarcasm twitter_1110,not_sarcasm twitter_1111,sarcasm twitter_1112,sarcasm twitter_1113,sarcasm twitter_1114,not_sarcasm twitter_1115,sarcasm twitter_1116,sarcasm twitter_1117,not_sarcasm twitter_1118,not_sarcasm twitter_1119,not_sarcasm twitter_1120,sarcasm twitter_1121,sarcasm twitter_1122,not_sarcasm twitter_1123,sarcasm twitter_1124,sarcasm twitter_1125,sarcasm twitter_1126,not_sarcasm twitter_1127,not_sarcasm twitter_1128,not_sarcasm twitter_1129,not_sarcasm twitter_1130,sarcasm twitter_1131,sarcasm twitter_1132,not_sarcasm twitter_1133,sarcasm twitter_1134,not_sarcasm twitter_1135,not_sarcasm twitter_1136,sarcasm twitter_1137,sarcasm twitter_1138,not_sarcasm twitter_1139,sarcasm twitter_1140,not_sarcasm twitter_1141,sarcasm twitter_1142,sarcasm twitter_1143,sarcasm twitter_1144,sarcasm twitter_1145,sarcasm twitter_1146,not_sarcasm twitter_1147,sarcasm twitter_1148,not_sarcasm twitter_1149,sarcasm twitter_1150,not_sarcasm twitter_1151,not_sarcasm twitter_1152,sarcasm twitter_1153,not_sarcasm twitter_1154,not_sarcasm twitter_1155,sarcasm twitter_1156,sarcasm twitter_1157,sarcasm twitter_1158,sarcasm twitter_1159,sarcasm twitter_1160,not_sarcasm twitter_1161,not_sarcasm twitter_1162,sarcasm twitter_1163,not_sarcasm twitter_1164,sarcasm twitter_1165,not_sarcasm twitter_1166,sarcasm twitter_1167,sarcasm twitter_1168,not_sarcasm twitter_1169,sarcasm twitter_1170,sarcasm twitter_1171,sarcasm twitter_1172,sarcasm twitter_1173,sarcasm twitter_1174,sarcasm twitter_1175,sarcasm twitter_1176,not_sarcasm twitter_1177,not_sarcasm twitter_1178,sarcasm twitter_1179,not_sarcasm twitter_1180,sarcasm twitter_1181,not_sarcasm twitter_1182,not_sarcasm twitter_1183,sarcasm twitter_1184,sarcasm twitter_1185,not_sarcasm twitter_1186,sarcasm twitter_1187,sarcasm twitter_1188,sarcasm twitter_1189,sarcasm twitter_1190,sarcasm twitter_1191,sarcasm twitter_1192,sarcasm twitter_1193,not_sarcasm twitter_1194,not_sarcasm twitter_1195,not_sarcasm twitter_1196,not_sarcasm twitter_1197,not_sarcasm twitter_1198,sarcasm twitter_1199,sarcasm twitter_1200,sarcasm twitter_1201,not_sarcasm twitter_1202,sarcasm twitter_1203,not_sarcasm twitter_1204,not_sarcasm twitter_1205,not_sarcasm twitter_1206,not_sarcasm twitter_1207,sarcasm twitter_1208,sarcasm twitter_1209,not_sarcasm twitter_1210,sarcasm twitter_1211,sarcasm twitter_1212,sarcasm twitter_1213,not_sarcasm twitter_1214,sarcasm twitter_1215,sarcasm twitter_1216,not_sarcasm twitter_1217,not_sarcasm twitter_1218,not_sarcasm twitter_1219,sarcasm twitter_1220,not_sarcasm twitter_1221,sarcasm twitter_1222,sarcasm twitter_1223,not_sarcasm twitter_1224,not_sarcasm twitter_1225,sarcasm twitter_1226,sarcasm twitter_1227,sarcasm twitter_1228,sarcasm twitter_1229,sarcasm twitter_1230,sarcasm twitter_1231,sarcasm twitter_1232,sarcasm twitter_1233,sarcasm twitter_1234,sarcasm twitter_1235,sarcasm twitter_1236,sarcasm twitter_1237,not_sarcasm twitter_1238,sarcasm twitter_1239,not_sarcasm twitter_1240,sarcasm twitter_1241,not_sarcasm twitter_1242,sarcasm twitter_1243,sarcasm twitter_1244,not_sarcasm twitter_1245,not_sarcasm twitter_1246,not_sarcasm twitter_1247,sarcasm twitter_1248,sarcasm twitter_1249,not_sarcasm twitter_1250,not_sarcasm twitter_1251,sarcasm twitter_1252,sarcasm twitter_1253,not_sarcasm twitter_1254,sarcasm twitter_1255,sarcasm twitter_1256,not_sarcasm twitter_1257,sarcasm twitter_1258,not_sarcasm twitter_1259,not_sarcasm twitter_1260,sarcasm twitter_1261,sarcasm twitter_1262,sarcasm twitter_1263,sarcasm twitter_1264,sarcasm twitter_1265,not_sarcasm twitter_1266,not_sarcasm twitter_1267,sarcasm twitter_1268,sarcasm twitter_1269,not_sarcasm twitter_1270,sarcasm twitter_1271,sarcasm twitter_1272,sarcasm twitter_1273,not_sarcasm twitter_1274,sarcasm twitter_1275,sarcasm twitter_1276,not_sarcasm twitter_1277,not_sarcasm twitter_1278,not_sarcasm twitter_1279,not_sarcasm twitter_1280,sarcasm twitter_1281,not_sarcasm twitter_1282,not_sarcasm twitter_1283,sarcasm twitter_1284,not_sarcasm twitter_1285,sarcasm twitter_1286,not_sarcasm twitter_1287,not_sarcasm twitter_1288,sarcasm twitter_1289,sarcasm twitter_1290,sarcasm twitter_1291,sarcasm twitter_1292,sarcasm twitter_1293,sarcasm twitter_1294,not_sarcasm twitter_1295,sarcasm twitter_1296,sarcasm twitter_1297,sarcasm twitter_1298,sarcasm twitter_1299,sarcasm twitter_1300,sarcasm twitter_1301,sarcasm twitter_1302,sarcasm twitter_1303,not_sarcasm twitter_1304,not_sarcasm twitter_1305,sarcasm twitter_1306,not_sarcasm twitter_1307,sarcasm twitter_1308,sarcasm twitter_1309,sarcasm twitter_1310,sarcasm twitter_1311,sarcasm twitter_1312,sarcasm twitter_1313,not_sarcasm twitter_1314,sarcasm twitter_1315,sarcasm twitter_1316,sarcasm twitter_1317,sarcasm twitter_1318,not_sarcasm twitter_1319,not_sarcasm twitter_1320,sarcasm twitter_1321,sarcasm twitter_1322,sarcasm twitter_1323,sarcasm twitter_1324,sarcasm twitter_1325,sarcasm twitter_1326,not_sarcasm twitter_1327,not_sarcasm twitter_1328,not_sarcasm twitter_1329,sarcasm twitter_1330,sarcasm twitter_1331,sarcasm twitter_1332,sarcasm twitter_1333,not_sarcasm twitter_1334,sarcasm twitter_1335,not_sarcasm twitter_1336,not_sarcasm twitter_1337,sarcasm twitter_1338,not_sarcasm twitter_1339,sarcasm twitter_1340,sarcasm twitter_1341,sarcasm twitter_1342,sarcasm twitter_1343,sarcasm twitter_1344,sarcasm twitter_1345,not_sarcasm twitter_1346,sarcasm twitter_1347,sarcasm twitter_1348,sarcasm twitter_1349,sarcasm twitter_1350,sarcasm twitter_1351,sarcasm twitter_1352,not_sarcasm twitter_1353,sarcasm twitter_1354,not_sarcasm twitter_1355,sarcasm twitter_1356,sarcasm twitter_1357,sarcasm twitter_1358,sarcasm twitter_1359,sarcasm twitter_1360,sarcasm twitter_1361,sarcasm twitter_1362,not_sarcasm twitter_1363,sarcasm twitter_1364,not_sarcasm twitter_1365,sarcasm twitter_1366,sarcasm twitter_1367,sarcasm twitter_1368,sarcasm twitter_1369,not_sarcasm twitter_1370,not_sarcasm twitter_1371,not_sarcasm twitter_1372,not_sarcasm twitter_1373,not_sarcasm twitter_1374,sarcasm twitter_1375,not_sarcasm twitter_1376,sarcasm twitter_1377,sarcasm twitter_1378,not_sarcasm twitter_1379,sarcasm twitter_1380,sarcasm twitter_1381,sarcasm twitter_1382,sarcasm twitter_1383,sarcasm twitter_1384,not_sarcasm twitter_1385,sarcasm twitter_1386,not_sarcasm twitter_1387,sarcasm twitter_1388,sarcasm twitter_1389,sarcasm twitter_1390,sarcasm twitter_1391,sarcasm twitter_1392,sarcasm twitter_1393,sarcasm twitter_1394,not_sarcasm twitter_1395,sarcasm twitter_1396,not_sarcasm twitter_1397,sarcasm twitter_1398,sarcasm twitter_1399,sarcasm twitter_1400,not_sarcasm twitter_1401,sarcasm twitter_1402,sarcasm twitter_1403,sarcasm twitter_1404,sarcasm twitter_1405,not_sarcasm twitter_1406,not_sarcasm twitter_1407,sarcasm twitter_1408,sarcasm twitter_1409,sarcasm twitter_1410,sarcasm twitter_1411,sarcasm twitter_1412,not_sarcasm twitter_1413,not_sarcasm twitter_1414,sarcasm twitter_1415,sarcasm twitter_1416,sarcasm twitter_1417,sarcasm twitter_1418,not_sarcasm twitter_1419,not_sarcasm twitter_1420,not_sarcasm twitter_1421,not_sarcasm twitter_1422,not_sarcasm twitter_1423,sarcasm twitter_1424,sarcasm twitter_1425,sarcasm twitter_1426,not_sarcasm twitter_1427,sarcasm twitter_1428,sarcasm twitter_1429,sarcasm twitter_1430,not_sarcasm twitter_1431,not_sarcasm twitter_1432,sarcasm twitter_1433,not_sarcasm twitter_1434,not_sarcasm twitter_1435,sarcasm twitter_1436,sarcasm twitter_1437,sarcasm twitter_1438,sarcasm twitter_1439,sarcasm twitter_1440,not_sarcasm twitter_1441,sarcasm twitter_1442,not_sarcasm twitter_1443,not_sarcasm twitter_1444,not_sarcasm twitter_1445,not_sarcasm twitter_1446,not_sarcasm twitter_1447,sarcasm twitter_1448,sarcasm twitter_1449,sarcasm twitter_1450,sarcasm twitter_1451,sarcasm twitter_1452,sarcasm twitter_1453,sarcasm twitter_1454,sarcasm twitter_1455,sarcasm twitter_1456,sarcasm twitter_1457,not_sarcasm twitter_1458,not_sarcasm twitter_1459,not_sarcasm twitter_1460,sarcasm twitter_1461,sarcasm twitter_1462,sarcasm twitter_1463,sarcasm twitter_1464,sarcasm twitter_1465,sarcasm twitter_1466,sarcasm twitter_1467,not_sarcasm twitter_1468,sarcasm twitter_1469,sarcasm twitter_1470,sarcasm twitter_1471,sarcasm twitter_1472,sarcasm twitter_1473,not_sarcasm twitter_1474,not_sarcasm twitter_1475,sarcasm twitter_1476,sarcasm twitter_1477,sarcasm twitter_1478,not_sarcasm twitter_1479,sarcasm twitter_1480,not_sarcasm twitter_1481,sarcasm twitter_1482,not_sarcasm twitter_1483,sarcasm twitter_1484,sarcasm twitter_1485,not_sarcasm twitter_1486,sarcasm twitter_1487,sarcasm twitter_1488,sarcasm twitter_1489,sarcasm twitter_1490,sarcasm twitter_1491,not_sarcasm twitter_1492,sarcasm twitter_1493,sarcasm twitter_1494,sarcasm twitter_1495,not_sarcasm twitter_1496,sarcasm twitter_1497,not_sarcasm twitter_1498,sarcasm twitter_1499,not_sarcasm twitter_1500,not_sarcasm twitter_1501,not_sarcasm twitter_1502,not_sarcasm twitter_1503,not_sarcasm twitter_1504,sarcasm twitter_1505,not_sarcasm twitter_1506,sarcasm twitter_1507,sarcasm twitter_1508,sarcasm twitter_1509,sarcasm twitter_1510,sarcasm twitter_1511,sarcasm twitter_1512,sarcasm twitter_1513,sarcasm twitter_1514,sarcasm twitter_1515,not_sarcasm twitter_1516,sarcasm twitter_1517,not_sarcasm twitter_1518,sarcasm twitter_1519,not_sarcasm twitter_1520,sarcasm twitter_1521,sarcasm twitter_1522,sarcasm twitter_1523,sarcasm twitter_1524,not_sarcasm twitter_1525,sarcasm twitter_1526,not_sarcasm twitter_1527,sarcasm twitter_1528,sarcasm twitter_1529,sarcasm twitter_1530,sarcasm twitter_1531,not_sarcasm twitter_1532,sarcasm twitter_1533,sarcasm twitter_1534,sarcasm twitter_1535,sarcasm twitter_1536,not_sarcasm twitter_1537,sarcasm twitter_1538,sarcasm twitter_1539,sarcasm twitter_1540,sarcasm twitter_1541,sarcasm twitter_1542,sarcasm twitter_1543,not_sarcasm twitter_1544,sarcasm twitter_1545,not_sarcasm twitter_1546,sarcasm twitter_1547,sarcasm twitter_1548,not_sarcasm twitter_1549,sarcasm twitter_1550,sarcasm twitter_1551,sarcasm twitter_1552,sarcasm twitter_1553,sarcasm twitter_1554,sarcasm twitter_1555,not_sarcasm twitter_1556,sarcasm twitter_1557,sarcasm twitter_1558,sarcasm twitter_1559,sarcasm twitter_1560,sarcasm twitter_1561,sarcasm twitter_1562,sarcasm twitter_1563,not_sarcasm twitter_1564,sarcasm twitter_1565,sarcasm twitter_1566,not_sarcasm twitter_1567,sarcasm twitter_1568,not_sarcasm twitter_1569,not_sarcasm twitter_1570,sarcasm twitter_1571,sarcasm twitter_1572,sarcasm twitter_1573,not_sarcasm twitter_1574,not_sarcasm twitter_1575,not_sarcasm twitter_1576,sarcasm twitter_1577,sarcasm twitter_1578,sarcasm twitter_1579,sarcasm twitter_1580,not_sarcasm twitter_1581,sarcasm twitter_1582,not_sarcasm twitter_1583,not_sarcasm twitter_1584,not_sarcasm twitter_1585,sarcasm twitter_1586,sarcasm twitter_1587,not_sarcasm twitter_1588,sarcasm twitter_1589,not_sarcasm twitter_1590,not_sarcasm twitter_1591,sarcasm twitter_1592,not_sarcasm twitter_1593,not_sarcasm twitter_1594,sarcasm twitter_1595,not_sarcasm twitter_1596,sarcasm twitter_1597,sarcasm twitter_1598,not_sarcasm twitter_1599,sarcasm twitter_1600,sarcasm twitter_1601,sarcasm twitter_1602,not_sarcasm twitter_1603,not_sarcasm twitter_1604,sarcasm twitter_1605,sarcasm twitter_1606,sarcasm twitter_1607,sarcasm twitter_1608,not_sarcasm twitter_1609,sarcasm twitter_1610,sarcasm twitter_1611,sarcasm twitter_1612,not_sarcasm twitter_1613,sarcasm twitter_1614,not_sarcasm twitter_1615,sarcasm twitter_1616,sarcasm twitter_1617,sarcasm twitter_1618,not_sarcasm twitter_1619,not_sarcasm twitter_1620,sarcasm twitter_1621,sarcasm twitter_1622,not_sarcasm twitter_1623,not_sarcasm twitter_1624,not_sarcasm twitter_1625,sarcasm twitter_1626,sarcasm twitter_1627,sarcasm twitter_1628,not_sarcasm twitter_1629,sarcasm twitter_1630,not_sarcasm twitter_1631,not_sarcasm twitter_1632,sarcasm twitter_1633,sarcasm twitter_1634,sarcasm twitter_1635,sarcasm twitter_1636,sarcasm twitter_1637,not_sarcasm twitter_1638,sarcasm twitter_1639,sarcasm twitter_1640,sarcasm twitter_1641,not_sarcasm twitter_1642,sarcasm twitter_1643,sarcasm twitter_1644,sarcasm twitter_1645,sarcasm twitter_1646,sarcasm twitter_1647,not_sarcasm twitter_1648,not_sarcasm twitter_1649,sarcasm twitter_1650,not_sarcasm twitter_1651,not_sarcasm twitter_1652,sarcasm twitter_1653,sarcasm twitter_1654,sarcasm twitter_1655,sarcasm twitter_1656,sarcasm twitter_1657,sarcasm twitter_1658,not_sarcasm twitter_1659,sarcasm twitter_1660,sarcasm twitter_1661,not_sarcasm twitter_1662,sarcasm twitter_1663,not_sarcasm twitter_1664,sarcasm twitter_1665,sarcasm twitter_1666,sarcasm twitter_1667,not_sarcasm twitter_1668,sarcasm twitter_1669,not_sarcasm twitter_1670,sarcasm twitter_1671,sarcasm twitter_1672,sarcasm twitter_1673,not_sarcasm twitter_1674,sarcasm twitter_1675,sarcasm twitter_1676,sarcasm twitter_1677,sarcasm twitter_1678,not_sarcasm twitter_1679,sarcasm twitter_1680,sarcasm twitter_1681,not_sarcasm twitter_1682,sarcasm twitter_1683,sarcasm twitter_1684,sarcasm twitter_1685,sarcasm twitter_1686,sarcasm twitter_1687,sarcasm twitter_1688,not_sarcasm twitter_1689,not_sarcasm twitter_1690,not_sarcasm twitter_1691,sarcasm twitter_1692,sarcasm twitter_1693,sarcasm twitter_1694,not_sarcasm twitter_1695,not_sarcasm twitter_1696,sarcasm twitter_1697,sarcasm twitter_1698,not_sarcasm twitter_1699,sarcasm twitter_1700,not_sarcasm twitter_1701,sarcasm twitter_1702,sarcasm twitter_1703,sarcasm twitter_1704,not_sarcasm twitter_1705,sarcasm twitter_1706,sarcasm twitter_1707,not_sarcasm twitter_1708,sarcasm twitter_1709,not_sarcasm twitter_1710,sarcasm twitter_1711,sarcasm twitter_1712,not_sarcasm twitter_1713,sarcasm twitter_1714,not_sarcasm twitter_1715,not_sarcasm twitter_1716,sarcasm twitter_1717,not_sarcasm twitter_1718,not_sarcasm twitter_1719,not_sarcasm twitter_1720,sarcasm twitter_1721,sarcasm twitter_1722,not_sarcasm twitter_1723,sarcasm twitter_1724,sarcasm twitter_1725,not_sarcasm twitter_1726,sarcasm twitter_1727,not_sarcasm twitter_1728,sarcasm twitter_1729,not_sarcasm twitter_1730,sarcasm twitter_1731,sarcasm twitter_1732,sarcasm twitter_1733,sarcasm twitter_1734,not_sarcasm twitter_1735,sarcasm twitter_1736,sarcasm twitter_1737,sarcasm twitter_1738,sarcasm twitter_1739,not_sarcasm twitter_1740,sarcasm twitter_1741,sarcasm twitter_1742,not_sarcasm twitter_1743,not_sarcasm twitter_1744,sarcasm twitter_1745,sarcasm twitter_1746,sarcasm twitter_1747,sarcasm twitter_1748,sarcasm twitter_1749,sarcasm twitter_1750,not_sarcasm twitter_1751,sarcasm twitter_1752,sarcasm twitter_1753,not_sarcasm twitter_1754,sarcasm twitter_1755,not_sarcasm twitter_1756,sarcasm twitter_1757,not_sarcasm twitter_1758,sarcasm twitter_1759,sarcasm twitter_1760,sarcasm twitter_1761,sarcasm twitter_1762,sarcasm twitter_1763,not_sarcasm twitter_1764,not_sarcasm twitter_1765,sarcasm twitter_1766,sarcasm twitter_1767,not_sarcasm twitter_1768,sarcasm twitter_1769,sarcasm twitter_1770,sarcasm twitter_1771,sarcasm twitter_1772,sarcasm twitter_1773,not_sarcasm twitter_1774,sarcasm twitter_1775,not_sarcasm twitter_1776,sarcasm twitter_1777,not_sarcasm twitter_1778,sarcasm twitter_1779,not_sarcasm twitter_1780,sarcasm twitter_1781,not_sarcasm twitter_1782,sarcasm twitter_1783,sarcasm twitter_1784,sarcasm twitter_1785,sarcasm twitter_1786,sarcasm twitter_1787,not_sarcasm twitter_1788,sarcasm twitter_1789,not_sarcasm twitter_1790,sarcasm twitter_1791,not_sarcasm twitter_1792,sarcasm twitter_1793,not_sarcasm twitter_1794,sarcasm twitter_1795,sarcasm twitter_1796,not_sarcasm twitter_1797,sarcasm twitter_1798,not_sarcasm twitter_1799,not_sarcasm twitter_1800,not_sarcasm bert sentiment analysis to detect twitter sarcasm (naive approach) zainal hakim zainalh2@illinois.edu table of content a. introduction 3 b. bidirectional encoder representations from transformers (bert) 3 c. dataset description 4 d. the naive approach 4 e. the model, training, and evaluation 5 f. the software code 6 f.1. naive_bert_sentiment_analysis.ipynb code review 6 1. colab configuration 6 2. mounting google drive to colab session (to save result files) 9 3. the main python class 10 4. training and evaluation experiments 13 5. save the result files to google drive 14 f.2. demo_model_evaluation.ipynb code review 15 1. the first 3-steps are already explained in detail in the previous section 15 2. preparing the encoded testing dataset and data loader 15 3. run the evaluation batch iteration 16 4. generate the 'anwer.txt' file 17 5. post 'answer.txt' to livedatalab for scoring 18 g. result and conclusion 18 reference 19 appendix 19 1. answer.txt 19 a. introduction sarcasm is a form of figurative language that implies a negative sentiment while displaying a positive sentiment on the surface (joshi et al., 2017). i present a naive approach to detect twitter tweet sarcasm sentiment using a transformers-based pre-trained model that considers only the response tweet. this approach completely ignores the context of the response tweet to train the model. the model uses a transformer encoder to generate the embedding representation for the response. the model is trained and evaluated on the given training and testing datasets. my best performance model gives an f1-score of 75.79%, beating the classification competition baseline score after four epoch iterations (epoch # 4). ""c. dataset description"" section of this document explains further the response and context relationship. important files in the project: 1. documented software code * training and evaluation (link) * evaluation of a trained-model for demo purpose (link) 2. best performance testing set predictions (answer.txt) (link) 3. best performance trained-model (link) 4. training dataset (link) 5. testing dataset (link) b. bidirectional encoder representations from transformers (bert) this project uses bert, a transformer-based technique for natural language processing pre- training developed by a team in google. the original english language bert model comes with two pre-trained model types: model type layer hidden head parameter corpus word base 12 768 12 110 m 800 m large 24 1024 16 340 m 2.500 m table 1: bert original model types bert large model essentially has better computing leverage than the base model. google team trained the large model using a larger corpus word size than the base model. the large model is expected to perform better than the base model in most of the nlp tasks such as sentiment analysis. original bert paper is available here (link). c. dataset description there are two twitter tweet datasets available for this project: 1. training dataset: a labeled dataset to train the model 2. testing dataset: tweet with a unique id to evaluate the trained-model for the training dataset, each line contains a json object with the following columns: * label: sarcasm or not_sarcasm * response: the classified tweet * context: the conversation context of the response for the testing/evaluation dataset, each line contains a json object with the following columns: * id: unique identifier for the sample * response: the tweet to be classified * context: the conversation context of the response training dataset testing dataset 5000 lines 1800 lines table 2: dataset size statistics a more detailed dataset description is available in the project competition github repository (link). d. the naive approach i hypothesize the context does not always support the sentiment of a response. context can have an opposing effect on the sentiment of a response. i hypothesize there are 2 types of context: 1. a positive context is a context that supports the sentiment of a response. 2. a negative context is a context that does not support the sentiment of a response. fig.1: illustration of context reduces sentiment quality sentiment negative context fig.2: illustration of context increase sentiment quality it is critical to utilize the context to support the response's sentiment. for this project, i consider only the sentiment-labeled response to training the model, and i completely ignore the context. i call this a naive approach. in the future project, i can use advanced machine learning techniques to utilize response and context to train the model by selectively reconstruct the context to support the sentiment of a response. e. the model, training, and evaluation in this project, i use the datasets to train and evaluate bert large uncased and base uncased models. i use the original bert paper as a reference (a.3 fine-tuning procedure) to choose hyperparameters for my experiments. the hyperparameters in my experiments are: - learning rate: 2e-5 - batch size: 5 (considering memory size) - epochs: 4 iterations - epsilon: 1e-8 - random seed value: 17 bert model can handle a text with a maximum of 512 characters. if the input text is more than 512 characters, the model truncates the text to 512 characters. response text in training and testing datasets is less than 512 characters, in this case, we are guaranteed to consider all words in the response text to train and evaluate the model. the python source code below prints the response maximum characters for training and testing datasets. positive context s e n t i m e n t fig.3: source code to check maximum training and evaluation response characters length response max. chars training dataset 315 testing dataset 310 table 3: maximum response characters length f. the software code for the software code of this project, i implemented two google colab notebooks: 1. naive_bert_sentiment_analysis.ipynb: training and evaluation notebook (link) 2. demo_model_evaluation.ipynb: evaluation of selected trained-model notebook (for demo purpose) (link) i use the google colab pro environment to implement and test the software code. introduction about google colab is available here link. software code uses the following main python libraries: - numpy 1.18.5 - pytorch 1.7.0+cu101 - huggingface transformers 3.5.0 f.1. naive_bert_sentiment_analysis.ipynb code review this notebook trains and evaluates the bert large uncased and base uncased models using the provided datasets. in the end, the trained-model and evaluation results are copied and stored in the project google drive folder. 1. colab configuration a. install python modules required for the notebook. b. copy train.jsonl and test.jsonl files from google drive to colab session i have already copied train.jsonl and test.jsonl files to a google drive account created for this project. the files are shared with the public. the following code will copy the files from google drive to the colab session. the source code above will prompt a url. click the url, it will prompt the google account login page. select the google account to run the notebook: click the ""allow"" button to allow google cloud sdk to access the google account. that finally prompts the verification code. copy the code and paste it in the ""enter verification code"" text box. press ""enter"" that will copy the training and testing datasets to the colab session! we are ready to train and evaluate the model using the datasets. 2. mounting google drive to colab session (to save result files) to save the result files (the trained-model and answer.txt) to google drive, we need to mount google drive to the colab session. in this project, i mount the google drive directory to the './content/uiuc' folder. at the end of this notebook code execution, the google drive mounted folder in the colab session will look like the following: mounted google drive in colab session where to keep result files permanently 3. the main python class this project implements a python class, bert_model, that handles the following tasks: o read the dataset from jsonl files into a list of json o convert list of json to pandas dataframe o create the bert model o run the training and save the model for each epoch o evaluate the model and store the result into a file below are the class signatures: for details please check the source code here link. the source code comment describes what each step does. the main algorithm of the training: 1. create a bert tokenizer. we use the tokenizer to encode the text and prepare the dataset. 2. create a bert model using the chosen hyperparameter. 3. create adamw optimizer (link), it is used to calculate the convergence in the model. it is considered the fastest convergence algorithm. 4. create a data loader. the data loader main task is passing dataset batch to model. it will make sure all the text in the dataset is processed by the model. 5. set the model to train mode. iterate the data loader to pass the dataset batch to the model until the training is completed. 6. after the training is completed, save the trained model to a file. the main algorithm of testing: 1. load the model file to the memory and set the model to evaluation mode. 2. create the tokenizer, encode the input data for testing, and prepare the dataset. 3. create the data loader to handle the evaluation batch. 4. run the evaluation. one of the most important outputs from the model is logits. in this project, logits is an array of two elements. the model is configured to have the first element of logits represents sarcasm, and the second element represents not_sarcasm. 5. we use the numpy argmax function to return the index of the maximum value in logits. o if the maximum value is the first element, the function returns the index array of 0 (sarcasm) o if the maximum value is the second element, the function returns the index array of 1 (not_sarcasm) 6. the final step is to write the output to a file (answer.txt) 4. training and evaluation experiments to test my naive hypothesis, i run experiments with the same hyperparameters on two bert models. 1. experiment-1: bert base uncased 2. experiment-2: bert large uncased both experiments code above will generate result files in the colab session folder below: 5. save the result files to google drive colab deletes result files when the session ends. we need to store the files permanently in other locations, in this project i use google drive. the code below will copy the result files to the project google drive folder (the google drive folder has been mounted in the earlier step). in this project, i save the epoch # 4 model file only. we use the files stored in the project google drive folder to run a project demo. the next section will illustrate how to use the trained-model file to evaluate the testing dataset. f.2. demo_model_evaluation.ipynb code review in the demo notebook, i demonstrate how to generate 'answer.txt' from the bert large uncased trained model stored in the project google drive folder. the trained-model is available to the public here link. with this model, we will reproduce the evaluation result which is available to the public here link. the demo video is available here link. the main algorithm in the notebook demo: 1. the first 3-steps are already explained in detail in the previous section * colab configuration (python modules import and installation) * copy the trained-model and testing dataset files from google drive to the colab session. we need to authorize colab to access the google account described in the previous section. * prepare panda dataframe for the testing dataset. 2. preparing the encoded testing dataset and data loader the main steps: * create the bert tokenizer to encode the testing dataset. * create the data loader to run the evaluation in batches. preparing the python objects for the evaluation 3. run the evaluation batch iteration the main steps: * set the device to gpu, if applicable. * load the trained model from file to memory. * set the model to evaluation mode. * data loader iteration to pass text to evaluate in batches to the model. * the model output logits (how to process logits is described in the previous section) 4. generate the 'anwer.txt' file generate the sentiment output to the screen and 'answer.txt' file. the previous section describes the source code snippet. 5. post 'answer.txt' to livedatalab for scoring for f1, precision, and recall scores evaluation, i post the 'answer.txt' to livedatalab. leaderboard snapshot on 03-nov-2020 g. result and conclusion in summary, the testing (evaluation) results from bert large and base models: model f1-score recall precision bert large uncased 0.757905138339921 0.8522222222222222 0.6823843416370107 bert base uncased 0.7458777885548012 0.8544444444444445 0.6617900172117039 surprisingly, the base model performs almost as good as the large model. in this project, i did try to use different trained model such as roberta and xlnet (and different hyperparameters), but i could not produce a result higher than bert large uncased score. the project scope as proposed in the project proposal is to explore bert hence, i am reporting the result for bert models only. in the future, i would like to explore more on the following topics: * to use advanced machine learning techniques to explore other hyperparameters for bert models. * to utilize both the context and response to training the models. i hypothesize that the context can be used as an additional dataset to train the model. * to explore another model, such as roberta and xlnet. reference 1. aditya joshi, pushpak bhattacharyya, and mark j. car- man. 2017. automatic sarcasm detection: a survey. acm computing surveys, 50(5):1-22. 2. jacob devlin, ming-wei chang, kenton lee, and kristina toutanova. 2019. bert: pre-training of deep bidirectional transformers for language understanding. appendix 1. answer.txt twitter_1,not_sarcasm twitter_2,sarcasm twitter_3,sarcasm twitter_4,not_sarcasm twitter_5,sarcasm twitter_6,sarcasm twitter_7,not_sarcasm twitter_8,sarcasm twitter_9,not_sarcasm twitter_10,sarcasm twitter_11,not_sarcasm twitter_12,sarcasm twitter_13,sarcasm twitter_14,not_sarcasm twitter_15,sarcasm twitter_16,sarcasm twitter_17,sarcasm twitter_18,sarcasm twitter_19,sarcasm twitter_20,not_sarcasm twitter_21,not_sarcasm twitter_22,sarcasm twitter_23,not_sarcasm twitter_24,sarcasm twitter_25,sarcasm twitter_26,sarcasm twitter_27,not_sarcasm twitter_28,not_sarcasm twitter_29,sarcasm twitter_30,not_sarcasm twitter_31,sarcasm twitter_32,not_sarcasm twitter_33,not_sarcasm twitter_34,sarcasm twitter_35,not_sarcasm twitter_36,sarcasm twitter_37,sarcasm twitter_38,sarcasm twitter_39,sarcasm twitter_40,sarcasm twitter_41,sarcasm twitter_42,not_sarcasm twitter_43,sarcasm twitter_44,not_sarcasm twitter_45,sarcasm twitter_46,not_sarcasm twitter_47,sarcasm twitter_48,sarcasm twitter_49,not_sarcasm twitter_50,sarcasm twitter_51,not_sarcasm twitter_52,not_sarcasm twitter_53,sarcasm twitter_54,sarcasm twitter_55,sarcasm twitter_56,sarcasm twitter_57,not_sarcasm twitter_58,not_sarcasm twitter_59,sarcasm twitter_60,sarcasm twitter_61,not_sarcasm twitter_62,sarcasm twitter_63,sarcasm twitter_64,sarcasm twitter_65,sarcasm twitter_66,not_sarcasm twitter_67,sarcasm twitter_68,not_sarcasm twitter_69,sarcasm twitter_70,sarcasm twitter_71,not_sarcasm twitter_72,sarcasm twitter_73,sarcasm twitter_74,sarcasm twitter_75,not_sarcasm twitter_76,not_sarcasm twitter_77,sarcasm twitter_78,sarcasm twitter_79,not_sarcasm twitter_80,sarcasm twitter_81,not_sarcasm twitter_82,not_sarcasm twitter_83,sarcasm twitter_84,not_sarcasm twitter_85,sarcasm twitter_86,sarcasm twitter_87,not_sarcasm twitter_88,sarcasm twitter_89,sarcasm twitter_90,not_sarcasm twitter_91,not_sarcasm twitter_92,sarcasm twitter_93,sarcasm twitter_94,sarcasm twitter_95,sarcasm twitter_96,sarcasm twitter_97,sarcasm twitter_98,not_sarcasm twitter_99,not_sarcasm twitter_100,not_sarcasm twitter_101,sarcasm twitter_102,sarcasm twitter_103,not_sarcasm twitter_104,not_sarcasm twitter_105,sarcasm twitter_106,sarcasm twitter_107,not_sarcasm twitter_108,not_sarcasm twitter_109,sarcasm twitter_110,sarcasm twitter_111,sarcasm twitter_112,sarcasm twitter_113,sarcasm twitter_114,sarcasm twitter_115,sarcasm twitter_116,not_sarcasm twitter_117,not_sarcasm twitter_118,sarcasm twitter_119,not_sarcasm twitter_120,not_sarcasm twitter_121,sarcasm twitter_122,sarcasm twitter_123,not_sarcasm twitter_124,sarcasm twitter_125,not_sarcasm twitter_126,not_sarcasm twitter_127,sarcasm twitter_128,not_sarcasm twitter_129,not_sarcasm twitter_130,sarcasm twitter_131,not_sarcasm twitter_132,sarcasm twitter_133,not_sarcasm twitter_134,not_sarcasm twitter_135,sarcasm twitter_136,not_sarcasm twitter_137,sarcasm twitter_138,not_sarcasm twitter_139,not_sarcasm twitter_140,sarcasm twitter_141,sarcasm twitter_142,sarcasm twitter_143,sarcasm twitter_144,sarcasm twitter_145,sarcasm twitter_146,sarcasm twitter_147,sarcasm twitter_148,sarcasm twitter_149,sarcasm twitter_150,sarcasm twitter_151,sarcasm twitter_152,not_sarcasm twitter_153,not_sarcasm twitter_154,sarcasm twitter_155,sarcasm twitter_156,not_sarcasm twitter_157,sarcasm twitter_158,sarcasm twitter_159,sarcasm twitter_160,sarcasm twitter_161,not_sarcasm twitter_162,sarcasm twitter_163,sarcasm twitter_164,sarcasm twitter_165,sarcasm twitter_166,sarcasm twitter_167,sarcasm twitter_168,sarcasm twitter_169,not_sarcasm twitter_170,not_sarcasm twitter_171,not_sarcasm twitter_172,not_sarcasm twitter_173,sarcasm twitter_174,sarcasm twitter_175,sarcasm twitter_176,sarcasm twitter_177,sarcasm twitter_178,not_sarcasm twitter_179,sarcasm twitter_180,sarcasm twitter_181,sarcasm twitter_182,not_sarcasm twitter_183,sarcasm twitter_184,sarcasm twitter_185,not_sarcasm twitter_186,sarcasm twitter_187,sarcasm twitter_188,sarcasm twitter_189,not_sarcasm twitter_190,not_sarcasm twitter_191,not_sarcasm twitter_192,not_sarcasm twitter_193,sarcasm twitter_194,not_sarcasm twitter_195,not_sarcasm twitter_196,sarcasm twitter_197,not_sarcasm twitter_198,sarcasm twitter_199,sarcasm twitter_200,sarcasm twitter_201,sarcasm twitter_202,sarcasm twitter_203,not_sarcasm twitter_204,not_sarcasm twitter_205,sarcasm twitter_206,not_sarcasm twitter_207,sarcasm twitter_208,sarcasm twitter_209,sarcasm twitter_210,sarcasm twitter_211,sarcasm twitter_212,not_sarcasm twitter_213,not_sarcasm twitter_214,not_sarcasm twitter_215,not_sarcasm twitter_216,sarcasm twitter_217,sarcasm twitter_218,sarcasm twitter_219,sarcasm twitter_220,sarcasm twitter_221,sarcasm twitter_222,not_sarcasm twitter_223,not_sarcasm twitter_224,sarcasm twitter_225,not_sarcasm twitter_226,sarcasm twitter_227,not_sarcasm twitter_228,not_sarcasm twitter_229,sarcasm twitter_230,not_sarcasm twitter_231,sarcasm twitter_232,sarcasm twitter_233,sarcasm twitter_234,not_sarcasm twitter_235,sarcasm twitter_236,not_sarcasm twitter_237,sarcasm twitter_238,not_sarcasm twitter_239,sarcasm twitter_240,sarcasm twitter_241,sarcasm twitter_242,sarcasm twitter_243,not_sarcasm twitter_244,not_sarcasm twitter_245,not_sarcasm twitter_246,not_sarcasm twitter_247,sarcasm twitter_248,sarcasm twitter_249,sarcasm twitter_250,sarcasm twitter_251,sarcasm twitter_252,sarcasm twitter_253,not_sarcasm twitter_254,not_sarcasm twitter_255,sarcasm twitter_256,not_sarcasm twitter_257,not_sarcasm twitter_258,sarcasm twitter_259,sarcasm twitter_260,sarcasm twitter_261,not_sarcasm twitter_262,sarcasm twitter_263,not_sarcasm twitter_264,sarcasm twitter_265,sarcasm twitter_266,sarcasm twitter_267,sarcasm twitter_268,not_sarcasm twitter_269,sarcasm twitter_270,not_sarcasm twitter_271,not_sarcasm twitter_272,not_sarcasm twitter_273,not_sarcasm twitter_274,sarcasm twitter_275,sarcasm twitter_276,not_sarcasm twitter_277,not_sarcasm twitter_278,sarcasm twitter_279,sarcasm twitter_280,not_sarcasm twitter_281,sarcasm twitter_282,not_sarcasm twitter_283,sarcasm twitter_284,sarcasm twitter_285,not_sarcasm twitter_286,not_sarcasm twitter_287,not_sarcasm twitter_288,not_sarcasm twitter_289,not_sarcasm twitter_290,sarcasm twitter_291,sarcasm twitter_292,sarcasm twitter_293,sarcasm twitter_294,sarcasm twitter_295,not_sarcasm twitter_296,sarcasm twitter_297,sarcasm twitter_298,sarcasm twitter_299,sarcasm twitter_300,not_sarcasm twitter_301,sarcasm twitter_302,not_sarcasm twitter_303,sarcasm twitter_304,sarcasm twitter_305,not_sarcasm twitter_306,sarcasm twitter_307,not_sarcasm twitter_308,sarcasm twitter_309,sarcasm twitter_310,not_sarcasm twitter_311,sarcasm twitter_312,not_sarcasm twitter_313,sarcasm twitter_314,not_sarcasm twitter_315,sarcasm twitter_316,sarcasm twitter_317,not_sarcasm twitter_318,not_sarcasm twitter_319,sarcasm twitter_320,sarcasm twitter_321,not_sarcasm twitter_322,not_sarcasm twitter_323,not_sarcasm twitter_324,sarcasm twitter_325,not_sarcasm twitter_326,not_sarcasm twitter_327,sarcasm twitter_328,not_sarcasm twitter_329,sarcasm twitter_330,sarcasm twitter_331,sarcasm twitter_332,sarcasm twitter_333,sarcasm twitter_334,not_sarcasm twitter_335,not_sarcasm twitter_336,sarcasm twitter_337,not_sarcasm twitter_338,sarcasm twitter_339,not_sarcasm twitter_340,sarcasm twitter_341,not_sarcasm twitter_342,sarcasm twitter_343,sarcasm twitter_344,not_sarcasm twitter_345,sarcasm twitter_346,not_sarcasm twitter_347,sarcasm twitter_348,sarcasm twitter_349,sarcasm twitter_350,sarcasm twitter_351,sarcasm twitter_352,sarcasm twitter_353,not_sarcasm twitter_354,sarcasm twitter_355,sarcasm twitter_356,sarcasm twitter_357,sarcasm twitter_358,not_sarcasm twitter_359,sarcasm twitter_360,not_sarcasm twitter_361,sarcasm twitter_362,sarcasm twitter_363,sarcasm twitter_364,sarcasm twitter_365,not_sarcasm twitter_366,sarcasm twitter_367,sarcasm twitter_368,sarcasm twitter_369,not_sarcasm twitter_370,not_sarcasm twitter_371,sarcasm twitter_372,sarcasm twitter_373,sarcasm twitter_374,not_sarcasm twitter_375,sarcasm twitter_376,not_sarcasm twitter_377,sarcasm twitter_378,not_sarcasm twitter_379,not_sarcasm twitter_380,sarcasm twitter_381,sarcasm twitter_382,not_sarcasm twitter_383,sarcasm twitter_384,not_sarcasm twitter_385,not_sarcasm twitter_386,sarcasm twitter_387,sarcasm twitter_388,sarcasm twitter_389,not_sarcasm twitter_390,not_sarcasm twitter_391,sarcasm twitter_392,sarcasm twitter_393,not_sarcasm twitter_394,sarcasm twitter_395,sarcasm twitter_396,sarcasm twitter_397,not_sarcasm twitter_398,not_sarcasm twitter_399,sarcasm twitter_400,sarcasm twitter_401,sarcasm twitter_402,not_sarcasm twitter_403,sarcasm twitter_404,not_sarcasm twitter_405,not_sarcasm twitter_406,sarcasm twitter_407,sarcasm twitter_408,sarcasm twitter_409,sarcasm twitter_410,sarcasm twitter_411,sarcasm twitter_412,not_sarcasm twitter_413,sarcasm twitter_414,sarcasm twitter_415,sarcasm twitter_416,sarcasm twitter_417,sarcasm twitter_418,sarcasm twitter_419,not_sarcasm twitter_420,not_sarcasm twitter_421,sarcasm twitter_422,not_sarcasm twitter_423,sarcasm twitter_424,sarcasm twitter_425,sarcasm twitter_426,not_sarcasm twitter_427,sarcasm twitter_428,sarcasm twitter_429,not_sarcasm twitter_430,sarcasm twitter_431,sarcasm twitter_432,sarcasm twitter_433,sarcasm twitter_434,sarcasm twitter_435,not_sarcasm twitter_436,sarcasm twitter_437,sarcasm twitter_438,not_sarcasm twitter_439,not_sarcasm twitter_440,sarcasm twitter_441,sarcasm twitter_442,sarcasm twitter_443,sarcasm twitter_444,sarcasm twitter_445,sarcasm twitter_446,sarcasm twitter_447,sarcasm twitter_448,sarcasm twitter_449,sarcasm twitter_450,not_sarcasm twitter_451,not_sarcasm twitter_452,not_sarcasm twitter_453,sarcasm twitter_454,sarcasm twitter_455,not_sarcasm twitter_456,not_sarcasm twitter_457,sarcasm twitter_458,sarcasm twitter_459,sarcasm twitter_460,sarcasm twitter_461,sarcasm twitter_462,sarcasm twitter_463,sarcasm twitter_464,sarcasm twitter_465,not_sarcasm twitter_466,sarcasm twitter_467,not_sarcasm twitter_468,sarcasm twitter_469,sarcasm twitter_470,sarcasm twitter_471,sarcasm twitter_472,sarcasm twitter_473,not_sarcasm twitter_474,sarcasm twitter_475,not_sarcasm twitter_476,sarcasm twitter_477,not_sarcasm twitter_478,sarcasm twitter_479,sarcasm twitter_480,sarcasm twitter_481,not_sarcasm twitter_482,not_sarcasm twitter_483,not_sarcasm twitter_484,sarcasm twitter_485,not_sarcasm twitter_486,sarcasm twitter_487,not_sarcasm twitter_488,sarcasm twitter_489,sarcasm twitter_490,not_sarcasm twitter_491,not_sarcasm twitter_492,not_sarcasm twitter_493,sarcasm twitter_494,sarcasm twitter_495,sarcasm twitter_496,sarcasm twitter_497,not_sarcasm twitter_498,sarcasm twitter_499,sarcasm twitter_500,sarcasm twitter_501,sarcasm twitter_502,sarcasm twitter_503,sarcasm twitter_504,sarcasm twitter_505,sarcasm twitter_506,sarcasm twitter_507,sarcasm twitter_508,not_sarcasm twitter_509,not_sarcasm twitter_510,sarcasm twitter_511,not_sarcasm twitter_512,not_sarcasm twitter_513,sarcasm twitter_514,sarcasm twitter_515,not_sarcasm twitter_516,not_sarcasm twitter_517,sarcasm twitter_518,sarcasm twitter_519,not_sarcasm twitter_520,sarcasm twitter_521,sarcasm twitter_522,sarcasm twitter_523,not_sarcasm twitter_524,sarcasm twitter_525,sarcasm twitter_526,sarcasm twitter_527,sarcasm twitter_528,sarcasm twitter_529,not_sarcasm twitter_530,not_sarcasm twitter_531,not_sarcasm twitter_532,sarcasm twitter_533,not_sarcasm twitter_534,sarcasm twitter_535,sarcasm twitter_536,sarcasm twitter_537,not_sarcasm twitter_538,not_sarcasm twitter_539,sarcasm twitter_540,sarcasm twitter_541,sarcasm twitter_542,sarcasm twitter_543,not_sarcasm twitter_544,not_sarcasm twitter_545,sarcasm twitter_546,sarcasm twitter_547,sarcasm twitter_548,not_sarcasm twitter_549,not_sarcasm twitter_550,sarcasm twitter_551,sarcasm twitter_552,not_sarcasm twitter_553,sarcasm twitter_554,sarcasm twitter_555,not_sarcasm twitter_556,sarcasm twitter_557,sarcasm twitter_558,sarcasm twitter_559,sarcasm twitter_560,sarcasm twitter_561,not_sarcasm twitter_562,sarcasm twitter_563,sarcasm twitter_564,sarcasm twitter_565,sarcasm twitter_566,sarcasm twitter_567,sarcasm twitter_568,sarcasm twitter_569,not_sarcasm twitter_570,sarcasm twitter_571,sarcasm twitter_572,sarcasm twitter_573,sarcasm twitter_574,sarcasm twitter_575,not_sarcasm twitter_576,sarcasm twitter_577,sarcasm twitter_578,not_sarcasm twitter_579,not_sarcasm twitter_580,not_sarcasm twitter_581,not_sarcasm twitter_582,not_sarcasm twitter_583,sarcasm twitter_584,sarcasm twitter_585,sarcasm twitter_586,sarcasm twitter_587,sarcasm twitter_588,sarcasm twitter_589,not_sarcasm twitter_590,not_sarcasm twitter_591,sarcasm twitter_592,sarcasm twitter_593,not_sarcasm twitter_594,sarcasm twitter_595,sarcasm twitter_596,not_sarcasm twitter_597,not_sarcasm twitter_598,sarcasm twitter_599,not_sarcasm twitter_600,sarcasm twitter_601,not_sarcasm twitter_602,sarcasm twitter_603,not_sarcasm twitter_604,sarcasm twitter_605,not_sarcasm twitter_606,not_sarcasm twitter_607,sarcasm twitter_608,sarcasm twitter_609,not_sarcasm twitter_610,not_sarcasm twitter_611,not_sarcasm twitter_612,sarcasm twitter_613,sarcasm twitter_614,not_sarcasm twitter_615,not_sarcasm twitter_616,sarcasm twitter_617,sarcasm twitter_618,not_sarcasm twitter_619,sarcasm twitter_620,not_sarcasm twitter_621,sarcasm twitter_622,not_sarcasm twitter_623,sarcasm twitter_624,not_sarcasm twitter_625,sarcasm twitter_626,sarcasm twitter_627,not_sarcasm twitter_628,not_sarcasm twitter_629,sarcasm twitter_630,sarcasm twitter_631,not_sarcasm twitter_632,sarcasm twitter_633,not_sarcasm twitter_634,sarcasm twitter_635,sarcasm twitter_636,not_sarcasm twitter_637,sarcasm twitter_638,not_sarcasm twitter_639,sarcasm twitter_640,not_sarcasm twitter_641,not_sarcasm twitter_642,sarcasm twitter_643,sarcasm twitter_644,sarcasm twitter_645,not_sarcasm twitter_646,not_sarcasm twitter_647,not_sarcasm twitter_648,not_sarcasm twitter_649,sarcasm twitter_650,not_sarcasm twitter_651,sarcasm twitter_652,not_sarcasm twitter_653,not_sarcasm twitter_654,sarcasm twitter_655,not_sarcasm twitter_656,not_sarcasm twitter_657,sarcasm twitter_658,not_sarcasm twitter_659,sarcasm twitter_660,sarcasm twitter_661,sarcasm twitter_662,sarcasm twitter_663,not_sarcasm twitter_664,sarcasm twitter_665,not_sarcasm twitter_666,not_sarcasm twitter_667,sarcasm twitter_668,sarcasm twitter_669,sarcasm twitter_670,not_sarcasm twitter_671,sarcasm twitter_672,sarcasm twitter_673,sarcasm twitter_674,sarcasm twitter_675,sarcasm twitter_676,not_sarcasm twitter_677,not_sarcasm twitter_678,sarcasm twitter_679,sarcasm twitter_680,not_sarcasm twitter_681,not_sarcasm twitter_682,sarcasm twitter_683,not_sarcasm twitter_684,not_sarcasm twitter_685,sarcasm twitter_686,sarcasm twitter_687,not_sarcasm twitter_688,sarcasm twitter_689,sarcasm twitter_690,sarcasm twitter_691,not_sarcasm twitter_692,sarcasm twitter_693,sarcasm twitter_694,not_sarcasm twitter_695,sarcasm twitter_696,not_sarcasm twitter_697,sarcasm twitter_698,not_sarcasm twitter_699,not_sarcasm twitter_700,not_sarcasm twitter_701,sarcasm twitter_702,not_sarcasm twitter_703,sarcasm twitter_704,sarcasm twitter_705,not_sarcasm twitter_706,sarcasm twitter_707,not_sarcasm twitter_708,sarcasm twitter_709,not_sarcasm twitter_710,sarcasm twitter_711,sarcasm twitter_712,sarcasm twitter_713,sarcasm twitter_714,sarcasm twitter_715,sarcasm twitter_716,sarcasm twitter_717,sarcasm twitter_718,sarcasm twitter_719,not_sarcasm twitter_720,not_sarcasm twitter_721,sarcasm twitter_722,not_sarcasm twitter_723,sarcasm twitter_724,sarcasm twitter_725,sarcasm twitter_726,not_sarcasm twitter_727,not_sarcasm twitter_728,sarcasm twitter_729,sarcasm twitter_730,sarcasm twitter_731,not_sarcasm twitter_732,sarcasm twitter_733,not_sarcasm twitter_734,not_sarcasm twitter_735,sarcasm twitter_736,sarcasm twitter_737,sarcasm twitter_738,sarcasm twitter_739,sarcasm twitter_740,sarcasm twitter_741,sarcasm twitter_742,sarcasm twitter_743,sarcasm twitter_744,not_sarcasm twitter_745,not_sarcasm twitter_746,sarcasm twitter_747,sarcasm twitter_748,not_sarcasm twitter_749,not_sarcasm twitter_750,not_sarcasm twitter_751,sarcasm twitter_752,not_sarcasm twitter_753,sarcasm twitter_754,sarcasm twitter_755,not_sarcasm twitter_756,sarcasm twitter_757,not_sarcasm twitter_758,not_sarcasm twitter_759,sarcasm twitter_760,sarcasm twitter_761,not_sarcasm twitter_762,sarcasm twitter_763,not_sarcasm twitter_764,sarcasm twitter_765,sarcasm twitter_766,sarcasm twitter_767,sarcasm twitter_768,not_sarcasm twitter_769,not_sarcasm twitter_770,not_sarcasm twitter_771,sarcasm twitter_772,not_sarcasm twitter_773,sarcasm twitter_774,not_sarcasm twitter_775,sarcasm twitter_776,sarcasm twitter_777,not_sarcasm twitter_778,sarcasm twitter_779,not_sarcasm twitter_780,sarcasm twitter_781,not_sarcasm twitter_782,not_sarcasm twitter_783,sarcasm twitter_784,sarcasm twitter_785,not_sarcasm twitter_786,sarcasm twitter_787,sarcasm twitter_788,not_sarcasm twitter_789,sarcasm twitter_790,sarcasm twitter_791,not_sarcasm twitter_792,not_sarcasm twitter_793,sarcasm twitter_794,not_sarcasm twitter_795,sarcasm twitter_796,sarcasm twitter_797,sarcasm twitter_798,sarcasm twitter_799,sarcasm twitter_800,not_sarcasm twitter_801,not_sarcasm twitter_802,not_sarcasm twitter_803,sarcasm twitter_804,not_sarcasm twitter_805,sarcasm twitter_806,sarcasm twitter_807,not_sarcasm twitter_808,sarcasm twitter_809,sarcasm twitter_810,not_sarcasm twitter_811,sarcasm twitter_812,sarcasm twitter_813,sarcasm twitter_814,sarcasm twitter_815,sarcasm twitter_816,sarcasm twitter_817,sarcasm twitter_818,not_sarcasm twitter_819,sarcasm twitter_820,not_sarcasm twitter_821,not_sarcasm twitter_822,not_sarcasm twitter_823,sarcasm twitter_824,not_sarcasm twitter_825,not_sarcasm twitter_826,sarcasm twitter_827,sarcasm twitter_828,not_sarcasm twitter_829,sarcasm twitter_830,sarcasm twitter_831,not_sarcasm twitter_832,not_sarcasm twitter_833,not_sarcasm twitter_834,not_sarcasm twitter_835,sarcasm twitter_836,sarcasm twitter_837,sarcasm twitter_838,sarcasm twitter_839,sarcasm twitter_840,sarcasm twitter_841,sarcasm twitter_842,sarcasm twitter_843,sarcasm twitter_844,sarcasm twitter_845,not_sarcasm twitter_846,not_sarcasm twitter_847,sarcasm twitter_848,not_sarcasm twitter_849,not_sarcasm twitter_850,sarcasm twitter_851,sarcasm twitter_852,not_sarcasm twitter_853,not_sarcasm twitter_854,not_sarcasm twitter_855,not_sarcasm twitter_856,sarcasm twitter_857,sarcasm twitter_858,sarcasm twitter_859,not_sarcasm twitter_860,not_sarcasm twitter_861,not_sarcasm twitter_862,not_sarcasm twitter_863,sarcasm twitter_864,not_sarcasm twitter_865,sarcasm twitter_866,sarcasm twitter_867,sarcasm twitter_868,sarcasm twitter_869,sarcasm twitter_870,sarcasm twitter_871,sarcasm twitter_872,not_sarcasm twitter_873,sarcasm twitter_874,not_sarcasm twitter_875,not_sarcasm twitter_876,not_sarcasm twitter_877,not_sarcasm twitter_878,sarcasm twitter_879,not_sarcasm twitter_880,sarcasm twitter_881,not_sarcasm twitter_882,not_sarcasm twitter_883,sarcasm twitter_884,sarcasm twitter_885,sarcasm twitter_886,sarcasm twitter_887,not_sarcasm twitter_888,sarcasm twitter_889,not_sarcasm twitter_890,sarcasm twitter_891,sarcasm twitter_892,not_sarcasm twitter_893,sarcasm twitter_894,not_sarcasm twitter_895,sarcasm twitter_896,not_sarcasm twitter_897,not_sarcasm twitter_898,sarcasm twitter_899,sarcasm twitter_900,not_sarcasm twitter_901,sarcasm twitter_902,sarcasm twitter_903,sarcasm twitter_904,sarcasm twitter_905,sarcasm twitter_906,sarcasm twitter_907,sarcasm twitter_908,sarcasm twitter_909,sarcasm twitter_910,not_sarcasm twitter_911,not_sarcasm twitter_912,not_sarcasm twitter_913,sarcasm twitter_914,sarcasm twitter_915,sarcasm twitter_916,sarcasm twitter_917,sarcasm twitter_918,not_sarcasm twitter_919,sarcasm twitter_920,not_sarcasm twitter_921,sarcasm twitter_922,sarcasm twitter_923,not_sarcasm twitter_924,sarcasm twitter_925,not_sarcasm twitter_926,not_sarcasm twitter_927,not_sarcasm twitter_928,not_sarcasm twitter_929,not_sarcasm twitter_930,not_sarcasm twitter_931,sarcasm twitter_932,sarcasm twitter_933,not_sarcasm twitter_934,not_sarcasm twitter_935,sarcasm twitter_936,sarcasm twitter_937,sarcasm twitter_938,sarcasm twitter_939,sarcasm twitter_940,sarcasm twitter_941,sarcasm twitter_942,not_sarcasm twitter_943,not_sarcasm twitter_944,sarcasm twitter_945,sarcasm twitter_946,sarcasm twitter_947,not_sarcasm twitter_948,sarcasm twitter_949,sarcasm twitter_950,sarcasm twitter_951,not_sarcasm twitter_952,sarcasm twitter_953,not_sarcasm twitter_954,sarcasm twitter_955,sarcasm twitter_956,sarcasm twitter_957,sarcasm twitter_958,sarcasm twitter_959,not_sarcasm twitter_960,sarcasm twitter_961,sarcasm twitter_962,sarcasm twitter_963,not_sarcasm twitter_964,not_sarcasm twitter_965,sarcasm twitter_966,sarcasm twitter_967,sarcasm twitter_968,sarcasm twitter_969,sarcasm twitter_970,sarcasm twitter_971,sarcasm twitter_972,not_sarcasm twitter_973,sarcasm twitter_974,not_sarcasm twitter_975,sarcasm twitter_976,not_sarcasm twitter_977,sarcasm twitter_978,sarcasm twitter_979,sarcasm twitter_980,sarcasm twitter_981,sarcasm twitter_982,not_sarcasm twitter_983,sarcasm twitter_984,sarcasm twitter_985,sarcasm twitter_986,not_sarcasm twitter_987,not_sarcasm twitter_988,sarcasm twitter_989,not_sarcasm twitter_990,not_sarcasm twitter_991,sarcasm twitter_992,sarcasm twitter_993,sarcasm twitter_994,sarcasm twitter_995,sarcasm twitter_996,sarcasm twitter_997,sarcasm twitter_998,sarcasm twitter_999,not_sarcasm twitter_1000,not_sarcasm twitter_1001,not_sarcasm twitter_1002,sarcasm twitter_1003,sarcasm twitter_1004,sarcasm twitter_1005,sarcasm twitter_1006,sarcasm twitter_1007,sarcasm twitter_1008,not_sarcasm twitter_1009,not_sarcasm twitter_1010,sarcasm twitter_1011,not_sarcasm twitter_1012,sarcasm twitter_1013,sarcasm twitter_1014,sarcasm twitter_1015,not_sarcasm twitter_1016,not_sarcasm twitter_1017,not_sarcasm twitter_1018,sarcasm twitter_1019,not_sarcasm twitter_1020,sarcasm twitter_1021,not_sarcasm twitter_1022,not_sarcasm twitter_1023,sarcasm twitter_1024,sarcasm twitter_1025,not_sarcasm twitter_1026,not_sarcasm twitter_1027,sarcasm twitter_1028,sarcasm twitter_1029,not_sarcasm twitter_1030,sarcasm twitter_1031,not_sarcasm twitter_1032,not_sarcasm twitter_1033,not_sarcasm twitter_1034,sarcasm twitter_1035,not_sarcasm twitter_1036,sarcasm twitter_1037,not_sarcasm twitter_1038,sarcasm twitter_1039,sarcasm twitter_1040,sarcasm twitter_1041,not_sarcasm twitter_1042,sarcasm twitter_1043,sarcasm twitter_1044,not_sarcasm twitter_1045,sarcasm twitter_1046,sarcasm twitter_1047,not_sarcasm twitter_1048,sarcasm twitter_1049,not_sarcasm twitter_1050,sarcasm twitter_1051,not_sarcasm twitter_1052,not_sarcasm twitter_1053,sarcasm twitter_1054,sarcasm twitter_1055,not_sarcasm twitter_1056,sarcasm twitter_1057,not_sarcasm twitter_1058,sarcasm twitter_1059,sarcasm twitter_1060,not_sarcasm twitter_1061,sarcasm twitter_1062,sarcasm twitter_1063,not_sarcasm twitter_1064,not_sarcasm twitter_1065,sarcasm twitter_1066,not_sarcasm twitter_1067,sarcasm twitter_1068,not_sarcasm twitter_1069,sarcasm twitter_1070,sarcasm twitter_1071,sarcasm twitter_1072,not_sarcasm twitter_1073,not_sarcasm twitter_1074,sarcasm twitter_1075,not_sarcasm twitter_1076,sarcasm twitter_1077,not_sarcasm twitter_1078,sarcasm twitter_1079,sarcasm twitter_1080,sarcasm twitter_1081,sarcasm twitter_1082,not_sarcasm twitter_1083,sarcasm twitter_1084,sarcasm twitter_1085,sarcasm twitter_1086,sarcasm twitter_1087,not_sarcasm twitter_1088,not_sarcasm twitter_1089,not_sarcasm twitter_1090,not_sarcasm twitter_1091,sarcasm twitter_1092,sarcasm twitter_1093,not_sarcasm twitter_1094,not_sarcasm twitter_1095,sarcasm twitter_1096,not_sarcasm twitter_1097,not_sarcasm twitter_1098,not_sarcasm twitter_1099,not_sarcasm twitter_1100,sarcasm twitter_1101,sarcasm twitter_1102,sarcasm twitter_1103,sarcasm twitter_1104,sarcasm twitter_1105,sarcasm twitter_1106,not_sarcasm twitter_1107,sarcasm twitter_1108,sarcasm twitter_1109,sarcasm twitter_1110,not_sarcasm twitter_1111,sarcasm twitter_1112,sarcasm twitter_1113,sarcasm twitter_1114,not_sarcasm twitter_1115,sarcasm twitter_1116,sarcasm twitter_1117,not_sarcasm twitter_1118,not_sarcasm twitter_1119,not_sarcasm twitter_1120,sarcasm twitter_1121,sarcasm twitter_1122,not_sarcasm twitter_1123,sarcasm twitter_1124,sarcasm twitter_1125,sarcasm twitter_1126,not_sarcasm twitter_1127,not_sarcasm twitter_1128,not_sarcasm twitter_1129,not_sarcasm twitter_1130,sarcasm twitter_1131,sarcasm twitter_1132,not_sarcasm twitter_1133,sarcasm twitter_1134,not_sarcasm twitter_1135,not_sarcasm twitter_1136,sarcasm twitter_1137,sarcasm twitter_1138,not_sarcasm twitter_1139,sarcasm twitter_1140,not_sarcasm twitter_1141,sarcasm twitter_1142,sarcasm twitter_1143,sarcasm twitter_1144,sarcasm twitter_1145,sarcasm twitter_1146,not_sarcasm twitter_1147,sarcasm twitter_1148,not_sarcasm twitter_1149,sarcasm twitter_1150,not_sarcasm twitter_1151,not_sarcasm twitter_1152,sarcasm twitter_1153,not_sarcasm twitter_1154,not_sarcasm twitter_1155,sarcasm twitter_1156,sarcasm twitter_1157,sarcasm twitter_1158,sarcasm twitter_1159,sarcasm twitter_1160,not_sarcasm twitter_1161,not_sarcasm twitter_1162,sarcasm twitter_1163,not_sarcasm twitter_1164,sarcasm twitter_1165,not_sarcasm twitter_1166,sarcasm twitter_1167,sarcasm twitter_1168,not_sarcasm twitter_1169,sarcasm twitter_1170,sarcasm twitter_1171,sarcasm twitter_1172,sarcasm twitter_1173,sarcasm twitter_1174,sarcasm twitter_1175,sarcasm twitter_1176,not_sarcasm twitter_1177,not_sarcasm twitter_1178,sarcasm twitter_1179,not_sarcasm twitter_1180,sarcasm twitter_1181,not_sarcasm twitter_1182,not_sarcasm twitter_1183,sarcasm twitter_1184,sarcasm twitter_1185,not_sarcasm twitter_1186,sarcasm twitter_1187,sarcasm twitter_1188,sarcasm twitter_1189,sarcasm twitter_1190,sarcasm twitter_1191,sarcasm twitter_1192,sarcasm twitter_1193,not_sarcasm twitter_1194,not_sarcasm twitter_1195,not_sarcasm twitter_1196,not_sarcasm twitter_1197,not_sarcasm twitter_1198,sarcasm twitter_1199,sarcasm twitter_1200,sarcasm twitter_1201,not_sarcasm twitter_1202,sarcasm twitter_1203,not_sarcasm twitter_1204,not_sarcasm twitter_1205,not_sarcasm twitter_1206,not_sarcasm twitter_1207,sarcasm twitter_1208,sarcasm twitter_1209,not_sarcasm twitter_1210,sarcasm twitter_1211,sarcasm twitter_1212,sarcasm twitter_1213,not_sarcasm twitter_1214,sarcasm twitter_1215,sarcasm twitter_1216,not_sarcasm twitter_1217,not_sarcasm twitter_1218,not_sarcasm twitter_1219,sarcasm twitter_1220,not_sarcasm twitter_1221,sarcasm twitter_1222,sarcasm twitter_1223,not_sarcasm twitter_1224,not_sarcasm twitter_1225,sarcasm twitter_1226,sarcasm twitter_1227,sarcasm twitter_1228,sarcasm twitter_1229,sarcasm twitter_1230,sarcasm twitter_1231,sarcasm twitter_1232,sarcasm twitter_1233,sarcasm twitter_1234,sarcasm twitter_1235,sarcasm twitter_1236,sarcasm twitter_1237,not_sarcasm twitter_1238,sarcasm twitter_1239,not_sarcasm twitter_1240,sarcasm twitter_1241,not_sarcasm twitter_1242,sarcasm twitter_1243,sarcasm twitter_1244,not_sarcasm twitter_1245,not_sarcasm twitter_1246,not_sarcasm twitter_1247,sarcasm twitter_1248,sarcasm twitter_1249,not_sarcasm twitter_1250,not_sarcasm twitter_1251,sarcasm twitter_1252,sarcasm twitter_1253,not_sarcasm twitter_1254,sarcasm twitter_1255,sarcasm twitter_1256,not_sarcasm twitter_1257,sarcasm twitter_1258,not_sarcasm twitter_1259,not_sarcasm twitter_1260,sarcasm twitter_1261,sarcasm twitter_1262,sarcasm twitter_1263,sarcasm twitter_1264,sarcasm twitter_1265,not_sarcasm twitter_1266,not_sarcasm twitter_1267,sarcasm twitter_1268,sarcasm twitter_1269,not_sarcasm twitter_1270,sarcasm twitter_1271,sarcasm twitter_1272,sarcasm twitter_1273,not_sarcasm twitter_1274,sarcasm twitter_1275,sarcasm twitter_1276,not_sarcasm twitter_1277,not_sarcasm twitter_1278,not_sarcasm twitter_1279,not_sarcasm twitter_1280,sarcasm twitter_1281,not_sarcasm twitter_1282,not_sarcasm twitter_1283,sarcasm twitter_1284,not_sarcasm twitter_1285,sarcasm twitter_1286,not_sarcasm twitter_1287,not_sarcasm twitter_1288,sarcasm twitter_1289,sarcasm twitter_1290,sarcasm twitter_1291,sarcasm twitter_1292,sarcasm twitter_1293,sarcasm twitter_1294,not_sarcasm twitter_1295,sarcasm twitter_1296,sarcasm twitter_1297,sarcasm twitter_1298,sarcasm twitter_1299,sarcasm twitter_1300,sarcasm twitter_1301,sarcasm twitter_1302,sarcasm twitter_1303,not_sarcasm twitter_1304,not_sarcasm twitter_1305,sarcasm twitter_1306,not_sarcasm twitter_1307,sarcasm twitter_1308,sarcasm twitter_1309,sarcasm twitter_1310,sarcasm twitter_1311,sarcasm twitter_1312,sarcasm twitter_1313,not_sarcasm twitter_1314,sarcasm twitter_1315,sarcasm twitter_1316,sarcasm twitter_1317,sarcasm twitter_1318,not_sarcasm twitter_1319,not_sarcasm twitter_1320,sarcasm twitter_1321,sarcasm twitter_1322,sarcasm twitter_1323,sarcasm twitter_1324,sarcasm twitter_1325,sarcasm twitter_1326,not_sarcasm twitter_1327,not_sarcasm twitter_1328,not_sarcasm twitter_1329,sarcasm twitter_1330,sarcasm twitter_1331,sarcasm twitter_1332,sarcasm twitter_1333,not_sarcasm twitter_1334,sarcasm twitter_1335,not_sarcasm twitter_1336,not_sarcasm twitter_1337,sarcasm twitter_1338,not_sarcasm twitter_1339,sarcasm twitter_1340,sarcasm twitter_1341,sarcasm twitter_1342,sarcasm twitter_1343,sarcasm twitter_1344,sarcasm twitter_1345,not_sarcasm twitter_1346,sarcasm twitter_1347,sarcasm twitter_1348,sarcasm twitter_1349,sarcasm twitter_1350,sarcasm twitter_1351,sarcasm twitter_1352,not_sarcasm twitter_1353,sarcasm twitter_1354,not_sarcasm twitter_1355,sarcasm twitter_1356,sarcasm twitter_1357,sarcasm twitter_1358,sarcasm twitter_1359,sarcasm twitter_1360,sarcasm twitter_1361,sarcasm twitter_1362,not_sarcasm twitter_1363,sarcasm twitter_1364,not_sarcasm twitter_1365,sarcasm twitter_1366,sarcasm twitter_1367,sarcasm twitter_1368,sarcasm twitter_1369,not_sarcasm twitter_1370,not_sarcasm twitter_1371,not_sarcasm twitter_1372,not_sarcasm twitter_1373,not_sarcasm twitter_1374,sarcasm twitter_1375,not_sarcasm twitter_1376,sarcasm twitter_1377,sarcasm twitter_1378,not_sarcasm twitter_1379,sarcasm twitter_1380,sarcasm twitter_1381,sarcasm twitter_1382,sarcasm twitter_1383,sarcasm twitter_1384,not_sarcasm twitter_1385,sarcasm twitter_1386,not_sarcasm twitter_1387,sarcasm twitter_1388,sarcasm twitter_1389,sarcasm twitter_1390,sarcasm twitter_1391,sarcasm twitter_1392,sarcasm twitter_1393,sarcasm twitter_1394,not_sarcasm twitter_1395,sarcasm twitter_1396,not_sarcasm twitter_1397,sarcasm twitter_1398,sarcasm twitter_1399,sarcasm twitter_1400,not_sarcasm twitter_1401,sarcasm twitter_1402,sarcasm twitter_1403,sarcasm twitter_1404,sarcasm twitter_1405,not_sarcasm twitter_1406,not_sarcasm twitter_1407,sarcasm twitter_1408,sarcasm twitter_1409,sarcasm twitter_1410,sarcasm twitter_1411,sarcasm twitter_1412,not_sarcasm twitter_1413,not_sarcasm twitter_1414,sarcasm twitter_1415,sarcasm twitter_1416,sarcasm twitter_1417,sarcasm twitter_1418,not_sarcasm twitter_1419,not_sarcasm twitter_1420,not_sarcasm twitter_1421,not_sarcasm twitter_1422,not_sarcasm twitter_1423,sarcasm twitter_1424,sarcasm twitter_1425,sarcasm twitter_1426,not_sarcasm twitter_1427,sarcasm twitter_1428,sarcasm twitter_1429,sarcasm twitter_1430,not_sarcasm twitter_1431,not_sarcasm twitter_1432,sarcasm twitter_1433,not_sarcasm twitter_1434,not_sarcasm twitter_1435,sarcasm twitter_1436,sarcasm twitter_1437,sarcasm twitter_1438,sarcasm twitter_1439,sarcasm twitter_1440,not_sarcasm twitter_1441,sarcasm twitter_1442,not_sarcasm twitter_1443,not_sarcasm twitter_1444,not_sarcasm twitter_1445,not_sarcasm twitter_1446,not_sarcasm twitter_1447,sarcasm twitter_1448,sarcasm twitter_1449,sarcasm twitter_1450,sarcasm twitter_1451,sarcasm twitter_1452,sarcasm twitter_1453,sarcasm twitter_1454,sarcasm twitter_1455,sarcasm twitter_1456,sarcasm twitter_1457,not_sarcasm twitter_1458,not_sarcasm twitter_1459,not_sarcasm twitter_1460,sarcasm twitter_1461,sarcasm twitter_1462,sarcasm twitter_1463,sarcasm twitter_1464,sarcasm twitter_1465,sarcasm twitter_1466,sarcasm twitter_1467,not_sarcasm twitter_1468,sarcasm twitter_1469,sarcasm twitter_1470,sarcasm twitter_1471,sarcasm twitter_1472,sarcasm twitter_1473,not_sarcasm twitter_1474,not_sarcasm twitter_1475,sarcasm twitter_1476,sarcasm twitter_1477,sarcasm twitter_1478,not_sarcasm twitter_1479,sarcasm twitter_1480,not_sarcasm twitter_1481,sarcasm twitter_1482,not_sarcasm twitter_1483,sarcasm twitter_1484,sarcasm twitter_1485,not_sarcasm twitter_1486,sarcasm twitter_1487,sarcasm twitter_1488,sarcasm twitter_1489,sarcasm twitter_1490,sarcasm twitter_1491,not_sarcasm twitter_1492,sarcasm twitter_1493,sarcasm twitter_1494,sarcasm twitter_1495,not_sarcasm twitter_1496,sarcasm twitter_1497,not_sarcasm twitter_1498,sarcasm twitter_1499,not_sarcasm twitter_1500,not_sarcasm twitter_1501,not_sarcasm twitter_1502,not_sarcasm twitter_1503,not_sarcasm twitter_1504,sarcasm twitter_1505,not_sarcasm twitter_1506,sarcasm twitter_1507,sarcasm twitter_1508,sarcasm twitter_1509,sarcasm twitter_1510,sarcasm twitter_1511,sarcasm twitter_1512,sarcasm twitter_1513,sarcasm twitter_1514,sarcasm twitter_1515,not_sarcasm twitter_1516,sarcasm twitter_1517,not_sarcasm twitter_1518,sarcasm twitter_1519,not_sarcasm twitter_1520,sarcasm twitter_1521,sarcasm twitter_1522,sarcasm twitter_1523,sarcasm twitter_1524,not_sarcasm twitter_1525,sarcasm twitter_1526,not_sarcasm twitter_1527,sarcasm twitter_1528,sarcasm twitter_1529,sarcasm twitter_1530,sarcasm twitter_1531,not_sarcasm twitter_1532,sarcasm twitter_1533,sarcasm twitter_1534,sarcasm twitter_1535,sarcasm twitter_1536,not_sarcasm twitter_1537,sarcasm twitter_1538,sarcasm twitter_1539,sarcasm twitter_1540,sarcasm twitter_1541,sarcasm twitter_1542,sarcasm twitter_1543,not_sarcasm twitter_1544,sarcasm twitter_1545,not_sarcasm twitter_1546,sarcasm twitter_1547,sarcasm twitter_1548,not_sarcasm twitter_1549,sarcasm twitter_1550,sarcasm twitter_1551,sarcasm twitter_1552,sarcasm twitter_1553,sarcasm twitter_1554,sarcasm twitter_1555,not_sarcasm twitter_1556,sarcasm twitter_1557,sarcasm twitter_1558,sarcasm twitter_1559,sarcasm twitter_1560,sarcasm twitter_1561,sarcasm twitter_1562,sarcasm twitter_1563,not_sarcasm twitter_1564,sarcasm twitter_1565,sarcasm twitter_1566,not_sarcasm twitter_1567,sarcasm twitter_1568,not_sarcasm twitter_1569,not_sarcasm twitter_1570,sarcasm twitter_1571,sarcasm twitter_1572,sarcasm twitter_1573,not_sarcasm twitter_1574,not_sarcasm twitter_1575,not_sarcasm twitter_1576,sarcasm twitter_1577,sarcasm twitter_1578,sarcasm twitter_1579,sarcasm twitter_1580,not_sarcasm twitter_1581,sarcasm twitter_1582,not_sarcasm twitter_1583,not_sarcasm twitter_1584,not_sarcasm twitter_1585,sarcasm twitter_1586,sarcasm twitter_1587,not_sarcasm twitter_1588,sarcasm twitter_1589,not_sarcasm twitter_1590,not_sarcasm twitter_1591,sarcasm twitter_1592,not_sarcasm twitter_1593,not_sarcasm twitter_1594,sarcasm twitter_1595,not_sarcasm twitter_1596,sarcasm twitter_1597,sarcasm twitter_1598,not_sarcasm twitter_1599,sarcasm twitter_1600,sarcasm twitter_1601,sarcasm twitter_1602,not_sarcasm twitter_1603,not_sarcasm twitter_1604,sarcasm twitter_1605,sarcasm twitter_1606,sarcasm twitter_1607,sarcasm twitter_1608,not_sarcasm twitter_1609,sarcasm twitter_1610,sarcasm twitter_1611,sarcasm twitter_1612,not_sarcasm twitter_1613,sarcasm twitter_1614,not_sarcasm twitter_1615,sarcasm twitter_1616,sarcasm twitter_1617,sarcasm twitter_1618,not_sarcasm twitter_1619,not_sarcasm twitter_1620,sarcasm twitter_1621,sarcasm twitter_1622,not_sarcasm twitter_1623,not_sarcasm twitter_1624,not_sarcasm twitter_1625,sarcasm twitter_1626,sarcasm twitter_1627,sarcasm twitter_1628,not_sarcasm twitter_1629,sarcasm twitter_1630,not_sarcasm twitter_1631,not_sarcasm twitter_1632,sarcasm twitter_1633,sarcasm twitter_1634,sarcasm twitter_1635,sarcasm twitter_1636,sarcasm twitter_1637,not_sarcasm twitter_1638,sarcasm twitter_1639,sarcasm twitter_1640,sarcasm twitter_1641,not_sarcasm twitter_1642,sarcasm twitter_1643,sarcasm twitter_1644,sarcasm twitter_1645,sarcasm twitter_1646,sarcasm twitter_1647,not_sarcasm twitter_1648,not_sarcasm twitter_1649,sarcasm twitter_1650,not_sarcasm twitter_1651,not_sarcasm twitter_1652,sarcasm twitter_1653,sarcasm twitter_1654,sarcasm twitter_1655,sarcasm twitter_1656,sarcasm twitter_1657,sarcasm twitter_1658,not_sarcasm twitter_1659,sarcasm twitter_1660,sarcasm twitter_1661,not_sarcasm twitter_1662,sarcasm twitter_1663,not_sarcasm twitter_1664,sarcasm twitter_1665,sarcasm twitter_1666,sarcasm twitter_1667,not_sarcasm twitter_1668,sarcasm twitter_1669,not_sarcasm twitter_1670,sarcasm twitter_1671,sarcasm twitter_1672,sarcasm twitter_1673,not_sarcasm twitter_1674,sarcasm twitter_1675,sarcasm twitter_1676,sarcasm twitter_1677,sarcasm twitter_1678,not_sarcasm twitter_1679,sarcasm twitter_1680,sarcasm twitter_1681,not_sarcasm twitter_1682,sarcasm twitter_1683,sarcasm twitter_1684,sarcasm twitter_1685,sarcasm twitter_1686,sarcasm twitter_1687,sarcasm twitter_1688,not_sarcasm twitter_1689,not_sarcasm twitter_1690,not_sarcasm twitter_1691,sarcasm twitter_1692,sarcasm twitter_1693,sarcasm twitter_1694,not_sarcasm twitter_1695,not_sarcasm twitter_1696,sarcasm twitter_1697,sarcasm twitter_1698,not_sarcasm twitter_1699,sarcasm twitter_1700,not_sarcasm twitter_1701,sarcasm twitter_1702,sarcasm twitter_1703,sarcasm twitter_1704,not_sarcasm twitter_1705,sarcasm twitter_1706,sarcasm twitter_1707,not_sarcasm twitter_1708,sarcasm twitter_1709,not_sarcasm twitter_1710,sarcasm twitter_1711,sarcasm twitter_1712,not_sarcasm twitter_1713,sarcasm twitter_1714,not_sarcasm twitter_1715,not_sarcasm twitter_1716,sarcasm twitter_1717,not_sarcasm twitter_1718,not_sarcasm twitter_1719,not_sarcasm twitter_1720,sarcasm twitter_1721,sarcasm twitter_1722,not_sarcasm twitter_1723,sarcasm twitter_1724,sarcasm twitter_1725,not_sarcasm twitter_1726,sarcasm twitter_1727,not_sarcasm twitter_1728,sarcasm twitter_1729,not_sarcasm twitter_1730,sarcasm twitter_1731,sarcasm twitter_1732,sarcasm twitter_1733,sarcasm twitter_1734,not_sarcasm twitter_1735,sarcasm twitter_1736,sarcasm twitter_1737,sarcasm twitter_1738,sarcasm twitter_1739,not_sarcasm twitter_1740,sarcasm twitter_1741,sarcasm twitter_1742,not_sarcasm twitter_1743,not_sarcasm twitter_1744,sarcasm twitter_1745,sarcasm twitter_1746,sarcasm twitter_1747,sarcasm twitter_1748,sarcasm twitter_1749,sarcasm twitter_1750,not_sarcasm twitter_1751,sarcasm twitter_1752,sarcasm twitter_1753,not_sarcasm twitter_1754,sarcasm twitter_1755,not_sarcasm twitter_1756,sarcasm twitter_1757,not_sarcasm twitter_1758,sarcasm twitter_1759,sarcasm twitter_1760,sarcasm twitter_1761,sarcasm twitter_1762,sarcasm twitter_1763,not_sarcasm twitter_1764,not_sarcasm twitter_1765,sarcasm twitter_1766,sarcasm twitter_1767,not_sarcasm twitter_1768,sarcasm twitter_1769,sarcasm twitter_1770,sarcasm twitter_1771,sarcasm twitter_1772,sarcasm twitter_1773,not_sarcasm twitter_1774,sarcasm twitter_1775,not_sarcasm twitter_1776,sarcasm twitter_1777,not_sarcasm twitter_1778,sarcasm twitter_1779,not_sarcasm twitter_1780,sarcasm twitter_1781,not_sarcasm twitter_1782,sarcasm twitter_1783,sarcasm twitter_1784,sarcasm twitter_1785,sarcasm twitter_1786,sarcasm twitter_1787,not_sarcasm twitter_1788,sarcasm twitter_1789,not_sarcasm twitter_1790,sarcasm twitter_1791,not_sarcasm twitter_1792,sarcasm twitter_1793,not_sarcasm twitter_1794,sarcasm twitter_1795,sarcasm twitter_1796,not_sarcasm twitter_1797,sarcasm twitter_1798,not_sarcasm twitter_1799,not_sarcasm twitter_1800,not_sarcasm bert sentiment analysis to detect twitter sarcasm 1. project team member * name: zainal hakim * netid: zainalh2 2. project topic the project topic falls under the text classification competition option. the main goals of this project: 1. to explore sentiment analysis using a state-of-the-art method 2. to beat the baseline score using the given training and sample datasets 3. sentiment classifier using bert bidirectional encoder representations from transformers (bert) is a state-of-the-art pre- training natural language processing (nlp) model developed by google. in this project, sentiment analysis uses bert to detect sarcasm in twitter tweets. 4. programming language the project uses python 3.8 programming language to implement software code. 5. previous experience with bert i have no previous experience with bert nor with deep learning. i have a little experience with the python programming language and the pandas library. hint: download the pdf files to view it 1. project result summary the project score outperforms the baseline score on the project competition leaderboard. - the project f1 score: 0.757905138339921 - the baseline f1 score: 0.723 2. project team member name: zainal hakim netid: zainalh2 3. project topic the project topic falls under the text classification competition option. the main goals of this project: 1. to explore sentiment analysis using a state-of-the-art method 2. to beat the baseline score using the given training and sample datasets 4. sentiment classifier using bert bidirectional encoder representations from transformers (bert) is a state-of-the-art pre-training natural language processing (nlp) model developed by google. in this project, sentiment analysis uses bert to detect sarcasm in twitter tweets. 5. programming language & library the project uses: - python 3.8 programming language to implement software code. - huggingface library: https://huggingface.co 6. previous experience with bert i have no previous experience with bert nor with deep learning. i have a little experience with the python programming language and the pandas library. 7. important file(s) the final trained models: 1. bert large uncased model: https://drive.google.com/file/d/1emcbxsfpqovg4w_-nob4ebwa0qtr9slq/view?usp=sharing 2. bert base uncased model: https://drive.google.com/file/d/1--_k6qvpriv3htp-pzwjm9066ebtma8s/view?usp=sharing the hyperparameters in my experiments are: - learning rate: 2e-5 - batch size: 5 (considering memory size) - epochs: 4 iterations - epsilon: 1e-8 - random seed value: 17 8. demo demo video is available: - here https://drive.google.com/file/d/1paminsmvxlgkb3jzft9qru-sbtsoiqbj/view?usp=sharing - or here https://www.youtube.com/watch?v=psyn2luwpqg 9. challenges to train and evaluate the bert model requires computing power: a fast cpu and a large ram size. it needs a dedicated environment such as google colab. to train the large models in my experiments, it requires a google colab pro, which is the paid version. it is not easy to predict the results of the experiments since bert is one of the deep learning algorithms that involves many hidden parameters. we can easily overfit the model with the given parameters and text inputs. there is no easy way to explain why one parameter performs better than the other parameter. selecting a feature from the tweet to identify the sentiment is one of the most challenging parts of the project."	['project', 'progress', 'report', 'topic', 'bert', 'sentiment', 'analysis', 'detect', 'twitter', 'sarcasm', 'team', 'member', 'name', 'zainal', 'hakim', 'netid', 'zainalh', 'result', 'answertxt', 'status', 'completed', 'scores', 'beating', 'baseline', 'fscore', 'recall', 'precision', 'software', 'code', 'source', 'files', 'training', 'evaluation', 'link', 'demo', 'documentation', 'document', 'proposal', 'video', 'url', 'httpswwwyoutubecomwatchvpsynluwpqg', 'challenges', 'train', 'evaluate', 'model', 'requires', 'computing', 'power', 'fast', 'cpu', 'large', 'ram', 'size', 'needs', 'dedicated', 'environment', 'google', 'colab', 'models', 'experiments', 'pro', 'paid', 'version', 'easy', 'predict', 'results', 'since', 'one', 'deep', 'learning', 'algorithms', 'involves', 'many', 'hidden', 'parameters', 'easily', 'overfit', 'given', 'text', 'inputs', 'way', 'explain', 'parameter', 'performs', 'better', 'selecting', 'feature', 'tweet', 'identify', 'challenging', 'parts', 'naive', 'approach', 'zainalhillinoisedu', 'table', 'content', 'introduction', 'b', 'bidirectional', 'encoder', 'representations', 'transformers', 'c', 'dataset', 'description', 'e', 'f', 'naive_bert_sentiment_analysisipynb', 'review', 'configuration', 'mounting', 'drive', 'session', 'save', 'main', 'python', 'class', 'demo_model_evaluationipynb', 'first', 'steps', 'already', 'explained', 'detail', 'previous', 'section', 'preparing', 'encoded', 'testing', 'data', 'loader', 'run', 'batch', 'iteration', 'generate', 'anwertxt', 'file', 'post', 'livedatalab', 'scoring', 'g', 'conclusion', 'reference', 'appendix', 'form', 'figurative', 'language', 'implies', 'negative', 'displaying', 'positive', 'surface', 'joshi', 'et', 'al', 'present', 'using', 'transformersbased', 'pretrained', 'considers', 'response', 'completely', 'ignores', 'context', 'uses', 'transformer', 'embedding', 'representation', 'trained', 'evaluated', 'datasets', 'best', 'performance', 'gives', 'classification', 'competition', 'score', 'four', 'epoch', 'iterations', 'explains', 'relationship', 'important', 'documented', 'trainedmodel', 'purpose', 'set', 'predictions', 'transformerbased', 'technique', 'natural', 'processing', 'pretraining', 'developed', 'original', 'english', 'comes', 'two', 'types', 'type', 'layer', 'head', 'corpus', 'word', 'base', 'essentially', 'leverage', 'larger', 'expected', 'perform', 'nlp', 'tasks', 'paper', 'available', 'labeled', 'unique', 'id', 'line', 'contains', 'json', 'object', 'following', 'columns', 'label', 'not_sarcasm', 'classified', 'conversation', 'testingevaluation', 'identifier', 'sample', 'lines', 'statistics', 'detailed', 'github', 'repository', 'hypothesize', 'always', 'support', 'opposing', 'effect', 'supports', 'fig', 'illustration', 'reduces', 'quality', 'n', 'increase', 'critical', 'utilize', 'responses', 'consider', 'sentimentlabeled', 'ignore', 'call', 'future', 'use', 'advanced', 'machine', 'techniques', 'selectively', 'reconstruct', 'uncased', 'finetuning', 'procedure', 'choose', 'hyperparameters', 'rate', 'considering', 'memory', 'epochs', 'epsilon', 'random', 'seed', 'value', 'handle', 'maximum', 'characters', 'input', 'truncates', 'less', 'case', 'guaranteed', 'words', 'prints', 'check', 'length', 'max', 'chars', 'implemented', 'notebooks', 'notebook', 'selected', 'implement', 'test', 'libraries', 'numpy', 'pytorch', 'cu', 'huggingface', 'trains', 'evaluates', 'provided', 'end', 'copied', 'stored', 'folder', 'install', 'modules', 'required', 'copy', 'trainjsonl', 'testjsonl', 'account', 'created', 'shared', 'public', 'prompt', 'click', 'login', 'page', 'select', 'allow', 'button', 'cloud', 'sdk', 'access', 'finally', 'prompts', 'verification', 'paste', 'enter', 'box', 'press', 'ready', 'need', 'mount', 'directory', 'contentuiuc', 'execution', 'mounted', 'look', 'like', 'keep', 'permanently', 'implements', 'bert_model', 'handles', 'read', 'jsonl', 'list', 'convert', 'pandas', 'dataframe', 'create', 'store', 'signatures', 'details', 'please', 'comment', 'describes', 'step', 'algorithm', 'tokenizer', 'encode', 'prepare', 'chosen', 'hyperparameter', 'adamw', 'optimizer', 'used', 'calculate', 'convergence', 'considered', 'fastest', 'task', 'passing', 'make', 'sure', 'processed', 'mode', 'iterate', 'pass', 'load', 'outputs', 'logits', 'array', 'elements', 'configured', 'element', 'represents', 'second', 'argmax', 'function', 'return', 'index', 'returns', 'final', 'write', 'output', 'hypothesis', 'experiment', 'deletes', 'ends', 'locations', 'earlier', 'next', 'illustrate', 'demonstrate', 'reproduce', 'import', 'installation', 'authorize', 'described', 'panda', 'batches', 'objects', 'device', 'gpu', 'applicable', 'process', 'screen', 'snippet', 'leaderboard', 'snapshot', 'nov', 'summary', 'surprisingly', 'almost', 'good', 'try', 'different', 'roberta', 'xlnet', 'could', 'produce', 'higher', 'scope', 'proposed', 'explore', 'hence', 'reporting', 'would', 'topics', 'additional', 'another', 'aditya', 'pushpak', 'bhattacharyya', 'mark', 'j', 'car', 'man', 'automatic', 'detection', 'survey', 'acm', 'surveys', 'jacob', 'devlin', 'mingwei', 'chang', 'kenton', 'lee', 'kristina', 'toutanova', 'understanding', 'twitter_not_sarcasm', 'twitter_sarcasm', 'pre', 'falls', 'option', 'goals', 'stateoftheart', 'method', 'beat', 'classifier', 'tweets', 'programming', 'experience', 'little', 'library', 'hint', 'download', 'pdf', 'view', 'outperforms', 'httpshuggingfaceco', 'httpsdrivegooglecomfiledemcbxsfpqovgw_nobebwaqtrslqviewuspsharing', 'httpsdrivegooglecomfiled_kqvprivhtppzwjmebtmasviewuspsharing', 'httpsdrivegooglecomfiledpaminsmvxlgkbjzftqrusbtsoiqbjviewuspsharing']
